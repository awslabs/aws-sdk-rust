// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>One or more arguments to the <code>StartStreamTranscription</code> or
    /// <code>StartMedicalStreamTranscription</code> operation was invalid. For example,
    /// <code>MediaEncoding</code> was not set to a valid encoding, or <code>LanguageCode</code> was
    /// not set to a valid code. Check the parameters and try your request again.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>A new stream started with the same session ID. The current stream has been
    /// terminated.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>A problem occurred while processing the audio. Amazon Transcribe or Amazon Transcribe Medical terminated processing. Try
    /// your request again.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>You have exceeded the maximum number of concurrent transcription streams, are starting
    /// transcription streams too quickly, or the maximum audio length of 4 hours. Wait until a stream
    /// has finished processing, or break your audio stream into smaller chunks and try your request
    /// again.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>Service is currently unavailable. Try your request later.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// An unhandled error occurred.
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::StartMedicalStreamTranscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartMedicalStreamTranscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartMedicalStreamTranscriptionErrorKind::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
                crate::error::StartMedicalStreamTranscriptionErrorKind::BadRequestException(inner) => Error::BadRequestException(inner),
                crate::error::StartMedicalStreamTranscriptionErrorKind::InternalFailureException(inner) => Error::InternalFailureException(inner),
                crate::error::StartMedicalStreamTranscriptionErrorKind::ConflictException(inner) => Error::ConflictException(inner),
                crate::error::StartMedicalStreamTranscriptionErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::StartMedicalStreamTranscriptionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartStreamTranscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartStreamTranscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartStreamTranscriptionErrorKind::ServiceUnavailableException(
                    inner,
                ) => Error::ServiceUnavailableException(inner),
                crate::error::StartStreamTranscriptionErrorKind::BadRequestException(inner) => {
                    Error::BadRequestException(inner)
                }
                crate::error::StartStreamTranscriptionErrorKind::InternalFailureException(
                    inner,
                ) => Error::InternalFailureException(inner),
                crate::error::StartStreamTranscriptionErrorKind::ConflictException(inner) => {
                    Error::ConflictException(inner)
                }
                crate::error::StartStreamTranscriptionErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::StartStreamTranscriptionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
