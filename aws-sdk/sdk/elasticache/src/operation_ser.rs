// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ResourceName");
    if let Some(var_2) = &input.resource_name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Tags");
    if let Some(var_4) = &input.tags {
        let mut list_6 = scope_3.start_list(false, Some("Tag"));
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_7, item_5)?;
        }
        list_6.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cache_security_group_ingress(
    input: &crate::input::AuthorizeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_9) = &input.cache_security_group_name {
        scope_8.string(var_9);
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_11) = &input.ec2_security_group_name {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_13) = &input.ec2_security_group_owner_id {
        scope_12.string(var_13);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_apply_update_action(
    input: &crate::input::BatchApplyUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchApplyUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("ReplicationGroupIds");
    if let Some(var_15) = &input.replication_group_ids {
        let mut list_17 = scope_14.start_list(false, None);
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("CacheClusterIds");
    if let Some(var_20) = &input.cache_cluster_ids {
        let mut list_22 = scope_19.start_list(false, None);
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(item_21);
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ServiceUpdateName");
    if let Some(var_25) = &input.service_update_name {
        scope_24.string(var_25);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_stop_update_action(
    input: &crate::input::BatchStopUpdateActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchStopUpdateAction", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ReplicationGroupIds");
    if let Some(var_27) = &input.replication_group_ids {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            entry_30.string(item_28);
        }
        list_29.finish();
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("CacheClusterIds");
    if let Some(var_32) = &input.cache_cluster_ids {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            entry_35.string(item_33);
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("ServiceUpdateName");
    if let Some(var_37) = &input.service_update_name {
        scope_36.string(var_37);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_complete_migration(
    input: &crate::input::CompleteMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CompleteMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("ReplicationGroupId");
    if let Some(var_39) = &input.replication_group_id {
        scope_38.string(var_39);
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("Force");
    if input.force {
        scope_40.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_snapshot(
    input: &crate::input::CopySnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopySnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("SourceSnapshotName");
    if let Some(var_42) = &input.source_snapshot_name {
        scope_41.string(var_42);
    }
    #[allow(unused_mut)]
    let mut scope_43 = writer.prefix("TargetSnapshotName");
    if let Some(var_44) = &input.target_snapshot_name {
        scope_43.string(var_44);
    }
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("TargetBucket");
    if let Some(var_46) = &input.target_bucket {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("KmsKeyId");
    if let Some(var_48) = &input.kms_key_id {
        scope_47.string(var_48);
    }
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Tags");
    if let Some(var_50) = &input.tags {
        let mut list_52 = scope_49.start_list(false, Some("Tag"));
        for item_51 in var_50 {
            #[allow(unused_mut)]
            let mut entry_53 = list_52.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_53, item_51)?;
        }
        list_52.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_cluster(
    input: &crate::input::CreateCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("CacheClusterId");
    if let Some(var_55) = &input.cache_cluster_id {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("ReplicationGroupId");
    if let Some(var_57) = &input.replication_group_id {
        scope_56.string(var_57);
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("AZMode");
    if let Some(var_59) = &input.az_mode {
        scope_58.string(var_59.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_60 = writer.prefix("PreferredAvailabilityZone");
    if let Some(var_61) = &input.preferred_availability_zone {
        scope_60.string(var_61);
    }
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("PreferredAvailabilityZones");
    if let Some(var_63) = &input.preferred_availability_zones {
        let mut list_65 = scope_62.start_list(false, Some("PreferredAvailabilityZone"));
        for item_64 in var_63 {
            #[allow(unused_mut)]
            let mut entry_66 = list_65.entry();
            entry_66.string(item_64);
        }
        list_65.finish();
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("NumCacheNodes");
    if let Some(var_68) = &input.num_cache_nodes {
        scope_67.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CacheNodeType");
    if let Some(var_70) = &input.cache_node_type {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Engine");
    if let Some(var_72) = &input.engine {
        scope_71.string(var_72);
    }
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("EngineVersion");
    if let Some(var_74) = &input.engine_version {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("CacheParameterGroupName");
    if let Some(var_76) = &input.cache_parameter_group_name {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_78) = &input.cache_subnet_group_name {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_80) = &input.cache_security_group_names {
        let mut list_82 = scope_79.start_list(false, Some("CacheSecurityGroupName"));
        for item_81 in var_80 {
            #[allow(unused_mut)]
            let mut entry_83 = list_82.entry();
            entry_83.string(item_81);
        }
        list_82.finish();
    }
    #[allow(unused_mut)]
    let mut scope_84 = writer.prefix("SecurityGroupIds");
    if let Some(var_85) = &input.security_group_ids {
        let mut list_87 = scope_84.start_list(false, Some("SecurityGroupId"));
        for item_86 in var_85 {
            #[allow(unused_mut)]
            let mut entry_88 = list_87.entry();
            entry_88.string(item_86);
        }
        list_87.finish();
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("Tags");
    if let Some(var_90) = &input.tags {
        let mut list_92 = scope_89.start_list(false, Some("Tag"));
        for item_91 in var_90 {
            #[allow(unused_mut)]
            let mut entry_93 = list_92.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_93, item_91)?;
        }
        list_92.finish();
    }
    #[allow(unused_mut)]
    let mut scope_94 = writer.prefix("SnapshotArns");
    if let Some(var_95) = &input.snapshot_arns {
        let mut list_97 = scope_94.start_list(false, Some("SnapshotArn"));
        for item_96 in var_95 {
            #[allow(unused_mut)]
            let mut entry_98 = list_97.entry();
            entry_98.string(item_96);
        }
        list_97.finish();
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("SnapshotName");
    if let Some(var_100) = &input.snapshot_name {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_102) = &input.preferred_maintenance_window {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("Port");
    if let Some(var_104) = &input.port {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("NotificationTopicArn");
    if let Some(var_106) = &input.notification_topic_arn {
        scope_105.string(var_106);
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_108) = &input.auto_minor_version_upgrade {
        scope_107.boolean(*var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_110) = &input.snapshot_retention_limit {
        scope_109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("SnapshotWindow");
    if let Some(var_112) = &input.snapshot_window {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("AuthToken");
    if let Some(var_114) = &input.auth_token {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("OutpostMode");
    if let Some(var_116) = &input.outpost_mode {
        scope_115.string(var_116.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("PreferredOutpostArn");
    if let Some(var_118) = &input.preferred_outpost_arn {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("PreferredOutpostArns");
    if let Some(var_120) = &input.preferred_outpost_arns {
        let mut list_122 = scope_119.start_list(false, Some("PreferredOutpostArn"));
        for item_121 in var_120 {
            #[allow(unused_mut)]
            let mut entry_123 = list_122.entry();
            entry_123.string(item_121);
        }
        list_122.finish();
    }
    #[allow(unused_mut)]
    let mut scope_124 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_125) = &input.log_delivery_configurations {
        let mut list_127 = scope_124.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_126 in var_125 {
            #[allow(unused_mut)]
            let mut entry_128 = list_127.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_128, item_126,
            )?;
        }
        list_127.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_parameter_group(
    input: &crate::input::CreateCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("CacheParameterGroupName");
    if let Some(var_130) = &input.cache_parameter_group_name {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_132) = &input.cache_parameter_group_family {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("Description");
    if let Some(var_134) = &input.description {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Tags");
    if let Some(var_136) = &input.tags {
        let mut list_138 = scope_135.start_list(false, Some("Tag"));
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_139, item_137)?;
        }
        list_138.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_security_group(
    input: &crate::input::CreateCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_141) = &input.cache_security_group_name {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Description");
    if let Some(var_143) = &input.description {
        scope_142.string(var_143);
    }
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("Tags");
    if let Some(var_145) = &input.tags {
        let mut list_147 = scope_144.start_list(false, Some("Tag"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_148, item_146)?;
        }
        list_147.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cache_subnet_group(
    input: &crate::input::CreateCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_150) = &input.cache_subnet_group_name {
        scope_149.string(var_150);
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_152) = &input.cache_subnet_group_description {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("SubnetIds");
    if let Some(var_154) = &input.subnet_ids {
        let mut list_156 = scope_153.start_list(false, Some("SubnetIdentifier"));
        for item_155 in var_154 {
            #[allow(unused_mut)]
            let mut entry_157 = list_156.entry();
            entry_157.string(item_155);
        }
        list_156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_158 = writer.prefix("Tags");
    if let Some(var_159) = &input.tags {
        let mut list_161 = scope_158.start_list(false, Some("Tag"));
        for item_160 in var_159 {
            #[allow(unused_mut)]
            let mut entry_162 = list_161.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_162, item_160)?;
        }
        list_161.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_replication_group(
    input: &crate::input::CreateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_163 = writer.prefix("GlobalReplicationGroupIdSuffix");
    if let Some(var_164) = &input.global_replication_group_id_suffix {
        scope_163.string(var_164);
    }
    #[allow(unused_mut)]
    let mut scope_165 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_166) = &input.global_replication_group_description {
        scope_165.string(var_166);
    }
    #[allow(unused_mut)]
    let mut scope_167 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_168) = &input.primary_replication_group_id {
        scope_167.string(var_168);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_replication_group(
    input: &crate::input::CreateReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_169 = writer.prefix("ReplicationGroupId");
    if let Some(var_170) = &input.replication_group_id {
        scope_169.string(var_170);
    }
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_172) = &input.replication_group_description {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_174) = &input.global_replication_group_id {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("PrimaryClusterId");
    if let Some(var_176) = &input.primary_cluster_id {
        scope_175.string(var_176);
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_178) = &input.automatic_failover_enabled {
        scope_177.boolean(*var_178);
    }
    #[allow(unused_mut)]
    let mut scope_179 = writer.prefix("MultiAZEnabled");
    if let Some(var_180) = &input.multi_az_enabled {
        scope_179.boolean(*var_180);
    }
    #[allow(unused_mut)]
    let mut scope_181 = writer.prefix("NumCacheClusters");
    if let Some(var_182) = &input.num_cache_clusters {
        scope_181.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_182).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_183 = writer.prefix("PreferredCacheClusterAZs");
    if let Some(var_184) = &input.preferred_cache_cluster_a_zs {
        let mut list_186 = scope_183.start_list(false, Some("AvailabilityZone"));
        for item_185 in var_184 {
            #[allow(unused_mut)]
            let mut entry_187 = list_186.entry();
            entry_187.string(item_185);
        }
        list_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_188 = writer.prefix("NumNodeGroups");
    if let Some(var_189) = &input.num_node_groups {
        scope_188.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("ReplicasPerNodeGroup");
    if let Some(var_191) = &input.replicas_per_node_group {
        scope_190.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_192 = writer.prefix("NodeGroupConfiguration");
    if let Some(var_193) = &input.node_group_configuration {
        let mut list_195 = scope_192.start_list(false, Some("NodeGroupConfiguration"));
        for item_194 in var_193 {
            #[allow(unused_mut)]
            let mut entry_196 = list_195.entry();
            crate::query_ser::serialize_structure_crate_model_node_group_configuration(
                entry_196, item_194,
            )?;
        }
        list_195.finish();
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("CacheNodeType");
    if let Some(var_198) = &input.cache_node_type {
        scope_197.string(var_198);
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("Engine");
    if let Some(var_200) = &input.engine {
        scope_199.string(var_200);
    }
    #[allow(unused_mut)]
    let mut scope_201 = writer.prefix("EngineVersion");
    if let Some(var_202) = &input.engine_version {
        scope_201.string(var_202);
    }
    #[allow(unused_mut)]
    let mut scope_203 = writer.prefix("CacheParameterGroupName");
    if let Some(var_204) = &input.cache_parameter_group_name {
        scope_203.string(var_204);
    }
    #[allow(unused_mut)]
    let mut scope_205 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_206) = &input.cache_subnet_group_name {
        scope_205.string(var_206);
    }
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_208) = &input.cache_security_group_names {
        let mut list_210 = scope_207.start_list(false, Some("CacheSecurityGroupName"));
        for item_209 in var_208 {
            #[allow(unused_mut)]
            let mut entry_211 = list_210.entry();
            entry_211.string(item_209);
        }
        list_210.finish();
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("SecurityGroupIds");
    if let Some(var_213) = &input.security_group_ids {
        let mut list_215 = scope_212.start_list(false, Some("SecurityGroupId"));
        for item_214 in var_213 {
            #[allow(unused_mut)]
            let mut entry_216 = list_215.entry();
            entry_216.string(item_214);
        }
        list_215.finish();
    }
    #[allow(unused_mut)]
    let mut scope_217 = writer.prefix("Tags");
    if let Some(var_218) = &input.tags {
        let mut list_220 = scope_217.start_list(false, Some("Tag"));
        for item_219 in var_218 {
            #[allow(unused_mut)]
            let mut entry_221 = list_220.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_221, item_219)?;
        }
        list_220.finish();
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("SnapshotArns");
    if let Some(var_223) = &input.snapshot_arns {
        let mut list_225 = scope_222.start_list(false, Some("SnapshotArn"));
        for item_224 in var_223 {
            #[allow(unused_mut)]
            let mut entry_226 = list_225.entry();
            entry_226.string(item_224);
        }
        list_225.finish();
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("SnapshotName");
    if let Some(var_228) = &input.snapshot_name {
        scope_227.string(var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_230) = &input.preferred_maintenance_window {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("Port");
    if let Some(var_232) = &input.port {
        scope_231.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_232).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_233 = writer.prefix("NotificationTopicArn");
    if let Some(var_234) = &input.notification_topic_arn {
        scope_233.string(var_234);
    }
    #[allow(unused_mut)]
    let mut scope_235 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_236) = &input.auto_minor_version_upgrade {
        scope_235.boolean(*var_236);
    }
    #[allow(unused_mut)]
    let mut scope_237 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_238) = &input.snapshot_retention_limit {
        scope_237.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_238).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_239 = writer.prefix("SnapshotWindow");
    if let Some(var_240) = &input.snapshot_window {
        scope_239.string(var_240);
    }
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("AuthToken");
    if let Some(var_242) = &input.auth_token {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("TransitEncryptionEnabled");
    if let Some(var_244) = &input.transit_encryption_enabled {
        scope_243.boolean(*var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("AtRestEncryptionEnabled");
    if let Some(var_246) = &input.at_rest_encryption_enabled {
        scope_245.boolean(*var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("KmsKeyId");
    if let Some(var_248) = &input.kms_key_id {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("UserGroupIds");
    if let Some(var_250) = &input.user_group_ids {
        let mut list_252 = scope_249.start_list(false, None);
        for item_251 in var_250 {
            #[allow(unused_mut)]
            let mut entry_253 = list_252.entry();
            entry_253.string(item_251);
        }
        list_252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_255) = &input.log_delivery_configurations {
        let mut list_257 = scope_254.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_258, item_256,
            )?;
        }
        list_257.finish();
    }
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("DataTieringEnabled");
    if let Some(var_260) = &input.data_tiering_enabled {
        scope_259.boolean(*var_260);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot(
    input: &crate::input::CreateSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("ReplicationGroupId");
    if let Some(var_262) = &input.replication_group_id {
        scope_261.string(var_262);
    }
    #[allow(unused_mut)]
    let mut scope_263 = writer.prefix("CacheClusterId");
    if let Some(var_264) = &input.cache_cluster_id {
        scope_263.string(var_264);
    }
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("SnapshotName");
    if let Some(var_266) = &input.snapshot_name {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("KmsKeyId");
    if let Some(var_268) = &input.kms_key_id {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Tags");
    if let Some(var_270) = &input.tags {
        let mut list_272 = scope_269.start_list(false, Some("Tag"));
        for item_271 in var_270 {
            #[allow(unused_mut)]
            let mut entry_273 = list_272.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_273, item_271)?;
        }
        list_272.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user(
    input: &crate::input::CreateUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("UserId");
    if let Some(var_275) = &input.user_id {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("UserName");
    if let Some(var_277) = &input.user_name {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("Engine");
    if let Some(var_279) = &input.engine {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("Passwords");
    if let Some(var_281) = &input.passwords {
        let mut list_283 = scope_280.start_list(false, None);
        for item_282 in var_281 {
            #[allow(unused_mut)]
            let mut entry_284 = list_283.entry();
            entry_284.string(item_282);
        }
        list_283.finish();
    }
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("AccessString");
    if let Some(var_286) = &input.access_string {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("NoPasswordRequired");
    if let Some(var_288) = &input.no_password_required {
        scope_287.boolean(*var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("Tags");
    if let Some(var_290) = &input.tags {
        let mut list_292 = scope_289.start_list(false, Some("Tag"));
        for item_291 in var_290 {
            #[allow(unused_mut)]
            let mut entry_293 = list_292.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_293, item_291)?;
        }
        list_292.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_user_group(
    input: &crate::input::CreateUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("UserGroupId");
    if let Some(var_295) = &input.user_group_id {
        scope_294.string(var_295);
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Engine");
    if let Some(var_297) = &input.engine {
        scope_296.string(var_297);
    }
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("UserIds");
    if let Some(var_299) = &input.user_ids {
        let mut list_301 = scope_298.start_list(false, None);
        for item_300 in var_299 {
            #[allow(unused_mut)]
            let mut entry_302 = list_301.entry();
            entry_302.string(item_300);
        }
        list_301.finish();
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Tags");
    if let Some(var_304) = &input.tags {
        let mut list_306 = scope_303.start_list(false, Some("Tag"));
        for item_305 in var_304 {
            #[allow(unused_mut)]
            let mut entry_307 = list_306.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_307, item_305)?;
        }
        list_306.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_node_groups_in_global_replication_group(
    input: &crate::input::DecreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DecreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_309) = &input.global_replication_group_id {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("NodeGroupCount");
    {
        scope_310.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("GlobalNodeGroupsToRemove");
    if let Some(var_312) = &input.global_node_groups_to_remove {
        let mut list_314 = scope_311.start_list(false, Some("GlobalNodeGroupId"));
        for item_313 in var_312 {
            #[allow(unused_mut)]
            let mut entry_315 = list_314.entry();
            entry_315.string(item_313);
        }
        list_314.finish();
    }
    #[allow(unused_mut)]
    let mut scope_316 = writer.prefix("GlobalNodeGroupsToRetain");
    if let Some(var_317) = &input.global_node_groups_to_retain {
        let mut list_319 = scope_316.start_list(false, Some("GlobalNodeGroupId"));
        for item_318 in var_317 {
            #[allow(unused_mut)]
            let mut entry_320 = list_319.entry();
            entry_320.string(item_318);
        }
        list_319.finish();
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("ApplyImmediately");
    {
        scope_321.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_decrease_replica_count(
    input: &crate::input::DecreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DecreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_322 = writer.prefix("ReplicationGroupId");
    if let Some(var_323) = &input.replication_group_id {
        scope_322.string(var_323);
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("NewReplicaCount");
    if let Some(var_325) = &input.new_replica_count {
        scope_324.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_325).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("ReplicaConfiguration");
    if let Some(var_327) = &input.replica_configuration {
        let mut list_329 = scope_326.start_list(false, Some("ConfigureShard"));
        for item_328 in var_327 {
            #[allow(unused_mut)]
            let mut entry_330 = list_329.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_330, item_328)?;
        }
        list_329.finish();
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("ReplicasToRemove");
    if let Some(var_332) = &input.replicas_to_remove {
        let mut list_334 = scope_331.start_list(false, None);
        for item_333 in var_332 {
            #[allow(unused_mut)]
            let mut entry_335 = list_334.entry();
            entry_335.string(item_333);
        }
        list_334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_336 = writer.prefix("ApplyImmediately");
    {
        scope_336.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_cluster(
    input: &crate::input::DeleteCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("CacheClusterId");
    if let Some(var_338) = &input.cache_cluster_id {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_340) = &input.final_snapshot_identifier {
        scope_339.string(var_340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_parameter_group(
    input: &crate::input::DeleteCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("CacheParameterGroupName");
    if let Some(var_342) = &input.cache_parameter_group_name {
        scope_341.string(var_342);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_security_group(
    input: &crate::input::DeleteCacheSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSecurityGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_344) = &input.cache_security_group_name {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cache_subnet_group(
    input: &crate::input::DeleteCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_346) = &input.cache_subnet_group_name {
        scope_345.string(var_346);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_replication_group(
    input: &crate::input::DeleteGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_348) = &input.global_replication_group_id {
        scope_347.string(var_348);
    }
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("RetainPrimaryReplicationGroup");
    {
        scope_349.boolean(input.retain_primary_replication_group);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_replication_group(
    input: &crate::input::DeleteReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("ReplicationGroupId");
    if let Some(var_351) = &input.replication_group_id {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("RetainPrimaryCluster");
    if let Some(var_353) = &input.retain_primary_cluster {
        scope_352.boolean(*var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("FinalSnapshotIdentifier");
    if let Some(var_355) = &input.final_snapshot_identifier {
        scope_354.string(var_355);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot(
    input: &crate::input::DeleteSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshot", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("SnapshotName");
    if let Some(var_357) = &input.snapshot_name {
        scope_356.string(var_357);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user(
    input: &crate::input::DeleteUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("UserId");
    if let Some(var_359) = &input.user_id {
        scope_358.string(var_359);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_user_group(
    input: &crate::input::DeleteUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("UserGroupId");
    if let Some(var_361) = &input.user_group_id {
        scope_360.string(var_361);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_clusters(
    input: &crate::input::DescribeCacheClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheClusters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("CacheClusterId");
    if let Some(var_363) = &input.cache_cluster_id {
        scope_362.string(var_363);
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("MaxRecords");
    if let Some(var_365) = &input.max_records {
        scope_364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("Marker");
    if let Some(var_367) = &input.marker {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("ShowCacheNodeInfo");
    if let Some(var_369) = &input.show_cache_node_info {
        scope_368.boolean(*var_369);
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("ShowCacheClustersNotInReplicationGroups");
    if let Some(var_371) = &input.show_cache_clusters_not_in_replication_groups {
        scope_370.boolean(*var_371);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_engine_versions(
    input: &crate::input::DescribeCacheEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheEngineVersions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("Engine");
    if let Some(var_373) = &input.engine {
        scope_372.string(var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("EngineVersion");
    if let Some(var_375) = &input.engine_version {
        scope_374.string(var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_377) = &input.cache_parameter_group_family {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("MaxRecords");
    if let Some(var_379) = &input.max_records {
        scope_378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("Marker");
    if let Some(var_381) = &input.marker {
        scope_380.string(var_381);
    }
    #[allow(unused_mut)]
    let mut scope_382 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_382.boolean(input.default_only);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameter_groups(
    input: &crate::input::DescribeCacheParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameterGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("CacheParameterGroupName");
    if let Some(var_384) = &input.cache_parameter_group_name {
        scope_383.string(var_384);
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("MaxRecords");
    if let Some(var_386) = &input.max_records {
        scope_385.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_386).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("Marker");
    if let Some(var_388) = &input.marker {
        scope_387.string(var_388);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_parameters(
    input: &crate::input::DescribeCacheParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheParameters", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("CacheParameterGroupName");
    if let Some(var_390) = &input.cache_parameter_group_name {
        scope_389.string(var_390);
    }
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("Source");
    if let Some(var_392) = &input.source {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("MaxRecords");
    if let Some(var_394) = &input.max_records {
        scope_393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Marker");
    if let Some(var_396) = &input.marker {
        scope_395.string(var_396);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_security_groups(
    input: &crate::input::DescribeCacheSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSecurityGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_398) = &input.cache_security_group_name {
        scope_397.string(var_398);
    }
    #[allow(unused_mut)]
    let mut scope_399 = writer.prefix("MaxRecords");
    if let Some(var_400) = &input.max_records {
        scope_399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_401 = writer.prefix("Marker");
    if let Some(var_402) = &input.marker {
        scope_401.string(var_402);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cache_subnet_groups(
    input: &crate::input::DescribeCacheSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCacheSubnetGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_403 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_404) = &input.cache_subnet_group_name {
        scope_403.string(var_404);
    }
    #[allow(unused_mut)]
    let mut scope_405 = writer.prefix("MaxRecords");
    if let Some(var_406) = &input.max_records {
        scope_405.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_406).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("Marker");
    if let Some(var_408) = &input.marker {
        scope_407.string(var_408);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("CacheParameterGroupFamily");
    if let Some(var_410) = &input.cache_parameter_group_family {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("MaxRecords");
    if let Some(var_412) = &input.max_records {
        scope_411.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("Marker");
    if let Some(var_414) = &input.marker {
        scope_413.string(var_414);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("SourceIdentifier");
    if let Some(var_416) = &input.source_identifier {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("SourceType");
    if let Some(var_418) = &input.source_type {
        scope_417.string(var_418.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("StartTime");
    if let Some(var_420) = &input.start_time {
        scope_419.date_time(var_420, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("EndTime");
    if let Some(var_422) = &input.end_time {
        scope_421.date_time(var_422, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_423 = writer.prefix("Duration");
    if let Some(var_424) = &input.duration {
        scope_423.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_424).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_425 = writer.prefix("MaxRecords");
    if let Some(var_426) = &input.max_records {
        scope_425.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_426).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("Marker");
    if let Some(var_428) = &input.marker {
        scope_427.string(var_428);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_replication_groups(
    input: &crate::input::DescribeGlobalReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeGlobalReplicationGroups",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_430) = &input.global_replication_group_id {
        scope_429.string(var_430);
    }
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("MaxRecords");
    if let Some(var_432) = &input.max_records {
        scope_431.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_432).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("Marker");
    if let Some(var_434) = &input.marker {
        scope_433.string(var_434);
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("ShowMemberInfo");
    if let Some(var_436) = &input.show_member_info {
        scope_435.boolean(*var_436);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_replication_groups(
    input: &crate::input::DescribeReplicationGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReplicationGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("ReplicationGroupId");
    if let Some(var_438) = &input.replication_group_id {
        scope_437.string(var_438);
    }
    #[allow(unused_mut)]
    let mut scope_439 = writer.prefix("MaxRecords");
    if let Some(var_440) = &input.max_records {
        scope_439.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_440).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_441 = writer.prefix("Marker");
    if let Some(var_442) = &input.marker {
        scope_441.string(var_442);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes(
    input: &crate::input::DescribeReservedCacheNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedCacheNodes", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_443 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_444) = &input.reserved_cache_node_id {
        scope_443.string(var_444);
    }
    #[allow(unused_mut)]
    let mut scope_445 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_446) = &input.reserved_cache_nodes_offering_id {
        scope_445.string(var_446);
    }
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("CacheNodeType");
    if let Some(var_448) = &input.cache_node_type {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("Duration");
    if let Some(var_450) = &input.duration {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("ProductDescription");
    if let Some(var_452) = &input.product_description {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("OfferingType");
    if let Some(var_454) = &input.offering_type {
        scope_453.string(var_454);
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("MaxRecords");
    if let Some(var_456) = &input.max_records {
        scope_455.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_456).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("Marker");
    if let Some(var_458) = &input.marker {
        scope_457.string(var_458);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_cache_nodes_offerings(
    input: &crate::input::DescribeReservedCacheNodesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedCacheNodesOfferings",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_460) = &input.reserved_cache_nodes_offering_id {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("CacheNodeType");
    if let Some(var_462) = &input.cache_node_type {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("Duration");
    if let Some(var_464) = &input.duration {
        scope_463.string(var_464);
    }
    #[allow(unused_mut)]
    let mut scope_465 = writer.prefix("ProductDescription");
    if let Some(var_466) = &input.product_description {
        scope_465.string(var_466);
    }
    #[allow(unused_mut)]
    let mut scope_467 = writer.prefix("OfferingType");
    if let Some(var_468) = &input.offering_type {
        scope_467.string(var_468);
    }
    #[allow(unused_mut)]
    let mut scope_469 = writer.prefix("MaxRecords");
    if let Some(var_470) = &input.max_records {
        scope_469.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_470).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_471 = writer.prefix("Marker");
    if let Some(var_472) = &input.marker {
        scope_471.string(var_472);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_service_updates(
    input: &crate::input::DescribeServiceUpdatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeServiceUpdates", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("ServiceUpdateName");
    if let Some(var_474) = &input.service_update_name {
        scope_473.string(var_474);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_476) = &input.service_update_status {
        let mut list_478 = scope_475.start_list(false, None);
        for item_477 in var_476 {
            #[allow(unused_mut)]
            let mut entry_479 = list_478.entry();
            entry_479.string(item_477.as_str());
        }
        list_478.finish();
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("MaxRecords");
    if let Some(var_481) = &input.max_records {
        scope_480.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_481).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("Marker");
    if let Some(var_483) = &input.marker {
        scope_482.string(var_483);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshots(
    input: &crate::input::DescribeSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshots", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("ReplicationGroupId");
    if let Some(var_485) = &input.replication_group_id {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("CacheClusterId");
    if let Some(var_487) = &input.cache_cluster_id {
        scope_486.string(var_487);
    }
    #[allow(unused_mut)]
    let mut scope_488 = writer.prefix("SnapshotName");
    if let Some(var_489) = &input.snapshot_name {
        scope_488.string(var_489);
    }
    #[allow(unused_mut)]
    let mut scope_490 = writer.prefix("SnapshotSource");
    if let Some(var_491) = &input.snapshot_source {
        scope_490.string(var_491);
    }
    #[allow(unused_mut)]
    let mut scope_492 = writer.prefix("Marker");
    if let Some(var_493) = &input.marker {
        scope_492.string(var_493);
    }
    #[allow(unused_mut)]
    let mut scope_494 = writer.prefix("MaxRecords");
    if let Some(var_495) = &input.max_records {
        scope_494.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_495).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("ShowNodeGroupConfig");
    if let Some(var_497) = &input.show_node_group_config {
        scope_496.boolean(*var_497);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_update_actions(
    input: &crate::input::DescribeUpdateActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUpdateActions", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("ServiceUpdateName");
    if let Some(var_499) = &input.service_update_name {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("ReplicationGroupIds");
    if let Some(var_501) = &input.replication_group_ids {
        let mut list_503 = scope_500.start_list(false, None);
        for item_502 in var_501 {
            #[allow(unused_mut)]
            let mut entry_504 = list_503.entry();
            entry_504.string(item_502);
        }
        list_503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("CacheClusterIds");
    if let Some(var_506) = &input.cache_cluster_ids {
        let mut list_508 = scope_505.start_list(false, None);
        for item_507 in var_506 {
            #[allow(unused_mut)]
            let mut entry_509 = list_508.entry();
            entry_509.string(item_507);
        }
        list_508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("Engine");
    if let Some(var_511) = &input.engine {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("ServiceUpdateStatus");
    if let Some(var_513) = &input.service_update_status {
        let mut list_515 = scope_512.start_list(false, None);
        for item_514 in var_513 {
            #[allow(unused_mut)]
            let mut entry_516 = list_515.entry();
            entry_516.string(item_514.as_str());
        }
        list_515.finish();
    }
    #[allow(unused_mut)]
    let mut scope_517 = writer.prefix("ServiceUpdateTimeRange");
    if let Some(var_518) = &input.service_update_time_range {
        crate::query_ser::serialize_structure_crate_model_time_range_filter(scope_517, var_518)?;
    }
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("UpdateActionStatus");
    if let Some(var_520) = &input.update_action_status {
        let mut list_522 = scope_519.start_list(false, None);
        for item_521 in var_520 {
            #[allow(unused_mut)]
            let mut entry_523 = list_522.entry();
            entry_523.string(item_521.as_str());
        }
        list_522.finish();
    }
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("ShowNodeLevelUpdateStatus");
    if let Some(var_525) = &input.show_node_level_update_status {
        scope_524.boolean(*var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("MaxRecords");
    if let Some(var_527) = &input.max_records {
        scope_526.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_527).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("Marker");
    if let Some(var_529) = &input.marker {
        scope_528.string(var_529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_user_groups(
    input: &crate::input::DescribeUserGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUserGroups", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("UserGroupId");
    if let Some(var_531) = &input.user_group_id {
        scope_530.string(var_531);
    }
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("MaxRecords");
    if let Some(var_533) = &input.max_records {
        scope_532.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_533).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("Marker");
    if let Some(var_535) = &input.marker {
        scope_534.string(var_535);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_users(
    input: &crate::input::DescribeUsersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsers", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Engine");
    if let Some(var_537) = &input.engine {
        scope_536.string(var_537);
    }
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("UserId");
    if let Some(var_539) = &input.user_id {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("Filters");
    if let Some(var_541) = &input.filters {
        let mut list_543 = scope_540.start_list(false, None);
        for item_542 in var_541 {
            #[allow(unused_mut)]
            let mut entry_544 = list_543.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_544, item_542)?;
        }
        list_543.finish();
    }
    #[allow(unused_mut)]
    let mut scope_545 = writer.prefix("MaxRecords");
    if let Some(var_546) = &input.max_records {
        scope_545.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_546).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_547 = writer.prefix("Marker");
    if let Some(var_548) = &input.marker {
        scope_547.string(var_548);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_global_replication_group(
    input: &crate::input::DisassociateGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DisassociateGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_550) = &input.global_replication_group_id {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("ReplicationGroupId");
    if let Some(var_552) = &input.replication_group_id {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("ReplicationGroupRegion");
    if let Some(var_554) = &input.replication_group_region {
        scope_553.string(var_554);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_replication_group(
    input: &crate::input::FailoverGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "FailoverGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_555 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_556) = &input.global_replication_group_id {
        scope_555.string(var_556);
    }
    #[allow(unused_mut)]
    let mut scope_557 = writer.prefix("PrimaryRegion");
    if let Some(var_558) = &input.primary_region {
        scope_557.string(var_558);
    }
    #[allow(unused_mut)]
    let mut scope_559 = writer.prefix("PrimaryReplicationGroupId");
    if let Some(var_560) = &input.primary_replication_group_id {
        scope_559.string(var_560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_node_groups_in_global_replication_group(
    input: &crate::input::IncreaseNodeGroupsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "IncreaseNodeGroupsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_561 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_562) = &input.global_replication_group_id {
        scope_561.string(var_562);
    }
    #[allow(unused_mut)]
    let mut scope_563 = writer.prefix("NodeGroupCount");
    {
        scope_563.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("RegionalConfigurations");
    if let Some(var_565) = &input.regional_configurations {
        let mut list_567 = scope_564.start_list(false, Some("RegionalConfiguration"));
        for item_566 in var_565 {
            #[allow(unused_mut)]
            let mut entry_568 = list_567.entry();
            crate::query_ser::serialize_structure_crate_model_regional_configuration(
                entry_568, item_566,
            )?;
        }
        list_567.finish();
    }
    #[allow(unused_mut)]
    let mut scope_569 = writer.prefix("ApplyImmediately");
    {
        scope_569.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_increase_replica_count(
    input: &crate::input::IncreaseReplicaCountInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "IncreaseReplicaCount", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("ReplicationGroupId");
    if let Some(var_571) = &input.replication_group_id {
        scope_570.string(var_571);
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("NewReplicaCount");
    if let Some(var_573) = &input.new_replica_count {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("ReplicaConfiguration");
    if let Some(var_575) = &input.replica_configuration {
        let mut list_577 = scope_574.start_list(false, Some("ConfigureShard"));
        for item_576 in var_575 {
            #[allow(unused_mut)]
            let mut entry_578 = list_577.entry();
            crate::query_ser::serialize_structure_crate_model_configure_shard(entry_578, item_576)?;
        }
        list_577.finish();
    }
    #[allow(unused_mut)]
    let mut scope_579 = writer.prefix("ApplyImmediately");
    {
        scope_579.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_allowed_node_type_modifications(
    input: &crate::input::ListAllowedNodeTypeModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ListAllowedNodeTypeModifications",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("CacheClusterId");
    if let Some(var_581) = &input.cache_cluster_id {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("ReplicationGroupId");
    if let Some(var_583) = &input.replication_group_id {
        scope_582.string(var_583);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_584 = writer.prefix("ResourceName");
    if let Some(var_585) = &input.resource_name {
        scope_584.string(var_585);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_cluster(
    input: &crate::input::ModifyCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_586 = writer.prefix("CacheClusterId");
    if let Some(var_587) = &input.cache_cluster_id {
        scope_586.string(var_587);
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("NumCacheNodes");
    if let Some(var_589) = &input.num_cache_nodes {
        scope_588.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_589).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("CacheNodeIdsToRemove");
    if let Some(var_591) = &input.cache_node_ids_to_remove {
        let mut list_593 = scope_590.start_list(false, Some("CacheNodeId"));
        for item_592 in var_591 {
            #[allow(unused_mut)]
            let mut entry_594 = list_593.entry();
            entry_594.string(item_592);
        }
        list_593.finish();
    }
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("AZMode");
    if let Some(var_596) = &input.az_mode {
        scope_595.string(var_596.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("NewAvailabilityZones");
    if let Some(var_598) = &input.new_availability_zones {
        let mut list_600 = scope_597.start_list(false, Some("PreferredAvailabilityZone"));
        for item_599 in var_598 {
            #[allow(unused_mut)]
            let mut entry_601 = list_600.entry();
            entry_601.string(item_599);
        }
        list_600.finish();
    }
    #[allow(unused_mut)]
    let mut scope_602 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_603) = &input.cache_security_group_names {
        let mut list_605 = scope_602.start_list(false, Some("CacheSecurityGroupName"));
        for item_604 in var_603 {
            #[allow(unused_mut)]
            let mut entry_606 = list_605.entry();
            entry_606.string(item_604);
        }
        list_605.finish();
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("SecurityGroupIds");
    if let Some(var_608) = &input.security_group_ids {
        let mut list_610 = scope_607.start_list(false, Some("SecurityGroupId"));
        for item_609 in var_608 {
            #[allow(unused_mut)]
            let mut entry_611 = list_610.entry();
            entry_611.string(item_609);
        }
        list_610.finish();
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_613) = &input.preferred_maintenance_window {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("NotificationTopicArn");
    if let Some(var_615) = &input.notification_topic_arn {
        scope_614.string(var_615);
    }
    #[allow(unused_mut)]
    let mut scope_616 = writer.prefix("CacheParameterGroupName");
    if let Some(var_617) = &input.cache_parameter_group_name {
        scope_616.string(var_617);
    }
    #[allow(unused_mut)]
    let mut scope_618 = writer.prefix("NotificationTopicStatus");
    if let Some(var_619) = &input.notification_topic_status {
        scope_618.string(var_619);
    }
    #[allow(unused_mut)]
    let mut scope_620 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_620.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_621 = writer.prefix("EngineVersion");
    if let Some(var_622) = &input.engine_version {
        scope_621.string(var_622);
    }
    #[allow(unused_mut)]
    let mut scope_623 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_624) = &input.auto_minor_version_upgrade {
        scope_623.boolean(*var_624);
    }
    #[allow(unused_mut)]
    let mut scope_625 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_626) = &input.snapshot_retention_limit {
        scope_625.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_626).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_627 = writer.prefix("SnapshotWindow");
    if let Some(var_628) = &input.snapshot_window {
        scope_627.string(var_628);
    }
    #[allow(unused_mut)]
    let mut scope_629 = writer.prefix("CacheNodeType");
    if let Some(var_630) = &input.cache_node_type {
        scope_629.string(var_630);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("AuthToken");
    if let Some(var_632) = &input.auth_token {
        scope_631.string(var_632);
    }
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_634) = &input.auth_token_update_strategy {
        scope_633.string(var_634.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_636) = &input.log_delivery_configurations {
        let mut list_638 = scope_635.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_637 in var_636 {
            #[allow(unused_mut)]
            let mut entry_639 = list_638.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_639, item_637,
            )?;
        }
        list_638.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_parameter_group(
    input: &crate::input::ModifyCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_640 = writer.prefix("CacheParameterGroupName");
    if let Some(var_641) = &input.cache_parameter_group_name {
        scope_640.string(var_641);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("ParameterNameValues");
    if let Some(var_643) = &input.parameter_name_values {
        let mut list_645 = scope_642.start_list(false, Some("ParameterNameValue"));
        for item_644 in var_643 {
            #[allow(unused_mut)]
            let mut entry_646 = list_645.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_646, item_644,
            )?;
        }
        list_645.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cache_subnet_group(
    input: &crate::input::ModifyCacheSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCacheSubnetGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("CacheSubnetGroupName");
    if let Some(var_648) = &input.cache_subnet_group_name {
        scope_647.string(var_648);
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("CacheSubnetGroupDescription");
    if let Some(var_650) = &input.cache_subnet_group_description {
        scope_649.string(var_650);
    }
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("SubnetIds");
    if let Some(var_652) = &input.subnet_ids {
        let mut list_654 = scope_651.start_list(false, Some("SubnetIdentifier"));
        for item_653 in var_652 {
            #[allow(unused_mut)]
            let mut entry_655 = list_654.entry();
            entry_655.string(item_653);
        }
        list_654.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_replication_group(
    input: &crate::input::ModifyGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_657) = &input.global_replication_group_id {
        scope_656.string(var_657);
    }
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("ApplyImmediately");
    {
        scope_658.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("CacheNodeType");
    if let Some(var_660) = &input.cache_node_type {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("EngineVersion");
    if let Some(var_662) = &input.engine_version {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("CacheParameterGroupName");
    if let Some(var_664) = &input.cache_parameter_group_name {
        scope_663.string(var_664);
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("GlobalReplicationGroupDescription");
    if let Some(var_666) = &input.global_replication_group_description {
        scope_665.string(var_666);
    }
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_668) = &input.automatic_failover_enabled {
        scope_667.boolean(*var_668);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group(
    input: &crate::input::ModifyReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyReplicationGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("ReplicationGroupId");
    if let Some(var_670) = &input.replication_group_id {
        scope_669.string(var_670);
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("ReplicationGroupDescription");
    if let Some(var_672) = &input.replication_group_description {
        scope_671.string(var_672);
    }
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("PrimaryClusterId");
    if let Some(var_674) = &input.primary_cluster_id {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("SnapshottingClusterId");
    if let Some(var_676) = &input.snapshotting_cluster_id {
        scope_675.string(var_676);
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("AutomaticFailoverEnabled");
    if let Some(var_678) = &input.automatic_failover_enabled {
        scope_677.boolean(*var_678);
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("MultiAZEnabled");
    if let Some(var_680) = &input.multi_az_enabled {
        scope_679.boolean(*var_680);
    }
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("NodeGroupId");
    if let Some(var_682) = &input.node_group_id {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("CacheSecurityGroupNames");
    if let Some(var_684) = &input.cache_security_group_names {
        let mut list_686 = scope_683.start_list(false, Some("CacheSecurityGroupName"));
        for item_685 in var_684 {
            #[allow(unused_mut)]
            let mut entry_687 = list_686.entry();
            entry_687.string(item_685);
        }
        list_686.finish();
    }
    #[allow(unused_mut)]
    let mut scope_688 = writer.prefix("SecurityGroupIds");
    if let Some(var_689) = &input.security_group_ids {
        let mut list_691 = scope_688.start_list(false, Some("SecurityGroupId"));
        for item_690 in var_689 {
            #[allow(unused_mut)]
            let mut entry_692 = list_691.entry();
            entry_692.string(item_690);
        }
        list_691.finish();
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_694) = &input.preferred_maintenance_window {
        scope_693.string(var_694);
    }
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("NotificationTopicArn");
    if let Some(var_696) = &input.notification_topic_arn {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("CacheParameterGroupName");
    if let Some(var_698) = &input.cache_parameter_group_name {
        scope_697.string(var_698);
    }
    #[allow(unused_mut)]
    let mut scope_699 = writer.prefix("NotificationTopicStatus");
    if let Some(var_700) = &input.notification_topic_status {
        scope_699.string(var_700);
    }
    #[allow(unused_mut)]
    let mut scope_701 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_701.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("EngineVersion");
    if let Some(var_703) = &input.engine_version {
        scope_702.string(var_703);
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_705) = &input.auto_minor_version_upgrade {
        scope_704.boolean(*var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("SnapshotRetentionLimit");
    if let Some(var_707) = &input.snapshot_retention_limit {
        scope_706.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_707).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("SnapshotWindow");
    if let Some(var_709) = &input.snapshot_window {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("CacheNodeType");
    if let Some(var_711) = &input.cache_node_type {
        scope_710.string(var_711);
    }
    #[allow(unused_mut)]
    let mut scope_712 = writer.prefix("AuthToken");
    if let Some(var_713) = &input.auth_token {
        scope_712.string(var_713);
    }
    #[allow(unused_mut)]
    let mut scope_714 = writer.prefix("AuthTokenUpdateStrategy");
    if let Some(var_715) = &input.auth_token_update_strategy {
        scope_714.string(var_715.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("UserGroupIdsToAdd");
    if let Some(var_717) = &input.user_group_ids_to_add {
        let mut list_719 = scope_716.start_list(false, None);
        for item_718 in var_717 {
            #[allow(unused_mut)]
            let mut entry_720 = list_719.entry();
            entry_720.string(item_718);
        }
        list_719.finish();
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("UserGroupIdsToRemove");
    if let Some(var_722) = &input.user_group_ids_to_remove {
        let mut list_724 = scope_721.start_list(false, None);
        for item_723 in var_722 {
            #[allow(unused_mut)]
            let mut entry_725 = list_724.entry();
            entry_725.string(item_723);
        }
        list_724.finish();
    }
    #[allow(unused_mut)]
    let mut scope_726 = writer.prefix("RemoveUserGroups");
    if let Some(var_727) = &input.remove_user_groups {
        scope_726.boolean(*var_727);
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("LogDeliveryConfigurations");
    if let Some(var_729) = &input.log_delivery_configurations {
        let mut list_731 = scope_728.start_list(false, Some("LogDeliveryConfigurationRequest"));
        for item_730 in var_729 {
            #[allow(unused_mut)]
            let mut entry_732 = list_731.entry();
            crate::query_ser::serialize_structure_crate_model_log_delivery_configuration_request(
                entry_732, item_730,
            )?;
        }
        list_731.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_replication_group_shard_configuration(
    input: &crate::input::ModifyReplicationGroupShardConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyReplicationGroupShardConfiguration",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_733 = writer.prefix("ReplicationGroupId");
    if let Some(var_734) = &input.replication_group_id {
        scope_733.string(var_734);
    }
    #[allow(unused_mut)]
    let mut scope_735 = writer.prefix("NodeGroupCount");
    {
        scope_735.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.node_group_count).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("ApplyImmediately");
    {
        scope_736.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_737 = writer.prefix("ReshardingConfiguration");
    if let Some(var_738) = &input.resharding_configuration {
        let mut list_740 = scope_737.start_list(false, Some("ReshardingConfiguration"));
        for item_739 in var_738 {
            #[allow(unused_mut)]
            let mut entry_741 = list_740.entry();
            crate::query_ser::serialize_structure_crate_model_resharding_configuration(
                entry_741, item_739,
            )?;
        }
        list_740.finish();
    }
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("NodeGroupsToRemove");
    if let Some(var_743) = &input.node_groups_to_remove {
        let mut list_745 = scope_742.start_list(false, Some("NodeGroupToRemove"));
        for item_744 in var_743 {
            #[allow(unused_mut)]
            let mut entry_746 = list_745.entry();
            entry_746.string(item_744);
        }
        list_745.finish();
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("NodeGroupsToRetain");
    if let Some(var_748) = &input.node_groups_to_retain {
        let mut list_750 = scope_747.start_list(false, Some("NodeGroupToRetain"));
        for item_749 in var_748 {
            #[allow(unused_mut)]
            let mut entry_751 = list_750.entry();
            entry_751.string(item_749);
        }
        list_750.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user(
    input: &crate::input::ModifyUserInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUser", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("UserId");
    if let Some(var_753) = &input.user_id {
        scope_752.string(var_753);
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("AccessString");
    if let Some(var_755) = &input.access_string {
        scope_754.string(var_755);
    }
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("AppendAccessString");
    if let Some(var_757) = &input.append_access_string {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Passwords");
    if let Some(var_759) = &input.passwords {
        let mut list_761 = scope_758.start_list(false, None);
        for item_760 in var_759 {
            #[allow(unused_mut)]
            let mut entry_762 = list_761.entry();
            entry_762.string(item_760);
        }
        list_761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("NoPasswordRequired");
    if let Some(var_764) = &input.no_password_required {
        scope_763.boolean(*var_764);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_user_group(
    input: &crate::input::ModifyUserGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUserGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("UserGroupId");
    if let Some(var_766) = &input.user_group_id {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("UserIdsToAdd");
    if let Some(var_768) = &input.user_ids_to_add {
        let mut list_770 = scope_767.start_list(false, None);
        for item_769 in var_768 {
            #[allow(unused_mut)]
            let mut entry_771 = list_770.entry();
            entry_771.string(item_769);
        }
        list_770.finish();
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("UserIdsToRemove");
    if let Some(var_773) = &input.user_ids_to_remove {
        let mut list_775 = scope_772.start_list(false, None);
        for item_774 in var_773 {
            #[allow(unused_mut)]
            let mut entry_776 = list_775.entry();
            entry_776.string(item_774);
        }
        list_775.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_cache_nodes_offering(
    input: &crate::input::PurchaseReservedCacheNodesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedCacheNodesOffering",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_777 = writer.prefix("ReservedCacheNodesOfferingId");
    if let Some(var_778) = &input.reserved_cache_nodes_offering_id {
        scope_777.string(var_778);
    }
    #[allow(unused_mut)]
    let mut scope_779 = writer.prefix("ReservedCacheNodeId");
    if let Some(var_780) = &input.reserved_cache_node_id {
        scope_779.string(var_780);
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("CacheNodeCount");
    if let Some(var_782) = &input.cache_node_count {
        scope_781.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_782).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Tags");
    if let Some(var_784) = &input.tags {
        let mut list_786 = scope_783.start_list(false, Some("Tag"));
        for item_785 in var_784 {
            #[allow(unused_mut)]
            let mut entry_787 = list_786.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_787, item_785)?;
        }
        list_786.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rebalance_slots_in_global_replication_group(
    input: &crate::input::RebalanceSlotsInGlobalReplicationGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RebalanceSlotsInGlobalReplicationGroup",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("GlobalReplicationGroupId");
    if let Some(var_789) = &input.global_replication_group_id {
        scope_788.string(var_789);
    }
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("ApplyImmediately");
    {
        scope_790.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cache_cluster(
    input: &crate::input::RebootCacheClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RebootCacheCluster", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("CacheClusterId");
    if let Some(var_792) = &input.cache_cluster_id {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("CacheNodeIdsToReboot");
    if let Some(var_794) = &input.cache_node_ids_to_reboot {
        let mut list_796 = scope_793.start_list(false, Some("CacheNodeId"));
        for item_795 in var_794 {
            #[allow(unused_mut)]
            let mut entry_797 = list_796.entry();
            entry_797.string(item_795);
        }
        list_796.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("ResourceName");
    if let Some(var_799) = &input.resource_name {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("TagKeys");
    if let Some(var_801) = &input.tag_keys {
        let mut list_803 = scope_800.start_list(false, None);
        for item_802 in var_801 {
            #[allow(unused_mut)]
            let mut entry_804 = list_803.entry();
            entry_804.string(item_802);
        }
        list_803.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cache_parameter_group(
    input: &crate::input::ResetCacheParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetCacheParameterGroup", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("CacheParameterGroupName");
    if let Some(var_806) = &input.cache_parameter_group_name {
        scope_805.string(var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_807.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("ParameterNameValues");
    if let Some(var_809) = &input.parameter_name_values {
        let mut list_811 = scope_808.start_list(false, Some("ParameterNameValue"));
        for item_810 in var_809 {
            #[allow(unused_mut)]
            let mut entry_812 = list_811.entry();
            crate::query_ser::serialize_structure_crate_model_parameter_name_value(
                entry_812, item_810,
            )?;
        }
        list_811.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cache_security_group_ingress(
    input: &crate::input::RevokeCacheSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeCacheSecurityGroupIngress",
        "2015-02-02",
    );
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("CacheSecurityGroupName");
    if let Some(var_814) = &input.cache_security_group_name {
        scope_813.string(var_814);
    }
    #[allow(unused_mut)]
    let mut scope_815 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_816) = &input.ec2_security_group_name {
        scope_815.string(var_816);
    }
    #[allow(unused_mut)]
    let mut scope_817 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_818) = &input.ec2_security_group_owner_id {
        scope_817.string(var_818);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_migration(
    input: &crate::input::StartMigrationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartMigration", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_819 = writer.prefix("ReplicationGroupId");
    if let Some(var_820) = &input.replication_group_id {
        scope_819.string(var_820);
    }
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("CustomerNodeEndpointList");
    if let Some(var_822) = &input.customer_node_endpoint_list {
        let mut list_824 = scope_821.start_list(false, None);
        for item_823 in var_822 {
            #[allow(unused_mut)]
            let mut entry_825 = list_824.entry();
            crate::query_ser::serialize_structure_crate_model_customer_node_endpoint(
                entry_825, item_823,
            )?;
        }
        list_824.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_test_failover(
    input: &crate::input::TestFailoverInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TestFailover", "2015-02-02");
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("ReplicationGroupId");
    if let Some(var_827) = &input.replication_group_id {
        scope_826.string(var_827);
    }
    #[allow(unused_mut)]
    let mut scope_828 = writer.prefix("NodeGroupId");
    if let Some(var_829) = &input.node_group_id {
        scope_828.string(var_829);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
