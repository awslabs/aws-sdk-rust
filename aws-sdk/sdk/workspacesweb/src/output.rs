// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateUserSettingsOutput {
    /// <p>The user settings.</p>
    pub user_settings: std::option::Option<crate::model::UserSettings>,
}
impl UpdateUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&crate::model::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl std::fmt::Debug for UpdateUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateUserSettingsOutput");
        formatter.field("user_settings", &self.user_settings);
        formatter.finish()
    }
}
/// See [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput)
pub mod update_user_settings_output {
    /// A builder for [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings: std::option::Option<crate::model::UserSettings>,
    }
    impl Builder {
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
            self.user_settings = Some(input);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<crate::model::UserSettings>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput)
        pub fn build(self) -> crate::output::UpdateUserSettingsOutput {
            crate::output::UpdateUserSettingsOutput {
                user_settings: self.user_settings,
            }
        }
    }
}
impl UpdateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUserSettingsOutput`](crate::output::UpdateUserSettingsOutput)
    pub fn builder() -> crate::output::update_user_settings_output::Builder {
        crate::output::update_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub trust_store_arn: std::option::Option<std::string::String>,
}
impl UpdateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl std::fmt::Debug for UpdateTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateTrustStoreOutput");
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.finish()
    }
}
/// See [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput)
pub mod update_trust_store_output {
    /// A builder for [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput)
        pub fn build(self) -> crate::output::UpdateTrustStoreOutput {
            crate::output::UpdateTrustStoreOutput {
                trust_store_arn: self.trust_store_arn,
            }
        }
    }
}
impl UpdateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTrustStoreOutput`](crate::output::UpdateTrustStoreOutput)
    pub fn builder() -> crate::output::update_trust_store_output::Builder {
        crate::output::update_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdatePortalOutput {
    /// <p>The web portal.</p>
    pub portal: std::option::Option<crate::model::Portal>,
}
impl UpdatePortalOutput {
    /// <p>The web portal.</p>
    pub fn portal(&self) -> std::option::Option<&crate::model::Portal> {
        self.portal.as_ref()
    }
}
impl std::fmt::Debug for UpdatePortalOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePortalOutput");
        formatter.field("portal", &self.portal);
        formatter.finish()
    }
}
/// See [`UpdatePortalOutput`](crate::output::UpdatePortalOutput)
pub mod update_portal_output {
    /// A builder for [`UpdatePortalOutput`](crate::output::UpdatePortalOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal: std::option::Option<crate::model::Portal>,
    }
    impl Builder {
        /// <p>The web portal.</p>
        pub fn portal(mut self, input: crate::model::Portal) -> Self {
            self.portal = Some(input);
            self
        }
        /// <p>The web portal.</p>
        pub fn set_portal(mut self, input: std::option::Option<crate::model::Portal>) -> Self {
            self.portal = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePortalOutput`](crate::output::UpdatePortalOutput)
        pub fn build(self) -> crate::output::UpdatePortalOutput {
            crate::output::UpdatePortalOutput {
                portal: self.portal,
            }
        }
    }
}
impl UpdatePortalOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePortalOutput`](crate::output::UpdatePortalOutput)
    pub fn builder() -> crate::output::update_portal_output::Builder {
        crate::output::update_portal_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub network_settings: std::option::Option<crate::model::NetworkSettings>,
}
impl UpdateNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&crate::model::NetworkSettings> {
        self.network_settings.as_ref()
    }
}
impl std::fmt::Debug for UpdateNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateNetworkSettingsOutput");
        formatter.field("network_settings", &self.network_settings);
        formatter.finish()
    }
}
/// See [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput)
pub mod update_network_settings_output {
    /// A builder for [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings: std::option::Option<crate::model::NetworkSettings>,
    }
    impl Builder {
        /// <p>The network settings.</p>
        pub fn network_settings(mut self, input: crate::model::NetworkSettings) -> Self {
            self.network_settings = Some(input);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<crate::model::NetworkSettings>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput)
        pub fn build(self) -> crate::output::UpdateNetworkSettingsOutput {
            crate::output::UpdateNetworkSettingsOutput {
                network_settings: self.network_settings,
            }
        }
    }
}
impl UpdateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateNetworkSettingsOutput`](crate::output::UpdateNetworkSettingsOutput)
    pub fn builder() -> crate::output::update_network_settings_output::Builder {
        crate::output::update_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
}
impl UpdateIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
}
impl std::fmt::Debug for UpdateIdentityProviderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateIdentityProviderOutput");
        formatter.field("identity_provider", &self.identity_provider);
        formatter.finish()
    }
}
/// See [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput)
pub mod update_identity_provider_output {
    /// A builder for [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
    }
    impl Builder {
        /// <p>The identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>The identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput)
        pub fn build(self) -> crate::output::UpdateIdentityProviderOutput {
            crate::output::UpdateIdentityProviderOutput {
                identity_provider: self.identity_provider,
            }
        }
    }
}
impl UpdateIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`UpdateIdentityProviderOutput`](crate::output::UpdateIdentityProviderOutput)
    pub fn builder() -> crate::output::update_identity_provider_output::Builder {
        crate::output::update_identity_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub browser_settings: std::option::Option<crate::model::BrowserSettings>,
}
impl UpdateBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&crate::model::BrowserSettings> {
        self.browser_settings.as_ref()
    }
}
impl std::fmt::Debug for UpdateBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBrowserSettingsOutput");
        formatter.field("browser_settings", &self.browser_settings);
        formatter.finish()
    }
}
/// See [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput)
pub mod update_browser_settings_output {
    /// A builder for [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings: std::option::Option<crate::model::BrowserSettings>,
    }
    impl Builder {
        /// <p>The browser settings.</p>
        pub fn browser_settings(mut self, input: crate::model::BrowserSettings) -> Self {
            self.browser_settings = Some(input);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<crate::model::BrowserSettings>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput)
        pub fn build(self) -> crate::output::UpdateBrowserSettingsOutput {
            crate::output::UpdateBrowserSettingsOutput {
                browser_settings: self.browser_settings,
            }
        }
    }
}
impl UpdateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrowserSettingsOutput`](crate::output::UpdateBrowserSettingsOutput)
    pub fn builder() -> crate::output::update_browser_settings_output::Builder {
        crate::output::update_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUserSettingsOutput {
    /// <p>The user settings.</p>
    pub user_settings: std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&[crate::model::UserSettingsSummary]> {
        self.user_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUserSettingsOutput");
        formatter.field("user_settings", &self.user_settings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput)
pub mod list_user_settings_output {
    /// A builder for [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings:
            std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `user_settings`.
        ///
        /// To override the contents of this collection use [`set_user_settings`](Self::set_user_settings).
        ///
        /// <p>The user settings.</p>
        pub fn user_settings(
            mut self,
            input: impl Into<crate::model::UserSettingsSummary>,
        ) -> Self {
            let mut v = self.user_settings.unwrap_or_default();
            v.push(input.into());
            self.user_settings = Some(v);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserSettingsSummary>>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput)
        pub fn build(self) -> crate::output::ListUserSettingsOutput {
            crate::output::ListUserSettingsOutput {
                user_settings: self.user_settings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListUserSettingsOutput`](crate::output::ListUserSettingsOutput)
    pub fn builder() -> crate::output::list_user_settings_output::Builder {
        crate::output::list_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTrustStoresOutput {
    /// <p>The trust stores.</p>
    pub trust_stores: std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTrustStoresOutput {
    /// <p>The trust stores.</p>
    pub fn trust_stores(&self) -> std::option::Option<&[crate::model::TrustStoreSummary]> {
        self.trust_stores.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListTrustStoresOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTrustStoresOutput");
        formatter.field("trust_stores", &self.trust_stores);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput)
pub mod list_trust_stores_output {
    /// A builder for [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_stores:
            std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `trust_stores`.
        ///
        /// To override the contents of this collection use [`set_trust_stores`](Self::set_trust_stores).
        ///
        /// <p>The trust stores.</p>
        pub fn trust_stores(mut self, input: impl Into<crate::model::TrustStoreSummary>) -> Self {
            let mut v = self.trust_stores.unwrap_or_default();
            v.push(input.into());
            self.trust_stores = Some(v);
            self
        }
        /// <p>The trust stores.</p>
        pub fn set_trust_stores(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TrustStoreSummary>>,
        ) -> Self {
            self.trust_stores = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput)
        pub fn build(self) -> crate::output::ListTrustStoresOutput {
            crate::output::ListTrustStoresOutput {
                trust_stores: self.trust_stores,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTrustStoresOutput {
    /// Creates a new builder-style object to manufacture [`ListTrustStoresOutput`](crate::output::ListTrustStoresOutput)
    pub fn builder() -> crate::output::list_trust_stores_output::Builder {
        crate::output::list_trust_stores_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTrustStoreCertificatesOutput {
    /// <p>The certificate list.</p>
    pub certificate_list: std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
    /// <p>The ARN of the trust store.</p>
    pub trust_store_arn: std::option::Option<std::string::String>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTrustStoreCertificatesOutput {
    /// <p>The certificate list.</p>
    pub fn certificate_list(&self) -> std::option::Option<&[crate::model::CertificateSummary]> {
        self.certificate_list.as_deref()
    }
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListTrustStoreCertificatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTrustStoreCertificatesOutput");
        formatter.field("certificate_list", &self.certificate_list);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput)
pub mod list_trust_store_certificates_output {
    /// A builder for [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_list:
            std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `certificate_list`.
        ///
        /// To override the contents of this collection use [`set_certificate_list`](Self::set_certificate_list).
        ///
        /// <p>The certificate list.</p>
        pub fn certificate_list(
            mut self,
            input: impl Into<crate::model::CertificateSummary>,
        ) -> Self {
            let mut v = self.certificate_list.unwrap_or_default();
            v.push(input.into());
            self.certificate_list = Some(v);
            self
        }
        /// <p>The certificate list.</p>
        pub fn set_certificate_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CertificateSummary>>,
        ) -> Self {
            self.certificate_list = input;
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.&gt;</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput)
        pub fn build(self) -> crate::output::ListTrustStoreCertificatesOutput {
            crate::output::ListTrustStoreCertificatesOutput {
                certificate_list: self.certificate_list,
                trust_store_arn: self.trust_store_arn,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTrustStoreCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`ListTrustStoreCertificatesOutput`](crate::output::ListTrustStoreCertificatesOutput)
    pub fn builder() -> crate::output::list_trust_store_certificates_output::Builder {
        crate::output::list_trust_store_certificates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags of the resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags of the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags of the resource.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>The tags of the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPortalsOutput {
    /// <p>The portals in the list.</p>
    pub portals: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPortalsOutput {
    /// <p>The portals in the list.</p>
    pub fn portals(&self) -> std::option::Option<&[crate::model::PortalSummary]> {
        self.portals.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPortalsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPortalsOutput");
        formatter.field("portals", &self.portals);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPortalsOutput`](crate::output::ListPortalsOutput)
pub mod list_portals_output {
    /// A builder for [`ListPortalsOutput`](crate::output::ListPortalsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portals: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `portals`.
        ///
        /// To override the contents of this collection use [`set_portals`](Self::set_portals).
        ///
        /// <p>The portals in the list.</p>
        pub fn portals(mut self, input: impl Into<crate::model::PortalSummary>) -> Self {
            let mut v = self.portals.unwrap_or_default();
            v.push(input.into());
            self.portals = Some(v);
            self
        }
        /// <p>The portals in the list.</p>
        pub fn set_portals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PortalSummary>>,
        ) -> Self {
            self.portals = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPortalsOutput`](crate::output::ListPortalsOutput)
        pub fn build(self) -> crate::output::ListPortalsOutput {
            crate::output::ListPortalsOutput {
                portals: self.portals,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPortalsOutput {
    /// Creates a new builder-style object to manufacture [`ListPortalsOutput`](crate::output::ListPortalsOutput)
    pub fn builder() -> crate::output::list_portals_output::Builder {
        crate::output::list_portals_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub network_settings: std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&[crate::model::NetworkSettingsSummary]> {
        self.network_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListNetworkSettingsOutput");
        formatter.field("network_settings", &self.network_settings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput)
pub mod list_network_settings_output {
    /// A builder for [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings:
            std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `network_settings`.
        ///
        /// To override the contents of this collection use [`set_network_settings`](Self::set_network_settings).
        ///
        /// <p>The network settings.</p>
        pub fn network_settings(
            mut self,
            input: impl Into<crate::model::NetworkSettingsSummary>,
        ) -> Self {
            let mut v = self.network_settings.unwrap_or_default();
            v.push(input.into());
            self.network_settings = Some(v);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NetworkSettingsSummary>>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput)
        pub fn build(self) -> crate::output::ListNetworkSettingsOutput {
            crate::output::ListNetworkSettingsOutput {
                network_settings: self.network_settings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListNetworkSettingsOutput`](crate::output::ListNetworkSettingsOutput)
    pub fn builder() -> crate::output::list_network_settings_output::Builder {
        crate::output::list_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListIdentityProvidersOutput {
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The identity providers.</p>
    pub identity_providers:
        std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
}
impl ListIdentityProvidersOutput {
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The identity providers.</p>
    pub fn identity_providers(
        &self,
    ) -> std::option::Option<&[crate::model::IdentityProviderSummary]> {
        self.identity_providers.as_deref()
    }
}
impl std::fmt::Debug for ListIdentityProvidersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListIdentityProvidersOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("identity_providers", &self.identity_providers);
        formatter.finish()
    }
}
/// See [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput)
pub mod list_identity_providers_output {
    /// A builder for [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) identity_providers:
            std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
    }
    impl Builder {
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `identity_providers`.
        ///
        /// To override the contents of this collection use [`set_identity_providers`](Self::set_identity_providers).
        ///
        /// <p>The identity providers.</p>
        pub fn identity_providers(
            mut self,
            input: impl Into<crate::model::IdentityProviderSummary>,
        ) -> Self {
            let mut v = self.identity_providers.unwrap_or_default();
            v.push(input.into());
            self.identity_providers = Some(v);
            self
        }
        /// <p>The identity providers.</p>
        pub fn set_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdentityProviderSummary>>,
        ) -> Self {
            self.identity_providers = input;
            self
        }
        /// Consumes the builder and constructs a [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput)
        pub fn build(self) -> crate::output::ListIdentityProvidersOutput {
            crate::output::ListIdentityProvidersOutput {
                next_token: self.next_token,
                identity_providers: self.identity_providers,
            }
        }
    }
}
impl ListIdentityProvidersOutput {
    /// Creates a new builder-style object to manufacture [`ListIdentityProvidersOutput`](crate::output::ListIdentityProvidersOutput)
    pub fn builder() -> crate::output::list_identity_providers_output::Builder {
        crate::output::list_identity_providers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub browser_settings: std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&[crate::model::BrowserSettingsSummary]> {
        self.browser_settings.as_deref()
    }
    /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListBrowserSettingsOutput");
        formatter.field("browser_settings", &self.browser_settings);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput)
pub mod list_browser_settings_output {
    /// A builder for [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings:
            std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `browser_settings`.
        ///
        /// To override the contents of this collection use [`set_browser_settings`](Self::set_browser_settings).
        ///
        /// <p>The browser settings.</p>
        pub fn browser_settings(
            mut self,
            input: impl Into<crate::model::BrowserSettingsSummary>,
        ) -> Self {
            let mut v = self.browser_settings.unwrap_or_default();
            v.push(input.into());
            self.browser_settings = Some(v);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BrowserSettingsSummary>>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token used to retrieve the next page of results for this operation.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput)
        pub fn build(self) -> crate::output::ListBrowserSettingsOutput {
            crate::output::ListBrowserSettingsOutput {
                browser_settings: self.browser_settings,
                next_token: self.next_token,
            }
        }
    }
}
impl ListBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`ListBrowserSettingsOutput`](crate::output::ListBrowserSettingsOutput)
    pub fn builder() -> crate::output::list_browser_settings_output::Builder {
        crate::output::list_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetUserSettingsOutput {
    /// <p>The user settings.</p>
    pub user_settings: std::option::Option<crate::model::UserSettings>,
}
impl GetUserSettingsOutput {
    /// <p>The user settings.</p>
    pub fn user_settings(&self) -> std::option::Option<&crate::model::UserSettings> {
        self.user_settings.as_ref()
    }
}
impl std::fmt::Debug for GetUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetUserSettingsOutput");
        formatter.field("user_settings", &self.user_settings);
        formatter.finish()
    }
}
/// See [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput)
pub mod get_user_settings_output {
    /// A builder for [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings: std::option::Option<crate::model::UserSettings>,
    }
    impl Builder {
        /// <p>The user settings.</p>
        pub fn user_settings(mut self, input: crate::model::UserSettings) -> Self {
            self.user_settings = Some(input);
            self
        }
        /// <p>The user settings.</p>
        pub fn set_user_settings(
            mut self,
            input: std::option::Option<crate::model::UserSettings>,
        ) -> Self {
            self.user_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput)
        pub fn build(self) -> crate::output::GetUserSettingsOutput {
            crate::output::GetUserSettingsOutput {
                user_settings: self.user_settings,
            }
        }
    }
}
impl GetUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetUserSettingsOutput`](crate::output::GetUserSettingsOutput)
    pub fn builder() -> crate::output::get_user_settings_output::Builder {
        crate::output::get_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTrustStoreCertificateOutput {
    /// <p>The ARN of the trust store certificate.</p>
    pub trust_store_arn: std::option::Option<std::string::String>,
    /// <p>The certificate of the trust store certificate.</p>
    pub certificate: std::option::Option<crate::model::Certificate>,
}
impl GetTrustStoreCertificateOutput {
    /// <p>The ARN of the trust store certificate.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
    /// <p>The certificate of the trust store certificate.</p>
    pub fn certificate(&self) -> std::option::Option<&crate::model::Certificate> {
        self.certificate.as_ref()
    }
}
impl std::fmt::Debug for GetTrustStoreCertificateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTrustStoreCertificateOutput");
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.field("certificate", &self.certificate);
        formatter.finish()
    }
}
/// See [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput)
pub mod get_trust_store_certificate_output {
    /// A builder for [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
        pub(crate) certificate: std::option::Option<crate::model::Certificate>,
    }
    impl Builder {
        /// <p>The ARN of the trust store certificate.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store certificate.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// <p>The certificate of the trust store certificate.</p>
        pub fn certificate(mut self, input: crate::model::Certificate) -> Self {
            self.certificate = Some(input);
            self
        }
        /// <p>The certificate of the trust store certificate.</p>
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::Certificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput)
        pub fn build(self) -> crate::output::GetTrustStoreCertificateOutput {
            crate::output::GetTrustStoreCertificateOutput {
                trust_store_arn: self.trust_store_arn,
                certificate: self.certificate,
            }
        }
    }
}
impl GetTrustStoreCertificateOutput {
    /// Creates a new builder-style object to manufacture [`GetTrustStoreCertificateOutput`](crate::output::GetTrustStoreCertificateOutput)
    pub fn builder() -> crate::output::get_trust_store_certificate_output::Builder {
        crate::output::get_trust_store_certificate_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTrustStoreOutput {
    /// <p>The trust store.</p>
    pub trust_store: std::option::Option<crate::model::TrustStore>,
}
impl GetTrustStoreOutput {
    /// <p>The trust store.</p>
    pub fn trust_store(&self) -> std::option::Option<&crate::model::TrustStore> {
        self.trust_store.as_ref()
    }
}
impl std::fmt::Debug for GetTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTrustStoreOutput");
        formatter.field("trust_store", &self.trust_store);
        formatter.finish()
    }
}
/// See [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput)
pub mod get_trust_store_output {
    /// A builder for [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store: std::option::Option<crate::model::TrustStore>,
    }
    impl Builder {
        /// <p>The trust store.</p>
        pub fn trust_store(mut self, input: crate::model::TrustStore) -> Self {
            self.trust_store = Some(input);
            self
        }
        /// <p>The trust store.</p>
        pub fn set_trust_store(
            mut self,
            input: std::option::Option<crate::model::TrustStore>,
        ) -> Self {
            self.trust_store = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput)
        pub fn build(self) -> crate::output::GetTrustStoreOutput {
            crate::output::GetTrustStoreOutput {
                trust_store: self.trust_store,
            }
        }
    }
}
impl GetTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetTrustStoreOutput`](crate::output::GetTrustStoreOutput)
    pub fn builder() -> crate::output::get_trust_store_output::Builder {
        crate::output::get_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPortalServiceProviderMetadataOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The service provider SAML metadata.</p>
    pub service_provider_saml_metadata: std::option::Option<std::string::String>,
}
impl GetPortalServiceProviderMetadataOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The service provider SAML metadata.</p>
    pub fn service_provider_saml_metadata(&self) -> std::option::Option<&str> {
        self.service_provider_saml_metadata.as_deref()
    }
}
impl std::fmt::Debug for GetPortalServiceProviderMetadataOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPortalServiceProviderMetadataOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field(
            "service_provider_saml_metadata",
            &self.service_provider_saml_metadata,
        );
        formatter.finish()
    }
}
/// See [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput)
pub mod get_portal_service_provider_metadata_output {
    /// A builder for [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) service_provider_saml_metadata: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The service provider SAML metadata.</p>
        pub fn service_provider_saml_metadata(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.service_provider_saml_metadata = Some(input.into());
            self
        }
        /// <p>The service provider SAML metadata.</p>
        pub fn set_service_provider_saml_metadata(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.service_provider_saml_metadata = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput)
        pub fn build(self) -> crate::output::GetPortalServiceProviderMetadataOutput {
            crate::output::GetPortalServiceProviderMetadataOutput {
                portal_arn: self.portal_arn,
                service_provider_saml_metadata: self.service_provider_saml_metadata,
            }
        }
    }
}
impl GetPortalServiceProviderMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetPortalServiceProviderMetadataOutput`](crate::output::GetPortalServiceProviderMetadataOutput)
    pub fn builder() -> crate::output::get_portal_service_provider_metadata_output::Builder {
        crate::output::get_portal_service_provider_metadata_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPortalOutput {
    /// <p>The web portal.</p>
    pub portal: std::option::Option<crate::model::Portal>,
}
impl GetPortalOutput {
    /// <p>The web portal.</p>
    pub fn portal(&self) -> std::option::Option<&crate::model::Portal> {
        self.portal.as_ref()
    }
}
impl std::fmt::Debug for GetPortalOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPortalOutput");
        formatter.field("portal", &self.portal);
        formatter.finish()
    }
}
/// See [`GetPortalOutput`](crate::output::GetPortalOutput)
pub mod get_portal_output {
    /// A builder for [`GetPortalOutput`](crate::output::GetPortalOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal: std::option::Option<crate::model::Portal>,
    }
    impl Builder {
        /// <p>The web portal.</p>
        pub fn portal(mut self, input: crate::model::Portal) -> Self {
            self.portal = Some(input);
            self
        }
        /// <p>The web portal.</p>
        pub fn set_portal(mut self, input: std::option::Option<crate::model::Portal>) -> Self {
            self.portal = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPortalOutput`](crate::output::GetPortalOutput)
        pub fn build(self) -> crate::output::GetPortalOutput {
            crate::output::GetPortalOutput {
                portal: self.portal,
            }
        }
    }
}
impl GetPortalOutput {
    /// Creates a new builder-style object to manufacture [`GetPortalOutput`](crate::output::GetPortalOutput)
    pub fn builder() -> crate::output::get_portal_output::Builder {
        crate::output::get_portal_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub network_settings: std::option::Option<crate::model::NetworkSettings>,
}
impl GetNetworkSettingsOutput {
    /// <p>The network settings.</p>
    pub fn network_settings(&self) -> std::option::Option<&crate::model::NetworkSettings> {
        self.network_settings.as_ref()
    }
}
impl std::fmt::Debug for GetNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNetworkSettingsOutput");
        formatter.field("network_settings", &self.network_settings);
        formatter.finish()
    }
}
/// See [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput)
pub mod get_network_settings_output {
    /// A builder for [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings: std::option::Option<crate::model::NetworkSettings>,
    }
    impl Builder {
        /// <p>The network settings.</p>
        pub fn network_settings(mut self, input: crate::model::NetworkSettings) -> Self {
            self.network_settings = Some(input);
            self
        }
        /// <p>The network settings.</p>
        pub fn set_network_settings(
            mut self,
            input: std::option::Option<crate::model::NetworkSettings>,
        ) -> Self {
            self.network_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput)
        pub fn build(self) -> crate::output::GetNetworkSettingsOutput {
            crate::output::GetNetworkSettingsOutput {
                network_settings: self.network_settings,
            }
        }
    }
}
impl GetNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetNetworkSettingsOutput`](crate::output::GetNetworkSettingsOutput)
    pub fn builder() -> crate::output::get_network_settings_output::Builder {
        crate::output::get_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub identity_provider: std::option::Option<crate::model::IdentityProvider>,
}
impl GetIdentityProviderOutput {
    /// <p>The identity provider.</p>
    pub fn identity_provider(&self) -> std::option::Option<&crate::model::IdentityProvider> {
        self.identity_provider.as_ref()
    }
}
impl std::fmt::Debug for GetIdentityProviderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetIdentityProviderOutput");
        formatter.field("identity_provider", &self.identity_provider);
        formatter.finish()
    }
}
/// See [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput)
pub mod get_identity_provider_output {
    /// A builder for [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider: std::option::Option<crate::model::IdentityProvider>,
    }
    impl Builder {
        /// <p>The identity provider.</p>
        pub fn identity_provider(mut self, input: crate::model::IdentityProvider) -> Self {
            self.identity_provider = Some(input);
            self
        }
        /// <p>The identity provider.</p>
        pub fn set_identity_provider(
            mut self,
            input: std::option::Option<crate::model::IdentityProvider>,
        ) -> Self {
            self.identity_provider = input;
            self
        }
        /// Consumes the builder and constructs a [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput)
        pub fn build(self) -> crate::output::GetIdentityProviderOutput {
            crate::output::GetIdentityProviderOutput {
                identity_provider: self.identity_provider,
            }
        }
    }
}
impl GetIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`GetIdentityProviderOutput`](crate::output::GetIdentityProviderOutput)
    pub fn builder() -> crate::output::get_identity_provider_output::Builder {
        crate::output::get_identity_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub browser_settings: std::option::Option<crate::model::BrowserSettings>,
}
impl GetBrowserSettingsOutput {
    /// <p>The browser settings.</p>
    pub fn browser_settings(&self) -> std::option::Option<&crate::model::BrowserSettings> {
        self.browser_settings.as_ref()
    }
}
impl std::fmt::Debug for GetBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBrowserSettingsOutput");
        formatter.field("browser_settings", &self.browser_settings);
        formatter.finish()
    }
}
/// See [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput)
pub mod get_browser_settings_output {
    /// A builder for [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings: std::option::Option<crate::model::BrowserSettings>,
    }
    impl Builder {
        /// <p>The browser settings.</p>
        pub fn browser_settings(mut self, input: crate::model::BrowserSettings) -> Self {
            self.browser_settings = Some(input);
            self
        }
        /// <p>The browser settings.</p>
        pub fn set_browser_settings(
            mut self,
            input: std::option::Option<crate::model::BrowserSettings>,
        ) -> Self {
            self.browser_settings = input;
            self
        }
        /// Consumes the builder and constructs a [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput)
        pub fn build(self) -> crate::output::GetBrowserSettingsOutput {
            crate::output::GetBrowserSettingsOutput {
                browser_settings: self.browser_settings,
            }
        }
    }
}
impl GetBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetBrowserSettingsOutput`](crate::output::GetBrowserSettingsOutput)
    pub fn builder() -> crate::output::get_browser_settings_output::Builder {
        crate::output::get_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateUserSettingsOutput {}
impl std::fmt::Debug for DisassociateUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateUserSettingsOutput");
        formatter.finish()
    }
}
/// See [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput)
pub mod disassociate_user_settings_output {
    /// A builder for [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput)
        pub fn build(self) -> crate::output::DisassociateUserSettingsOutput {
            crate::output::DisassociateUserSettingsOutput {}
        }
    }
}
impl DisassociateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateUserSettingsOutput`](crate::output::DisassociateUserSettingsOutput)
    pub fn builder() -> crate::output::disassociate_user_settings_output::Builder {
        crate::output::disassociate_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateTrustStoreOutput {}
impl std::fmt::Debug for DisassociateTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateTrustStoreOutput");
        formatter.finish()
    }
}
/// See [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput)
pub mod disassociate_trust_store_output {
    /// A builder for [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput)
        pub fn build(self) -> crate::output::DisassociateTrustStoreOutput {
            crate::output::DisassociateTrustStoreOutput {}
        }
    }
}
impl DisassociateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateTrustStoreOutput`](crate::output::DisassociateTrustStoreOutput)
    pub fn builder() -> crate::output::disassociate_trust_store_output::Builder {
        crate::output::disassociate_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateNetworkSettingsOutput {}
impl std::fmt::Debug for DisassociateNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateNetworkSettingsOutput");
        formatter.finish()
    }
}
/// See [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput)
pub mod disassociate_network_settings_output {
    /// A builder for [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput)
        pub fn build(self) -> crate::output::DisassociateNetworkSettingsOutput {
            crate::output::DisassociateNetworkSettingsOutput {}
        }
    }
}
impl DisassociateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateNetworkSettingsOutput`](crate::output::DisassociateNetworkSettingsOutput)
    pub fn builder() -> crate::output::disassociate_network_settings_output::Builder {
        crate::output::disassociate_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateBrowserSettingsOutput {}
impl std::fmt::Debug for DisassociateBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateBrowserSettingsOutput");
        formatter.finish()
    }
}
/// See [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput)
pub mod disassociate_browser_settings_output {
    /// A builder for [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput)
        pub fn build(self) -> crate::output::DisassociateBrowserSettingsOutput {
            crate::output::DisassociateBrowserSettingsOutput {}
        }
    }
}
impl DisassociateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateBrowserSettingsOutput`](crate::output::DisassociateBrowserSettingsOutput)
    pub fn builder() -> crate::output::disassociate_browser_settings_output::Builder {
        crate::output::disassociate_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteUserSettingsOutput {}
impl std::fmt::Debug for DeleteUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserSettingsOutput");
        formatter.finish()
    }
}
/// See [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput)
pub mod delete_user_settings_output {
    /// A builder for [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput)
        pub fn build(self) -> crate::output::DeleteUserSettingsOutput {
            crate::output::DeleteUserSettingsOutput {}
        }
    }
}
impl DeleteUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteUserSettingsOutput`](crate::output::DeleteUserSettingsOutput)
    pub fn builder() -> crate::output::delete_user_settings_output::Builder {
        crate::output::delete_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTrustStoreOutput {}
impl std::fmt::Debug for DeleteTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTrustStoreOutput");
        formatter.finish()
    }
}
/// See [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput)
pub mod delete_trust_store_output {
    /// A builder for [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput)
        pub fn build(self) -> crate::output::DeleteTrustStoreOutput {
            crate::output::DeleteTrustStoreOutput {}
        }
    }
}
impl DeleteTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTrustStoreOutput`](crate::output::DeleteTrustStoreOutput)
    pub fn builder() -> crate::output::delete_trust_store_output::Builder {
        crate::output::delete_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePortalOutput {}
impl std::fmt::Debug for DeletePortalOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePortalOutput");
        formatter.finish()
    }
}
/// See [`DeletePortalOutput`](crate::output::DeletePortalOutput)
pub mod delete_portal_output {
    /// A builder for [`DeletePortalOutput`](crate::output::DeletePortalOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePortalOutput`](crate::output::DeletePortalOutput)
        pub fn build(self) -> crate::output::DeletePortalOutput {
            crate::output::DeletePortalOutput {}
        }
    }
}
impl DeletePortalOutput {
    /// Creates a new builder-style object to manufacture [`DeletePortalOutput`](crate::output::DeletePortalOutput)
    pub fn builder() -> crate::output::delete_portal_output::Builder {
        crate::output::delete_portal_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNetworkSettingsOutput {}
impl std::fmt::Debug for DeleteNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNetworkSettingsOutput");
        formatter.finish()
    }
}
/// See [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput)
pub mod delete_network_settings_output {
    /// A builder for [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput)
        pub fn build(self) -> crate::output::DeleteNetworkSettingsOutput {
            crate::output::DeleteNetworkSettingsOutput {}
        }
    }
}
impl DeleteNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkSettingsOutput`](crate::output::DeleteNetworkSettingsOutput)
    pub fn builder() -> crate::output::delete_network_settings_output::Builder {
        crate::output::delete_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteIdentityProviderOutput {}
impl std::fmt::Debug for DeleteIdentityProviderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteIdentityProviderOutput");
        formatter.finish()
    }
}
/// See [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput)
pub mod delete_identity_provider_output {
    /// A builder for [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput)
        pub fn build(self) -> crate::output::DeleteIdentityProviderOutput {
            crate::output::DeleteIdentityProviderOutput {}
        }
    }
}
impl DeleteIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`DeleteIdentityProviderOutput`](crate::output::DeleteIdentityProviderOutput)
    pub fn builder() -> crate::output::delete_identity_provider_output::Builder {
        crate::output::delete_identity_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteBrowserSettingsOutput {}
impl std::fmt::Debug for DeleteBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteBrowserSettingsOutput");
        formatter.finish()
    }
}
/// See [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput)
pub mod delete_browser_settings_output {
    /// A builder for [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput)
        pub fn build(self) -> crate::output::DeleteBrowserSettingsOutput {
            crate::output::DeleteBrowserSettingsOutput {}
        }
    }
}
impl DeleteBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteBrowserSettingsOutput`](crate::output::DeleteBrowserSettingsOutput)
    pub fn builder() -> crate::output::delete_browser_settings_output::Builder {
        crate::output::delete_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateUserSettingsOutput {
    /// <p>The ARN of the user settings.</p>
    pub user_settings_arn: std::option::Option<std::string::String>,
}
impl CreateUserSettingsOutput {
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateUserSettingsOutput");
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.finish()
    }
}
/// See [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput)
pub mod create_user_settings_output {
    /// A builder for [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) user_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the user settings.</p>
        pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn set_user_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput)
        pub fn build(self) -> crate::output::CreateUserSettingsOutput {
            crate::output::CreateUserSettingsOutput {
                user_settings_arn: self.user_settings_arn,
            }
        }
    }
}
impl CreateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateUserSettingsOutput`](crate::output::CreateUserSettingsOutput)
    pub fn builder() -> crate::output::create_user_settings_output::Builder {
        crate::output::create_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub trust_store_arn: std::option::Option<std::string::String>,
}
impl CreateTrustStoreOutput {
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTrustStoreOutput");
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.finish()
    }
}
/// See [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput)
pub mod create_trust_store_output {
    /// A builder for [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput)
        pub fn build(self) -> crate::output::CreateTrustStoreOutput {
            crate::output::CreateTrustStoreOutput {
                trust_store_arn: self.trust_store_arn,
            }
        }
    }
}
impl CreateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateTrustStoreOutput`](crate::output::CreateTrustStoreOutput)
    pub fn builder() -> crate::output::create_trust_store_output::Builder {
        crate::output::create_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePortalOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub portal_endpoint: std::option::Option<std::string::String>,
}
impl CreatePortalOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
    pub fn portal_endpoint(&self) -> std::option::Option<&str> {
        self.portal_endpoint.as_deref()
    }
}
impl std::fmt::Debug for CreatePortalOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePortalOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("portal_endpoint", &self.portal_endpoint);
        formatter.finish()
    }
}
/// See [`CreatePortalOutput`](crate::output::CreatePortalOutput)
pub mod create_portal_output {
    /// A builder for [`CreatePortalOutput`](crate::output::CreatePortalOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) portal_endpoint: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
        pub fn portal_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_endpoint = Some(input.into());
            self
        }
        /// <p>The endpoint URL of the web portal that users access in order to start streaming sessions.</p>
        pub fn set_portal_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.portal_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePortalOutput`](crate::output::CreatePortalOutput)
        pub fn build(self) -> crate::output::CreatePortalOutput {
            crate::output::CreatePortalOutput {
                portal_arn: self.portal_arn,
                portal_endpoint: self.portal_endpoint,
            }
        }
    }
}
impl CreatePortalOutput {
    /// Creates a new builder-style object to manufacture [`CreatePortalOutput`](crate::output::CreatePortalOutput)
    pub fn builder() -> crate::output::create_portal_output::Builder {
        crate::output::create_portal_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkSettingsOutput {
    /// <p>The ARN of the network settings.</p>
    pub network_settings_arn: std::option::Option<std::string::String>,
}
impl CreateNetworkSettingsOutput {
    /// <p>The ARN of the network settings.</p>
    pub fn network_settings_arn(&self) -> std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkSettingsOutput");
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.finish()
    }
}
/// See [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput)
pub mod create_network_settings_output {
    /// A builder for [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) network_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the network settings.</p>
        pub fn network_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn set_network_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput)
        pub fn build(self) -> crate::output::CreateNetworkSettingsOutput {
            crate::output::CreateNetworkSettingsOutput {
                network_settings_arn: self.network_settings_arn,
            }
        }
    }
}
impl CreateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkSettingsOutput`](crate::output::CreateNetworkSettingsOutput)
    pub fn builder() -> crate::output::create_network_settings_output::Builder {
        crate::output::create_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateIdentityProviderOutput {
    /// <p>The ARN of the identity provider.</p>
    pub identity_provider_arn: std::option::Option<std::string::String>,
}
impl CreateIdentityProviderOutput {
    /// <p>The ARN of the identity provider.</p>
    pub fn identity_provider_arn(&self) -> std::option::Option<&str> {
        self.identity_provider_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateIdentityProviderOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateIdentityProviderOutput");
        formatter.field("identity_provider_arn", &self.identity_provider_arn);
        formatter.finish()
    }
}
/// See [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput)
pub mod create_identity_provider_output {
    /// A builder for [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) identity_provider_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the identity provider.</p>
        pub fn identity_provider_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.identity_provider_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the identity provider.</p>
        pub fn set_identity_provider_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.identity_provider_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput)
        pub fn build(self) -> crate::output::CreateIdentityProviderOutput {
            crate::output::CreateIdentityProviderOutput {
                identity_provider_arn: self.identity_provider_arn,
            }
        }
    }
}
impl CreateIdentityProviderOutput {
    /// Creates a new builder-style object to manufacture [`CreateIdentityProviderOutput`](crate::output::CreateIdentityProviderOutput)
    pub fn builder() -> crate::output::create_identity_provider_output::Builder {
        crate::output::create_identity_provider_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateBrowserSettingsOutput {
    /// <p>The ARN of the browser settings.</p>
    pub browser_settings_arn: std::option::Option<std::string::String>,
}
impl CreateBrowserSettingsOutput {
    /// <p>The ARN of the browser settings.</p>
    pub fn browser_settings_arn(&self) -> std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBrowserSettingsOutput");
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.finish()
    }
}
/// See [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput)
pub mod create_browser_settings_output {
    /// A builder for [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) browser_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the browser settings.</p>
        pub fn browser_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.browser_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn set_browser_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.browser_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput)
        pub fn build(self) -> crate::output::CreateBrowserSettingsOutput {
            crate::output::CreateBrowserSettingsOutput {
                browser_settings_arn: self.browser_settings_arn,
            }
        }
    }
}
impl CreateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateBrowserSettingsOutput`](crate::output::CreateBrowserSettingsOutput)
    pub fn builder() -> crate::output::create_browser_settings_output::Builder {
        crate::output::create_browser_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateUserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the user settings.</p>
    pub user_settings_arn: std::option::Option<std::string::String>,
}
impl AssociateUserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the user settings.</p>
    pub fn user_settings_arn(&self) -> std::option::Option<&str> {
        self.user_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for AssociateUserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateUserSettingsOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("user_settings_arn", &self.user_settings_arn);
        formatter.finish()
    }
}
/// See [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput)
pub mod associate_user_settings_output {
    /// A builder for [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) user_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn user_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.user_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the user settings.</p>
        pub fn set_user_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.user_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput)
        pub fn build(self) -> crate::output::AssociateUserSettingsOutput {
            crate::output::AssociateUserSettingsOutput {
                portal_arn: self.portal_arn,
                user_settings_arn: self.user_settings_arn,
            }
        }
    }
}
impl AssociateUserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateUserSettingsOutput`](crate::output::AssociateUserSettingsOutput)
    pub fn builder() -> crate::output::associate_user_settings_output::Builder {
        crate::output::associate_user_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateTrustStoreOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the trust store.</p>
    pub trust_store_arn: std::option::Option<std::string::String>,
}
impl AssociateTrustStoreOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the trust store.</p>
    pub fn trust_store_arn(&self) -> std::option::Option<&str> {
        self.trust_store_arn.as_deref()
    }
}
impl std::fmt::Debug for AssociateTrustStoreOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateTrustStoreOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("trust_store_arn", &self.trust_store_arn);
        formatter.finish()
    }
}
/// See [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput)
pub mod associate_trust_store_output {
    /// A builder for [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) trust_store_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn trust_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.trust_store_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the trust store.</p>
        pub fn set_trust_store_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.trust_store_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput)
        pub fn build(self) -> crate::output::AssociateTrustStoreOutput {
            crate::output::AssociateTrustStoreOutput {
                portal_arn: self.portal_arn,
                trust_store_arn: self.trust_store_arn,
            }
        }
    }
}
impl AssociateTrustStoreOutput {
    /// Creates a new builder-style object to manufacture [`AssociateTrustStoreOutput`](crate::output::AssociateTrustStoreOutput)
    pub fn builder() -> crate::output::associate_trust_store_output::Builder {
        crate::output::associate_trust_store_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateNetworkSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the network settings.</p>
    pub network_settings_arn: std::option::Option<std::string::String>,
}
impl AssociateNetworkSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the network settings.</p>
    pub fn network_settings_arn(&self) -> std::option::Option<&str> {
        self.network_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for AssociateNetworkSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateNetworkSettingsOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("network_settings_arn", &self.network_settings_arn);
        formatter.finish()
    }
}
/// See [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput)
pub mod associate_network_settings_output {
    /// A builder for [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) network_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn network_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.network_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the network settings.</p>
        pub fn set_network_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.network_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput)
        pub fn build(self) -> crate::output::AssociateNetworkSettingsOutput {
            crate::output::AssociateNetworkSettingsOutput {
                portal_arn: self.portal_arn,
                network_settings_arn: self.network_settings_arn,
            }
        }
    }
}
impl AssociateNetworkSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateNetworkSettingsOutput`](crate::output::AssociateNetworkSettingsOutput)
    pub fn builder() -> crate::output::associate_network_settings_output::Builder {
        crate::output::associate_network_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateBrowserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub portal_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the browser settings.</p>
    pub browser_settings_arn: std::option::Option<std::string::String>,
}
impl AssociateBrowserSettingsOutput {
    /// <p>The ARN of the web portal.</p>
    pub fn portal_arn(&self) -> std::option::Option<&str> {
        self.portal_arn.as_deref()
    }
    /// <p>The ARN of the browser settings.</p>
    pub fn browser_settings_arn(&self) -> std::option::Option<&str> {
        self.browser_settings_arn.as_deref()
    }
}
impl std::fmt::Debug for AssociateBrowserSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateBrowserSettingsOutput");
        formatter.field("portal_arn", &self.portal_arn);
        formatter.field("browser_settings_arn", &self.browser_settings_arn);
        formatter.finish()
    }
}
/// See [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput)
pub mod associate_browser_settings_output {
    /// A builder for [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) portal_arn: std::option::Option<std::string::String>,
        pub(crate) browser_settings_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the web portal.</p>
        pub fn portal_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.portal_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the web portal.</p>
        pub fn set_portal_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.portal_arn = input;
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn browser_settings_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.browser_settings_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the browser settings.</p>
        pub fn set_browser_settings_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.browser_settings_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput)
        pub fn build(self) -> crate::output::AssociateBrowserSettingsOutput {
            crate::output::AssociateBrowserSettingsOutput {
                portal_arn: self.portal_arn,
                browser_settings_arn: self.browser_settings_arn,
            }
        }
    }
}
impl AssociateBrowserSettingsOutput {
    /// Creates a new builder-style object to manufacture [`AssociateBrowserSettingsOutput`](crate::output::AssociateBrowserSettingsOutput)
    pub fn builder() -> crate::output::associate_browser_settings_output::Builder {
        crate::output::associate_browser_settings_output::Builder::default()
    }
}
