// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_listener_certificates(
    input: &crate::input::AddListenerCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddListenerCertificates", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ListenerArn");
    if let Some(var_2) = &input.listener_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Certificates");
    if let Some(var_4) = &input.certificates {
        let mut list_6 = scope_3.start_list(false, None);
        for item_5 in var_4 {
            #[allow(unused_mut)]
            let mut entry_7 = list_6.entry();
            crate::query_ser::serialize_structure_crate_model_certificate(entry_7, item_5)?;
        }
        list_6.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags(
    input: &crate::input::AddTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddTags", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("ResourceArns");
    if let Some(var_9) = &input.resource_arns {
        let mut list_11 = scope_8.start_list(false, None);
        for item_10 in var_9 {
            #[allow(unused_mut)]
            let mut entry_12 = list_11.entry();
            entry_12.string(item_10);
        }
        list_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Tags");
    if let Some(var_14) = &input.tags {
        let mut list_16 = scope_13.start_list(false, None);
        for item_15 in var_14 {
            #[allow(unused_mut)]
            let mut entry_17 = list_16.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_17, item_15)?;
        }
        list_16.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_listener(
    input: &crate::input::CreateListenerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateListener", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_18 = writer.prefix("LoadBalancerArn");
    if let Some(var_19) = &input.load_balancer_arn {
        scope_18.string(var_19);
    }
    #[allow(unused_mut)]
    let mut scope_20 = writer.prefix("Protocol");
    if let Some(var_21) = &input.protocol {
        scope_20.string(var_21.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_22 = writer.prefix("Port");
    if let Some(var_23) = &input.port {
        scope_22.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_23).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("SslPolicy");
    if let Some(var_25) = &input.ssl_policy {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("Certificates");
    if let Some(var_27) = &input.certificates {
        let mut list_29 = scope_26.start_list(false, None);
        for item_28 in var_27 {
            #[allow(unused_mut)]
            let mut entry_30 = list_29.entry();
            crate::query_ser::serialize_structure_crate_model_certificate(entry_30, item_28)?;
        }
        list_29.finish();
    }
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("DefaultActions");
    if let Some(var_32) = &input.default_actions {
        let mut list_34 = scope_31.start_list(false, None);
        for item_33 in var_32 {
            #[allow(unused_mut)]
            let mut entry_35 = list_34.entry();
            crate::query_ser::serialize_structure_crate_model_action(entry_35, item_33)?;
        }
        list_34.finish();
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("AlpnPolicy");
    if let Some(var_37) = &input.alpn_policy {
        let mut list_39 = scope_36.start_list(false, None);
        for item_38 in var_37 {
            #[allow(unused_mut)]
            let mut entry_40 = list_39.entry();
            entry_40.string(item_38);
        }
        list_39.finish();
    }
    #[allow(unused_mut)]
    let mut scope_41 = writer.prefix("Tags");
    if let Some(var_42) = &input.tags {
        let mut list_44 = scope_41.start_list(false, None);
        for item_43 in var_42 {
            #[allow(unused_mut)]
            let mut entry_45 = list_44.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_45, item_43)?;
        }
        list_44.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_load_balancer(
    input: &crate::input::CreateLoadBalancerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateLoadBalancer", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("Name");
    if let Some(var_47) = &input.name {
        scope_46.string(var_47);
    }
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("Subnets");
    if let Some(var_49) = &input.subnets {
        let mut list_51 = scope_48.start_list(false, None);
        for item_50 in var_49 {
            #[allow(unused_mut)]
            let mut entry_52 = list_51.entry();
            entry_52.string(item_50);
        }
        list_51.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("SubnetMappings");
    if let Some(var_54) = &input.subnet_mappings {
        let mut list_56 = scope_53.start_list(false, None);
        for item_55 in var_54 {
            #[allow(unused_mut)]
            let mut entry_57 = list_56.entry();
            crate::query_ser::serialize_structure_crate_model_subnet_mapping(entry_57, item_55)?;
        }
        list_56.finish();
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("SecurityGroups");
    if let Some(var_59) = &input.security_groups {
        let mut list_61 = scope_58.start_list(false, None);
        for item_60 in var_59 {
            #[allow(unused_mut)]
            let mut entry_62 = list_61.entry();
            entry_62.string(item_60);
        }
        list_61.finish();
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("Scheme");
    if let Some(var_64) = &input.scheme {
        scope_63.string(var_64.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("Tags");
    if let Some(var_66) = &input.tags {
        let mut list_68 = scope_65.start_list(false, None);
        for item_67 in var_66 {
            #[allow(unused_mut)]
            let mut entry_69 = list_68.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_69, item_67)?;
        }
        list_68.finish();
    }
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("Type");
    if let Some(var_71) = &input.r#type {
        scope_70.string(var_71.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("IpAddressType");
    if let Some(var_73) = &input.ip_address_type {
        scope_72.string(var_73.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("CustomerOwnedIpv4Pool");
    if let Some(var_75) = &input.customer_owned_ipv4_pool {
        scope_74.string(var_75);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_rule(
    input: &crate::input::CreateRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateRule", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("ListenerArn");
    if let Some(var_77) = &input.listener_arn {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("Conditions");
    if let Some(var_79) = &input.conditions {
        let mut list_81 = scope_78.start_list(false, None);
        for item_80 in var_79 {
            #[allow(unused_mut)]
            let mut entry_82 = list_81.entry();
            crate::query_ser::serialize_structure_crate_model_rule_condition(entry_82, item_80)?;
        }
        list_81.finish();
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("Priority");
    if let Some(var_84) = &input.priority {
        scope_83.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("Actions");
    if let Some(var_86) = &input.actions {
        let mut list_88 = scope_85.start_list(false, None);
        for item_87 in var_86 {
            #[allow(unused_mut)]
            let mut entry_89 = list_88.entry();
            crate::query_ser::serialize_structure_crate_model_action(entry_89, item_87)?;
        }
        list_88.finish();
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("Tags");
    if let Some(var_91) = &input.tags {
        let mut list_93 = scope_90.start_list(false, None);
        for item_92 in var_91 {
            #[allow(unused_mut)]
            let mut entry_94 = list_93.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_94, item_92)?;
        }
        list_93.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_target_group(
    input: &crate::input::CreateTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateTargetGroup", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("Name");
    if let Some(var_96) = &input.name {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("Protocol");
    if let Some(var_98) = &input.protocol {
        scope_97.string(var_98.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("ProtocolVersion");
    if let Some(var_100) = &input.protocol_version {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("Port");
    if let Some(var_102) = &input.port {
        scope_101.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_102).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("VpcId");
    if let Some(var_104) = &input.vpc_id {
        scope_103.string(var_104);
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("HealthCheckProtocol");
    if let Some(var_106) = &input.health_check_protocol {
        scope_105.string(var_106.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("HealthCheckPort");
    if let Some(var_108) = &input.health_check_port {
        scope_107.string(var_108);
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("HealthCheckEnabled");
    if let Some(var_110) = &input.health_check_enabled {
        scope_109.boolean(*var_110);
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("HealthCheckPath");
    if let Some(var_112) = &input.health_check_path {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("HealthCheckIntervalSeconds");
    if let Some(var_114) = &input.health_check_interval_seconds {
        scope_113.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("HealthCheckTimeoutSeconds");
    if let Some(var_116) = &input.health_check_timeout_seconds {
        scope_115.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("HealthyThresholdCount");
    if let Some(var_118) = &input.healthy_threshold_count {
        scope_117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("UnhealthyThresholdCount");
    if let Some(var_120) = &input.unhealthy_threshold_count {
        scope_119.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_120).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("Matcher");
    if let Some(var_122) = &input.matcher {
        crate::query_ser::serialize_structure_crate_model_matcher(scope_121, var_122)?;
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("TargetType");
    if let Some(var_124) = &input.target_type {
        scope_123.string(var_124.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("Tags");
    if let Some(var_126) = &input.tags {
        let mut list_128 = scope_125.start_list(false, None);
        for item_127 in var_126 {
            #[allow(unused_mut)]
            let mut entry_129 = list_128.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_129, item_127)?;
        }
        list_128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("IpAddressType");
    if let Some(var_131) = &input.ip_address_type {
        scope_130.string(var_131.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_listener(
    input: &crate::input::DeleteListenerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteListener", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("ListenerArn");
    if let Some(var_133) = &input.listener_arn {
        scope_132.string(var_133);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_load_balancer(
    input: &crate::input::DeleteLoadBalancerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteLoadBalancer", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("LoadBalancerArn");
    if let Some(var_135) = &input.load_balancer_arn {
        scope_134.string(var_135);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_rule(
    input: &crate::input::DeleteRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteRule", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("RuleArn");
    if let Some(var_137) = &input.rule_arn {
        scope_136.string(var_137);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_target_group(
    input: &crate::input::DeleteTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteTargetGroup", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_138 = writer.prefix("TargetGroupArn");
    if let Some(var_139) = &input.target_group_arn {
        scope_138.string(var_139);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_targets(
    input: &crate::input::DeregisterTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeregisterTargets", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("TargetGroupArn");
    if let Some(var_141) = &input.target_group_arn {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Targets");
    if let Some(var_143) = &input.targets {
        let mut list_145 = scope_142.start_list(false, None);
        for item_144 in var_143 {
            #[allow(unused_mut)]
            let mut entry_146 = list_145.entry();
            crate::query_ser::serialize_structure_crate_model_target_description(
                entry_146, item_144,
            )?;
        }
        list_145.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_limits(
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountLimits", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("Marker");
    if let Some(var_148) = &input.marker {
        scope_147.string(var_148);
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("PageSize");
    if let Some(var_150) = &input.page_size {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_listener_certificates(
    input: &crate::input::DescribeListenerCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeListenerCertificates", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("ListenerArn");
    if let Some(var_152) = &input.listener_arn {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("Marker");
    if let Some(var_154) = &input.marker {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("PageSize");
    if let Some(var_156) = &input.page_size {
        scope_155.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_listeners(
    input: &crate::input::DescribeListenersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeListeners", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("LoadBalancerArn");
    if let Some(var_158) = &input.load_balancer_arn {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("ListenerArns");
    if let Some(var_160) = &input.listener_arns {
        let mut list_162 = scope_159.start_list(false, None);
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            entry_163.string(item_161);
        }
        list_162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("Marker");
    if let Some(var_165) = &input.marker {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("PageSize");
    if let Some(var_167) = &input.page_size {
        scope_166.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancer_attributes(
    input: &crate::input::DescribeLoadBalancerAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeLoadBalancerAttributes",
        "2015-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("LoadBalancerArn");
    if let Some(var_169) = &input.load_balancer_arn {
        scope_168.string(var_169);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_load_balancers(
    input: &crate::input::DescribeLoadBalancersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLoadBalancers", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("LoadBalancerArns");
    if let Some(var_171) = &input.load_balancer_arns {
        let mut list_173 = scope_170.start_list(false, None);
        for item_172 in var_171 {
            #[allow(unused_mut)]
            let mut entry_174 = list_173.entry();
            entry_174.string(item_172);
        }
        list_173.finish();
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("Names");
    if let Some(var_176) = &input.names {
        let mut list_178 = scope_175.start_list(false, None);
        for item_177 in var_176 {
            #[allow(unused_mut)]
            let mut entry_179 = list_178.entry();
            entry_179.string(item_177);
        }
        list_178.finish();
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("Marker");
    if let Some(var_181) = &input.marker {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("PageSize");
    if let Some(var_183) = &input.page_size {
        scope_182.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_rules(
    input: &crate::input::DescribeRulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeRules", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("ListenerArn");
    if let Some(var_185) = &input.listener_arn {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("RuleArns");
    if let Some(var_187) = &input.rule_arns {
        let mut list_189 = scope_186.start_list(false, None);
        for item_188 in var_187 {
            #[allow(unused_mut)]
            let mut entry_190 = list_189.entry();
            entry_190.string(item_188);
        }
        list_189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("Marker");
    if let Some(var_192) = &input.marker {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("PageSize");
    if let Some(var_194) = &input.page_size {
        scope_193.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_ssl_policies(
    input: &crate::input::DescribeSslPoliciesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSSLPolicies", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("Names");
    if let Some(var_196) = &input.names {
        let mut list_198 = scope_195.start_list(false, None);
        for item_197 in var_196 {
            #[allow(unused_mut)]
            let mut entry_199 = list_198.entry();
            entry_199.string(item_197);
        }
        list_198.finish();
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("Marker");
    if let Some(var_201) = &input.marker {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("PageSize");
    if let Some(var_203) = &input.page_size {
        scope_202.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("LoadBalancerType");
    if let Some(var_205) = &input.load_balancer_type {
        scope_204.string(var_205.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("ResourceArns");
    if let Some(var_207) = &input.resource_arns {
        let mut list_209 = scope_206.start_list(false, None);
        for item_208 in var_207 {
            #[allow(unused_mut)]
            let mut entry_210 = list_209.entry();
            entry_210.string(item_208);
        }
        list_209.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_target_group_attributes(
    input: &crate::input::DescribeTargetGroupAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTargetGroupAttributes", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("TargetGroupArn");
    if let Some(var_212) = &input.target_group_arn {
        scope_211.string(var_212);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_target_groups(
    input: &crate::input::DescribeTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTargetGroups", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("LoadBalancerArn");
    if let Some(var_214) = &input.load_balancer_arn {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("TargetGroupArns");
    if let Some(var_216) = &input.target_group_arns {
        let mut list_218 = scope_215.start_list(false, None);
        for item_217 in var_216 {
            #[allow(unused_mut)]
            let mut entry_219 = list_218.entry();
            entry_219.string(item_217);
        }
        list_218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("Names");
    if let Some(var_221) = &input.names {
        let mut list_223 = scope_220.start_list(false, None);
        for item_222 in var_221 {
            #[allow(unused_mut)]
            let mut entry_224 = list_223.entry();
            entry_224.string(item_222);
        }
        list_223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Marker");
    if let Some(var_226) = &input.marker {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("PageSize");
    if let Some(var_228) = &input.page_size {
        scope_227.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_228).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_target_health(
    input: &crate::input::DescribeTargetHealthInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTargetHealth", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("TargetGroupArn");
    if let Some(var_230) = &input.target_group_arn {
        scope_229.string(var_230);
    }
    #[allow(unused_mut)]
    let mut scope_231 = writer.prefix("Targets");
    if let Some(var_232) = &input.targets {
        let mut list_234 = scope_231.start_list(false, None);
        for item_233 in var_232 {
            #[allow(unused_mut)]
            let mut entry_235 = list_234.entry();
            crate::query_ser::serialize_structure_crate_model_target_description(
                entry_235, item_233,
            )?;
        }
        list_234.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_listener(
    input: &crate::input::ModifyListenerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyListener", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("ListenerArn");
    if let Some(var_237) = &input.listener_arn {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("Port");
    if let Some(var_239) = &input.port {
        scope_238.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_239).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("Protocol");
    if let Some(var_241) = &input.protocol {
        scope_240.string(var_241.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("SslPolicy");
    if let Some(var_243) = &input.ssl_policy {
        scope_242.string(var_243);
    }
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("Certificates");
    if let Some(var_245) = &input.certificates {
        let mut list_247 = scope_244.start_list(false, None);
        for item_246 in var_245 {
            #[allow(unused_mut)]
            let mut entry_248 = list_247.entry();
            crate::query_ser::serialize_structure_crate_model_certificate(entry_248, item_246)?;
        }
        list_247.finish();
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("DefaultActions");
    if let Some(var_250) = &input.default_actions {
        let mut list_252 = scope_249.start_list(false, None);
        for item_251 in var_250 {
            #[allow(unused_mut)]
            let mut entry_253 = list_252.entry();
            crate::query_ser::serialize_structure_crate_model_action(entry_253, item_251)?;
        }
        list_252.finish();
    }
    #[allow(unused_mut)]
    let mut scope_254 = writer.prefix("AlpnPolicy");
    if let Some(var_255) = &input.alpn_policy {
        let mut list_257 = scope_254.start_list(false, None);
        for item_256 in var_255 {
            #[allow(unused_mut)]
            let mut entry_258 = list_257.entry();
            entry_258.string(item_256);
        }
        list_257.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_load_balancer_attributes(
    input: &crate::input::ModifyLoadBalancerAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyLoadBalancerAttributes", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_259 = writer.prefix("LoadBalancerArn");
    if let Some(var_260) = &input.load_balancer_arn {
        scope_259.string(var_260);
    }
    #[allow(unused_mut)]
    let mut scope_261 = writer.prefix("Attributes");
    if let Some(var_262) = &input.attributes {
        let mut list_264 = scope_261.start_list(false, None);
        for item_263 in var_262 {
            #[allow(unused_mut)]
            let mut entry_265 = list_264.entry();
            crate::query_ser::serialize_structure_crate_model_load_balancer_attribute(
                entry_265, item_263,
            )?;
        }
        list_264.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_rule(
    input: &crate::input::ModifyRuleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyRule", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("RuleArn");
    if let Some(var_267) = &input.rule_arn {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("Conditions");
    if let Some(var_269) = &input.conditions {
        let mut list_271 = scope_268.start_list(false, None);
        for item_270 in var_269 {
            #[allow(unused_mut)]
            let mut entry_272 = list_271.entry();
            crate::query_ser::serialize_structure_crate_model_rule_condition(entry_272, item_270)?;
        }
        list_271.finish();
    }
    #[allow(unused_mut)]
    let mut scope_273 = writer.prefix("Actions");
    if let Some(var_274) = &input.actions {
        let mut list_276 = scope_273.start_list(false, None);
        for item_275 in var_274 {
            #[allow(unused_mut)]
            let mut entry_277 = list_276.entry();
            crate::query_ser::serialize_structure_crate_model_action(entry_277, item_275)?;
        }
        list_276.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_target_group(
    input: &crate::input::ModifyTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTargetGroup", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("TargetGroupArn");
    if let Some(var_279) = &input.target_group_arn {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("HealthCheckProtocol");
    if let Some(var_281) = &input.health_check_protocol {
        scope_280.string(var_281.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_282 = writer.prefix("HealthCheckPort");
    if let Some(var_283) = &input.health_check_port {
        scope_282.string(var_283);
    }
    #[allow(unused_mut)]
    let mut scope_284 = writer.prefix("HealthCheckPath");
    if let Some(var_285) = &input.health_check_path {
        scope_284.string(var_285);
    }
    #[allow(unused_mut)]
    let mut scope_286 = writer.prefix("HealthCheckEnabled");
    if let Some(var_287) = &input.health_check_enabled {
        scope_286.boolean(*var_287);
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("HealthCheckIntervalSeconds");
    if let Some(var_289) = &input.health_check_interval_seconds {
        scope_288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("HealthCheckTimeoutSeconds");
    if let Some(var_291) = &input.health_check_timeout_seconds {
        scope_290.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_291).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("HealthyThresholdCount");
    if let Some(var_293) = &input.healthy_threshold_count {
        scope_292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_294 = writer.prefix("UnhealthyThresholdCount");
    if let Some(var_295) = &input.unhealthy_threshold_count {
        scope_294.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_295).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_296 = writer.prefix("Matcher");
    if let Some(var_297) = &input.matcher {
        crate::query_ser::serialize_structure_crate_model_matcher(scope_296, var_297)?;
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_target_group_attributes(
    input: &crate::input::ModifyTargetGroupAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyTargetGroupAttributes", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_298 = writer.prefix("TargetGroupArn");
    if let Some(var_299) = &input.target_group_arn {
        scope_298.string(var_299);
    }
    #[allow(unused_mut)]
    let mut scope_300 = writer.prefix("Attributes");
    if let Some(var_301) = &input.attributes {
        let mut list_303 = scope_300.start_list(false, None);
        for item_302 in var_301 {
            #[allow(unused_mut)]
            let mut entry_304 = list_303.entry();
            crate::query_ser::serialize_structure_crate_model_target_group_attribute(
                entry_304, item_302,
            )?;
        }
        list_303.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_targets(
    input: &crate::input::RegisterTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RegisterTargets", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_305 = writer.prefix("TargetGroupArn");
    if let Some(var_306) = &input.target_group_arn {
        scope_305.string(var_306);
    }
    #[allow(unused_mut)]
    let mut scope_307 = writer.prefix("Targets");
    if let Some(var_308) = &input.targets {
        let mut list_310 = scope_307.start_list(false, None);
        for item_309 in var_308 {
            #[allow(unused_mut)]
            let mut entry_311 = list_310.entry();
            crate::query_ser::serialize_structure_crate_model_target_description(
                entry_311, item_309,
            )?;
        }
        list_310.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_listener_certificates(
    input: &crate::input::RemoveListenerCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveListenerCertificates", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("ListenerArn");
    if let Some(var_313) = &input.listener_arn {
        scope_312.string(var_313);
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Certificates");
    if let Some(var_315) = &input.certificates {
        let mut list_317 = scope_314.start_list(false, None);
        for item_316 in var_315 {
            #[allow(unused_mut)]
            let mut entry_318 = list_317.entry();
            crate::query_ser::serialize_structure_crate_model_certificate(entry_318, item_316)?;
        }
        list_317.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags(
    input: &crate::input::RemoveTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemoveTags", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("ResourceArns");
    if let Some(var_320) = &input.resource_arns {
        let mut list_322 = scope_319.start_list(false, None);
        for item_321 in var_320 {
            #[allow(unused_mut)]
            let mut entry_323 = list_322.entry();
            entry_323.string(item_321);
        }
        list_322.finish();
    }
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("TagKeys");
    if let Some(var_325) = &input.tag_keys {
        let mut list_327 = scope_324.start_list(false, None);
        for item_326 in var_325 {
            #[allow(unused_mut)]
            let mut entry_328 = list_327.entry();
            entry_328.string(item_326);
        }
        list_327.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_ip_address_type(
    input: &crate::input::SetIpAddressTypeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SetIpAddressType", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("LoadBalancerArn");
    if let Some(var_330) = &input.load_balancer_arn {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("IpAddressType");
    if let Some(var_332) = &input.ip_address_type {
        scope_331.string(var_332.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_rule_priorities(
    input: &crate::input::SetRulePrioritiesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetRulePriorities", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("RulePriorities");
    if let Some(var_334) = &input.rule_priorities {
        let mut list_336 = scope_333.start_list(false, None);
        for item_335 in var_334 {
            #[allow(unused_mut)]
            let mut entry_337 = list_336.entry();
            crate::query_ser::serialize_structure_crate_model_rule_priority_pair(
                entry_337, item_335,
            )?;
        }
        list_336.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_security_groups(
    input: &crate::input::SetSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetSecurityGroups", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_338 = writer.prefix("LoadBalancerArn");
    if let Some(var_339) = &input.load_balancer_arn {
        scope_338.string(var_339);
    }
    #[allow(unused_mut)]
    let mut scope_340 = writer.prefix("SecurityGroups");
    if let Some(var_341) = &input.security_groups {
        let mut list_343 = scope_340.start_list(false, None);
        for item_342 in var_341 {
            #[allow(unused_mut)]
            let mut entry_344 = list_343.entry();
            entry_344.string(item_342);
        }
        list_343.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_subnets(
    input: &crate::input::SetSubnetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SetSubnets", "2015-12-01");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("LoadBalancerArn");
    if let Some(var_346) = &input.load_balancer_arn {
        scope_345.string(var_346);
    }
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("Subnets");
    if let Some(var_348) = &input.subnets {
        let mut list_350 = scope_347.start_list(false, None);
        for item_349 in var_348 {
            #[allow(unused_mut)]
            let mut entry_351 = list_350.entry();
            entry_351.string(item_349);
        }
        list_350.finish();
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("SubnetMappings");
    if let Some(var_353) = &input.subnet_mappings {
        let mut list_355 = scope_352.start_list(false, None);
        for item_354 in var_353 {
            #[allow(unused_mut)]
            let mut entry_356 = list_355.entry();
            crate::query_ser::serialize_structure_crate_model_subnet_mapping(entry_356, item_354)?;
        }
        list_355.finish();
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("IpAddressType");
    if let Some(var_358) = &input.ip_address_type {
        scope_357.string(var_358.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
