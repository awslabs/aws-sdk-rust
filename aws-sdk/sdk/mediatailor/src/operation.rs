// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `ConfigureLogsForPlaybackConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`configure_logs_for_playback_configuration`](crate::client::Client::configure_logs_for_playback_configuration).
///
/// See [`crate::client::fluent_builders::ConfigureLogsForPlaybackConfiguration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfigureLogsForPlaybackConfiguration {
    _private: (),
}
impl ConfigureLogsForPlaybackConfiguration {
    /// Creates a new builder-style object to manufacture [`ConfigureLogsForPlaybackConfigurationInput`](crate::input::ConfigureLogsForPlaybackConfigurationInput)
    pub fn builder() -> crate::input::configure_logs_for_playback_configuration_input::Builder {
        crate::input::configure_logs_for_playback_configuration_input::Builder::default()
    }
    /// Creates a new `ConfigureLogsForPlaybackConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfigureLogsForPlaybackConfiguration {
    type Output = std::result::Result<
        crate::output::ConfigureLogsForPlaybackConfigurationOutput,
        crate::error::ConfigureLogsForPlaybackConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_configure_logs_for_playback_configuration_error(response)
        } else {
            crate::operation_deser::parse_configure_logs_for_playback_configuration_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel`](crate::client::Client::create_channel).
///
/// See [`crate::client::fluent_builders::CreateChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannel {
    _private: (),
}
impl CreateChannel {
    /// Creates a new builder-style object to manufacture [`CreateChannelInput`](crate::input::CreateChannelInput)
    pub fn builder() -> crate::input::create_channel_input::Builder {
        crate::input::create_channel_input::Builder::default()
    }
    /// Creates a new `CreateChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannel {
    type Output =
        std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_channel_error(response)
        } else {
            crate::operation_deser::parse_create_channel_response(response)
        }
    }
}

/// Operation shape for `CreatePrefetchSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_prefetch_schedule`](crate::client::Client::create_prefetch_schedule).
///
/// See [`crate::client::fluent_builders::CreatePrefetchSchedule`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePrefetchSchedule {
    _private: (),
}
impl CreatePrefetchSchedule {
    /// Creates a new builder-style object to manufacture [`CreatePrefetchScheduleInput`](crate::input::CreatePrefetchScheduleInput)
    pub fn builder() -> crate::input::create_prefetch_schedule_input::Builder {
        crate::input::create_prefetch_schedule_input::Builder::default()
    }
    /// Creates a new `CreatePrefetchSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePrefetchSchedule {
    type Output = std::result::Result<
        crate::output::CreatePrefetchScheduleOutput,
        crate::error::CreatePrefetchScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_prefetch_schedule_error(response)
        } else {
            crate::operation_deser::parse_create_prefetch_schedule_response(response)
        }
    }
}

/// Operation shape for `CreateProgram`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_program`](crate::client::Client::create_program).
///
/// See [`crate::client::fluent_builders::CreateProgram`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProgram {
    _private: (),
}
impl CreateProgram {
    /// Creates a new builder-style object to manufacture [`CreateProgramInput`](crate::input::CreateProgramInput)
    pub fn builder() -> crate::input::create_program_input::Builder {
        crate::input::create_program_input::Builder::default()
    }
    /// Creates a new `CreateProgram` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProgram {
    type Output =
        std::result::Result<crate::output::CreateProgramOutput, crate::error::CreateProgramError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_program_error(response)
        } else {
            crate::operation_deser::parse_create_program_response(response)
        }
    }
}

/// Operation shape for `CreateSourceLocation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_source_location`](crate::client::Client::create_source_location).
///
/// See [`crate::client::fluent_builders::CreateSourceLocation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSourceLocation {
    _private: (),
}
impl CreateSourceLocation {
    /// Creates a new builder-style object to manufacture [`CreateSourceLocationInput`](crate::input::CreateSourceLocationInput)
    pub fn builder() -> crate::input::create_source_location_input::Builder {
        crate::input::create_source_location_input::Builder::default()
    }
    /// Creates a new `CreateSourceLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSourceLocation {
    type Output = std::result::Result<
        crate::output::CreateSourceLocationOutput,
        crate::error::CreateSourceLocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_source_location_error(response)
        } else {
            crate::operation_deser::parse_create_source_location_response(response)
        }
    }
}

/// Operation shape for `CreateVodSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_vod_source`](crate::client::Client::create_vod_source).
///
/// See [`crate::client::fluent_builders::CreateVodSource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateVodSource {
    _private: (),
}
impl CreateVodSource {
    /// Creates a new builder-style object to manufacture [`CreateVodSourceInput`](crate::input::CreateVodSourceInput)
    pub fn builder() -> crate::input::create_vod_source_input::Builder {
        crate::input::create_vod_source_input::Builder::default()
    }
    /// Creates a new `CreateVodSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateVodSource {
    type Output = std::result::Result<
        crate::output::CreateVodSourceOutput,
        crate::error::CreateVodSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_vod_source_error(response)
        } else {
            crate::operation_deser::parse_create_vod_source_response(response)
        }
    }
}

/// Operation shape for `DeleteChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel`](crate::client::Client::delete_channel).
///
/// See [`crate::client::fluent_builders::DeleteChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannel {
    _private: (),
}
impl DeleteChannel {
    /// Creates a new builder-style object to manufacture [`DeleteChannelInput`](crate::input::DeleteChannelInput)
    pub fn builder() -> crate::input::delete_channel_input::Builder {
        crate::input::delete_channel_input::Builder::default()
    }
    /// Creates a new `DeleteChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannel {
    type Output =
        std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_channel_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_response(response)
        }
    }
}

/// Operation shape for `DeleteChannelPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_policy`](crate::client::Client::delete_channel_policy).
///
/// See [`crate::client::fluent_builders::DeleteChannelPolicy`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelPolicy {
    _private: (),
}
impl DeleteChannelPolicy {
    /// Creates a new builder-style object to manufacture [`DeleteChannelPolicyInput`](crate::input::DeleteChannelPolicyInput)
    pub fn builder() -> crate::input::delete_channel_policy_input::Builder {
        crate::input::delete_channel_policy_input::Builder::default()
    }
    /// Creates a new `DeleteChannelPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelPolicy {
    type Output = std::result::Result<
        crate::output::DeleteChannelPolicyOutput,
        crate::error::DeleteChannelPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_channel_policy_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_policy_response(response)
        }
    }
}

/// Operation shape for `DeletePlaybackConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_playback_configuration`](crate::client::Client::delete_playback_configuration).
///
/// See [`crate::client::fluent_builders::DeletePlaybackConfiguration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePlaybackConfiguration {
    _private: (),
}
impl DeletePlaybackConfiguration {
    /// Creates a new builder-style object to manufacture [`DeletePlaybackConfigurationInput`](crate::input::DeletePlaybackConfigurationInput)
    pub fn builder() -> crate::input::delete_playback_configuration_input::Builder {
        crate::input::delete_playback_configuration_input::Builder::default()
    }
    /// Creates a new `DeletePlaybackConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePlaybackConfiguration {
    type Output = std::result::Result<
        crate::output::DeletePlaybackConfigurationOutput,
        crate::error::DeletePlaybackConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_playback_configuration_error(response)
        } else {
            crate::operation_deser::parse_delete_playback_configuration_response(response)
        }
    }
}

/// Operation shape for `DeletePrefetchSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_prefetch_schedule`](crate::client::Client::delete_prefetch_schedule).
///
/// See [`crate::client::fluent_builders::DeletePrefetchSchedule`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeletePrefetchSchedule {
    _private: (),
}
impl DeletePrefetchSchedule {
    /// Creates a new builder-style object to manufacture [`DeletePrefetchScheduleInput`](crate::input::DeletePrefetchScheduleInput)
    pub fn builder() -> crate::input::delete_prefetch_schedule_input::Builder {
        crate::input::delete_prefetch_schedule_input::Builder::default()
    }
    /// Creates a new `DeletePrefetchSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeletePrefetchSchedule {
    type Output = std::result::Result<
        crate::output::DeletePrefetchScheduleOutput,
        crate::error::DeletePrefetchScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_prefetch_schedule_error(response)
        } else {
            crate::operation_deser::parse_delete_prefetch_schedule_response(response)
        }
    }
}

/// Operation shape for `DeleteProgram`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_program`](crate::client::Client::delete_program).
///
/// See [`crate::client::fluent_builders::DeleteProgram`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProgram {
    _private: (),
}
impl DeleteProgram {
    /// Creates a new builder-style object to manufacture [`DeleteProgramInput`](crate::input::DeleteProgramInput)
    pub fn builder() -> crate::input::delete_program_input::Builder {
        crate::input::delete_program_input::Builder::default()
    }
    /// Creates a new `DeleteProgram` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProgram {
    type Output =
        std::result::Result<crate::output::DeleteProgramOutput, crate::error::DeleteProgramError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_program_error(response)
        } else {
            crate::operation_deser::parse_delete_program_response(response)
        }
    }
}

/// Operation shape for `DeleteSourceLocation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_source_location`](crate::client::Client::delete_source_location).
///
/// See [`crate::client::fluent_builders::DeleteSourceLocation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSourceLocation {
    _private: (),
}
impl DeleteSourceLocation {
    /// Creates a new builder-style object to manufacture [`DeleteSourceLocationInput`](crate::input::DeleteSourceLocationInput)
    pub fn builder() -> crate::input::delete_source_location_input::Builder {
        crate::input::delete_source_location_input::Builder::default()
    }
    /// Creates a new `DeleteSourceLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSourceLocation {
    type Output = std::result::Result<
        crate::output::DeleteSourceLocationOutput,
        crate::error::DeleteSourceLocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_source_location_error(response)
        } else {
            crate::operation_deser::parse_delete_source_location_response(response)
        }
    }
}

/// Operation shape for `DeleteVodSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_vod_source`](crate::client::Client::delete_vod_source).
///
/// See [`crate::client::fluent_builders::DeleteVodSource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVodSource {
    _private: (),
}
impl DeleteVodSource {
    /// Creates a new builder-style object to manufacture [`DeleteVodSourceInput`](crate::input::DeleteVodSourceInput)
    pub fn builder() -> crate::input::delete_vod_source_input::Builder {
        crate::input::delete_vod_source_input::Builder::default()
    }
    /// Creates a new `DeleteVodSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVodSource {
    type Output = std::result::Result<
        crate::output::DeleteVodSourceOutput,
        crate::error::DeleteVodSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vod_source_error(response)
        } else {
            crate::operation_deser::parse_delete_vod_source_response(response)
        }
    }
}

/// Operation shape for `DescribeChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel`](crate::client::Client::describe_channel).
///
/// See [`crate::client::fluent_builders::DescribeChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannel {
    _private: (),
}
impl DescribeChannel {
    /// Creates a new builder-style object to manufacture [`DescribeChannelInput`](crate::input::DescribeChannelInput)
    pub fn builder() -> crate::input::describe_channel_input::Builder {
        crate::input::describe_channel_input::Builder::default()
    }
    /// Creates a new `DescribeChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannel {
    type Output = std::result::Result<
        crate::output::DescribeChannelOutput,
        crate::error::DescribeChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_response(response)
        }
    }
}

/// Operation shape for `DescribeProgram`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_program`](crate::client::Client::describe_program).
///
/// See [`crate::client::fluent_builders::DescribeProgram`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProgram {
    _private: (),
}
impl DescribeProgram {
    /// Creates a new builder-style object to manufacture [`DescribeProgramInput`](crate::input::DescribeProgramInput)
    pub fn builder() -> crate::input::describe_program_input::Builder {
        crate::input::describe_program_input::Builder::default()
    }
    /// Creates a new `DescribeProgram` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeProgram {
    type Output = std::result::Result<
        crate::output::DescribeProgramOutput,
        crate::error::DescribeProgramError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_program_error(response)
        } else {
            crate::operation_deser::parse_describe_program_response(response)
        }
    }
}

/// Operation shape for `DescribeSourceLocation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_source_location`](crate::client::Client::describe_source_location).
///
/// See [`crate::client::fluent_builders::DescribeSourceLocation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSourceLocation {
    _private: (),
}
impl DescribeSourceLocation {
    /// Creates a new builder-style object to manufacture [`DescribeSourceLocationInput`](crate::input::DescribeSourceLocationInput)
    pub fn builder() -> crate::input::describe_source_location_input::Builder {
        crate::input::describe_source_location_input::Builder::default()
    }
    /// Creates a new `DescribeSourceLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSourceLocation {
    type Output = std::result::Result<
        crate::output::DescribeSourceLocationOutput,
        crate::error::DescribeSourceLocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_source_location_error(response)
        } else {
            crate::operation_deser::parse_describe_source_location_response(response)
        }
    }
}

/// Operation shape for `DescribeVodSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_vod_source`](crate::client::Client::describe_vod_source).
///
/// See [`crate::client::fluent_builders::DescribeVodSource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVodSource {
    _private: (),
}
impl DescribeVodSource {
    /// Creates a new builder-style object to manufacture [`DescribeVodSourceInput`](crate::input::DescribeVodSourceInput)
    pub fn builder() -> crate::input::describe_vod_source_input::Builder {
        crate::input::describe_vod_source_input::Builder::default()
    }
    /// Creates a new `DescribeVodSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeVodSource {
    type Output = std::result::Result<
        crate::output::DescribeVodSourceOutput,
        crate::error::DescribeVodSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_vod_source_error(response)
        } else {
            crate::operation_deser::parse_describe_vod_source_response(response)
        }
    }
}

/// Operation shape for `GetChannelPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_channel_policy`](crate::client::Client::get_channel_policy).
///
/// See [`crate::client::fluent_builders::GetChannelPolicy`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetChannelPolicy {
    _private: (),
}
impl GetChannelPolicy {
    /// Creates a new builder-style object to manufacture [`GetChannelPolicyInput`](crate::input::GetChannelPolicyInput)
    pub fn builder() -> crate::input::get_channel_policy_input::Builder {
        crate::input::get_channel_policy_input::Builder::default()
    }
    /// Creates a new `GetChannelPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetChannelPolicy {
    type Output = std::result::Result<
        crate::output::GetChannelPolicyOutput,
        crate::error::GetChannelPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_channel_policy_error(response)
        } else {
            crate::operation_deser::parse_get_channel_policy_response(response)
        }
    }
}

/// Operation shape for `GetChannelSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_channel_schedule`](crate::client::Client::get_channel_schedule).
///
/// See [`crate::client::fluent_builders::GetChannelSchedule`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetChannelSchedule {
    _private: (),
}
impl GetChannelSchedule {
    /// Creates a new builder-style object to manufacture [`GetChannelScheduleInput`](crate::input::GetChannelScheduleInput)
    pub fn builder() -> crate::input::get_channel_schedule_input::Builder {
        crate::input::get_channel_schedule_input::Builder::default()
    }
    /// Creates a new `GetChannelSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetChannelSchedule {
    type Output = std::result::Result<
        crate::output::GetChannelScheduleOutput,
        crate::error::GetChannelScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_channel_schedule_error(response)
        } else {
            crate::operation_deser::parse_get_channel_schedule_response(response)
        }
    }
}

/// Operation shape for `GetPlaybackConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_playback_configuration`](crate::client::Client::get_playback_configuration).
///
/// See [`crate::client::fluent_builders::GetPlaybackConfiguration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPlaybackConfiguration {
    _private: (),
}
impl GetPlaybackConfiguration {
    /// Creates a new builder-style object to manufacture [`GetPlaybackConfigurationInput`](crate::input::GetPlaybackConfigurationInput)
    pub fn builder() -> crate::input::get_playback_configuration_input::Builder {
        crate::input::get_playback_configuration_input::Builder::default()
    }
    /// Creates a new `GetPlaybackConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPlaybackConfiguration {
    type Output = std::result::Result<
        crate::output::GetPlaybackConfigurationOutput,
        crate::error::GetPlaybackConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_playback_configuration_error(response)
        } else {
            crate::operation_deser::parse_get_playback_configuration_response(response)
        }
    }
}

/// Operation shape for `GetPrefetchSchedule`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_prefetch_schedule`](crate::client::Client::get_prefetch_schedule).
///
/// See [`crate::client::fluent_builders::GetPrefetchSchedule`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetPrefetchSchedule {
    _private: (),
}
impl GetPrefetchSchedule {
    /// Creates a new builder-style object to manufacture [`GetPrefetchScheduleInput`](crate::input::GetPrefetchScheduleInput)
    pub fn builder() -> crate::input::get_prefetch_schedule_input::Builder {
        crate::input::get_prefetch_schedule_input::Builder::default()
    }
    /// Creates a new `GetPrefetchSchedule` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetPrefetchSchedule {
    type Output = std::result::Result<
        crate::output::GetPrefetchScheduleOutput,
        crate::error::GetPrefetchScheduleError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_prefetch_schedule_error(response)
        } else {
            crate::operation_deser::parse_get_prefetch_schedule_response(response)
        }
    }
}

/// Operation shape for `ListAlerts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_alerts`](crate::client::Client::list_alerts).
///
/// See [`crate::client::fluent_builders::ListAlerts`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAlerts {
    _private: (),
}
impl ListAlerts {
    /// Creates a new builder-style object to manufacture [`ListAlertsInput`](crate::input::ListAlertsInput)
    pub fn builder() -> crate::input::list_alerts_input::Builder {
        crate::input::list_alerts_input::Builder::default()
    }
    /// Creates a new `ListAlerts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAlerts {
    type Output =
        std::result::Result<crate::output::ListAlertsOutput, crate::error::ListAlertsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_alerts_error(response)
        } else {
            crate::operation_deser::parse_list_alerts_response(response)
        }
    }
}

/// Operation shape for `ListChannels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channels`](crate::client::Client::list_channels).
///
/// See [`crate::client::fluent_builders::ListChannels`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannels {
    _private: (),
}
impl ListChannels {
    /// Creates a new builder-style object to manufacture [`ListChannelsInput`](crate::input::ListChannelsInput)
    pub fn builder() -> crate::input::list_channels_input::Builder {
        crate::input::list_channels_input::Builder::default()
    }
    /// Creates a new `ListChannels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannels {
    type Output =
        std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channels_error(response)
        } else {
            crate::operation_deser::parse_list_channels_response(response)
        }
    }
}

/// Operation shape for `ListPlaybackConfigurations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_playback_configurations`](crate::client::Client::list_playback_configurations).
///
/// See [`crate::client::fluent_builders::ListPlaybackConfigurations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPlaybackConfigurations {
    _private: (),
}
impl ListPlaybackConfigurations {
    /// Creates a new builder-style object to manufacture [`ListPlaybackConfigurationsInput`](crate::input::ListPlaybackConfigurationsInput)
    pub fn builder() -> crate::input::list_playback_configurations_input::Builder {
        crate::input::list_playback_configurations_input::Builder::default()
    }
    /// Creates a new `ListPlaybackConfigurations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPlaybackConfigurations {
    type Output = std::result::Result<
        crate::output::ListPlaybackConfigurationsOutput,
        crate::error::ListPlaybackConfigurationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_playback_configurations_error(response)
        } else {
            crate::operation_deser::parse_list_playback_configurations_response(response)
        }
    }
}

/// Operation shape for `ListPrefetchSchedules`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_prefetch_schedules`](crate::client::Client::list_prefetch_schedules).
///
/// See [`crate::client::fluent_builders::ListPrefetchSchedules`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListPrefetchSchedules {
    _private: (),
}
impl ListPrefetchSchedules {
    /// Creates a new builder-style object to manufacture [`ListPrefetchSchedulesInput`](crate::input::ListPrefetchSchedulesInput)
    pub fn builder() -> crate::input::list_prefetch_schedules_input::Builder {
        crate::input::list_prefetch_schedules_input::Builder::default()
    }
    /// Creates a new `ListPrefetchSchedules` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPrefetchSchedules {
    type Output = std::result::Result<
        crate::output::ListPrefetchSchedulesOutput,
        crate::error::ListPrefetchSchedulesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_prefetch_schedules_error(response)
        } else {
            crate::operation_deser::parse_list_prefetch_schedules_response(response)
        }
    }
}

/// Operation shape for `ListSourceLocations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_source_locations`](crate::client::Client::list_source_locations).
///
/// See [`crate::client::fluent_builders::ListSourceLocations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSourceLocations {
    _private: (),
}
impl ListSourceLocations {
    /// Creates a new builder-style object to manufacture [`ListSourceLocationsInput`](crate::input::ListSourceLocationsInput)
    pub fn builder() -> crate::input::list_source_locations_input::Builder {
        crate::input::list_source_locations_input::Builder::default()
    }
    /// Creates a new `ListSourceLocations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSourceLocations {
    type Output = std::result::Result<
        crate::output::ListSourceLocationsOutput,
        crate::error::ListSourceLocationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_source_locations_error(response)
        } else {
            crate::operation_deser::parse_list_source_locations_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::Client::list_tags_for_resource).
///
/// See [`crate::client::fluent_builders::ListTagsForResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `ListVodSources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_vod_sources`](crate::client::Client::list_vod_sources).
///
/// See [`crate::client::fluent_builders::ListVodSources`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVodSources {
    _private: (),
}
impl ListVodSources {
    /// Creates a new builder-style object to manufacture [`ListVodSourcesInput`](crate::input::ListVodSourcesInput)
    pub fn builder() -> crate::input::list_vod_sources_input::Builder {
        crate::input::list_vod_sources_input::Builder::default()
    }
    /// Creates a new `ListVodSources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVodSources {
    type Output =
        std::result::Result<crate::output::ListVodSourcesOutput, crate::error::ListVodSourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_vod_sources_error(response)
        } else {
            crate::operation_deser::parse_list_vod_sources_response(response)
        }
    }
}

/// Operation shape for `PutChannelPolicy`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_channel_policy`](crate::client::Client::put_channel_policy).
///
/// See [`crate::client::fluent_builders::PutChannelPolicy`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutChannelPolicy {
    _private: (),
}
impl PutChannelPolicy {
    /// Creates a new builder-style object to manufacture [`PutChannelPolicyInput`](crate::input::PutChannelPolicyInput)
    pub fn builder() -> crate::input::put_channel_policy_input::Builder {
        crate::input::put_channel_policy_input::Builder::default()
    }
    /// Creates a new `PutChannelPolicy` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutChannelPolicy {
    type Output = std::result::Result<
        crate::output::PutChannelPolicyOutput,
        crate::error::PutChannelPolicyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_channel_policy_error(response)
        } else {
            crate::operation_deser::parse_put_channel_policy_response(response)
        }
    }
}

/// Operation shape for `PutPlaybackConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_playback_configuration`](crate::client::Client::put_playback_configuration).
///
/// See [`crate::client::fluent_builders::PutPlaybackConfiguration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutPlaybackConfiguration {
    _private: (),
}
impl PutPlaybackConfiguration {
    /// Creates a new builder-style object to manufacture [`PutPlaybackConfigurationInput`](crate::input::PutPlaybackConfigurationInput)
    pub fn builder() -> crate::input::put_playback_configuration_input::Builder {
        crate::input::put_playback_configuration_input::Builder::default()
    }
    /// Creates a new `PutPlaybackConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutPlaybackConfiguration {
    type Output = std::result::Result<
        crate::output::PutPlaybackConfigurationOutput,
        crate::error::PutPlaybackConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_playback_configuration_error(response)
        } else {
            crate::operation_deser::parse_put_playback_configuration_response(response)
        }
    }
}

/// Operation shape for `StartChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_channel`](crate::client::Client::start_channel).
///
/// See [`crate::client::fluent_builders::StartChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartChannel {
    _private: (),
}
impl StartChannel {
    /// Creates a new builder-style object to manufacture [`StartChannelInput`](crate::input::StartChannelInput)
    pub fn builder() -> crate::input::start_channel_input::Builder {
        crate::input::start_channel_input::Builder::default()
    }
    /// Creates a new `StartChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartChannel {
    type Output =
        std::result::Result<crate::output::StartChannelOutput, crate::error::StartChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_channel_error(response)
        } else {
            crate::operation_deser::parse_start_channel_response(response)
        }
    }
}

/// Operation shape for `StopChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_channel`](crate::client::Client::stop_channel).
///
/// See [`crate::client::fluent_builders::StopChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopChannel {
    _private: (),
}
impl StopChannel {
    /// Creates a new builder-style object to manufacture [`StopChannelInput`](crate::input::StopChannelInput)
    pub fn builder() -> crate::input::stop_channel_input::Builder {
        crate::input::stop_channel_input::Builder::default()
    }
    /// Creates a new `StopChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopChannel {
    type Output =
        std::result::Result<crate::output::StopChannelOutput, crate::error::StopChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_channel_error(response)
        } else {
            crate::operation_deser::parse_stop_channel_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// See [`crate::client::fluent_builders::TagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// See [`crate::client::fluent_builders::UntagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_channel`](crate::client::Client::update_channel).
///
/// See [`crate::client::fluent_builders::UpdateChannel`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannel {
    _private: (),
}
impl UpdateChannel {
    /// Creates a new builder-style object to manufacture [`UpdateChannelInput`](crate::input::UpdateChannelInput)
    pub fn builder() -> crate::input::update_channel_input::Builder {
        crate::input::update_channel_input::Builder::default()
    }
    /// Creates a new `UpdateChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateChannel {
    type Output =
        std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_error(response)
        } else {
            crate::operation_deser::parse_update_channel_response(response)
        }
    }
}

/// Operation shape for `UpdateSourceLocation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_source_location`](crate::client::Client::update_source_location).
///
/// See [`crate::client::fluent_builders::UpdateSourceLocation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSourceLocation {
    _private: (),
}
impl UpdateSourceLocation {
    /// Creates a new builder-style object to manufacture [`UpdateSourceLocationInput`](crate::input::UpdateSourceLocationInput)
    pub fn builder() -> crate::input::update_source_location_input::Builder {
        crate::input::update_source_location_input::Builder::default()
    }
    /// Creates a new `UpdateSourceLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSourceLocation {
    type Output = std::result::Result<
        crate::output::UpdateSourceLocationOutput,
        crate::error::UpdateSourceLocationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_source_location_error(response)
        } else {
            crate::operation_deser::parse_update_source_location_response(response)
        }
    }
}

/// Operation shape for `UpdateVodSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_vod_source`](crate::client::Client::update_vod_source).
///
/// See [`crate::client::fluent_builders::UpdateVodSource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVodSource {
    _private: (),
}
impl UpdateVodSource {
    /// Creates a new builder-style object to manufacture [`UpdateVodSourceInput`](crate::input::UpdateVodSourceInput)
    pub fn builder() -> crate::input::update_vod_source_input::Builder {
        crate::input::update_vod_source_input::Builder::default()
    }
    /// Creates a new `UpdateVodSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateVodSource {
    type Output = std::result::Result<
        crate::output::UpdateVodSourceOutput,
        crate::error::UpdateVodSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_vod_source_error(response)
        } else {
            crate::operation_deser::parse_update_vod_source_response(response)
        }
    }
}
