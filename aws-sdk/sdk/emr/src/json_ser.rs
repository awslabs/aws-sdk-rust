// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_instance_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.cluster_id {
        object.key("ClusterId").string(var_1);
    }
    if let Some(var_2) = &input.instance_fleet {
        let mut object_3 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_config(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.instance_groups {
        let mut array_5 = object.key("InstanceGroups").start_array();
        for item_6 in var_4 {
            {
                let mut object_7 = array_5.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_config(
                    &mut object_7,
                    item_6,
                )?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.job_flow_id {
        object.key("JobFlowId").string(var_8);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_job_flow_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddJobFlowStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.job_flow_id {
        object.key("JobFlowId").string(var_9);
    }
    if let Some(var_10) = &input.steps {
        let mut array_11 = object.key("Steps").start_array();
        for item_12 in var_10 {
            {
                let mut object_13 = array_11.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_config(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.resource_id {
        object.key("ResourceId").string(var_14);
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.cluster_id {
        object.key("ClusterId").string(var_19);
    }
    if let Some(var_20) = &input.step_ids {
        let mut array_21 = object.key("StepIds").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.step_cancellation_option {
        object.key("StepCancellationOption").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.name {
        object.key("Name").string(var_24);
    }
    if let Some(var_25) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_25);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.name {
        object.key("Name").string(var_26);
    }
    if let Some(var_27) = &input.description {
        object.key("Description").string(var_27);
    }
    if let Some(var_28) = &input.auth_mode {
        object.key("AuthMode").string(var_28.as_str());
    }
    if let Some(var_29) = &input.vpc_id {
        object.key("VpcId").string(var_29);
    }
    if let Some(var_30) = &input.subnet_ids {
        let mut array_31 = object.key("SubnetIds").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32);
            }
        }
        array_31.finish();
    }
    if let Some(var_33) = &input.service_role {
        object.key("ServiceRole").string(var_33);
    }
    if let Some(var_34) = &input.user_role {
        object.key("UserRole").string(var_34);
    }
    if let Some(var_35) = &input.workspace_security_group_id {
        object.key("WorkspaceSecurityGroupId").string(var_35);
    }
    if let Some(var_36) = &input.engine_security_group_id {
        object.key("EngineSecurityGroupId").string(var_36);
    }
    if let Some(var_37) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_37);
    }
    if let Some(var_38) = &input.idp_auth_url {
        object.key("IdpAuthUrl").string(var_38);
    }
    if let Some(var_39) = &input.idp_relay_state_parameter_name {
        object.key("IdpRelayStateParameterName").string(var_39);
    }
    if let Some(var_40) = &input.tags {
        let mut array_41 = object.key("Tags").start_array();
        for item_42 in var_40 {
            {
                let mut object_43 = array_41.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_43, item_42)?;
                object_43.finish();
            }
        }
        array_41.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.studio_id {
        object.key("StudioId").string(var_44);
    }
    if let Some(var_45) = &input.identity_id {
        object.key("IdentityId").string(var_45);
    }
    if let Some(var_46) = &input.identity_name {
        object.key("IdentityName").string(var_46);
    }
    if let Some(var_47) = &input.identity_type {
        object.key("IdentityType").string(var_47.as_str());
    }
    if let Some(var_48) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_48);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.name {
        object.key("Name").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.studio_id {
        object.key("StudioId").string(var_50);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.studio_id {
        object.key("StudioId").string(var_51);
    }
    if let Some(var_52) = &input.identity_id {
        object.key("IdentityId").string(var_52);
    }
    if let Some(var_53) = &input.identity_name {
        object.key("IdentityName").string(var_53);
    }
    if let Some(var_54) = &input.identity_type {
        object.key("IdentityType").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.cluster_id {
        object.key("ClusterId").string(var_55);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_flows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobFlowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_56, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_57) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_57, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_58) = &input.job_flow_ids {
        let mut array_59 = object.key("JobFlowIds").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.job_flow_states {
        let mut array_62 = object.key("JobFlowStates").start_array();
        for item_63 in var_61 {
            {
                array_62.value().string(item_63.as_str());
            }
        }
        array_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_64);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_release_label_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReleaseLabelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.release_label {
        object.key("ReleaseLabel").string(var_65);
    }
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66);
    }
    if let Some(var_67) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_security_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSecurityConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.name {
        object.key("Name").string(var_68);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_step_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStepInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.cluster_id {
        object.key("ClusterId").string(var_69);
    }
    if let Some(var_70) = &input.step_id {
        object.key("StepId").string(var_70);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.studio_id {
        object.key("StudioId").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.cluster_id {
        object.key("ClusterId").string(var_72);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.cluster_id {
        object.key("ClusterId").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.studio_id {
        object.key("StudioId").string(var_74);
    }
    if let Some(var_75) = &input.identity_id {
        object.key("IdentityId").string(var_75);
    }
    if let Some(var_76) = &input.identity_name {
        object.key("IdentityName").string(var_76);
    }
    if let Some(var_77) = &input.identity_type {
        object.key("IdentityType").string(var_77.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_bootstrap_actions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListBootstrapActionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.cluster_id {
        object.key("ClusterId").string(var_78);
    }
    if let Some(var_79) = &input.marker {
        object.key("Marker").string(var_79);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_clusters_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListClustersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.created_after {
        object
            .key("CreatedAfter")
            .date_time(var_80, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_81) = &input.created_before {
        object
            .key("CreatedBefore")
            .date_time(var_81, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_82) = &input.cluster_states {
        let mut array_83 = object.key("ClusterStates").start_array();
        for item_84 in var_82 {
            {
                array_83.value().string(item_84.as_str());
            }
        }
        array_83.finish();
    }
    if let Some(var_85) = &input.marker {
        object.key("Marker").string(var_85);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instance_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.cluster_id {
        object.key("ClusterId").string(var_86);
    }
    if let Some(var_87) = &input.marker {
        object.key("Marker").string(var_87);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.cluster_id {
        object.key("ClusterId").string(var_88);
    }
    if let Some(var_89) = &input.marker {
        object.key("Marker").string(var_89);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.cluster_id {
        object.key("ClusterId").string(var_90);
    }
    if let Some(var_91) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_91);
    }
    if let Some(var_92) = &input.instance_group_types {
        let mut array_93 = object.key("InstanceGroupTypes").start_array();
        for item_94 in var_92 {
            {
                array_93.value().string(item_94.as_str());
            }
        }
        array_93.finish();
    }
    if let Some(var_95) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_95);
    }
    if let Some(var_96) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_96.as_str());
    }
    if let Some(var_97) = &input.instance_states {
        let mut array_98 = object.key("InstanceStates").start_array();
        for item_99 in var_97 {
            {
                array_98.value().string(item_99.as_str());
            }
        }
        array_98.finish();
    }
    if let Some(var_100) = &input.marker {
        object.key("Marker").string(var_100);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_notebook_executions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListNotebookExecutionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.editor_id {
        object.key("EditorId").string(var_101);
    }
    if let Some(var_102) = &input.status {
        object.key("Status").string(var_102.as_str());
    }
    if let Some(var_103) = &input.from {
        object
            .key("From")
            .date_time(var_103, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_104) = &input.to {
        object
            .key("To")
            .date_time(var_104, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_105) = &input.marker {
        object.key("Marker").string(var_105);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_release_labels_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReleaseLabelsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.filters {
        let mut object_107 = object.key("Filters").start_object();
        crate::json_ser::serialize_structure_crate_model_release_label_filter(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    if let Some(var_108) = &input.next_token {
        object.key("NextToken").string(var_108);
    }
    if let Some(var_109) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_security_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSecurityConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.marker {
        object.key("Marker").string(var_110);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_steps_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStepsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.cluster_id {
        object.key("ClusterId").string(var_111);
    }
    if let Some(var_112) = &input.step_states {
        let mut array_113 = object.key("StepStates").start_array();
        for item_114 in var_112 {
            {
                array_113.value().string(item_114.as_str());
            }
        }
        array_113.finish();
    }
    if let Some(var_115) = &input.step_ids {
        let mut array_116 = object.key("StepIds").start_array();
        for item_117 in var_115 {
            {
                array_116.value().string(item_117);
            }
        }
        array_116.finish();
    }
    if let Some(var_118) = &input.marker {
        object.key("Marker").string(var_118);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studios_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudiosInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.marker {
        object.key("Marker").string(var_119);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_studio_session_mappings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListStudioSessionMappingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.studio_id {
        object.key("StudioId").string(var_120);
    }
    if let Some(var_121) = &input.identity_type {
        object.key("IdentityType").string(var_121.as_str());
    }
    if let Some(var_122) = &input.marker {
        object.key("Marker").string(var_122);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.cluster_id {
        object.key("ClusterId").string(var_123);
    }
    if let Some(var_124) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_124).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_instance_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.cluster_id {
        object.key("ClusterId").string(var_125);
    }
    if let Some(var_126) = &input.instance_fleet {
        let mut object_127 = object.key("InstanceFleet").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_modify_config(
            &mut object_127,
            var_126,
        )?;
        object_127.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_instance_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyInstanceGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.cluster_id {
        object.key("ClusterId").string(var_128);
    }
    if let Some(var_129) = &input.instance_groups {
        let mut array_130 = object.key("InstanceGroups").start_array();
        for item_131 in var_129 {
            {
                let mut object_132 = array_130.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_modify_config(
                    &mut object_132,
                    item_131,
                )?;
                object_132.finish();
            }
        }
        array_130.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_auto_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.cluster_id {
        object.key("ClusterId").string(var_133);
    }
    if let Some(var_134) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_134);
    }
    if let Some(var_135) = &input.auto_scaling_policy {
        let mut object_136 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_policy(
            &mut object_136,
            var_135,
        )?;
        object_136.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_137) = &input.cluster_id {
        object.key("ClusterId").string(var_137);
    }
    if let Some(var_138) = &input.auto_termination_policy {
        let mut object_139 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_termination_policy(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_block_public_access_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBlockPublicAccessConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.block_public_access_configuration {
        let mut object_141 = object.key("BlockPublicAccessConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_block_public_access_configuration(
            &mut object_141,
            var_140,
        )?;
        object_141.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_142) = &input.cluster_id {
        object.key("ClusterId").string(var_142);
    }
    if let Some(var_143) = &input.managed_scaling_policy {
        let mut object_144 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling_policy(
            &mut object_144,
            var_143,
        )?;
        object_144.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_auto_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.cluster_id {
        object.key("ClusterId").string(var_145);
    }
    if let Some(var_146) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_146);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_auto_termination_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveAutoTerminationPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.cluster_id {
        object.key("ClusterId").string(var_147);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_managed_scaling_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveManagedScalingPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_148) = &input.cluster_id {
        object.key("ClusterId").string(var_148);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_tags_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.resource_id {
        object.key("ResourceId").string(var_149);
    }
    if let Some(var_150) = &input.tag_keys {
        let mut array_151 = object.key("TagKeys").start_array();
        for item_152 in var_150 {
            {
                array_151.value().string(item_152);
            }
        }
        array_151.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_run_job_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RunJobFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.name {
        object.key("Name").string(var_153);
    }
    if let Some(var_154) = &input.log_uri {
        object.key("LogUri").string(var_154);
    }
    if let Some(var_155) = &input.log_encryption_kms_key_id {
        object.key("LogEncryptionKmsKeyId").string(var_155);
    }
    if let Some(var_156) = &input.additional_info {
        object.key("AdditionalInfo").string(var_156);
    }
    if let Some(var_157) = &input.ami_version {
        object.key("AmiVersion").string(var_157);
    }
    if let Some(var_158) = &input.release_label {
        object.key("ReleaseLabel").string(var_158);
    }
    if let Some(var_159) = &input.instances {
        let mut object_160 = object.key("Instances").start_object();
        crate::json_ser::serialize_structure_crate_model_job_flow_instances_config(
            &mut object_160,
            var_159,
        )?;
        object_160.finish();
    }
    if let Some(var_161) = &input.steps {
        let mut array_162 = object.key("Steps").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_step_config(
                    &mut object_164,
                    item_163,
                )?;
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.bootstrap_actions {
        let mut array_166 = object.key("BootstrapActions").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bootstrap_action_config(
                    &mut object_168,
                    item_167,
                )?;
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.supported_products {
        let mut array_170 = object.key("SupportedProducts").start_array();
        for item_171 in var_169 {
            {
                array_170.value().string(item_171);
            }
        }
        array_170.finish();
    }
    if let Some(var_172) = &input.new_supported_products {
        let mut array_173 = object.key("NewSupportedProducts").start_array();
        for item_174 in var_172 {
            {
                let mut object_175 = array_173.value().start_object();
                crate::json_ser::serialize_structure_crate_model_supported_product_config(
                    &mut object_175,
                    item_174,
                )?;
                object_175.finish();
            }
        }
        array_173.finish();
    }
    if let Some(var_176) = &input.applications {
        let mut array_177 = object.key("Applications").start_array();
        for item_178 in var_176 {
            {
                let mut object_179 = array_177.value().start_object();
                crate::json_ser::serialize_structure_crate_model_application(
                    &mut object_179,
                    item_178,
                )?;
                object_179.finish();
            }
        }
        array_177.finish();
    }
    if let Some(var_180) = &input.configurations {
        let mut array_181 = object.key("Configurations").start_array();
        for item_182 in var_180 {
            {
                let mut object_183 = array_181.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_183,
                    item_182,
                )?;
                object_183.finish();
            }
        }
        array_181.finish();
    }
    if input.visible_to_all_users {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    if let Some(var_184) = &input.job_flow_role {
        object.key("JobFlowRole").string(var_184);
    }
    if let Some(var_185) = &input.service_role {
        object.key("ServiceRole").string(var_185);
    }
    if let Some(var_186) = &input.tags {
        let mut array_187 = object.key("Tags").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_189, item_188)?;
                object_189.finish();
            }
        }
        array_187.finish();
    }
    if let Some(var_190) = &input.security_configuration {
        object.key("SecurityConfiguration").string(var_190);
    }
    if let Some(var_191) = &input.auto_scaling_role {
        object.key("AutoScalingRole").string(var_191);
    }
    if let Some(var_192) = &input.scale_down_behavior {
        object.key("ScaleDownBehavior").string(var_192.as_str());
    }
    if let Some(var_193) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_193);
    }
    if let Some(var_194) = &input.ebs_root_volume_size {
        object.key("EbsRootVolumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_194).into()),
        );
    }
    if let Some(var_195) = &input.repo_upgrade_on_boot {
        object.key("RepoUpgradeOnBoot").string(var_195.as_str());
    }
    if let Some(var_196) = &input.kerberos_attributes {
        let mut object_197 = object.key("KerberosAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_kerberos_attributes(
            &mut object_197,
            var_196,
        )?;
        object_197.finish();
    }
    if let Some(var_198) = &input.step_concurrency_level {
        object.key("StepConcurrencyLevel").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    if let Some(var_199) = &input.managed_scaling_policy {
        let mut object_200 = object.key("ManagedScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_managed_scaling_policy(
            &mut object_200,
            var_199,
        )?;
        object_200.finish();
    }
    if let Some(var_201) = &input.placement_group_configs {
        let mut array_202 = object.key("PlacementGroupConfigs").start_array();
        for item_203 in var_201 {
            {
                let mut object_204 = array_202.value().start_object();
                crate::json_ser::serialize_structure_crate_model_placement_group_config(
                    &mut object_204,
                    item_203,
                )?;
                object_204.finish();
            }
        }
        array_202.finish();
    }
    if let Some(var_205) = &input.auto_termination_policy {
        let mut object_206 = object.key("AutoTerminationPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_termination_policy(
            &mut object_206,
            var_205,
        )?;
        object_206.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_termination_protection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTerminationProtectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.job_flow_ids {
        let mut array_208 = object.key("JobFlowIds").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
    {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_visible_to_all_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVisibleToAllUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_210) = &input.job_flow_ids {
        let mut array_211 = object.key("JobFlowIds").start_array();
        for item_212 in var_210 {
            {
                array_211.value().string(item_212);
            }
        }
        array_211.finish();
    }
    {
        object
            .key("VisibleToAllUsers")
            .boolean(input.visible_to_all_users);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.editor_id {
        object.key("EditorId").string(var_213);
    }
    if let Some(var_214) = &input.relative_path {
        object.key("RelativePath").string(var_214);
    }
    if let Some(var_215) = &input.notebook_execution_name {
        object.key("NotebookExecutionName").string(var_215);
    }
    if let Some(var_216) = &input.notebook_params {
        object.key("NotebookParams").string(var_216);
    }
    if let Some(var_217) = &input.execution_engine {
        let mut object_218 = object.key("ExecutionEngine").start_object();
        crate::json_ser::serialize_structure_crate_model_execution_engine_config(
            &mut object_218,
            var_217,
        )?;
        object_218.finish();
    }
    if let Some(var_219) = &input.service_role {
        object.key("ServiceRole").string(var_219);
    }
    if let Some(var_220) = &input.notebook_instance_security_group_id {
        object
            .key("NotebookInstanceSecurityGroupId")
            .string(var_220);
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_notebook_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopNotebookExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.notebook_execution_id {
        object.key("NotebookExecutionId").string(var_225);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_job_flows_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateJobFlowsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.job_flow_ids {
        let mut array_227 = object.key("JobFlowIds").start_array();
        for item_228 in var_226 {
            {
                array_227.value().string(item_228);
            }
        }
        array_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_studio_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.studio_id {
        object.key("StudioId").string(var_229);
    }
    if let Some(var_230) = &input.name {
        object.key("Name").string(var_230);
    }
    if let Some(var_231) = &input.description {
        object.key("Description").string(var_231);
    }
    if let Some(var_232) = &input.subnet_ids {
        let mut array_233 = object.key("SubnetIds").start_array();
        for item_234 in var_232 {
            {
                array_233.value().string(item_234);
            }
        }
        array_233.finish();
    }
    if let Some(var_235) = &input.default_s3_location {
        object.key("DefaultS3Location").string(var_235);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_studio_session_mapping_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStudioSessionMappingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.studio_id {
        object.key("StudioId").string(var_236);
    }
    if let Some(var_237) = &input.identity_id {
        object.key("IdentityId").string(var_237);
    }
    if let Some(var_238) = &input.identity_name {
        object.key("IdentityName").string(var_238);
    }
    if let Some(var_239) = &input.identity_type {
        object.key("IdentityType").string(var_239.as_str());
    }
    if let Some(var_240) = &input.session_policy_arn {
        object.key("SessionPolicyArn").string(var_240);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.name {
        object.key("Name").string(var_241);
    }
    if let Some(var_242) = &input.instance_fleet_type {
        object.key("InstanceFleetType").string(var_242.as_str());
    }
    if let Some(var_243) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    if let Some(var_244) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_244).into()),
        );
    }
    if let Some(var_245) = &input.instance_type_configs {
        let mut array_246 = object.key("InstanceTypeConfigs").start_array();
        for item_247 in var_245 {
            {
                let mut object_248 = array_246.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_type_config(
                    &mut object_248,
                    item_247,
                )?;
                object_248.finish();
            }
        }
        array_246.finish();
    }
    if let Some(var_249) = &input.launch_specifications {
        let mut object_250 = object.key("LaunchSpecifications").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_fleet_provisioning_specifications(&mut object_250, var_249)?;
        object_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251);
    }
    if let Some(var_252) = &input.market {
        object.key("Market").string(var_252.as_str());
    }
    if let Some(var_253) = &input.instance_role {
        object.key("InstanceRole").string(var_253.as_str());
    }
    if let Some(var_254) = &input.bid_price {
        object.key("BidPrice").string(var_254);
    }
    if let Some(var_255) = &input.instance_type {
        object.key("InstanceType").string(var_255);
    }
    if let Some(var_256) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_256).into()),
        );
    }
    if let Some(var_257) = &input.configurations {
        let mut array_258 = object.key("Configurations").start_array();
        for item_259 in var_257 {
            {
                let mut object_260 = array_258.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_260,
                    item_259,
                )?;
                object_260.finish();
            }
        }
        array_258.finish();
    }
    if let Some(var_261) = &input.ebs_configuration {
        let mut object_262 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_configuration(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    if let Some(var_263) = &input.auto_scaling_policy {
        let mut object_264 = object.key("AutoScalingPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_auto_scaling_policy(
            &mut object_264,
            var_263,
        )?;
        object_264.finish();
    }
    if let Some(var_265) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_265);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.name {
        object.key("Name").string(var_266);
    }
    if let Some(var_267) = &input.action_on_failure {
        object.key("ActionOnFailure").string(var_267.as_str());
    }
    if let Some(var_268) = &input.hadoop_jar_step {
        let mut object_269 = object.key("HadoopJarStep").start_object();
        crate::json_ser::serialize_structure_crate_model_hadoop_jar_step_config(
            &mut object_269,
            var_268,
        )?;
        object_269.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.key {
        object.key("Key").string(var_270);
    }
    if let Some(var_271) = &input.value {
        object.key("Value").string(var_271);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_release_label_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReleaseLabelFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_272) = &input.prefix {
        object.key("Prefix").string(var_272);
    }
    if let Some(var_273) = &input.application {
        object.key("Application").string(var_273);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_modify_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetModifyConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.instance_fleet_id {
        object.key("InstanceFleetId").string(var_274);
    }
    if let Some(var_275) = &input.target_on_demand_capacity {
        object.key("TargetOnDemandCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_275).into()),
        );
    }
    if let Some(var_276) = &input.target_spot_capacity {
        object.key("TargetSpotCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_276).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_group_modify_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceGroupModifyConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_277) = &input.instance_group_id {
        object.key("InstanceGroupId").string(var_277);
    }
    if let Some(var_278) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    if let Some(var_279) = &input.ec2_instance_ids_to_terminate {
        let mut array_280 = object.key("EC2InstanceIdsToTerminate").start_array();
        for item_281 in var_279 {
            {
                array_280.value().string(item_281);
            }
        }
        array_280.finish();
    }
    if let Some(var_282) = &input.shrink_policy {
        let mut object_283 = object.key("ShrinkPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_shrink_policy(&mut object_283, var_282)?;
        object_283.finish();
    }
    if let Some(var_284) = &input.configurations {
        let mut array_285 = object.key("Configurations").start_array();
        for item_286 in var_284 {
            {
                let mut object_287 = array_285.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_287,
                    item_286,
                )?;
                object_287.finish();
            }
        }
        array_285.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_scaling_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoScalingPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_288) = &input.constraints {
        let mut object_289 = object.key("Constraints").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_constraints(
            &mut object_289,
            var_288,
        )?;
        object_289.finish();
    }
    if let Some(var_290) = &input.rules {
        let mut array_291 = object.key("Rules").start_array();
        for item_292 in var_290 {
            {
                let mut object_293 = array_291.value().start_object();
                crate::json_ser::serialize_structure_crate_model_scaling_rule(
                    &mut object_293,
                    item_292,
                )?;
                object_293.finish();
            }
        }
        array_291.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auto_termination_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutoTerminationPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.idle_timeout != 0 {
        object.key("IdleTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.idle_timeout).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_block_public_access_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BlockPublicAccessConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("BlockPublicSecurityGroupRules")
            .boolean(input.block_public_security_group_rules);
    }
    if let Some(var_294) = &input.permitted_public_security_group_rule_ranges {
        let mut array_295 = object
            .key("PermittedPublicSecurityGroupRuleRanges")
            .start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_range(
                    &mut object_297,
                    item_296,
                )?;
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.classification {
        object.key("Classification").string(var_298);
    }
    if let Some(var_299) = &input.configurations {
        let mut array_300 = object.key("Configurations").start_array();
        for item_301 in var_299 {
            {
                let mut object_302 = array_300.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_302,
                    item_301,
                )?;
                object_302.finish();
            }
        }
        array_300.finish();
    }
    if let Some(var_303) = &input.properties {
        let mut object_304 = object.key("Properties").start_object();
        for (key_305, value_306) in var_303 {
            {
                object_304.key(key_305).string(value_306);
            }
        }
        object_304.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_managed_scaling_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ManagedScalingPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_307) = &input.compute_limits {
        let mut object_308 = object.key("ComputeLimits").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_limits(&mut object_308, var_307)?;
        object_308.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_flow_instances_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobFlowInstancesConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_309) = &input.master_instance_type {
        object.key("MasterInstanceType").string(var_309);
    }
    if let Some(var_310) = &input.slave_instance_type {
        object.key("SlaveInstanceType").string(var_310);
    }
    if let Some(var_311) = &input.instance_count {
        object.key("InstanceCount").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.instance_groups {
        let mut array_313 = object.key("InstanceGroups").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_group_config(
                    &mut object_315,
                    item_314,
                )?;
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.instance_fleets {
        let mut array_317 = object.key("InstanceFleets").start_array();
        for item_318 in var_316 {
            {
                let mut object_319 = array_317.value().start_object();
                crate::json_ser::serialize_structure_crate_model_instance_fleet_config(
                    &mut object_319,
                    item_318,
                )?;
                object_319.finish();
            }
        }
        array_317.finish();
    }
    if let Some(var_320) = &input.ec2_key_name {
        object.key("Ec2KeyName").string(var_320);
    }
    if let Some(var_321) = &input.placement {
        let mut object_322 = object.key("Placement").start_object();
        crate::json_ser::serialize_structure_crate_model_placement_type(&mut object_322, var_321)?;
        object_322.finish();
    }
    if input.keep_job_flow_alive_when_no_steps {
        object
            .key("KeepJobFlowAliveWhenNoSteps")
            .boolean(input.keep_job_flow_alive_when_no_steps);
    }
    if input.termination_protected {
        object
            .key("TerminationProtected")
            .boolean(input.termination_protected);
    }
    if let Some(var_323) = &input.hadoop_version {
        object.key("HadoopVersion").string(var_323);
    }
    if let Some(var_324) = &input.ec2_subnet_id {
        object.key("Ec2SubnetId").string(var_324);
    }
    if let Some(var_325) = &input.ec2_subnet_ids {
        let mut array_326 = object.key("Ec2SubnetIds").start_array();
        for item_327 in var_325 {
            {
                array_326.value().string(item_327);
            }
        }
        array_326.finish();
    }
    if let Some(var_328) = &input.emr_managed_master_security_group {
        object.key("EmrManagedMasterSecurityGroup").string(var_328);
    }
    if let Some(var_329) = &input.emr_managed_slave_security_group {
        object.key("EmrManagedSlaveSecurityGroup").string(var_329);
    }
    if let Some(var_330) = &input.service_access_security_group {
        object.key("ServiceAccessSecurityGroup").string(var_330);
    }
    if let Some(var_331) = &input.additional_master_security_groups {
        let mut array_332 = object.key("AdditionalMasterSecurityGroups").start_array();
        for item_333 in var_331 {
            {
                array_332.value().string(item_333);
            }
        }
        array_332.finish();
    }
    if let Some(var_334) = &input.additional_slave_security_groups {
        let mut array_335 = object.key("AdditionalSlaveSecurityGroups").start_array();
        for item_336 in var_334 {
            {
                array_335.value().string(item_336);
            }
        }
        array_335.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_bootstrap_action_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BootstrapActionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.name {
        object.key("Name").string(var_337);
    }
    if let Some(var_338) = &input.script_bootstrap_action {
        let mut object_339 = object.key("ScriptBootstrapAction").start_object();
        crate::json_ser::serialize_structure_crate_model_script_bootstrap_action_config(
            &mut object_339,
            var_338,
        )?;
        object_339.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_supported_product_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SupportedProductConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.name {
        object.key("Name").string(var_340);
    }
    if let Some(var_341) = &input.args {
        let mut array_342 = object.key("Args").start_array();
        for item_343 in var_341 {
            {
                array_342.value().string(item_343);
            }
        }
        array_342.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Application,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_344) = &input.name {
        object.key("Name").string(var_344);
    }
    if let Some(var_345) = &input.version {
        object.key("Version").string(var_345);
    }
    if let Some(var_346) = &input.args {
        let mut array_347 = object.key("Args").start_array();
        for item_348 in var_346 {
            {
                array_347.value().string(item_348);
            }
        }
        array_347.finish();
    }
    if let Some(var_349) = &input.additional_info {
        let mut object_350 = object.key("AdditionalInfo").start_object();
        for (key_351, value_352) in var_349 {
            {
                object_350.key(key_351).string(value_352);
            }
        }
        object_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_353) = &input.classification {
        object.key("Classification").string(var_353);
    }
    if let Some(var_354) = &input.configurations {
        let mut array_355 = object.key("Configurations").start_array();
        for item_356 in var_354 {
            {
                let mut object_357 = array_355.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_357,
                    item_356,
                )?;
                object_357.finish();
            }
        }
        array_355.finish();
    }
    if let Some(var_358) = &input.properties {
        let mut object_359 = object.key("Properties").start_object();
        for (key_360, value_361) in var_358 {
            {
                object_359.key(key_360).string(value_361);
            }
        }
        object_359.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kerberos_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KerberosAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.realm {
        object.key("Realm").string(var_362);
    }
    if let Some(var_363) = &input.kdc_admin_password {
        object.key("KdcAdminPassword").string(var_363);
    }
    if let Some(var_364) = &input.cross_realm_trust_principal_password {
        object
            .key("CrossRealmTrustPrincipalPassword")
            .string(var_364);
    }
    if let Some(var_365) = &input.ad_domain_join_user {
        object.key("ADDomainJoinUser").string(var_365);
    }
    if let Some(var_366) = &input.ad_domain_join_password {
        object.key("ADDomainJoinPassword").string(var_366);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_group_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementGroupConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_367) = &input.instance_role {
        object.key("InstanceRole").string(var_367.as_str());
    }
    if let Some(var_368) = &input.placement_strategy {
        object.key("PlacementStrategy").string(var_368.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_execution_engine_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExecutionEngineConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_369) = &input.id {
        object.key("Id").string(var_369);
    }
    if let Some(var_370) = &input.r#type {
        object.key("Type").string(var_370.as_str());
    }
    if let Some(var_371) = &input.master_instance_security_group_id {
        object.key("MasterInstanceSecurityGroupId").string(var_371);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_type_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceTypeConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_372) = &input.instance_type {
        object.key("InstanceType").string(var_372);
    }
    if let Some(var_373) = &input.weighted_capacity {
        object.key("WeightedCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_373).into()),
        );
    }
    if let Some(var_374) = &input.bid_price {
        object.key("BidPrice").string(var_374);
    }
    if let Some(var_375) = &input.bid_price_as_percentage_of_on_demand_price {
        object.key("BidPriceAsPercentageOfOnDemandPrice").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_375).into()),
        );
    }
    if let Some(var_376) = &input.ebs_configuration {
        let mut object_377 = object.key("EbsConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_configuration(
            &mut object_377,
            var_376,
        )?;
        object_377.finish();
    }
    if let Some(var_378) = &input.configurations {
        let mut array_379 = object.key("Configurations").start_array();
        for item_380 in var_378 {
            {
                let mut object_381 = array_379.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_381,
                    item_380,
                )?;
                object_381.finish();
            }
        }
        array_379.finish();
    }
    if let Some(var_382) = &input.custom_ami_id {
        object.key("CustomAmiId").string(var_382);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_fleet_provisioning_specifications(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceFleetProvisioningSpecifications,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.spot_specification {
        let mut object_384 = object.key("SpotSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_spot_provisioning_specification(
            &mut object_384,
            var_383,
        )?;
        object_384.finish();
    }
    if let Some(var_385) = &input.on_demand_specification {
        let mut object_386 = object.key("OnDemandSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_on_demand_provisioning_specification(
            &mut object_386,
            var_385,
        )?;
        object_386.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_387) = &input.ebs_block_device_configs {
        let mut array_388 = object.key("EbsBlockDeviceConfigs").start_array();
        for item_389 in var_387 {
            {
                let mut object_390 = array_388.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ebs_block_device_config(
                    &mut object_390,
                    item_389,
                )?;
                object_390.finish();
            }
        }
        array_388.finish();
    }
    if let Some(var_391) = &input.ebs_optimized {
        object.key("EbsOptimized").boolean(*var_391);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_hadoop_jar_step_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HadoopJarStepConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.properties {
        let mut array_393 = object.key("Properties").start_array();
        for item_394 in var_392 {
            {
                let mut object_395 = array_393.value().start_object();
                crate::json_ser::serialize_structure_crate_model_key_value(
                    &mut object_395,
                    item_394,
                )?;
                object_395.finish();
            }
        }
        array_393.finish();
    }
    if let Some(var_396) = &input.jar {
        object.key("Jar").string(var_396);
    }
    if let Some(var_397) = &input.main_class {
        object.key("MainClass").string(var_397);
    }
    if let Some(var_398) = &input.args {
        let mut array_399 = object.key("Args").start_array();
        for item_400 in var_398 {
            {
                array_399.value().string(item_400);
            }
        }
        array_399.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_shrink_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShrinkPolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_401) = &input.decommission_timeout {
        object.key("DecommissionTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_401).into()),
        );
    }
    if let Some(var_402) = &input.instance_resize_policy {
        let mut object_403 = object.key("InstanceResizePolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_resize_policy(
            &mut object_403,
            var_402,
        )?;
        object_403.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_constraints(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingConstraints,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_404) = &input.min_capacity {
        object.key("MinCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_404).into()),
        );
    }
    if let Some(var_405) = &input.max_capacity {
        object.key("MaxCapacity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_405).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_406) = &input.name {
        object.key("Name").string(var_406);
    }
    if let Some(var_407) = &input.description {
        object.key("Description").string(var_407);
    }
    if let Some(var_408) = &input.action {
        let mut object_409 = object.key("Action").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_action(&mut object_409, var_408)?;
        object_409.finish();
    }
    if let Some(var_410) = &input.trigger {
        let mut object_411 = object.key("Trigger").start_object();
        crate::json_ser::serialize_structure_crate_model_scaling_trigger(&mut object_411, var_410)?;
        object_411.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_port_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_412) = &input.min_range {
        object.key("MinRange").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    if let Some(var_413) = &input.max_range {
        object.key("MaxRange").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_limits(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeLimits,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_414) = &input.unit_type {
        object.key("UnitType").string(var_414.as_str());
    }
    if let Some(var_415) = &input.minimum_capacity_units {
        object.key("MinimumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    if let Some(var_416) = &input.maximum_capacity_units {
        object.key("MaximumCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_416).into()),
        );
    }
    if let Some(var_417) = &input.maximum_on_demand_capacity_units {
        object.key("MaximumOnDemandCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_417).into()),
        );
    }
    if let Some(var_418) = &input.maximum_core_capacity_units {
        object.key("MaximumCoreCapacityUnits").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_placement_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PlacementType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_419) = &input.availability_zone {
        object.key("AvailabilityZone").string(var_419);
    }
    if let Some(var_420) = &input.availability_zones {
        let mut array_421 = object.key("AvailabilityZones").start_array();
        for item_422 in var_420 {
            {
                array_421.value().string(item_422);
            }
        }
        array_421.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_bootstrap_action_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptBootstrapActionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.path {
        object.key("Path").string(var_423);
    }
    if let Some(var_424) = &input.args {
        let mut array_425 = object.key("Args").start_array();
        for item_426 in var_424 {
            {
                array_425.value().string(item_426);
            }
        }
        array_425.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_spot_provisioning_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SpotProvisioningSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_427) = &input.timeout_duration_minutes {
        object.key("TimeoutDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_427).into()),
        );
    }
    if let Some(var_428) = &input.timeout_action {
        object.key("TimeoutAction").string(var_428.as_str());
    }
    if let Some(var_429) = &input.block_duration_minutes {
        object.key("BlockDurationMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_429).into()),
        );
    }
    if let Some(var_430) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_430.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_demand_provisioning_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandProvisioningSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_431) = &input.allocation_strategy {
        object.key("AllocationStrategy").string(var_431.as_str());
    }
    if let Some(var_432) = &input.capacity_reservation_options {
        let mut object_433 = object.key("CapacityReservationOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_on_demand_capacity_reservation_options(
            &mut object_433,
            var_432,
        )?;
        object_433.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_block_device_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsBlockDeviceConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_434) = &input.volume_specification {
        let mut object_435 = object.key("VolumeSpecification").start_object();
        crate::json_ser::serialize_structure_crate_model_volume_specification(
            &mut object_435,
            var_434,
        )?;
        object_435.finish();
    }
    if let Some(var_436) = &input.volumes_per_instance {
        object.key("VolumesPerInstance").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_436).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_key_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_437) = &input.key {
        object.key("Key").string(var_437);
    }
    if let Some(var_438) = &input.value {
        object.key("Value").string(var_438);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_resize_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceResizePolicy,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_439) = &input.instances_to_terminate {
        let mut array_440 = object.key("InstancesToTerminate").start_array();
        for item_441 in var_439 {
            {
                array_440.value().string(item_441);
            }
        }
        array_440.finish();
    }
    if let Some(var_442) = &input.instances_to_protect {
        let mut array_443 = object.key("InstancesToProtect").start_array();
        for item_444 in var_442 {
            {
                array_443.value().string(item_444);
            }
        }
        array_443.finish();
    }
    if let Some(var_445) = &input.instance_termination_timeout {
        object.key("InstanceTerminationTimeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_445).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_446) = &input.market {
        object.key("Market").string(var_446.as_str());
    }
    if let Some(var_447) = &input.simple_scaling_policy_configuration {
        let mut object_448 = object
            .key("SimpleScalingPolicyConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_simple_scaling_policy_configuration(
            &mut object_448,
            var_447,
        )?;
        object_448.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scaling_trigger(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScalingTrigger,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_449) = &input.cloud_watch_alarm_definition {
        let mut object_450 = object.key("CloudWatchAlarmDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_alarm_definition(
            &mut object_450,
            var_449,
        )?;
        object_450.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_on_demand_capacity_reservation_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OnDemandCapacityReservationOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_451) = &input.usage_strategy {
        object.key("UsageStrategy").string(var_451.as_str());
    }
    if let Some(var_452) = &input.capacity_reservation_preference {
        object
            .key("CapacityReservationPreference")
            .string(var_452.as_str());
    }
    if let Some(var_453) = &input.capacity_reservation_resource_group_arn {
        object
            .key("CapacityReservationResourceGroupArn")
            .string(var_453);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_volume_specification(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VolumeSpecification,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_454) = &input.volume_type {
        object.key("VolumeType").string(var_454);
    }
    if let Some(var_455) = &input.iops {
        object.key("Iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_455).into()),
        );
    }
    if let Some(var_456) = &input.size_in_gb {
        object.key("SizeInGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_456).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_simple_scaling_policy_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimpleScalingPolicyConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.adjustment_type {
        object.key("AdjustmentType").string(var_457.as_str());
    }
    if let Some(var_458) = &input.scaling_adjustment {
        object.key("ScalingAdjustment").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_458).into()),
        );
    }
    if let Some(var_459) = &input.cool_down {
        object.key("CoolDown").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_459).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_alarm_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchAlarmDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_460) = &input.comparison_operator {
        object.key("ComparisonOperator").string(var_460.as_str());
    }
    if let Some(var_461) = &input.evaluation_periods {
        object.key("EvaluationPeriods").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_461).into()),
        );
    }
    if let Some(var_462) = &input.metric_name {
        object.key("MetricName").string(var_462);
    }
    if let Some(var_463) = &input.namespace {
        object.key("Namespace").string(var_463);
    }
    if let Some(var_464) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_464).into()),
        );
    }
    if let Some(var_465) = &input.statistic {
        object.key("Statistic").string(var_465.as_str());
    }
    if let Some(var_466) = &input.threshold {
        object.key("Threshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_466).into()),
        );
    }
    if let Some(var_467) = &input.unit {
        object.key("Unit").string(var_467.as_str());
    }
    if let Some(var_468) = &input.dimensions {
        let mut array_469 = object.key("Dimensions").start_array();
        for item_470 in var_468 {
            {
                let mut object_471 = array_469.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_dimension(
                    &mut object_471,
                    item_470,
                )?;
                object_471.finish();
            }
        }
        array_469.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_472) = &input.key {
        object.key("Key").string(var_472);
    }
    if let Some(var_473) = &input.value {
        object.key("Value").string(var_473);
    }
    Ok(())
}
