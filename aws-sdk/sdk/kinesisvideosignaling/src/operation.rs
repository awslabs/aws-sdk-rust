// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `GetIceServerConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_ice_server_config`](crate::client::Client::get_ice_server_config).
///
/// See [`crate::client::fluent_builders::GetIceServerConfig`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetIceServerConfig {
    _private: (),
}
impl GetIceServerConfig {
    /// Creates a new builder-style object to manufacture [`GetIceServerConfigInput`](crate::input::GetIceServerConfigInput)
    pub fn builder() -> crate::input::get_ice_server_config_input::Builder {
        crate::input::get_ice_server_config_input::Builder::default()
    }
    /// Creates a new `GetIceServerConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetIceServerConfig {
    type Output = std::result::Result<
        crate::output::GetIceServerConfigOutput,
        crate::error::GetIceServerConfigError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_ice_server_config_error(response)
        } else {
            crate::operation_deser::parse_get_ice_server_config_response(response)
        }
    }
}

/// Operation shape for `SendAlexaOfferToMaster`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`send_alexa_offer_to_master`](crate::client::Client::send_alexa_offer_to_master).
///
/// See [`crate::client::fluent_builders::SendAlexaOfferToMaster`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendAlexaOfferToMaster {
    _private: (),
}
impl SendAlexaOfferToMaster {
    /// Creates a new builder-style object to manufacture [`SendAlexaOfferToMasterInput`](crate::input::SendAlexaOfferToMasterInput)
    pub fn builder() -> crate::input::send_alexa_offer_to_master_input::Builder {
        crate::input::send_alexa_offer_to_master_input::Builder::default()
    }
    /// Creates a new `SendAlexaOfferToMaster` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SendAlexaOfferToMaster {
    type Output = std::result::Result<
        crate::output::SendAlexaOfferToMasterOutput,
        crate::error::SendAlexaOfferToMasterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_send_alexa_offer_to_master_error(response)
        } else {
            crate::operation_deser::parse_send_alexa_offer_to_master_response(response)
        }
    }
}
