// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_delegate_to_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDelegateToResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.organization_id {
        object.key("OrganizationId").string(var_1);
    }
    if let Some(var_2) = &input.resource_id {
        object.key("ResourceId").string(var_2);
    }
    if let Some(var_3) = &input.entity_id {
        object.key("EntityId").string(var_3);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_member_to_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateMemberToGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.organization_id {
        object.key("OrganizationId").string(var_4);
    }
    if let Some(var_5) = &input.group_id {
        object.key("GroupId").string(var_5);
    }
    if let Some(var_6) = &input.member_id {
        object.key("MemberId").string(var_6);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.client_token {
        object.key("ClientToken").string(var_7);
    }
    if let Some(var_8) = &input.job_id {
        object.key("JobId").string(var_8);
    }
    if let Some(var_9) = &input.organization_id {
        object.key("OrganizationId").string(var_9);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_10) = &input.organization_id {
        object.key("OrganizationId").string(var_10);
    }
    if let Some(var_11) = &input.entity_id {
        object.key("EntityId").string(var_11);
    }
    if let Some(var_12) = &input.alias {
        object.key("Alias").string(var_12);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.organization_id {
        object.key("OrganizationId").string(var_13);
    }
    if let Some(var_14) = &input.name {
        object.key("Name").string(var_14);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_15) = &input.organization_id {
        object.key("OrganizationId").string(var_15);
    }
    if let Some(var_16) = &input.client_token {
        object.key("ClientToken").string(var_16);
    }
    if let Some(var_17) = &input.name {
        object.key("Name").string(var_17);
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18);
    }
    if let Some(var_19) = &input.effect {
        object.key("Effect").string(var_19.as_str());
    }
    if let Some(var_20) = &input.device_types {
        let mut array_21 = object.key("DeviceTypes").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22);
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.not_device_types {
        let mut array_24 = object.key("NotDeviceTypes").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25);
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.device_models {
        let mut array_27 = object.key("DeviceModels").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.not_device_models {
        let mut array_30 = object.key("NotDeviceModels").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31);
            }
        }
        array_30.finish();
    }
    if let Some(var_32) = &input.device_operating_systems {
        let mut array_33 = object.key("DeviceOperatingSystems").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34);
            }
        }
        array_33.finish();
    }
    if let Some(var_35) = &input.not_device_operating_systems {
        let mut array_36 = object.key("NotDeviceOperatingSystems").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37);
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.device_user_agents {
        let mut array_39 = object.key("DeviceUserAgents").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40);
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.not_device_user_agents {
        let mut array_42 = object.key("NotDeviceUserAgents").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43);
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.directory_id {
        object.key("DirectoryId").string(var_44);
    }
    if let Some(var_45) = &input.alias {
        object.key("Alias").string(var_45);
    }
    if let Some(var_46) = &input.client_token {
        object.key("ClientToken").string(var_46);
    }
    if let Some(var_47) = &input.domains {
        let mut array_48 = object.key("Domains").start_array();
        for item_49 in var_47 {
            {
                let mut object_50 = array_48.value().start_object();
                crate::json_ser::serialize_structure_crate_model_domain(&mut object_50, item_49)?;
                object_50.finish();
            }
        }
        array_48.finish();
    }
    if let Some(var_51) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_51);
    }
    if input.enable_interoperability {
        object
            .key("EnableInteroperability")
            .boolean(input.enable_interoperability);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.organization_id {
        object.key("OrganizationId").string(var_52);
    }
    if let Some(var_53) = &input.name {
        object.key("Name").string(var_53);
    }
    if let Some(var_54) = &input.r#type {
        object.key("Type").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.organization_id {
        object.key("OrganizationId").string(var_55);
    }
    if let Some(var_56) = &input.name {
        object.key("Name").string(var_56);
    }
    if let Some(var_57) = &input.display_name {
        object.key("DisplayName").string(var_57);
    }
    if let Some(var_58) = &input.password {
        object.key("Password").string(var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_access_control_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAccessControlRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.organization_id {
        object.key("OrganizationId").string(var_59);
    }
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.organization_id {
        object.key("OrganizationId").string(var_61);
    }
    if let Some(var_62) = &input.entity_id {
        object.key("EntityId").string(var_62);
    }
    if let Some(var_63) = &input.alias {
        object.key("Alias").string(var_63);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_64) = &input.organization_id {
        object.key("OrganizationId").string(var_64);
    }
    if let Some(var_65) = &input.group_id {
        object.key("GroupId").string(var_65);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.organization_id {
        object.key("OrganizationId").string(var_66);
    }
    if let Some(var_67) = &input.entity_id {
        object.key("EntityId").string(var_67);
    }
    if let Some(var_68) = &input.grantee_id {
        object.key("GranteeId").string(var_68);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.organization_id {
        object.key("OrganizationId").string(var_69);
    }
    if let Some(var_70) = &input.user_id {
        object.key("UserId").string(var_70);
    }
    if let Some(var_71) = &input.device_id {
        object.key("DeviceId").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.organization_id {
        object.key("OrganizationId").string(var_72);
    }
    if let Some(var_73) = &input.mobile_device_access_rule_id {
        object.key("MobileDeviceAccessRuleId").string(var_73);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.client_token {
        object.key("ClientToken").string(var_74);
    }
    if let Some(var_75) = &input.organization_id {
        object.key("OrganizationId").string(var_75);
    }
    {
        object
            .key("DeleteDirectory")
            .boolean(input.delete_directory);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.organization_id {
        object.key("OrganizationId").string(var_76);
    }
    if let Some(var_77) = &input.resource_id {
        object.key("ResourceId").string(var_77);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.organization_id {
        object.key("OrganizationId").string(var_78);
    }
    if let Some(var_79) = &input.id {
        object.key("Id").string(var_79);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_80) = &input.organization_id {
        object.key("OrganizationId").string(var_80);
    }
    if let Some(var_81) = &input.user_id {
        object.key("UserId").string(var_81);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_from_work_mail_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterFromWorkMailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.organization_id {
        object.key("OrganizationId").string(var_82);
    }
    if let Some(var_83) = &input.entity_id {
        object.key("EntityId").string(var_83);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deregister_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.organization_id {
        object.key("OrganizationId").string(var_84);
    }
    if let Some(var_85) = &input.domain_name {
        object.key("DomainName").string(var_85);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_86) = &input.organization_id {
        object.key("OrganizationId").string(var_86);
    }
    if let Some(var_87) = &input.group_id {
        object.key("GroupId").string(var_87);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_inbound_dmarc_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeInboundDmarcSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.organization_id {
        object.key("OrganizationId").string(var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.job_id {
        object.key("JobId").string(var_89);
    }
    if let Some(var_90) = &input.organization_id {
        object.key("OrganizationId").string(var_90);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_organization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOrganizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.organization_id {
        object.key("OrganizationId").string(var_91);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_92) = &input.organization_id {
        object.key("OrganizationId").string(var_92);
    }
    if let Some(var_93) = &input.resource_id {
        object.key("ResourceId").string(var_93);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.organization_id {
        object.key("OrganizationId").string(var_94);
    }
    if let Some(var_95) = &input.user_id {
        object.key("UserId").string(var_95);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_delegate_from_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateDelegateFromResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.organization_id {
        object.key("OrganizationId").string(var_96);
    }
    if let Some(var_97) = &input.resource_id {
        object.key("ResourceId").string(var_97);
    }
    if let Some(var_98) = &input.entity_id {
        object.key("EntityId").string(var_98);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_member_from_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateMemberFromGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_99) = &input.organization_id {
        object.key("OrganizationId").string(var_99);
    }
    if let Some(var_100) = &input.group_id {
        object.key("GroupId").string(var_100);
    }
    if let Some(var_101) = &input.member_id {
        object.key("MemberId").string(var_101);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_access_control_effect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAccessControlEffectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.organization_id {
        object.key("OrganizationId").string(var_102);
    }
    if let Some(var_103) = &input.ip_address {
        object.key("IpAddress").string(var_103);
    }
    if let Some(var_104) = &input.action {
        object.key("Action").string(var_104);
    }
    if let Some(var_105) = &input.user_id {
        object.key("UserId").string(var_105);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_default_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetDefaultRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.organization_id {
        object.key("OrganizationId").string(var_106);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mailbox_details_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMailboxDetailsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_107) = &input.organization_id {
        object.key("OrganizationId").string(var_107);
    }
    if let Some(var_108) = &input.user_id {
        object.key("UserId").string(var_108);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.organization_id {
        object.key("OrganizationId").string(var_109);
    }
    if let Some(var_110) = &input.domain_name {
        object.key("DomainName").string(var_110);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mobile_device_access_effect_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMobileDeviceAccessEffectInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.organization_id {
        object.key("OrganizationId").string(var_111);
    }
    if let Some(var_112) = &input.device_type {
        object.key("DeviceType").string(var_112);
    }
    if let Some(var_113) = &input.device_model {
        object.key("DeviceModel").string(var_113);
    }
    if let Some(var_114) = &input.device_operating_system {
        object.key("DeviceOperatingSystem").string(var_114);
    }
    if let Some(var_115) = &input.device_user_agent {
        object.key("DeviceUserAgent").string(var_115);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.organization_id {
        object.key("OrganizationId").string(var_116);
    }
    if let Some(var_117) = &input.user_id {
        object.key("UserId").string(var_117);
    }
    if let Some(var_118) = &input.device_id {
        object.key("DeviceId").string(var_118);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_access_control_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAccessControlRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.organization_id {
        object.key("OrganizationId").string(var_119);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_aliases_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAliasesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_120) = &input.organization_id {
        object.key("OrganizationId").string(var_120);
    }
    if let Some(var_121) = &input.entity_id {
        object.key("EntityId").string(var_121);
    }
    if let Some(var_122) = &input.next_token {
        object.key("NextToken").string(var_122);
    }
    if let Some(var_123) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_123).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_group_members_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupMembersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.organization_id {
        object.key("OrganizationId").string(var_124);
    }
    if let Some(var_125) = &input.group_id {
        object.key("GroupId").string(var_125);
    }
    if let Some(var_126) = &input.next_token {
        object.key("NextToken").string(var_126);
    }
    if let Some(var_127) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_groups_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGroupsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.organization_id {
        object.key("OrganizationId").string(var_128);
    }
    if let Some(var_129) = &input.next_token {
        object.key("NextToken").string(var_129);
    }
    if let Some(var_130) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_130).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mailbox_export_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailboxExportJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_131) = &input.organization_id {
        object.key("OrganizationId").string(var_131);
    }
    if let Some(var_132) = &input.next_token {
        object.key("NextToken").string(var_132);
    }
    if let Some(var_133) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_133).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_134) = &input.organization_id {
        object.key("OrganizationId").string(var_134);
    }
    if let Some(var_135) = &input.entity_id {
        object.key("EntityId").string(var_135);
    }
    if let Some(var_136) = &input.next_token {
        object.key("NextToken").string(var_136);
    }
    if let Some(var_137) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_137).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mail_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMailDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.organization_id {
        object.key("OrganizationId").string(var_138);
    }
    if let Some(var_139) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_139).into()),
        );
    }
    if let Some(var_140) = &input.next_token {
        object.key("NextToken").string(var_140);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mobile_device_access_overrides_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMobileDeviceAccessOverridesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_141) = &input.organization_id {
        object.key("OrganizationId").string(var_141);
    }
    if let Some(var_142) = &input.user_id {
        object.key("UserId").string(var_142);
    }
    if let Some(var_143) = &input.device_id {
        object.key("DeviceId").string(var_143);
    }
    if let Some(var_144) = &input.next_token {
        object.key("NextToken").string(var_144);
    }
    if let Some(var_145) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_145).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_mobile_device_access_rules_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListMobileDeviceAccessRulesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_146) = &input.organization_id {
        object.key("OrganizationId").string(var_146);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_organizations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOrganizationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_147) = &input.next_token {
        object.key("NextToken").string(var_147);
    }
    if let Some(var_148) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resource_delegates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceDelegatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.organization_id {
        object.key("OrganizationId").string(var_149);
    }
    if let Some(var_150) = &input.resource_id {
        object.key("ResourceId").string(var_150);
    }
    if let Some(var_151) = &input.next_token {
        object.key("NextToken").string(var_151);
    }
    if let Some(var_152) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_152).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_resources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourcesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.organization_id {
        object.key("OrganizationId").string(var_153);
    }
    if let Some(var_154) = &input.next_token {
        object.key("NextToken").string(var_154);
    }
    if let Some(var_155) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.resource_arn {
        object.key("ResourceARN").string(var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.organization_id {
        object.key("OrganizationId").string(var_157);
    }
    if let Some(var_158) = &input.next_token {
        object.key("NextToken").string(var_158);
    }
    if let Some(var_159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_control_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutAccessControlRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.name {
        object.key("Name").string(var_160);
    }
    if let Some(var_161) = &input.effect {
        object.key("Effect").string(var_161.as_str());
    }
    if let Some(var_162) = &input.description {
        object.key("Description").string(var_162);
    }
    if let Some(var_163) = &input.ip_ranges {
        let mut array_164 = object.key("IpRanges").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165);
            }
        }
        array_164.finish();
    }
    if let Some(var_166) = &input.not_ip_ranges {
        let mut array_167 = object.key("NotIpRanges").start_array();
        for item_168 in var_166 {
            {
                array_167.value().string(item_168);
            }
        }
        array_167.finish();
    }
    if let Some(var_169) = &input.actions {
        let mut array_170 = object.key("Actions").start_array();
        for item_171 in var_169 {
            {
                array_170.value().string(item_171);
            }
        }
        array_170.finish();
    }
    if let Some(var_172) = &input.not_actions {
        let mut array_173 = object.key("NotActions").start_array();
        for item_174 in var_172 {
            {
                array_173.value().string(item_174);
            }
        }
        array_173.finish();
    }
    if let Some(var_175) = &input.user_ids {
        let mut array_176 = object.key("UserIds").start_array();
        for item_177 in var_175 {
            {
                array_176.value().string(item_177);
            }
        }
        array_176.finish();
    }
    if let Some(var_178) = &input.not_user_ids {
        let mut array_179 = object.key("NotUserIds").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
    if let Some(var_181) = &input.organization_id {
        object.key("OrganizationId").string(var_181);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_inbound_dmarc_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutInboundDmarcSettingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_182) = &input.organization_id {
        object.key("OrganizationId").string(var_182);
    }
    if let Some(var_183) = &input.enforced {
        object.key("Enforced").boolean(*var_183);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_mailbox_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutMailboxPermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.organization_id {
        object.key("OrganizationId").string(var_184);
    }
    if let Some(var_185) = &input.entity_id {
        object.key("EntityId").string(var_185);
    }
    if let Some(var_186) = &input.grantee_id {
        object.key("GranteeId").string(var_186);
    }
    if let Some(var_187) = &input.permission_values {
        let mut array_188 = object.key("PermissionValues").start_array();
        for item_189 in var_187 {
            {
                array_188.value().string(item_189.as_str());
            }
        }
        array_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_mobile_device_access_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutMobileDeviceAccessOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.organization_id {
        object.key("OrganizationId").string(var_190);
    }
    if let Some(var_191) = &input.user_id {
        object.key("UserId").string(var_191);
    }
    if let Some(var_192) = &input.device_id {
        object.key("DeviceId").string(var_192);
    }
    if let Some(var_193) = &input.effect {
        object.key("Effect").string(var_193.as_str());
    }
    if let Some(var_194) = &input.description {
        object.key("Description").string(var_194);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_retention_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutRetentionPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_195) = &input.organization_id {
        object.key("OrganizationId").string(var_195);
    }
    if let Some(var_196) = &input.id {
        object.key("Id").string(var_196);
    }
    if let Some(var_197) = &input.name {
        object.key("Name").string(var_197);
    }
    if let Some(var_198) = &input.description {
        object.key("Description").string(var_198);
    }
    if let Some(var_199) = &input.folder_configurations {
        let mut array_200 = object.key("FolderConfigurations").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_folder_configuration(
                    &mut object_202,
                    item_201,
                )?;
                object_202.finish();
            }
        }
        array_200.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.client_token {
        object.key("ClientToken").string(var_203);
    }
    if let Some(var_204) = &input.organization_id {
        object.key("OrganizationId").string(var_204);
    }
    if let Some(var_205) = &input.domain_name {
        object.key("DomainName").string(var_205);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_to_work_mail_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterToWorkMailInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.organization_id {
        object.key("OrganizationId").string(var_206);
    }
    if let Some(var_207) = &input.entity_id {
        object.key("EntityId").string(var_207);
    }
    if let Some(var_208) = &input.email {
        object.key("Email").string(var_208);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reset_password_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetPasswordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.organization_id {
        object.key("OrganizationId").string(var_209);
    }
    if let Some(var_210) = &input.user_id {
        object.key("UserId").string(var_210);
    }
    if let Some(var_211) = &input.password {
        object.key("Password").string(var_211);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_mailbox_export_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartMailboxExportJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.client_token {
        object.key("ClientToken").string(var_212);
    }
    if let Some(var_213) = &input.organization_id {
        object.key("OrganizationId").string(var_213);
    }
    if let Some(var_214) = &input.entity_id {
        object.key("EntityId").string(var_214);
    }
    if let Some(var_215) = &input.description {
        object.key("Description").string(var_215);
    }
    if let Some(var_216) = &input.role_arn {
        object.key("RoleArn").string(var_216);
    }
    if let Some(var_217) = &input.kms_key_arn {
        object.key("KmsKeyArn").string(var_217);
    }
    if let Some(var_218) = &input.s3_bucket_name {
        object.key("S3BucketName").string(var_218);
    }
    if let Some(var_219) = &input.s3_prefix {
        object.key("S3Prefix").string(var_219);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_220) = &input.resource_arn {
        object.key("ResourceARN").string(var_220);
    }
    if let Some(var_221) = &input.tags {
        let mut array_222 = object.key("Tags").start_array();
        for item_223 in var_221 {
            {
                let mut object_224 = array_222.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_224, item_223)?;
                object_224.finish();
            }
        }
        array_222.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.resource_arn {
        object.key("ResourceARN").string(var_225);
    }
    if let Some(var_226) = &input.tag_keys {
        let mut array_227 = object.key("TagKeys").start_array();
        for item_228 in var_226 {
            {
                array_227.value().string(item_228);
            }
        }
        array_227.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_default_mail_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDefaultMailDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.organization_id {
        object.key("OrganizationId").string(var_229);
    }
    if let Some(var_230) = &input.domain_name {
        object.key("DomainName").string(var_230);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mailbox_quota_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMailboxQuotaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.organization_id {
        object.key("OrganizationId").string(var_231);
    }
    if let Some(var_232) = &input.user_id {
        object.key("UserId").string(var_232);
    }
    if let Some(var_233) = &input.mailbox_quota {
        object.key("MailboxQuota").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_233).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mobile_device_access_rule_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMobileDeviceAccessRuleInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.organization_id {
        object.key("OrganizationId").string(var_234);
    }
    if let Some(var_235) = &input.mobile_device_access_rule_id {
        object.key("MobileDeviceAccessRuleId").string(var_235);
    }
    if let Some(var_236) = &input.name {
        object.key("Name").string(var_236);
    }
    if let Some(var_237) = &input.description {
        object.key("Description").string(var_237);
    }
    if let Some(var_238) = &input.effect {
        object.key("Effect").string(var_238.as_str());
    }
    if let Some(var_239) = &input.device_types {
        let mut array_240 = object.key("DeviceTypes").start_array();
        for item_241 in var_239 {
            {
                array_240.value().string(item_241);
            }
        }
        array_240.finish();
    }
    if let Some(var_242) = &input.not_device_types {
        let mut array_243 = object.key("NotDeviceTypes").start_array();
        for item_244 in var_242 {
            {
                array_243.value().string(item_244);
            }
        }
        array_243.finish();
    }
    if let Some(var_245) = &input.device_models {
        let mut array_246 = object.key("DeviceModels").start_array();
        for item_247 in var_245 {
            {
                array_246.value().string(item_247);
            }
        }
        array_246.finish();
    }
    if let Some(var_248) = &input.not_device_models {
        let mut array_249 = object.key("NotDeviceModels").start_array();
        for item_250 in var_248 {
            {
                array_249.value().string(item_250);
            }
        }
        array_249.finish();
    }
    if let Some(var_251) = &input.device_operating_systems {
        let mut array_252 = object.key("DeviceOperatingSystems").start_array();
        for item_253 in var_251 {
            {
                array_252.value().string(item_253);
            }
        }
        array_252.finish();
    }
    if let Some(var_254) = &input.not_device_operating_systems {
        let mut array_255 = object.key("NotDeviceOperatingSystems").start_array();
        for item_256 in var_254 {
            {
                array_255.value().string(item_256);
            }
        }
        array_255.finish();
    }
    if let Some(var_257) = &input.device_user_agents {
        let mut array_258 = object.key("DeviceUserAgents").start_array();
        for item_259 in var_257 {
            {
                array_258.value().string(item_259);
            }
        }
        array_258.finish();
    }
    if let Some(var_260) = &input.not_device_user_agents {
        let mut array_261 = object.key("NotDeviceUserAgents").start_array();
        for item_262 in var_260 {
            {
                array_261.value().string(item_262);
            }
        }
        array_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_primary_email_address_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePrimaryEmailAddressInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.organization_id {
        object.key("OrganizationId").string(var_263);
    }
    if let Some(var_264) = &input.entity_id {
        object.key("EntityId").string(var_264);
    }
    if let Some(var_265) = &input.email {
        object.key("Email").string(var_265);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_266) = &input.organization_id {
        object.key("OrganizationId").string(var_266);
    }
    if let Some(var_267) = &input.resource_id {
        object.key("ResourceId").string(var_267);
    }
    if let Some(var_268) = &input.name {
        object.key("Name").string(var_268);
    }
    if let Some(var_269) = &input.booking_options {
        let mut object_270 = object.key("BookingOptions").start_object();
        crate::json_ser::serialize_structure_crate_model_booking_options(&mut object_270, var_269)?;
        object_270.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Domain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_271) = &input.domain_name {
        object.key("DomainName").string(var_271);
    }
    if let Some(var_272) = &input.hosted_zone_id {
        object.key("HostedZoneId").string(var_272);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_folder_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FolderConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_273) = &input.name {
        object.key("Name").string(var_273.as_str());
    }
    if let Some(var_274) = &input.action {
        object.key("Action").string(var_274.as_str());
    }
    if let Some(var_275) = &input.period {
        object.key("Period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_275).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.key {
        object.key("Key").string(var_276);
    }
    if let Some(var_277) = &input.value {
        object.key("Value").string(var_277);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_booking_options(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BookingOptions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.auto_accept_requests {
        object
            .key("AutoAcceptRequests")
            .boolean(input.auto_accept_requests);
    }
    if input.auto_decline_recurring_requests {
        object
            .key("AutoDeclineRecurringRequests")
            .boolean(input.auto_decline_recurring_requests);
    }
    if input.auto_decline_conflicting_requests {
        object
            .key("AutoDeclineConflictingRequests")
            .boolean(input.auto_decline_conflicting_requests);
    }
    Ok(())
}
