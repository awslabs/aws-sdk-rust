// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    client: aws_smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// Client for Amazon Glacier
///
/// Client for invoking operations on Amazon Glacier. Each operation on Amazon Glacier is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_glacier::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_glacier::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_glacier::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client<
    C = aws_smithy_client::erase::DynConnector,
    M = crate::middleware::DefaultMiddleware,
    R = aws_smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl<C, M, R> From<aws_smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: aws_smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    /// Creates a client with the given service configuration.
    pub fn with_config(client: aws_smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: aws_smithy_client::bounds::SmithyConnector,
    M: aws_smithy_client::bounds::SmithyMiddleware<C>,
    R: aws_smithy_client::retry::NewRequestPolicy,
{
    /// Constructs a fluent builder for the `AbortMultipartUpload` operation.
    ///
    /// See [`AbortMultipartUpload`](crate::client::fluent_builders::AbortMultipartUpload) for more information about the
    /// operation and its arguments.
    pub fn abort_multipart_upload(&self) -> fluent_builders::AbortMultipartUpload<C, M, R> {
        fluent_builders::AbortMultipartUpload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AbortVaultLock` operation.
    ///
    /// See [`AbortVaultLock`](crate::client::fluent_builders::AbortVaultLock) for more information about the
    /// operation and its arguments.
    pub fn abort_vault_lock(&self) -> fluent_builders::AbortVaultLock<C, M, R> {
        fluent_builders::AbortVaultLock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `AddTagsToVault` operation.
    ///
    /// See [`AddTagsToVault`](crate::client::fluent_builders::AddTagsToVault) for more information about the
    /// operation and its arguments.
    pub fn add_tags_to_vault(&self) -> fluent_builders::AddTagsToVault<C, M, R> {
        fluent_builders::AddTagsToVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CompleteMultipartUpload` operation.
    ///
    /// See [`CompleteMultipartUpload`](crate::client::fluent_builders::CompleteMultipartUpload) for more information about the
    /// operation and its arguments.
    pub fn complete_multipart_upload(&self) -> fluent_builders::CompleteMultipartUpload<C, M, R> {
        fluent_builders::CompleteMultipartUpload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CompleteVaultLock` operation.
    ///
    /// See [`CompleteVaultLock`](crate::client::fluent_builders::CompleteVaultLock) for more information about the
    /// operation and its arguments.
    pub fn complete_vault_lock(&self) -> fluent_builders::CompleteVaultLock<C, M, R> {
        fluent_builders::CompleteVaultLock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `CreateVault` operation.
    ///
    /// See [`CreateVault`](crate::client::fluent_builders::CreateVault) for more information about the
    /// operation and its arguments.
    pub fn create_vault(&self) -> fluent_builders::CreateVault<C, M, R> {
        fluent_builders::CreateVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteArchive` operation.
    ///
    /// See [`DeleteArchive`](crate::client::fluent_builders::DeleteArchive) for more information about the
    /// operation and its arguments.
    pub fn delete_archive(&self) -> fluent_builders::DeleteArchive<C, M, R> {
        fluent_builders::DeleteArchive::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteVault` operation.
    ///
    /// See [`DeleteVault`](crate::client::fluent_builders::DeleteVault) for more information about the
    /// operation and its arguments.
    pub fn delete_vault(&self) -> fluent_builders::DeleteVault<C, M, R> {
        fluent_builders::DeleteVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteVaultAccessPolicy` operation.
    ///
    /// See [`DeleteVaultAccessPolicy`](crate::client::fluent_builders::DeleteVaultAccessPolicy) for more information about the
    /// operation and its arguments.
    pub fn delete_vault_access_policy(&self) -> fluent_builders::DeleteVaultAccessPolicy<C, M, R> {
        fluent_builders::DeleteVaultAccessPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DeleteVaultNotifications` operation.
    ///
    /// See [`DeleteVaultNotifications`](crate::client::fluent_builders::DeleteVaultNotifications) for more information about the
    /// operation and its arguments.
    pub fn delete_vault_notifications(&self) -> fluent_builders::DeleteVaultNotifications<C, M, R> {
        fluent_builders::DeleteVaultNotifications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeJob` operation.
    ///
    /// See [`DescribeJob`](crate::client::fluent_builders::DescribeJob) for more information about the
    /// operation and its arguments.
    pub fn describe_job(&self) -> fluent_builders::DescribeJob<C, M, R> {
        fluent_builders::DescribeJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `DescribeVault` operation.
    ///
    /// See [`DescribeVault`](crate::client::fluent_builders::DescribeVault) for more information about the
    /// operation and its arguments.
    pub fn describe_vault(&self) -> fluent_builders::DescribeVault<C, M, R> {
        fluent_builders::DescribeVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetDataRetrievalPolicy` operation.
    ///
    /// See [`GetDataRetrievalPolicy`](crate::client::fluent_builders::GetDataRetrievalPolicy) for more information about the
    /// operation and its arguments.
    pub fn get_data_retrieval_policy(&self) -> fluent_builders::GetDataRetrievalPolicy<C, M, R> {
        fluent_builders::GetDataRetrievalPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetJobOutput` operation.
    ///
    /// See [`GetJobOutput`](crate::client::fluent_builders::GetJobOutput) for more information about the
    /// operation and its arguments.
    pub fn get_job_output(&self) -> fluent_builders::GetJobOutput<C, M, R> {
        fluent_builders::GetJobOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetVaultAccessPolicy` operation.
    ///
    /// See [`GetVaultAccessPolicy`](crate::client::fluent_builders::GetVaultAccessPolicy) for more information about the
    /// operation and its arguments.
    pub fn get_vault_access_policy(&self) -> fluent_builders::GetVaultAccessPolicy<C, M, R> {
        fluent_builders::GetVaultAccessPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetVaultLock` operation.
    ///
    /// See [`GetVaultLock`](crate::client::fluent_builders::GetVaultLock) for more information about the
    /// operation and its arguments.
    pub fn get_vault_lock(&self) -> fluent_builders::GetVaultLock<C, M, R> {
        fluent_builders::GetVaultLock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `GetVaultNotifications` operation.
    ///
    /// See [`GetVaultNotifications`](crate::client::fluent_builders::GetVaultNotifications) for more information about the
    /// operation and its arguments.
    pub fn get_vault_notifications(&self) -> fluent_builders::GetVaultNotifications<C, M, R> {
        fluent_builders::GetVaultNotifications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `InitiateJob` operation.
    ///
    /// See [`InitiateJob`](crate::client::fluent_builders::InitiateJob) for more information about the
    /// operation and its arguments.
    pub fn initiate_job(&self) -> fluent_builders::InitiateJob<C, M, R> {
        fluent_builders::InitiateJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `InitiateMultipartUpload` operation.
    ///
    /// See [`InitiateMultipartUpload`](crate::client::fluent_builders::InitiateMultipartUpload) for more information about the
    /// operation and its arguments.
    pub fn initiate_multipart_upload(&self) -> fluent_builders::InitiateMultipartUpload<C, M, R> {
        fluent_builders::InitiateMultipartUpload::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `InitiateVaultLock` operation.
    ///
    /// See [`InitiateVaultLock`](crate::client::fluent_builders::InitiateVaultLock) for more information about the
    /// operation and its arguments.
    pub fn initiate_vault_lock(&self) -> fluent_builders::InitiateVaultLock<C, M, R> {
        fluent_builders::InitiateVaultLock::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListJobs` operation.
    ///
    /// See [`ListJobs`](crate::client::fluent_builders::ListJobs) for more information about the
    /// operation and its arguments.
    pub fn list_jobs(&self) -> fluent_builders::ListJobs<C, M, R> {
        fluent_builders::ListJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListMultipartUploads` operation.
    ///
    /// See [`ListMultipartUploads`](crate::client::fluent_builders::ListMultipartUploads) for more information about the
    /// operation and its arguments.
    pub fn list_multipart_uploads(&self) -> fluent_builders::ListMultipartUploads<C, M, R> {
        fluent_builders::ListMultipartUploads::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListParts` operation.
    ///
    /// See [`ListParts`](crate::client::fluent_builders::ListParts) for more information about the
    /// operation and its arguments.
    pub fn list_parts(&self) -> fluent_builders::ListParts<C, M, R> {
        fluent_builders::ListParts::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListProvisionedCapacity` operation.
    ///
    /// See [`ListProvisionedCapacity`](crate::client::fluent_builders::ListProvisionedCapacity) for more information about the
    /// operation and its arguments.
    pub fn list_provisioned_capacity(&self) -> fluent_builders::ListProvisionedCapacity<C, M, R> {
        fluent_builders::ListProvisionedCapacity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListTagsForVault` operation.
    ///
    /// See [`ListTagsForVault`](crate::client::fluent_builders::ListTagsForVault) for more information about the
    /// operation and its arguments.
    pub fn list_tags_for_vault(&self) -> fluent_builders::ListTagsForVault<C, M, R> {
        fluent_builders::ListTagsForVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `ListVaults` operation.
    ///
    /// See [`ListVaults`](crate::client::fluent_builders::ListVaults) for more information about the
    /// operation and its arguments.
    pub fn list_vaults(&self) -> fluent_builders::ListVaults<C, M, R> {
        fluent_builders::ListVaults::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `PurchaseProvisionedCapacity` operation.
    ///
    /// See [`PurchaseProvisionedCapacity`](crate::client::fluent_builders::PurchaseProvisionedCapacity) for more information about the
    /// operation and its arguments.
    pub fn purchase_provisioned_capacity(
        &self,
    ) -> fluent_builders::PurchaseProvisionedCapacity<C, M, R> {
        fluent_builders::PurchaseProvisionedCapacity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `RemoveTagsFromVault` operation.
    ///
    /// See [`RemoveTagsFromVault`](crate::client::fluent_builders::RemoveTagsFromVault) for more information about the
    /// operation and its arguments.
    pub fn remove_tags_from_vault(&self) -> fluent_builders::RemoveTagsFromVault<C, M, R> {
        fluent_builders::RemoveTagsFromVault::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `SetDataRetrievalPolicy` operation.
    ///
    /// See [`SetDataRetrievalPolicy`](crate::client::fluent_builders::SetDataRetrievalPolicy) for more information about the
    /// operation and its arguments.
    pub fn set_data_retrieval_policy(&self) -> fluent_builders::SetDataRetrievalPolicy<C, M, R> {
        fluent_builders::SetDataRetrievalPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `SetVaultAccessPolicy` operation.
    ///
    /// See [`SetVaultAccessPolicy`](crate::client::fluent_builders::SetVaultAccessPolicy) for more information about the
    /// operation and its arguments.
    pub fn set_vault_access_policy(&self) -> fluent_builders::SetVaultAccessPolicy<C, M, R> {
        fluent_builders::SetVaultAccessPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `SetVaultNotifications` operation.
    ///
    /// See [`SetVaultNotifications`](crate::client::fluent_builders::SetVaultNotifications) for more information about the
    /// operation and its arguments.
    pub fn set_vault_notifications(&self) -> fluent_builders::SetVaultNotifications<C, M, R> {
        fluent_builders::SetVaultNotifications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UploadArchive` operation.
    ///
    /// See [`UploadArchive`](crate::client::fluent_builders::UploadArchive) for more information about the
    /// operation and its arguments.
    pub fn upload_archive(&self) -> fluent_builders::UploadArchive<C, M, R> {
        fluent_builders::UploadArchive::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the `UploadMultipartPart` operation.
    ///
    /// See [`UploadMultipartPart`](crate::client::fluent_builders::UploadMultipartPart) for more information about the
    /// operation and its arguments.
    pub fn upload_multipart_part(&self) -> fluent_builders::UploadMultipartPart<C, M, R> {
        fluent_builders::UploadMultipartPart::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `AbortMultipartUpload`.
    ///
    /// <p>This operation aborts a multipart upload identified by the upload ID.</p>
    ///
    ///
    /// <p>After the Abort Multipart Upload request succeeds, you cannot upload any more parts
    /// to the multipart upload or complete the multipart upload. Aborting a completed upload
    /// fails. However, aborting an already-aborted upload will succeed, for a short time. For more
    /// information about uploading a part and completing a multipart upload, see <a>UploadMultipartPart</a> and <a>CompleteMultipartUpload</a>.</p>
    ///
    /// <p>This operation is idempotent.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html">Working with Archives in
    /// Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-abort-upload.html">Abort Multipart
    /// Upload</a> in the <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct AbortMultipartUpload<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::abort_multipart_upload_input::Builder,
    }
    impl<C, M, R> AbortMultipartUpload<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AbortMultipartUpload`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AbortMultipartUploadOutput,
            aws_smithy_http::result::SdkError<crate::error::AbortMultipartUploadError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AbortMultipartUploadInputOperationOutputAlias,
                crate::output::AbortMultipartUploadOutput,
                crate::error::AbortMultipartUploadError,
                crate::input::AbortMultipartUploadInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The upload ID of the multipart upload to delete.</p>
        pub fn upload_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(inp);
            self
        }
        /// <p>The upload ID of the multipart upload to delete.</p>
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AbortVaultLock`.
    ///
    /// <p>This operation aborts the vault locking process if the vault lock is not in the
    /// <code>Locked</code> state. If the vault lock is in the <code>Locked</code> state when
    /// this operation is requested, the operation returns an <code>AccessDeniedException</code>
    /// error. Aborting the vault locking process removes the vault lock policy from the specified
    /// vault. </p>
    /// <p>A vault lock is put into the <code>InProgress</code> state by calling <a>InitiateVaultLock</a>. A vault lock is put into the <code>Locked</code> state by
    /// calling <a>CompleteVaultLock</a>. You can get the state of a vault lock by
    /// calling <a>GetVaultLock</a>. For more information about the vault locking
    /// process, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html">Amazon Glacier Vault Lock</a>. For more information about vault lock policies, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html">Amazon
    /// Glacier Access Control with Vault Lock Policies</a>. </p>
    /// <p>This operation is idempotent. You can successfully invoke this operation multiple
    /// times, if the vault lock is in the <code>InProgress</code> state or if there is no policy
    /// associated with the vault.</p>
    #[derive(std::fmt::Debug)]
    pub struct AbortVaultLock<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::abort_vault_lock_input::Builder,
    }
    impl<C, M, R> AbortVaultLock<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AbortVaultLock`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AbortVaultLockOutput,
            aws_smithy_http::result::SdkError<crate::error::AbortVaultLockError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AbortVaultLockInputOperationOutputAlias,
                crate::output::AbortVaultLockOutput,
                crate::error::AbortVaultLockError,
                crate::input::AbortVaultLockInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `AddTagsToVault`.
    ///
    /// <p>This operation adds the specified tags to a vault. Each tag is composed of a key and
    /// a value. Each vault can have up to 10 tags. If your request would cause the tag limit for
    /// the vault to be exceeded, the operation throws the <code>LimitExceededException</code>
    /// error. If a tag already exists on the vault under a specified key, the existing key value
    /// will be overwritten. For more information about tags, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html">Tagging Amazon S3 Glacier Resources</a>.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct AddTagsToVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_tags_to_vault_input::Builder,
    }
    impl<C, M, R> AddTagsToVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `AddTagsToVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddTagsToVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::AddTagsToVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddTagsToVaultInputOperationOutputAlias,
                crate::output::AddTagsToVaultOutput,
                crate::error::AddTagsToVaultError,
                crate::input::AddTagsToVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to add to the vault. Each tag is composed of a key and a value. The value
        /// can be an empty string.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        /// <p>The tags to add to the vault. Each tag is composed of a key and a value. The value
        /// can be an empty string.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CompleteMultipartUpload`.
    ///
    /// <p>You call this operation to inform Amazon S3 Glacier (Glacier) that all the archive parts have been
    /// uploaded and that Glacier can now assemble the archive from the uploaded parts.
    /// After assembling and saving the archive to the vault, Glacier returns the URI path
    /// of the newly created archive resource. Using the URI path, you can then access the archive.
    /// After you upload an archive, you should save the archive ID returned to retrieve the
    /// archive at a later point. You can also get the vault inventory to obtain a list of archive
    /// IDs in a vault. For more information, see <a>InitiateJob</a>.</p>
    ///
    /// <p>In the request, you must include the computed SHA256 tree hash of the entire archive
    /// you have uploaded. For information about computing a SHA256 tree hash, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html">Computing
    /// Checksums</a>. On the server side, Glacier also constructs the SHA256 tree
    /// hash of the assembled archive. If the values match, Glacier saves the archive to the
    /// vault; otherwise, it returns an error, and the operation fails. The <a>ListParts</a> operation returns a list of parts uploaded for a specific
    /// multipart upload. It includes checksum information for each uploaded part that can be used
    /// to debug a bad checksum issue.</p>
    ///
    /// <p>Additionally, Glacier also checks for any missing content ranges when
    /// assembling the archive, if missing content ranges are found, Glacier returns an
    /// error and the operation fails.</p>
    ///
    /// <p>Complete Multipart Upload is an idempotent operation. After your first successful
    /// complete multipart upload, if you call the operation again within a short period, the
    /// operation will succeed and return the same archive ID. This is useful in the event you
    /// experience a network issue that causes an aborted connection or receive a 500 server error,
    /// in which case you can repeat your Complete Multipart Upload request and get the same
    /// archive ID without creating duplicate archives. Note, however, that after the multipart
    /// upload completes, you cannot call the List Parts operation and the multipart upload will
    /// not appear in List Multipart Uploads response, even if idempotent complete is
    /// possible.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html">Uploading Large Archives in
    /// Parts (Multipart Upload)</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-complete-upload.html">Complete Multipart
    /// Upload</a> in the <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct CompleteMultipartUpload<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::complete_multipart_upload_input::Builder,
    }
    impl<C, M, R> CompleteMultipartUpload<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CompleteMultipartUpload`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CompleteMultipartUploadOutput,
            aws_smithy_http::result::SdkError<crate::error::CompleteMultipartUploadError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CompleteMultipartUploadInputOperationOutputAlias,
                crate::output::CompleteMultipartUploadOutput,
                crate::error::CompleteMultipartUploadError,
                crate::input::CompleteMultipartUploadInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn upload_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(inp);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
        /// <p>The total size, in bytes, of the entire archive. This value should be the sum of all
        /// the sizes of the individual parts that you uploaded.</p>
        pub fn archive_size(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.archive_size(inp);
            self
        }
        /// <p>The total size, in bytes, of the entire archive. This value should be the sum of all
        /// the sizes of the individual parts that you uploaded.</p>
        pub fn set_archive_size(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_archive_size(input);
            self
        }
        /// <p>The SHA256 tree hash of the entire archive. It is the tree hash of SHA256 tree hash
        /// of the individual parts. If the value you specify in the request does not match the SHA256
        /// tree hash of the final assembled archive as computed by Amazon S3 Glacier (Glacier),
        /// Glacier returns an error and the request fails.</p>
        pub fn checksum(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.checksum(inp);
            self
        }
        /// <p>The SHA256 tree hash of the entire archive. It is the tree hash of SHA256 tree hash
        /// of the individual parts. If the value you specify in the request does not match the SHA256
        /// tree hash of the final assembled archive as computed by Amazon S3 Glacier (Glacier),
        /// Glacier returns an error and the request fails.</p>
        pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_checksum(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CompleteVaultLock`.
    ///
    /// <p>This operation completes the vault locking process by transitioning the vault lock
    /// from the <code>InProgress</code> state to the <code>Locked</code> state, which causes the
    /// vault lock policy to become unchangeable. A vault lock is put into the
    /// <code>InProgress</code> state by calling <a>InitiateVaultLock</a>. You can
    /// obtain the state of the vault lock by calling <a>GetVaultLock</a>. For more
    /// information about the vault locking process, <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html">Amazon Glacier Vault Lock</a>. </p>
    /// <p>This operation is idempotent. This request is always successful if the vault lock is
    /// in the <code>Locked</code> state and the provided lock ID matches the lock ID originally
    /// used to lock the vault.</p>
    /// <p>If an invalid lock ID is passed in the request when the vault lock is in the
    /// <code>Locked</code> state, the operation returns an <code>AccessDeniedException</code>
    /// error. If an invalid lock ID is passed in the request when the vault lock is in the
    /// <code>InProgress</code> state, the operation throws an <code>InvalidParameter</code>
    /// error.</p>
    #[derive(std::fmt::Debug)]
    pub struct CompleteVaultLock<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::complete_vault_lock_input::Builder,
    }
    impl<C, M, R> CompleteVaultLock<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CompleteVaultLock`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CompleteVaultLockOutput,
            aws_smithy_http::result::SdkError<crate::error::CompleteVaultLockError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CompleteVaultLockInputOperationOutputAlias,
                crate::output::CompleteVaultLockOutput,
                crate::error::CompleteVaultLockError,
                crate::input::CompleteVaultLockInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The <code>lockId</code> value is the lock ID obtained from a <a>InitiateVaultLock</a> request.</p>
        pub fn lock_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lock_id(inp);
            self
        }
        /// <p>The <code>lockId</code> value is the lock ID obtained from a <a>InitiateVaultLock</a> request.</p>
        pub fn set_lock_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lock_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateVault`.
    ///
    /// <p>This operation creates a new vault with the specified name. The name of the vault
    /// must be unique within a region for an AWS account. You can create up to 1,000 vaults per
    /// account. If you need to create more vaults, contact Amazon S3 Glacier.</p>
    /// <p>You must use the following guidelines when naming a vault.</p>
    /// <ul>
    /// <li>
    /// <p>Names can be between 1 and 255 characters long.</p>
    /// </li>
    /// <li>
    /// <p>Allowed characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.'
    /// (period).</p>
    /// </li>
    /// </ul>
    ///
    /// <p>This operation is idempotent.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/creating-vaults.html">Creating a Vault in Amazon
    /// Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-put.html">Create Vault </a> in the
    /// <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct CreateVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_vault_input::Builder,
    }
    impl<C, M, R> CreateVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `CreateVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateVaultInputOperationOutputAlias,
                crate::output::CreateVaultOutput,
                crate::error::CreateVaultError,
                crate::input::CreateVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteArchive`.
    ///
    /// <p>This operation deletes an archive from a vault. Subsequent requests to initiate a
    /// retrieval of this archive will fail. Archive retrievals that are in progress for this
    /// archive ID may or may not succeed according to the following scenarios:</p>
    /// <ul>
    /// <li>
    /// <p>If the archive retrieval job is actively preparing the data for download when
    /// Amazon S3 Glacier receives the delete archive request, the archival retrieval operation
    /// might fail.</p>
    /// </li>
    /// <li>
    /// <p>If the archive retrieval job has successfully prepared the archive for download
    /// when Amazon S3 Glacier receives the delete archive request, you will be able to download
    /// the output.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>This operation is idempotent. Attempting to delete an already-deleted archive does
    /// not result in an error.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-an-archive.html">Deleting an Archive in Amazon
    /// Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html">Delete Archive</a> in the
    /// <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteArchive<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_archive_input::Builder,
    }
    impl<C, M, R> DeleteArchive<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteArchive`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteArchiveOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteArchiveError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteArchiveInputOperationOutputAlias,
                crate::output::DeleteArchiveOutput,
                crate::error::DeleteArchiveError,
                crate::input::DeleteArchiveInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The ID of the archive to delete.</p>
        pub fn archive_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.archive_id(inp);
            self
        }
        /// <p>The ID of the archive to delete.</p>
        pub fn set_archive_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_archive_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteVault`.
    ///
    /// <p>This operation deletes a vault. Amazon S3 Glacier will delete a vault only if there are
    /// no archives in the vault as of the last inventory and there have been no writes to the
    /// vault since the last inventory. If either of these conditions is not satisfied, the vault
    /// deletion fails (that is, the vault is not removed) and Amazon S3 Glacier returns an error. You
    /// can use <a>DescribeVault</a> to return the number of archives in a vault, and
    /// you can use <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html">Initiate a Job (POST
    /// jobs)</a> to initiate a new inventory retrieval for a vault. The inventory contains
    /// the archive IDs you use to delete archives using <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-delete.html">Delete Archive (DELETE
    /// archive)</a>.</p>
    ///
    /// <p>This operation is idempotent.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/deleting-vaults.html">Deleting a Vault in Amazon
    /// Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-delete.html">Delete Vault </a> in the
    /// <i>Amazon S3 Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_vault_input::Builder,
    }
    impl<C, M, R> DeleteVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVaultInputOperationOutputAlias,
                crate::output::DeleteVaultOutput,
                crate::error::DeleteVaultError,
                crate::input::DeleteVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteVaultAccessPolicy`.
    ///
    /// <p>This operation deletes the access policy associated with the specified vault. The
    /// operation is eventually consistent; that is, it might take some time for Amazon S3 Glacier to
    /// completely remove the access policy, and you might still see the effect of the policy for a
    /// short time after you send the delete request.</p>
    /// <p>This operation is idempotent. You can invoke delete multiple times, even if there is
    /// no policy associated with the vault. For more information about vault access policies, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html">Amazon Glacier Access Control with Vault Access Policies</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteVaultAccessPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_vault_access_policy_input::Builder,
    }
    impl<C, M, R> DeleteVaultAccessPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteVaultAccessPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVaultAccessPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteVaultAccessPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVaultAccessPolicyInputOperationOutputAlias,
                crate::output::DeleteVaultAccessPolicyOutput,
                crate::error::DeleteVaultAccessPolicyError,
                crate::input::DeleteVaultAccessPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteVaultNotifications`.
    ///
    /// <p>This operation deletes the notification configuration set for a vault. The operation
    /// is eventually consistent; that is, it might take some time for Amazon S3 Glacier to completely
    /// disable the notifications and you might still receive some notifications for a short time
    /// after you send the delete request.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access
    /// Control Using AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html">Configuring Vault
    /// Notifications in Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-delete.html">Delete Vault
    /// Notification Configuration </a> in the Amazon S3 Glacier Developer Guide. </p>
    #[derive(std::fmt::Debug)]
    pub struct DeleteVaultNotifications<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_vault_notifications_input::Builder,
    }
    impl<C, M, R> DeleteVaultNotifications<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DeleteVaultNotifications`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVaultNotificationsOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteVaultNotificationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVaultNotificationsInputOperationOutputAlias,
                crate::output::DeleteVaultNotificationsOutput,
                crate::error::DeleteVaultNotificationsError,
                crate::input::DeleteVaultNotificationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeJob`.
    ///
    /// <p>This operation returns information about a job you previously initiated, including
    /// the job initiation date, the user who initiated the job, the job status code/message and
    /// the Amazon SNS topic to notify after Amazon S3 Glacier (Glacier) completes the job. For more information
    /// about initiating a job, see <a>InitiateJob</a>. </p>
    ///
    /// <note>
    /// <p>This operation enables you to check the status of your job. However, it is
    /// strongly recommended that you set up an Amazon SNS topic and specify it in your initiate
    /// job request so that Glacier can notify the topic after it completes the
    /// job.</p>
    /// </note>
    ///
    /// <p>A job ID will not expire for at least 24 hours after Glacier completes the
    /// job.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    ///
    /// <p> For more information about using this operation,
    /// see the documentation for the underlying REST API <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-describe-job-get.html">Describe Job</a>
    /// in the <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_job_input::Builder,
    }
    impl<C, M, R> DescribeJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeJobOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeJobInputOperationOutputAlias,
                crate::output::DescribeJobOutput,
                crate::error::DescribeJobError,
                crate::input::DescribeJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The ID of the job to describe.</p>
        pub fn job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(inp);
            self
        }
        /// <p>The ID of the job to describe.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeVault`.
    ///
    /// <p>This operation returns information about a vault, including the vault's Amazon
    /// Resource Name (ARN), the date the vault was created, the number of archives it contains,
    /// and the total size of all the archives in the vault. The number of archives and their total
    /// size are as of the last inventory generation. This means that if you add or remove an
    /// archive from a vault, and then immediately use Describe Vault, the change in contents will
    /// not be immediately reflected. If you want to retrieve the latest inventory of the vault,
    /// use <a>InitiateJob</a>. Amazon S3 Glacier generates vault inventories approximately
    /// daily. For more information, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html">Downloading a Vault Inventory in
    /// Amazon S3 Glacier</a>. </p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html">Retrieving Vault Metadata in
    /// Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-get.html">Describe Vault </a> in the
    /// <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct DescribeVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_vault_input::Builder,
    }
    impl<C, M, R> DescribeVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `DescribeVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeVaultInputOperationOutputAlias,
                crate::output::DescribeVaultOutput,
                crate::error::DescribeVaultError,
                crate::input::DescribeVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetDataRetrievalPolicy`.
    ///
    /// <p>This operation returns the current data retrieval policy for the account and region
    /// specified in the GET request. For more information about data retrieval policies, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html">Amazon Glacier Data Retrieval Policies</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetDataRetrievalPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_data_retrieval_policy_input::Builder,
    }
    impl<C, M, R> GetDataRetrievalPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetDataRetrievalPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDataRetrievalPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetDataRetrievalPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetDataRetrievalPolicyInputOperationOutputAlias,
                crate::output::GetDataRetrievalPolicyOutput,
                crate::error::GetDataRetrievalPolicyError,
                crate::input::GetDataRetrievalPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetJobOutput`.
    ///
    /// <p>This operation downloads the output of the job you initiated using <a>InitiateJob</a>. Depending on the job type you specified when you initiated the
    /// job, the output will be either the content of an archive or a vault inventory.</p>
    ///
    /// <p>You can download all the job output or download a portion of the output by specifying
    /// a byte range. In the case of an archive retrieval job, depending on the byte range you
    /// specify, Amazon S3 Glacier (Glacier) returns the checksum for the portion of the data. You can compute the
    /// checksum on the client and verify that the values match to ensure the portion you downloaded
    /// is the correct data.</p>
    /// <p>A job ID will not expire for at least 24 hours after Glacier completes the job. That
    /// a byte range. For both archive and inventory retrieval jobs, you should verify the downloaded
    /// size against the size returned in the headers from the
    /// <b>Get Job Output</b> response.</p>
    /// <p>For archive retrieval jobs, you should also verify that the size is what you expected. If
    /// you download a portion of the output, the expected size is based on the range of bytes
    /// you specified. For example, if you specify a range of <code>bytes=0-1048575</code>, you should
    /// verify your download size is 1,048,576 bytes. If you download an entire archive, the
    /// expected size is the size of the archive when you uploaded it to Amazon S3 Glacier
    /// The expected size is also returned in the headers from the
    /// <b>Get Job Output</b> response.</p>
    /// <p>In the case of an archive retrieval job, depending on the byte range you
    /// specify, Glacier returns the checksum for the portion of the data. To ensure the portion you downloaded
    /// is the correct data, compute the checksum on the client, verify that the values match,
    /// and verify that the size is what you expected.</p>
    ///
    /// <p>A job ID does not expire for at least 24 hours after Glacier completes the
    /// job. That is, you can download the job output within the 24 hours period after Amazon
    /// Glacier completes the job.</p>    
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and the underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-inventory.html">Downloading a
    /// Vault Inventory</a>, <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/downloading-an-archive.html">Downloading an
    /// Archive</a>, and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-job-output-get.html">Get Job Output </a>
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct GetJobOutput<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_job_output_input::Builder,
    }
    impl<C, M, R> GetJobOutput<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetJobOutput`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetJobOutputOutput,
            aws_smithy_http::result::SdkError<crate::error::GetJobOutputError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetJobOutputInputOperationOutputAlias,
                crate::output::GetJobOutputOutput,
                crate::error::GetJobOutputError,
                crate::input::GetJobOutputInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The job ID whose data is downloaded.</p>
        pub fn job_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(inp);
            self
        }
        /// <p>The job ID whose data is downloaded.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
        /// <p>The range of bytes to retrieve from the output. For example, if you want to download
        /// the first 1,048,576 bytes, specify the range as <code>bytes=0-1048575</code>. By default, this operation
        /// downloads the entire output.</p>
        ///
        /// <p>If the job output is large, then you can use a range to
        /// retrieve a portion of the output. This allows you to download the entire output in smaller
        /// chunks of bytes. For example, suppose you have 1 GB of job output you want to download and
        /// you decide to download 128 MB chunks of data at a time, which is a total of eight Get Job
        /// Output requests. You use the following process to download the job output:</p>
        ///
        /// <ol>
        /// <li>
        /// <p>Download a 128 MB chunk of output by specifying the appropriate byte range.
        /// Verify that all 128 MB of data was received.</p>
        /// </li>
        /// <li>
        /// <p>Along with the data, the response includes a SHA256 tree hash of the payload.
        /// You compute the checksum of the payload on the client and compare it with the
        /// checksum you received in the response to ensure you received all the expected
        /// data.</p>
        /// </li>
        /// <li>
        /// <p>Repeat steps 1 and 2 for all the eight 128 MB chunks of output data, each time
        /// specifying the appropriate byte range.</p>
        /// </li>
        /// <li>
        /// <p>After downloading all the parts of the job output, you have a list of eight
        /// checksum values. Compute the tree hash of these values to find the checksum of the
        /// entire output. Using the <a>DescribeJob</a> API, obtain job information of
        /// the job that provided you the output. The response includes the checksum of the
        /// entire archive stored in Amazon S3 Glacier. You compare this value with the checksum you
        /// computed to ensure you have downloaded the entire archive content with no
        /// errors.</p>
        /// <p></p>
        /// </li>
        /// </ol>
        pub fn range(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.range(inp);
            self
        }
        /// <p>The range of bytes to retrieve from the output. For example, if you want to download
        /// the first 1,048,576 bytes, specify the range as <code>bytes=0-1048575</code>. By default, this operation
        /// downloads the entire output.</p>
        ///
        /// <p>If the job output is large, then you can use a range to
        /// retrieve a portion of the output. This allows you to download the entire output in smaller
        /// chunks of bytes. For example, suppose you have 1 GB of job output you want to download and
        /// you decide to download 128 MB chunks of data at a time, which is a total of eight Get Job
        /// Output requests. You use the following process to download the job output:</p>
        ///
        /// <ol>
        /// <li>
        /// <p>Download a 128 MB chunk of output by specifying the appropriate byte range.
        /// Verify that all 128 MB of data was received.</p>
        /// </li>
        /// <li>
        /// <p>Along with the data, the response includes a SHA256 tree hash of the payload.
        /// You compute the checksum of the payload on the client and compare it with the
        /// checksum you received in the response to ensure you received all the expected
        /// data.</p>
        /// </li>
        /// <li>
        /// <p>Repeat steps 1 and 2 for all the eight 128 MB chunks of output data, each time
        /// specifying the appropriate byte range.</p>
        /// </li>
        /// <li>
        /// <p>After downloading all the parts of the job output, you have a list of eight
        /// checksum values. Compute the tree hash of these values to find the checksum of the
        /// entire output. Using the <a>DescribeJob</a> API, obtain job information of
        /// the job that provided you the output. The response includes the checksum of the
        /// entire archive stored in Amazon S3 Glacier. You compare this value with the checksum you
        /// computed to ensure you have downloaded the entire archive content with no
        /// errors.</p>
        /// <p></p>
        /// </li>
        /// </ol>
        pub fn set_range(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_range(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetVaultAccessPolicy`.
    ///
    /// <p>This operation retrieves the <code>access-policy</code> subresource set on the vault;
    /// for more information on setting this subresource, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-SetVaultAccessPolicy.html">Set Vault Access Policy
    /// (PUT access-policy)</a>. If there is no access policy set on the vault, the
    /// operation returns a <code>404 Not found</code> error. For more information about vault
    /// access policies, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html">Amazon Glacier Access Control
    /// with Vault Access Policies</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct GetVaultAccessPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_vault_access_policy_input::Builder,
    }
    impl<C, M, R> GetVaultAccessPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetVaultAccessPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetVaultAccessPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::GetVaultAccessPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetVaultAccessPolicyInputOperationOutputAlias,
                crate::output::GetVaultAccessPolicyOutput,
                crate::error::GetVaultAccessPolicyError,
                crate::input::GetVaultAccessPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetVaultLock`.
    ///
    /// <p>This operation retrieves the following attributes from the <code>lock-policy</code>
    /// subresource set on the specified vault: </p>
    /// <ul>
    /// <li>
    /// <p>The vault lock policy set on the vault.</p>
    /// </li>
    /// <li>
    /// <p>The state of the vault lock, which is either <code>InProgess</code> or
    /// <code>Locked</code>.</p>
    /// </li>
    /// <li>
    /// <p>When the lock ID expires. The lock ID is used to complete the vault locking
    /// process.</p>
    /// </li>
    /// <li>
    /// <p>When the vault lock was initiated and put into the <code>InProgress</code>
    /// state.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>A vault lock is put into the <code>InProgress</code> state by calling <a>InitiateVaultLock</a>. A vault lock is put into the <code>Locked</code> state by
    /// calling <a>CompleteVaultLock</a>. You can abort the vault locking process by
    /// calling <a>AbortVaultLock</a>. For more information about the vault locking
    /// process, <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html">Amazon
    /// Glacier Vault Lock</a>. </p>
    /// <p>If there is no vault lock policy set on the vault, the operation returns a <code>404
    /// Not found</code> error. For more information about vault lock policies, <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html">Amazon
    /// Glacier Access Control with Vault Lock Policies</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct GetVaultLock<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_vault_lock_input::Builder,
    }
    impl<C, M, R> GetVaultLock<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetVaultLock`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetVaultLockOutput,
            aws_smithy_http::result::SdkError<crate::error::GetVaultLockError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetVaultLockInputOperationOutputAlias,
                crate::output::GetVaultLockOutput,
                crate::error::GetVaultLockError,
                crate::input::GetVaultLockInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetVaultNotifications`.
    ///
    /// <p>This operation retrieves the <code>notification-configuration</code> subresource of
    /// the specified vault.</p>
    ///
    /// <p>For information about setting a notification configuration on a vault, see <a>SetVaultNotifications</a>. If a notification configuration for a vault is not
    /// set, the operation returns a <code>404 Not Found</code> error. For more information about
    /// vault notifications, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html">Configuring Vault
    /// Notifications in Amazon S3 Glacier</a>. </p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html">Configuring Vault
    /// Notifications in Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-get.html">Get Vault Notification
    /// Configuration </a> in the <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct GetVaultNotifications<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_vault_notifications_input::Builder,
    }
    impl<C, M, R> GetVaultNotifications<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `GetVaultNotifications`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetVaultNotificationsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetVaultNotificationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetVaultNotificationsInputOperationOutputAlias,
                crate::output::GetVaultNotificationsOutput,
                crate::error::GetVaultNotificationsError,
                crate::input::GetVaultNotificationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `InitiateJob`.
    ///
    /// <p>This operation initiates a job of the specified type, which can be a select, an archival retrieval,
    /// or a vault retrieval. For more information about using this operation,
    /// see the documentation for the underlying REST API <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-initiate-job-post.html">Initiate
    /// a Job</a>.
    /// </p>
    #[derive(std::fmt::Debug)]
    pub struct InitiateJob<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::initiate_job_input::Builder,
    }
    impl<C, M, R> InitiateJob<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `InitiateJob`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::InitiateJobOutput,
            aws_smithy_http::result::SdkError<crate::error::InitiateJobError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::InitiateJobInputOperationOutputAlias,
                crate::output::InitiateJobOutput,
                crate::error::InitiateJobError,
                crate::input::InitiateJobInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>Provides options for specifying job information.</p>
        pub fn job_parameters(mut self, inp: crate::model::JobParameters) -> Self {
            self.inner = self.inner.job_parameters(inp);
            self
        }
        /// <p>Provides options for specifying job information.</p>
        pub fn set_job_parameters(
            mut self,
            input: std::option::Option<crate::model::JobParameters>,
        ) -> Self {
            self.inner = self.inner.set_job_parameters(input);
            self
        }
    }
    /// Fluent builder constructing a request to `InitiateMultipartUpload`.
    ///
    /// <p>This operation initiates a multipart upload. Amazon S3 Glacier creates a multipart
    /// upload resource and returns its ID in the response. The multipart upload ID is used in
    /// subsequent requests to upload parts of an archive (see <a>UploadMultipartPart</a>).</p>
    ///
    /// <p>When you initiate a multipart upload, you specify the part size in number of bytes.
    /// The part size must be a megabyte (1024 KB) multiplied by a power of 2-for example, 1048576
    /// (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum allowable
    /// part size is 1 MB, and the maximum is 4 GB.</p>
    ///
    /// <p>Every part you upload to this resource (see <a>UploadMultipartPart</a>),
    /// except the last one, must have the same size. The last one can be the same size or smaller.
    /// For example, suppose you want to upload a 16.2 MB file. If you initiate the multipart
    /// upload with a part size of 4 MB, you will upload four parts of 4 MB each and one part of
    /// 0.2 MB. </p>
    ///
    /// <note>
    /// <p>You don't need to know the size of the archive when you start a multipart upload
    /// because Amazon S3 Glacier does not require you to specify the overall archive
    /// size.</p>
    /// </note>
    ///
    /// <p>After you complete the multipart upload, Amazon S3 Glacier (Glacier) removes the multipart upload
    /// resource referenced by the ID. Glacier also removes the multipart upload resource if
    /// you cancel the multipart upload or it may be removed if there is no activity for a period
    /// of 24 hours.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html">Uploading Large Archives in
    /// Parts (Multipart Upload)</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-initiate-upload.html">Initiate Multipart
    /// Upload</a> in the <i>Amazon Glacier Developer Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct InitiateMultipartUpload<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::initiate_multipart_upload_input::Builder,
    }
    impl<C, M, R> InitiateMultipartUpload<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `InitiateMultipartUpload`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::InitiateMultipartUploadOutput,
            aws_smithy_http::result::SdkError<crate::error::InitiateMultipartUploadError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::InitiateMultipartUploadInputOperationOutputAlias,
                crate::output::InitiateMultipartUploadOutput,
                crate::error::InitiateMultipartUploadError,
                crate::input::InitiateMultipartUploadInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The archive description that you are uploading in parts.</p>
        /// <p>The part size must be a megabyte (1024 KB) multiplied by a power of 2, for example
        /// 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum
        /// allowable part size is 1 MB, and the maximum is 4 GB (4096 MB).</p>
        pub fn archive_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.archive_description(inp);
            self
        }
        /// <p>The archive description that you are uploading in parts.</p>
        /// <p>The part size must be a megabyte (1024 KB) multiplied by a power of 2, for example
        /// 1048576 (1 MB), 2097152 (2 MB), 4194304 (4 MB), 8388608 (8 MB), and so on. The minimum
        /// allowable part size is 1 MB, and the maximum is 4 GB (4096 MB).</p>
        pub fn set_archive_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_archive_description(input);
            self
        }
        /// <p>The size of each part except the last, in bytes. The last part can be smaller than
        /// this part size.</p>
        pub fn part_size(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.part_size(inp);
            self
        }
        /// <p>The size of each part except the last, in bytes. The last part can be smaller than
        /// this part size.</p>
        pub fn set_part_size(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_part_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `InitiateVaultLock`.
    ///
    /// <p>This operation initiates the vault locking process by doing the following:</p>
    /// <ul>
    /// <li>
    /// <p>Installing a vault lock policy on the specified vault.</p>
    /// </li>
    /// <li>
    /// <p>Setting the lock state of vault lock to <code>InProgress</code>.</p>
    /// </li>
    /// <li>
    /// <p>Returning a lock ID, which is used to complete the vault locking
    /// process.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>You can set one vault lock policy for each vault and this policy can be up to 20 KB
    /// in size. For more information about vault lock policies, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock-policy.html">Amazon Glacier Access Control with
    /// Vault Lock Policies</a>. </p>
    /// <p>You must complete the vault locking process within 24 hours after the vault lock
    /// enters the <code>InProgress</code> state. After the 24 hour window ends, the lock ID
    /// expires, the vault automatically exits the <code>InProgress</code> state, and the vault
    /// lock policy is removed from the vault. You call <a>CompleteVaultLock</a> to
    /// complete the vault locking process by setting the state of the vault lock to
    /// <code>Locked</code>. </p>
    /// <p>After a vault lock is in the <code>Locked</code> state, you cannot initiate a new
    /// vault lock for the vault.</p>
    ///
    /// <p>You can abort the vault locking process by calling <a>AbortVaultLock</a>.
    /// You can get the state of the vault lock by calling <a>GetVaultLock</a>. For more
    /// information about the vault locking process, <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-lock.html">Amazon Glacier Vault
    /// Lock</a>.</p>
    ///
    /// <p>If this operation is called when the vault lock is in the <code>InProgress</code>
    /// state, the operation returns an <code>AccessDeniedException</code> error. When the vault
    /// lock is in the <code>InProgress</code> state you must call <a>AbortVaultLock</a>
    /// before you can initiate a new vault lock policy. </p>
    #[derive(std::fmt::Debug)]
    pub struct InitiateVaultLock<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::initiate_vault_lock_input::Builder,
    }
    impl<C, M, R> InitiateVaultLock<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `InitiateVaultLock`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::InitiateVaultLockOutput,
            aws_smithy_http::result::SdkError<crate::error::InitiateVaultLockError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::InitiateVaultLockInputOperationOutputAlias,
                crate::output::InitiateVaultLockOutput,
                crate::error::InitiateVaultLockError,
                crate::input::InitiateVaultLockInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The vault lock policy as a JSON string, which uses "\" as an escape
        /// character.</p>
        pub fn policy(mut self, inp: crate::model::VaultLockPolicy) -> Self {
            self.inner = self.inner.policy(inp);
            self
        }
        /// <p>The vault lock policy as a JSON string, which uses "\" as an escape
        /// character.</p>
        pub fn set_policy(
            mut self,
            input: std::option::Option<crate::model::VaultLockPolicy>,
        ) -> Self {
            self.inner = self.inner.set_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListJobs`.
    ///
    /// <p>This operation lists jobs for a vault, including jobs that are in-progress and jobs
    /// that have recently finished. The List Job operation returns a list of these jobs sorted by job initiation
    /// time.</p>
    ///
    /// <note>
    /// <p>Amazon Glacier retains recently completed jobs for a period before deleting them;
    /// however, it eventually removes completed jobs. The output of completed jobs can be
    /// retrieved. Retaining completed jobs for a period of time after they have completed
    /// enables you to get a job output in the event you miss the job completion notification or
    /// your first attempt to download it fails. For example, suppose you start an archive
    /// retrieval job to download an archive. After the job completes, you start to download the
    /// archive but encounter a network error. In this scenario, you can retry and download the
    /// archive while the job exists.</p>
    /// </note>
    ///
    /// <p>The List Jobs operation supports pagination. You should always check the response <code>Marker</code> field.
    /// If there are no more jobs to list, the <code>Marker</code> field is set to <code>null</code>. If there are more jobs to list,
    /// the <code>Marker</code> field is set to a non-null value, which you can use to continue the pagination of the list.
    /// To return a list of jobs that begins at a specific job,
    /// set the marker request parameter to the <code>Marker</code> value for that job that you obtained from a previous List Jobs request.</p>
    ///
    /// <p>You can set a maximum limit for the number of jobs returned in the response by
    /// specifying the <code>limit</code> parameter in the request. The default limit is 50. The
    /// number of jobs returned might be fewer than the limit, but the number of returned jobs
    /// never exceeds the limit.</p>
    ///
    /// <p>Additionally, you can filter the jobs list returned by specifying the optional
    /// <code>statuscode</code> parameter or <code>completed</code> parameter, or both. Using
    /// the <code>statuscode</code> parameter, you can specify to return only jobs that match
    /// either the <code>InProgress</code>, <code>Succeeded</code>, or <code>Failed</code> status.
    /// Using the <code>completed</code> parameter, you can specify to return only jobs that were
    /// completed (<code>true</code>) or jobs that were not completed
    /// (<code>false</code>).</p>
    ///
    /// <p>For more information about using this operation,
    /// see the documentation for the underlying REST API <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-jobs-get.html">List Jobs</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct ListJobs<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_jobs_input::Builder,
    }
    impl<C, M, R> ListJobs<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListJobs`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListJobsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListJobsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListJobsInputOperationOutputAlias,
                crate::output::ListJobsOutput,
                crate::error::ListJobsError,
                crate::input::ListJobsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The maximum number of jobs to be returned. The default limit is 50. The number of
        /// jobs returned might be fewer than the specified limit, but the number of returned jobs
        /// never exceeds the limit.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        /// <p>The maximum number of jobs to be returned. The default limit is 50. The number of
        /// jobs returned might be fewer than the specified limit, but the number of returned jobs
        /// never exceeds the limit.</p>
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the job at which the
        /// listing of jobs should begin. Get the marker value from a previous List Jobs response. You
        /// only need to include the marker if you are continuing the pagination of results started in
        /// a previous List Jobs request.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the job at which the
        /// listing of jobs should begin. Get the marker value from a previous List Jobs response. You
        /// only need to include the marker if you are continuing the pagination of results started in
        /// a previous List Jobs request.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
        /// <p>The type of job status to return. You can specify the following values:
        /// <code>InProgress</code>, <code>Succeeded</code>, or <code>Failed</code>.</p>
        pub fn statuscode(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.statuscode(inp);
            self
        }
        /// <p>The type of job status to return. You can specify the following values:
        /// <code>InProgress</code>, <code>Succeeded</code>, or <code>Failed</code>.</p>
        pub fn set_statuscode(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_statuscode(input);
            self
        }
        /// <p>The state of the jobs to return. You can specify <code>true</code> or
        /// <code>false</code>.</p>
        pub fn completed(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.completed(inp);
            self
        }
        /// <p>The state of the jobs to return. You can specify <code>true</code> or
        /// <code>false</code>.</p>
        pub fn set_completed(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_completed(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListMultipartUploads`.
    ///
    /// <p>This operation lists in-progress multipart uploads for the specified vault. An
    /// in-progress multipart upload is a multipart upload that has been initiated by an <a>InitiateMultipartUpload</a> request, but has not yet been completed or aborted.
    /// The list returned in the List Multipart Upload response has no guaranteed order. </p>
    ///
    /// <p>The List Multipart Uploads operation supports pagination. By default, this operation
    /// returns up to 50 multipart uploads in the response. You should always check the response
    /// for a <code>marker</code> at which to continue the list; if there are no more items the
    /// <code>marker</code> is <code>null</code>. To return a list of multipart uploads that
    /// begins at a specific upload, set the <code>marker</code> request parameter to the value you
    /// obtained from a previous List Multipart Upload request. You can also limit the number of
    /// uploads returned in the response by specifying the <code>limit</code> parameter in the
    /// request.</p>
    ///
    /// <p>Note the difference between this operation and listing parts (<a>ListParts</a>). The List Multipart Uploads operation lists all multipart uploads
    /// for a vault and does not require a multipart upload ID. The List Parts operation requires a
    /// multipart upload ID since parts are associated with a single upload.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    ///
    /// <p>For conceptual information and the underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html">Working
    /// with Archives in Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-uploads.html">List Multipart Uploads
    /// </a> in the <i>Amazon Glacier Developer Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListMultipartUploads<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_multipart_uploads_input::Builder,
    }
    impl<C, M, R> ListMultipartUploads<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListMultipartUploads`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListMultipartUploadsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListMultipartUploadsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListMultipartUploadsInputOperationOutputAlias,
                crate::output::ListMultipartUploadsOutput,
                crate::error::ListMultipartUploadsError,
                crate::input::ListMultipartUploadsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>Specifies the maximum number of uploads returned in the response body. If this value
        /// is not specified, the List Uploads operation returns up to 50 uploads.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        /// <p>Specifies the maximum number of uploads returned in the response body. If this value
        /// is not specified, the List Uploads operation returns up to 50 uploads.</p>
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the upload at which the
        /// listing of uploads should begin. Get the marker value from a previous List Uploads
        /// response. You need only include the marker if you are continuing the pagination of results
        /// started in a previous List Uploads request.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the upload at which the
        /// listing of uploads should begin. Get the marker value from a previous List Uploads
        /// response. You need only include the marker if you are continuing the pagination of results
        /// started in a previous List Uploads request.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListParts`.
    ///
    /// <p>This operation lists the parts of an archive that have been uploaded in a specific
    /// multipart upload. You can make this request at any time during an in-progress multipart
    /// upload before you complete the upload (see <a>CompleteMultipartUpload</a>. List
    /// Parts returns an error for completed uploads. The list returned in the List Parts response
    /// is sorted by part range. </p>
    ///
    /// <p>The List Parts operation supports pagination. By default, this operation returns up
    /// to 50 uploaded parts in the response. You should always check the response for a
    /// <code>marker</code> at which to continue the list; if there are no more items the
    /// <code>marker</code> is <code>null</code>. To return a list of parts that begins at a
    /// specific part, set the <code>marker</code> request parameter to the value you obtained from
    /// a previous List Parts request. You can also limit the number of parts returned in the
    /// response by specifying the <code>limit</code> parameter in the request. </p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and the underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-archives.html">Working
    /// with Archives in Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-multipart-list-parts.html">List Parts</a> in the
    /// <i>Amazon Glacier Developer Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListParts<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_parts_input::Builder,
    }
    impl<C, M, R> ListParts<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListParts`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListPartsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListPartsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListPartsInputOperationOutputAlias,
                crate::output::ListPartsOutput,
                crate::error::ListPartsError,
                crate::input::ListPartsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn upload_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(inp);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the part at which the
        /// listing of parts should begin. Get the marker value from the response of a previous List
        /// Parts response. You need only include the marker if you are continuing the pagination of
        /// results started in a previous List Parts request.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>An opaque string used for pagination. This value specifies the part at which the
        /// listing of parts should begin. Get the marker value from the response of a previous List
        /// Parts response. You need only include the marker if you are continuing the pagination of
        /// results started in a previous List Parts request.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
        /// <p>The maximum number of parts to be returned. The default limit is 50. The number of
        /// parts returned might be fewer than the specified limit, but the number of returned parts
        /// never exceeds the limit.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        /// <p>The maximum number of parts to be returned. The default limit is 50. The number of
        /// parts returned might be fewer than the specified limit, but the number of returned parts
        /// never exceeds the limit.</p>
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListProvisionedCapacity`.
    ///
    /// <p>This operation lists the provisioned capacity units for the specified AWS
    /// account.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListProvisionedCapacity<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_provisioned_capacity_input::Builder,
    }
    impl<C, M, R> ListProvisionedCapacity<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListProvisionedCapacity`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProvisionedCapacityOutput,
            aws_smithy_http::result::SdkError<crate::error::ListProvisionedCapacityError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListProvisionedCapacityInputOperationOutputAlias,
                crate::output::ListProvisionedCapacityOutput,
                crate::error::ListProvisionedCapacityError,
                crate::input::ListProvisionedCapacityInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The AWS account ID of the account that owns the vault. You can either specify an AWS
        /// account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS
        /// account ID associated with the credentials used to sign the request. If you use an account
        /// ID, don't include any hyphens ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The AWS account ID of the account that owns the vault. You can either specify an AWS
        /// account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS
        /// account ID associated with the credentials used to sign the request. If you use an account
        /// ID, don't include any hyphens ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForVault`.
    ///
    /// <p>This operation lists all the tags attached to a vault. The operation returns an empty
    /// map if there are no tags. For more information about tags, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html">Tagging Amazon S3 Glacier
    /// Resources</a>.</p>
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_vault_input::Builder,
    }
    impl<C, M, R> ListTagsForVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListTagsForVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForVaultInputOperationOutputAlias,
                crate::output::ListTagsForVaultOutput,
                crate::error::ListTagsForVaultError,
                crate::input::ListTagsForVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListVaults`.
    ///
    /// <p>This operation lists all vaults owned by the calling user's account. The list
    /// returned in the response is ASCII-sorted by vault name.</p>
    ///
    /// <p>By default, this operation returns up to 10 items. If there are more vaults to
    /// list, the response <code>marker</code> field contains the vault Amazon Resource Name (ARN)
    /// at which to continue the list with a new List Vaults request; otherwise, the
    /// <code>marker</code> field is <code>null</code>. To return a list of vaults that begins
    /// at a specific vault, set the <code>marker</code> request parameter to the vault ARN you
    /// obtained from a previous List Vaults request. You can also limit the number of vaults
    /// returned in the response by specifying the <code>limit</code> parameter in the request. </p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/retrieving-vault-info.html">Retrieving Vault Metadata in
    /// Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vaults-get.html">List Vaults </a> in the
    /// <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct ListVaults<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_vaults_input::Builder,
    }
    impl<C, M, R> ListVaults<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `ListVaults`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVaultsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListVaultsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListVaultsInputOperationOutputAlias,
                crate::output::ListVaultsOutput,
                crate::error::ListVaultsError,
                crate::input::ListVaultsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>A string used for pagination. The marker specifies the vault ARN after which the
        /// listing of vaults should begin.</p>
        pub fn marker(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.marker(inp);
            self
        }
        /// <p>A string used for pagination. The marker specifies the vault ARN after which the
        /// listing of vaults should begin.</p>
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_marker(input);
            self
        }
        /// <p>The maximum number of vaults to be returned. The default limit is 10. The number of
        /// vaults returned might be fewer than the specified limit, but the number of returned vaults
        /// never exceeds the limit.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        /// <p>The maximum number of vaults to be returned. The default limit is 10. The number of
        /// vaults returned might be fewer than the specified limit, but the number of returned vaults
        /// never exceeds the limit.</p>
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
    }
    /// Fluent builder constructing a request to `PurchaseProvisionedCapacity`.
    ///
    /// <p>This operation purchases a provisioned capacity unit for an AWS account. </p>
    #[derive(std::fmt::Debug)]
    pub struct PurchaseProvisionedCapacity<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::purchase_provisioned_capacity_input::Builder,
    }
    impl<C, M, R> PurchaseProvisionedCapacity<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `PurchaseProvisionedCapacity`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PurchaseProvisionedCapacityOutput,
            aws_smithy_http::result::SdkError<crate::error::PurchaseProvisionedCapacityError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PurchaseProvisionedCapacityInputOperationOutputAlias,
                crate::output::PurchaseProvisionedCapacityOutput,
                crate::error::PurchaseProvisionedCapacityError,
                crate::input::PurchaseProvisionedCapacityInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The AWS account ID of the account that owns the vault. You can either specify an AWS
        /// account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS
        /// account ID associated with the credentials used to sign the request. If you use an account
        /// ID, don't include any hyphens ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The AWS account ID of the account that owns the vault. You can either specify an AWS
        /// account ID or optionally a single '-' (hyphen), in which case Amazon S3 Glacier uses the AWS
        /// account ID associated with the credentials used to sign the request. If you use an account
        /// ID, don't include any hyphens ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RemoveTagsFromVault`.
    ///
    /// <p>This operation removes one or more tags from the set of tags attached to a vault. For
    /// more information about tags, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/tagging.html">Tagging Amazon S3 Glacier Resources</a>.
    /// This operation is idempotent. The operation will be successful, even if there are no tags
    /// attached to the vault. </p>
    #[derive(std::fmt::Debug)]
    pub struct RemoveTagsFromVault<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::remove_tags_from_vault_input::Builder,
    }
    impl<C, M, R> RemoveTagsFromVault<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `RemoveTagsFromVault`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RemoveTagsFromVaultOutput,
            aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromVaultError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RemoveTagsFromVaultInputOperationOutputAlias,
                crate::output::RemoveTagsFromVaultOutput,
                crate::error::RemoveTagsFromVaultError,
                crate::input::RemoveTagsFromVaultInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>A list of tag keys. Each corresponding tag is removed from the vault.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        /// <p>A list of tag keys. Each corresponding tag is removed from the vault.</p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SetDataRetrievalPolicy`.
    ///
    /// <p>This operation sets and then enacts a data retrieval policy in the region specified
    /// in the PUT request. You can set one policy per region for an AWS account. The policy is
    /// enacted within a few minutes of a successful PUT operation.</p>
    /// <p>The set policy operation does not affect retrieval jobs that were in progress before
    /// the policy was enacted. For more information about data retrieval policies, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/data-retrieval-policy.html">Amazon
    /// Glacier Data Retrieval Policies</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct SetDataRetrievalPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_data_retrieval_policy_input::Builder,
    }
    impl<C, M, R> SetDataRetrievalPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `SetDataRetrievalPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetDataRetrievalPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::SetDataRetrievalPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetDataRetrievalPolicyInputOperationOutputAlias,
                crate::output::SetDataRetrievalPolicyOutput,
                crate::error::SetDataRetrievalPolicyError,
                crate::input::SetDataRetrievalPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID. This value must match the AWS
        /// account ID associated with the credentials used to sign the request. You can either specify
        /// an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon
        /// Glacier uses the AWS account ID associated with the credentials used to sign the request.
        /// If you specify your account ID, do not include any hyphens ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The data retrieval policy in JSON format.</p>
        pub fn policy(mut self, inp: crate::model::DataRetrievalPolicy) -> Self {
            self.inner = self.inner.policy(inp);
            self
        }
        /// <p>The data retrieval policy in JSON format.</p>
        pub fn set_policy(
            mut self,
            input: std::option::Option<crate::model::DataRetrievalPolicy>,
        ) -> Self {
            self.inner = self.inner.set_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SetVaultAccessPolicy`.
    ///
    /// <p>This operation configures an access policy for a vault and will overwrite an existing
    /// policy. To configure a vault access policy, send a PUT request to the
    /// <code>access-policy</code> subresource of the vault. An access policy is specific to a
    /// vault and is also called a vault subresource. You can set one access policy per vault and
    /// the policy can be up to 20 KB in size. For more information about vault access policies,
    /// see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html">Amazon Glacier Access Control with Vault Access Policies</a>. </p>
    #[derive(std::fmt::Debug)]
    pub struct SetVaultAccessPolicy<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_vault_access_policy_input::Builder,
    }
    impl<C, M, R> SetVaultAccessPolicy<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `SetVaultAccessPolicy`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetVaultAccessPolicyOutput,
            aws_smithy_http::result::SdkError<crate::error::SetVaultAccessPolicyError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetVaultAccessPolicyInputOperationOutputAlias,
                crate::output::SetVaultAccessPolicyOutput,
                crate::error::SetVaultAccessPolicyError,
                crate::input::SetVaultAccessPolicyInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The vault access policy as a JSON string.</p>
        pub fn policy(mut self, inp: crate::model::VaultAccessPolicy) -> Self {
            self.inner = self.inner.policy(inp);
            self
        }
        /// <p>The vault access policy as a JSON string.</p>
        pub fn set_policy(
            mut self,
            input: std::option::Option<crate::model::VaultAccessPolicy>,
        ) -> Self {
            self.inner = self.inner.set_policy(input);
            self
        }
    }
    /// Fluent builder constructing a request to `SetVaultNotifications`.
    ///
    /// <p>This operation configures notifications that will be sent when specific events happen
    /// to a vault. By default, you don't get any notifications.</p>
    ///
    /// <p>To configure vault notifications, send a PUT request to the
    /// <code>notification-configuration</code> subresource of the vault. The request should
    /// include a JSON document that provides an Amazon SNS topic and specific events for which you
    /// want Amazon S3 Glacier to send notifications to the topic.</p>
    ///
    /// <p>Amazon SNS topics must grant permission to the vault to be allowed to publish
    /// notifications to the topic. You can configure a vault to publish a notification for the
    /// following vault events:</p>
    ///
    /// <ul>
    /// <li>
    /// <p>
    /// <b>ArchiveRetrievalCompleted</b> This event occurs when a
    /// job that was initiated for an archive retrieval is completed (<a>InitiateJob</a>). The status of the completed job can be "Succeeded" or
    /// "Failed". The notification sent to the SNS topic is the same output as returned from
    /// <a>DescribeJob</a>. </p>
    /// </li>
    /// <li>
    ///
    /// <p>
    /// <b>InventoryRetrievalCompleted</b> This event occurs when a
    /// job that was initiated for an inventory retrieval is completed (<a>InitiateJob</a>). The status of the completed job can be "Succeeded" or
    /// "Failed". The notification sent to the SNS topic is the same output as returned from
    /// <a>DescribeJob</a>. </p>
    /// </li>
    /// </ul>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p>For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/configuring-notifications.html">Configuring Vault
    /// Notifications in Amazon S3 Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-vault-notifications-put.html">Set Vault Notification
    /// Configuration </a> in the <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct SetVaultNotifications<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::set_vault_notifications_input::Builder,
    }
    impl<C, M, R> SetVaultNotifications<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `SetVaultNotifications`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetVaultNotificationsOutput,
            aws_smithy_http::result::SdkError<crate::error::SetVaultNotificationsError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::SetVaultNotificationsInputOperationOutputAlias,
                crate::output::SetVaultNotificationsOutput,
                crate::error::SetVaultNotificationsError,
                crate::input::SetVaultNotificationsInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>Provides options for specifying notification configuration.</p>
        pub fn vault_notification_config(
            mut self,
            inp: crate::model::VaultNotificationConfig,
        ) -> Self {
            self.inner = self.inner.vault_notification_config(inp);
            self
        }
        /// <p>Provides options for specifying notification configuration.</p>
        pub fn set_vault_notification_config(
            mut self,
            input: std::option::Option<crate::model::VaultNotificationConfig>,
        ) -> Self {
            self.inner = self.inner.set_vault_notification_config(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UploadArchive`.
    ///
    /// <p>This operation adds an archive to a vault. This is a synchronous operation, and for a
    /// successful upload, your data is durably persisted. Amazon S3 Glacier returns the archive ID in
    /// the <code>x-amz-archive-id</code> header of the response. </p>
    ///
    /// <p>You must use the archive ID to access your data in Amazon S3 Glacier. After you upload
    /// an archive, you should save the archive ID returned so that you can retrieve or delete the
    /// archive later. Besides saving the archive ID, you can also index it and give it a friendly
    /// name to allow for better searching. You can also use the optional archive description field
    /// to specify how the archive is referred to in an external index of archives, such as you
    /// might create in Amazon DynamoDB. You can also get the vault inventory to obtain a list of
    /// archive IDs in a vault. For more information, see <a>InitiateJob</a>. </p>
    ///
    /// <p>You must provide a SHA256 tree hash of the data you are uploading. For information
    /// about computing a SHA256 tree hash, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html">Computing Checksums</a>. </p>
    ///
    /// <p>You can optionally specify an archive description of up to 1,024 printable ASCII
    /// characters. You can get the archive description when you either retrieve the archive or get
    /// the vault inventory. For more information, see <a>InitiateJob</a>. Amazon
    /// Glacier does not interpret the description in any way. An archive description does not need
    /// to be unique. You cannot use the description to retrieve or sort the archive list. </p>
    ///
    /// <p>Archives are immutable. After you upload an archive, you cannot edit the archive or
    /// its description.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-an-archive.html">Uploading an Archive in Amazon
    /// Glacier</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-archive-post.html">Upload Archive</a> in the
    /// <i>Amazon Glacier Developer Guide</i>. </p>
    #[derive(std::fmt::Debug)]
    pub struct UploadArchive<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::upload_archive_input::Builder,
    }
    impl<C, M, R> UploadArchive<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UploadArchive`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UploadArchiveOutput,
            aws_smithy_http::result::SdkError<crate::error::UploadArchiveError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UploadArchiveInputOperationOutputAlias,
                crate::output::UploadArchiveOutput,
                crate::error::UploadArchiveError,
                crate::input::UploadArchiveInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The optional description of the archive you are uploading.</p>
        pub fn archive_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.archive_description(inp);
            self
        }
        /// <p>The optional description of the archive you are uploading.</p>
        pub fn set_archive_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_archive_description(input);
            self
        }
        /// <p>The SHA256 tree hash of the data being uploaded.</p>
        pub fn checksum(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.checksum(inp);
            self
        }
        /// <p>The SHA256 tree hash of the data being uploaded.</p>
        pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_checksum(input);
            self
        }
        /// <p>The data to upload.</p>
        pub fn body(mut self, inp: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.body(inp);
            self
        }
        /// <p>The data to upload.</p>
        pub fn set_body(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_body(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UploadMultipartPart`.
    ///
    /// <p>This operation uploads a part of an archive. You can upload archive parts in any
    /// order. You can also upload them in parallel. You can upload up to 10,000 parts for a
    /// multipart upload.</p>
    ///
    /// <p>Amazon Glacier rejects your upload part request if any of the following conditions is
    /// true:</p>
    ///
    /// <ul>
    /// <li>
    /// <p>
    /// <b>SHA256 tree hash does not match</b>To ensure that part
    /// data is not corrupted in transmission, you compute a SHA256 tree hash of the part and
    /// include it in your request. Upon receiving the part data, Amazon S3 Glacier also
    /// computes a SHA256 tree hash. If these hash values don't match, the operation fails.
    /// For information about computing a SHA256 tree hash, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/checksum-calculations.html">Computing
    /// Checksums</a>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <b>Part size does not match</b>The size of each part except
    /// the last must match the size specified in the corresponding <a>InitiateMultipartUpload</a> request. The size of the last part must be the
    /// same size as, or smaller than, the specified size.</p>
    /// <note>
    /// <p>If you upload a part whose size is smaller than the part size you specified
    /// in your initiate multipart upload request and that part is not the last part, then
    /// the upload part request will succeed. However, the subsequent Complete Multipart
    /// Upload request will fail.</p>
    /// </note>
    /// </li>
    /// <li>
    /// <p>
    /// <b>Range does not align</b>The byte range value in the
    /// request does not align with the part size specified in the corresponding initiate
    /// request. For example, if you specify a part size of 4194304 bytes (4 MB), then 0 to
    /// 4194303 bytes (4 MB - 1) and 4194304 (4 MB) to 8388607 (8 MB - 1) are valid part
    /// ranges. However, if you set a range value of 2 MB to 6 MB, the range does not align
    /// with the part size and the upload will fail. </p>
    /// </li>
    /// </ul>
    ///
    /// <p>This operation is idempotent. If you upload the same part multiple times, the data
    /// included in the most recent request overwrites the previously uploaded data.</p>
    ///
    /// <p>An AWS account has full permission to perform all operations (actions). However, AWS
    /// Identity and Access Management (IAM) users don't have any permissions by default. You must
    /// grant them explicit permission to perform specific actions. For more information, see
    /// <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/using-iam-with-amazon-glacier.html">Access Control Using
    /// AWS Identity and Access Management (IAM)</a>.</p>
    /// <p> For conceptual information and underlying REST API, see <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/uploading-archive-mpu.html">Uploading Large Archives in
    /// Parts (Multipart Upload)</a> and <a href="https://docs.aws.amazon.com/amazonglacier/latest/dev/api-upload-part.html">Upload Part </a> in the
    /// <i>Amazon Glacier Developer Guide</i>.</p>
    #[derive(std::fmt::Debug)]
    pub struct UploadMultipartPart<
        C = aws_smithy_client::erase::DynConnector,
        M = crate::middleware::DefaultMiddleware,
        R = aws_smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::upload_multipart_part_input::Builder,
    }
    impl<C, M, R> UploadMultipartPart<C, M, R>
    where
        C: aws_smithy_client::bounds::SmithyConnector,
        M: aws_smithy_client::bounds::SmithyMiddleware<C>,
        R: aws_smithy_client::retry::NewRequestPolicy,
    {
        /// Creates a new `UploadMultipartPart`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UploadMultipartPartOutput,
            aws_smithy_http::result::SdkError<crate::error::UploadMultipartPartError>,
        >
        where
            R::Policy: aws_smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UploadMultipartPartInputOperationOutputAlias,
                crate::output::UploadMultipartPartOutput,
                crate::error::UploadMultipartPartError,
                crate::input::UploadMultipartPartInputOperationRetryAlias,
            >,
        {
            let input = self.inner.build().map_err(|err| {
                aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
            })?;
            let op = input
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the
        /// vault. You can either specify an AWS account ID or optionally a single '<code>-</code>'
        /// (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the
        /// credentials used to sign the request. If you use an account ID, do not include any hyphens
        /// ('-') in the ID. </p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn vault_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vault_name(inp);
            self
        }
        /// <p>The name of the vault.</p>
        pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_vault_name(input);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn upload_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.upload_id(inp);
            self
        }
        /// <p>The upload ID of the multipart upload.</p>
        pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_upload_id(input);
            self
        }
        /// <p>The SHA256 tree hash of the data being uploaded.</p>
        pub fn checksum(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.checksum(inp);
            self
        }
        /// <p>The SHA256 tree hash of the data being uploaded.</p>
        pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_checksum(input);
            self
        }
        /// <p>Identifies the range of bytes in the assembled archive that will be uploaded in this
        /// part. Amazon S3 Glacier uses this information to assemble the archive in the proper sequence.
        /// The format of this header follows RFC 2616. An example header is Content-Range:bytes
        /// 0-4194303/*.</p>
        pub fn range(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.range(inp);
            self
        }
        /// <p>Identifies the range of bytes in the assembled archive that will be uploaded in this
        /// part. Amazon S3 Glacier uses this information to assemble the archive in the proper sequence.
        /// The format of this header follows RFC 2616. An example header is Content-Range:bytes
        /// 0-4194303/*.</p>
        pub fn set_range(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_range(input);
            self
        }
        /// <p>The data to upload.</p>
        pub fn body(mut self, inp: aws_smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.body(inp);
            self
        }
        /// <p>The data to upload.</p>
        pub fn set_body(
            mut self,
            input: std::option::Option<aws_smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_body(input);
            self
        }
    }
}
impl<C> Client<C, crate::middleware::DefaultMiddleware, aws_smithy_client::retry::Standard> {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(conn)
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        aws_smithy_client::erase::DynConnector,
        crate::middleware::DefaultMiddleware,
        aws_smithy_client::retry::Standard,
    >
{
    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https()
            .middleware(crate::middleware::DefaultMiddleware::new());
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
