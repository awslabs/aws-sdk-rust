// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_change_message_visibility_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::ChangeMessageVisibilityBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Id");
    if let Some(var_2) = &input.id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("ReceiptHandle");
    if let Some(var_4) = &input.receipt_handle {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("VisibilityTimeout");
    if input.visibility_timeout != 0 {
        scope_5.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.visibility_timeout).into()),
        );
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_delete_message_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::DeleteMessageBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_6 = writer.prefix("Id");
    if let Some(var_7) = &input.id {
        scope_6.string(var_7);
    }
    #[allow(unused_mut)]
    let mut scope_8 = writer.prefix("ReceiptHandle");
    if let Some(var_9) = &input.receipt_handle {
        scope_8.string(var_9);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_message_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MessageAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("StringValue");
    if let Some(var_11) = &input.string_value {
        scope_10.string(var_11);
    }
    #[allow(unused_mut)]
    let mut scope_12 = writer.prefix("BinaryValue");
    if let Some(var_13) = &input.binary_value {
        scope_12.string(&aws_smithy_types::base64::encode(var_13));
    }
    #[allow(unused_mut)]
    let mut scope_14 = writer.prefix("StringListValue");
    if let Some(var_15) = &input.string_list_values {
        let mut list_17 = scope_14.start_list(true, Some("StringListValue"));
        for item_16 in var_15 {
            #[allow(unused_mut)]
            let mut entry_18 = list_17.entry();
            entry_18.string(item_16);
        }
        list_17.finish();
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("BinaryListValue");
    if let Some(var_20) = &input.binary_list_values {
        let mut list_22 = scope_19.start_list(true, Some("BinaryListValue"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            entry_23.string(&aws_smithy_types::base64::encode(item_21));
        }
        list_22.finish();
    }
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("DataType");
    if let Some(var_25) = &input.data_type {
        scope_24.string(var_25);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_message_system_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MessageSystemAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("StringValue");
    if let Some(var_27) = &input.string_value {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("BinaryValue");
    if let Some(var_29) = &input.binary_value {
        scope_28.string(&aws_smithy_types::base64::encode(var_29));
    }
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("StringListValue");
    if let Some(var_31) = &input.string_list_values {
        let mut list_33 = scope_30.start_list(true, Some("StringListValue"));
        for item_32 in var_31 {
            #[allow(unused_mut)]
            let mut entry_34 = list_33.entry();
            entry_34.string(item_32);
        }
        list_33.finish();
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("BinaryListValue");
    if let Some(var_36) = &input.binary_list_values {
        let mut list_38 = scope_35.start_list(true, Some("BinaryListValue"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            entry_39.string(&aws_smithy_types::base64::encode(item_37));
        }
        list_38.finish();
    }
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("DataType");
    if let Some(var_41) = &input.data_type {
        scope_40.string(var_41);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_send_message_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::SendMessageBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("Id");
    if let Some(var_43) = &input.id {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("MessageBody");
    if let Some(var_45) = &input.message_body {
        scope_44.string(var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("DelaySeconds");
    if input.delay_seconds != 0 {
        scope_46.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.delay_seconds).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("MessageAttribute");
    if let Some(var_48) = &input.message_attributes {
        let mut map_49 = scope_47.start_map(true, "Name", "Value");
        for (key_50, value_51) in var_48 {
            #[allow(unused_mut)]
            let mut entry_52 = map_49.entry(key_50);
            {
                crate::query_ser::serialize_structure_crate_model_message_attribute_value(
                    entry_52, value_51,
                )?;
            }
        }
        map_49.finish();
    }
    #[allow(unused_mut)]
    let mut scope_53 = writer.prefix("MessageSystemAttribute");
    if let Some(var_54) = &input.message_system_attributes {
        let mut map_55 = scope_53.start_map(true, "Name", "Value");
        for (key_56, value_57) in var_54 {
            #[allow(unused_mut)]
            let mut entry_58 = map_55.entry(key_56.as_str());
            {
                crate::query_ser::serialize_structure_crate_model_message_system_attribute_value(
                    entry_58, value_57,
                )?;
            }
        }
        map_55.finish();
    }
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("MessageDeduplicationId");
    if let Some(var_60) = &input.message_deduplication_id {
        scope_59.string(var_60);
    }
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("MessageGroupId");
    if let Some(var_62) = &input.message_group_id {
        scope_61.string(var_62);
    }
    Ok(())
}
