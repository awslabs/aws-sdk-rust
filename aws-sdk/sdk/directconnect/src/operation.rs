// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AcceptDirectConnectGatewayAssociationProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`accept_direct_connect_gateway_association_proposal`](crate::client::Client::accept_direct_connect_gateway_association_proposal).
///
/// See [`crate::client::fluent_builders::AcceptDirectConnectGatewayAssociationProposal`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl AcceptDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`AcceptDirectConnectGatewayAssociationProposalInput`](crate::input::AcceptDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::accept_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::accept_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    /// Creates a new `AcceptDirectConnectGatewayAssociationProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for AcceptDirectConnectGatewayAssociationProposal
{
    type Output = std::result::Result<
        crate::output::AcceptDirectConnectGatewayAssociationProposalOutput,
        crate::error::AcceptDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_accept_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// Operation shape for `AllocateConnectionOnInterconnect`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`allocate_connection_on_interconnect`](crate::client::Client::allocate_connection_on_interconnect).
///
/// See [`crate::client::fluent_builders::AllocateConnectionOnInterconnect`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateConnectionOnInterconnect {
    _private: (),
}
impl AllocateConnectionOnInterconnect {
    /// Creates a new builder-style object to manufacture [`AllocateConnectionOnInterconnectInput`](crate::input::AllocateConnectionOnInterconnectInput)
    pub fn builder() -> crate::input::allocate_connection_on_interconnect_input::Builder {
        crate::input::allocate_connection_on_interconnect_input::Builder::default()
    }
    /// Creates a new `AllocateConnectionOnInterconnect` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AllocateConnectionOnInterconnect {
    type Output = std::result::Result<
        crate::output::AllocateConnectionOnInterconnectOutput,
        crate::error::AllocateConnectionOnInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_connection_on_interconnect_error(response)
        } else {
            crate::operation_deser::parse_allocate_connection_on_interconnect_response(response)
        }
    }
}

/// Operation shape for `AllocateHostedConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`allocate_hosted_connection`](crate::client::Client::allocate_hosted_connection).
///
/// See [`crate::client::fluent_builders::AllocateHostedConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateHostedConnection {
    _private: (),
}
impl AllocateHostedConnection {
    /// Creates a new builder-style object to manufacture [`AllocateHostedConnectionInput`](crate::input::AllocateHostedConnectionInput)
    pub fn builder() -> crate::input::allocate_hosted_connection_input::Builder {
        crate::input::allocate_hosted_connection_input::Builder::default()
    }
    /// Creates a new `AllocateHostedConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AllocateHostedConnection {
    type Output = std::result::Result<
        crate::output::AllocateHostedConnectionOutput,
        crate::error::AllocateHostedConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_hosted_connection_error(response)
        } else {
            crate::operation_deser::parse_allocate_hosted_connection_response(response)
        }
    }
}

/// Operation shape for `AllocatePrivateVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`allocate_private_virtual_interface`](crate::client::Client::allocate_private_virtual_interface).
///
/// See [`crate::client::fluent_builders::AllocatePrivateVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocatePrivateVirtualInterface {
    _private: (),
}
impl AllocatePrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocatePrivateVirtualInterfaceInput`](crate::input::AllocatePrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_private_virtual_interface_input::Builder {
        crate::input::allocate_private_virtual_interface_input::Builder::default()
    }
    /// Creates a new `AllocatePrivateVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AllocatePrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocatePrivateVirtualInterfaceOutput,
        crate::error::AllocatePrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_private_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `AllocatePublicVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`allocate_public_virtual_interface`](crate::client::Client::allocate_public_virtual_interface).
///
/// See [`crate::client::fluent_builders::AllocatePublicVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocatePublicVirtualInterface {
    _private: (),
}
impl AllocatePublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocatePublicVirtualInterfaceInput`](crate::input::AllocatePublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_public_virtual_interface_input::Builder {
        crate::input::allocate_public_virtual_interface_input::Builder::default()
    }
    /// Creates a new `AllocatePublicVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AllocatePublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocatePublicVirtualInterfaceOutput,
        crate::error::AllocatePublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_public_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `AllocateTransitVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`allocate_transit_virtual_interface`](crate::client::Client::allocate_transit_virtual_interface).
///
/// See [`crate::client::fluent_builders::AllocateTransitVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateTransitVirtualInterface {
    _private: (),
}
impl AllocateTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocateTransitVirtualInterfaceInput`](crate::input::AllocateTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_transit_virtual_interface_input::Builder {
        crate::input::allocate_transit_virtual_interface_input::Builder::default()
    }
    /// Creates a new `AllocateTransitVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AllocateTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocateTransitVirtualInterfaceOutput,
        crate::error::AllocateTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_transit_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `AssociateConnectionWithLag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_connection_with_lag`](crate::client::Client::associate_connection_with_lag).
///
/// See [`crate::client::fluent_builders::AssociateConnectionWithLag`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateConnectionWithLag {
    _private: (),
}
impl AssociateConnectionWithLag {
    /// Creates a new builder-style object to manufacture [`AssociateConnectionWithLagInput`](crate::input::AssociateConnectionWithLagInput)
    pub fn builder() -> crate::input::associate_connection_with_lag_input::Builder {
        crate::input::associate_connection_with_lag_input::Builder::default()
    }
    /// Creates a new `AssociateConnectionWithLag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateConnectionWithLag {
    type Output = std::result::Result<
        crate::output::AssociateConnectionWithLagOutput,
        crate::error::AssociateConnectionWithLagError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_connection_with_lag_error(response)
        } else {
            crate::operation_deser::parse_associate_connection_with_lag_response(response)
        }
    }
}

/// Operation shape for `AssociateHostedConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_hosted_connection`](crate::client::Client::associate_hosted_connection).
///
/// See [`crate::client::fluent_builders::AssociateHostedConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateHostedConnection {
    _private: (),
}
impl AssociateHostedConnection {
    /// Creates a new builder-style object to manufacture [`AssociateHostedConnectionInput`](crate::input::AssociateHostedConnectionInput)
    pub fn builder() -> crate::input::associate_hosted_connection_input::Builder {
        crate::input::associate_hosted_connection_input::Builder::default()
    }
    /// Creates a new `AssociateHostedConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateHostedConnection {
    type Output = std::result::Result<
        crate::output::AssociateHostedConnectionOutput,
        crate::error::AssociateHostedConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_hosted_connection_error(response)
        } else {
            crate::operation_deser::parse_associate_hosted_connection_response(response)
        }
    }
}

/// Operation shape for `AssociateMacSecKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_mac_sec_key`](crate::client::Client::associate_mac_sec_key).
///
/// See [`crate::client::fluent_builders::AssociateMacSecKey`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateMacSecKey {
    _private: (),
}
impl AssociateMacSecKey {
    /// Creates a new builder-style object to manufacture [`AssociateMacSecKeyInput`](crate::input::AssociateMacSecKeyInput)
    pub fn builder() -> crate::input::associate_mac_sec_key_input::Builder {
        crate::input::associate_mac_sec_key_input::Builder::default()
    }
    /// Creates a new `AssociateMacSecKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateMacSecKey {
    type Output = std::result::Result<
        crate::output::AssociateMacSecKeyOutput,
        crate::error::AssociateMacSecKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_mac_sec_key_error(response)
        } else {
            crate::operation_deser::parse_associate_mac_sec_key_response(response)
        }
    }
}

/// Operation shape for `AssociateVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_virtual_interface`](crate::client::Client::associate_virtual_interface).
///
/// See [`crate::client::fluent_builders::AssociateVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateVirtualInterface {
    _private: (),
}
impl AssociateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AssociateVirtualInterfaceInput`](crate::input::AssociateVirtualInterfaceInput)
    pub fn builder() -> crate::input::associate_virtual_interface_input::Builder {
        crate::input::associate_virtual_interface_input::Builder::default()
    }
    /// Creates a new `AssociateVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateVirtualInterface {
    type Output = std::result::Result<
        crate::output::AssociateVirtualInterfaceOutput,
        crate::error::AssociateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_associate_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `ConfirmConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`confirm_connection`](crate::client::Client::confirm_connection).
///
/// See [`crate::client::fluent_builders::ConfirmConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmConnection {
    _private: (),
}
impl ConfirmConnection {
    /// Creates a new builder-style object to manufacture [`ConfirmConnectionInput`](crate::input::ConfirmConnectionInput)
    pub fn builder() -> crate::input::confirm_connection_input::Builder {
        crate::input::confirm_connection_input::Builder::default()
    }
    /// Creates a new `ConfirmConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfirmConnection {
    type Output = std::result::Result<
        crate::output::ConfirmConnectionOutput,
        crate::error::ConfirmConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_connection_error(response)
        } else {
            crate::operation_deser::parse_confirm_connection_response(response)
        }
    }
}

/// Operation shape for `ConfirmCustomerAgreement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`confirm_customer_agreement`](crate::client::Client::confirm_customer_agreement).
///
/// See [`crate::client::fluent_builders::ConfirmCustomerAgreement`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmCustomerAgreement {
    _private: (),
}
impl ConfirmCustomerAgreement {
    /// Creates a new builder-style object to manufacture [`ConfirmCustomerAgreementInput`](crate::input::ConfirmCustomerAgreementInput)
    pub fn builder() -> crate::input::confirm_customer_agreement_input::Builder {
        crate::input::confirm_customer_agreement_input::Builder::default()
    }
    /// Creates a new `ConfirmCustomerAgreement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfirmCustomerAgreement {
    type Output = std::result::Result<
        crate::output::ConfirmCustomerAgreementOutput,
        crate::error::ConfirmCustomerAgreementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_customer_agreement_error(response)
        } else {
            crate::operation_deser::parse_confirm_customer_agreement_response(response)
        }
    }
}

/// Operation shape for `ConfirmPrivateVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`confirm_private_virtual_interface`](crate::client::Client::confirm_private_virtual_interface).
///
/// See [`crate::client::fluent_builders::ConfirmPrivateVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmPrivateVirtualInterface {
    _private: (),
}
impl ConfirmPrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmPrivateVirtualInterfaceInput`](crate::input::ConfirmPrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_private_virtual_interface_input::Builder {
        crate::input::confirm_private_virtual_interface_input::Builder::default()
    }
    /// Creates a new `ConfirmPrivateVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfirmPrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmPrivateVirtualInterfaceOutput,
        crate::error::ConfirmPrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_private_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `ConfirmPublicVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`confirm_public_virtual_interface`](crate::client::Client::confirm_public_virtual_interface).
///
/// See [`crate::client::fluent_builders::ConfirmPublicVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmPublicVirtualInterface {
    _private: (),
}
impl ConfirmPublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmPublicVirtualInterfaceInput`](crate::input::ConfirmPublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_public_virtual_interface_input::Builder {
        crate::input::confirm_public_virtual_interface_input::Builder::default()
    }
    /// Creates a new `ConfirmPublicVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfirmPublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmPublicVirtualInterfaceOutput,
        crate::error::ConfirmPublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_public_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `ConfirmTransitVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`confirm_transit_virtual_interface`](crate::client::Client::confirm_transit_virtual_interface).
///
/// See [`crate::client::fluent_builders::ConfirmTransitVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmTransitVirtualInterface {
    _private: (),
}
impl ConfirmTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmTransitVirtualInterfaceInput`](crate::input::ConfirmTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_transit_virtual_interface_input::Builder {
        crate::input::confirm_transit_virtual_interface_input::Builder::default()
    }
    /// Creates a new `ConfirmTransitVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ConfirmTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmTransitVirtualInterfaceOutput,
        crate::error::ConfirmTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_transit_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `CreateBGPPeer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_bgp_peer`](crate::client::Client::create_bgp_peer).
///
/// See [`crate::client::fluent_builders::CreateBGPPeer`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBGPPeer {
    _private: (),
}
impl CreateBGPPeer {
    /// Creates a new builder-style object to manufacture [`CreateBgpPeerInput`](crate::input::CreateBgpPeerInput)
    pub fn builder() -> crate::input::create_bgp_peer_input::Builder {
        crate::input::create_bgp_peer_input::Builder::default()
    }
    /// Creates a new `CreateBGPPeer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateBGPPeer {
    type Output =
        std::result::Result<crate::output::CreateBgpPeerOutput, crate::error::CreateBGPPeerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_bgp_peer_error(response)
        } else {
            crate::operation_deser::parse_create_bgp_peer_response(response)
        }
    }
}

/// Operation shape for `CreateConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_connection`](crate::client::Client::create_connection).
///
/// See [`crate::client::fluent_builders::CreateConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnection {
    _private: (),
}
impl CreateConnection {
    /// Creates a new builder-style object to manufacture [`CreateConnectionInput`](crate::input::CreateConnectionInput)
    pub fn builder() -> crate::input::create_connection_input::Builder {
        crate::input::create_connection_input::Builder::default()
    }
    /// Creates a new `CreateConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateConnection {
    type Output = std::result::Result<
        crate::output::CreateConnectionOutput,
        crate::error::CreateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_connection_error(response)
        } else {
            crate::operation_deser::parse_create_connection_response(response)
        }
    }
}

/// Operation shape for `CreateDirectConnectGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_direct_connect_gateway`](crate::client::Client::create_direct_connect_gateway).
///
/// See [`crate::client::fluent_builders::CreateDirectConnectGateway`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGateway {
    _private: (),
}
impl CreateDirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayInput`](crate::input::CreateDirectConnectGatewayInput)
    pub fn builder() -> crate::input::create_direct_connect_gateway_input::Builder {
        crate::input::create_direct_connect_gateway_input::Builder::default()
    }
    /// Creates a new `CreateDirectConnectGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDirectConnectGateway {
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayOutput,
        crate::error::CreateDirectConnectGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_response(response)
        }
    }
}

/// Operation shape for `CreateDirectConnectGatewayAssociation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_direct_connect_gateway_association`](crate::client::Client::create_direct_connect_gateway_association).
///
/// See [`crate::client::fluent_builders::CreateDirectConnectGatewayAssociation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGatewayAssociation {
    _private: (),
}
impl CreateDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayAssociationInput`](crate::input::CreateDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::create_direct_connect_gateway_association_input::Builder {
        crate::input::create_direct_connect_gateway_association_input::Builder::default()
    }
    /// Creates a new `CreateDirectConnectGatewayAssociation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayAssociationOutput,
        crate::error::CreateDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateDirectConnectGatewayAssociationProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_direct_connect_gateway_association_proposal`](crate::client::Client::create_direct_connect_gateway_association_proposal).
///
/// See [`crate::client::fluent_builders::CreateDirectConnectGatewayAssociationProposal`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl CreateDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayAssociationProposalInput`](crate::input::CreateDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::create_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::create_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    /// Creates a new `CreateDirectConnectGatewayAssociationProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for CreateDirectConnectGatewayAssociationProposal
{
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayAssociationProposalOutput,
        crate::error::CreateDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// Operation shape for `CreateInterconnect`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_interconnect`](crate::client::Client::create_interconnect).
///
/// See [`crate::client::fluent_builders::CreateInterconnect`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInterconnect {
    _private: (),
}
impl CreateInterconnect {
    /// Creates a new builder-style object to manufacture [`CreateInterconnectInput`](crate::input::CreateInterconnectInput)
    pub fn builder() -> crate::input::create_interconnect_input::Builder {
        crate::input::create_interconnect_input::Builder::default()
    }
    /// Creates a new `CreateInterconnect` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateInterconnect {
    type Output = std::result::Result<
        crate::output::CreateInterconnectOutput,
        crate::error::CreateInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_interconnect_error(response)
        } else {
            crate::operation_deser::parse_create_interconnect_response(response)
        }
    }
}

/// Operation shape for `CreateLag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_lag`](crate::client::Client::create_lag).
///
/// See [`crate::client::fluent_builders::CreateLag`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLag {
    _private: (),
}
impl CreateLag {
    /// Creates a new builder-style object to manufacture [`CreateLagInput`](crate::input::CreateLagInput)
    pub fn builder() -> crate::input::create_lag_input::Builder {
        crate::input::create_lag_input::Builder::default()
    }
    /// Creates a new `CreateLag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLag {
    type Output = std::result::Result<crate::output::CreateLagOutput, crate::error::CreateLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_lag_error(response)
        } else {
            crate::operation_deser::parse_create_lag_response(response)
        }
    }
}

/// Operation shape for `CreatePrivateVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_private_virtual_interface`](crate::client::Client::create_private_virtual_interface).
///
/// See [`crate::client::fluent_builders::CreatePrivateVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePrivateVirtualInterface {
    _private: (),
}
impl CreatePrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreatePrivateVirtualInterfaceInput`](crate::input::CreatePrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_private_virtual_interface_input::Builder {
        crate::input::create_private_virtual_interface_input::Builder::default()
    }
    /// Creates a new `CreatePrivateVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreatePrivateVirtualInterfaceOutput,
        crate::error::CreatePrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_private_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `CreatePublicVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_public_virtual_interface`](crate::client::Client::create_public_virtual_interface).
///
/// See [`crate::client::fluent_builders::CreatePublicVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePublicVirtualInterface {
    _private: (),
}
impl CreatePublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreatePublicVirtualInterfaceInput`](crate::input::CreatePublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_public_virtual_interface_input::Builder {
        crate::input::create_public_virtual_interface_input::Builder::default()
    }
    /// Creates a new `CreatePublicVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreatePublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreatePublicVirtualInterfaceOutput,
        crate::error::CreatePublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_public_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `CreateTransitVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_transit_virtual_interface`](crate::client::Client::create_transit_virtual_interface).
///
/// See [`crate::client::fluent_builders::CreateTransitVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitVirtualInterface {
    _private: (),
}
impl CreateTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreateTransitVirtualInterfaceInput`](crate::input::CreateTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_transit_virtual_interface_input::Builder {
        crate::input::create_transit_virtual_interface_input::Builder::default()
    }
    /// Creates a new `CreateTransitVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreateTransitVirtualInterfaceOutput,
        crate::error::CreateTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_transit_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `DeleteBGPPeer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_bgp_peer`](crate::client::Client::delete_bgp_peer).
///
/// See [`crate::client::fluent_builders::DeleteBGPPeer`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBGPPeer {
    _private: (),
}
impl DeleteBGPPeer {
    /// Creates a new builder-style object to manufacture [`DeleteBgpPeerInput`](crate::input::DeleteBgpPeerInput)
    pub fn builder() -> crate::input::delete_bgp_peer_input::Builder {
        crate::input::delete_bgp_peer_input::Builder::default()
    }
    /// Creates a new `DeleteBGPPeer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteBGPPeer {
    type Output =
        std::result::Result<crate::output::DeleteBgpPeerOutput, crate::error::DeleteBGPPeerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_bgp_peer_error(response)
        } else {
            crate::operation_deser::parse_delete_bgp_peer_response(response)
        }
    }
}

/// Operation shape for `DeleteConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_connection`](crate::client::Client::delete_connection).
///
/// See [`crate::client::fluent_builders::DeleteConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnection {
    _private: (),
}
impl DeleteConnection {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionInput`](crate::input::DeleteConnectionInput)
    pub fn builder() -> crate::input::delete_connection_input::Builder {
        crate::input::delete_connection_input::Builder::default()
    }
    /// Creates a new `DeleteConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteConnection {
    type Output = std::result::Result<
        crate::output::DeleteConnectionOutput,
        crate::error::DeleteConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_connection_response(response)
        }
    }
}

/// Operation shape for `DeleteDirectConnectGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_direct_connect_gateway`](crate::client::Client::delete_direct_connect_gateway).
///
/// See [`crate::client::fluent_builders::DeleteDirectConnectGateway`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGateway {
    _private: (),
}
impl DeleteDirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayInput`](crate::input::DeleteDirectConnectGatewayInput)
    pub fn builder() -> crate::input::delete_direct_connect_gateway_input::Builder {
        crate::input::delete_direct_connect_gateway_input::Builder::default()
    }
    /// Creates a new `DeleteDirectConnectGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDirectConnectGateway {
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayOutput,
        crate::error::DeleteDirectConnectGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_response(response)
        }
    }
}

/// Operation shape for `DeleteDirectConnectGatewayAssociation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_direct_connect_gateway_association`](crate::client::Client::delete_direct_connect_gateway_association).
///
/// See [`crate::client::fluent_builders::DeleteDirectConnectGatewayAssociation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGatewayAssociation {
    _private: (),
}
impl DeleteDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayAssociationInput`](crate::input::DeleteDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::delete_direct_connect_gateway_association_input::Builder {
        crate::input::delete_direct_connect_gateway_association_input::Builder::default()
    }
    /// Creates a new `DeleteDirectConnectGatewayAssociation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayAssociationOutput,
        crate::error::DeleteDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteDirectConnectGatewayAssociationProposal`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_direct_connect_gateway_association_proposal`](crate::client::Client::delete_direct_connect_gateway_association_proposal).
///
/// See [`crate::client::fluent_builders::DeleteDirectConnectGatewayAssociationProposal`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl DeleteDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayAssociationProposalInput`](crate::input::DeleteDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::delete_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::delete_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    /// Creates a new `DeleteDirectConnectGatewayAssociationProposal` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DeleteDirectConnectGatewayAssociationProposal
{
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayAssociationProposalOutput,
        crate::error::DeleteDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// Operation shape for `DeleteInterconnect`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_interconnect`](crate::client::Client::delete_interconnect).
///
/// See [`crate::client::fluent_builders::DeleteInterconnect`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInterconnect {
    _private: (),
}
impl DeleteInterconnect {
    /// Creates a new builder-style object to manufacture [`DeleteInterconnectInput`](crate::input::DeleteInterconnectInput)
    pub fn builder() -> crate::input::delete_interconnect_input::Builder {
        crate::input::delete_interconnect_input::Builder::default()
    }
    /// Creates a new `DeleteInterconnect` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteInterconnect {
    type Output = std::result::Result<
        crate::output::DeleteInterconnectOutput,
        crate::error::DeleteInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_interconnect_error(response)
        } else {
            crate::operation_deser::parse_delete_interconnect_response(response)
        }
    }
}

/// Operation shape for `DeleteLag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_lag`](crate::client::Client::delete_lag).
///
/// See [`crate::client::fluent_builders::DeleteLag`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLag {
    _private: (),
}
impl DeleteLag {
    /// Creates a new builder-style object to manufacture [`DeleteLagInput`](crate::input::DeleteLagInput)
    pub fn builder() -> crate::input::delete_lag_input::Builder {
        crate::input::delete_lag_input::Builder::default()
    }
    /// Creates a new `DeleteLag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLag {
    type Output = std::result::Result<crate::output::DeleteLagOutput, crate::error::DeleteLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_lag_error(response)
        } else {
            crate::operation_deser::parse_delete_lag_response(response)
        }
    }
}

/// Operation shape for `DeleteVirtualInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_virtual_interface`](crate::client::Client::delete_virtual_interface).
///
/// See [`crate::client::fluent_builders::DeleteVirtualInterface`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualInterface {
    _private: (),
}
impl DeleteVirtualInterface {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualInterfaceInput`](crate::input::DeleteVirtualInterfaceInput)
    pub fn builder() -> crate::input::delete_virtual_interface_input::Builder {
        crate::input::delete_virtual_interface_input::Builder::default()
    }
    /// Creates a new `DeleteVirtualInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVirtualInterface {
    type Output = std::result::Result<
        crate::output::DeleteVirtualInterfaceOutput,
        crate::error::DeleteVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_interface_response(response)
        }
    }
}

/// Operation shape for `DescribeConnectionLoa`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_connection_loa`](crate::client::Client::describe_connection_loa).
///
/// See [`crate::client::fluent_builders::DescribeConnectionLoa`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectionLoa {
    _private: (),
}
impl DescribeConnectionLoa {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionLoaInput`](crate::input::DescribeConnectionLoaInput)
    pub fn builder() -> crate::input::describe_connection_loa_input::Builder {
        crate::input::describe_connection_loa_input::Builder::default()
    }
    /// Creates a new `DescribeConnectionLoa` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeConnectionLoa {
    type Output = std::result::Result<
        crate::output::DescribeConnectionLoaOutput,
        crate::error::DescribeConnectionLoaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connection_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_connection_loa_response(response)
        }
    }
}

/// Operation shape for `DescribeConnections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_connections`](crate::client::Client::describe_connections).
///
/// See [`crate::client::fluent_builders::DescribeConnections`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnections {
    _private: (),
}
impl DescribeConnections {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsInput`](crate::input::DescribeConnectionsInput)
    pub fn builder() -> crate::input::describe_connections_input::Builder {
        crate::input::describe_connections_input::Builder::default()
    }
    /// Creates a new `DescribeConnections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeConnections {
    type Output = std::result::Result<
        crate::output::DescribeConnectionsOutput,
        crate::error::DescribeConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_connections_response(response)
        }
    }
}

/// Operation shape for `DescribeConnectionsOnInterconnect`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_connections_on_interconnect`](crate::client::Client::describe_connections_on_interconnect).
///
/// See [`crate::client::fluent_builders::DescribeConnectionsOnInterconnect`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectionsOnInterconnect {
    _private: (),
}
impl DescribeConnectionsOnInterconnect {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsOnInterconnectInput`](crate::input::DescribeConnectionsOnInterconnectInput)
    pub fn builder() -> crate::input::describe_connections_on_interconnect_input::Builder {
        crate::input::describe_connections_on_interconnect_input::Builder::default()
    }
    /// Creates a new `DescribeConnectionsOnInterconnect` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeConnectionsOnInterconnect {
    type Output = std::result::Result<
        crate::output::DescribeConnectionsOnInterconnectOutput,
        crate::error::DescribeConnectionsOnInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connections_on_interconnect_error(response)
        } else {
            crate::operation_deser::parse_describe_connections_on_interconnect_response(response)
        }
    }
}

/// Operation shape for `DescribeCustomerMetadata`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_customer_metadata`](crate::client::Client::describe_customer_metadata).
///
/// See [`crate::client::fluent_builders::DescribeCustomerMetadata`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCustomerMetadata {
    _private: (),
}
impl DescribeCustomerMetadata {
    /// Creates a new builder-style object to manufacture [`DescribeCustomerMetadataInput`](crate::input::DescribeCustomerMetadataInput)
    pub fn builder() -> crate::input::describe_customer_metadata_input::Builder {
        crate::input::describe_customer_metadata_input::Builder::default()
    }
    /// Creates a new `DescribeCustomerMetadata` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeCustomerMetadata {
    type Output = std::result::Result<
        crate::output::DescribeCustomerMetadataOutput,
        crate::error::DescribeCustomerMetadataError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_customer_metadata_error(response)
        } else {
            crate::operation_deser::parse_describe_customer_metadata_response(response)
        }
    }
}

/// Operation shape for `DescribeDirectConnectGatewayAssociationProposals`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_direct_connect_gateway_association_proposals`](crate::client::Client::describe_direct_connect_gateway_association_proposals).
///
/// See [`crate::client::fluent_builders::DescribeDirectConnectGatewayAssociationProposals`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociationProposals {
    _private: (),
}
impl DescribeDirectConnectGatewayAssociationProposals {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAssociationProposalsInput`](crate::input::DescribeDirectConnectGatewayAssociationProposalsInput)
    pub fn builder(
    ) -> crate::input::describe_direct_connect_gateway_association_proposals_input::Builder {
        crate::input::describe_direct_connect_gateway_association_proposals_input::Builder::default(
        )
    }
    /// Creates a new `DescribeDirectConnectGatewayAssociationProposals` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DescribeDirectConnectGatewayAssociationProposals
{
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAssociationProposalsOutput,
        crate::error::DescribeDirectConnectGatewayAssociationProposalsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_association_proposals_error(response)
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_association_proposals_response(response)
        }
    }
}

/// Operation shape for `DescribeDirectConnectGatewayAssociations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_direct_connect_gateway_associations`](crate::client::Client::describe_direct_connect_gateway_associations).
///
/// See [`crate::client::fluent_builders::DescribeDirectConnectGatewayAssociations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociations {
    _private: (),
}
impl DescribeDirectConnectGatewayAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAssociationsInput`](crate::input::DescribeDirectConnectGatewayAssociationsInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateway_associations_input::Builder {
        crate::input::describe_direct_connect_gateway_associations_input::Builder::default()
    }
    /// Creates a new `DescribeDirectConnectGatewayAssociations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDirectConnectGatewayAssociations {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAssociationsOutput,
        crate::error::DescribeDirectConnectGatewayAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_associations_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeDirectConnectGatewayAttachments`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_direct_connect_gateway_attachments`](crate::client::Client::describe_direct_connect_gateway_attachments).
///
/// See [`crate::client::fluent_builders::DescribeDirectConnectGatewayAttachments`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAttachments {
    _private: (),
}
impl DescribeDirectConnectGatewayAttachments {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAttachmentsInput`](crate::input::DescribeDirectConnectGatewayAttachmentsInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateway_attachments_input::Builder {
        crate::input::describe_direct_connect_gateway_attachments_input::Builder::default()
    }
    /// Creates a new `DescribeDirectConnectGatewayAttachments` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDirectConnectGatewayAttachments {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAttachmentsOutput,
        crate::error::DescribeDirectConnectGatewayAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_attachments_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_attachments_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeDirectConnectGateways`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_direct_connect_gateways`](crate::client::Client::describe_direct_connect_gateways).
///
/// See [`crate::client::fluent_builders::DescribeDirectConnectGateways`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGateways {
    _private: (),
}
impl DescribeDirectConnectGateways {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewaysInput`](crate::input::DescribeDirectConnectGatewaysInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateways_input::Builder {
        crate::input::describe_direct_connect_gateways_input::Builder::default()
    }
    /// Creates a new `DescribeDirectConnectGateways` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeDirectConnectGateways {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewaysOutput,
        crate::error::DescribeDirectConnectGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateways_response(response)
        }
    }
}

/// Operation shape for `DescribeHostedConnections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_hosted_connections`](crate::client::Client::describe_hosted_connections).
///
/// See [`crate::client::fluent_builders::DescribeHostedConnections`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHostedConnections {
    _private: (),
}
impl DescribeHostedConnections {
    /// Creates a new builder-style object to manufacture [`DescribeHostedConnectionsInput`](crate::input::DescribeHostedConnectionsInput)
    pub fn builder() -> crate::input::describe_hosted_connections_input::Builder {
        crate::input::describe_hosted_connections_input::Builder::default()
    }
    /// Creates a new `DescribeHostedConnections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeHostedConnections {
    type Output = std::result::Result<
        crate::output::DescribeHostedConnectionsOutput,
        crate::error::DescribeHostedConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_hosted_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_hosted_connections_response(response)
        }
    }
}

/// Operation shape for `DescribeInterconnectLoa`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_interconnect_loa`](crate::client::Client::describe_interconnect_loa).
///
/// See [`crate::client::fluent_builders::DescribeInterconnectLoa`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInterconnectLoa {
    _private: (),
}
impl DescribeInterconnectLoa {
    /// Creates a new builder-style object to manufacture [`DescribeInterconnectLoaInput`](crate::input::DescribeInterconnectLoaInput)
    pub fn builder() -> crate::input::describe_interconnect_loa_input::Builder {
        crate::input::describe_interconnect_loa_input::Builder::default()
    }
    /// Creates a new `DescribeInterconnectLoa` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeInterconnectLoa {
    type Output = std::result::Result<
        crate::output::DescribeInterconnectLoaOutput,
        crate::error::DescribeInterconnectLoaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_interconnect_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_interconnect_loa_response(response)
        }
    }
}

/// Operation shape for `DescribeInterconnects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_interconnects`](crate::client::Client::describe_interconnects).
///
/// See [`crate::client::fluent_builders::DescribeInterconnects`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInterconnects {
    _private: (),
}
impl DescribeInterconnects {
    /// Creates a new builder-style object to manufacture [`DescribeInterconnectsInput`](crate::input::DescribeInterconnectsInput)
    pub fn builder() -> crate::input::describe_interconnects_input::Builder {
        crate::input::describe_interconnects_input::Builder::default()
    }
    /// Creates a new `DescribeInterconnects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeInterconnects {
    type Output = std::result::Result<
        crate::output::DescribeInterconnectsOutput,
        crate::error::DescribeInterconnectsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_interconnects_error(response)
        } else {
            crate::operation_deser::parse_describe_interconnects_response(response)
        }
    }
}

/// Operation shape for `DescribeLags`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_lags`](crate::client::Client::describe_lags).
///
/// See [`crate::client::fluent_builders::DescribeLags`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLags {
    _private: (),
}
impl DescribeLags {
    /// Creates a new builder-style object to manufacture [`DescribeLagsInput`](crate::input::DescribeLagsInput)
    pub fn builder() -> crate::input::describe_lags_input::Builder {
        crate::input::describe_lags_input::Builder::default()
    }
    /// Creates a new `DescribeLags` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLags {
    type Output =
        std::result::Result<crate::output::DescribeLagsOutput, crate::error::DescribeLagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_lags_error(response)
        } else {
            crate::operation_deser::parse_describe_lags_response(response)
        }
    }
}

/// Operation shape for `DescribeLoa`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_loa`](crate::client::Client::describe_loa).
///
/// See [`crate::client::fluent_builders::DescribeLoa`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLoa {
    _private: (),
}
impl DescribeLoa {
    /// Creates a new builder-style object to manufacture [`DescribeLoaInput`](crate::input::DescribeLoaInput)
    pub fn builder() -> crate::input::describe_loa_input::Builder {
        crate::input::describe_loa_input::Builder::default()
    }
    /// Creates a new `DescribeLoa` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLoa {
    type Output =
        std::result::Result<crate::output::DescribeLoaOutput, crate::error::DescribeLoaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_loa_response(response)
        }
    }
}

/// Operation shape for `DescribeLocations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_locations`](crate::client::Client::describe_locations).
///
/// See [`crate::client::fluent_builders::DescribeLocations`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocations {
    _private: (),
}
impl DescribeLocations {
    /// Creates a new builder-style object to manufacture [`DescribeLocationsInput`](crate::input::DescribeLocationsInput)
    pub fn builder() -> crate::input::describe_locations_input::Builder {
        crate::input::describe_locations_input::Builder::default()
    }
    /// Creates a new `DescribeLocations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocations {
    type Output = std::result::Result<
        crate::output::DescribeLocationsOutput,
        crate::error::DescribeLocationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_locations_error(response)
        } else {
            crate::operation_deser::parse_describe_locations_response(response)
        }
    }
}

/// Operation shape for `DescribeRouterConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_router_configuration`](crate::client::Client::describe_router_configuration).
///
/// See [`crate::client::fluent_builders::DescribeRouterConfiguration`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRouterConfiguration {
    _private: (),
}
impl DescribeRouterConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeRouterConfigurationInput`](crate::input::DescribeRouterConfigurationInput)
    pub fn builder() -> crate::input::describe_router_configuration_input::Builder {
        crate::input::describe_router_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeRouterConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeRouterConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeRouterConfigurationOutput,
        crate::error::DescribeRouterConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_router_configuration_error(response)
        } else {
            crate::operation_deser::parse_describe_router_configuration_response(response)
        }
    }
}

/// Operation shape for `DescribeTags`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_tags`](crate::client::Client::describe_tags).
///
/// See [`crate::client::fluent_builders::DescribeTags`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTags {
    _private: (),
}
impl DescribeTags {
    /// Creates a new builder-style object to manufacture [`DescribeTagsInput`](crate::input::DescribeTagsInput)
    pub fn builder() -> crate::input::describe_tags_input::Builder {
        crate::input::describe_tags_input::Builder::default()
    }
    /// Creates a new `DescribeTags` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeTags {
    type Output =
        std::result::Result<crate::output::DescribeTagsOutput, crate::error::DescribeTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_tags_error(response)
        } else {
            crate::operation_deser::parse_describe_tags_response(response)
        }
    }
}

/// Operation shape for `DescribeVirtualGateways`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_virtual_gateways`](crate::client::Client::describe_virtual_gateways).
///
/// See [`crate::client::fluent_builders::DescribeVirtualGateways`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualGateways {
    _private: (),
}
impl DescribeVirtualGateways {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualGatewaysInput`](crate::input::DescribeVirtualGatewaysInput)
    pub fn builder() -> crate::input::describe_virtual_gateways_input::Builder {
        crate::input::describe_virtual_gateways_input::Builder::default()
    }
    /// Creates a new `DescribeVirtualGateways` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeVirtualGateways {
    type Output = std::result::Result<
        crate::output::DescribeVirtualGatewaysOutput,
        crate::error::DescribeVirtualGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_gateways_response(response)
        }
    }
}

/// Operation shape for `DescribeVirtualInterfaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_virtual_interfaces`](crate::client::Client::describe_virtual_interfaces).
///
/// See [`crate::client::fluent_builders::DescribeVirtualInterfaces`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualInterfaces {
    _private: (),
}
impl DescribeVirtualInterfaces {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualInterfacesInput`](crate::input::DescribeVirtualInterfacesInput)
    pub fn builder() -> crate::input::describe_virtual_interfaces_input::Builder {
        crate::input::describe_virtual_interfaces_input::Builder::default()
    }
    /// Creates a new `DescribeVirtualInterfaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeVirtualInterfaces {
    type Output = std::result::Result<
        crate::output::DescribeVirtualInterfacesOutput,
        crate::error::DescribeVirtualInterfacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_interfaces_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_interfaces_response(response)
        }
    }
}

/// Operation shape for `DisassociateConnectionFromLag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_connection_from_lag`](crate::client::Client::disassociate_connection_from_lag).
///
/// See [`crate::client::fluent_builders::DisassociateConnectionFromLag`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateConnectionFromLag {
    _private: (),
}
impl DisassociateConnectionFromLag {
    /// Creates a new builder-style object to manufacture [`DisassociateConnectionFromLagInput`](crate::input::DisassociateConnectionFromLagInput)
    pub fn builder() -> crate::input::disassociate_connection_from_lag_input::Builder {
        crate::input::disassociate_connection_from_lag_input::Builder::default()
    }
    /// Creates a new `DisassociateConnectionFromLag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateConnectionFromLag {
    type Output = std::result::Result<
        crate::output::DisassociateConnectionFromLagOutput,
        crate::error::DisassociateConnectionFromLagError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_connection_from_lag_error(response)
        } else {
            crate::operation_deser::parse_disassociate_connection_from_lag_response(response)
        }
    }
}

/// Operation shape for `DisassociateMacSecKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_mac_sec_key`](crate::client::Client::disassociate_mac_sec_key).
///
/// See [`crate::client::fluent_builders::DisassociateMacSecKey`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateMacSecKey {
    _private: (),
}
impl DisassociateMacSecKey {
    /// Creates a new builder-style object to manufacture [`DisassociateMacSecKeyInput`](crate::input::DisassociateMacSecKeyInput)
    pub fn builder() -> crate::input::disassociate_mac_sec_key_input::Builder {
        crate::input::disassociate_mac_sec_key_input::Builder::default()
    }
    /// Creates a new `DisassociateMacSecKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateMacSecKey {
    type Output = std::result::Result<
        crate::output::DisassociateMacSecKeyOutput,
        crate::error::DisassociateMacSecKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_mac_sec_key_error(response)
        } else {
            crate::operation_deser::parse_disassociate_mac_sec_key_response(response)
        }
    }
}

/// Operation shape for `ListVirtualInterfaceTestHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_virtual_interface_test_history`](crate::client::Client::list_virtual_interface_test_history).
///
/// See [`crate::client::fluent_builders::ListVirtualInterfaceTestHistory`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualInterfaceTestHistory {
    _private: (),
}
impl ListVirtualInterfaceTestHistory {
    /// Creates a new builder-style object to manufacture [`ListVirtualInterfaceTestHistoryInput`](crate::input::ListVirtualInterfaceTestHistoryInput)
    pub fn builder() -> crate::input::list_virtual_interface_test_history_input::Builder {
        crate::input::list_virtual_interface_test_history_input::Builder::default()
    }
    /// Creates a new `ListVirtualInterfaceTestHistory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVirtualInterfaceTestHistory {
    type Output = std::result::Result<
        crate::output::ListVirtualInterfaceTestHistoryOutput,
        crate::error::ListVirtualInterfaceTestHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_interface_test_history_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_interface_test_history_response(response)
        }
    }
}

/// Operation shape for `StartBgpFailoverTest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_bgp_failover_test`](crate::client::Client::start_bgp_failover_test).
///
/// See [`crate::client::fluent_builders::StartBgpFailoverTest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartBgpFailoverTest {
    _private: (),
}
impl StartBgpFailoverTest {
    /// Creates a new builder-style object to manufacture [`StartBgpFailoverTestInput`](crate::input::StartBgpFailoverTestInput)
    pub fn builder() -> crate::input::start_bgp_failover_test_input::Builder {
        crate::input::start_bgp_failover_test_input::Builder::default()
    }
    /// Creates a new `StartBgpFailoverTest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartBgpFailoverTest {
    type Output = std::result::Result<
        crate::output::StartBgpFailoverTestOutput,
        crate::error::StartBgpFailoverTestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_bgp_failover_test_error(response)
        } else {
            crate::operation_deser::parse_start_bgp_failover_test_response(response)
        }
    }
}

/// Operation shape for `StopBgpFailoverTest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_bgp_failover_test`](crate::client::Client::stop_bgp_failover_test).
///
/// See [`crate::client::fluent_builders::StopBgpFailoverTest`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopBgpFailoverTest {
    _private: (),
}
impl StopBgpFailoverTest {
    /// Creates a new builder-style object to manufacture [`StopBgpFailoverTestInput`](crate::input::StopBgpFailoverTestInput)
    pub fn builder() -> crate::input::stop_bgp_failover_test_input::Builder {
        crate::input::stop_bgp_failover_test_input::Builder::default()
    }
    /// Creates a new `StopBgpFailoverTest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopBgpFailoverTest {
    type Output = std::result::Result<
        crate::output::StopBgpFailoverTestOutput,
        crate::error::StopBgpFailoverTestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_bgp_failover_test_error(response)
        } else {
            crate::operation_deser::parse_stop_bgp_failover_test_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::Client::tag_resource).
///
/// See [`crate::client::fluent_builders::TagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::Client::untag_resource).
///
/// See [`crate::client::fluent_builders::UntagResource`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation shape for `UpdateConnection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_connection`](crate::client::Client::update_connection).
///
/// See [`crate::client::fluent_builders::UpdateConnection`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnection {
    _private: (),
}
impl UpdateConnection {
    /// Creates a new builder-style object to manufacture [`UpdateConnectionInput`](crate::input::UpdateConnectionInput)
    pub fn builder() -> crate::input::update_connection_input::Builder {
        crate::input::update_connection_input::Builder::default()
    }
    /// Creates a new `UpdateConnection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateConnection {
    type Output = std::result::Result<
        crate::output::UpdateConnectionOutput,
        crate::error::UpdateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_connection_error(response)
        } else {
            crate::operation_deser::parse_update_connection_response(response)
        }
    }
}

/// Operation shape for `UpdateDirectConnectGateway`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_direct_connect_gateway`](crate::client::Client::update_direct_connect_gateway).
///
/// See [`crate::client::fluent_builders::UpdateDirectConnectGateway`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDirectConnectGateway {
    _private: (),
}
impl UpdateDirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`UpdateDirectConnectGatewayInput`](crate::input::UpdateDirectConnectGatewayInput)
    pub fn builder() -> crate::input::update_direct_connect_gateway_input::Builder {
        crate::input::update_direct_connect_gateway_input::Builder::default()
    }
    /// Creates a new `UpdateDirectConnectGateway` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDirectConnectGateway {
    type Output = std::result::Result<
        crate::output::UpdateDirectConnectGatewayOutput,
        crate::error::UpdateDirectConnectGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_direct_connect_gateway_error(response)
        } else {
            crate::operation_deser::parse_update_direct_connect_gateway_response(response)
        }
    }
}

/// Operation shape for `UpdateDirectConnectGatewayAssociation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_direct_connect_gateway_association`](crate::client::Client::update_direct_connect_gateway_association).
///
/// See [`crate::client::fluent_builders::UpdateDirectConnectGatewayAssociation`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDirectConnectGatewayAssociation {
    _private: (),
}
impl UpdateDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`UpdateDirectConnectGatewayAssociationInput`](crate::input::UpdateDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::update_direct_connect_gateway_association_input::Builder {
        crate::input::update_direct_connect_gateway_association_input::Builder::default()
    }
    /// Creates a new `UpdateDirectConnectGatewayAssociation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::UpdateDirectConnectGatewayAssociationOutput,
        crate::error::UpdateDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_update_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateLag`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_lag`](crate::client::Client::update_lag).
///
/// See [`crate::client::fluent_builders::UpdateLag`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLag {
    _private: (),
}
impl UpdateLag {
    /// Creates a new builder-style object to manufacture [`UpdateLagInput`](crate::input::UpdateLagInput)
    pub fn builder() -> crate::input::update_lag_input::Builder {
        crate::input::update_lag_input::Builder::default()
    }
    /// Creates a new `UpdateLag` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLag {
    type Output = std::result::Result<crate::output::UpdateLagOutput, crate::error::UpdateLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_lag_error(response)
        } else {
            crate::operation_deser::parse_update_lag_response(response)
        }
    }
}

/// Operation shape for `UpdateVirtualInterfaceAttributes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_virtual_interface_attributes`](crate::client::Client::update_virtual_interface_attributes).
///
/// See [`crate::client::fluent_builders::UpdateVirtualInterfaceAttributes`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualInterfaceAttributes {
    _private: (),
}
impl UpdateVirtualInterfaceAttributes {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualInterfaceAttributesInput`](crate::input::UpdateVirtualInterfaceAttributesInput)
    pub fn builder() -> crate::input::update_virtual_interface_attributes_input::Builder {
        crate::input::update_virtual_interface_attributes_input::Builder::default()
    }
    /// Creates a new `UpdateVirtualInterfaceAttributes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateVirtualInterfaceAttributes {
    type Output = std::result::Result<
        crate::output::UpdateVirtualInterfaceAttributesOutput,
        crate::error::UpdateVirtualInterfaceAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_interface_attributes_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_interface_attributes_response(response)
        }
    }
}
