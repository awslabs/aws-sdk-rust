// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_channel_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateChannelFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.channel_flow_arn {
        object.key("ChannelFlowArn").string(var_1);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_create_channel_membership_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchCreateChannelMembershipInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.member_arns {
        let mut array_3 = object.key("MemberArns").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4);
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.r#type {
        object.key("Type").string(var_5.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_channel_flow_callback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ChannelFlowCallbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_6) = &input.callback_id {
        object.key("CallbackId").string(var_6);
    }
    if let Some(var_7) = &input.channel_message {
        let mut object_8 = object.key("ChannelMessage").start_object();
        crate::json_ser::serialize_structure_crate_model_channel_message_callback(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if input.delete_resource {
        object.key("DeleteResource").boolean(input.delete_resource);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.app_instance_arn {
        object.key("AppInstanceArn").string(var_9);
    }
    if let Some(var_10) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_10);
    }
    if let Some(var_11) = &input.metadata {
        object.key("Metadata").string(var_11);
    }
    if let Some(var_12) = &input.mode {
        object.key("Mode").string(var_12.as_str());
    }
    if let Some(var_13) = &input.name {
        object.key("Name").string(var_13);
    }
    if let Some(var_14) = &input.privacy {
        object.key("Privacy").string(var_14.as_str());
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_channel_ban_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelBanInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.member_arn {
        object.key("MemberArn").string(var_19);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_channel_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.app_instance_arn {
        object.key("AppInstanceArn").string(var_20);
    }
    if let Some(var_21) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_21);
    }
    if let Some(var_22) = &input.name {
        object.key("Name").string(var_22);
    }
    if let Some(var_23) = &input.processors {
        let mut array_24 = object.key("Processors").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processor(
                    &mut object_26,
                    item_25,
                )?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.tags {
        let mut array_28 = object.key("Tags").start_array();
        for item_29 in var_27 {
            {
                let mut object_30 = array_28.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_30, item_29)?;
                object_30.finish();
            }
        }
        array_28.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_channel_membership_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelMembershipInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.member_arn {
        object.key("MemberArn").string(var_31);
    }
    if let Some(var_32) = &input.r#type {
        object.key("Type").string(var_32.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_channel_moderator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateChannelModeratorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.channel_moderator_arn {
        object.key("ChannelModeratorArn").string(var_33);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_channel_membership_preferences_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutChannelMembershipPreferencesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.preferences {
        let mut object_35 = object.key("Preferences").start_object();
        crate::json_ser::serialize_structure_crate_model_channel_membership_preferences(
            &mut object_35,
            var_34,
        )?;
        object_35.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_channel_message_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendChannelMessageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_36);
    }
    if let Some(var_37) = &input.content {
        object.key("Content").string(var_37);
    }
    if let Some(var_38) = &input.message_attributes {
        let mut object_39 = object.key("MessageAttributes").start_object();
        for (key_40, value_41) in var_38 {
            {
                let mut object_42 = object_39.key(key_40).start_object();
                crate::json_ser::serialize_structure_crate_model_message_attribute_value(
                    &mut object_42,
                    value_41,
                )?;
                object_42.finish();
            }
        }
        object_39.finish();
    }
    if let Some(var_43) = &input.metadata {
        object.key("Metadata").string(var_43);
    }
    if let Some(var_44) = &input.persistence {
        object.key("Persistence").string(var_44.as_str());
    }
    if let Some(var_45) = &input.push_notification {
        let mut object_46 = object.key("PushNotification").start_object();
        crate::json_ser::serialize_structure_crate_model_push_notification_configuration(
            &mut object_46,
            var_45,
        )?;
        object_46.finish();
    }
    if let Some(var_47) = &input.r#type {
        object.key("Type").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.resource_arn {
        object.key("ResourceARN").string(var_48);
    }
    if let Some(var_49) = &input.tags {
        let mut array_50 = object.key("Tags").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_52, item_51)?;
                object_52.finish();
            }
        }
        array_50.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.resource_arn {
        object.key("ResourceARN").string(var_53);
    }
    if let Some(var_54) = &input.tag_keys {
        let mut array_55 = object.key("TagKeys").start_array();
        for item_56 in var_54 {
            {
                array_55.value().string(item_56);
            }
        }
        array_55.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.metadata {
        object.key("Metadata").string(var_57);
    }
    if let Some(var_58) = &input.mode {
        object.key("Mode").string(var_58.as_str());
    }
    if let Some(var_59) = &input.name {
        object.key("Name").string(var_59);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_channel_flow_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelFlowInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.name {
        object.key("Name").string(var_60);
    }
    if let Some(var_61) = &input.processors {
        let mut array_62 = object.key("Processors").start_array();
        for item_63 in var_61 {
            {
                let mut object_64 = array_62.value().start_object();
                crate::json_ser::serialize_structure_crate_model_processor(
                    &mut object_64,
                    item_63,
                )?;
                object_64.finish();
            }
        }
        array_62.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_channel_message_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChannelMessageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.content {
        object.key("Content").string(var_65);
    }
    if let Some(var_66) = &input.metadata {
        object.key("Metadata").string(var_66);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_message_callback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelMessageCallback,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_67) = &input.message_id {
        object.key("MessageId").string(var_67);
    }
    if let Some(var_68) = &input.content {
        object.key("Content").string(var_68);
    }
    if let Some(var_69) = &input.metadata {
        object.key("Metadata").string(var_69);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.key {
        object.key("Key").string(var_70);
    }
    if let Some(var_71) = &input.value {
        object.key("Value").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processor(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Processor,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.name {
        object.key("Name").string(var_72);
    }
    if let Some(var_73) = &input.configuration {
        let mut object_74 = object.key("Configuration").start_object();
        crate::json_ser::serialize_structure_crate_model_processor_configuration(
            &mut object_74,
            var_73,
        )?;
        object_74.finish();
    }
    if let Some(var_75) = &input.execution_order {
        object.key("ExecutionOrder").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_75).into()),
        );
    }
    if let Some(var_76) = &input.fallback_action {
        object.key("FallbackAction").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_channel_membership_preferences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChannelMembershipPreferences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.push_notifications {
        let mut object_78 = object.key("PushNotifications").start_object();
        crate::json_ser::serialize_structure_crate_model_push_notification_preferences(
            &mut object_78,
            var_77,
        )?;
        object_78.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_message_attribute_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MessageAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.string_values {
        let mut array_80 = object.key("StringValues").start_array();
        for item_81 in var_79 {
            {
                array_80.value().string(item_81);
            }
        }
        array_80.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_push_notification_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PushNotificationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.title {
        object.key("Title").string(var_82);
    }
    if let Some(var_83) = &input.body {
        object.key("Body").string(var_83);
    }
    if let Some(var_84) = &input.r#type {
        object.key("Type").string(var_84.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_processor_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProcessorConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_85) = &input.lambda {
        let mut object_86 = object.key("Lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_configuration(
            &mut object_86,
            var_85,
        )?;
        object_86.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_push_notification_preferences(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PushNotificationPreferences,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.allow_notifications {
        object.key("AllowNotifications").string(var_87.as_str());
    }
    if let Some(var_88) = &input.filter_rule {
        object.key("FilterRule").string(var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.resource_arn {
        object.key("ResourceArn").string(var_89);
    }
    if let Some(var_90) = &input.invocation_type {
        object.key("InvocationType").string(var_90.as_str());
    }
    Ok(())
}
