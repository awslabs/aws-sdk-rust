// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_accept_reserved_node_exchange(
    input: &crate::input::AcceptReservedNodeExchangeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AcceptReservedNodeExchange", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("ReservedNodeId");
    if let Some(var_2) = &input.reserved_node_id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_4) = &input.target_reserved_node_offering_id {
        scope_3.string(var_4);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_partner(
    input: &crate::input::AddPartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddPartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AccountId");
    if let Some(var_6) = &input.account_id {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("ClusterIdentifier");
    if let Some(var_8) = &input.cluster_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("DatabaseName");
    if let Some(var_10) = &input.database_name {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("PartnerName");
    if let Some(var_12) = &input.partner_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_associate_data_share_consumer(
    input: &crate::input::AssociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AssociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("DataShareArn");
    if let Some(var_14) = &input.data_share_arn {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("AssociateEntireAccount");
    if let Some(var_16) = &input.associate_entire_account {
        scope_15.boolean(*var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ConsumerArn");
    if let Some(var_18) = &input.consumer_arn {
        scope_17.string(var_18);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_cluster_security_group_ingress(
    input: &crate::input::AuthorizeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_20) = &input.cluster_security_group_name {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("CIDRIP");
    if let Some(var_22) = &input.cidrip {
        scope_21.string(var_22);
    }
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_24) = &input.ec2_security_group_name {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_26) = &input.ec2_security_group_owner_id {
        scope_25.string(var_26);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_data_share(
    input: &crate::input::AuthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("DataShareArn");
    if let Some(var_28) = &input.data_share_arn {
        scope_27.string(var_28);
    }
    #[allow(unused_mut)]
    let mut scope_29 = writer.prefix("ConsumerIdentifier");
    if let Some(var_30) = &input.consumer_identifier {
        scope_29.string(var_30);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_endpoint_access(
    input: &crate::input::AuthorizeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_31 = writer.prefix("ClusterIdentifier");
    if let Some(var_32) = &input.cluster_identifier {
        scope_31.string(var_32);
    }
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("Account");
    if let Some(var_34) = &input.account {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("VpcIds");
    if let Some(var_36) = &input.vpc_ids {
        let mut list_38 = scope_35.start_list(false, Some("VpcIdentifier"));
        for item_37 in var_36 {
            #[allow(unused_mut)]
            let mut entry_39 = list_38.entry();
            entry_39.string(item_37);
        }
        list_38.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_snapshot_access(
    input: &crate::input::AuthorizeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AuthorizeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("SnapshotIdentifier");
    if let Some(var_41) = &input.snapshot_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_43) = &input.snapshot_cluster_identifier {
        scope_42.string(var_43);
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_45) = &input.account_with_restore_access {
        scope_44.string(var_45);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_delete_cluster_snapshots(
    input: &crate::input::BatchDeleteClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchDeleteClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("Identifiers");
    if let Some(var_47) = &input.identifiers {
        let mut list_49 = scope_46.start_list(false, Some("DeleteClusterSnapshotMessage"));
        for item_48 in var_47 {
            #[allow(unused_mut)]
            let mut entry_50 = list_49.entry();
            crate::query_ser::serialize_structure_crate_model_delete_cluster_snapshot_message(
                entry_50, item_48,
            )?;
        }
        list_49.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_batch_modify_cluster_snapshots(
    input: &crate::input::BatchModifyClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BatchModifyClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("SnapshotIdentifierList");
    if let Some(var_52) = &input.snapshot_identifier_list {
        let mut list_54 = scope_51.start_list(false, Some("String"));
        for item_53 in var_52 {
            #[allow(unused_mut)]
            let mut entry_55 = list_54.entry();
            entry_55.string(item_53);
        }
        list_54.finish();
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_57) = &input.manual_snapshot_retention_period {
        scope_56.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_57).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_58 = writer.prefix("Force");
    if input.force {
        scope_58.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_resize(
    input: &crate::input::CancelResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_59 = writer.prefix("ClusterIdentifier");
    if let Some(var_60) = &input.cluster_identifier {
        scope_59.string(var_60);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_cluster_snapshot(
    input: &crate::input::CopyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("SourceSnapshotIdentifier");
    if let Some(var_62) = &input.source_snapshot_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("SourceSnapshotClusterIdentifier");
    if let Some(var_64) = &input.source_snapshot_cluster_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("TargetSnapshotIdentifier");
    if let Some(var_66) = &input.target_snapshot_identifier {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_68) = &input.manual_snapshot_retention_period {
        scope_67.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_authentication_profile(
    input: &crate::input::CreateAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("AuthenticationProfileName");
    if let Some(var_70) = &input.authentication_profile_name {
        scope_69.string(var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_72) = &input.authentication_profile_content {
        scope_71.string(var_72);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster(
    input: &crate::input::CreateClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_73 = writer.prefix("DBName");
    if let Some(var_74) = &input.db_name {
        scope_73.string(var_74);
    }
    #[allow(unused_mut)]
    let mut scope_75 = writer.prefix("ClusterIdentifier");
    if let Some(var_76) = &input.cluster_identifier {
        scope_75.string(var_76);
    }
    #[allow(unused_mut)]
    let mut scope_77 = writer.prefix("ClusterType");
    if let Some(var_78) = &input.cluster_type {
        scope_77.string(var_78);
    }
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("NodeType");
    if let Some(var_80) = &input.node_type {
        scope_79.string(var_80);
    }
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("MasterUsername");
    if let Some(var_82) = &input.master_username {
        scope_81.string(var_82);
    }
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("MasterUserPassword");
    if let Some(var_84) = &input.master_user_password {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_86) = &input.cluster_security_groups {
        let mut list_88 = scope_85.start_list(false, Some("ClusterSecurityGroupName"));
        for item_87 in var_86 {
            #[allow(unused_mut)]
            let mut entry_89 = list_88.entry();
            entry_89.string(item_87);
        }
        list_88.finish();
    }
    #[allow(unused_mut)]
    let mut scope_90 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_91) = &input.vpc_security_group_ids {
        let mut list_93 = scope_90.start_list(false, Some("VpcSecurityGroupId"));
        for item_92 in var_91 {
            #[allow(unused_mut)]
            let mut entry_94 = list_93.entry();
            entry_94.string(item_92);
        }
        list_93.finish();
    }
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_96) = &input.cluster_subnet_group_name {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("AvailabilityZone");
    if let Some(var_98) = &input.availability_zone {
        scope_97.string(var_98);
    }
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_100) = &input.preferred_maintenance_window {
        scope_99.string(var_100);
    }
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_102) = &input.cluster_parameter_group_name {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_104) = &input.automated_snapshot_retention_period {
        scope_103.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_106) = &input.manual_snapshot_retention_period {
        scope_105.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_106).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("Port");
    if let Some(var_108) = &input.port {
        scope_107.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("ClusterVersion");
    if let Some(var_110) = &input.cluster_version {
        scope_109.string(var_110);
    }
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_112) = &input.allow_version_upgrade {
        scope_111.boolean(*var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("NumberOfNodes");
    if let Some(var_114) = &input.number_of_nodes {
        scope_113.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("PubliclyAccessible");
    if let Some(var_116) = &input.publicly_accessible {
        scope_115.boolean(*var_116);
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Encrypted");
    if let Some(var_118) = &input.encrypted {
        scope_117.boolean(*var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_120) = &input.hsm_client_certificate_identifier {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_122) = &input.hsm_configuration_identifier {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("ElasticIp");
    if let Some(var_124) = &input.elastic_ip {
        scope_123.string(var_124);
    }
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("Tags");
    if let Some(var_126) = &input.tags {
        let mut list_128 = scope_125.start_list(false, Some("Tag"));
        for item_127 in var_126 {
            #[allow(unused_mut)]
            let mut entry_129 = list_128.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_129, item_127)?;
        }
        list_128.finish();
    }
    #[allow(unused_mut)]
    let mut scope_130 = writer.prefix("KmsKeyId");
    if let Some(var_131) = &input.kms_key_id {
        scope_130.string(var_131);
    }
    #[allow(unused_mut)]
    let mut scope_132 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_133) = &input.enhanced_vpc_routing {
        scope_132.boolean(*var_133);
    }
    #[allow(unused_mut)]
    let mut scope_134 = writer.prefix("AdditionalInfo");
    if let Some(var_135) = &input.additional_info {
        scope_134.string(var_135);
    }
    #[allow(unused_mut)]
    let mut scope_136 = writer.prefix("IamRoles");
    if let Some(var_137) = &input.iam_roles {
        let mut list_139 = scope_136.start_list(false, Some("IamRoleArn"));
        for item_138 in var_137 {
            #[allow(unused_mut)]
            let mut entry_140 = list_139.entry();
            entry_140.string(item_138);
        }
        list_139.finish();
    }
    #[allow(unused_mut)]
    let mut scope_141 = writer.prefix("MaintenanceTrackName");
    if let Some(var_142) = &input.maintenance_track_name {
        scope_141.string(var_142);
    }
    #[allow(unused_mut)]
    let mut scope_143 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_144) = &input.snapshot_schedule_identifier {
        scope_143.string(var_144);
    }
    #[allow(unused_mut)]
    let mut scope_145 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_146) = &input.availability_zone_relocation {
        scope_145.boolean(*var_146);
    }
    #[allow(unused_mut)]
    let mut scope_147 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_148) = &input.aqua_configuration_status {
        scope_147.string(var_148.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_150) = &input.default_iam_role_arn {
        scope_149.string(var_150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_parameter_group(
    input: &crate::input::CreateClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("ParameterGroupName");
    if let Some(var_152) = &input.parameter_group_name {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("ParameterGroupFamily");
    if let Some(var_154) = &input.parameter_group_family {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("Description");
    if let Some(var_156) = &input.description {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("Tags");
    if let Some(var_158) = &input.tags {
        let mut list_160 = scope_157.start_list(false, Some("Tag"));
        for item_159 in var_158 {
            #[allow(unused_mut)]
            let mut entry_161 = list_160.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_161, item_159)?;
        }
        list_160.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_security_group(
    input: &crate::input::CreateClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_162 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_163) = &input.cluster_security_group_name {
        scope_162.string(var_163);
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("Description");
    if let Some(var_165) = &input.description {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("Tags");
    if let Some(var_167) = &input.tags {
        let mut list_169 = scope_166.start_list(false, Some("Tag"));
        for item_168 in var_167 {
            #[allow(unused_mut)]
            let mut entry_170 = list_169.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_170, item_168)?;
        }
        list_169.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_snapshot(
    input: &crate::input::CreateClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_171 = writer.prefix("SnapshotIdentifier");
    if let Some(var_172) = &input.snapshot_identifier {
        scope_171.string(var_172);
    }
    #[allow(unused_mut)]
    let mut scope_173 = writer.prefix("ClusterIdentifier");
    if let Some(var_174) = &input.cluster_identifier {
        scope_173.string(var_174);
    }
    #[allow(unused_mut)]
    let mut scope_175 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_176) = &input.manual_snapshot_retention_period {
        scope_175.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_176).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_177 = writer.prefix("Tags");
    if let Some(var_178) = &input.tags {
        let mut list_180 = scope_177.start_list(false, Some("Tag"));
        for item_179 in var_178 {
            #[allow(unused_mut)]
            let mut entry_181 = list_180.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_181, item_179)?;
        }
        list_180.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_cluster_subnet_group(
    input: &crate::input::CreateClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_183) = &input.cluster_subnet_group_name {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("Description");
    if let Some(var_185) = &input.description {
        scope_184.string(var_185);
    }
    #[allow(unused_mut)]
    let mut scope_186 = writer.prefix("SubnetIds");
    if let Some(var_187) = &input.subnet_ids {
        let mut list_189 = scope_186.start_list(false, Some("SubnetIdentifier"));
        for item_188 in var_187 {
            #[allow(unused_mut)]
            let mut entry_190 = list_189.entry();
            entry_190.string(item_188);
        }
        list_189.finish();
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("Tags");
    if let Some(var_192) = &input.tags {
        let mut list_194 = scope_191.start_list(false, Some("Tag"));
        for item_193 in var_192 {
            #[allow(unused_mut)]
            let mut entry_195 = list_194.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_195, item_193)?;
        }
        list_194.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_endpoint_access(
    input: &crate::input::CreateEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_196 = writer.prefix("ClusterIdentifier");
    if let Some(var_197) = &input.cluster_identifier {
        scope_196.string(var_197);
    }
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("ResourceOwner");
    if let Some(var_199) = &input.resource_owner {
        scope_198.string(var_199);
    }
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("EndpointName");
    if let Some(var_201) = &input.endpoint_name {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("SubnetGroupName");
    if let Some(var_203) = &input.subnet_group_name {
        scope_202.string(var_203);
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_205) = &input.vpc_security_group_ids {
        let mut list_207 = scope_204.start_list(false, Some("VpcSecurityGroupId"));
        for item_206 in var_205 {
            #[allow(unused_mut)]
            let mut entry_208 = list_207.entry();
            entry_208.string(item_206);
        }
        list_207.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("SubscriptionName");
    if let Some(var_210) = &input.subscription_name {
        scope_209.string(var_210);
    }
    #[allow(unused_mut)]
    let mut scope_211 = writer.prefix("SnsTopicArn");
    if let Some(var_212) = &input.sns_topic_arn {
        scope_211.string(var_212);
    }
    #[allow(unused_mut)]
    let mut scope_213 = writer.prefix("SourceType");
    if let Some(var_214) = &input.source_type {
        scope_213.string(var_214);
    }
    #[allow(unused_mut)]
    let mut scope_215 = writer.prefix("SourceIds");
    if let Some(var_216) = &input.source_ids {
        let mut list_218 = scope_215.start_list(false, Some("SourceId"));
        for item_217 in var_216 {
            #[allow(unused_mut)]
            let mut entry_219 = list_218.entry();
            entry_219.string(item_217);
        }
        list_218.finish();
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("EventCategories");
    if let Some(var_221) = &input.event_categories {
        let mut list_223 = scope_220.start_list(false, Some("EventCategory"));
        for item_222 in var_221 {
            #[allow(unused_mut)]
            let mut entry_224 = list_223.entry();
            entry_224.string(item_222);
        }
        list_223.finish();
    }
    #[allow(unused_mut)]
    let mut scope_225 = writer.prefix("Severity");
    if let Some(var_226) = &input.severity {
        scope_225.string(var_226);
    }
    #[allow(unused_mut)]
    let mut scope_227 = writer.prefix("Enabled");
    if let Some(var_228) = &input.enabled {
        scope_227.boolean(*var_228);
    }
    #[allow(unused_mut)]
    let mut scope_229 = writer.prefix("Tags");
    if let Some(var_230) = &input.tags {
        let mut list_232 = scope_229.start_list(false, Some("Tag"));
        for item_231 in var_230 {
            #[allow(unused_mut)]
            let mut entry_233 = list_232.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_233, item_231)?;
        }
        list_232.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_client_certificate(
    input: &crate::input::CreateHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_235) = &input.hsm_client_certificate_identifier {
        scope_234.string(var_235);
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("Tags");
    if let Some(var_237) = &input.tags {
        let mut list_239 = scope_236.start_list(false, Some("Tag"));
        for item_238 in var_237 {
            #[allow(unused_mut)]
            let mut entry_240 = list_239.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_240, item_238)?;
        }
        list_239.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_hsm_configuration(
    input: &crate::input::CreateHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_241 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_242) = &input.hsm_configuration_identifier {
        scope_241.string(var_242);
    }
    #[allow(unused_mut)]
    let mut scope_243 = writer.prefix("Description");
    if let Some(var_244) = &input.description {
        scope_243.string(var_244);
    }
    #[allow(unused_mut)]
    let mut scope_245 = writer.prefix("HsmIpAddress");
    if let Some(var_246) = &input.hsm_ip_address {
        scope_245.string(var_246);
    }
    #[allow(unused_mut)]
    let mut scope_247 = writer.prefix("HsmPartitionName");
    if let Some(var_248) = &input.hsm_partition_name {
        scope_247.string(var_248);
    }
    #[allow(unused_mut)]
    let mut scope_249 = writer.prefix("HsmPartitionPassword");
    if let Some(var_250) = &input.hsm_partition_password {
        scope_249.string(var_250);
    }
    #[allow(unused_mut)]
    let mut scope_251 = writer.prefix("HsmServerPublicCertificate");
    if let Some(var_252) = &input.hsm_server_public_certificate {
        scope_251.string(var_252);
    }
    #[allow(unused_mut)]
    let mut scope_253 = writer.prefix("Tags");
    if let Some(var_254) = &input.tags {
        let mut list_256 = scope_253.start_list(false, Some("Tag"));
        for item_255 in var_254 {
            #[allow(unused_mut)]
            let mut entry_257 = list_256.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_257, item_255)?;
        }
        list_256.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_scheduled_action(
    input: &crate::input::CreateScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_258 = writer.prefix("ScheduledActionName");
    if let Some(var_259) = &input.scheduled_action_name {
        scope_258.string(var_259);
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("TargetAction");
    if let Some(var_261) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_260, var_261,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_262 = writer.prefix("Schedule");
    if let Some(var_263) = &input.schedule {
        scope_262.string(var_263);
    }
    #[allow(unused_mut)]
    let mut scope_264 = writer.prefix("IamRole");
    if let Some(var_265) = &input.iam_role {
        scope_264.string(var_265);
    }
    #[allow(unused_mut)]
    let mut scope_266 = writer.prefix("ScheduledActionDescription");
    if let Some(var_267) = &input.scheduled_action_description {
        scope_266.string(var_267);
    }
    #[allow(unused_mut)]
    let mut scope_268 = writer.prefix("StartTime");
    if let Some(var_269) = &input.start_time {
        scope_268.date_time(var_269, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_270 = writer.prefix("EndTime");
    if let Some(var_271) = &input.end_time {
        scope_270.date_time(var_271, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_272 = writer.prefix("Enable");
    if let Some(var_273) = &input.enable {
        scope_272.boolean(*var_273);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_copy_grant(
    input: &crate::input::CreateSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_274 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_275) = &input.snapshot_copy_grant_name {
        scope_274.string(var_275);
    }
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("KmsKeyId");
    if let Some(var_277) = &input.kms_key_id {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("Tags");
    if let Some(var_279) = &input.tags {
        let mut list_281 = scope_278.start_list(false, Some("Tag"));
        for item_280 in var_279 {
            #[allow(unused_mut)]
            let mut entry_282 = list_281.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_282, item_280)?;
        }
        list_281.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_snapshot_schedule(
    input: &crate::input::CreateSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_283 = writer.prefix("ScheduleDefinitions");
    if let Some(var_284) = &input.schedule_definitions {
        let mut list_286 = scope_283.start_list(false, Some("ScheduleDefinition"));
        for item_285 in var_284 {
            #[allow(unused_mut)]
            let mut entry_287 = list_286.entry();
            entry_287.string(item_285);
        }
        list_286.finish();
    }
    #[allow(unused_mut)]
    let mut scope_288 = writer.prefix("ScheduleIdentifier");
    if let Some(var_289) = &input.schedule_identifier {
        scope_288.string(var_289);
    }
    #[allow(unused_mut)]
    let mut scope_290 = writer.prefix("ScheduleDescription");
    if let Some(var_291) = &input.schedule_description {
        scope_290.string(var_291);
    }
    #[allow(unused_mut)]
    let mut scope_292 = writer.prefix("Tags");
    if let Some(var_293) = &input.tags {
        let mut list_295 = scope_292.start_list(false, Some("Tag"));
        for item_294 in var_293 {
            #[allow(unused_mut)]
            let mut entry_296 = list_295.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_296, item_294)?;
        }
        list_295.finish();
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("DryRun");
    if let Some(var_298) = &input.dry_run {
        scope_297.boolean(*var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("NextInvocations");
    if let Some(var_300) = &input.next_invocations {
        scope_299.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_300).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_tags(
    input: &crate::input::CreateTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_301 = writer.prefix("ResourceName");
    if let Some(var_302) = &input.resource_name {
        scope_301.string(var_302);
    }
    #[allow(unused_mut)]
    let mut scope_303 = writer.prefix("Tags");
    if let Some(var_304) = &input.tags {
        let mut list_306 = scope_303.start_list(false, Some("Tag"));
        for item_305 in var_304 {
            #[allow(unused_mut)]
            let mut entry_307 = list_306.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_307, item_305)?;
        }
        list_306.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_usage_limit(
    input: &crate::input::CreateUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_308 = writer.prefix("ClusterIdentifier");
    if let Some(var_309) = &input.cluster_identifier {
        scope_308.string(var_309);
    }
    #[allow(unused_mut)]
    let mut scope_310 = writer.prefix("FeatureType");
    if let Some(var_311) = &input.feature_type {
        scope_310.string(var_311.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_312 = writer.prefix("LimitType");
    if let Some(var_313) = &input.limit_type {
        scope_312.string(var_313.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_314 = writer.prefix("Amount");
    {
        scope_314.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.amount).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("Period");
    if let Some(var_316) = &input.period {
        scope_315.string(var_316.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("BreachAction");
    if let Some(var_318) = &input.breach_action {
        scope_317.string(var_318.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("Tags");
    if let Some(var_320) = &input.tags {
        let mut list_322 = scope_319.start_list(false, Some("Tag"));
        for item_321 in var_320 {
            #[allow(unused_mut)]
            let mut entry_323 = list_322.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_323, item_321)?;
        }
        list_322.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deauthorize_data_share(
    input: &crate::input::DeauthorizeDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeauthorizeDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_324 = writer.prefix("DataShareArn");
    if let Some(var_325) = &input.data_share_arn {
        scope_324.string(var_325);
    }
    #[allow(unused_mut)]
    let mut scope_326 = writer.prefix("ConsumerIdentifier");
    if let Some(var_327) = &input.consumer_identifier {
        scope_326.string(var_327);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_authentication_profile(
    input: &crate::input::DeleteAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_328 = writer.prefix("AuthenticationProfileName");
    if let Some(var_329) = &input.authentication_profile_name {
        scope_328.string(var_329);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster(
    input: &crate::input::DeleteClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_330 = writer.prefix("ClusterIdentifier");
    if let Some(var_331) = &input.cluster_identifier {
        scope_330.string(var_331);
    }
    #[allow(unused_mut)]
    let mut scope_332 = writer.prefix("SkipFinalClusterSnapshot");
    if input.skip_final_cluster_snapshot {
        scope_332.boolean(input.skip_final_cluster_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("FinalClusterSnapshotIdentifier");
    if let Some(var_334) = &input.final_cluster_snapshot_identifier {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("FinalClusterSnapshotRetentionPeriod");
    if let Some(var_336) = &input.final_cluster_snapshot_retention_period {
        scope_335.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_parameter_group(
    input: &crate::input::DeleteClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("ParameterGroupName");
    if let Some(var_338) = &input.parameter_group_name {
        scope_337.string(var_338);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_security_group(
    input: &crate::input::DeleteClusterSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSecurityGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_340) = &input.cluster_security_group_name {
        scope_339.string(var_340);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_snapshot(
    input: &crate::input::DeleteClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("SnapshotIdentifier");
    if let Some(var_342) = &input.snapshot_identifier {
        scope_341.string(var_342);
    }
    #[allow(unused_mut)]
    let mut scope_343 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_344) = &input.snapshot_cluster_identifier {
        scope_343.string(var_344);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_cluster_subnet_group(
    input: &crate::input::DeleteClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_345 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_346) = &input.cluster_subnet_group_name {
        scope_345.string(var_346);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_endpoint_access(
    input: &crate::input::DeleteEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_347 = writer.prefix("EndpointName");
    if let Some(var_348) = &input.endpoint_name {
        scope_347.string(var_348);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_349 = writer.prefix("SubscriptionName");
    if let Some(var_350) = &input.subscription_name {
        scope_349.string(var_350);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_client_certificate(
    input: &crate::input::DeleteHsmClientCertificateInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmClientCertificate", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_351 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_352) = &input.hsm_client_certificate_identifier {
        scope_351.string(var_352);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_hsm_configuration(
    input: &crate::input::DeleteHsmConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteHsmConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_353 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_354) = &input.hsm_configuration_identifier {
        scope_353.string(var_354);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_partner(
    input: &crate::input::DeletePartnerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeletePartner", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_355 = writer.prefix("AccountId");
    if let Some(var_356) = &input.account_id {
        scope_355.string(var_356);
    }
    #[allow(unused_mut)]
    let mut scope_357 = writer.prefix("ClusterIdentifier");
    if let Some(var_358) = &input.cluster_identifier {
        scope_357.string(var_358);
    }
    #[allow(unused_mut)]
    let mut scope_359 = writer.prefix("DatabaseName");
    if let Some(var_360) = &input.database_name {
        scope_359.string(var_360);
    }
    #[allow(unused_mut)]
    let mut scope_361 = writer.prefix("PartnerName");
    if let Some(var_362) = &input.partner_name {
        scope_361.string(var_362);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_scheduled_action(
    input: &crate::input::DeleteScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_363 = writer.prefix("ScheduledActionName");
    if let Some(var_364) = &input.scheduled_action_name {
        scope_363.string(var_364);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_copy_grant(
    input: &crate::input::DeleteSnapshotCopyGrantInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotCopyGrant", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_365 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_366) = &input.snapshot_copy_grant_name {
        scope_365.string(var_366);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_snapshot_schedule(
    input: &crate::input::DeleteSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_367 = writer.prefix("ScheduleIdentifier");
    if let Some(var_368) = &input.schedule_identifier {
        scope_367.string(var_368);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_tags(
    input: &crate::input::DeleteTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_369 = writer.prefix("ResourceName");
    if let Some(var_370) = &input.resource_name {
        scope_369.string(var_370);
    }
    #[allow(unused_mut)]
    let mut scope_371 = writer.prefix("TagKeys");
    if let Some(var_372) = &input.tag_keys {
        let mut list_374 = scope_371.start_list(false, Some("TagKey"));
        for item_373 in var_372 {
            #[allow(unused_mut)]
            let mut entry_375 = list_374.entry();
            entry_375.string(item_373);
        }
        list_374.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_usage_limit(
    input: &crate::input::DeleteUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("UsageLimitId");
    if let Some(var_377) = &input.usage_limit_id {
        scope_376.string(var_377);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("AttributeNames");
    if let Some(var_379) = &input.attribute_names {
        let mut list_381 = scope_378.start_list(false, Some("AttributeName"));
        for item_380 in var_379 {
            #[allow(unused_mut)]
            let mut entry_382 = list_381.entry();
            entry_382.string(item_380);
        }
        list_381.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_authentication_profiles(
    input: &crate::input::DescribeAuthenticationProfilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeAuthenticationProfiles",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_383 = writer.prefix("AuthenticationProfileName");
    if let Some(var_384) = &input.authentication_profile_name {
        scope_383.string(var_384);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_db_revisions(
    input: &crate::input::DescribeClusterDbRevisionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterDbRevisions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("ClusterIdentifier");
    if let Some(var_386) = &input.cluster_identifier {
        scope_385.string(var_386);
    }
    #[allow(unused_mut)]
    let mut scope_387 = writer.prefix("MaxRecords");
    if let Some(var_388) = &input.max_records {
        scope_387.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_388).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_389 = writer.prefix("Marker");
    if let Some(var_390) = &input.marker {
        scope_389.string(var_390);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameter_groups(
    input: &crate::input::DescribeClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeClusterParameterGroups",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_391 = writer.prefix("ParameterGroupName");
    if let Some(var_392) = &input.parameter_group_name {
        scope_391.string(var_392);
    }
    #[allow(unused_mut)]
    let mut scope_393 = writer.prefix("MaxRecords");
    if let Some(var_394) = &input.max_records {
        scope_393.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_394).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_395 = writer.prefix("Marker");
    if let Some(var_396) = &input.marker {
        scope_395.string(var_396);
    }
    #[allow(unused_mut)]
    let mut scope_397 = writer.prefix("TagKeys");
    if let Some(var_398) = &input.tag_keys {
        let mut list_400 = scope_397.start_list(false, Some("TagKey"));
        for item_399 in var_398 {
            #[allow(unused_mut)]
            let mut entry_401 = list_400.entry();
            entry_401.string(item_399);
        }
        list_400.finish();
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("TagValues");
    if let Some(var_403) = &input.tag_values {
        let mut list_405 = scope_402.start_list(false, Some("TagValue"));
        for item_404 in var_403 {
            #[allow(unused_mut)]
            let mut entry_406 = list_405.entry();
            entry_406.string(item_404);
        }
        list_405.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_parameters(
    input: &crate::input::DescribeClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterParameters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_407 = writer.prefix("ParameterGroupName");
    if let Some(var_408) = &input.parameter_group_name {
        scope_407.string(var_408);
    }
    #[allow(unused_mut)]
    let mut scope_409 = writer.prefix("Source");
    if let Some(var_410) = &input.source {
        scope_409.string(var_410);
    }
    #[allow(unused_mut)]
    let mut scope_411 = writer.prefix("MaxRecords");
    if let Some(var_412) = &input.max_records {
        scope_411.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_413 = writer.prefix("Marker");
    if let Some(var_414) = &input.marker {
        scope_413.string(var_414);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_clusters(
    input: &crate::input::DescribeClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusters", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_415 = writer.prefix("ClusterIdentifier");
    if let Some(var_416) = &input.cluster_identifier {
        scope_415.string(var_416);
    }
    #[allow(unused_mut)]
    let mut scope_417 = writer.prefix("MaxRecords");
    if let Some(var_418) = &input.max_records {
        scope_417.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_418).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_419 = writer.prefix("Marker");
    if let Some(var_420) = &input.marker {
        scope_419.string(var_420);
    }
    #[allow(unused_mut)]
    let mut scope_421 = writer.prefix("TagKeys");
    if let Some(var_422) = &input.tag_keys {
        let mut list_424 = scope_421.start_list(false, Some("TagKey"));
        for item_423 in var_422 {
            #[allow(unused_mut)]
            let mut entry_425 = list_424.entry();
            entry_425.string(item_423);
        }
        list_424.finish();
    }
    #[allow(unused_mut)]
    let mut scope_426 = writer.prefix("TagValues");
    if let Some(var_427) = &input.tag_values {
        let mut list_429 = scope_426.start_list(false, Some("TagValue"));
        for item_428 in var_427 {
            #[allow(unused_mut)]
            let mut entry_430 = list_429.entry();
            entry_430.string(item_428);
        }
        list_429.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_security_groups(
    input: &crate::input::DescribeClusterSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSecurityGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_431 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_432) = &input.cluster_security_group_name {
        scope_431.string(var_432);
    }
    #[allow(unused_mut)]
    let mut scope_433 = writer.prefix("MaxRecords");
    if let Some(var_434) = &input.max_records {
        scope_433.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_434).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_435 = writer.prefix("Marker");
    if let Some(var_436) = &input.marker {
        scope_435.string(var_436);
    }
    #[allow(unused_mut)]
    let mut scope_437 = writer.prefix("TagKeys");
    if let Some(var_438) = &input.tag_keys {
        let mut list_440 = scope_437.start_list(false, Some("TagKey"));
        for item_439 in var_438 {
            #[allow(unused_mut)]
            let mut entry_441 = list_440.entry();
            entry_441.string(item_439);
        }
        list_440.finish();
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("TagValues");
    if let Some(var_443) = &input.tag_values {
        let mut list_445 = scope_442.start_list(false, Some("TagValue"));
        for item_444 in var_443 {
            #[allow(unused_mut)]
            let mut entry_446 = list_445.entry();
            entry_446.string(item_444);
        }
        list_445.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_snapshots(
    input: &crate::input::DescribeClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSnapshots", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_447 = writer.prefix("ClusterIdentifier");
    if let Some(var_448) = &input.cluster_identifier {
        scope_447.string(var_448);
    }
    #[allow(unused_mut)]
    let mut scope_449 = writer.prefix("SnapshotIdentifier");
    if let Some(var_450) = &input.snapshot_identifier {
        scope_449.string(var_450);
    }
    #[allow(unused_mut)]
    let mut scope_451 = writer.prefix("SnapshotType");
    if let Some(var_452) = &input.snapshot_type {
        scope_451.string(var_452);
    }
    #[allow(unused_mut)]
    let mut scope_453 = writer.prefix("StartTime");
    if let Some(var_454) = &input.start_time {
        scope_453.date_time(var_454, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_455 = writer.prefix("EndTime");
    if let Some(var_456) = &input.end_time {
        scope_455.date_time(var_456, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_457 = writer.prefix("MaxRecords");
    if let Some(var_458) = &input.max_records {
        scope_457.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_458).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("Marker");
    if let Some(var_460) = &input.marker {
        scope_459.string(var_460);
    }
    #[allow(unused_mut)]
    let mut scope_461 = writer.prefix("OwnerAccount");
    if let Some(var_462) = &input.owner_account {
        scope_461.string(var_462);
    }
    #[allow(unused_mut)]
    let mut scope_463 = writer.prefix("TagKeys");
    if let Some(var_464) = &input.tag_keys {
        let mut list_466 = scope_463.start_list(false, Some("TagKey"));
        for item_465 in var_464 {
            #[allow(unused_mut)]
            let mut entry_467 = list_466.entry();
            entry_467.string(item_465);
        }
        list_466.finish();
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("TagValues");
    if let Some(var_469) = &input.tag_values {
        let mut list_471 = scope_468.start_list(false, Some("TagValue"));
        for item_470 in var_469 {
            #[allow(unused_mut)]
            let mut entry_472 = list_471.entry();
            entry_472.string(item_470);
        }
        list_471.finish();
    }
    #[allow(unused_mut)]
    let mut scope_473 = writer.prefix("ClusterExists");
    if let Some(var_474) = &input.cluster_exists {
        scope_473.boolean(*var_474);
    }
    #[allow(unused_mut)]
    let mut scope_475 = writer.prefix("SortingEntities");
    if let Some(var_476) = &input.sorting_entities {
        let mut list_478 = scope_475.start_list(false, Some("SnapshotSortingEntity"));
        for item_477 in var_476 {
            #[allow(unused_mut)]
            let mut entry_479 = list_478.entry();
            crate::query_ser::serialize_structure_crate_model_snapshot_sorting_entity(
                entry_479, item_477,
            )?;
        }
        list_478.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_subnet_groups(
    input: &crate::input::DescribeClusterSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterSubnetGroups", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_481) = &input.cluster_subnet_group_name {
        scope_480.string(var_481);
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("MaxRecords");
    if let Some(var_483) = &input.max_records {
        scope_482.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_483).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("Marker");
    if let Some(var_485) = &input.marker {
        scope_484.string(var_485);
    }
    #[allow(unused_mut)]
    let mut scope_486 = writer.prefix("TagKeys");
    if let Some(var_487) = &input.tag_keys {
        let mut list_489 = scope_486.start_list(false, Some("TagKey"));
        for item_488 in var_487 {
            #[allow(unused_mut)]
            let mut entry_490 = list_489.entry();
            entry_490.string(item_488);
        }
        list_489.finish();
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("TagValues");
    if let Some(var_492) = &input.tag_values {
        let mut list_494 = scope_491.start_list(false, Some("TagValue"));
        for item_493 in var_492 {
            #[allow(unused_mut)]
            let mut entry_495 = list_494.entry();
            entry_495.string(item_493);
        }
        list_494.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_tracks(
    input: &crate::input::DescribeClusterTracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterTracks", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_496 = writer.prefix("MaintenanceTrackName");
    if let Some(var_497) = &input.maintenance_track_name {
        scope_496.string(var_497);
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("MaxRecords");
    if let Some(var_499) = &input.max_records {
        scope_498.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_499).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("Marker");
    if let Some(var_501) = &input.marker {
        scope_500.string(var_501);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_cluster_versions(
    input: &crate::input::DescribeClusterVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeClusterVersions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_502 = writer.prefix("ClusterVersion");
    if let Some(var_503) = &input.cluster_version {
        scope_502.string(var_503);
    }
    #[allow(unused_mut)]
    let mut scope_504 = writer.prefix("ClusterParameterGroupFamily");
    if let Some(var_505) = &input.cluster_parameter_group_family {
        scope_504.string(var_505);
    }
    #[allow(unused_mut)]
    let mut scope_506 = writer.prefix("MaxRecords");
    if let Some(var_507) = &input.max_records {
        scope_506.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_507).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_508 = writer.prefix("Marker");
    if let Some(var_509) = &input.marker {
        scope_508.string(var_509);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares(
    input: &crate::input::DescribeDataSharesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataShares", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("DataShareArn");
    if let Some(var_511) = &input.data_share_arn {
        scope_510.string(var_511);
    }
    #[allow(unused_mut)]
    let mut scope_512 = writer.prefix("MaxRecords");
    if let Some(var_513) = &input.max_records {
        scope_512.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_513).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("Marker");
    if let Some(var_515) = &input.marker {
        scope_514.string(var_515);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_consumer(
    input: &crate::input::DescribeDataSharesForConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_516 = writer.prefix("ConsumerArn");
    if let Some(var_517) = &input.consumer_arn {
        scope_516.string(var_517);
    }
    #[allow(unused_mut)]
    let mut scope_518 = writer.prefix("Status");
    if let Some(var_519) = &input.status {
        scope_518.string(var_519.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_520 = writer.prefix("MaxRecords");
    if let Some(var_521) = &input.max_records {
        scope_520.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_521).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_522 = writer.prefix("Marker");
    if let Some(var_523) = &input.marker {
        scope_522.string(var_523);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_data_shares_for_producer(
    input: &crate::input::DescribeDataSharesForProducerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDataSharesForProducer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_524 = writer.prefix("ProducerArn");
    if let Some(var_525) = &input.producer_arn {
        scope_524.string(var_525);
    }
    #[allow(unused_mut)]
    let mut scope_526 = writer.prefix("Status");
    if let Some(var_527) = &input.status {
        scope_526.string(var_527.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("MaxRecords");
    if let Some(var_529) = &input.max_records {
        scope_528.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_529).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_530 = writer.prefix("Marker");
    if let Some(var_531) = &input.marker {
        scope_530.string(var_531);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_default_cluster_parameters(
    input: &crate::input::DescribeDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDefaultClusterParameters",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_532 = writer.prefix("ParameterGroupFamily");
    if let Some(var_533) = &input.parameter_group_family {
        scope_532.string(var_533);
    }
    #[allow(unused_mut)]
    let mut scope_534 = writer.prefix("MaxRecords");
    if let Some(var_535) = &input.max_records {
        scope_534.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_535).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_536 = writer.prefix("Marker");
    if let Some(var_537) = &input.marker {
        scope_536.string(var_537);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_access(
    input: &crate::input::DescribeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_538 = writer.prefix("ClusterIdentifier");
    if let Some(var_539) = &input.cluster_identifier {
        scope_538.string(var_539);
    }
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("ResourceOwner");
    if let Some(var_541) = &input.resource_owner {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("EndpointName");
    if let Some(var_543) = &input.endpoint_name {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("VpcId");
    if let Some(var_545) = &input.vpc_id {
        scope_544.string(var_545);
    }
    #[allow(unused_mut)]
    let mut scope_546 = writer.prefix("MaxRecords");
    if let Some(var_547) = &input.max_records {
        scope_546.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_547).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_548 = writer.prefix("Marker");
    if let Some(var_549) = &input.marker {
        scope_548.string(var_549);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_endpoint_authorization(
    input: &crate::input::DescribeEndpointAuthorizationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEndpointAuthorization", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_550 = writer.prefix("ClusterIdentifier");
    if let Some(var_551) = &input.cluster_identifier {
        scope_550.string(var_551);
    }
    #[allow(unused_mut)]
    let mut scope_552 = writer.prefix("Account");
    if let Some(var_553) = &input.account {
        scope_552.string(var_553);
    }
    #[allow(unused_mut)]
    let mut scope_554 = writer.prefix("Grantee");
    if let Some(var_555) = &input.grantee {
        scope_554.boolean(*var_555);
    }
    #[allow(unused_mut)]
    let mut scope_556 = writer.prefix("MaxRecords");
    if let Some(var_557) = &input.max_records {
        scope_556.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_557).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("Marker");
    if let Some(var_559) = &input.marker {
        scope_558.string(var_559);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("SourceType");
    if let Some(var_561) = &input.source_type {
        scope_560.string(var_561);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("SourceIdentifier");
    if let Some(var_563) = &input.source_identifier {
        scope_562.string(var_563);
    }
    #[allow(unused_mut)]
    let mut scope_564 = writer.prefix("SourceType");
    if let Some(var_565) = &input.source_type {
        scope_564.string(var_565.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_566 = writer.prefix("StartTime");
    if let Some(var_567) = &input.start_time {
        scope_566.date_time(var_567, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_568 = writer.prefix("EndTime");
    if let Some(var_569) = &input.end_time {
        scope_568.date_time(var_569, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_570 = writer.prefix("Duration");
    if let Some(var_571) = &input.duration {
        scope_570.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_571).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("MaxRecords");
    if let Some(var_573) = &input.max_records {
        scope_572.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("Marker");
    if let Some(var_575) = &input.marker {
        scope_574.string(var_575);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("SubscriptionName");
    if let Some(var_577) = &input.subscription_name {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("MaxRecords");
    if let Some(var_579) = &input.max_records {
        scope_578.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_580 = writer.prefix("Marker");
    if let Some(var_581) = &input.marker {
        scope_580.string(var_581);
    }
    #[allow(unused_mut)]
    let mut scope_582 = writer.prefix("TagKeys");
    if let Some(var_583) = &input.tag_keys {
        let mut list_585 = scope_582.start_list(false, Some("TagKey"));
        for item_584 in var_583 {
            #[allow(unused_mut)]
            let mut entry_586 = list_585.entry();
            entry_586.string(item_584);
        }
        list_585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_587 = writer.prefix("TagValues");
    if let Some(var_588) = &input.tag_values {
        let mut list_590 = scope_587.start_list(false, Some("TagValue"));
        for item_589 in var_588 {
            #[allow(unused_mut)]
            let mut entry_591 = list_590.entry();
            entry_591.string(item_589);
        }
        list_590.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_client_certificates(
    input: &crate::input::DescribeHsmClientCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmClientCertificates", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_592 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_593) = &input.hsm_client_certificate_identifier {
        scope_592.string(var_593);
    }
    #[allow(unused_mut)]
    let mut scope_594 = writer.prefix("MaxRecords");
    if let Some(var_595) = &input.max_records {
        scope_594.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_595).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_596 = writer.prefix("Marker");
    if let Some(var_597) = &input.marker {
        scope_596.string(var_597);
    }
    #[allow(unused_mut)]
    let mut scope_598 = writer.prefix("TagKeys");
    if let Some(var_599) = &input.tag_keys {
        let mut list_601 = scope_598.start_list(false, Some("TagKey"));
        for item_600 in var_599 {
            #[allow(unused_mut)]
            let mut entry_602 = list_601.entry();
            entry_602.string(item_600);
        }
        list_601.finish();
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("TagValues");
    if let Some(var_604) = &input.tag_values {
        let mut list_606 = scope_603.start_list(false, Some("TagValue"));
        for item_605 in var_604 {
            #[allow(unused_mut)]
            let mut entry_607 = list_606.entry();
            entry_607.string(item_605);
        }
        list_606.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_hsm_configurations(
    input: &crate::input::DescribeHsmConfigurationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeHsmConfigurations", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_608 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_609) = &input.hsm_configuration_identifier {
        scope_608.string(var_609);
    }
    #[allow(unused_mut)]
    let mut scope_610 = writer.prefix("MaxRecords");
    if let Some(var_611) = &input.max_records {
        scope_610.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_611).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_612 = writer.prefix("Marker");
    if let Some(var_613) = &input.marker {
        scope_612.string(var_613);
    }
    #[allow(unused_mut)]
    let mut scope_614 = writer.prefix("TagKeys");
    if let Some(var_615) = &input.tag_keys {
        let mut list_617 = scope_614.start_list(false, Some("TagKey"));
        for item_616 in var_615 {
            #[allow(unused_mut)]
            let mut entry_618 = list_617.entry();
            entry_618.string(item_616);
        }
        list_617.finish();
    }
    #[allow(unused_mut)]
    let mut scope_619 = writer.prefix("TagValues");
    if let Some(var_620) = &input.tag_values {
        let mut list_622 = scope_619.start_list(false, Some("TagValue"));
        for item_621 in var_620 {
            #[allow(unused_mut)]
            let mut entry_623 = list_622.entry();
            entry_623.string(item_621);
        }
        list_622.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_logging_status(
    input: &crate::input::DescribeLoggingStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeLoggingStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("ClusterIdentifier");
    if let Some(var_625) = &input.cluster_identifier {
        scope_624.string(var_625);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_node_configuration_options(
    input: &crate::input::DescribeNodeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeNodeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("ActionType");
    if let Some(var_627) = &input.action_type {
        scope_626.string(var_627.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("ClusterIdentifier");
    if let Some(var_629) = &input.cluster_identifier {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("SnapshotIdentifier");
    if let Some(var_631) = &input.snapshot_identifier {
        scope_630.string(var_631);
    }
    #[allow(unused_mut)]
    let mut scope_632 = writer.prefix("OwnerAccount");
    if let Some(var_633) = &input.owner_account {
        scope_632.string(var_633);
    }
    #[allow(unused_mut)]
    let mut scope_634 = writer.prefix("Filter");
    if let Some(var_635) = &input.filters {
        let mut list_637 = scope_634.start_list(false, Some("NodeConfigurationOptionsFilter"));
        for item_636 in var_635 {
            #[allow(unused_mut)]
            let mut entry_638 = list_637.entry();
            crate::query_ser::serialize_structure_crate_model_node_configuration_options_filter(
                entry_638, item_636,
            )?;
        }
        list_637.finish();
    }
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("Marker");
    if let Some(var_640) = &input.marker {
        scope_639.string(var_640);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("MaxRecords");
    if let Some(var_642) = &input.max_records {
        scope_641.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_642).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_cluster_options(
    input: &crate::input::DescribeOrderableClusterOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableClusterOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_643 = writer.prefix("ClusterVersion");
    if let Some(var_644) = &input.cluster_version {
        scope_643.string(var_644);
    }
    #[allow(unused_mut)]
    let mut scope_645 = writer.prefix("NodeType");
    if let Some(var_646) = &input.node_type {
        scope_645.string(var_646);
    }
    #[allow(unused_mut)]
    let mut scope_647 = writer.prefix("MaxRecords");
    if let Some(var_648) = &input.max_records {
        scope_647.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_648).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_649 = writer.prefix("Marker");
    if let Some(var_650) = &input.marker {
        scope_649.string(var_650);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_partners(
    input: &crate::input::DescribePartnersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribePartners", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_651 = writer.prefix("AccountId");
    if let Some(var_652) = &input.account_id {
        scope_651.string(var_652);
    }
    #[allow(unused_mut)]
    let mut scope_653 = writer.prefix("ClusterIdentifier");
    if let Some(var_654) = &input.cluster_identifier {
        scope_653.string(var_654);
    }
    #[allow(unused_mut)]
    let mut scope_655 = writer.prefix("DatabaseName");
    if let Some(var_656) = &input.database_name {
        scope_655.string(var_656);
    }
    #[allow(unused_mut)]
    let mut scope_657 = writer.prefix("PartnerName");
    if let Some(var_658) = &input.partner_name {
        scope_657.string(var_658);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_exchange_status(
    input: &crate::input::DescribeReservedNodeExchangeStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedNodeExchangeStatus",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_659 = writer.prefix("ReservedNodeId");
    if let Some(var_660) = &input.reserved_node_id {
        scope_659.string(var_660);
    }
    #[allow(unused_mut)]
    let mut scope_661 = writer.prefix("ReservedNodeExchangeRequestId");
    if let Some(var_662) = &input.reserved_node_exchange_request_id {
        scope_661.string(var_662);
    }
    #[allow(unused_mut)]
    let mut scope_663 = writer.prefix("MaxRecords");
    if let Some(var_664) = &input.max_records {
        scope_663.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_664).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_665 = writer.prefix("Marker");
    if let Some(var_666) = &input.marker {
        scope_665.string(var_666);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_node_offerings(
    input: &crate::input::DescribeReservedNodeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodeOfferings", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_667 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_668) = &input.reserved_node_offering_id {
        scope_667.string(var_668);
    }
    #[allow(unused_mut)]
    let mut scope_669 = writer.prefix("MaxRecords");
    if let Some(var_670) = &input.max_records {
        scope_669.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_670).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_671 = writer.prefix("Marker");
    if let Some(var_672) = &input.marker {
        scope_671.string(var_672);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_nodes(
    input: &crate::input::DescribeReservedNodesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedNodes", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_673 = writer.prefix("ReservedNodeId");
    if let Some(var_674) = &input.reserved_node_id {
        scope_673.string(var_674);
    }
    #[allow(unused_mut)]
    let mut scope_675 = writer.prefix("MaxRecords");
    if let Some(var_676) = &input.max_records {
        scope_675.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_676).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_677 = writer.prefix("Marker");
    if let Some(var_678) = &input.marker {
        scope_677.string(var_678);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_resize(
    input: &crate::input::DescribeResizeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeResize", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("ClusterIdentifier");
    if let Some(var_680) = &input.cluster_identifier {
        scope_679.string(var_680);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_scheduled_actions(
    input: &crate::input::DescribeScheduledActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeScheduledActions", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_681 = writer.prefix("ScheduledActionName");
    if let Some(var_682) = &input.scheduled_action_name {
        scope_681.string(var_682);
    }
    #[allow(unused_mut)]
    let mut scope_683 = writer.prefix("TargetActionType");
    if let Some(var_684) = &input.target_action_type {
        scope_683.string(var_684.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_685 = writer.prefix("StartTime");
    if let Some(var_686) = &input.start_time {
        scope_685.date_time(var_686, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_687 = writer.prefix("EndTime");
    if let Some(var_688) = &input.end_time {
        scope_687.date_time(var_688, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_689 = writer.prefix("Active");
    if let Some(var_690) = &input.active {
        scope_689.boolean(*var_690);
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("Filters");
    if let Some(var_692) = &input.filters {
        let mut list_694 = scope_691.start_list(false, Some("ScheduledActionFilter"));
        for item_693 in var_692 {
            #[allow(unused_mut)]
            let mut entry_695 = list_694.entry();
            crate::query_ser::serialize_structure_crate_model_scheduled_action_filter(
                entry_695, item_693,
            )?;
        }
        list_694.finish();
    }
    #[allow(unused_mut)]
    let mut scope_696 = writer.prefix("Marker");
    if let Some(var_697) = &input.marker {
        scope_696.string(var_697);
    }
    #[allow(unused_mut)]
    let mut scope_698 = writer.prefix("MaxRecords");
    if let Some(var_699) = &input.max_records {
        scope_698.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_699).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_copy_grants(
    input: &crate::input::DescribeSnapshotCopyGrantsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotCopyGrants", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_700 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_701) = &input.snapshot_copy_grant_name {
        scope_700.string(var_701);
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("MaxRecords");
    if let Some(var_703) = &input.max_records {
        scope_702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_703).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Marker");
    if let Some(var_705) = &input.marker {
        scope_704.string(var_705);
    }
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("TagKeys");
    if let Some(var_707) = &input.tag_keys {
        let mut list_709 = scope_706.start_list(false, Some("TagKey"));
        for item_708 in var_707 {
            #[allow(unused_mut)]
            let mut entry_710 = list_709.entry();
            entry_710.string(item_708);
        }
        list_709.finish();
    }
    #[allow(unused_mut)]
    let mut scope_711 = writer.prefix("TagValues");
    if let Some(var_712) = &input.tag_values {
        let mut list_714 = scope_711.start_list(false, Some("TagValue"));
        for item_713 in var_712 {
            #[allow(unused_mut)]
            let mut entry_715 = list_714.entry();
            entry_715.string(item_713);
        }
        list_714.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_snapshot_schedules(
    input: &crate::input::DescribeSnapshotSchedulesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSnapshotSchedules", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_716 = writer.prefix("ClusterIdentifier");
    if let Some(var_717) = &input.cluster_identifier {
        scope_716.string(var_717);
    }
    #[allow(unused_mut)]
    let mut scope_718 = writer.prefix("ScheduleIdentifier");
    if let Some(var_719) = &input.schedule_identifier {
        scope_718.string(var_719);
    }
    #[allow(unused_mut)]
    let mut scope_720 = writer.prefix("TagKeys");
    if let Some(var_721) = &input.tag_keys {
        let mut list_723 = scope_720.start_list(false, Some("TagKey"));
        for item_722 in var_721 {
            #[allow(unused_mut)]
            let mut entry_724 = list_723.entry();
            entry_724.string(item_722);
        }
        list_723.finish();
    }
    #[allow(unused_mut)]
    let mut scope_725 = writer.prefix("TagValues");
    if let Some(var_726) = &input.tag_values {
        let mut list_728 = scope_725.start_list(false, Some("TagValue"));
        for item_727 in var_726 {
            #[allow(unused_mut)]
            let mut entry_729 = list_728.entry();
            entry_729.string(item_727);
        }
        list_728.finish();
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("Marker");
    if let Some(var_731) = &input.marker {
        scope_730.string(var_731);
    }
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("MaxRecords");
    if let Some(var_733) = &input.max_records {
        scope_732.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_733).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_storage(
    input: &crate::input::DescribeStorageInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeStorage", "2012-12-01");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_table_restore_status(
    input: &crate::input::DescribeTableRestoreStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeTableRestoreStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("ClusterIdentifier");
    if let Some(var_735) = &input.cluster_identifier {
        scope_734.string(var_735);
    }
    #[allow(unused_mut)]
    let mut scope_736 = writer.prefix("TableRestoreRequestId");
    if let Some(var_737) = &input.table_restore_request_id {
        scope_736.string(var_737);
    }
    #[allow(unused_mut)]
    let mut scope_738 = writer.prefix("MaxRecords");
    if let Some(var_739) = &input.max_records {
        scope_738.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_739).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_740 = writer.prefix("Marker");
    if let Some(var_741) = &input.marker {
        scope_740.string(var_741);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_tags(
    input: &crate::input::DescribeTagsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeTags", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_742 = writer.prefix("ResourceName");
    if let Some(var_743) = &input.resource_name {
        scope_742.string(var_743);
    }
    #[allow(unused_mut)]
    let mut scope_744 = writer.prefix("ResourceType");
    if let Some(var_745) = &input.resource_type {
        scope_744.string(var_745);
    }
    #[allow(unused_mut)]
    let mut scope_746 = writer.prefix("MaxRecords");
    if let Some(var_747) = &input.max_records {
        scope_746.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_747).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_748 = writer.prefix("Marker");
    if let Some(var_749) = &input.marker {
        scope_748.string(var_749);
    }
    #[allow(unused_mut)]
    let mut scope_750 = writer.prefix("TagKeys");
    if let Some(var_751) = &input.tag_keys {
        let mut list_753 = scope_750.start_list(false, Some("TagKey"));
        for item_752 in var_751 {
            #[allow(unused_mut)]
            let mut entry_754 = list_753.entry();
            entry_754.string(item_752);
        }
        list_753.finish();
    }
    #[allow(unused_mut)]
    let mut scope_755 = writer.prefix("TagValues");
    if let Some(var_756) = &input.tag_values {
        let mut list_758 = scope_755.start_list(false, Some("TagValue"));
        for item_757 in var_756 {
            #[allow(unused_mut)]
            let mut entry_759 = list_758.entry();
            entry_759.string(item_757);
        }
        list_758.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_usage_limits(
    input: &crate::input::DescribeUsageLimitsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeUsageLimits", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_760 = writer.prefix("UsageLimitId");
    if let Some(var_761) = &input.usage_limit_id {
        scope_760.string(var_761);
    }
    #[allow(unused_mut)]
    let mut scope_762 = writer.prefix("ClusterIdentifier");
    if let Some(var_763) = &input.cluster_identifier {
        scope_762.string(var_763);
    }
    #[allow(unused_mut)]
    let mut scope_764 = writer.prefix("FeatureType");
    if let Some(var_765) = &input.feature_type {
        scope_764.string(var_765.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_766 = writer.prefix("MaxRecords");
    if let Some(var_767) = &input.max_records {
        scope_766.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_767).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("Marker");
    if let Some(var_769) = &input.marker {
        scope_768.string(var_769);
    }
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("TagKeys");
    if let Some(var_771) = &input.tag_keys {
        let mut list_773 = scope_770.start_list(false, Some("TagKey"));
        for item_772 in var_771 {
            #[allow(unused_mut)]
            let mut entry_774 = list_773.entry();
            entry_774.string(item_772);
        }
        list_773.finish();
    }
    #[allow(unused_mut)]
    let mut scope_775 = writer.prefix("TagValues");
    if let Some(var_776) = &input.tag_values {
        let mut list_778 = scope_775.start_list(false, Some("TagValue"));
        for item_777 in var_776 {
            #[allow(unused_mut)]
            let mut entry_779 = list_778.entry();
            entry_779.string(item_777);
        }
        list_778.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_logging(
    input: &crate::input::DisableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DisableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_780 = writer.prefix("ClusterIdentifier");
    if let Some(var_781) = &input.cluster_identifier {
        scope_780.string(var_781);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disable_snapshot_copy(
    input: &crate::input::DisableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_782 = writer.prefix("ClusterIdentifier");
    if let Some(var_783) = &input.cluster_identifier {
        scope_782.string(var_783);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_disassociate_data_share_consumer(
    input: &crate::input::DisassociateDataShareConsumerInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DisassociateDataShareConsumer", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_784 = writer.prefix("DataShareArn");
    if let Some(var_785) = &input.data_share_arn {
        scope_784.string(var_785);
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("DisassociateEntireAccount");
    if let Some(var_787) = &input.disassociate_entire_account {
        scope_786.boolean(*var_787);
    }
    #[allow(unused_mut)]
    let mut scope_788 = writer.prefix("ConsumerArn");
    if let Some(var_789) = &input.consumer_arn {
        scope_788.string(var_789);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_logging(
    input: &crate::input::EnableLoggingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "EnableLogging", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_790 = writer.prefix("ClusterIdentifier");
    if let Some(var_791) = &input.cluster_identifier {
        scope_790.string(var_791);
    }
    #[allow(unused_mut)]
    let mut scope_792 = writer.prefix("BucketName");
    if let Some(var_793) = &input.bucket_name {
        scope_792.string(var_793);
    }
    #[allow(unused_mut)]
    let mut scope_794 = writer.prefix("S3KeyPrefix");
    if let Some(var_795) = &input.s3_key_prefix {
        scope_794.string(var_795);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_enable_snapshot_copy(
    input: &crate::input::EnableSnapshotCopyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "EnableSnapshotCopy", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_796 = writer.prefix("ClusterIdentifier");
    if let Some(var_797) = &input.cluster_identifier {
        scope_796.string(var_797);
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("DestinationRegion");
    if let Some(var_799) = &input.destination_region {
        scope_798.string(var_799);
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("RetentionPeriod");
    if let Some(var_801) = &input.retention_period {
        scope_800.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_801).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("SnapshotCopyGrantName");
    if let Some(var_803) = &input.snapshot_copy_grant_name {
        scope_802.string(var_803);
    }
    #[allow(unused_mut)]
    let mut scope_804 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_805) = &input.manual_snapshot_retention_period {
        scope_804.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_805).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_cluster_credentials(
    input: &crate::input::GetClusterCredentialsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetClusterCredentials", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_806 = writer.prefix("DbUser");
    if let Some(var_807) = &input.db_user {
        scope_806.string(var_807);
    }
    #[allow(unused_mut)]
    let mut scope_808 = writer.prefix("DbName");
    if let Some(var_809) = &input.db_name {
        scope_808.string(var_809);
    }
    #[allow(unused_mut)]
    let mut scope_810 = writer.prefix("ClusterIdentifier");
    if let Some(var_811) = &input.cluster_identifier {
        scope_810.string(var_811);
    }
    #[allow(unused_mut)]
    let mut scope_812 = writer.prefix("DurationSeconds");
    if let Some(var_813) = &input.duration_seconds {
        scope_812.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_813).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_814 = writer.prefix("AutoCreate");
    if let Some(var_815) = &input.auto_create {
        scope_814.boolean(*var_815);
    }
    #[allow(unused_mut)]
    let mut scope_816 = writer.prefix("DbGroups");
    if let Some(var_817) = &input.db_groups {
        let mut list_819 = scope_816.start_list(false, Some("DbGroup"));
        for item_818 in var_817 {
            #[allow(unused_mut)]
            let mut entry_820 = list_819.entry();
            entry_820.string(item_818);
        }
        list_819.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_configuration_options(
    input: &crate::input::GetReservedNodeExchangeConfigurationOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeConfigurationOptions",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_821 = writer.prefix("ActionType");
    if let Some(var_822) = &input.action_type {
        scope_821.string(var_822.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_823 = writer.prefix("ClusterIdentifier");
    if let Some(var_824) = &input.cluster_identifier {
        scope_823.string(var_824);
    }
    #[allow(unused_mut)]
    let mut scope_825 = writer.prefix("SnapshotIdentifier");
    if let Some(var_826) = &input.snapshot_identifier {
        scope_825.string(var_826);
    }
    #[allow(unused_mut)]
    let mut scope_827 = writer.prefix("MaxRecords");
    if let Some(var_828) = &input.max_records {
        scope_827.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_828).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_829 = writer.prefix("Marker");
    if let Some(var_830) = &input.marker {
        scope_829.string(var_830);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_reserved_node_exchange_offerings(
    input: &crate::input::GetReservedNodeExchangeOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetReservedNodeExchangeOfferings",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("ReservedNodeId");
    if let Some(var_832) = &input.reserved_node_id {
        scope_831.string(var_832);
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("MaxRecords");
    if let Some(var_834) = &input.max_records {
        scope_833.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_834).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("Marker");
    if let Some(var_836) = &input.marker {
        scope_835.string(var_836);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_aqua_configuration(
    input: &crate::input::ModifyAquaConfigurationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAquaConfiguration", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("ClusterIdentifier");
    if let Some(var_838) = &input.cluster_identifier {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_840) = &input.aqua_configuration_status {
        scope_839.string(var_840.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_authentication_profile(
    input: &crate::input::ModifyAuthenticationProfileInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyAuthenticationProfile", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("AuthenticationProfileName");
    if let Some(var_842) = &input.authentication_profile_name {
        scope_841.string(var_842);
    }
    #[allow(unused_mut)]
    let mut scope_843 = writer.prefix("AuthenticationProfileContent");
    if let Some(var_844) = &input.authentication_profile_content {
        scope_843.string(var_844);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster(
    input: &crate::input::ModifyClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_845 = writer.prefix("ClusterIdentifier");
    if let Some(var_846) = &input.cluster_identifier {
        scope_845.string(var_846);
    }
    #[allow(unused_mut)]
    let mut scope_847 = writer.prefix("ClusterType");
    if let Some(var_848) = &input.cluster_type {
        scope_847.string(var_848);
    }
    #[allow(unused_mut)]
    let mut scope_849 = writer.prefix("NodeType");
    if let Some(var_850) = &input.node_type {
        scope_849.string(var_850);
    }
    #[allow(unused_mut)]
    let mut scope_851 = writer.prefix("NumberOfNodes");
    if let Some(var_852) = &input.number_of_nodes {
        scope_851.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_852).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_853 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_854) = &input.cluster_security_groups {
        let mut list_856 = scope_853.start_list(false, Some("ClusterSecurityGroupName"));
        for item_855 in var_854 {
            #[allow(unused_mut)]
            let mut entry_857 = list_856.entry();
            entry_857.string(item_855);
        }
        list_856.finish();
    }
    #[allow(unused_mut)]
    let mut scope_858 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_859) = &input.vpc_security_group_ids {
        let mut list_861 = scope_858.start_list(false, Some("VpcSecurityGroupId"));
        for item_860 in var_859 {
            #[allow(unused_mut)]
            let mut entry_862 = list_861.entry();
            entry_862.string(item_860);
        }
        list_861.finish();
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("MasterUserPassword");
    if let Some(var_864) = &input.master_user_password {
        scope_863.string(var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_866) = &input.cluster_parameter_group_name {
        scope_865.string(var_866);
    }
    #[allow(unused_mut)]
    let mut scope_867 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_868) = &input.automated_snapshot_retention_period {
        scope_867.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_868).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_869 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_870) = &input.manual_snapshot_retention_period {
        scope_869.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_870).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_871 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_872) = &input.preferred_maintenance_window {
        scope_871.string(var_872);
    }
    #[allow(unused_mut)]
    let mut scope_873 = writer.prefix("ClusterVersion");
    if let Some(var_874) = &input.cluster_version {
        scope_873.string(var_874);
    }
    #[allow(unused_mut)]
    let mut scope_875 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_876) = &input.allow_version_upgrade {
        scope_875.boolean(*var_876);
    }
    #[allow(unused_mut)]
    let mut scope_877 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_878) = &input.hsm_client_certificate_identifier {
        scope_877.string(var_878);
    }
    #[allow(unused_mut)]
    let mut scope_879 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_880) = &input.hsm_configuration_identifier {
        scope_879.string(var_880);
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("NewClusterIdentifier");
    if let Some(var_882) = &input.new_cluster_identifier {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("PubliclyAccessible");
    if let Some(var_884) = &input.publicly_accessible {
        scope_883.boolean(*var_884);
    }
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("ElasticIp");
    if let Some(var_886) = &input.elastic_ip {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_888) = &input.enhanced_vpc_routing {
        scope_887.boolean(*var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("MaintenanceTrackName");
    if let Some(var_890) = &input.maintenance_track_name {
        scope_889.string(var_890);
    }
    #[allow(unused_mut)]
    let mut scope_891 = writer.prefix("Encrypted");
    if let Some(var_892) = &input.encrypted {
        scope_891.boolean(*var_892);
    }
    #[allow(unused_mut)]
    let mut scope_893 = writer.prefix("KmsKeyId");
    if let Some(var_894) = &input.kms_key_id {
        scope_893.string(var_894);
    }
    #[allow(unused_mut)]
    let mut scope_895 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_896) = &input.availability_zone_relocation {
        scope_895.boolean(*var_896);
    }
    #[allow(unused_mut)]
    let mut scope_897 = writer.prefix("AvailabilityZone");
    if let Some(var_898) = &input.availability_zone {
        scope_897.string(var_898);
    }
    #[allow(unused_mut)]
    let mut scope_899 = writer.prefix("Port");
    if let Some(var_900) = &input.port {
        scope_899.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_900).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_db_revision(
    input: &crate::input::ModifyClusterDbRevisionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterDbRevision", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_901 = writer.prefix("ClusterIdentifier");
    if let Some(var_902) = &input.cluster_identifier {
        scope_901.string(var_902);
    }
    #[allow(unused_mut)]
    let mut scope_903 = writer.prefix("RevisionTarget");
    if let Some(var_904) = &input.revision_target {
        scope_903.string(var_904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_iam_roles(
    input: &crate::input::ModifyClusterIamRolesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterIamRoles", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_905 = writer.prefix("ClusterIdentifier");
    if let Some(var_906) = &input.cluster_identifier {
        scope_905.string(var_906);
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("AddIamRoles");
    if let Some(var_908) = &input.add_iam_roles {
        let mut list_910 = scope_907.start_list(false, Some("IamRoleArn"));
        for item_909 in var_908 {
            #[allow(unused_mut)]
            let mut entry_911 = list_910.entry();
            entry_911.string(item_909);
        }
        list_910.finish();
    }
    #[allow(unused_mut)]
    let mut scope_912 = writer.prefix("RemoveIamRoles");
    if let Some(var_913) = &input.remove_iam_roles {
        let mut list_915 = scope_912.start_list(false, Some("IamRoleArn"));
        for item_914 in var_913 {
            #[allow(unused_mut)]
            let mut entry_916 = list_915.entry();
            entry_916.string(item_914);
        }
        list_915.finish();
    }
    #[allow(unused_mut)]
    let mut scope_917 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_918) = &input.default_iam_role_arn {
        scope_917.string(var_918);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_maintenance(
    input: &crate::input::ModifyClusterMaintenanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterMaintenance", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_919 = writer.prefix("ClusterIdentifier");
    if let Some(var_920) = &input.cluster_identifier {
        scope_919.string(var_920);
    }
    #[allow(unused_mut)]
    let mut scope_921 = writer.prefix("DeferMaintenance");
    if let Some(var_922) = &input.defer_maintenance {
        scope_921.boolean(*var_922);
    }
    #[allow(unused_mut)]
    let mut scope_923 = writer.prefix("DeferMaintenanceIdentifier");
    if let Some(var_924) = &input.defer_maintenance_identifier {
        scope_923.string(var_924);
    }
    #[allow(unused_mut)]
    let mut scope_925 = writer.prefix("DeferMaintenanceStartTime");
    if let Some(var_926) = &input.defer_maintenance_start_time {
        scope_925.date_time(var_926, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_927 = writer.prefix("DeferMaintenanceEndTime");
    if let Some(var_928) = &input.defer_maintenance_end_time {
        scope_927.date_time(var_928, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_929 = writer.prefix("DeferMaintenanceDuration");
    if let Some(var_930) = &input.defer_maintenance_duration {
        scope_929.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_930).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_parameter_group(
    input: &crate::input::ModifyClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("ParameterGroupName");
    if let Some(var_932) = &input.parameter_group_name {
        scope_931.string(var_932);
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Parameters");
    if let Some(var_934) = &input.parameters {
        let mut list_936 = scope_933.start_list(false, Some("Parameter"));
        for item_935 in var_934 {
            #[allow(unused_mut)]
            let mut entry_937 = list_936.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_937, item_935)?;
        }
        list_936.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot(
    input: &crate::input::ModifyClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_938 = writer.prefix("SnapshotIdentifier");
    if let Some(var_939) = &input.snapshot_identifier {
        scope_938.string(var_939);
    }
    #[allow(unused_mut)]
    let mut scope_940 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_941) = &input.manual_snapshot_retention_period {
        scope_940.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_941).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_942 = writer.prefix("Force");
    if input.force {
        scope_942.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_snapshot_schedule(
    input: &crate::input::ModifyClusterSnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("ClusterIdentifier");
    if let Some(var_944) = &input.cluster_identifier {
        scope_943.string(var_944);
    }
    #[allow(unused_mut)]
    let mut scope_945 = writer.prefix("ScheduleIdentifier");
    if let Some(var_946) = &input.schedule_identifier {
        scope_945.string(var_946);
    }
    #[allow(unused_mut)]
    let mut scope_947 = writer.prefix("DisassociateSchedule");
    if let Some(var_948) = &input.disassociate_schedule {
        scope_947.boolean(*var_948);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_cluster_subnet_group(
    input: &crate::input::ModifyClusterSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyClusterSubnetGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_949 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_950) = &input.cluster_subnet_group_name {
        scope_949.string(var_950);
    }
    #[allow(unused_mut)]
    let mut scope_951 = writer.prefix("Description");
    if let Some(var_952) = &input.description {
        scope_951.string(var_952);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("SubnetIds");
    if let Some(var_954) = &input.subnet_ids {
        let mut list_956 = scope_953.start_list(false, Some("SubnetIdentifier"));
        for item_955 in var_954 {
            #[allow(unused_mut)]
            let mut entry_957 = list_956.entry();
            entry_957.string(item_955);
        }
        list_956.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_endpoint_access(
    input: &crate::input::ModifyEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("EndpointName");
    if let Some(var_959) = &input.endpoint_name {
        scope_958.string(var_959);
    }
    #[allow(unused_mut)]
    let mut scope_960 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_961) = &input.vpc_security_group_ids {
        let mut list_963 = scope_960.start_list(false, Some("VpcSecurityGroupId"));
        for item_962 in var_961 {
            #[allow(unused_mut)]
            let mut entry_964 = list_963.entry();
            entry_964.string(item_962);
        }
        list_963.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("SubscriptionName");
    if let Some(var_966) = &input.subscription_name {
        scope_965.string(var_966);
    }
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("SnsTopicArn");
    if let Some(var_968) = &input.sns_topic_arn {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("SourceType");
    if let Some(var_970) = &input.source_type {
        scope_969.string(var_970);
    }
    #[allow(unused_mut)]
    let mut scope_971 = writer.prefix("SourceIds");
    if let Some(var_972) = &input.source_ids {
        let mut list_974 = scope_971.start_list(false, Some("SourceId"));
        for item_973 in var_972 {
            #[allow(unused_mut)]
            let mut entry_975 = list_974.entry();
            entry_975.string(item_973);
        }
        list_974.finish();
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("EventCategories");
    if let Some(var_977) = &input.event_categories {
        let mut list_979 = scope_976.start_list(false, Some("EventCategory"));
        for item_978 in var_977 {
            #[allow(unused_mut)]
            let mut entry_980 = list_979.entry();
            entry_980.string(item_978);
        }
        list_979.finish();
    }
    #[allow(unused_mut)]
    let mut scope_981 = writer.prefix("Severity");
    if let Some(var_982) = &input.severity {
        scope_981.string(var_982);
    }
    #[allow(unused_mut)]
    let mut scope_983 = writer.prefix("Enabled");
    if let Some(var_984) = &input.enabled {
        scope_983.boolean(*var_984);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_scheduled_action(
    input: &crate::input::ModifyScheduledActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyScheduledAction", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("ScheduledActionName");
    if let Some(var_986) = &input.scheduled_action_name {
        scope_985.string(var_986);
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("TargetAction");
    if let Some(var_988) = &input.target_action {
        crate::query_ser::serialize_structure_crate_model_scheduled_action_type(
            scope_987, var_988,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("Schedule");
    if let Some(var_990) = &input.schedule {
        scope_989.string(var_990);
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("IamRole");
    if let Some(var_992) = &input.iam_role {
        scope_991.string(var_992);
    }
    #[allow(unused_mut)]
    let mut scope_993 = writer.prefix("ScheduledActionDescription");
    if let Some(var_994) = &input.scheduled_action_description {
        scope_993.string(var_994);
    }
    #[allow(unused_mut)]
    let mut scope_995 = writer.prefix("StartTime");
    if let Some(var_996) = &input.start_time {
        scope_995.date_time(var_996, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_997 = writer.prefix("EndTime");
    if let Some(var_998) = &input.end_time {
        scope_997.date_time(var_998, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_999 = writer.prefix("Enable");
    if let Some(var_1000) = &input.enable {
        scope_999.boolean(*var_1000);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_copy_retention_period(
    input: &crate::input::ModifySnapshotCopyRetentionPeriodInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifySnapshotCopyRetentionPeriod",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1001 = writer.prefix("ClusterIdentifier");
    if let Some(var_1002) = &input.cluster_identifier {
        scope_1001.string(var_1002);
    }
    #[allow(unused_mut)]
    let mut scope_1003 = writer.prefix("RetentionPeriod");
    {
        scope_1003.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_period).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("Manual");
    if input.manual {
        scope_1004.boolean(input.manual);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_snapshot_schedule(
    input: &crate::input::ModifySnapshotScheduleInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifySnapshotSchedule", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1005 = writer.prefix("ScheduleIdentifier");
    if let Some(var_1006) = &input.schedule_identifier {
        scope_1005.string(var_1006);
    }
    #[allow(unused_mut)]
    let mut scope_1007 = writer.prefix("ScheduleDefinitions");
    if let Some(var_1008) = &input.schedule_definitions {
        let mut list_1010 = scope_1007.start_list(false, Some("ScheduleDefinition"));
        for item_1009 in var_1008 {
            #[allow(unused_mut)]
            let mut entry_1011 = list_1010.entry();
            entry_1011.string(item_1009);
        }
        list_1010.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_usage_limit(
    input: &crate::input::ModifyUsageLimitInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyUsageLimit", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1012 = writer.prefix("UsageLimitId");
    if let Some(var_1013) = &input.usage_limit_id {
        scope_1012.string(var_1013);
    }
    #[allow(unused_mut)]
    let mut scope_1014 = writer.prefix("Amount");
    if let Some(var_1015) = &input.amount {
        scope_1014.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1015).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("BreachAction");
    if let Some(var_1017) = &input.breach_action {
        scope_1016.string(var_1017.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_pause_cluster(
    input: &crate::input::PauseClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PauseCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("ClusterIdentifier");
    if let Some(var_1019) = &input.cluster_identifier {
        scope_1018.string(var_1019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_node_offering(
    input: &crate::input::PurchaseReservedNodeOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PurchaseReservedNodeOffering", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("ReservedNodeOfferingId");
    if let Some(var_1021) = &input.reserved_node_offering_id {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("NodeCount");
    if let Some(var_1023) = &input.node_count {
        scope_1022.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1023).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_cluster(
    input: &crate::input::RebootClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1024 = writer.prefix("ClusterIdentifier");
    if let Some(var_1025) = &input.cluster_identifier {
        scope_1024.string(var_1025);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reject_data_share(
    input: &crate::input::RejectDataShareInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RejectDataShare", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1026 = writer.prefix("DataShareArn");
    if let Some(var_1027) = &input.data_share_arn {
        scope_1026.string(var_1027);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_cluster_parameter_group(
    input: &crate::input::ResetClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetClusterParameterGroup", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1028 = writer.prefix("ParameterGroupName");
    if let Some(var_1029) = &input.parameter_group_name {
        scope_1028.string(var_1029);
    }
    #[allow(unused_mut)]
    let mut scope_1030 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1030.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("Parameters");
    if let Some(var_1032) = &input.parameters {
        let mut list_1034 = scope_1031.start_list(false, Some("Parameter"));
        for item_1033 in var_1032 {
            #[allow(unused_mut)]
            let mut entry_1035 = list_1034.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1035, item_1033)?;
        }
        list_1034.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resize_cluster(
    input: &crate::input::ResizeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResizeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1036 = writer.prefix("ClusterIdentifier");
    if let Some(var_1037) = &input.cluster_identifier {
        scope_1036.string(var_1037);
    }
    #[allow(unused_mut)]
    let mut scope_1038 = writer.prefix("ClusterType");
    if let Some(var_1039) = &input.cluster_type {
        scope_1038.string(var_1039);
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("NodeType");
    if let Some(var_1041) = &input.node_type {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("NumberOfNodes");
    if let Some(var_1043) = &input.number_of_nodes {
        scope_1042.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1043).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("Classic");
    if let Some(var_1045) = &input.classic {
        scope_1044.boolean(*var_1045);
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("ReservedNodeId");
    if let Some(var_1047) = &input.reserved_node_id {
        scope_1046.string(var_1047);
    }
    #[allow(unused_mut)]
    let mut scope_1048 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1049) = &input.target_reserved_node_offering_id {
        scope_1048.string(var_1049);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_from_cluster_snapshot(
    input: &crate::input::RestoreFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreFromClusterSnapshot", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1050 = writer.prefix("ClusterIdentifier");
    if let Some(var_1051) = &input.cluster_identifier {
        scope_1050.string(var_1051);
    }
    #[allow(unused_mut)]
    let mut scope_1052 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1053) = &input.snapshot_identifier {
        scope_1052.string(var_1053);
    }
    #[allow(unused_mut)]
    let mut scope_1054 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1055) = &input.snapshot_cluster_identifier {
        scope_1054.string(var_1055);
    }
    #[allow(unused_mut)]
    let mut scope_1056 = writer.prefix("Port");
    if let Some(var_1057) = &input.port {
        scope_1056.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1057).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1058 = writer.prefix("AvailabilityZone");
    if let Some(var_1059) = &input.availability_zone {
        scope_1058.string(var_1059);
    }
    #[allow(unused_mut)]
    let mut scope_1060 = writer.prefix("AllowVersionUpgrade");
    if let Some(var_1061) = &input.allow_version_upgrade {
        scope_1060.boolean(*var_1061);
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("ClusterSubnetGroupName");
    if let Some(var_1063) = &input.cluster_subnet_group_name {
        scope_1062.string(var_1063);
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("PubliclyAccessible");
    if let Some(var_1065) = &input.publicly_accessible {
        scope_1064.boolean(*var_1065);
    }
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("OwnerAccount");
    if let Some(var_1067) = &input.owner_account {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("HsmClientCertificateIdentifier");
    if let Some(var_1069) = &input.hsm_client_certificate_identifier {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("HsmConfigurationIdentifier");
    if let Some(var_1071) = &input.hsm_configuration_identifier {
        scope_1070.string(var_1071);
    }
    #[allow(unused_mut)]
    let mut scope_1072 = writer.prefix("ElasticIp");
    if let Some(var_1073) = &input.elastic_ip {
        scope_1072.string(var_1073);
    }
    #[allow(unused_mut)]
    let mut scope_1074 = writer.prefix("ClusterParameterGroupName");
    if let Some(var_1075) = &input.cluster_parameter_group_name {
        scope_1074.string(var_1075);
    }
    #[allow(unused_mut)]
    let mut scope_1076 = writer.prefix("ClusterSecurityGroups");
    if let Some(var_1077) = &input.cluster_security_groups {
        let mut list_1079 = scope_1076.start_list(false, Some("ClusterSecurityGroupName"));
        for item_1078 in var_1077 {
            #[allow(unused_mut)]
            let mut entry_1080 = list_1079.entry();
            entry_1080.string(item_1078);
        }
        list_1079.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1082) = &input.vpc_security_group_ids {
        let mut list_1084 = scope_1081.start_list(false, Some("VpcSecurityGroupId"));
        for item_1083 in var_1082 {
            #[allow(unused_mut)]
            let mut entry_1085 = list_1084.entry();
            entry_1085.string(item_1083);
        }
        list_1084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1087) = &input.preferred_maintenance_window {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("AutomatedSnapshotRetentionPeriod");
    if let Some(var_1089) = &input.automated_snapshot_retention_period {
        scope_1088.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1089).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("ManualSnapshotRetentionPeriod");
    if let Some(var_1091) = &input.manual_snapshot_retention_period {
        scope_1090.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1091).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("KmsKeyId");
    if let Some(var_1093) = &input.kms_key_id {
        scope_1092.string(var_1093);
    }
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("NodeType");
    if let Some(var_1095) = &input.node_type {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("EnhancedVpcRouting");
    if let Some(var_1097) = &input.enhanced_vpc_routing {
        scope_1096.boolean(*var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("AdditionalInfo");
    if let Some(var_1099) = &input.additional_info {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("IamRoles");
    if let Some(var_1101) = &input.iam_roles {
        let mut list_1103 = scope_1100.start_list(false, Some("IamRoleArn"));
        for item_1102 in var_1101 {
            #[allow(unused_mut)]
            let mut entry_1104 = list_1103.entry();
            entry_1104.string(item_1102);
        }
        list_1103.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1105 = writer.prefix("MaintenanceTrackName");
    if let Some(var_1106) = &input.maintenance_track_name {
        scope_1105.string(var_1106);
    }
    #[allow(unused_mut)]
    let mut scope_1107 = writer.prefix("SnapshotScheduleIdentifier");
    if let Some(var_1108) = &input.snapshot_schedule_identifier {
        scope_1107.string(var_1108);
    }
    #[allow(unused_mut)]
    let mut scope_1109 = writer.prefix("NumberOfNodes");
    if let Some(var_1110) = &input.number_of_nodes {
        scope_1109.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1110).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("AvailabilityZoneRelocation");
    if let Some(var_1112) = &input.availability_zone_relocation {
        scope_1111.boolean(*var_1112);
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("AquaConfigurationStatus");
    if let Some(var_1114) = &input.aqua_configuration_status {
        scope_1113.string(var_1114.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("DefaultIamRoleArn");
    if let Some(var_1116) = &input.default_iam_role_arn {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("ReservedNodeId");
    if let Some(var_1118) = &input.reserved_node_id {
        scope_1117.string(var_1118);
    }
    #[allow(unused_mut)]
    let mut scope_1119 = writer.prefix("TargetReservedNodeOfferingId");
    if let Some(var_1120) = &input.target_reserved_node_offering_id {
        scope_1119.string(var_1120);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_table_from_cluster_snapshot(
    input: &crate::input::RestoreTableFromClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreTableFromClusterSnapshot",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1121 = writer.prefix("ClusterIdentifier");
    if let Some(var_1122) = &input.cluster_identifier {
        scope_1121.string(var_1122);
    }
    #[allow(unused_mut)]
    let mut scope_1123 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1124) = &input.snapshot_identifier {
        scope_1123.string(var_1124);
    }
    #[allow(unused_mut)]
    let mut scope_1125 = writer.prefix("SourceDatabaseName");
    if let Some(var_1126) = &input.source_database_name {
        scope_1125.string(var_1126);
    }
    #[allow(unused_mut)]
    let mut scope_1127 = writer.prefix("SourceSchemaName");
    if let Some(var_1128) = &input.source_schema_name {
        scope_1127.string(var_1128);
    }
    #[allow(unused_mut)]
    let mut scope_1129 = writer.prefix("SourceTableName");
    if let Some(var_1130) = &input.source_table_name {
        scope_1129.string(var_1130);
    }
    #[allow(unused_mut)]
    let mut scope_1131 = writer.prefix("TargetDatabaseName");
    if let Some(var_1132) = &input.target_database_name {
        scope_1131.string(var_1132);
    }
    #[allow(unused_mut)]
    let mut scope_1133 = writer.prefix("TargetSchemaName");
    if let Some(var_1134) = &input.target_schema_name {
        scope_1133.string(var_1134);
    }
    #[allow(unused_mut)]
    let mut scope_1135 = writer.prefix("NewTableName");
    if let Some(var_1136) = &input.new_table_name {
        scope_1135.string(var_1136);
    }
    #[allow(unused_mut)]
    let mut scope_1137 = writer.prefix("EnableCaseSensitiveIdentifier");
    if let Some(var_1138) = &input.enable_case_sensitive_identifier {
        scope_1137.boolean(*var_1138);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_resume_cluster(
    input: &crate::input::ResumeClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ResumeCluster", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1139 = writer.prefix("ClusterIdentifier");
    if let Some(var_1140) = &input.cluster_identifier {
        scope_1139.string(var_1140);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_cluster_security_group_ingress(
    input: &crate::input::RevokeClusterSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RevokeClusterSecurityGroupIngress",
        "2012-12-01",
    );
    #[allow(unused_mut)]
    let mut scope_1141 = writer.prefix("ClusterSecurityGroupName");
    if let Some(var_1142) = &input.cluster_security_group_name {
        scope_1141.string(var_1142);
    }
    #[allow(unused_mut)]
    let mut scope_1143 = writer.prefix("CIDRIP");
    if let Some(var_1144) = &input.cidrip {
        scope_1143.string(var_1144);
    }
    #[allow(unused_mut)]
    let mut scope_1145 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_1146) = &input.ec2_security_group_name {
        scope_1145.string(var_1146);
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_1148) = &input.ec2_security_group_owner_id {
        scope_1147.string(var_1148);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_endpoint_access(
    input: &crate::input::RevokeEndpointAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeEndpointAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("ClusterIdentifier");
    if let Some(var_1150) = &input.cluster_identifier {
        scope_1149.string(var_1150);
    }
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("Account");
    if let Some(var_1152) = &input.account {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("VpcIds");
    if let Some(var_1154) = &input.vpc_ids {
        let mut list_1156 = scope_1153.start_list(false, Some("VpcIdentifier"));
        for item_1155 in var_1154 {
            #[allow(unused_mut)]
            let mut entry_1157 = list_1156.entry();
            entry_1157.string(item_1155);
        }
        list_1156.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1158 = writer.prefix("Force");
    if input.force {
        scope_1158.boolean(input.force);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_snapshot_access(
    input: &crate::input::RevokeSnapshotAccessInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeSnapshotAccess", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1160) = &input.snapshot_identifier {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("SnapshotClusterIdentifier");
    if let Some(var_1162) = &input.snapshot_cluster_identifier {
        scope_1161.string(var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("AccountWithRestoreAccess");
    if let Some(var_1164) = &input.account_with_restore_access {
        scope_1163.string(var_1164);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_rotate_encryption_key(
    input: &crate::input::RotateEncryptionKeyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RotateEncryptionKey", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1165 = writer.prefix("ClusterIdentifier");
    if let Some(var_1166) = &input.cluster_identifier {
        scope_1165.string(var_1166);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_update_partner_status(
    input: &crate::input::UpdatePartnerStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "UpdatePartnerStatus", "2012-12-01");
    #[allow(unused_mut)]
    let mut scope_1167 = writer.prefix("AccountId");
    if let Some(var_1168) = &input.account_id {
        scope_1167.string(var_1168);
    }
    #[allow(unused_mut)]
    let mut scope_1169 = writer.prefix("ClusterIdentifier");
    if let Some(var_1170) = &input.cluster_identifier {
        scope_1169.string(var_1170);
    }
    #[allow(unused_mut)]
    let mut scope_1171 = writer.prefix("DatabaseName");
    if let Some(var_1172) = &input.database_name {
        scope_1171.string(var_1172);
    }
    #[allow(unused_mut)]
    let mut scope_1173 = writer.prefix("PartnerName");
    if let Some(var_1174) = &input.partner_name {
        scope_1173.string(var_1174);
    }
    #[allow(unused_mut)]
    let mut scope_1175 = writer.prefix("Status");
    if let Some(var_1176) = &input.status {
        scope_1175.string(var_1176.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1177 = writer.prefix("StatusMessage");
    if let Some(var_1178) = &input.status_message {
        scope_1177.string(var_1178);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
