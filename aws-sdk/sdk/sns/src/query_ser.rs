// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn serialize_structure_crate_model_tag(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Key");
    if let Some(var_2) = &input.key {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Value");
    if let Some(var_4) = &input.value {
        scope_3.string(var_4);
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_message_attribute_value(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::MessageAttributeValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("DataType");
    if let Some(var_6) = &input.data_type {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("StringValue");
    if let Some(var_8) = &input.string_value {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("BinaryValue");
    if let Some(var_10) = &input.binary_value {
        scope_9.string(&aws_smithy_types::base64::encode(var_10));
    }
    Ok(())
}

#[allow(unused_mut)]
pub fn serialize_structure_crate_model_publish_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::model::PublishBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("Id");
    if let Some(var_12) = &input.id {
        scope_11.string(var_12);
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("Message");
    if let Some(var_14) = &input.message {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("Subject");
    if let Some(var_16) = &input.subject {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("MessageStructure");
    if let Some(var_18) = &input.message_structure {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("MessageAttributes");
    if let Some(var_20) = &input.message_attributes {
        let mut map_21 = scope_19.start_map(false, "Name", "Value");
        for (key_22, value_23) in var_20 {
            #[allow(unused_mut)]
            let mut entry_24 = map_21.entry(key_22);
            {
                crate::query_ser::serialize_structure_crate_model_message_attribute_value(
                    entry_24, value_23,
                )?;
            }
        }
        map_21.finish();
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("MessageDeduplicationId");
    if let Some(var_26) = &input.message_deduplication_id {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("MessageGroupId");
    if let Some(var_28) = &input.message_group_id {
        scope_27.string(var_28);
    }
    Ok(())
}
