// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_permission(
    input: &crate::input::AddPermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "AddPermission", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TopicArn");
    if let Some(var_2) = &input.topic_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Label");
    if let Some(var_4) = &input.label {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("AWSAccountId");
    if let Some(var_6) = &input.aws_account_id {
        let mut list_8 = scope_5.start_list(false, None);
        for item_7 in var_6 {
            #[allow(unused_mut)]
            let mut entry_9 = list_8.entry();
            entry_9.string(item_7);
        }
        list_8.finish();
    }
    #[allow(unused_mut)]
    let mut scope_10 = writer.prefix("ActionName");
    if let Some(var_11) = &input.action_name {
        let mut list_13 = scope_10.start_list(false, None);
        for item_12 in var_11 {
            #[allow(unused_mut)]
            let mut entry_14 = list_13.entry();
            entry_14.string(item_12);
        }
        list_13.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_check_if_phone_number_is_opted_out(
    input: &crate::input::CheckIfPhoneNumberIsOptedOutInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CheckIfPhoneNumberIsOptedOut", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("phoneNumber");
    if let Some(var_16) = &input.phone_number {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_confirm_subscription(
    input: &crate::input::ConfirmSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ConfirmSubscription", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("TopicArn");
    if let Some(var_18) = &input.topic_arn {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Token");
    if let Some(var_20) = &input.token {
        scope_19.string(var_20);
    }
    #[allow(unused_mut)]
    let mut scope_21 = writer.prefix("AuthenticateOnUnsubscribe");
    if let Some(var_22) = &input.authenticate_on_unsubscribe {
        scope_21.string(var_22);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_platform_application(
    input: &crate::input::CreatePlatformApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlatformApplication", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_23 = writer.prefix("Name");
    if let Some(var_24) = &input.name {
        scope_23.string(var_24);
    }
    #[allow(unused_mut)]
    let mut scope_25 = writer.prefix("Platform");
    if let Some(var_26) = &input.platform {
        scope_25.string(var_26);
    }
    #[allow(unused_mut)]
    let mut scope_27 = writer.prefix("Attributes");
    if let Some(var_28) = &input.attributes {
        let mut map_29 = scope_27.start_map(false, "key", "value");
        for (key_30, value_31) in var_28 {
            #[allow(unused_mut)]
            let mut entry_32 = map_29.entry(key_30);
            {
                entry_32.string(value_31);
            }
        }
        map_29.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_platform_endpoint(
    input: &crate::input::CreatePlatformEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreatePlatformEndpoint", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_33 = writer.prefix("PlatformApplicationArn");
    if let Some(var_34) = &input.platform_application_arn {
        scope_33.string(var_34);
    }
    #[allow(unused_mut)]
    let mut scope_35 = writer.prefix("Token");
    if let Some(var_36) = &input.token {
        scope_35.string(var_36);
    }
    #[allow(unused_mut)]
    let mut scope_37 = writer.prefix("CustomUserData");
    if let Some(var_38) = &input.custom_user_data {
        scope_37.string(var_38);
    }
    #[allow(unused_mut)]
    let mut scope_39 = writer.prefix("Attributes");
    if let Some(var_40) = &input.attributes {
        let mut map_41 = scope_39.start_map(false, "key", "value");
        for (key_42, value_43) in var_40 {
            #[allow(unused_mut)]
            let mut entry_44 = map_41.entry(key_42);
            {
                entry_44.string(value_43);
            }
        }
        map_41.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_sms_sandbox_phone_number(
    input: &crate::input::CreateSmsSandboxPhoneNumberInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateSMSSandboxPhoneNumber", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_45 = writer.prefix("PhoneNumber");
    if let Some(var_46) = &input.phone_number {
        scope_45.string(var_46);
    }
    #[allow(unused_mut)]
    let mut scope_47 = writer.prefix("LanguageCode");
    if let Some(var_48) = &input.language_code {
        scope_47.string(var_48.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_topic(
    input: &crate::input::CreateTopicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_49 = writer.prefix("Name");
    if let Some(var_50) = &input.name {
        scope_49.string(var_50);
    }
    #[allow(unused_mut)]
    let mut scope_51 = writer.prefix("Attributes");
    if let Some(var_52) = &input.attributes {
        let mut map_53 = scope_51.start_map(false, "key", "value");
        for (key_54, value_55) in var_52 {
            #[allow(unused_mut)]
            let mut entry_56 = map_53.entry(key_54);
            {
                entry_56.string(value_55);
            }
        }
        map_53.finish();
    }
    #[allow(unused_mut)]
    let mut scope_57 = writer.prefix("Tags");
    if let Some(var_58) = &input.tags {
        let mut list_60 = scope_57.start_list(false, None);
        for item_59 in var_58 {
            #[allow(unused_mut)]
            let mut entry_61 = list_60.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_61, item_59)?;
        }
        list_60.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_endpoint(
    input: &crate::input::DeleteEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteEndpoint", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_62 = writer.prefix("EndpointArn");
    if let Some(var_63) = &input.endpoint_arn {
        scope_62.string(var_63);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_platform_application(
    input: &crate::input::DeletePlatformApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeletePlatformApplication", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_64 = writer.prefix("PlatformApplicationArn");
    if let Some(var_65) = &input.platform_application_arn {
        scope_64.string(var_65);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_sms_sandbox_phone_number(
    input: &crate::input::DeleteSmsSandboxPhoneNumberInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteSMSSandboxPhoneNumber", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_66 = writer.prefix("PhoneNumber");
    if let Some(var_67) = &input.phone_number {
        scope_66.string(var_67);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_topic(
    input: &crate::input::DeleteTopicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_68 = writer.prefix("TopicArn");
    if let Some(var_69) = &input.topic_arn {
        scope_68.string(var_69);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_endpoint_attributes(
    input: &crate::input::GetEndpointAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetEndpointAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_70 = writer.prefix("EndpointArn");
    if let Some(var_71) = &input.endpoint_arn {
        scope_70.string(var_71);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_platform_application_attributes(
    input: &crate::input::GetPlatformApplicationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "GetPlatformApplicationAttributes",
        "2010-03-31",
    );
    #[allow(unused_mut)]
    let mut scope_72 = writer.prefix("PlatformApplicationArn");
    if let Some(var_73) = &input.platform_application_arn {
        scope_72.string(var_73);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_sms_attributes(
    input: &crate::input::GetSmsAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "GetSMSAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_74 = writer.prefix("attributes");
    if let Some(var_75) = &input.attributes {
        let mut list_77 = scope_74.start_list(false, None);
        for item_76 in var_75 {
            #[allow(unused_mut)]
            let mut entry_78 = list_77.entry();
            entry_78.string(item_76);
        }
        list_77.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_sms_sandbox_account_status(
    input: &crate::input::GetSmsSandboxAccountStatusInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSMSSandboxAccountStatus", "2010-03-31");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_subscription_attributes(
    input: &crate::input::GetSubscriptionAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetSubscriptionAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_79 = writer.prefix("SubscriptionArn");
    if let Some(var_80) = &input.subscription_arn {
        scope_79.string(var_80);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_get_topic_attributes(
    input: &crate::input::GetTopicAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "GetTopicAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_81 = writer.prefix("TopicArn");
    if let Some(var_82) = &input.topic_arn {
        scope_81.string(var_82);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_endpoints_by_platform_application(
    input: &crate::input::ListEndpointsByPlatformApplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ListEndpointsByPlatformApplication",
        "2010-03-31",
    );
    #[allow(unused_mut)]
    let mut scope_83 = writer.prefix("PlatformApplicationArn");
    if let Some(var_84) = &input.platform_application_arn {
        scope_83.string(var_84);
    }
    #[allow(unused_mut)]
    let mut scope_85 = writer.prefix("NextToken");
    if let Some(var_86) = &input.next_token {
        scope_85.string(var_86);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_origination_numbers(
    input: &crate::input::ListOriginationNumbersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListOriginationNumbers", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("NextToken");
    if let Some(var_88) = &input.next_token {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("MaxResults");
    if let Some(var_90) = &input.max_results {
        scope_89.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_90).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_phone_numbers_opted_out(
    input: &crate::input::ListPhoneNumbersOptedOutInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListPhoneNumbersOptedOut", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("nextToken");
    if let Some(var_92) = &input.next_token {
        scope_91.string(var_92);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_platform_applications(
    input: &crate::input::ListPlatformApplicationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListPlatformApplications", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("NextToken");
    if let Some(var_94) = &input.next_token {
        scope_93.string(var_94);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_sms_sandbox_phone_numbers(
    input: &crate::input::ListSmsSandboxPhoneNumbersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSMSSandboxPhoneNumbers", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_95 = writer.prefix("NextToken");
    if let Some(var_96) = &input.next_token {
        scope_95.string(var_96);
    }
    #[allow(unused_mut)]
    let mut scope_97 = writer.prefix("MaxResults");
    if let Some(var_98) = &input.max_results {
        scope_97.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_98).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_subscriptions(
    input: &crate::input::ListSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSubscriptions", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_99 = writer.prefix("NextToken");
    if let Some(var_100) = &input.next_token {
        scope_99.string(var_100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_subscriptions_by_topic(
    input: &crate::input::ListSubscriptionsByTopicInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListSubscriptionsByTopic", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_101 = writer.prefix("TopicArn");
    if let Some(var_102) = &input.topic_arn {
        scope_101.string(var_102);
    }
    #[allow(unused_mut)]
    let mut scope_103 = writer.prefix("NextToken");
    if let Some(var_104) = &input.next_token {
        scope_103.string(var_104);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_105 = writer.prefix("ResourceArn");
    if let Some(var_106) = &input.resource_arn {
        scope_105.string(var_106);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_topics(
    input: &crate::input::ListTopicsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ListTopics", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_107 = writer.prefix("NextToken");
    if let Some(var_108) = &input.next_token {
        scope_107.string(var_108);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_opt_in_phone_number(
    input: &crate::input::OptInPhoneNumberInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "OptInPhoneNumber", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_109 = writer.prefix("phoneNumber");
    if let Some(var_110) = &input.phone_number {
        scope_109.string(var_110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_publish(
    input: &crate::input::PublishInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "Publish", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_111 = writer.prefix("TopicArn");
    if let Some(var_112) = &input.topic_arn {
        scope_111.string(var_112);
    }
    #[allow(unused_mut)]
    let mut scope_113 = writer.prefix("TargetArn");
    if let Some(var_114) = &input.target_arn {
        scope_113.string(var_114);
    }
    #[allow(unused_mut)]
    let mut scope_115 = writer.prefix("PhoneNumber");
    if let Some(var_116) = &input.phone_number {
        scope_115.string(var_116);
    }
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("Message");
    if let Some(var_118) = &input.message {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("Subject");
    if let Some(var_120) = &input.subject {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("MessageStructure");
    if let Some(var_122) = &input.message_structure {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("MessageAttributes");
    if let Some(var_124) = &input.message_attributes {
        let mut map_125 = scope_123.start_map(false, "Name", "Value");
        for (key_126, value_127) in var_124 {
            #[allow(unused_mut)]
            let mut entry_128 = map_125.entry(key_126);
            {
                crate::query_ser::serialize_structure_crate_model_message_attribute_value(
                    entry_128, value_127,
                )?;
            }
        }
        map_125.finish();
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("MessageDeduplicationId");
    if let Some(var_130) = &input.message_deduplication_id {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("MessageGroupId");
    if let Some(var_132) = &input.message_group_id {
        scope_131.string(var_132);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_publish_batch(
    input: &crate::input::PublishBatchInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "PublishBatch", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("TopicArn");
    if let Some(var_134) = &input.topic_arn {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("PublishBatchRequestEntries");
    if let Some(var_136) = &input.publish_batch_request_entries {
        let mut list_138 = scope_135.start_list(false, None);
        for item_137 in var_136 {
            #[allow(unused_mut)]
            let mut entry_139 = list_138.entry();
            crate::query_ser::serialize_structure_crate_model_publish_batch_request_entry(
                entry_139, item_137,
            )?;
        }
        list_138.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_permission(
    input: &crate::input::RemovePermissionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RemovePermission", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_140 = writer.prefix("TopicArn");
    if let Some(var_141) = &input.topic_arn {
        scope_140.string(var_141);
    }
    #[allow(unused_mut)]
    let mut scope_142 = writer.prefix("Label");
    if let Some(var_143) = &input.label {
        scope_142.string(var_143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_endpoint_attributes(
    input: &crate::input::SetEndpointAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetEndpointAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("EndpointArn");
    if let Some(var_145) = &input.endpoint_arn {
        scope_144.string(var_145);
    }
    #[allow(unused_mut)]
    let mut scope_146 = writer.prefix("Attributes");
    if let Some(var_147) = &input.attributes {
        let mut map_148 = scope_146.start_map(false, "key", "value");
        for (key_149, value_150) in var_147 {
            #[allow(unused_mut)]
            let mut entry_151 = map_148.entry(key_149);
            {
                entry_151.string(value_150);
            }
        }
        map_148.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_platform_application_attributes(
    input: &crate::input::SetPlatformApplicationAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "SetPlatformApplicationAttributes",
        "2010-03-31",
    );
    #[allow(unused_mut)]
    let mut scope_152 = writer.prefix("PlatformApplicationArn");
    if let Some(var_153) = &input.platform_application_arn {
        scope_152.string(var_153);
    }
    #[allow(unused_mut)]
    let mut scope_154 = writer.prefix("Attributes");
    if let Some(var_155) = &input.attributes {
        let mut map_156 = scope_154.start_map(false, "key", "value");
        for (key_157, value_158) in var_155 {
            #[allow(unused_mut)]
            let mut entry_159 = map_156.entry(key_157);
            {
                entry_159.string(value_158);
            }
        }
        map_156.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_sms_attributes(
    input: &crate::input::SetSmsAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "SetSMSAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_160 = writer.prefix("attributes");
    if let Some(var_161) = &input.attributes {
        let mut map_162 = scope_160.start_map(false, "key", "value");
        for (key_163, value_164) in var_161 {
            #[allow(unused_mut)]
            let mut entry_165 = map_162.entry(key_163);
            {
                entry_165.string(value_164);
            }
        }
        map_162.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_subscription_attributes(
    input: &crate::input::SetSubscriptionAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetSubscriptionAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("SubscriptionArn");
    if let Some(var_167) = &input.subscription_arn {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("AttributeName");
    if let Some(var_169) = &input.attribute_name {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("AttributeValue");
    if let Some(var_171) = &input.attribute_value {
        scope_170.string(var_171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_set_topic_attributes(
    input: &crate::input::SetTopicAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "SetTopicAttributes", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("TopicArn");
    if let Some(var_173) = &input.topic_arn {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("AttributeName");
    if let Some(var_175) = &input.attribute_name {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("AttributeValue");
    if let Some(var_177) = &input.attribute_value {
        scope_176.string(var_177);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_subscribe(
    input: &crate::input::SubscribeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "Subscribe", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("TopicArn");
    if let Some(var_179) = &input.topic_arn {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("Protocol");
    if let Some(var_181) = &input.protocol {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("Endpoint");
    if let Some(var_183) = &input.endpoint {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("Attributes");
    if let Some(var_185) = &input.attributes {
        let mut map_186 = scope_184.start_map(false, "key", "value");
        for (key_187, value_188) in var_185 {
            #[allow(unused_mut)]
            let mut entry_189 = map_186.entry(key_187);
            {
                entry_189.string(value_188);
            }
        }
        map_186.finish();
    }
    #[allow(unused_mut)]
    let mut scope_190 = writer.prefix("ReturnSubscriptionArn");
    if input.return_subscription_arn {
        scope_190.boolean(input.return_subscription_arn);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_tag_resource(
    input: &crate::input::TagResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "TagResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("ResourceArn");
    if let Some(var_192) = &input.resource_arn {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("Tags");
    if let Some(var_194) = &input.tags {
        let mut list_196 = scope_193.start_list(false, None);
        for item_195 in var_194 {
            #[allow(unused_mut)]
            let mut entry_197 = list_196.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_197, item_195)?;
        }
        list_196.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_unsubscribe(
    input: &crate::input::UnsubscribeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "Unsubscribe", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_198 = writer.prefix("SubscriptionArn");
    if let Some(var_199) = &input.subscription_arn {
        scope_198.string(var_199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_untag_resource(
    input: &crate::input::UntagResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "UntagResource", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_200 = writer.prefix("ResourceArn");
    if let Some(var_201) = &input.resource_arn {
        scope_200.string(var_201);
    }
    #[allow(unused_mut)]
    let mut scope_202 = writer.prefix("TagKeys");
    if let Some(var_203) = &input.tag_keys {
        let mut list_205 = scope_202.start_list(false, None);
        for item_204 in var_203 {
            #[allow(unused_mut)]
            let mut entry_206 = list_205.entry();
            entry_206.string(item_204);
        }
        list_205.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_verify_sms_sandbox_phone_number(
    input: &crate::input::VerifySmsSandboxPhoneNumberInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "VerifySMSSandboxPhoneNumber", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_207 = writer.prefix("PhoneNumber");
    if let Some(var_208) = &input.phone_number {
        scope_207.string(var_208);
    }
    #[allow(unused_mut)]
    let mut scope_209 = writer.prefix("OneTimePassword");
    if let Some(var_210) = &input.one_time_password {
        scope_209.string(var_210);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
