// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>The destination phone number's verification status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VerifySmsSandboxPhoneNumberOutput {}
impl std::fmt::Debug for VerifySmsSandboxPhoneNumberOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySmsSandboxPhoneNumberOutput");
        formatter.finish()
    }
}
/// See [`VerifySmsSandboxPhoneNumberOutput`](crate::output::VerifySmsSandboxPhoneNumberOutput)
pub mod verify_sms_sandbox_phone_number_output {
    /// A builder for [`VerifySmsSandboxPhoneNumberOutput`](crate::output::VerifySmsSandboxPhoneNumberOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`VerifySmsSandboxPhoneNumberOutput`](crate::output::VerifySmsSandboxPhoneNumberOutput)
        pub fn build(self) -> crate::output::VerifySmsSandboxPhoneNumberOutput {
            crate::output::VerifySmsSandboxPhoneNumberOutput {}
        }
    }
}
impl VerifySmsSandboxPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`VerifySmsSandboxPhoneNumberOutput`](crate::output::VerifySmsSandboxPhoneNumberOutput)
    pub fn builder() -> crate::output::verify_sms_sandbox_phone_number_output::Builder {
        crate::output::verify_sms_sandbox_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsubscribeOutput {}
impl std::fmt::Debug for UnsubscribeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsubscribeOutput");
        formatter.finish()
    }
}
/// See [`UnsubscribeOutput`](crate::output::UnsubscribeOutput)
pub mod unsubscribe_output {
    /// A builder for [`UnsubscribeOutput`](crate::output::UnsubscribeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UnsubscribeOutput`](crate::output::UnsubscribeOutput)
        pub fn build(self) -> crate::output::UnsubscribeOutput {
            crate::output::UnsubscribeOutput {}
        }
    }
}
impl UnsubscribeOutput {
    /// Creates a new builder-style object to manufacture [`UnsubscribeOutput`](crate::output::UnsubscribeOutput)
    pub fn builder() -> crate::output::unsubscribe_output::Builder {
        crate::output::unsubscribe_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// <p>Response for Subscribe action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SubscribeOutput {
    /// <p>The ARN of the subscription if it is confirmed, or the string "pending confirmation"
    /// if the subscription requires confirmation. However, if the API request parameter
    /// <code>ReturnSubscriptionArn</code> is true, then the value is always the
    /// subscription ARN, even if the subscription requires confirmation.</p>
    pub subscription_arn: std::option::Option<std::string::String>,
}
impl SubscribeOutput {
    /// <p>The ARN of the subscription if it is confirmed, or the string "pending confirmation"
    /// if the subscription requires confirmation. However, if the API request parameter
    /// <code>ReturnSubscriptionArn</code> is true, then the value is always the
    /// subscription ARN, even if the subscription requires confirmation.</p>
    pub fn subscription_arn(&self) -> std::option::Option<&str> {
        self.subscription_arn.as_deref()
    }
}
impl std::fmt::Debug for SubscribeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SubscribeOutput");
        formatter.field("subscription_arn", &self.subscription_arn);
        formatter.finish()
    }
}
/// See [`SubscribeOutput`](crate::output::SubscribeOutput)
pub mod subscribe_output {
    /// A builder for [`SubscribeOutput`](crate::output::SubscribeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the subscription if it is confirmed, or the string "pending confirmation"
        /// if the subscription requires confirmation. However, if the API request parameter
        /// <code>ReturnSubscriptionArn</code> is true, then the value is always the
        /// subscription ARN, even if the subscription requires confirmation.</p>
        pub fn subscription_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the subscription if it is confirmed, or the string "pending confirmation"
        /// if the subscription requires confirmation. However, if the API request parameter
        /// <code>ReturnSubscriptionArn</code> is true, then the value is always the
        /// subscription ARN, even if the subscription requires confirmation.</p>
        pub fn set_subscription_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`SubscribeOutput`](crate::output::SubscribeOutput)
        pub fn build(self) -> crate::output::SubscribeOutput {
            crate::output::SubscribeOutput {
                subscription_arn: self.subscription_arn,
            }
        }
    }
}
impl SubscribeOutput {
    /// Creates a new builder-style object to manufacture [`SubscribeOutput`](crate::output::SubscribeOutput)
    pub fn builder() -> crate::output::subscribe_output::Builder {
        crate::output::subscribe_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetTopicAttributesOutput {}
impl std::fmt::Debug for SetTopicAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetTopicAttributesOutput");
        formatter.finish()
    }
}
/// See [`SetTopicAttributesOutput`](crate::output::SetTopicAttributesOutput)
pub mod set_topic_attributes_output {
    /// A builder for [`SetTopicAttributesOutput`](crate::output::SetTopicAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetTopicAttributesOutput`](crate::output::SetTopicAttributesOutput)
        pub fn build(self) -> crate::output::SetTopicAttributesOutput {
            crate::output::SetTopicAttributesOutput {}
        }
    }
}
impl SetTopicAttributesOutput {
    /// Creates a new builder-style object to manufacture [`SetTopicAttributesOutput`](crate::output::SetTopicAttributesOutput)
    pub fn builder() -> crate::output::set_topic_attributes_output::Builder {
        crate::output::set_topic_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetSubscriptionAttributesOutput {}
impl std::fmt::Debug for SetSubscriptionAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetSubscriptionAttributesOutput");
        formatter.finish()
    }
}
/// See [`SetSubscriptionAttributesOutput`](crate::output::SetSubscriptionAttributesOutput)
pub mod set_subscription_attributes_output {
    /// A builder for [`SetSubscriptionAttributesOutput`](crate::output::SetSubscriptionAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetSubscriptionAttributesOutput`](crate::output::SetSubscriptionAttributesOutput)
        pub fn build(self) -> crate::output::SetSubscriptionAttributesOutput {
            crate::output::SetSubscriptionAttributesOutput {}
        }
    }
}
impl SetSubscriptionAttributesOutput {
    /// Creates a new builder-style object to manufacture [`SetSubscriptionAttributesOutput`](crate::output::SetSubscriptionAttributesOutput)
    pub fn builder() -> crate::output::set_subscription_attributes_output::Builder {
        crate::output::set_subscription_attributes_output::Builder::default()
    }
}

/// <p>The response for the SetSMSAttributes action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetSmsAttributesOutput {}
impl std::fmt::Debug for SetSmsAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetSmsAttributesOutput");
        formatter.finish()
    }
}
/// See [`SetSmsAttributesOutput`](crate::output::SetSmsAttributesOutput)
pub mod set_sms_attributes_output {
    /// A builder for [`SetSmsAttributesOutput`](crate::output::SetSmsAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetSmsAttributesOutput`](crate::output::SetSmsAttributesOutput)
        pub fn build(self) -> crate::output::SetSmsAttributesOutput {
            crate::output::SetSmsAttributesOutput {}
        }
    }
}
impl SetSmsAttributesOutput {
    /// Creates a new builder-style object to manufacture [`SetSmsAttributesOutput`](crate::output::SetSmsAttributesOutput)
    pub fn builder() -> crate::output::set_sms_attributes_output::Builder {
        crate::output::set_sms_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetPlatformApplicationAttributesOutput {}
impl std::fmt::Debug for SetPlatformApplicationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetPlatformApplicationAttributesOutput");
        formatter.finish()
    }
}
/// See [`SetPlatformApplicationAttributesOutput`](crate::output::SetPlatformApplicationAttributesOutput)
pub mod set_platform_application_attributes_output {
    /// A builder for [`SetPlatformApplicationAttributesOutput`](crate::output::SetPlatformApplicationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetPlatformApplicationAttributesOutput`](crate::output::SetPlatformApplicationAttributesOutput)
        pub fn build(self) -> crate::output::SetPlatformApplicationAttributesOutput {
            crate::output::SetPlatformApplicationAttributesOutput {}
        }
    }
}
impl SetPlatformApplicationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`SetPlatformApplicationAttributesOutput`](crate::output::SetPlatformApplicationAttributesOutput)
    pub fn builder() -> crate::output::set_platform_application_attributes_output::Builder {
        crate::output::set_platform_application_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetEndpointAttributesOutput {}
impl std::fmt::Debug for SetEndpointAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetEndpointAttributesOutput");
        formatter.finish()
    }
}
/// See [`SetEndpointAttributesOutput`](crate::output::SetEndpointAttributesOutput)
pub mod set_endpoint_attributes_output {
    /// A builder for [`SetEndpointAttributesOutput`](crate::output::SetEndpointAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SetEndpointAttributesOutput`](crate::output::SetEndpointAttributesOutput)
        pub fn build(self) -> crate::output::SetEndpointAttributesOutput {
            crate::output::SetEndpointAttributesOutput {}
        }
    }
}
impl SetEndpointAttributesOutput {
    /// Creates a new builder-style object to manufacture [`SetEndpointAttributesOutput`](crate::output::SetEndpointAttributesOutput)
    pub fn builder() -> crate::output::set_endpoint_attributes_output::Builder {
        crate::output::set_endpoint_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemovePermissionOutput {}
impl std::fmt::Debug for RemovePermissionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemovePermissionOutput");
        formatter.finish()
    }
}
/// See [`RemovePermissionOutput`](crate::output::RemovePermissionOutput)
pub mod remove_permission_output {
    /// A builder for [`RemovePermissionOutput`](crate::output::RemovePermissionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemovePermissionOutput`](crate::output::RemovePermissionOutput)
        pub fn build(self) -> crate::output::RemovePermissionOutput {
            crate::output::RemovePermissionOutput {}
        }
    }
}
impl RemovePermissionOutput {
    /// Creates a new builder-style object to manufacture [`RemovePermissionOutput`](crate::output::RemovePermissionOutput)
    pub fn builder() -> crate::output::remove_permission_output::Builder {
        crate::output::remove_permission_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PublishBatchOutput {
    /// <p>A list of successful <code>PublishBatch</code> responses.</p>
    pub successful: std::option::Option<std::vec::Vec<crate::model::PublishBatchResultEntry>>,
    /// <p>A list of failed <code>PublishBatch</code> responses. </p>
    pub failed: std::option::Option<std::vec::Vec<crate::model::BatchResultErrorEntry>>,
}
impl PublishBatchOutput {
    /// <p>A list of successful <code>PublishBatch</code> responses.</p>
    pub fn successful(&self) -> std::option::Option<&[crate::model::PublishBatchResultEntry]> {
        self.successful.as_deref()
    }
    /// <p>A list of failed <code>PublishBatch</code> responses. </p>
    pub fn failed(&self) -> std::option::Option<&[crate::model::BatchResultErrorEntry]> {
        self.failed.as_deref()
    }
}
impl std::fmt::Debug for PublishBatchOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PublishBatchOutput");
        formatter.field("successful", &self.successful);
        formatter.field("failed", &self.failed);
        formatter.finish()
    }
}
/// See [`PublishBatchOutput`](crate::output::PublishBatchOutput)
pub mod publish_batch_output {
    /// A builder for [`PublishBatchOutput`](crate::output::PublishBatchOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) successful:
            std::option::Option<std::vec::Vec<crate::model::PublishBatchResultEntry>>,
        pub(crate) failed: std::option::Option<std::vec::Vec<crate::model::BatchResultErrorEntry>>,
    }
    impl Builder {
        /// Appends an item to `successful`.
        ///
        /// To override the contents of this collection use [`set_successful`](Self::set_successful).
        ///
        /// <p>A list of successful <code>PublishBatch</code> responses.</p>
        pub fn successful(
            mut self,
            input: impl Into<crate::model::PublishBatchResultEntry>,
        ) -> Self {
            let mut v = self.successful.unwrap_or_default();
            v.push(input.into());
            self.successful = Some(v);
            self
        }
        /// <p>A list of successful <code>PublishBatch</code> responses.</p>
        pub fn set_successful(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PublishBatchResultEntry>>,
        ) -> Self {
            self.successful = input;
            self
        }
        /// Appends an item to `failed`.
        ///
        /// To override the contents of this collection use [`set_failed`](Self::set_failed).
        ///
        /// <p>A list of failed <code>PublishBatch</code> responses. </p>
        pub fn failed(mut self, input: impl Into<crate::model::BatchResultErrorEntry>) -> Self {
            let mut v = self.failed.unwrap_or_default();
            v.push(input.into());
            self.failed = Some(v);
            self
        }
        /// <p>A list of failed <code>PublishBatch</code> responses. </p>
        pub fn set_failed(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BatchResultErrorEntry>>,
        ) -> Self {
            self.failed = input;
            self
        }
        /// Consumes the builder and constructs a [`PublishBatchOutput`](crate::output::PublishBatchOutput)
        pub fn build(self) -> crate::output::PublishBatchOutput {
            crate::output::PublishBatchOutput {
                successful: self.successful,
                failed: self.failed,
            }
        }
    }
}
impl PublishBatchOutput {
    /// Creates a new builder-style object to manufacture [`PublishBatchOutput`](crate::output::PublishBatchOutput)
    pub fn builder() -> crate::output::publish_batch_output::Builder {
        crate::output::publish_batch_output::Builder::default()
    }
}

/// <p>Response for Publish action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PublishOutput {
    /// <p>Unique identifier assigned to the published message.</p>
    /// <p>Length Constraint: Maximum 100 characters</p>
    pub message_id: std::option::Option<std::string::String>,
    /// <p>This response element applies only to FIFO (first-in-first-out) topics. </p>
    /// <p>The sequence number is a large, non-consecutive number that Amazon SNS assigns to each
    /// message. The length of <code>SequenceNumber</code> is 128 bits.
    /// <code>SequenceNumber</code> continues to increase for each
    /// <code>MessageGroupId</code>.</p>
    pub sequence_number: std::option::Option<std::string::String>,
}
impl PublishOutput {
    /// <p>Unique identifier assigned to the published message.</p>
    /// <p>Length Constraint: Maximum 100 characters</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>This response element applies only to FIFO (first-in-first-out) topics. </p>
    /// <p>The sequence number is a large, non-consecutive number that Amazon SNS assigns to each
    /// message. The length of <code>SequenceNumber</code> is 128 bits.
    /// <code>SequenceNumber</code> continues to increase for each
    /// <code>MessageGroupId</code>.</p>
    pub fn sequence_number(&self) -> std::option::Option<&str> {
        self.sequence_number.as_deref()
    }
}
impl std::fmt::Debug for PublishOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PublishOutput");
        formatter.field("message_id", &self.message_id);
        formatter.field("sequence_number", &self.sequence_number);
        formatter.finish()
    }
}
/// See [`PublishOutput`](crate::output::PublishOutput)
pub mod publish_output {
    /// A builder for [`PublishOutput`](crate::output::PublishOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message_id: std::option::Option<std::string::String>,
        pub(crate) sequence_number: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Unique identifier assigned to the published message.</p>
        /// <p>Length Constraint: Maximum 100 characters</p>
        pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.message_id = Some(input.into());
            self
        }
        /// <p>Unique identifier assigned to the published message.</p>
        /// <p>Length Constraint: Maximum 100 characters</p>
        pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message_id = input;
            self
        }
        /// <p>This response element applies only to FIFO (first-in-first-out) topics. </p>
        /// <p>The sequence number is a large, non-consecutive number that Amazon SNS assigns to each
        /// message. The length of <code>SequenceNumber</code> is 128 bits.
        /// <code>SequenceNumber</code> continues to increase for each
        /// <code>MessageGroupId</code>.</p>
        pub fn sequence_number(mut self, input: impl Into<std::string::String>) -> Self {
            self.sequence_number = Some(input.into());
            self
        }
        /// <p>This response element applies only to FIFO (first-in-first-out) topics. </p>
        /// <p>The sequence number is a large, non-consecutive number that Amazon SNS assigns to each
        /// message. The length of <code>SequenceNumber</code> is 128 bits.
        /// <code>SequenceNumber</code> continues to increase for each
        /// <code>MessageGroupId</code>.</p>
        pub fn set_sequence_number(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sequence_number = input;
            self
        }
        /// Consumes the builder and constructs a [`PublishOutput`](crate::output::PublishOutput)
        pub fn build(self) -> crate::output::PublishOutput {
            crate::output::PublishOutput {
                message_id: self.message_id,
                sequence_number: self.sequence_number,
            }
        }
    }
}
impl PublishOutput {
    /// Creates a new builder-style object to manufacture [`PublishOutput`](crate::output::PublishOutput)
    pub fn builder() -> crate::output::publish_output::Builder {
        crate::output::publish_output::Builder::default()
    }
}

/// <p>The response for the OptInPhoneNumber action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OptInPhoneNumberOutput {}
impl std::fmt::Debug for OptInPhoneNumberOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OptInPhoneNumberOutput");
        formatter.finish()
    }
}
/// See [`OptInPhoneNumberOutput`](crate::output::OptInPhoneNumberOutput)
pub mod opt_in_phone_number_output {
    /// A builder for [`OptInPhoneNumberOutput`](crate::output::OptInPhoneNumberOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`OptInPhoneNumberOutput`](crate::output::OptInPhoneNumberOutput)
        pub fn build(self) -> crate::output::OptInPhoneNumberOutput {
            crate::output::OptInPhoneNumberOutput {}
        }
    }
}
impl OptInPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`OptInPhoneNumberOutput`](crate::output::OptInPhoneNumberOutput)
    pub fn builder() -> crate::output::opt_in_phone_number_output::Builder {
        crate::output::opt_in_phone_number_output::Builder::default()
    }
}

/// <p>Response for ListTopics action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTopicsOutput {
    /// <p>A list of topic ARNs.</p>
    pub topics: std::option::Option<std::vec::Vec<crate::model::Topic>>,
    /// <p>Token to pass along to the next <code>ListTopics</code> request. This element is
    /// returned if there are additional topics to retrieve.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListTopicsOutput {
    /// <p>A list of topic ARNs.</p>
    pub fn topics(&self) -> std::option::Option<&[crate::model::Topic]> {
        self.topics.as_deref()
    }
    /// <p>Token to pass along to the next <code>ListTopics</code> request. This element is
    /// returned if there are additional topics to retrieve.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListTopicsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTopicsOutput");
        formatter.field("topics", &self.topics);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTopicsOutput`](crate::output::ListTopicsOutput)
pub mod list_topics_output {
    /// A builder for [`ListTopicsOutput`](crate::output::ListTopicsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) topics: std::option::Option<std::vec::Vec<crate::model::Topic>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `topics`.
        ///
        /// To override the contents of this collection use [`set_topics`](Self::set_topics).
        ///
        /// <p>A list of topic ARNs.</p>
        pub fn topics(mut self, input: impl Into<crate::model::Topic>) -> Self {
            let mut v = self.topics.unwrap_or_default();
            v.push(input.into());
            self.topics = Some(v);
            self
        }
        /// <p>A list of topic ARNs.</p>
        pub fn set_topics(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Topic>>,
        ) -> Self {
            self.topics = input;
            self
        }
        /// <p>Token to pass along to the next <code>ListTopics</code> request. This element is
        /// returned if there are additional topics to retrieve.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token to pass along to the next <code>ListTopics</code> request. This element is
        /// returned if there are additional topics to retrieve.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTopicsOutput`](crate::output::ListTopicsOutput)
        pub fn build(self) -> crate::output::ListTopicsOutput {
            crate::output::ListTopicsOutput {
                topics: self.topics,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTopicsOutput {
    /// Creates a new builder-style object to manufacture [`ListTopicsOutput`](crate::output::ListTopicsOutput)
    pub fn builder() -> crate::output::list_topics_output::Builder {
        crate::output::list_topics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags associated with the specified topic.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags associated with the specified topic.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags associated with the specified topic.</p>
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        /// <p>The tags associated with the specified topic.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// <p>Response for ListSubscriptionsByTopic action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSubscriptionsByTopicOutput {
    /// <p>A list of subscriptions.</p>
    pub subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
    /// <p>Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This
    /// element is returned if there are more subscriptions to retrieve.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSubscriptionsByTopicOutput {
    /// <p>A list of subscriptions.</p>
    pub fn subscriptions(&self) -> std::option::Option<&[crate::model::Subscription]> {
        self.subscriptions.as_deref()
    }
    /// <p>Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This
    /// element is returned if there are more subscriptions to retrieve.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSubscriptionsByTopicOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSubscriptionsByTopicOutput");
        formatter.field("subscriptions", &self.subscriptions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSubscriptionsByTopicOutput`](crate::output::ListSubscriptionsByTopicOutput)
pub mod list_subscriptions_by_topic_output {
    /// A builder for [`ListSubscriptionsByTopicOutput`](crate::output::ListSubscriptionsByTopicOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `subscriptions`.
        ///
        /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
        ///
        /// <p>A list of subscriptions.</p>
        pub fn subscriptions(mut self, input: impl Into<crate::model::Subscription>) -> Self {
            let mut v = self.subscriptions.unwrap_or_default();
            v.push(input.into());
            self.subscriptions = Some(v);
            self
        }
        /// <p>A list of subscriptions.</p>
        pub fn set_subscriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        ) -> Self {
            self.subscriptions = input;
            self
        }
        /// <p>Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This
        /// element is returned if there are more subscriptions to retrieve.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token to pass along to the next <code>ListSubscriptionsByTopic</code> request. This
        /// element is returned if there are more subscriptions to retrieve.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSubscriptionsByTopicOutput`](crate::output::ListSubscriptionsByTopicOutput)
        pub fn build(self) -> crate::output::ListSubscriptionsByTopicOutput {
            crate::output::ListSubscriptionsByTopicOutput {
                subscriptions: self.subscriptions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSubscriptionsByTopicOutput {
    /// Creates a new builder-style object to manufacture [`ListSubscriptionsByTopicOutput`](crate::output::ListSubscriptionsByTopicOutput)
    pub fn builder() -> crate::output::list_subscriptions_by_topic_output::Builder {
        crate::output::list_subscriptions_by_topic_output::Builder::default()
    }
}

/// <p>Response for ListSubscriptions action</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSubscriptionsOutput {
    /// <p>A list of subscriptions.</p>
    pub subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
    /// <p>Token to pass along to the next <code>ListSubscriptions</code> request. This element
    /// is returned if there are more subscriptions to retrieve.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSubscriptionsOutput {
    /// <p>A list of subscriptions.</p>
    pub fn subscriptions(&self) -> std::option::Option<&[crate::model::Subscription]> {
        self.subscriptions.as_deref()
    }
    /// <p>Token to pass along to the next <code>ListSubscriptions</code> request. This element
    /// is returned if there are more subscriptions to retrieve.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSubscriptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSubscriptionsOutput");
        formatter.field("subscriptions", &self.subscriptions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSubscriptionsOutput`](crate::output::ListSubscriptionsOutput)
pub mod list_subscriptions_output {
    /// A builder for [`ListSubscriptionsOutput`](crate::output::ListSubscriptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `subscriptions`.
        ///
        /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
        ///
        /// <p>A list of subscriptions.</p>
        pub fn subscriptions(mut self, input: impl Into<crate::model::Subscription>) -> Self {
            let mut v = self.subscriptions.unwrap_or_default();
            v.push(input.into());
            self.subscriptions = Some(v);
            self
        }
        /// <p>A list of subscriptions.</p>
        pub fn set_subscriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        ) -> Self {
            self.subscriptions = input;
            self
        }
        /// <p>Token to pass along to the next <code>ListSubscriptions</code> request. This element
        /// is returned if there are more subscriptions to retrieve.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token to pass along to the next <code>ListSubscriptions</code> request. This element
        /// is returned if there are more subscriptions to retrieve.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSubscriptionsOutput`](crate::output::ListSubscriptionsOutput)
        pub fn build(self) -> crate::output::ListSubscriptionsOutput {
            crate::output::ListSubscriptionsOutput {
                subscriptions: self.subscriptions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`ListSubscriptionsOutput`](crate::output::ListSubscriptionsOutput)
    pub fn builder() -> crate::output::list_subscriptions_output::Builder {
        crate::output::list_subscriptions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSmsSandboxPhoneNumbersOutput {
    /// <p>A list of the calling account's pending and verified phone numbers.</p>
    pub phone_numbers: std::option::Option<std::vec::Vec<crate::model::SmsSandboxPhoneNumber>>,
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListSMSSandboxPhoneNumbersInput</code> operation if additional pages of
    /// records are available.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSmsSandboxPhoneNumbersOutput {
    /// <p>A list of the calling account's pending and verified phone numbers.</p>
    pub fn phone_numbers(&self) -> std::option::Option<&[crate::model::SmsSandboxPhoneNumber]> {
        self.phone_numbers.as_deref()
    }
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListSMSSandboxPhoneNumbersInput</code> operation if additional pages of
    /// records are available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSmsSandboxPhoneNumbersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSmsSandboxPhoneNumbersOutput");
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSmsSandboxPhoneNumbersOutput`](crate::output::ListSmsSandboxPhoneNumbersOutput)
pub mod list_sms_sandbox_phone_numbers_output {
    /// A builder for [`ListSmsSandboxPhoneNumbersOutput`](crate::output::ListSmsSandboxPhoneNumbersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_numbers:
            std::option::Option<std::vec::Vec<crate::model::SmsSandboxPhoneNumber>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
        ///
        /// <p>A list of the calling account's pending and verified phone numbers.</p>
        pub fn phone_numbers(
            mut self,
            input: impl Into<crate::model::SmsSandboxPhoneNumber>,
        ) -> Self {
            let mut v = self.phone_numbers.unwrap_or_default();
            v.push(input.into());
            self.phone_numbers = Some(v);
            self
        }
        /// <p>A list of the calling account's pending and verified phone numbers.</p>
        pub fn set_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SmsSandboxPhoneNumber>>,
        ) -> Self {
            self.phone_numbers = input;
            self
        }
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListSMSSandboxPhoneNumbersInput</code> operation if additional pages of
        /// records are available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListSMSSandboxPhoneNumbersInput</code> operation if additional pages of
        /// records are available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSmsSandboxPhoneNumbersOutput`](crate::output::ListSmsSandboxPhoneNumbersOutput)
        pub fn build(self) -> crate::output::ListSmsSandboxPhoneNumbersOutput {
            crate::output::ListSmsSandboxPhoneNumbersOutput {
                phone_numbers: self.phone_numbers,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSmsSandboxPhoneNumbersOutput {
    /// Creates a new builder-style object to manufacture [`ListSmsSandboxPhoneNumbersOutput`](crate::output::ListSmsSandboxPhoneNumbersOutput)
    pub fn builder() -> crate::output::list_sms_sandbox_phone_numbers_output::Builder {
        crate::output::list_sms_sandbox_phone_numbers_output::Builder::default()
    }
}

/// <p>Response for ListPlatformApplications action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPlatformApplicationsOutput {
    /// <p>Platform applications returned when calling ListPlatformApplications action.</p>
    pub platform_applications:
        std::option::Option<std::vec::Vec<crate::model::PlatformApplication>>,
    /// <p>NextToken string is returned when calling ListPlatformApplications action if
    /// additional records are available after the first page results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPlatformApplicationsOutput {
    /// <p>Platform applications returned when calling ListPlatformApplications action.</p>
    pub fn platform_applications(
        &self,
    ) -> std::option::Option<&[crate::model::PlatformApplication]> {
        self.platform_applications.as_deref()
    }
    /// <p>NextToken string is returned when calling ListPlatformApplications action if
    /// additional records are available after the first page results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPlatformApplicationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPlatformApplicationsOutput");
        formatter.field("platform_applications", &self.platform_applications);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPlatformApplicationsOutput`](crate::output::ListPlatformApplicationsOutput)
pub mod list_platform_applications_output {
    /// A builder for [`ListPlatformApplicationsOutput`](crate::output::ListPlatformApplicationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) platform_applications:
            std::option::Option<std::vec::Vec<crate::model::PlatformApplication>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `platform_applications`.
        ///
        /// To override the contents of this collection use [`set_platform_applications`](Self::set_platform_applications).
        ///
        /// <p>Platform applications returned when calling ListPlatformApplications action.</p>
        pub fn platform_applications(
            mut self,
            input: impl Into<crate::model::PlatformApplication>,
        ) -> Self {
            let mut v = self.platform_applications.unwrap_or_default();
            v.push(input.into());
            self.platform_applications = Some(v);
            self
        }
        /// <p>Platform applications returned when calling ListPlatformApplications action.</p>
        pub fn set_platform_applications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PlatformApplication>>,
        ) -> Self {
            self.platform_applications = input;
            self
        }
        /// <p>NextToken string is returned when calling ListPlatformApplications action if
        /// additional records are available after the first page results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>NextToken string is returned when calling ListPlatformApplications action if
        /// additional records are available after the first page results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPlatformApplicationsOutput`](crate::output::ListPlatformApplicationsOutput)
        pub fn build(self) -> crate::output::ListPlatformApplicationsOutput {
            crate::output::ListPlatformApplicationsOutput {
                platform_applications: self.platform_applications,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPlatformApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListPlatformApplicationsOutput`](crate::output::ListPlatformApplicationsOutput)
    pub fn builder() -> crate::output::list_platform_applications_output::Builder {
        crate::output::list_platform_applications_output::Builder::default()
    }
}

/// <p>The response from the <code>ListPhoneNumbersOptedOut</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPhoneNumbersOptedOutOutput {
    /// <p>A list of phone numbers that are opted out of receiving SMS messages. The list is
    /// paginated, and each page can contain up to 100 phone numbers.</p>
    pub phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListPhoneNumbersOptedOut</code> action if additional records are available
    /// after the first page of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPhoneNumbersOptedOutOutput {
    /// <p>A list of phone numbers that are opted out of receiving SMS messages. The list is
    /// paginated, and each page can contain up to 100 phone numbers.</p>
    pub fn phone_numbers(&self) -> std::option::Option<&[std::string::String]> {
        self.phone_numbers.as_deref()
    }
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListPhoneNumbersOptedOut</code> action if additional records are available
    /// after the first page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPhoneNumbersOptedOutOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPhoneNumbersOptedOutOutput");
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPhoneNumbersOptedOutOutput`](crate::output::ListPhoneNumbersOptedOutOutput)
pub mod list_phone_numbers_opted_out_output {
    /// A builder for [`ListPhoneNumbersOptedOutOutput`](crate::output::ListPhoneNumbersOptedOutOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) phone_numbers: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
        ///
        /// <p>A list of phone numbers that are opted out of receiving SMS messages. The list is
        /// paginated, and each page can contain up to 100 phone numbers.</p>
        pub fn phone_numbers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.phone_numbers.unwrap_or_default();
            v.push(input.into());
            self.phone_numbers = Some(v);
            self
        }
        /// <p>A list of phone numbers that are opted out of receiving SMS messages. The list is
        /// paginated, and each page can contain up to 100 phone numbers.</p>
        pub fn set_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.phone_numbers = input;
            self
        }
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListPhoneNumbersOptedOut</code> action if additional records are available
        /// after the first page of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListPhoneNumbersOptedOut</code> action if additional records are available
        /// after the first page of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPhoneNumbersOptedOutOutput`](crate::output::ListPhoneNumbersOptedOutOutput)
        pub fn build(self) -> crate::output::ListPhoneNumbersOptedOutOutput {
            crate::output::ListPhoneNumbersOptedOutOutput {
                phone_numbers: self.phone_numbers,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPhoneNumbersOptedOutOutput {
    /// Creates a new builder-style object to manufacture [`ListPhoneNumbersOptedOutOutput`](crate::output::ListPhoneNumbersOptedOutOutput)
    pub fn builder() -> crate::output::list_phone_numbers_opted_out_output::Builder {
        crate::output::list_phone_numbers_opted_out_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListOriginationNumbersOutput {
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListOriginationNumbers</code> operation if additional pages of records are
    /// available.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of the calling account's verified and pending origination numbers.</p>
    pub phone_numbers: std::option::Option<std::vec::Vec<crate::model::PhoneNumberInformation>>,
}
impl ListOriginationNumbersOutput {
    /// <p>A <code>NextToken</code> string is returned when you call the
    /// <code>ListOriginationNumbers</code> operation if additional pages of records are
    /// available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of the calling account's verified and pending origination numbers.</p>
    pub fn phone_numbers(&self) -> std::option::Option<&[crate::model::PhoneNumberInformation]> {
        self.phone_numbers.as_deref()
    }
}
impl std::fmt::Debug for ListOriginationNumbersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListOriginationNumbersOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("phone_numbers", &self.phone_numbers);
        formatter.finish()
    }
}
/// See [`ListOriginationNumbersOutput`](crate::output::ListOriginationNumbersOutput)
pub mod list_origination_numbers_output {
    /// A builder for [`ListOriginationNumbersOutput`](crate::output::ListOriginationNumbersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) phone_numbers:
            std::option::Option<std::vec::Vec<crate::model::PhoneNumberInformation>>,
    }
    impl Builder {
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListOriginationNumbers</code> operation if additional pages of records are
        /// available.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A <code>NextToken</code> string is returned when you call the
        /// <code>ListOriginationNumbers</code> operation if additional pages of records are
        /// available.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `phone_numbers`.
        ///
        /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
        ///
        /// <p>A list of the calling account's verified and pending origination numbers.</p>
        pub fn phone_numbers(
            mut self,
            input: impl Into<crate::model::PhoneNumberInformation>,
        ) -> Self {
            let mut v = self.phone_numbers.unwrap_or_default();
            v.push(input.into());
            self.phone_numbers = Some(v);
            self
        }
        /// <p>A list of the calling account's verified and pending origination numbers.</p>
        pub fn set_phone_numbers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PhoneNumberInformation>>,
        ) -> Self {
            self.phone_numbers = input;
            self
        }
        /// Consumes the builder and constructs a [`ListOriginationNumbersOutput`](crate::output::ListOriginationNumbersOutput)
        pub fn build(self) -> crate::output::ListOriginationNumbersOutput {
            crate::output::ListOriginationNumbersOutput {
                next_token: self.next_token,
                phone_numbers: self.phone_numbers,
            }
        }
    }
}
impl ListOriginationNumbersOutput {
    /// Creates a new builder-style object to manufacture [`ListOriginationNumbersOutput`](crate::output::ListOriginationNumbersOutput)
    pub fn builder() -> crate::output::list_origination_numbers_output::Builder {
        crate::output::list_origination_numbers_output::Builder::default()
    }
}

/// <p>Response for ListEndpointsByPlatformApplication action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListEndpointsByPlatformApplicationOutput {
    /// <p>Endpoints returned for ListEndpointsByPlatformApplication action.</p>
    pub endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
    /// <p>NextToken string is returned when calling ListEndpointsByPlatformApplication action if
    /// additional records are available after the first page results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListEndpointsByPlatformApplicationOutput {
    /// <p>Endpoints returned for ListEndpointsByPlatformApplication action.</p>
    pub fn endpoints(&self) -> std::option::Option<&[crate::model::Endpoint]> {
        self.endpoints.as_deref()
    }
    /// <p>NextToken string is returned when calling ListEndpointsByPlatformApplication action if
    /// additional records are available after the first page results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListEndpointsByPlatformApplicationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListEndpointsByPlatformApplicationOutput");
        formatter.field("endpoints", &self.endpoints);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListEndpointsByPlatformApplicationOutput`](crate::output::ListEndpointsByPlatformApplicationOutput)
pub mod list_endpoints_by_platform_application_output {
    /// A builder for [`ListEndpointsByPlatformApplicationOutput`](crate::output::ListEndpointsByPlatformApplicationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `endpoints`.
        ///
        /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
        ///
        /// <p>Endpoints returned for ListEndpointsByPlatformApplication action.</p>
        pub fn endpoints(mut self, input: impl Into<crate::model::Endpoint>) -> Self {
            let mut v = self.endpoints.unwrap_or_default();
            v.push(input.into());
            self.endpoints = Some(v);
            self
        }
        /// <p>Endpoints returned for ListEndpointsByPlatformApplication action.</p>
        pub fn set_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        ) -> Self {
            self.endpoints = input;
            self
        }
        /// <p>NextToken string is returned when calling ListEndpointsByPlatformApplication action if
        /// additional records are available after the first page results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>NextToken string is returned when calling ListEndpointsByPlatformApplication action if
        /// additional records are available after the first page results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListEndpointsByPlatformApplicationOutput`](crate::output::ListEndpointsByPlatformApplicationOutput)
        pub fn build(self) -> crate::output::ListEndpointsByPlatformApplicationOutput {
            crate::output::ListEndpointsByPlatformApplicationOutput {
                endpoints: self.endpoints,
                next_token: self.next_token,
            }
        }
    }
}
impl ListEndpointsByPlatformApplicationOutput {
    /// Creates a new builder-style object to manufacture [`ListEndpointsByPlatformApplicationOutput`](crate::output::ListEndpointsByPlatformApplicationOutput)
    pub fn builder() -> crate::output::list_endpoints_by_platform_application_output::Builder {
        crate::output::list_endpoints_by_platform_application_output::Builder::default()
    }
}

/// <p>Response for GetTopicAttributes action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTopicAttributesOutput {
    /// <p>A map of the topic's attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DeliveryPolicy</code> – The JSON serialization of the topic's
    /// delivery policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DisplayName</code> – The human-readable name used in the
    /// <code>From</code> field for notifications to <code>email</code> and
    /// <code>email-json</code> endpoints.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Owner</code> – The Amazon Web Services account ID of the topic's owner.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Policy</code> – The JSON serialization of the topic's access
    /// control policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsConfirmed</code> – The number of confirmed
    /// subscriptions for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsDeleted</code> – The number of deleted subscriptions
    /// for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsPending</code> – The number of subscriptions pending
    /// confirmation for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TopicArn</code> – The topic's ARN.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
    /// effective delivery policy, taking system defaults into account.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KmsMasterKeyId</code> - The ID of an Amazon Web Services managed customer master key
    /// (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
    /// Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
    /// Reference</i>.</p>
    /// </li>
    /// </ul>
    ///
    ///
    /// <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
    /// topic is created.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
    /// FIFO topics.</p>
    ///
    /// <ul>
    /// <li>
    /// <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
    /// If you create a FIFO topic and this attribute is <code>false</code>, you must
    /// specify a value for the <code>MessageDeduplicationId</code> parameter for the
    /// <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
    /// </li>
    /// <li>
    /// <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
    /// Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
    /// the body of the message (but not the attributes of the message).</p>
    /// <p>(Optional) To override the generated value, you can specify a value
    /// for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
    /// action.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetTopicAttributesOutput {
    /// <p>A map of the topic's attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DeliveryPolicy</code> – The JSON serialization of the topic's
    /// delivery policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DisplayName</code> – The human-readable name used in the
    /// <code>From</code> field for notifications to <code>email</code> and
    /// <code>email-json</code> endpoints.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Owner</code> – The Amazon Web Services account ID of the topic's owner.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Policy</code> – The JSON serialization of the topic's access
    /// control policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsConfirmed</code> – The number of confirmed
    /// subscriptions for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsDeleted</code> – The number of deleted subscriptions
    /// for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionsPending</code> – The number of subscriptions pending
    /// confirmation for the topic.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TopicArn</code> – The topic's ARN.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
    /// effective delivery policy, taking system defaults into account.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KmsMasterKeyId</code> - The ID of an Amazon Web Services managed customer master key
    /// (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
    /// Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
    /// Reference</i>.</p>
    /// </li>
    /// </ul>
    ///
    ///
    /// <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
    /// topic is created.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
    /// FIFO topics.</p>
    ///
    /// <ul>
    /// <li>
    /// <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
    /// If you create a FIFO topic and this attribute is <code>false</code>, you must
    /// specify a value for the <code>MessageDeduplicationId</code> parameter for the
    /// <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
    /// </li>
    /// <li>
    /// <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
    /// Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
    /// the body of the message (but not the attributes of the message).</p>
    /// <p>(Optional) To override the generated value, you can specify a value
    /// for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
    /// action.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetTopicAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetTopicAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetTopicAttributesOutput`](crate::output::GetTopicAttributesOutput)
pub mod get_topic_attributes_output {
    /// A builder for [`GetTopicAttributesOutput`](crate::output::GetTopicAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>A map of the topic's attributes. Attributes in this map include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DeliveryPolicy</code> – The JSON serialization of the topic's
        /// delivery policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DisplayName</code> – The human-readable name used in the
        /// <code>From</code> field for notifications to <code>email</code> and
        /// <code>email-json</code> endpoints.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Owner</code> – The Amazon Web Services account ID of the topic's owner.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Policy</code> – The JSON serialization of the topic's access
        /// control policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsConfirmed</code> – The number of confirmed
        /// subscriptions for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsDeleted</code> – The number of deleted subscriptions
        /// for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsPending</code> – The number of subscriptions pending
        /// confirmation for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TopicArn</code> – The topic's ARN.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
        /// effective delivery policy, taking system defaults into account.</p>
        /// </li>
        /// </ul>
        ///
        /// <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KmsMasterKeyId</code> - The ID of an Amazon Web Services managed customer master key
        /// (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
        /// Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
        /// Reference</i>.</p>
        /// </li>
        /// </ul>
        ///
        ///
        /// <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
        /// topic is created.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
        /// FIFO topics.</p>
        ///
        /// <ul>
        /// <li>
        /// <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
        /// If you create a FIFO topic and this attribute is <code>false</code>, you must
        /// specify a value for the <code>MessageDeduplicationId</code> parameter for the
        /// <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
        /// </li>
        /// <li>
        /// <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
        /// Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
        /// the body of the message (but not the attributes of the message).</p>
        /// <p>(Optional) To override the generated value, you can specify a value
        /// for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
        /// action.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>A map of the topic's attributes. Attributes in this map include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DeliveryPolicy</code> – The JSON serialization of the topic's
        /// delivery policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DisplayName</code> – The human-readable name used in the
        /// <code>From</code> field for notifications to <code>email</code> and
        /// <code>email-json</code> endpoints.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Owner</code> – The Amazon Web Services account ID of the topic's owner.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Policy</code> – The JSON serialization of the topic's access
        /// control policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsConfirmed</code> – The number of confirmed
        /// subscriptions for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsDeleted</code> – The number of deleted subscriptions
        /// for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionsPending</code> – The number of subscriptions pending
        /// confirmation for the topic.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TopicArn</code> – The topic's ARN.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
        /// effective delivery policy, taking system defaults into account.</p>
        /// </li>
        /// </ul>
        ///
        /// <p>The following attribute applies only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html">server-side-encryption</a>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KmsMasterKeyId</code> - The ID of an Amazon Web Services managed customer master key
        /// (CMK) for Amazon SNS or a custom CMK. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-server-side-encryption.html#sse-key-terms">Key
        /// Terms</a>. For more examples, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestParameters">KeyId</a> in the <i>Key Management Service API
        /// Reference</i>.</p>
        /// </li>
        /// </ul>
        ///
        ///
        /// <p>The following attributes apply only to <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-fifo-topics.html">FIFO topics</a>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>FifoTopic</code> – When this is set to <code>true</code>, a FIFO
        /// topic is created.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ContentBasedDeduplication</code> – Enables content-based deduplication for
        /// FIFO topics.</p>
        ///
        /// <ul>
        /// <li>
        /// <p>By default, <code>ContentBasedDeduplication</code> is set to <code>false</code>.
        /// If you create a FIFO topic and this attribute is <code>false</code>, you must
        /// specify a value for the <code>MessageDeduplicationId</code> parameter for the
        /// <a href="https://docs.aws.amazon.com/sns/latest/api/API_Publish.html">Publish</a> action. </p>
        /// </li>
        /// <li>
        /// <p>When you set <code>ContentBasedDeduplication</code> to <code>true</code>,
        /// Amazon SNS uses a SHA-256 hash to generate the <code>MessageDeduplicationId</code> using
        /// the body of the message (but not the attributes of the message).</p>
        /// <p>(Optional) To override the generated value, you can specify a value
        /// for the <code>MessageDeduplicationId</code> parameter for the <code>Publish</code>
        /// action.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetTopicAttributesOutput`](crate::output::GetTopicAttributesOutput)
        pub fn build(self) -> crate::output::GetTopicAttributesOutput {
            crate::output::GetTopicAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetTopicAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetTopicAttributesOutput`](crate::output::GetTopicAttributesOutput)
    pub fn builder() -> crate::output::get_topic_attributes_output::Builder {
        crate::output::get_topic_attributes_output::Builder::default()
    }
}

/// <p>Response for GetSubscriptionAttributes action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSubscriptionAttributesOutput {
    /// <p>A map of the subscription's attributes. Attributes in this map include the
    /// following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ConfirmationWasAuthenticated</code> – <code>true</code> if the
    /// subscription confirmation request was authenticated.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DeliveryPolicy</code> – The JSON serialization of the
    /// subscription's delivery policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
    /// effective delivery policy that takes into account the topic delivery policy and
    /// account system defaults.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>FilterPolicy</code> – The filter policy JSON that is assigned to
    /// the subscription. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html">Amazon SNS Message
    /// Filtering</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Owner</code> – The Amazon Web Services account ID of the subscription's
    /// owner.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PendingConfirmation</code> – <code>true</code> if the subscription
    /// hasn't been confirmed. To confirm a pending subscription, call the
    /// <code>ConfirmSubscription</code> action with a confirmation token.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RawMessageDelivery</code> – <code>true</code> if raw message
    /// delivery is enabled for the subscription. Raw messages are free of JSON
    /// formatting and can be sent to HTTP/S and Amazon SQS endpoints.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
    /// Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
    /// or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
    /// in the dead-letter queue for further analysis or reprocessing.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionArn</code> – The subscription's ARN.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TopicArn</code> – The topic ARN that the subscription is associated
    /// with.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
    /// <ul>
    /// <li>
    /// <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
    /// </li>
    /// <li>
    /// <p>Amazon SNS listed as a trusted entity</p>
    /// </li>
    /// </ul>
    /// <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
    /// For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
    /// to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// </li>
    /// </ul>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetSubscriptionAttributesOutput {
    /// <p>A map of the subscription's attributes. Attributes in this map include the
    /// following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>ConfirmationWasAuthenticated</code> – <code>true</code> if the
    /// subscription confirmation request was authenticated.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DeliveryPolicy</code> – The JSON serialization of the
    /// subscription's delivery policy.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
    /// effective delivery policy that takes into account the topic delivery policy and
    /// account system defaults.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>FilterPolicy</code> – The filter policy JSON that is assigned to
    /// the subscription. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html">Amazon SNS Message
    /// Filtering</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Owner</code> – The Amazon Web Services account ID of the subscription's
    /// owner.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>PendingConfirmation</code> – <code>true</code> if the subscription
    /// hasn't been confirmed. To confirm a pending subscription, call the
    /// <code>ConfirmSubscription</code> action with a confirmation token.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RawMessageDelivery</code> – <code>true</code> if raw message
    /// delivery is enabled for the subscription. Raw messages are free of JSON
    /// formatting and can be sent to HTTP/S and Amazon SQS endpoints.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
    /// Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
    /// or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
    /// in the dead-letter queue for further analysis or reprocessing.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SubscriptionArn</code> – The subscription's ARN.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>TopicArn</code> – The topic ARN that the subscription is associated
    /// with.</p>
    /// </li>
    /// </ul>
    ///
    /// <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
    /// <ul>
    /// <li>
    /// <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
    /// </li>
    /// <li>
    /// <p>Amazon SNS listed as a trusted entity</p>
    /// </li>
    /// </ul>
    /// <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
    /// For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
    /// to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
    /// </li>
    /// </ul>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetSubscriptionAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSubscriptionAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetSubscriptionAttributesOutput`](crate::output::GetSubscriptionAttributesOutput)
pub mod get_subscription_attributes_output {
    /// A builder for [`GetSubscriptionAttributesOutput`](crate::output::GetSubscriptionAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>A map of the subscription's attributes. Attributes in this map include the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ConfirmationWasAuthenticated</code> – <code>true</code> if the
        /// subscription confirmation request was authenticated.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DeliveryPolicy</code> – The JSON serialization of the
        /// subscription's delivery policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
        /// effective delivery policy that takes into account the topic delivery policy and
        /// account system defaults.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FilterPolicy</code> – The filter policy JSON that is assigned to
        /// the subscription. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html">Amazon SNS Message
        /// Filtering</a> in the <i>Amazon SNS Developer Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Owner</code> – The Amazon Web Services account ID of the subscription's
        /// owner.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PendingConfirmation</code> – <code>true</code> if the subscription
        /// hasn't been confirmed. To confirm a pending subscription, call the
        /// <code>ConfirmSubscription</code> action with a confirmation token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RawMessageDelivery</code> – <code>true</code> if raw message
        /// delivery is enabled for the subscription. Raw messages are free of JSON
        /// formatting and can be sent to HTTP/S and Amazon SQS endpoints.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
        /// Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
        /// or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
        /// in the dead-letter queue for further analysis or reprocessing.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionArn</code> – The subscription's ARN.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TopicArn</code> – The topic ARN that the subscription is associated
        /// with.</p>
        /// </li>
        /// </ul>
        ///
        /// <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
        /// <ul>
        /// <li>
        /// <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
        /// </li>
        /// <li>
        /// <p>Amazon SNS listed as a trusted entity</p>
        /// </li>
        /// </ul>
        /// <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
        /// For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
        /// to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>A map of the subscription's attributes. Attributes in this map include the
        /// following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ConfirmationWasAuthenticated</code> – <code>true</code> if the
        /// subscription confirmation request was authenticated.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DeliveryPolicy</code> – The JSON serialization of the
        /// subscription's delivery policy.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EffectiveDeliveryPolicy</code> – The JSON serialization of the
        /// effective delivery policy that takes into account the topic delivery policy and
        /// account system defaults.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>FilterPolicy</code> – The filter policy JSON that is assigned to
        /// the subscription. For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-message-filtering.html">Amazon SNS Message
        /// Filtering</a> in the <i>Amazon SNS Developer Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Owner</code> – The Amazon Web Services account ID of the subscription's
        /// owner.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PendingConfirmation</code> – <code>true</code> if the subscription
        /// hasn't been confirmed. To confirm a pending subscription, call the
        /// <code>ConfirmSubscription</code> action with a confirmation token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RawMessageDelivery</code> – <code>true</code> if raw message
        /// delivery is enabled for the subscription. Raw messages are free of JSON
        /// formatting and can be sent to HTTP/S and Amazon SQS endpoints.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>RedrivePolicy</code> – When specified, sends undeliverable messages to the specified Amazon SQS dead-letter queue.
        /// Messages that can't be delivered due to client errors (for example, when the subscribed endpoint is unreachable)
        /// or server errors (for example, when the service that powers the subscribed endpoint becomes unavailable) are held
        /// in the dead-letter queue for further analysis or reprocessing.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SubscriptionArn</code> – The subscription's ARN.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>TopicArn</code> – The topic ARN that the subscription is associated
        /// with.</p>
        /// </li>
        /// </ul>
        ///
        /// <p>The following attribute applies only to Amazon Kinesis Data Firehose delivery stream subscriptions:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SubscriptionRoleArn</code> – The ARN of the IAM role that has the following:</p>
        /// <ul>
        /// <li>
        /// <p>Permission to write to the Kinesis Data Firehose delivery stream</p>
        /// </li>
        /// <li>
        /// <p>Amazon SNS listed as a trusted entity</p>
        /// </li>
        /// </ul>
        /// <p>Specifying a valid ARN for this attribute is required for Kinesis Data Firehose delivery stream subscriptions.
        /// For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-firehose-as-subscriber.html">Fanout
        /// to Kinesis Data Firehose delivery streams</a> in the <i>Amazon SNS Developer Guide</i>.</p>
        /// </li>
        /// </ul>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSubscriptionAttributesOutput`](crate::output::GetSubscriptionAttributesOutput)
        pub fn build(self) -> crate::output::GetSubscriptionAttributesOutput {
            crate::output::GetSubscriptionAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetSubscriptionAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetSubscriptionAttributesOutput`](crate::output::GetSubscriptionAttributesOutput)
    pub fn builder() -> crate::output::get_subscription_attributes_output::Builder {
        crate::output::get_subscription_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSmsSandboxAccountStatusOutput {
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub is_in_sandbox: bool,
}
impl GetSmsSandboxAccountStatusOutput {
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub fn is_in_sandbox(&self) -> bool {
        self.is_in_sandbox
    }
}
impl std::fmt::Debug for GetSmsSandboxAccountStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSmsSandboxAccountStatusOutput");
        formatter.field("is_in_sandbox", &self.is_in_sandbox);
        formatter.finish()
    }
}
/// See [`GetSmsSandboxAccountStatusOutput`](crate::output::GetSmsSandboxAccountStatusOutput)
pub mod get_sms_sandbox_account_status_output {
    /// A builder for [`GetSmsSandboxAccountStatusOutput`](crate::output::GetSmsSandboxAccountStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) is_in_sandbox: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
        pub fn is_in_sandbox(mut self, input: bool) -> Self {
            self.is_in_sandbox = Some(input);
            self
        }
        /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
        pub fn set_is_in_sandbox(mut self, input: std::option::Option<bool>) -> Self {
            self.is_in_sandbox = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSmsSandboxAccountStatusOutput`](crate::output::GetSmsSandboxAccountStatusOutput)
        pub fn build(self) -> crate::output::GetSmsSandboxAccountStatusOutput {
            crate::output::GetSmsSandboxAccountStatusOutput {
                is_in_sandbox: self.is_in_sandbox.unwrap_or_default(),
            }
        }
    }
}
impl GetSmsSandboxAccountStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSmsSandboxAccountStatusOutput`](crate::output::GetSmsSandboxAccountStatusOutput)
    pub fn builder() -> crate::output::get_sms_sandbox_account_status_output::Builder {
        crate::output::get_sms_sandbox_account_status_output::Builder::default()
    }
}

/// <p>The response from the <code>GetSMSAttributes</code> request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSmsAttributesOutput {
    /// <p>The SMS attribute names and their values.</p>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetSmsAttributesOutput {
    /// <p>The SMS attribute names and their values.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetSmsAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSmsAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetSmsAttributesOutput`](crate::output::GetSmsAttributesOutput)
pub mod get_sms_attributes_output {
    /// A builder for [`GetSmsAttributesOutput`](crate::output::GetSmsAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>The SMS attribute names and their values.</p>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>The SMS attribute names and their values.</p>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSmsAttributesOutput`](crate::output::GetSmsAttributesOutput)
        pub fn build(self) -> crate::output::GetSmsAttributesOutput {
            crate::output::GetSmsAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetSmsAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetSmsAttributesOutput`](crate::output::GetSmsAttributesOutput)
    pub fn builder() -> crate::output::get_sms_attributes_output::Builder {
        crate::output::get_sms_attributes_output::Builder::default()
    }
}

/// <p>Response for GetPlatformApplicationAttributes action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPlatformApplicationAttributesOutput {
    /// <p>Attributes include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AppleCertificateExpiryDate</code> – The expiry date of the SSL certificate used to configure certificate-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ApplePlatformTeamID</code> – The Apple developer account ID used to configure token-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ApplePlatformBundleID</code> – The app identifier used to configure token-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointCreated</code> – Topic ARN to which EndpointCreated
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointDeleted</code> – Topic ARN to which EndpointDeleted
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointUpdated</code> – Topic ARN to which EndpointUpdate
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventDeliveryFailure</code> – Topic ARN to which DeliveryFailure
    /// event notifications should be sent upon Direct Publish delivery failure
    /// (permanent) to one of the application's endpoints.</p>
    /// </li>
    /// </ul>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetPlatformApplicationAttributesOutput {
    /// <p>Attributes include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>AppleCertificateExpiryDate</code> – The expiry date of the SSL certificate used to configure certificate-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ApplePlatformTeamID</code> – The Apple developer account ID used to configure token-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ApplePlatformBundleID</code> – The app identifier used to configure token-based authentication.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointCreated</code> – Topic ARN to which EndpointCreated
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointDeleted</code> – Topic ARN to which EndpointDeleted
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventEndpointUpdated</code> – Topic ARN to which EndpointUpdate
    /// event notifications should be sent.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>EventDeliveryFailure</code> – Topic ARN to which DeliveryFailure
    /// event notifications should be sent upon Direct Publish delivery failure
    /// (permanent) to one of the application's endpoints.</p>
    /// </li>
    /// </ul>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetPlatformApplicationAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPlatformApplicationAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetPlatformApplicationAttributesOutput`](crate::output::GetPlatformApplicationAttributesOutput)
pub mod get_platform_application_attributes_output {
    /// A builder for [`GetPlatformApplicationAttributesOutput`](crate::output::GetPlatformApplicationAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>Attributes include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AppleCertificateExpiryDate</code> – The expiry date of the SSL certificate used to configure certificate-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ApplePlatformTeamID</code> – The Apple developer account ID used to configure token-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ApplePlatformBundleID</code> – The app identifier used to configure token-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointCreated</code> – Topic ARN to which EndpointCreated
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointDeleted</code> – Topic ARN to which EndpointDeleted
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointUpdated</code> – Topic ARN to which EndpointUpdate
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventDeliveryFailure</code> – Topic ARN to which DeliveryFailure
        /// event notifications should be sent upon Direct Publish delivery failure
        /// (permanent) to one of the application's endpoints.</p>
        /// </li>
        /// </ul>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>Attributes include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>AppleCertificateExpiryDate</code> – The expiry date of the SSL certificate used to configure certificate-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ApplePlatformTeamID</code> – The Apple developer account ID used to configure token-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ApplePlatformBundleID</code> – The app identifier used to configure token-based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointCreated</code> – Topic ARN to which EndpointCreated
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointDeleted</code> – Topic ARN to which EndpointDeleted
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventEndpointUpdated</code> – Topic ARN to which EndpointUpdate
        /// event notifications should be sent.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>EventDeliveryFailure</code> – Topic ARN to which DeliveryFailure
        /// event notifications should be sent upon Direct Publish delivery failure
        /// (permanent) to one of the application's endpoints.</p>
        /// </li>
        /// </ul>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPlatformApplicationAttributesOutput`](crate::output::GetPlatformApplicationAttributesOutput)
        pub fn build(self) -> crate::output::GetPlatformApplicationAttributesOutput {
            crate::output::GetPlatformApplicationAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetPlatformApplicationAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetPlatformApplicationAttributesOutput`](crate::output::GetPlatformApplicationAttributesOutput)
    pub fn builder() -> crate::output::get_platform_application_attributes_output::Builder {
        crate::output::get_platform_application_attributes_output::Builder::default()
    }
}

/// <p>Response from GetEndpointAttributes of the EndpointArn.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEndpointAttributesOutput {
    /// <p>Attributes include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>CustomUserData</code> – arbitrary user data to associate with the
    /// endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
    /// less than 2KB.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Enabled</code> – flag that enables/disables delivery to the
    /// endpoint. Amazon SNS will set this to false when a notification service indicates to
    /// Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
    /// after updating Token.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Token</code> – device token, also referred to as a registration id,
    /// for an app and mobile device. This is returned from the notification service
    /// when an app and mobile device are registered with the notification
    /// service.</p>
    /// <note>
    /// <p>The device token for the iOS platform is returned in lowercase.</p>
    /// </note>
    /// </li>
    /// </ul>
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl GetEndpointAttributesOutput {
    /// <p>Attributes include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>CustomUserData</code> – arbitrary user data to associate with the
    /// endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
    /// less than 2KB.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Enabled</code> – flag that enables/disables delivery to the
    /// endpoint. Amazon SNS will set this to false when a notification service indicates to
    /// Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
    /// after updating Token.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>Token</code> – device token, also referred to as a registration id,
    /// for an app and mobile device. This is returned from the notification service
    /// when an app and mobile device are registered with the notification
    /// service.</p>
    /// <note>
    /// <p>The device token for the iOS platform is returned in lowercase.</p>
    /// </note>
    /// </li>
    /// </ul>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl std::fmt::Debug for GetEndpointAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEndpointAttributesOutput");
        formatter.field("attributes", &self.attributes);
        formatter.finish()
    }
}
/// See [`GetEndpointAttributesOutput`](crate::output::GetEndpointAttributesOutput)
pub mod get_endpoint_attributes_output {
    /// A builder for [`GetEndpointAttributesOutput`](crate::output::GetEndpointAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) attributes: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `attributes`.
        ///
        /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
        ///
        /// <p>Attributes include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CustomUserData</code> – arbitrary user data to associate with the
        /// endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
        /// less than 2KB.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Enabled</code> – flag that enables/disables delivery to the
        /// endpoint. Amazon SNS will set this to false when a notification service indicates to
        /// Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
        /// after updating Token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Token</code> – device token, also referred to as a registration id,
        /// for an app and mobile device. This is returned from the notification service
        /// when an app and mobile device are registered with the notification
        /// service.</p>
        /// <note>
        /// <p>The device token for the iOS platform is returned in lowercase.</p>
        /// </note>
        /// </li>
        /// </ul>
        pub fn attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.attributes.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.attributes = Some(hash_map);
            self
        }
        /// <p>Attributes include the following:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>CustomUserData</code> – arbitrary user data to associate with the
        /// endpoint. Amazon SNS does not use this data. The data must be in UTF-8 format and
        /// less than 2KB.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Enabled</code> – flag that enables/disables delivery to the
        /// endpoint. Amazon SNS will set this to false when a notification service indicates to
        /// Amazon SNS that the endpoint is invalid. Users can set it back to true, typically
        /// after updating Token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>Token</code> – device token, also referred to as a registration id,
        /// for an app and mobile device. This is returned from the notification service
        /// when an app and mobile device are registered with the notification
        /// service.</p>
        /// <note>
        /// <p>The device token for the iOS platform is returned in lowercase.</p>
        /// </note>
        /// </li>
        /// </ul>
        pub fn set_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEndpointAttributesOutput`](crate::output::GetEndpointAttributesOutput)
        pub fn build(self) -> crate::output::GetEndpointAttributesOutput {
            crate::output::GetEndpointAttributesOutput {
                attributes: self.attributes,
            }
        }
    }
}
impl GetEndpointAttributesOutput {
    /// Creates a new builder-style object to manufacture [`GetEndpointAttributesOutput`](crate::output::GetEndpointAttributesOutput)
    pub fn builder() -> crate::output::get_endpoint_attributes_output::Builder {
        crate::output::get_endpoint_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTopicOutput {}
impl std::fmt::Debug for DeleteTopicOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTopicOutput");
        formatter.finish()
    }
}
/// See [`DeleteTopicOutput`](crate::output::DeleteTopicOutput)
pub mod delete_topic_output {
    /// A builder for [`DeleteTopicOutput`](crate::output::DeleteTopicOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteTopicOutput`](crate::output::DeleteTopicOutput)
        pub fn build(self) -> crate::output::DeleteTopicOutput {
            crate::output::DeleteTopicOutput {}
        }
    }
}
impl DeleteTopicOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTopicOutput`](crate::output::DeleteTopicOutput)
    pub fn builder() -> crate::output::delete_topic_output::Builder {
        crate::output::delete_topic_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSmsSandboxPhoneNumberOutput {}
impl std::fmt::Debug for DeleteSmsSandboxPhoneNumberOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSmsSandboxPhoneNumberOutput");
        formatter.finish()
    }
}
/// See [`DeleteSmsSandboxPhoneNumberOutput`](crate::output::DeleteSmsSandboxPhoneNumberOutput)
pub mod delete_sms_sandbox_phone_number_output {
    /// A builder for [`DeleteSmsSandboxPhoneNumberOutput`](crate::output::DeleteSmsSandboxPhoneNumberOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSmsSandboxPhoneNumberOutput`](crate::output::DeleteSmsSandboxPhoneNumberOutput)
        pub fn build(self) -> crate::output::DeleteSmsSandboxPhoneNumberOutput {
            crate::output::DeleteSmsSandboxPhoneNumberOutput {}
        }
    }
}
impl DeleteSmsSandboxPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSmsSandboxPhoneNumberOutput`](crate::output::DeleteSmsSandboxPhoneNumberOutput)
    pub fn builder() -> crate::output::delete_sms_sandbox_phone_number_output::Builder {
        crate::output::delete_sms_sandbox_phone_number_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePlatformApplicationOutput {}
impl std::fmt::Debug for DeletePlatformApplicationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePlatformApplicationOutput");
        formatter.finish()
    }
}
/// See [`DeletePlatformApplicationOutput`](crate::output::DeletePlatformApplicationOutput)
pub mod delete_platform_application_output {
    /// A builder for [`DeletePlatformApplicationOutput`](crate::output::DeletePlatformApplicationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePlatformApplicationOutput`](crate::output::DeletePlatformApplicationOutput)
        pub fn build(self) -> crate::output::DeletePlatformApplicationOutput {
            crate::output::DeletePlatformApplicationOutput {}
        }
    }
}
impl DeletePlatformApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DeletePlatformApplicationOutput`](crate::output::DeletePlatformApplicationOutput)
    pub fn builder() -> crate::output::delete_platform_application_output::Builder {
        crate::output::delete_platform_application_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEndpointOutput {}
impl std::fmt::Debug for DeleteEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEndpointOutput");
        formatter.finish()
    }
}
/// See [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
pub mod delete_endpoint_output {
    /// A builder for [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
        pub fn build(self) -> crate::output::DeleteEndpointOutput {
            crate::output::DeleteEndpointOutput {}
        }
    }
}
impl DeleteEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEndpointOutput`](crate::output::DeleteEndpointOutput)
    pub fn builder() -> crate::output::delete_endpoint_output::Builder {
        crate::output::delete_endpoint_output::Builder::default()
    }
}

/// <p>Response from CreateTopic action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTopicOutput {
    /// <p>The Amazon Resource Name (ARN) assigned to the created topic.</p>
    pub topic_arn: std::option::Option<std::string::String>,
}
impl CreateTopicOutput {
    /// <p>The Amazon Resource Name (ARN) assigned to the created topic.</p>
    pub fn topic_arn(&self) -> std::option::Option<&str> {
        self.topic_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateTopicOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTopicOutput");
        formatter.field("topic_arn", &self.topic_arn);
        formatter.finish()
    }
}
/// See [`CreateTopicOutput`](crate::output::CreateTopicOutput)
pub mod create_topic_output {
    /// A builder for [`CreateTopicOutput`](crate::output::CreateTopicOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) topic_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) assigned to the created topic.</p>
        pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.topic_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) assigned to the created topic.</p>
        pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.topic_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateTopicOutput`](crate::output::CreateTopicOutput)
        pub fn build(self) -> crate::output::CreateTopicOutput {
            crate::output::CreateTopicOutput {
                topic_arn: self.topic_arn,
            }
        }
    }
}
impl CreateTopicOutput {
    /// Creates a new builder-style object to manufacture [`CreateTopicOutput`](crate::output::CreateTopicOutput)
    pub fn builder() -> crate::output::create_topic_output::Builder {
        crate::output::create_topic_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSmsSandboxPhoneNumberOutput {}
impl std::fmt::Debug for CreateSmsSandboxPhoneNumberOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSmsSandboxPhoneNumberOutput");
        formatter.finish()
    }
}
/// See [`CreateSmsSandboxPhoneNumberOutput`](crate::output::CreateSmsSandboxPhoneNumberOutput)
pub mod create_sms_sandbox_phone_number_output {
    /// A builder for [`CreateSmsSandboxPhoneNumberOutput`](crate::output::CreateSmsSandboxPhoneNumberOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateSmsSandboxPhoneNumberOutput`](crate::output::CreateSmsSandboxPhoneNumberOutput)
        pub fn build(self) -> crate::output::CreateSmsSandboxPhoneNumberOutput {
            crate::output::CreateSmsSandboxPhoneNumberOutput {}
        }
    }
}
impl CreateSmsSandboxPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`CreateSmsSandboxPhoneNumberOutput`](crate::output::CreateSmsSandboxPhoneNumberOutput)
    pub fn builder() -> crate::output::create_sms_sandbox_phone_number_output::Builder {
        crate::output::create_sms_sandbox_phone_number_output::Builder::default()
    }
}

/// <p>Response from CreateEndpoint action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePlatformEndpointOutput {
    /// <p>EndpointArn returned from CreateEndpoint action.</p>
    pub endpoint_arn: std::option::Option<std::string::String>,
}
impl CreatePlatformEndpointOutput {
    /// <p>EndpointArn returned from CreateEndpoint action.</p>
    pub fn endpoint_arn(&self) -> std::option::Option<&str> {
        self.endpoint_arn.as_deref()
    }
}
impl std::fmt::Debug for CreatePlatformEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePlatformEndpointOutput");
        formatter.field("endpoint_arn", &self.endpoint_arn);
        formatter.finish()
    }
}
/// See [`CreatePlatformEndpointOutput`](crate::output::CreatePlatformEndpointOutput)
pub mod create_platform_endpoint_output {
    /// A builder for [`CreatePlatformEndpointOutput`](crate::output::CreatePlatformEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>EndpointArn returned from CreateEndpoint action.</p>
        pub fn endpoint_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_arn = Some(input.into());
            self
        }
        /// <p>EndpointArn returned from CreateEndpoint action.</p>
        pub fn set_endpoint_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.endpoint_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePlatformEndpointOutput`](crate::output::CreatePlatformEndpointOutput)
        pub fn build(self) -> crate::output::CreatePlatformEndpointOutput {
            crate::output::CreatePlatformEndpointOutput {
                endpoint_arn: self.endpoint_arn,
            }
        }
    }
}
impl CreatePlatformEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreatePlatformEndpointOutput`](crate::output::CreatePlatformEndpointOutput)
    pub fn builder() -> crate::output::create_platform_endpoint_output::Builder {
        crate::output::create_platform_endpoint_output::Builder::default()
    }
}

/// <p>Response from CreatePlatformApplication action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreatePlatformApplicationOutput {
    /// <p>PlatformApplicationArn is returned.</p>
    pub platform_application_arn: std::option::Option<std::string::String>,
}
impl CreatePlatformApplicationOutput {
    /// <p>PlatformApplicationArn is returned.</p>
    pub fn platform_application_arn(&self) -> std::option::Option<&str> {
        self.platform_application_arn.as_deref()
    }
}
impl std::fmt::Debug for CreatePlatformApplicationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreatePlatformApplicationOutput");
        formatter.field("platform_application_arn", &self.platform_application_arn);
        formatter.finish()
    }
}
/// See [`CreatePlatformApplicationOutput`](crate::output::CreatePlatformApplicationOutput)
pub mod create_platform_application_output {
    /// A builder for [`CreatePlatformApplicationOutput`](crate::output::CreatePlatformApplicationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) platform_application_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>PlatformApplicationArn is returned.</p>
        pub fn platform_application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.platform_application_arn = Some(input.into());
            self
        }
        /// <p>PlatformApplicationArn is returned.</p>
        pub fn set_platform_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.platform_application_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreatePlatformApplicationOutput`](crate::output::CreatePlatformApplicationOutput)
        pub fn build(self) -> crate::output::CreatePlatformApplicationOutput {
            crate::output::CreatePlatformApplicationOutput {
                platform_application_arn: self.platform_application_arn,
            }
        }
    }
}
impl CreatePlatformApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreatePlatformApplicationOutput`](crate::output::CreatePlatformApplicationOutput)
    pub fn builder() -> crate::output::create_platform_application_output::Builder {
        crate::output::create_platform_application_output::Builder::default()
    }
}

/// <p>Response for ConfirmSubscriptions action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConfirmSubscriptionOutput {
    /// <p>The ARN of the created subscription.</p>
    pub subscription_arn: std::option::Option<std::string::String>,
}
impl ConfirmSubscriptionOutput {
    /// <p>The ARN of the created subscription.</p>
    pub fn subscription_arn(&self) -> std::option::Option<&str> {
        self.subscription_arn.as_deref()
    }
}
impl std::fmt::Debug for ConfirmSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmSubscriptionOutput");
        formatter.field("subscription_arn", &self.subscription_arn);
        formatter.finish()
    }
}
/// See [`ConfirmSubscriptionOutput`](crate::output::ConfirmSubscriptionOutput)
pub mod confirm_subscription_output {
    /// A builder for [`ConfirmSubscriptionOutput`](crate::output::ConfirmSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the created subscription.</p>
        pub fn subscription_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the created subscription.</p>
        pub fn set_subscription_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ConfirmSubscriptionOutput`](crate::output::ConfirmSubscriptionOutput)
        pub fn build(self) -> crate::output::ConfirmSubscriptionOutput {
            crate::output::ConfirmSubscriptionOutput {
                subscription_arn: self.subscription_arn,
            }
        }
    }
}
impl ConfirmSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmSubscriptionOutput`](crate::output::ConfirmSubscriptionOutput)
    pub fn builder() -> crate::output::confirm_subscription_output::Builder {
        crate::output::confirm_subscription_output::Builder::default()
    }
}

/// <p>The response from the <code>CheckIfPhoneNumberIsOptedOut</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CheckIfPhoneNumberIsOptedOutOutput {
    /// <p>Indicates whether the phone number is opted out:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>true</code> – The phone number is opted out, meaning you cannot publish
    /// SMS messages to it.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>false</code> – The phone number is opted in, meaning you can publish SMS
    /// messages to it.</p>
    /// </li>
    /// </ul>
    pub is_opted_out: bool,
}
impl CheckIfPhoneNumberIsOptedOutOutput {
    /// <p>Indicates whether the phone number is opted out:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>true</code> – The phone number is opted out, meaning you cannot publish
    /// SMS messages to it.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>false</code> – The phone number is opted in, meaning you can publish SMS
    /// messages to it.</p>
    /// </li>
    /// </ul>
    pub fn is_opted_out(&self) -> bool {
        self.is_opted_out
    }
}
impl std::fmt::Debug for CheckIfPhoneNumberIsOptedOutOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CheckIfPhoneNumberIsOptedOutOutput");
        formatter.field("is_opted_out", &self.is_opted_out);
        formatter.finish()
    }
}
/// See [`CheckIfPhoneNumberIsOptedOutOutput`](crate::output::CheckIfPhoneNumberIsOptedOutOutput)
pub mod check_if_phone_number_is_opted_out_output {
    /// A builder for [`CheckIfPhoneNumberIsOptedOutOutput`](crate::output::CheckIfPhoneNumberIsOptedOutOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) is_opted_out: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Indicates whether the phone number is opted out:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>true</code> – The phone number is opted out, meaning you cannot publish
        /// SMS messages to it.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>false</code> – The phone number is opted in, meaning you can publish SMS
        /// messages to it.</p>
        /// </li>
        /// </ul>
        pub fn is_opted_out(mut self, input: bool) -> Self {
            self.is_opted_out = Some(input);
            self
        }
        /// <p>Indicates whether the phone number is opted out:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>true</code> – The phone number is opted out, meaning you cannot publish
        /// SMS messages to it.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>false</code> – The phone number is opted in, meaning you can publish SMS
        /// messages to it.</p>
        /// </li>
        /// </ul>
        pub fn set_is_opted_out(mut self, input: std::option::Option<bool>) -> Self {
            self.is_opted_out = input;
            self
        }
        /// Consumes the builder and constructs a [`CheckIfPhoneNumberIsOptedOutOutput`](crate::output::CheckIfPhoneNumberIsOptedOutOutput)
        pub fn build(self) -> crate::output::CheckIfPhoneNumberIsOptedOutOutput {
            crate::output::CheckIfPhoneNumberIsOptedOutOutput {
                is_opted_out: self.is_opted_out.unwrap_or_default(),
            }
        }
    }
}
impl CheckIfPhoneNumberIsOptedOutOutput {
    /// Creates a new builder-style object to manufacture [`CheckIfPhoneNumberIsOptedOutOutput`](crate::output::CheckIfPhoneNumberIsOptedOutOutput)
    pub fn builder() -> crate::output::check_if_phone_number_is_opted_out_output::Builder {
        crate::output::check_if_phone_number_is_opted_out_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddPermissionOutput {}
impl std::fmt::Debug for AddPermissionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddPermissionOutput");
        formatter.finish()
    }
}
/// See [`AddPermissionOutput`](crate::output::AddPermissionOutput)
pub mod add_permission_output {
    /// A builder for [`AddPermissionOutput`](crate::output::AddPermissionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddPermissionOutput`](crate::output::AddPermissionOutput)
        pub fn build(self) -> crate::output::AddPermissionOutput {
            crate::output::AddPermissionOutput {}
        }
    }
}
impl AddPermissionOutput {
    /// Creates a new builder-style object to manufacture [`AddPermissionOutput`](crate::output::AddPermissionOutput)
    pub fn builder() -> crate::output::add_permission_output::Builder {
        crate::output::add_permission_output::Builder::default()
    }
}
