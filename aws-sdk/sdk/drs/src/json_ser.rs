// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_1);
    }
    {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_2) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_2);
    }
    if let Some(var_3) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_3.as_str());
    }
    if let Some(var_4) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_5.as_str());
    }
    if let Some(var_6) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_6);
    }
    if let Some(var_7) = &input.pit_policy {
        let mut array_8 = object.key("pitPolicy").start_array();
        for item_9 in var_7 {
            {
                let mut object_10 = array_8.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_11);
    }
    if let Some(var_12) = &input.replication_servers_security_groups_i_ds {
        let mut array_13 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14);
            }
        }
        array_13.finish();
    }
    if let Some(var_15) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_15);
    }
    if let Some(var_16) = &input.staging_area_tags {
        let mut object_17 = object.key("stagingAreaTags").start_object();
        for (key_18, value_19) in var_16 {
            {
                object_17.key(key_18).string(value_19);
            }
        }
        object_17.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23);
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_24);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.job_id {
        object.key("jobID").string(var_25);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_recovery_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRecoveryInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_26);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_27);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_source_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.source_server_id {
        object.key("sourceServerID").string(var_28);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_job_log_items_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobLogItemsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.job_id {
        object.key("jobID").string(var_29);
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_30) = &input.next_token {
        object.key("nextToken").string(var_30);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_jobs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_31) = &input.filters {
        let mut object_32 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_jobs_request_filters(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_33) = &input.next_token {
        object.key("nextToken").string(var_33);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recovery_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecoveryInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.filters {
        let mut object_35 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_recovery_instances_request_filters(&mut object_35, var_34)?;
        object_35.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_36) = &input.next_token {
        object.key("nextToken").string(var_36);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_recovery_snapshots_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRecoverySnapshotsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.filters {
        let mut object_38 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_recovery_snapshots_request_filters(&mut object_38, var_37)?;
        object_38.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_39) = &input.next_token {
        object.key("nextToken").string(var_39);
    }
    if let Some(var_40) = &input.order {
        object.key("order").string(var_40.as_str());
    }
    if let Some(var_41) = &input.source_server_id {
        object.key("sourceServerID").string(var_41);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_replication_configuration_templates_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationConfigurationTemplatesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_42) = &input.next_token {
        object.key("nextToken").string(var_42);
    }
    if let Some(var_43) = &input.replication_configuration_template_i_ds {
        let mut array_44 = object
            .key("replicationConfigurationTemplateIDs")
            .start_array();
        for item_45 in var_43 {
            {
                array_44.value().string(item_45);
            }
        }
        array_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_source_servers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSourceServersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.filters {
        let mut object_47 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_crate_model_describe_source_servers_request_filters(
            &mut object_47,
            var_46,
        )?;
        object_47.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_48) = &input.next_token {
        object.key("nextToken").string(var_48);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_recovery_instance_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectRecoveryInstanceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disconnect_source_server_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectSourceServerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.source_server_id {
        object.key("sourceServerID").string(var_50);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_failback_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetFailbackReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_51);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_launch_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLaunchConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.source_server_id {
        object.key("sourceServerID").string(var_52);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.source_server_id {
        object.key("sourceServerID").string(var_53);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_retry_data_replication_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryDataReplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.source_server_id {
        object.key("sourceServerID").string(var_54);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_failback_launch_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFailbackLaunchInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.recovery_instance_i_ds {
        let mut array_56 = object.key("recoveryInstanceIDs").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.tags {
        let mut object_59 = object.key("tags").start_object();
        for (key_60, value_61) in var_58 {
            {
                object_59.key(key_60).string(value_61);
            }
        }
        object_59.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_recovery_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartRecoveryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.is_drill {
        object.key("isDrill").boolean(*var_62);
    }
    if let Some(var_63) = &input.source_servers {
        let mut array_64 = object.key("sourceServers").start_array();
        for item_65 in var_63 {
            {
                let mut object_66 = array_64.value().start_object();
                crate::json_ser::serialize_structure_crate_model_start_recovery_request_source_server(&mut object_66, item_65)?;
                object_66.finish();
            }
        }
        array_64.finish();
    }
    if let Some(var_67) = &input.tags {
        let mut object_68 = object.key("tags").start_object();
        for (key_69, value_70) in var_67 {
            {
                object_68.key(key_69).string(value_70);
            }
        }
        object_68.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_failback_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFailbackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_71);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.tags {
        let mut object_73 = object.key("tags").start_object();
        for (key_74, value_75) in var_72 {
            {
                object_73.key(key_74).string(value_75);
            }
        }
        object_73.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_terminate_recovery_instances_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateRecoveryInstancesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_76) = &input.recovery_instance_i_ds {
        let mut array_77 = object.key("recoveryInstanceIDs").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_failback_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFailbackReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_79) = &input.name {
        object.key("name").string(var_79);
    }
    if let Some(var_80) = &input.recovery_instance_id {
        object.key("recoveryInstanceID").string(var_80);
    }
    if let Some(var_81) = &input.use_private_ip {
        object.key("usePrivateIP").boolean(*var_81);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_launch_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLaunchConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.copy_private_ip {
        object.key("copyPrivateIp").boolean(*var_82);
    }
    if let Some(var_83) = &input.copy_tags {
        object.key("copyTags").boolean(*var_83);
    }
    if let Some(var_84) = &input.launch_disposition {
        object.key("launchDisposition").string(var_84.as_str());
    }
    if let Some(var_85) = &input.licensing {
        let mut object_86 = object.key("licensing").start_object();
        crate::json_ser::serialize_structure_crate_model_licensing(&mut object_86, var_85)?;
        object_86.finish();
    }
    if let Some(var_87) = &input.name {
        object.key("name").string(var_87);
    }
    if let Some(var_88) = &input.source_server_id {
        object.key("sourceServerID").string(var_88);
    }
    if let Some(var_89) = &input.target_instance_type_right_sizing_method {
        object
            .key("targetInstanceTypeRightSizingMethod")
            .string(var_89.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_replication_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_90) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_90);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_91) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_91);
    }
    if let Some(var_92) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_92.as_str());
    }
    if let Some(var_93) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_93.as_str());
    }
    if let Some(var_94) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_94.as_str());
    }
    if let Some(var_95) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_95);
    }
    if let Some(var_96) = &input.name {
        object.key("name").string(var_96);
    }
    if let Some(var_97) = &input.pit_policy {
        let mut array_98 = object.key("pitPolicy").start_array();
        for item_99 in var_97 {
            {
                let mut object_100 = array_98.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_100,
                    item_99,
                )?;
                object_100.finish();
            }
        }
        array_98.finish();
    }
    if let Some(var_101) = &input.replicated_disks {
        let mut array_102 = object.key("replicatedDisks").start_array();
        for item_103 in var_101 {
            {
                let mut object_104 = array_102.value().start_object();
                crate::json_ser::serialize_structure_crate_model_replication_configuration_replicated_disk(&mut object_104, item_103)?;
                object_104.finish();
            }
        }
        array_102.finish();
    }
    if let Some(var_105) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_105);
    }
    if let Some(var_106) = &input.replication_servers_security_groups_i_ds {
        let mut array_107 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_108 in var_106 {
            {
                array_107.value().string(item_108);
            }
        }
        array_107.finish();
    }
    if let Some(var_109) = &input.source_server_id {
        object.key("sourceServerID").string(var_109);
    }
    if let Some(var_110) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_110);
    }
    if let Some(var_111) = &input.staging_area_tags {
        let mut object_112 = object.key("stagingAreaTags").start_object();
        for (key_113, value_114) in var_111 {
            {
                object_112.key(key_113).string(value_114);
            }
        }
        object_112.finish();
    }
    if let Some(var_115) = &input.use_dedicated_replication_server {
        object
            .key("useDedicatedReplicationServer")
            .boolean(*var_115);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.arn {
        object.key("arn").string(var_116);
    }
    if let Some(var_117) = &input.associate_default_security_group {
        object
            .key("associateDefaultSecurityGroup")
            .boolean(*var_117);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_118) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_118);
    }
    if let Some(var_119) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_119.as_str());
    }
    if let Some(var_120) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_120.as_str());
    }
    if let Some(var_121) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_121.as_str());
    }
    if let Some(var_122) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_122);
    }
    if let Some(var_123) = &input.pit_policy {
        let mut array_124 = object.key("pitPolicy").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pit_policy_rule(
                    &mut object_126,
                    item_125,
                )?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    if let Some(var_127) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_127);
    }
    if let Some(var_128) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_128);
    }
    if let Some(var_129) = &input.replication_servers_security_groups_i_ds {
        let mut array_130 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_131 in var_129 {
            {
                array_130.value().string(item_131);
            }
        }
        array_130.finish();
    }
    if let Some(var_132) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_132);
    }
    if let Some(var_133) = &input.staging_area_tags {
        let mut object_134 = object.key("stagingAreaTags").start_object();
        for (key_135, value_136) in var_133 {
            {
                object_134.key(key_135).string(value_136);
            }
        }
        object_134.finish();
    }
    if let Some(var_137) = &input.use_dedicated_replication_server {
        object
            .key("useDedicatedReplicationServer")
            .boolean(*var_137);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pit_policy_rule(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PitPolicyRule,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.rule_id != 0 {
        object.key("ruleID").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.rule_id).into()),
        );
    }
    if let Some(var_138) = &input.units {
        object.key("units").string(var_138.as_str());
    }
    {
        object.key("interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.interval).into()),
        );
    }
    {
        object.key("retentionDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.retention_duration).into()),
        );
    }
    if let Some(var_139) = &input.enabled {
        object.key("enabled").boolean(*var_139);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_jobs_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeJobsRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_140) = &input.job_i_ds {
        let mut array_141 = object.key("jobIDs").start_array();
        for item_142 in var_140 {
            {
                array_141.value().string(item_142);
            }
        }
        array_141.finish();
    }
    if let Some(var_143) = &input.from_date {
        object.key("fromDate").string(var_143);
    }
    if let Some(var_144) = &input.to_date {
        object.key("toDate").string(var_144);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_recovery_instances_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeRecoveryInstancesRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.recovery_instance_i_ds {
        let mut array_146 = object.key("recoveryInstanceIDs").start_array();
        for item_147 in var_145 {
            {
                array_146.value().string(item_147);
            }
        }
        array_146.finish();
    }
    if let Some(var_148) = &input.source_server_i_ds {
        let mut array_149 = object.key("sourceServerIDs").start_array();
        for item_150 in var_148 {
            {
                array_149.value().string(item_150);
            }
        }
        array_149.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_recovery_snapshots_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeRecoverySnapshotsRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.from_date_time {
        object.key("fromDateTime").string(var_151);
    }
    if let Some(var_152) = &input.to_date_time {
        object.key("toDateTime").string(var_152);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_describe_source_servers_request_filters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeSourceServersRequestFilters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.source_server_i_ds {
        let mut array_154 = object.key("sourceServerIDs").start_array();
        for item_155 in var_153 {
            {
                array_154.value().string(item_155);
            }
        }
        array_154.finish();
    }
    if let Some(var_156) = &input.hardware_id {
        object.key("hardwareId").string(var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_recovery_request_source_server(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartRecoveryRequestSourceServer,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.source_server_id {
        object.key("sourceServerID").string(var_157);
    }
    if let Some(var_158) = &input.recovery_snapshot_id {
        object.key("recoverySnapshotID").string(var_158);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_licensing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Licensing,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_159) = &input.os_byol {
        object.key("osByol").boolean(*var_159);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replication_configuration_replicated_disk(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfigurationReplicatedDisk,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.device_name {
        object.key("deviceName").string(var_160);
    }
    if let Some(var_161) = &input.is_boot_disk {
        object.key("isBootDisk").boolean(*var_161);
    }
    if let Some(var_162) = &input.staging_disk_type {
        object.key("stagingDiskType").string(var_162.as_str());
    }
    if input.iops != 0 {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.iops).into()),
        );
    }
    if input.throughput != 0 {
        object.key("throughput").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.throughput).into()),
        );
    }
    Ok(())
}
