// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.fleet_name {
        object.key("FleetName").string(var_1);
    }
    if let Some(var_2) = &input.application_arn {
        object.key("ApplicationArn").string(var_2);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_3) = &input.fleet_name {
        object.key("FleetName").string(var_3);
    }
    if let Some(var_4) = &input.stack_name {
        object.key("StackName").string(var_4);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_associate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.user_stack_associations {
        let mut array_6 = object.key("UserStackAssociations").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_user_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateUserStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.user_stack_associations {
        let mut array_10 = object.key("UserStackAssociations").start_array();
        for item_11 in var_9 {
            {
                let mut object_12 = array_10.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_stack_association(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_copy_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CopyImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.source_image_name {
        object.key("SourceImageName").string(var_13);
    }
    if let Some(var_14) = &input.destination_image_name {
        object.key("DestinationImageName").string(var_14);
    }
    if let Some(var_15) = &input.destination_region {
        object.key("DestinationRegion").string(var_15);
    }
    if let Some(var_16) = &input.destination_image_description {
        object.key("DestinationImageDescription").string(var_16);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_17) = &input.name {
        object.key("Name").string(var_17);
    }
    if let Some(var_18) = &input.description {
        object.key("Description").string(var_18);
    }
    if let Some(var_19) = &input.display_name {
        object.key("DisplayName").string(var_19);
    }
    if let Some(var_20) = &input.source_s3_location {
        let mut object_21 = object.key("SourceS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.setup_script_details {
        let mut object_23 = object.key("SetupScriptDetails").start_object();
        crate::json_ser::serialize_structure_crate_model_script_details(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        let mut object_25 = object.key("Tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26).string(value_27);
            }
        }
        object_25.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.name {
        object.key("Name").string(var_28);
    }
    if let Some(var_29) = &input.display_name {
        object.key("DisplayName").string(var_29);
    }
    if let Some(var_30) = &input.description {
        object.key("Description").string(var_30);
    }
    if let Some(var_31) = &input.icon_s3_location {
        let mut object_32 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_32, var_31)?;
        object_32.finish();
    }
    if let Some(var_33) = &input.launch_path {
        object.key("LaunchPath").string(var_33);
    }
    if let Some(var_34) = &input.working_directory {
        object.key("WorkingDirectory").string(var_34);
    }
    if let Some(var_35) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_35);
    }
    if let Some(var_36) = &input.platforms {
        let mut array_37 = object.key("Platforms").start_array();
        for item_38 in var_36 {
            {
                array_37.value().string(item_38.as_str());
            }
        }
        array_37.finish();
    }
    if let Some(var_39) = &input.instance_families {
        let mut array_40 = object.key("InstanceFamilies").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41);
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut object_44 = object.key("Tags").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45).string(value_46);
            }
        }
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.directory_name {
        object.key("DirectoryName").string(var_47);
    }
    if let Some(var_48) = &input.organizational_unit_distinguished_names {
        let mut array_49 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_50 in var_48 {
            {
                array_49.value().string(item_50);
            }
        }
        array_49.finish();
    }
    if let Some(var_51) = &input.service_account_credentials {
        let mut object_52 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_52,
            var_51,
        )?;
        object_52.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.name {
        object.key("Name").string(var_53);
    }
    if let Some(var_54) = &input.image_name {
        object.key("ImageName").string(var_54);
    }
    if let Some(var_55) = &input.image_arn {
        object.key("ImageArn").string(var_55);
    }
    if let Some(var_56) = &input.instance_type {
        object.key("InstanceType").string(var_56);
    }
    if let Some(var_57) = &input.fleet_type {
        object.key("FleetType").string(var_57.as_str());
    }
    if let Some(var_58) = &input.compute_capacity {
        let mut object_59 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(&mut object_59, var_58)?;
        object_59.finish();
    }
    if let Some(var_60) = &input.vpc_config {
        let mut object_61 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_62).into()),
        );
    }
    if let Some(var_63) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_63).into()),
        );
    }
    if let Some(var_64) = &input.description {
        object.key("Description").string(var_64);
    }
    if let Some(var_65) = &input.display_name {
        object.key("DisplayName").string(var_65);
    }
    if let Some(var_66) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_66);
    }
    if let Some(var_67) = &input.domain_join_info {
        let mut object_68 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(&mut object_68, var_67)?;
        object_68.finish();
    }
    if let Some(var_69) = &input.tags {
        let mut object_70 = object.key("Tags").start_object();
        for (key_71, value_72) in var_69 {
            {
                object_70.key(key_71).string(value_72);
            }
        }
        object_70.finish();
    }
    if let Some(var_73) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_73).into()),
        );
    }
    if let Some(var_74) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_74);
    }
    if let Some(var_75) = &input.stream_view {
        object.key("StreamView").string(var_75.as_str());
    }
    if let Some(var_76) = &input.platform {
        object.key("Platform").string(var_76.as_str());
    }
    if let Some(var_77) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_77).into()),
        );
    }
    if let Some(var_78) = &input.usb_device_filter_strings {
        let mut array_79 = object.key("UsbDeviceFilterStrings").start_array();
        for item_80 in var_78 {
            {
                array_79.value().string(item_80);
            }
        }
        array_79.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_81) = &input.name {
        object.key("Name").string(var_81);
    }
    if let Some(var_82) = &input.image_name {
        object.key("ImageName").string(var_82);
    }
    if let Some(var_83) = &input.image_arn {
        object.key("ImageArn").string(var_83);
    }
    if let Some(var_84) = &input.instance_type {
        object.key("InstanceType").string(var_84);
    }
    if let Some(var_85) = &input.description {
        object.key("Description").string(var_85);
    }
    if let Some(var_86) = &input.display_name {
        object.key("DisplayName").string(var_86);
    }
    if let Some(var_87) = &input.vpc_config {
        let mut object_88 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_88, var_87)?;
        object_88.finish();
    }
    if let Some(var_89) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_89);
    }
    if let Some(var_90) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_90);
    }
    if let Some(var_91) = &input.domain_join_info {
        let mut object_92 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(&mut object_92, var_91)?;
        object_92.finish();
    }
    if let Some(var_93) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_93);
    }
    if let Some(var_94) = &input.tags {
        let mut object_95 = object.key("Tags").start_object();
        for (key_96, value_97) in var_94 {
            {
                object_95.key(key_96).string(value_97);
            }
        }
        object_95.finish();
    }
    if let Some(var_98) = &input.access_endpoints {
        let mut array_99 = object.key("AccessEndpoints").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_101,
                    item_100,
                )?;
                object_101.finish();
            }
        }
        array_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_image_builder_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateImageBuilderStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.name {
        object.key("Name").string(var_102);
    }
    if let Some(var_103) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_103).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_104) = &input.name {
        object.key("Name").string(var_104);
    }
    if let Some(var_105) = &input.description {
        object.key("Description").string(var_105);
    }
    if let Some(var_106) = &input.display_name {
        object.key("DisplayName").string(var_106);
    }
    if let Some(var_107) = &input.storage_connectors {
        let mut array_108 = object.key("StorageConnectors").start_array();
        for item_109 in var_107 {
            {
                let mut object_110 = array_108.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_110,
                    item_109,
                )?;
                object_110.finish();
            }
        }
        array_108.finish();
    }
    if let Some(var_111) = &input.redirect_url {
        object.key("RedirectURL").string(var_111);
    }
    if let Some(var_112) = &input.feedback_url {
        object.key("FeedbackURL").string(var_112);
    }
    if let Some(var_113) = &input.user_settings {
        let mut array_114 = object.key("UserSettings").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_116,
                    item_115,
                )?;
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.application_settings {
        let mut object_118 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    if let Some(var_119) = &input.tags {
        let mut object_120 = object.key("Tags").start_object();
        for (key_121, value_122) in var_119 {
            {
                object_120.key(key_121).string(value_122);
            }
        }
        object_120.finish();
    }
    if let Some(var_123) = &input.access_endpoints {
        let mut array_124 = object.key("AccessEndpoints").start_array();
        for item_125 in var_123 {
            {
                let mut object_126 = array_124.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_126,
                    item_125,
                )?;
                object_126.finish();
            }
        }
        array_124.finish();
    }
    if let Some(var_127) = &input.embed_host_domains {
        let mut array_128 = object.key("EmbedHostDomains").start_array();
        for item_129 in var_127 {
            {
                array_128.value().string(item_129);
            }
        }
        array_128.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_streaming_url_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamingUrlInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.stack_name {
        object.key("StackName").string(var_130);
    }
    if let Some(var_131) = &input.fleet_name {
        object.key("FleetName").string(var_131);
    }
    if let Some(var_132) = &input.user_id {
        object.key("UserId").string(var_132);
    }
    if let Some(var_133) = &input.application_id {
        object.key("ApplicationId").string(var_133);
    }
    if let Some(var_134) = &input.validity {
        object.key("Validity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_134).into()),
        );
    }
    if let Some(var_135) = &input.session_context {
        object.key("SessionContext").string(var_135);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_updated_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUpdatedImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.existing_image_name {
        object.key("existingImageName").string(var_136);
    }
    if let Some(var_137) = &input.new_image_name {
        object.key("newImageName").string(var_137);
    }
    if let Some(var_138) = &input.new_image_description {
        object.key("newImageDescription").string(var_138);
    }
    if let Some(var_139) = &input.new_image_display_name {
        object.key("newImageDisplayName").string(var_139);
    }
    if let Some(var_140) = &input.new_image_tags {
        let mut object_141 = object.key("newImageTags").start_object();
        for (key_142, value_143) in var_140 {
            {
                object_141.key(key_142).string(value_143);
            }
        }
        object_141.finish();
    }
    if input.dry_run {
        object.key("dryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.user_name {
        object.key("UserName").string(var_144);
    }
    if let Some(var_145) = &input.message_action {
        object.key("MessageAction").string(var_145.as_str());
    }
    if let Some(var_146) = &input.first_name {
        object.key("FirstName").string(var_146);
    }
    if let Some(var_147) = &input.last_name {
        object.key("LastName").string(var_147);
    }
    if let Some(var_148) = &input.authentication_type {
        object.key("AuthenticationType").string(var_148.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_app_block_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAppBlockInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_149) = &input.name {
        object.key("Name").string(var_149);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_150) = &input.name {
        object.key("Name").string(var_150);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.directory_name {
        object.key("DirectoryName").string(var_151);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_152) = &input.name {
        object.key("Name").string(var_152);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_153) = &input.name {
        object.key("Name").string(var_153);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_154) = &input.name {
        object.key("Name").string(var_154);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_155) = &input.name {
        object.key("Name").string(var_155);
    }
    if let Some(var_156) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_156);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_157) = &input.name {
        object.key("Name").string(var_157);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_158) = &input.user_name {
        object.key("UserName").string(var_158);
    }
    if let Some(var_159) = &input.authentication_type {
        object.key("AuthenticationType").string(var_159.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_app_blocks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAppBlocksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_160) = &input.arns {
        let mut array_161 = object.key("Arns").start_array();
        for item_162 in var_160 {
            {
                array_161.value().string(item_162);
            }
        }
        array_161.finish();
    }
    if let Some(var_163) = &input.next_token {
        object.key("NextToken").string(var_163);
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_application_fleet_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationFleetAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.fleet_name {
        object.key("FleetName").string(var_165);
    }
    if let Some(var_166) = &input.application_arn {
        object.key("ApplicationArn").string(var_166);
    }
    if let Some(var_167) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.next_token {
        object.key("NextToken").string(var_168);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_applications_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.arns {
        let mut array_170 = object.key("Arns").start_array();
        for item_171 in var_169 {
            {
                array_170.value().string(item_171);
            }
        }
        array_170.finish();
    }
    if let Some(var_172) = &input.next_token {
        object.key("NextToken").string(var_172);
    }
    if let Some(var_173) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_directory_configs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDirectoryConfigsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.directory_names {
        let mut array_175 = object.key("DirectoryNames").start_array();
        for item_176 in var_174 {
            {
                array_175.value().string(item_176);
            }
        }
        array_175.finish();
    }
    if let Some(var_177) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_177).into()),
        );
    }
    if let Some(var_178) = &input.next_token {
        object.key("NextToken").string(var_178);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.names {
        let mut array_180 = object.key("Names").start_array();
        for item_181 in var_179 {
            {
                array_180.value().string(item_181);
            }
        }
        array_180.finish();
    }
    if let Some(var_182) = &input.next_token {
        object.key("NextToken").string(var_182);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_builders_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImageBuildersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.names {
        let mut array_184 = object.key("Names").start_array();
        for item_185 in var_183 {
            {
                array_184.value().string(item_185);
            }
        }
        array_184.finish();
    }
    if let Some(var_186) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.next_token {
        object.key("NextToken").string(var_187);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_188) = &input.name {
        object.key("Name").string(var_188);
    }
    if let Some(var_189) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_189).into()),
        );
    }
    if let Some(var_190) = &input.shared_aws_account_ids {
        let mut array_191 = object.key("SharedAwsAccountIds").start_array();
        for item_192 in var_190 {
            {
                array_191.value().string(item_192);
            }
        }
        array_191.finish();
    }
    if let Some(var_193) = &input.next_token {
        object.key("NextToken").string(var_193);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_images_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeImagesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.names {
        let mut array_195 = object.key("Names").start_array();
        for item_196 in var_194 {
            {
                array_195.value().string(item_196);
            }
        }
        array_195.finish();
    }
    if let Some(var_197) = &input.arns {
        let mut array_198 = object.key("Arns").start_array();
        for item_199 in var_197 {
            {
                array_198.value().string(item_199);
            }
        }
        array_198.finish();
    }
    if let Some(var_200) = &input.r#type {
        object.key("Type").string(var_200.as_str());
    }
    if let Some(var_201) = &input.next_token {
        object.key("NextToken").string(var_201);
    }
    if let Some(var_202) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_202).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sessions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSessionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_203) = &input.stack_name {
        object.key("StackName").string(var_203);
    }
    if let Some(var_204) = &input.fleet_name {
        object.key("FleetName").string(var_204);
    }
    if let Some(var_205) = &input.user_id {
        object.key("UserId").string(var_205);
    }
    if let Some(var_206) = &input.next_token {
        object.key("NextToken").string(var_206);
    }
    if let Some(var_207) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_207).into()),
        );
    }
    if let Some(var_208) = &input.authentication_type {
        object.key("AuthenticationType").string(var_208.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_209) = &input.names {
        let mut array_210 = object.key("Names").start_array();
        for item_211 in var_209 {
            {
                array_210.value().string(item_211);
            }
        }
        array_210.finish();
    }
    if let Some(var_212) = &input.next_token {
        object.key("NextToken").string(var_212);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_usage_report_subscriptions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsageReportSubscriptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_213) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_213).into()),
        );
    }
    if let Some(var_214) = &input.next_token {
        object.key("NextToken").string(var_214);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_users_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUsersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_215) = &input.authentication_type {
        object.key("AuthenticationType").string(var_215.as_str());
    }
    if let Some(var_216) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_216).into()),
        );
    }
    if let Some(var_217) = &input.next_token {
        object.key("NextToken").string(var_217);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_user_stack_associations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUserStackAssociationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_218) = &input.stack_name {
        object.key("StackName").string(var_218);
    }
    if let Some(var_219) = &input.user_name {
        object.key("UserName").string(var_219);
    }
    if let Some(var_220) = &input.authentication_type {
        object.key("AuthenticationType").string(var_220.as_str());
    }
    if let Some(var_221) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_221).into()),
        );
    }
    if let Some(var_222) = &input.next_token {
        object.key("NextToken").string(var_222);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.user_name {
        object.key("UserName").string(var_223);
    }
    if let Some(var_224) = &input.authentication_type {
        object.key("AuthenticationType").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_application_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateApplicationFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.fleet_name {
        object.key("FleetName").string(var_225);
    }
    if let Some(var_226) = &input.application_arn {
        object.key("ApplicationArn").string(var_226);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.fleet_name {
        object.key("FleetName").string(var_227);
    }
    if let Some(var_228) = &input.stack_name {
        object.key("StackName").string(var_228);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_enable_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_229) = &input.user_name {
        object.key("UserName").string(var_229);
    }
    if let Some(var_230) = &input.authentication_type {
        object.key("AuthenticationType").string(var_230.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_expire_session_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExpireSessionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_231) = &input.session_id {
        object.key("SessionId").string(var_231);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_232) = &input.stack_name {
        object.key("StackName").string(var_232);
    }
    if let Some(var_233) = &input.next_token {
        object.key("NextToken").string(var_233);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_associated_stacks_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociatedStacksInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.fleet_name {
        object.key("FleetName").string(var_234);
    }
    if let Some(var_235) = &input.next_token {
        object.key("NextToken").string(var_235);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_236) = &input.resource_arn {
        object.key("ResourceArn").string(var_236);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_237) = &input.name {
        object.key("Name").string(var_237);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.name {
        object.key("Name").string(var_238);
    }
    if let Some(var_239) = &input.appstream_agent_version {
        object.key("AppstreamAgentVersion").string(var_239);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_240) = &input.name {
        object.key("Name").string(var_240);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_stop_image_builder_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopImageBuilderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_241) = &input.name {
        object.key("Name").string(var_241);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.resource_arn {
        object.key("ResourceArn").string(var_242);
    }
    if let Some(var_243) = &input.tags {
        let mut object_244 = object.key("Tags").start_object();
        for (key_245, value_246) in var_243 {
            {
                object_244.key(key_245).string(value_246);
            }
        }
        object_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_247) = &input.resource_arn {
        object.key("ResourceArn").string(var_247);
    }
    if let Some(var_248) = &input.tag_keys {
        let mut array_249 = object.key("TagKeys").start_array();
        for item_250 in var_248 {
            {
                array_249.value().string(item_250);
            }
        }
        array_249.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_application_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_251) = &input.name {
        object.key("Name").string(var_251);
    }
    if let Some(var_252) = &input.display_name {
        object.key("DisplayName").string(var_252);
    }
    if let Some(var_253) = &input.description {
        object.key("Description").string(var_253);
    }
    if let Some(var_254) = &input.icon_s3_location {
        let mut object_255 = object.key("IconS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_255, var_254)?;
        object_255.finish();
    }
    if let Some(var_256) = &input.launch_path {
        object.key("LaunchPath").string(var_256);
    }
    if let Some(var_257) = &input.working_directory {
        object.key("WorkingDirectory").string(var_257);
    }
    if let Some(var_258) = &input.launch_parameters {
        object.key("LaunchParameters").string(var_258);
    }
    if let Some(var_259) = &input.app_block_arn {
        object.key("AppBlockArn").string(var_259);
    }
    if let Some(var_260) = &input.attributes_to_delete {
        let mut array_261 = object.key("AttributesToDelete").start_array();
        for item_262 in var_260 {
            {
                array_261.value().string(item_262.as_str());
            }
        }
        array_261.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_directory_config_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDirectoryConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.directory_name {
        object.key("DirectoryName").string(var_263);
    }
    if let Some(var_264) = &input.organizational_unit_distinguished_names {
        let mut array_265 = object
            .key("OrganizationalUnitDistinguishedNames")
            .start_array();
        for item_266 in var_264 {
            {
                array_265.value().string(item_266);
            }
        }
        array_265.finish();
    }
    if let Some(var_267) = &input.service_account_credentials {
        let mut object_268 = object.key("ServiceAccountCredentials").start_object();
        crate::json_ser::serialize_structure_crate_model_service_account_credentials(
            &mut object_268,
            var_267,
        )?;
        object_268.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_269) = &input.image_name {
        object.key("ImageName").string(var_269);
    }
    if let Some(var_270) = &input.image_arn {
        object.key("ImageArn").string(var_270);
    }
    if let Some(var_271) = &input.name {
        object.key("Name").string(var_271);
    }
    if let Some(var_272) = &input.instance_type {
        object.key("InstanceType").string(var_272);
    }
    if let Some(var_273) = &input.compute_capacity {
        let mut object_274 = object.key("ComputeCapacity").start_object();
        crate::json_ser::serialize_structure_crate_model_compute_capacity(
            &mut object_274,
            var_273,
        )?;
        object_274.finish();
    }
    if let Some(var_275) = &input.vpc_config {
        let mut object_276 = object.key("VpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_276, var_275)?;
        object_276.finish();
    }
    if let Some(var_277) = &input.max_user_duration_in_seconds {
        object.key("MaxUserDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_277).into()),
        );
    }
    if let Some(var_278) = &input.disconnect_timeout_in_seconds {
        object.key("DisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_278).into()),
        );
    }
    if input.delete_vpc_config {
        object
            .key("DeleteVpcConfig")
            .boolean(input.delete_vpc_config);
    }
    if let Some(var_279) = &input.description {
        object.key("Description").string(var_279);
    }
    if let Some(var_280) = &input.display_name {
        object.key("DisplayName").string(var_280);
    }
    if let Some(var_281) = &input.enable_default_internet_access {
        object.key("EnableDefaultInternetAccess").boolean(*var_281);
    }
    if let Some(var_282) = &input.domain_join_info {
        let mut object_283 = object.key("DomainJoinInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_domain_join_info(
            &mut object_283,
            var_282,
        )?;
        object_283.finish();
    }
    if let Some(var_284) = &input.idle_disconnect_timeout_in_seconds {
        object.key("IdleDisconnectTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_284).into()),
        );
    }
    if let Some(var_285) = &input.attributes_to_delete {
        let mut array_286 = object.key("AttributesToDelete").start_array();
        for item_287 in var_285 {
            {
                array_286.value().string(item_287.as_str());
            }
        }
        array_286.finish();
    }
    if let Some(var_288) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_288);
    }
    if let Some(var_289) = &input.stream_view {
        object.key("StreamView").string(var_289.as_str());
    }
    if let Some(var_290) = &input.platform {
        object.key("Platform").string(var_290.as_str());
    }
    if let Some(var_291) = &input.max_concurrent_sessions {
        object.key("MaxConcurrentSessions").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_291).into()),
        );
    }
    if let Some(var_292) = &input.usb_device_filter_strings {
        let mut array_293 = object.key("UsbDeviceFilterStrings").start_array();
        for item_294 in var_292 {
            {
                array_293.value().string(item_294);
            }
        }
        array_293.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_image_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateImagePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_295) = &input.name {
        object.key("Name").string(var_295);
    }
    if let Some(var_296) = &input.shared_account_id {
        object.key("SharedAccountId").string(var_296);
    }
    if let Some(var_297) = &input.image_permissions {
        let mut object_298 = object.key("ImagePermissions").start_object();
        crate::json_ser::serialize_structure_crate_model_image_permissions(
            &mut object_298,
            var_297,
        )?;
        object_298.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stack_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStackInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_299) = &input.display_name {
        object.key("DisplayName").string(var_299);
    }
    if let Some(var_300) = &input.description {
        object.key("Description").string(var_300);
    }
    if let Some(var_301) = &input.name {
        object.key("Name").string(var_301);
    }
    if let Some(var_302) = &input.storage_connectors {
        let mut array_303 = object.key("StorageConnectors").start_array();
        for item_304 in var_302 {
            {
                let mut object_305 = array_303.value().start_object();
                crate::json_ser::serialize_structure_crate_model_storage_connector(
                    &mut object_305,
                    item_304,
                )?;
                object_305.finish();
            }
        }
        array_303.finish();
    }
    if input.delete_storage_connectors {
        object
            .key("DeleteStorageConnectors")
            .boolean(input.delete_storage_connectors);
    }
    if let Some(var_306) = &input.redirect_url {
        object.key("RedirectURL").string(var_306);
    }
    if let Some(var_307) = &input.feedback_url {
        object.key("FeedbackURL").string(var_307);
    }
    if let Some(var_308) = &input.attributes_to_delete {
        let mut array_309 = object.key("AttributesToDelete").start_array();
        for item_310 in var_308 {
            {
                array_309.value().string(item_310.as_str());
            }
        }
        array_309.finish();
    }
    if let Some(var_311) = &input.user_settings {
        let mut array_312 = object.key("UserSettings").start_array();
        for item_313 in var_311 {
            {
                let mut object_314 = array_312.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user_setting(
                    &mut object_314,
                    item_313,
                )?;
                object_314.finish();
            }
        }
        array_312.finish();
    }
    if let Some(var_315) = &input.application_settings {
        let mut object_316 = object.key("ApplicationSettings").start_object();
        crate::json_ser::serialize_structure_crate_model_application_settings(
            &mut object_316,
            var_315,
        )?;
        object_316.finish();
    }
    if let Some(var_317) = &input.access_endpoints {
        let mut array_318 = object.key("AccessEndpoints").start_array();
        for item_319 in var_317 {
            {
                let mut object_320 = array_318.value().start_object();
                crate::json_ser::serialize_structure_crate_model_access_endpoint(
                    &mut object_320,
                    item_319,
                )?;
                object_320.finish();
            }
        }
        array_318.finish();
    }
    if let Some(var_321) = &input.embed_host_domains {
        let mut array_322 = object.key("EmbedHostDomains").start_array();
        for item_323 in var_321 {
            {
                array_322.value().string(item_323);
            }
        }
        array_322.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_stack_association(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserStackAssociation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_324) = &input.stack_name {
        object.key("StackName").string(var_324);
    }
    if let Some(var_325) = &input.user_name {
        object.key("UserName").string(var_325);
    }
    if let Some(var_326) = &input.authentication_type {
        object.key("AuthenticationType").string(var_326.as_str());
    }
    if input.send_email_notification {
        object
            .key("SendEmailNotification")
            .boolean(input.send_email_notification);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_327) = &input.s3_bucket {
        object.key("S3Bucket").string(var_327);
    }
    if let Some(var_328) = &input.s3_key {
        object.key("S3Key").string(var_328);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_script_details(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ScriptDetails,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.script_s3_location {
        let mut object_330 = object.key("ScriptS3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_330, var_329)?;
        object_330.finish();
    }
    if let Some(var_331) = &input.executable_path {
        object.key("ExecutablePath").string(var_331);
    }
    if let Some(var_332) = &input.executable_parameters {
        object.key("ExecutableParameters").string(var_332);
    }
    if let Some(var_333) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_333).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_service_account_credentials(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ServiceAccountCredentials,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.account_name {
        object.key("AccountName").string(var_334);
    }
    if let Some(var_335) = &input.account_password {
        object.key("AccountPassword").string(var_335);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_compute_capacity(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComputeCapacity,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_336) = &input.desired_instances {
        object.key("DesiredInstances").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_337) = &input.subnet_ids {
        let mut array_338 = object.key("SubnetIds").start_array();
        for item_339 in var_337 {
            {
                array_338.value().string(item_339);
            }
        }
        array_338.finish();
    }
    if let Some(var_340) = &input.security_group_ids {
        let mut array_341 = object.key("SecurityGroupIds").start_array();
        for item_342 in var_340 {
            {
                array_341.value().string(item_342);
            }
        }
        array_341.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_domain_join_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DomainJoinInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_343) = &input.directory_name {
        object.key("DirectoryName").string(var_343);
    }
    if let Some(var_344) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_344);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_access_endpoint(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AccessEndpoint,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_345) = &input.endpoint_type {
        object.key("EndpointType").string(var_345.as_str());
    }
    if let Some(var_346) = &input.vpce_id {
        object.key("VpceId").string(var_346);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_connector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageConnector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_347) = &input.connector_type {
        object.key("ConnectorType").string(var_347.as_str());
    }
    if let Some(var_348) = &input.resource_identifier {
        object.key("ResourceIdentifier").string(var_348);
    }
    if let Some(var_349) = &input.domains {
        let mut array_350 = object.key("Domains").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351);
            }
        }
        array_350.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user_setting(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UserSetting,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_352) = &input.action {
        object.key("Action").string(var_352.as_str());
    }
    if let Some(var_353) = &input.permission {
        object.key("Permission").string(var_353.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_application_settings(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationSettings,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("Enabled").boolean(input.enabled);
    }
    if let Some(var_354) = &input.settings_group {
        object.key("SettingsGroup").string(var_354);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_permissions(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImagePermissions,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_355) = &input.allow_fleet {
        object.key("allowFleet").boolean(*var_355);
    }
    if let Some(var_356) = &input.allow_image_builder {
        object.key("allowImageBuilder").boolean(*var_356);
    }
    Ok(())
}
