// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_put_property_values_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchPutPropertyValuesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.entries {
        let mut array_2 = object.key("entries").start_array();
        for item_3 in var_1 {
            {
                let mut object_4 = array_2.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_value_entry(
                    &mut object_4,
                    item_3,
                )?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_component_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComponentTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5);
    }
    if let Some(var_6) = &input.extends_from {
        let mut array_7 = object.key("extendsFrom").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8);
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.functions {
        let mut object_10 = object.key("functions").start_object();
        for (key_11, value_12) in var_9 {
            {
                let mut object_13 = object_10.key(key_11).start_object();
                crate::json_ser::serialize_structure_crate_model_function_request(
                    &mut object_13,
                    value_12,
                )?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    if let Some(var_14) = &input.is_singleton {
        object.key("isSingleton").boolean(*var_14);
    }
    if let Some(var_15) = &input.property_definitions {
        let mut object_16 = object.key("propertyDefinitions").start_object();
        for (key_17, value_18) in var_15 {
            {
                let mut object_19 = object_16.key(key_17).start_object();
                crate::json_ser::serialize_structure_crate_model_property_definition_request(
                    &mut object_19,
                    value_18,
                )?;
                object_19.finish();
            }
        }
        object_16.finish();
    }
    if let Some(var_20) = &input.tags {
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23);
            }
        }
        object_21.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_entity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEntityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.components {
        let mut object_25 = object.key("components").start_object();
        for (key_26, value_27) in var_24 {
            {
                let mut object_28 = object_25.key(key_26).start_object();
                crate::json_ser::serialize_structure_crate_model_component_request(
                    &mut object_28,
                    value_27,
                )?;
                object_28.finish();
            }
        }
        object_25.finish();
    }
    if let Some(var_29) = &input.description {
        object.key("description").string(var_29);
    }
    if let Some(var_30) = &input.entity_id {
        object.key("entityId").string(var_30);
    }
    if let Some(var_31) = &input.entity_name {
        object.key("entityName").string(var_31);
    }
    if let Some(var_32) = &input.parent_entity_id {
        object.key("parentEntityId").string(var_32);
    }
    if let Some(var_33) = &input.tags {
        let mut object_34 = object.key("tags").start_object();
        for (key_35, value_36) in var_33 {
            {
                object_34.key(key_35).string(value_36);
            }
        }
        object_34.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_scene_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSceneInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_37) = &input.capabilities {
        let mut array_38 = object.key("capabilities").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39);
            }
        }
        array_38.finish();
    }
    if let Some(var_40) = &input.content_location {
        object.key("contentLocation").string(var_40);
    }
    if let Some(var_41) = &input.description {
        object.key("description").string(var_41);
    }
    if let Some(var_42) = &input.scene_id {
        object.key("sceneId").string(var_42);
    }
    if let Some(var_43) = &input.tags {
        let mut object_44 = object.key("tags").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45).string(value_46);
            }
        }
        object_44.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.description {
        object.key("description").string(var_47);
    }
    if let Some(var_48) = &input.role {
        object.key("role").string(var_48);
    }
    if let Some(var_49) = &input.s3_location {
        object.key("s3Location").string(var_49);
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53);
            }
        }
        object_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_property_value_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPropertyValueInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.component_name {
        object.key("componentName").string(var_54);
    }
    if let Some(var_55) = &input.component_type_id {
        object.key("componentTypeId").string(var_55);
    }
    if let Some(var_56) = &input.entity_id {
        object.key("entityId").string(var_56);
    }
    if let Some(var_57) = &input.selected_properties {
        let mut array_58 = object.key("selectedProperties").start_array();
        for item_59 in var_57 {
            {
                array_58.value().string(item_59);
            }
        }
        array_58.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_property_value_history_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPropertyValueHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.component_name {
        object.key("componentName").string(var_60);
    }
    if let Some(var_61) = &input.component_type_id {
        object.key("componentTypeId").string(var_61);
    }
    if let Some(var_62) = &input.end_date_time {
        object
            .key("endDateTime")
            .date_time(var_62, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_63) = &input.entity_id {
        object.key("entityId").string(var_63);
    }
    if let Some(var_64) = &input.interpolation {
        let mut object_65 = object.key("interpolation").start_object();
        crate::json_ser::serialize_structure_crate_model_interpolation_parameters(
            &mut object_65,
            var_64,
        )?;
        object_65.finish();
    }
    if let Some(var_66) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_66).into()),
        );
    }
    if let Some(var_67) = &input.next_token {
        object.key("nextToken").string(var_67);
    }
    if let Some(var_68) = &input.order_by_time {
        object.key("orderByTime").string(var_68.as_str());
    }
    if let Some(var_69) = &input.property_filters {
        let mut array_70 = object.key("propertyFilters").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_filter(
                    &mut object_72,
                    item_71,
                )?;
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.selected_properties {
        let mut array_74 = object.key("selectedProperties").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75);
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.start_date_time {
        object
            .key("startDateTime")
            .date_time(var_76, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_component_types_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListComponentTypesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.filters {
        let mut array_78 = object.key("filters").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_union_crate_model_list_component_types_filter(
                    &mut object_80,
                    item_79,
                )?;
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_81).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("nextToken").string(var_82);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_entities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListEntitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.filters {
        let mut array_84 = object.key("filters").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_union_crate_model_list_entities_filter(
                    &mut object_86,
                    item_85,
                )?;
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    if let Some(var_88) = &input.next_token {
        object.key("nextToken").string(var_88);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_scenes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListScenesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.next_token {
        object.key("nextToken").string(var_90);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_91) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_91).into()),
        );
    }
    if let Some(var_92) = &input.next_token {
        object.key("nextToken").string(var_92);
    }
    if let Some(var_93) = &input.resource_arn {
        object.key("resourceARN").string(var_93);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_workspaces_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorkspacesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_94) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_94).into()),
        );
    }
    if let Some(var_95) = &input.next_token {
        object.key("nextToken").string(var_95);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.resource_arn {
        object.key("resourceARN").string(var_96);
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100);
            }
        }
        object_98.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_component_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateComponentTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_101) = &input.description {
        object.key("description").string(var_101);
    }
    if let Some(var_102) = &input.extends_from {
        let mut array_103 = object.key("extendsFrom").start_array();
        for item_104 in var_102 {
            {
                array_103.value().string(item_104);
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.functions {
        let mut object_106 = object.key("functions").start_object();
        for (key_107, value_108) in var_105 {
            {
                let mut object_109 = object_106.key(key_107).start_object();
                crate::json_ser::serialize_structure_crate_model_function_request(
                    &mut object_109,
                    value_108,
                )?;
                object_109.finish();
            }
        }
        object_106.finish();
    }
    if let Some(var_110) = &input.is_singleton {
        object.key("isSingleton").boolean(*var_110);
    }
    if let Some(var_111) = &input.property_definitions {
        let mut object_112 = object.key("propertyDefinitions").start_object();
        for (key_113, value_114) in var_111 {
            {
                let mut object_115 = object_112.key(key_113).start_object();
                crate::json_ser::serialize_structure_crate_model_property_definition_request(
                    &mut object_115,
                    value_114,
                )?;
                object_115.finish();
            }
        }
        object_112.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_entity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEntityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_116) = &input.component_updates {
        let mut object_117 = object.key("componentUpdates").start_object();
        for (key_118, value_119) in var_116 {
            {
                let mut object_120 = object_117.key(key_118).start_object();
                crate::json_ser::serialize_structure_crate_model_component_update_request(
                    &mut object_120,
                    value_119,
                )?;
                object_120.finish();
            }
        }
        object_117.finish();
    }
    if let Some(var_121) = &input.description {
        object.key("description").string(var_121);
    }
    if let Some(var_122) = &input.entity_name {
        object.key("entityName").string(var_122);
    }
    if let Some(var_123) = &input.parent_entity_update {
        let mut object_124 = object.key("parentEntityUpdate").start_object();
        crate::json_ser::serialize_structure_crate_model_parent_entity_update_request(
            &mut object_124,
            var_123,
        )?;
        object_124.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_scene_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSceneInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.capabilities {
        let mut array_126 = object.key("capabilities").start_array();
        for item_127 in var_125 {
            {
                array_126.value().string(item_127);
            }
        }
        array_126.finish();
    }
    if let Some(var_128) = &input.content_location {
        object.key("contentLocation").string(var_128);
    }
    if let Some(var_129) = &input.description {
        object.key("description").string(var_129);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_130) = &input.description {
        object.key("description").string(var_130);
    }
    if let Some(var_131) = &input.role {
        object.key("role").string(var_131);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.entity_property_reference {
        let mut object_133 = object.key("entityPropertyReference").start_object();
        crate::json_ser::serialize_structure_crate_model_entity_property_reference(
            &mut object_133,
            var_132,
        )?;
        object_133.finish();
    }
    if let Some(var_134) = &input.property_values {
        let mut array_135 = object.key("propertyValues").start_array();
        for item_136 in var_134 {
            {
                let mut object_137 = array_135.value().start_object();
                crate::json_ser::serialize_structure_crate_model_property_value(
                    &mut object_137,
                    item_136,
                )?;
                object_137.finish();
            }
        }
        array_135.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_function_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FunctionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.required_properties {
        let mut array_139 = object.key("requiredProperties").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140);
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.scope {
        object.key("scope").string(var_141.as_str());
    }
    if let Some(var_142) = &input.implemented_by {
        let mut object_143 = object.key("implementedBy").start_object();
        crate::json_ser::serialize_structure_crate_model_data_connector(&mut object_143, var_142)?;
        object_143.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_definition_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyDefinitionRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_144) = &input.data_type {
        let mut object_145 = object.key("dataType").start_object();
        crate::json_ser::serialize_structure_crate_model_data_type(&mut object_145, var_144)?;
        object_145.finish();
    }
    if let Some(var_146) = &input.is_required_in_entity {
        object.key("isRequiredInEntity").boolean(*var_146);
    }
    if let Some(var_147) = &input.is_external_id {
        object.key("isExternalId").boolean(*var_147);
    }
    if let Some(var_148) = &input.is_stored_externally {
        object.key("isStoredExternally").boolean(*var_148);
    }
    if let Some(var_149) = &input.is_time_series {
        object.key("isTimeSeries").boolean(*var_149);
    }
    if let Some(var_150) = &input.default_value {
        let mut object_151 = object.key("defaultValue").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_151, var_150)?;
        object_151.finish();
    }
    if let Some(var_152) = &input.configuration {
        let mut object_153 = object.key("configuration").start_object();
        for (key_154, value_155) in var_152 {
            {
                object_153.key(key_154).string(value_155);
            }
        }
        object_153.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_156) = &input.description {
        object.key("description").string(var_156);
    }
    if let Some(var_157) = &input.component_type_id {
        object.key("componentTypeId").string(var_157);
    }
    if let Some(var_158) = &input.properties {
        let mut object_159 = object.key("properties").start_object();
        for (key_160, value_161) in var_158 {
            {
                let mut object_162 = object_159.key(key_160).start_object();
                crate::json_ser::serialize_structure_crate_model_property_request(
                    &mut object_162,
                    value_161,
                )?;
                object_162.finish();
            }
        }
        object_159.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_interpolation_parameters(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InterpolationParameters,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_163) = &input.interpolation_type {
        object.key("interpolationType").string(var_163.as_str());
    }
    if let Some(var_164) = &input.interval_in_seconds {
        object.key("intervalInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_165) = &input.property_name {
        object.key("propertyName").string(var_165);
    }
    if let Some(var_166) = &input.operator {
        object.key("operator").string(var_166);
    }
    if let Some(var_167) = &input.value {
        let mut object_168 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_168, var_167)?;
        object_168.finish();
    }
    Ok(())
}

pub fn serialize_union_crate_model_list_component_types_filter(
    object_80: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListComponentTypesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListComponentTypesFilter::ExtendsFrom(inner) => {
            object_80.key("extendsFrom").string(inner);
        }
        crate::model::ListComponentTypesFilter::Namespace(inner) => {
            object_80.key("namespace").string(inner);
        }
        crate::model::ListComponentTypesFilter::IsAbstract(inner) => {
            object_80.key("isAbstract").boolean(*inner);
        }
        crate::model::ListComponentTypesFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListComponentTypesFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_union_crate_model_list_entities_filter(
    object_86: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ListEntitiesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::ListEntitiesFilter::ParentEntityId(inner) => {
            object_86.key("parentEntityId").string(inner);
        }
        crate::model::ListEntitiesFilter::ComponentTypeId(inner) => {
            object_86.key("componentTypeId").string(inner);
        }
        crate::model::ListEntitiesFilter::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ListEntitiesFilter",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_component_update_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ComponentUpdateRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_169) = &input.update_type {
        object.key("updateType").string(var_169.as_str());
    }
    if let Some(var_170) = &input.description {
        object.key("description").string(var_170);
    }
    if let Some(var_171) = &input.component_type_id {
        object.key("componentTypeId").string(var_171);
    }
    if let Some(var_172) = &input.property_updates {
        let mut object_173 = object.key("propertyUpdates").start_object();
        for (key_174, value_175) in var_172 {
            {
                let mut object_176 = object_173.key(key_174).start_object();
                crate::json_ser::serialize_structure_crate_model_property_request(
                    &mut object_176,
                    value_175,
                )?;
                object_176.finish();
            }
        }
        object_173.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_parent_entity_update_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParentEntityUpdateRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_177) = &input.update_type {
        object.key("updateType").string(var_177.as_str());
    }
    if let Some(var_178) = &input.parent_entity_id {
        object.key("parentEntityId").string(var_178);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_entity_property_reference(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntityPropertyReference,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.component_name {
        object.key("componentName").string(var_179);
    }
    if let Some(var_180) = &input.external_id_property {
        let mut object_181 = object.key("externalIdProperty").start_object();
        for (key_182, value_183) in var_180 {
            {
                object_181.key(key_182).string(value_183);
            }
        }
        object_181.finish();
    }
    if let Some(var_184) = &input.entity_id {
        object.key("entityId").string(var_184);
    }
    if let Some(var_185) = &input.property_name {
        object.key("propertyName").string(var_185);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_186) = &input.timestamp {
        object
            .key("timestamp")
            .date_time(var_186, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_187) = &input.value {
        let mut object_188 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_188, var_187)?;
        object_188.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_connector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataConnector,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_189) = &input.lambda {
        let mut object_190 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_function(&mut object_190, var_189)?;
        object_190.finish();
    }
    if let Some(var_191) = &input.is_native {
        object.key("isNative").boolean(*var_191);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_192) = &input.r#type {
        object.key("type").string(var_192.as_str());
    }
    if let Some(var_193) = &input.nested_type {
        let mut object_194 = object.key("nestedType").start_object();
        crate::json_ser::serialize_structure_crate_model_data_type(&mut object_194, var_193)?;
        object_194.finish();
    }
    if let Some(var_195) = &input.allowed_values {
        let mut array_196 = object.key("allowedValues").start_array();
        for item_197 in var_195 {
            {
                let mut object_198 = array_196.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_198,
                    item_197,
                )?;
                object_198.finish();
            }
        }
        array_196.finish();
    }
    if let Some(var_199) = &input.unit_of_measure {
        object.key("unitOfMeasure").string(var_199);
    }
    if let Some(var_200) = &input.relationship {
        let mut object_201 = object.key("relationship").start_object();
        crate::json_ser::serialize_structure_crate_model_relationship(&mut object_201, var_200)?;
        object_201.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_data_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_202) = &input.boolean_value {
        object.key("booleanValue").boolean(*var_202);
    }
    if let Some(var_203) = &input.double_value {
        object.key("doubleValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.integer_value {
        object.key("integerValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_204).into()),
        );
    }
    if let Some(var_205) = &input.long_value {
        object.key("longValue").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_205).into()),
        );
    }
    if let Some(var_206) = &input.string_value {
        object.key("stringValue").string(var_206);
    }
    if let Some(var_207) = &input.list_value {
        let mut array_208 = object.key("listValue").start_array();
        for item_209 in var_207 {
            {
                let mut object_210 = array_208.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_210,
                    item_209,
                )?;
                object_210.finish();
            }
        }
        array_208.finish();
    }
    if let Some(var_211) = &input.map_value {
        let mut object_212 = object.key("mapValue").start_object();
        for (key_213, value_214) in var_211 {
            {
                let mut object_215 = object_212.key(key_213).start_object();
                crate::json_ser::serialize_structure_crate_model_data_value(
                    &mut object_215,
                    value_214,
                )?;
                object_215.finish();
            }
        }
        object_212.finish();
    }
    if let Some(var_216) = &input.relationship_value {
        let mut object_217 = object.key("relationshipValue").start_object();
        crate::json_ser::serialize_structure_crate_model_relationship_value(
            &mut object_217,
            var_216,
        )?;
        object_217.finish();
    }
    if let Some(var_218) = &input.expression {
        object.key("expression").string(var_218);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_property_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyRequest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.definition {
        let mut object_220 = object.key("definition").start_object();
        crate::json_ser::serialize_structure_crate_model_property_definition_request(
            &mut object_220,
            var_219,
        )?;
        object_220.finish();
    }
    if let Some(var_221) = &input.value {
        let mut object_222 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_data_value(&mut object_222, var_221)?;
        object_222.finish();
    }
    if let Some(var_223) = &input.update_type {
        object.key("updateType").string(var_223.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_function(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaFunction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_224) = &input.arn {
        object.key("arn").string(var_224);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relationship(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Relationship,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.target_component_type_id {
        object.key("targetComponentTypeId").string(var_225);
    }
    if let Some(var_226) = &input.relationship_type {
        object.key("relationshipType").string(var_226);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_relationship_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RelationshipValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_227) = &input.target_entity_id {
        object.key("targetEntityId").string(var_227);
    }
    if let Some(var_228) = &input.target_component_name {
        object.key("targetComponentName").string(var_228);
    }
    Ok(())
}
