// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutResourceAttributesOutput {}
impl std::fmt::Debug for PutResourceAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutResourceAttributesOutput");
        formatter.finish()
    }
}
/// See [`PutResourceAttributesOutput`](crate::output::PutResourceAttributesOutput)
pub mod put_resource_attributes_output {
    /// A builder for [`PutResourceAttributesOutput`](crate::output::PutResourceAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutResourceAttributesOutput`](crate::output::PutResourceAttributesOutput)
        pub fn build(self) -> crate::output::PutResourceAttributesOutput {
            crate::output::PutResourceAttributesOutput {}
        }
    }
}
impl PutResourceAttributesOutput {
    /// Creates a new builder-style object to manufacture [`PutResourceAttributesOutput`](crate::output::PutResourceAttributesOutput)
    pub fn builder() -> crate::output::put_resource_attributes_output::Builder {
        crate::output::put_resource_attributes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotifyMigrationTaskStateOutput {}
impl std::fmt::Debug for NotifyMigrationTaskStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotifyMigrationTaskStateOutput");
        formatter.finish()
    }
}
/// See [`NotifyMigrationTaskStateOutput`](crate::output::NotifyMigrationTaskStateOutput)
pub mod notify_migration_task_state_output {
    /// A builder for [`NotifyMigrationTaskStateOutput`](crate::output::NotifyMigrationTaskStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NotifyMigrationTaskStateOutput`](crate::output::NotifyMigrationTaskStateOutput)
        pub fn build(self) -> crate::output::NotifyMigrationTaskStateOutput {
            crate::output::NotifyMigrationTaskStateOutput {}
        }
    }
}
impl NotifyMigrationTaskStateOutput {
    /// Creates a new builder-style object to manufacture [`NotifyMigrationTaskStateOutput`](crate::output::NotifyMigrationTaskStateOutput)
    pub fn builder() -> crate::output::notify_migration_task_state_output::Builder {
        crate::output::notify_migration_task_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NotifyApplicationStateOutput {}
impl std::fmt::Debug for NotifyApplicationStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NotifyApplicationStateOutput");
        formatter.finish()
    }
}
/// See [`NotifyApplicationStateOutput`](crate::output::NotifyApplicationStateOutput)
pub mod notify_application_state_output {
    /// A builder for [`NotifyApplicationStateOutput`](crate::output::NotifyApplicationStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`NotifyApplicationStateOutput`](crate::output::NotifyApplicationStateOutput)
        pub fn build(self) -> crate::output::NotifyApplicationStateOutput {
            crate::output::NotifyApplicationStateOutput {}
        }
    }
}
impl NotifyApplicationStateOutput {
    /// Creates a new builder-style object to manufacture [`NotifyApplicationStateOutput`](crate::output::NotifyApplicationStateOutput)
    pub fn builder() -> crate::output::notify_application_state_output::Builder {
        crate::output::notify_application_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListProgressUpdateStreamsOutput {
    /// <p>List of progress update streams up to the max number of results passed in the
    /// input.</p>
    pub progress_update_stream_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ProgressUpdateStreamSummary>>,
    /// <p>If there are more streams created than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProgressUpdateStreamsOutput {
    /// <p>List of progress update streams up to the max number of results passed in the
    /// input.</p>
    pub fn progress_update_stream_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::ProgressUpdateStreamSummary]> {
        self.progress_update_stream_summary_list.as_deref()
    }
    /// <p>If there are more streams created than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListProgressUpdateStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListProgressUpdateStreamsOutput");
        formatter.field(
            "progress_update_stream_summary_list",
            &self.progress_update_stream_summary_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListProgressUpdateStreamsOutput`](crate::output::ListProgressUpdateStreamsOutput)
pub mod list_progress_update_streams_output {
    /// A builder for [`ListProgressUpdateStreamsOutput`](crate::output::ListProgressUpdateStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) progress_update_stream_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ProgressUpdateStreamSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `progress_update_stream_summary_list`.
        ///
        /// To override the contents of this collection use [`set_progress_update_stream_summary_list`](Self::set_progress_update_stream_summary_list).
        ///
        /// <p>List of progress update streams up to the max number of results passed in the
        /// input.</p>
        pub fn progress_update_stream_summary_list(
            mut self,
            input: impl Into<crate::model::ProgressUpdateStreamSummary>,
        ) -> Self {
            let mut v = self.progress_update_stream_summary_list.unwrap_or_default();
            v.push(input.into());
            self.progress_update_stream_summary_list = Some(v);
            self
        }
        /// <p>List of progress update streams up to the max number of results passed in the
        /// input.</p>
        pub fn set_progress_update_stream_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProgressUpdateStreamSummary>>,
        ) -> Self {
            self.progress_update_stream_summary_list = input;
            self
        }
        /// <p>If there are more streams created than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more streams created than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProgressUpdateStreamsOutput`](crate::output::ListProgressUpdateStreamsOutput)
        pub fn build(self) -> crate::output::ListProgressUpdateStreamsOutput {
            crate::output::ListProgressUpdateStreamsOutput {
                progress_update_stream_summary_list: self.progress_update_stream_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProgressUpdateStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListProgressUpdateStreamsOutput`](crate::output::ListProgressUpdateStreamsOutput)
    pub fn builder() -> crate::output::list_progress_update_streams_output::Builder {
        crate::output::list_progress_update_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMigrationTasksOutput {
    /// <p>If there are more migration tasks than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Lists the migration task's summary which includes: <code>MigrationTaskName</code>,
    /// <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>,
    /// and the <code>UpdateDateTime</code> for each task.</p>
    pub migration_task_summary_list:
        std::option::Option<std::vec::Vec<crate::model::MigrationTaskSummary>>,
}
impl ListMigrationTasksOutput {
    /// <p>If there are more migration tasks than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Lists the migration task's summary which includes: <code>MigrationTaskName</code>,
    /// <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>,
    /// and the <code>UpdateDateTime</code> for each task.</p>
    pub fn migration_task_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::MigrationTaskSummary]> {
        self.migration_task_summary_list.as_deref()
    }
}
impl std::fmt::Debug for ListMigrationTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMigrationTasksOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field(
            "migration_task_summary_list",
            &self.migration_task_summary_list,
        );
        formatter.finish()
    }
}
/// See [`ListMigrationTasksOutput`](crate::output::ListMigrationTasksOutput)
pub mod list_migration_tasks_output {
    /// A builder for [`ListMigrationTasksOutput`](crate::output::ListMigrationTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) migration_task_summary_list:
            std::option::Option<std::vec::Vec<crate::model::MigrationTaskSummary>>,
    }
    impl Builder {
        /// <p>If there are more migration tasks than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more migration tasks than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `migration_task_summary_list`.
        ///
        /// To override the contents of this collection use [`set_migration_task_summary_list`](Self::set_migration_task_summary_list).
        ///
        /// <p>Lists the migration task's summary which includes: <code>MigrationTaskName</code>,
        /// <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>,
        /// and the <code>UpdateDateTime</code> for each task.</p>
        pub fn migration_task_summary_list(
            mut self,
            input: impl Into<crate::model::MigrationTaskSummary>,
        ) -> Self {
            let mut v = self.migration_task_summary_list.unwrap_or_default();
            v.push(input.into());
            self.migration_task_summary_list = Some(v);
            self
        }
        /// <p>Lists the migration task's summary which includes: <code>MigrationTaskName</code>,
        /// <code>ProgressPercent</code>, <code>ProgressUpdateStream</code>, <code>Status</code>,
        /// and the <code>UpdateDateTime</code> for each task.</p>
        pub fn set_migration_task_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MigrationTaskSummary>>,
        ) -> Self {
            self.migration_task_summary_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMigrationTasksOutput`](crate::output::ListMigrationTasksOutput)
        pub fn build(self) -> crate::output::ListMigrationTasksOutput {
            crate::output::ListMigrationTasksOutput {
                next_token: self.next_token,
                migration_task_summary_list: self.migration_task_summary_list,
            }
        }
    }
}
impl ListMigrationTasksOutput {
    /// Creates a new builder-style object to manufacture [`ListMigrationTasksOutput`](crate::output::ListMigrationTasksOutput)
    pub fn builder() -> crate::output::list_migration_tasks_output::Builder {
        crate::output::list_migration_tasks_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDiscoveredResourcesOutput {
    /// <p>If there are more discovered resources than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Returned list of discovered resources associated with the given MigrationTask.</p>
    pub discovered_resource_list:
        std::option::Option<std::vec::Vec<crate::model::DiscoveredResource>>,
}
impl ListDiscoveredResourcesOutput {
    /// <p>If there are more discovered resources than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Returned list of discovered resources associated with the given MigrationTask.</p>
    pub fn discovered_resource_list(
        &self,
    ) -> std::option::Option<&[crate::model::DiscoveredResource]> {
        self.discovered_resource_list.as_deref()
    }
}
impl std::fmt::Debug for ListDiscoveredResourcesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDiscoveredResourcesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("discovered_resource_list", &self.discovered_resource_list);
        formatter.finish()
    }
}
/// See [`ListDiscoveredResourcesOutput`](crate::output::ListDiscoveredResourcesOutput)
pub mod list_discovered_resources_output {
    /// A builder for [`ListDiscoveredResourcesOutput`](crate::output::ListDiscoveredResourcesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) discovered_resource_list:
            std::option::Option<std::vec::Vec<crate::model::DiscoveredResource>>,
    }
    impl Builder {
        /// <p>If there are more discovered resources than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more discovered resources than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `discovered_resource_list`.
        ///
        /// To override the contents of this collection use [`set_discovered_resource_list`](Self::set_discovered_resource_list).
        ///
        /// <p>Returned list of discovered resources associated with the given MigrationTask.</p>
        pub fn discovered_resource_list(
            mut self,
            input: impl Into<crate::model::DiscoveredResource>,
        ) -> Self {
            let mut v = self.discovered_resource_list.unwrap_or_default();
            v.push(input.into());
            self.discovered_resource_list = Some(v);
            self
        }
        /// <p>Returned list of discovered resources associated with the given MigrationTask.</p>
        pub fn set_discovered_resource_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DiscoveredResource>>,
        ) -> Self {
            self.discovered_resource_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDiscoveredResourcesOutput`](crate::output::ListDiscoveredResourcesOutput)
        pub fn build(self) -> crate::output::ListDiscoveredResourcesOutput {
            crate::output::ListDiscoveredResourcesOutput {
                next_token: self.next_token,
                discovered_resource_list: self.discovered_resource_list,
            }
        }
    }
}
impl ListDiscoveredResourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListDiscoveredResourcesOutput`](crate::output::ListDiscoveredResourcesOutput)
    pub fn builder() -> crate::output::list_discovered_resources_output::Builder {
        crate::output::list_discovered_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListCreatedArtifactsOutput {
    /// <p>If there are more created artifacts than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>List of created artifacts up to the maximum number of results specified in the
    /// request.</p>
    pub created_artifact_list: std::option::Option<std::vec::Vec<crate::model::CreatedArtifact>>,
}
impl ListCreatedArtifactsOutput {
    /// <p>If there are more created artifacts than the max result, return the next token to be
    /// passed to the next call as a bookmark of where to start from.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>List of created artifacts up to the maximum number of results specified in the
    /// request.</p>
    pub fn created_artifact_list(&self) -> std::option::Option<&[crate::model::CreatedArtifact]> {
        self.created_artifact_list.as_deref()
    }
}
impl std::fmt::Debug for ListCreatedArtifactsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListCreatedArtifactsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("created_artifact_list", &self.created_artifact_list);
        formatter.finish()
    }
}
/// See [`ListCreatedArtifactsOutput`](crate::output::ListCreatedArtifactsOutput)
pub mod list_created_artifacts_output {
    /// A builder for [`ListCreatedArtifactsOutput`](crate::output::ListCreatedArtifactsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) created_artifact_list:
            std::option::Option<std::vec::Vec<crate::model::CreatedArtifact>>,
    }
    impl Builder {
        /// <p>If there are more created artifacts than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more created artifacts than the max result, return the next token to be
        /// passed to the next call as a bookmark of where to start from.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `created_artifact_list`.
        ///
        /// To override the contents of this collection use [`set_created_artifact_list`](Self::set_created_artifact_list).
        ///
        /// <p>List of created artifacts up to the maximum number of results specified in the
        /// request.</p>
        pub fn created_artifact_list(
            mut self,
            input: impl Into<crate::model::CreatedArtifact>,
        ) -> Self {
            let mut v = self.created_artifact_list.unwrap_or_default();
            v.push(input.into());
            self.created_artifact_list = Some(v);
            self
        }
        /// <p>List of created artifacts up to the maximum number of results specified in the
        /// request.</p>
        pub fn set_created_artifact_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CreatedArtifact>>,
        ) -> Self {
            self.created_artifact_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListCreatedArtifactsOutput`](crate::output::ListCreatedArtifactsOutput)
        pub fn build(self) -> crate::output::ListCreatedArtifactsOutput {
            crate::output::ListCreatedArtifactsOutput {
                next_token: self.next_token,
                created_artifact_list: self.created_artifact_list,
            }
        }
    }
}
impl ListCreatedArtifactsOutput {
    /// Creates a new builder-style object to manufacture [`ListCreatedArtifactsOutput`](crate::output::ListCreatedArtifactsOutput)
    pub fn builder() -> crate::output::list_created_artifacts_output::Builder {
        crate::output::list_created_artifacts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListApplicationStatesOutput {
    /// <p>A list of Applications that exist in Application Discovery Service.</p>
    pub application_state_list: std::option::Option<std::vec::Vec<crate::model::ApplicationState>>,
    /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
    /// available. To retrieve the next page of results, make the call again using the returned
    /// token in <code>NextToken</code>.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListApplicationStatesOutput {
    /// <p>A list of Applications that exist in Application Discovery Service.</p>
    pub fn application_state_list(&self) -> std::option::Option<&[crate::model::ApplicationState]> {
        self.application_state_list.as_deref()
    }
    /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
    /// available. To retrieve the next page of results, make the call again using the returned
    /// token in <code>NextToken</code>.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListApplicationStatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListApplicationStatesOutput");
        formatter.field("application_state_list", &self.application_state_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListApplicationStatesOutput`](crate::output::ListApplicationStatesOutput)
pub mod list_application_states_output {
    /// A builder for [`ListApplicationStatesOutput`](crate::output::ListApplicationStatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_state_list:
            std::option::Option<std::vec::Vec<crate::model::ApplicationState>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `application_state_list`.
        ///
        /// To override the contents of this collection use [`set_application_state_list`](Self::set_application_state_list).
        ///
        /// <p>A list of Applications that exist in Application Discovery Service.</p>
        pub fn application_state_list(
            mut self,
            input: impl Into<crate::model::ApplicationState>,
        ) -> Self {
            let mut v = self.application_state_list.unwrap_or_default();
            v.push(input.into());
            self.application_state_list = Some(v);
            self
        }
        /// <p>A list of Applications that exist in Application Discovery Service.</p>
        pub fn set_application_state_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ApplicationState>>,
        ) -> Self {
            self.application_state_list = input;
            self
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If a <code>NextToken</code> was returned by a previous call, there are more results
        /// available. To retrieve the next page of results, make the call again using the returned
        /// token in <code>NextToken</code>.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListApplicationStatesOutput`](crate::output::ListApplicationStatesOutput)
        pub fn build(self) -> crate::output::ListApplicationStatesOutput {
            crate::output::ListApplicationStatesOutput {
                application_state_list: self.application_state_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListApplicationStatesOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationStatesOutput`](crate::output::ListApplicationStatesOutput)
    pub fn builder() -> crate::output::list_application_states_output::Builder {
        crate::output::list_application_states_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportMigrationTaskOutput {}
impl std::fmt::Debug for ImportMigrationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportMigrationTaskOutput");
        formatter.finish()
    }
}
/// See [`ImportMigrationTaskOutput`](crate::output::ImportMigrationTaskOutput)
pub mod import_migration_task_output {
    /// A builder for [`ImportMigrationTaskOutput`](crate::output::ImportMigrationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ImportMigrationTaskOutput`](crate::output::ImportMigrationTaskOutput)
        pub fn build(self) -> crate::output::ImportMigrationTaskOutput {
            crate::output::ImportMigrationTaskOutput {}
        }
    }
}
impl ImportMigrationTaskOutput {
    /// Creates a new builder-style object to manufacture [`ImportMigrationTaskOutput`](crate::output::ImportMigrationTaskOutput)
    pub fn builder() -> crate::output::import_migration_task_output::Builder {
        crate::output::import_migration_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateDiscoveredResourceOutput {}
impl std::fmt::Debug for DisassociateDiscoveredResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateDiscoveredResourceOutput");
        formatter.finish()
    }
}
/// See [`DisassociateDiscoveredResourceOutput`](crate::output::DisassociateDiscoveredResourceOutput)
pub mod disassociate_discovered_resource_output {
    /// A builder for [`DisassociateDiscoveredResourceOutput`](crate::output::DisassociateDiscoveredResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateDiscoveredResourceOutput`](crate::output::DisassociateDiscoveredResourceOutput)
        pub fn build(self) -> crate::output::DisassociateDiscoveredResourceOutput {
            crate::output::DisassociateDiscoveredResourceOutput {}
        }
    }
}
impl DisassociateDiscoveredResourceOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateDiscoveredResourceOutput`](crate::output::DisassociateDiscoveredResourceOutput)
    pub fn builder() -> crate::output::disassociate_discovered_resource_output::Builder {
        crate::output::disassociate_discovered_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateCreatedArtifactOutput {}
impl std::fmt::Debug for DisassociateCreatedArtifactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateCreatedArtifactOutput");
        formatter.finish()
    }
}
/// See [`DisassociateCreatedArtifactOutput`](crate::output::DisassociateCreatedArtifactOutput)
pub mod disassociate_created_artifact_output {
    /// A builder for [`DisassociateCreatedArtifactOutput`](crate::output::DisassociateCreatedArtifactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateCreatedArtifactOutput`](crate::output::DisassociateCreatedArtifactOutput)
        pub fn build(self) -> crate::output::DisassociateCreatedArtifactOutput {
            crate::output::DisassociateCreatedArtifactOutput {}
        }
    }
}
impl DisassociateCreatedArtifactOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateCreatedArtifactOutput`](crate::output::DisassociateCreatedArtifactOutput)
    pub fn builder() -> crate::output::disassociate_created_artifact_output::Builder {
        crate::output::disassociate_created_artifact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeMigrationTaskOutput {
    /// <p>Object encapsulating information about the migration task.</p>
    pub migration_task: std::option::Option<crate::model::MigrationTask>,
}
impl DescribeMigrationTaskOutput {
    /// <p>Object encapsulating information about the migration task.</p>
    pub fn migration_task(&self) -> std::option::Option<&crate::model::MigrationTask> {
        self.migration_task.as_ref()
    }
}
impl std::fmt::Debug for DescribeMigrationTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeMigrationTaskOutput");
        formatter.field("migration_task", &self.migration_task);
        formatter.finish()
    }
}
/// See [`DescribeMigrationTaskOutput`](crate::output::DescribeMigrationTaskOutput)
pub mod describe_migration_task_output {
    /// A builder for [`DescribeMigrationTaskOutput`](crate::output::DescribeMigrationTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) migration_task: std::option::Option<crate::model::MigrationTask>,
    }
    impl Builder {
        /// <p>Object encapsulating information about the migration task.</p>
        pub fn migration_task(mut self, input: crate::model::MigrationTask) -> Self {
            self.migration_task = Some(input);
            self
        }
        /// <p>Object encapsulating information about the migration task.</p>
        pub fn set_migration_task(
            mut self,
            input: std::option::Option<crate::model::MigrationTask>,
        ) -> Self {
            self.migration_task = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMigrationTaskOutput`](crate::output::DescribeMigrationTaskOutput)
        pub fn build(self) -> crate::output::DescribeMigrationTaskOutput {
            crate::output::DescribeMigrationTaskOutput {
                migration_task: self.migration_task,
            }
        }
    }
}
impl DescribeMigrationTaskOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMigrationTaskOutput`](crate::output::DescribeMigrationTaskOutput)
    pub fn builder() -> crate::output::describe_migration_task_output::Builder {
        crate::output::describe_migration_task_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeApplicationStateOutput {
    /// <p>Status of the application - Not Started, In-Progress, Complete.</p>
    pub application_status: std::option::Option<crate::model::ApplicationStatus>,
    /// <p>The timestamp when the application status was last updated.</p>
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl DescribeApplicationStateOutput {
    /// <p>Status of the application - Not Started, In-Progress, Complete.</p>
    pub fn application_status(&self) -> std::option::Option<&crate::model::ApplicationStatus> {
        self.application_status.as_ref()
    }
    /// <p>The timestamp when the application status was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
}
impl std::fmt::Debug for DescribeApplicationStateOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeApplicationStateOutput");
        formatter.field("application_status", &self.application_status);
        formatter.field("last_updated_time", &self.last_updated_time);
        formatter.finish()
    }
}
/// See [`DescribeApplicationStateOutput`](crate::output::DescribeApplicationStateOutput)
pub mod describe_application_state_output {
    /// A builder for [`DescribeApplicationStateOutput`](crate::output::DescribeApplicationStateOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_status: std::option::Option<crate::model::ApplicationStatus>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    }
    impl Builder {
        /// <p>Status of the application - Not Started, In-Progress, Complete.</p>
        pub fn application_status(mut self, input: crate::model::ApplicationStatus) -> Self {
            self.application_status = Some(input);
            self
        }
        /// <p>Status of the application - Not Started, In-Progress, Complete.</p>
        pub fn set_application_status(
            mut self,
            input: std::option::Option<crate::model::ApplicationStatus>,
        ) -> Self {
            self.application_status = input;
            self
        }
        /// <p>The timestamp when the application status was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The timestamp when the application status was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicationStateOutput`](crate::output::DescribeApplicationStateOutput)
        pub fn build(self) -> crate::output::DescribeApplicationStateOutput {
            crate::output::DescribeApplicationStateOutput {
                application_status: self.application_status,
                last_updated_time: self.last_updated_time,
            }
        }
    }
}
impl DescribeApplicationStateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationStateOutput`](crate::output::DescribeApplicationStateOutput)
    pub fn builder() -> crate::output::describe_application_state_output::Builder {
        crate::output::describe_application_state_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteProgressUpdateStreamOutput {}
impl std::fmt::Debug for DeleteProgressUpdateStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteProgressUpdateStreamOutput");
        formatter.finish()
    }
}
/// See [`DeleteProgressUpdateStreamOutput`](crate::output::DeleteProgressUpdateStreamOutput)
pub mod delete_progress_update_stream_output {
    /// A builder for [`DeleteProgressUpdateStreamOutput`](crate::output::DeleteProgressUpdateStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProgressUpdateStreamOutput`](crate::output::DeleteProgressUpdateStreamOutput)
        pub fn build(self) -> crate::output::DeleteProgressUpdateStreamOutput {
            crate::output::DeleteProgressUpdateStreamOutput {}
        }
    }
}
impl DeleteProgressUpdateStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProgressUpdateStreamOutput`](crate::output::DeleteProgressUpdateStreamOutput)
    pub fn builder() -> crate::output::delete_progress_update_stream_output::Builder {
        crate::output::delete_progress_update_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateProgressUpdateStreamOutput {}
impl std::fmt::Debug for CreateProgressUpdateStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateProgressUpdateStreamOutput");
        formatter.finish()
    }
}
/// See [`CreateProgressUpdateStreamOutput`](crate::output::CreateProgressUpdateStreamOutput)
pub mod create_progress_update_stream_output {
    /// A builder for [`CreateProgressUpdateStreamOutput`](crate::output::CreateProgressUpdateStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CreateProgressUpdateStreamOutput`](crate::output::CreateProgressUpdateStreamOutput)
        pub fn build(self) -> crate::output::CreateProgressUpdateStreamOutput {
            crate::output::CreateProgressUpdateStreamOutput {}
        }
    }
}
impl CreateProgressUpdateStreamOutput {
    /// Creates a new builder-style object to manufacture [`CreateProgressUpdateStreamOutput`](crate::output::CreateProgressUpdateStreamOutput)
    pub fn builder() -> crate::output::create_progress_update_stream_output::Builder {
        crate::output::create_progress_update_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateDiscoveredResourceOutput {}
impl std::fmt::Debug for AssociateDiscoveredResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateDiscoveredResourceOutput");
        formatter.finish()
    }
}
/// See [`AssociateDiscoveredResourceOutput`](crate::output::AssociateDiscoveredResourceOutput)
pub mod associate_discovered_resource_output {
    /// A builder for [`AssociateDiscoveredResourceOutput`](crate::output::AssociateDiscoveredResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateDiscoveredResourceOutput`](crate::output::AssociateDiscoveredResourceOutput)
        pub fn build(self) -> crate::output::AssociateDiscoveredResourceOutput {
            crate::output::AssociateDiscoveredResourceOutput {}
        }
    }
}
impl AssociateDiscoveredResourceOutput {
    /// Creates a new builder-style object to manufacture [`AssociateDiscoveredResourceOutput`](crate::output::AssociateDiscoveredResourceOutput)
    pub fn builder() -> crate::output::associate_discovered_resource_output::Builder {
        crate::output::associate_discovered_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateCreatedArtifactOutput {}
impl std::fmt::Debug for AssociateCreatedArtifactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateCreatedArtifactOutput");
        formatter.finish()
    }
}
/// See [`AssociateCreatedArtifactOutput`](crate::output::AssociateCreatedArtifactOutput)
pub mod associate_created_artifact_output {
    /// A builder for [`AssociateCreatedArtifactOutput`](crate::output::AssociateCreatedArtifactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateCreatedArtifactOutput`](crate::output::AssociateCreatedArtifactOutput)
        pub fn build(self) -> crate::output::AssociateCreatedArtifactOutput {
            crate::output::AssociateCreatedArtifactOutput {}
        }
    }
}
impl AssociateCreatedArtifactOutput {
    /// Creates a new builder-style object to manufacture [`AssociateCreatedArtifactOutput`](crate::output::AssociateCreatedArtifactOutput)
    pub fn builder() -> crate::output::associate_created_artifact_output::Builder {
        crate::output::associate_created_artifact_output::Builder::default()
    }
}
