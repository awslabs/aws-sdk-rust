// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_access_point_input(
    input: &crate::input::CreateAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_1.as_ref());
    }
    if let Some(var_2) = &input.public_access_block_configuration {
        let inner_writer = scope.start_el("PublicAccessBlockConfiguration");
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(
            var_2,
            inner_writer,
        )?
    }
    if let Some(var_3) = &input.vpc_configuration {
        let inner_writer = scope.start_el("VpcConfiguration");
        crate::xml_ser::serialize_structure_crate_model_vpc_configuration(var_3, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_create_access_point_for_object_lambda_input(
    input: &crate::input::CreateAccessPointForObjectLambdaInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_4) = &input.configuration {
        let inner_writer = scope.start_el("Configuration");
        crate::xml_ser::serialize_structure_crate_model_object_lambda_configuration(
            var_4,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_create_bucket_input_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateBucketConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_create_bucket_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_create_job_input(
    input: &crate::input::CreateJobInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_5) = &input.client_request_token {
        let mut inner_writer = scope.start_el("ClientRequestToken").finish();
        inner_writer.data(var_5.as_ref());
    }
    if let Some(var_6) = &input.confirmation_required {
        let mut inner_writer = scope.start_el("ConfirmationRequired").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_6).encode());
    }
    if let Some(var_7) = &input.description {
        let mut inner_writer = scope.start_el("Description").finish();
        inner_writer.data(var_7.as_ref());
    }
    if let Some(var_8) = &input.manifest {
        let inner_writer = scope.start_el("Manifest");
        crate::xml_ser::serialize_structure_crate_model_job_manifest(var_8, inner_writer)?
    }
    if let Some(var_9) = &input.operation {
        let inner_writer = scope.start_el("Operation");
        crate::xml_ser::serialize_structure_crate_model_job_operation(var_9, inner_writer)?
    }
    if let Some(var_10) = &input.priority {
        let mut inner_writer = scope.start_el("Priority").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_10).encode());
    }
    if let Some(var_11) = &input.report {
        let inner_writer = scope.start_el("Report");
        crate::xml_ser::serialize_structure_crate_model_job_report(var_11, inner_writer)?
    }
    if let Some(var_12) = &input.role_arn {
        let mut inner_writer = scope.start_el("RoleArn").finish();
        inner_writer.data(var_12.as_ref());
    }
    if let Some(var_13) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_14 in var_13 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_14, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_create_multi_region_access_point_input(
    input: &crate::input::CreateMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_15) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(var_15.as_ref());
    }
    if let Some(var_16) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_create_multi_region_access_point_input(
            var_16,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_delete_multi_region_access_point_input(
    input: &crate::input::DeleteMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_17) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(var_17.as_ref());
    }
    if let Some(var_18) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_delete_multi_region_access_point_input(
            var_18,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_configuration_for_object_lambda_input(
    input: &crate::input::PutAccessPointConfigurationForObjectLambdaInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_19) = &input.configuration {
        let inner_writer = scope.start_el("Configuration");
        crate::xml_ser::serialize_structure_crate_model_object_lambda_configuration(
            var_19,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_policy_input(
    input: &crate::input::PutAccessPointPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_20) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(var_20.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_access_point_policy_for_object_lambda_input(
    input: &crate::input::PutAccessPointPolicyForObjectLambdaInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_21) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(var_21.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_bucket_lifecycle_configuration_input_lifecycle_configuration(
    input: &crate::model::LifecycleConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LifecycleConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_lifecycle_configuration(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_bucket_policy_input(
    input: &crate::input::PutBucketPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_22) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(var_22.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_bucket_tagging_input_tagging(
    input: &crate::model::Tagging,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_tagging(input, root)?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_job_tagging_input(
    input: &crate::input::PutJobTaggingInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_23) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_24 in var_23 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_24, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_multi_region_access_point_policy_input(
    input: &crate::input::PutMultiRegionAccessPointPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_25) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(var_25.as_ref());
    }
    if let Some(var_26) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::xml_ser::serialize_structure_crate_model_put_multi_region_access_point_policy_input(
            var_26,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_member_com_amazonaws_s3control_synthetic_put_public_access_block_input_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
) -> std::result::Result<std::vec::Vec<u8>, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PublicAccessBlockConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(
            input, root,
        )?
    }
    Ok(out.into_bytes())
}

pub fn serialize_structure_crate_input_put_storage_lens_configuration_input(
    input: &crate::input::PutStorageLensConfigurationInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_27) = &input.storage_lens_configuration {
        let inner_writer = scope.start_el("StorageLensConfiguration");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_configuration(
            var_27,
            inner_writer,
        )?
    }
    if let Some(var_28) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_29 in var_28 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_storage_lens_tag(
                    list_item_29,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_input_put_storage_lens_configuration_tagging_input(
    input: &crate::input::PutStorageLensConfigurationTaggingInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_30) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_31 in var_30 {
            {
                let inner_writer = inner_writer.start_el("Tag");
                crate::xml_ser::serialize_structure_crate_model_storage_lens_tag(
                    list_item_31,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.block_public_acls {
        let mut inner_writer = scope.start_el("BlockPublicAcls").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.block_public_acls).encode());
    }
    if input.ignore_public_acls {
        let mut inner_writer = scope.start_el("IgnorePublicAcls").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.ignore_public_acls).encode());
    }
    if input.block_public_policy {
        let mut inner_writer = scope.start_el("BlockPublicPolicy").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.block_public_policy).encode());
    }
    if input.restrict_public_buckets {
        let mut inner_writer = scope.start_el("RestrictPublicBuckets").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.restrict_public_buckets).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_configuration(
    input: &crate::model::VpcConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_32) = &input.vpc_id {
        let mut inner_writer = scope.start_el("VpcId").finish();
        inner_writer.data(var_32.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lambda_configuration(
    input: &crate::model::ObjectLambdaConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_33) = &input.supporting_access_point {
        let mut inner_writer = scope.start_el("SupportingAccessPoint").finish();
        inner_writer.data(var_33.as_ref());
    }
    if input.cloud_watch_metrics_enabled {
        let mut inner_writer = scope.start_el("CloudWatchMetricsEnabled").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.cloud_watch_metrics_enabled).encode(),
        );
    }
    if let Some(var_34) = &input.allowed_features {
        let mut inner_writer = scope.start_el("AllowedFeatures").finish();
        for list_item_35 in var_34 {
            {
                let mut inner_writer = inner_writer.start_el("AllowedFeature").finish();
                inner_writer.data(list_item_35.as_str());
            }
        }
    }
    if let Some(var_36) = &input.transformation_configurations {
        let mut inner_writer = scope.start_el("TransformationConfigurations").finish();
        for list_item_37 in var_36 {
            {
                let inner_writer = inner_writer.start_el("TransformationConfiguration");
                crate::xml_ser::serialize_structure_crate_model_object_lambda_transformation_configuration(list_item_37, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_38) = &input.location_constraint {
        let mut inner_writer = scope.start_el("LocationConstraint").finish();
        inner_writer.data(var_38.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest(
    input: &crate::model::JobManifest,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_39) = &input.spec {
        let inner_writer = scope.start_el("Spec");
        crate::xml_ser::serialize_structure_crate_model_job_manifest_spec(var_39, inner_writer)?
    }
    if let Some(var_40) = &input.location {
        let inner_writer = scope.start_el("Location");
        crate::xml_ser::serialize_structure_crate_model_job_manifest_location(var_40, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_operation(
    input: &crate::model::JobOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_41) = &input.lambda_invoke {
        let inner_writer = scope.start_el("LambdaInvoke");
        crate::xml_ser::serialize_structure_crate_model_lambda_invoke_operation(
            var_41,
            inner_writer,
        )?
    }
    if let Some(var_42) = &input.s3_put_object_copy {
        let inner_writer = scope.start_el("S3PutObjectCopy");
        crate::xml_ser::serialize_structure_crate_model_s3_copy_object_operation(
            var_42,
            inner_writer,
        )?
    }
    if let Some(var_43) = &input.s3_put_object_acl {
        let inner_writer = scope.start_el("S3PutObjectAcl");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_acl_operation(
            var_43,
            inner_writer,
        )?
    }
    if let Some(var_44) = &input.s3_put_object_tagging {
        let inner_writer = scope.start_el("S3PutObjectTagging");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_tagging_operation(
            var_44,
            inner_writer,
        )?
    }
    if let Some(var_45) = &input.s3_delete_object_tagging {
        let inner_writer = scope.start_el("S3DeleteObjectTagging");
        crate::xml_ser::serialize_structure_crate_model_s3_delete_object_tagging_operation(
            var_45,
            inner_writer,
        )?
    }
    if let Some(var_46) = &input.s3_initiate_restore_object {
        let inner_writer = scope.start_el("S3InitiateRestoreObject");
        crate::xml_ser::serialize_structure_crate_model_s3_initiate_restore_object_operation(
            var_46,
            inner_writer,
        )?
    }
    if let Some(var_47) = &input.s3_put_object_legal_hold {
        let inner_writer = scope.start_el("S3PutObjectLegalHold");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_legal_hold_operation(
            var_47,
            inner_writer,
        )?
    }
    if let Some(var_48) = &input.s3_put_object_retention {
        let inner_writer = scope.start_el("S3PutObjectRetention");
        crate::xml_ser::serialize_structure_crate_model_s3_set_object_retention_operation(
            var_48,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_report(
    input: &crate::model::JobReport,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_49) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_49.as_ref());
    }
    if let Some(var_50) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_50.as_str());
    }
    {
        let mut inner_writer = scope.start_el("Enabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.enabled).encode());
    }
    if let Some(var_51) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_51.as_ref());
    }
    if let Some(var_52) = &input.report_scope {
        let mut inner_writer = scope.start_el("ReportScope").finish();
        inner_writer.data(var_52.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_tag(
    input: &crate::model::S3Tag,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_53) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_53.as_ref());
    }
    if let Some(var_54) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_54.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_create_multi_region_access_point_input(
    input: &crate::model::CreateMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_55) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_55.as_ref());
    }
    if let Some(var_56) = &input.public_access_block {
        let inner_writer = scope.start_el("PublicAccessBlock");
        crate::xml_ser::serialize_structure_crate_model_public_access_block_configuration(
            var_56,
            inner_writer,
        )?
    }
    if let Some(var_57) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_58 in var_57 {
            {
                let inner_writer = inner_writer.start_el("Region");
                crate::xml_ser::serialize_structure_crate_model_region(list_item_58, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_delete_multi_region_access_point_input(
    input: &crate::model::DeleteMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_59) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_59.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_configuration(
    input: &crate::model::LifecycleConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_60) = &input.rules {
        let mut inner_writer = scope.start_el("Rules").finish();
        for list_item_61 in var_60 {
            {
                let inner_writer = inner_writer.start_el("Rule");
                crate::xml_ser::serialize_structure_crate_model_lifecycle_rule(
                    list_item_61,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_tagging(
    input: &crate::model::Tagging,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_62) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_63 in var_62 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_63, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_put_multi_region_access_point_policy_input(
    input: &crate::model::PutMultiRegionAccessPointPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_64) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_64.as_ref());
    }
    if let Some(var_65) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(var_65.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_configuration(
    input: &crate::model::StorageLensConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_66) = &input.id {
        let mut inner_writer = scope.start_el("Id").finish();
        inner_writer.data(var_66.as_ref());
    }
    if let Some(var_67) = &input.account_level {
        let inner_writer = scope.start_el("AccountLevel");
        crate::xml_ser::serialize_structure_crate_model_account_level(var_67, inner_writer)?
    }
    if let Some(var_68) = &input.include {
        let inner_writer = scope.start_el("Include");
        crate::xml_ser::serialize_structure_crate_model_include(var_68, inner_writer)?
    }
    if let Some(var_69) = &input.exclude {
        let inner_writer = scope.start_el("Exclude");
        crate::xml_ser::serialize_structure_crate_model_exclude(var_69, inner_writer)?
    }
    if let Some(var_70) = &input.data_export {
        let inner_writer = scope.start_el("DataExport");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_data_export(
            var_70,
            inner_writer,
        )?
    }
    {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_71) = &input.aws_org {
        let inner_writer = scope.start_el("AwsOrg");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_aws_org(var_71, inner_writer)?
    }
    if let Some(var_72) = &input.storage_lens_arn {
        let mut inner_writer = scope.start_el("StorageLensArn").finish();
        inner_writer.data(var_72.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_tag(
    input: &crate::model::StorageLensTag,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_73) = &input.key {
        let mut inner_writer = scope.start_el("Key").finish();
        inner_writer.data(var_73.as_ref());
    }
    if let Some(var_74) = &input.value {
        let mut inner_writer = scope.start_el("Value").finish();
        inner_writer.data(var_74.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_object_lambda_transformation_configuration(
    input: &crate::model::ObjectLambdaTransformationConfiguration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_75) = &input.actions {
        let mut inner_writer = scope.start_el("Actions").finish();
        for list_item_76 in var_75 {
            {
                let mut inner_writer = inner_writer.start_el("Action").finish();
                inner_writer.data(list_item_76.as_str());
            }
        }
    }
    if let Some(var_77) = &input.content_transformation {
        let inner_writer = scope.start_el("ContentTransformation");
        crate::xml_ser::serialize_union_crate_model_object_lambda_content_transformation(
            var_77,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest_spec(
    input: &crate::model::JobManifestSpec,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_78) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_78.as_str());
    }
    if let Some(var_79) = &input.fields {
        let mut inner_writer = scope.start_el("Fields").finish();
        for list_item_80 in var_79 {
            {
                let mut inner_writer = inner_writer.start_el("member").finish();
                inner_writer.data(list_item_80.as_str());
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_job_manifest_location(
    input: &crate::model::JobManifestLocation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_81) = &input.object_arn {
        let mut inner_writer = scope.start_el("ObjectArn").finish();
        inner_writer.data(var_81.as_ref());
    }
    if let Some(var_82) = &input.object_version_id {
        let mut inner_writer = scope.start_el("ObjectVersionId").finish();
        inner_writer.data(var_82.as_ref());
    }
    if let Some(var_83) = &input.e_tag {
        let mut inner_writer = scope.start_el("ETag").finish();
        inner_writer.data(var_83.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_invoke_operation(
    input: &crate::model::LambdaInvokeOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_84) = &input.function_arn {
        let mut inner_writer = scope.start_el("FunctionArn").finish();
        inner_writer.data(var_84.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_copy_object_operation(
    input: &crate::model::S3CopyObjectOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_85) = &input.target_resource {
        let mut inner_writer = scope.start_el("TargetResource").finish();
        inner_writer.data(var_85.as_ref());
    }
    if let Some(var_86) = &input.canned_access_control_list {
        let mut inner_writer = scope.start_el("CannedAccessControlList").finish();
        inner_writer.data(var_86.as_str());
    }
    if let Some(var_87) = &input.access_control_grants {
        let mut inner_writer = scope.start_el("AccessControlGrants").finish();
        for list_item_88 in var_87 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_grant(
                    list_item_88,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_89) = &input.metadata_directive {
        let mut inner_writer = scope.start_el("MetadataDirective").finish();
        inner_writer.data(var_89.as_str());
    }
    if let Some(var_90) = &input.modified_since_constraint {
        let mut inner_writer = scope.start_el("ModifiedSinceConstraint").finish();
        inner_writer.data(
            var_90
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_91) = &input.new_object_metadata {
        let inner_writer = scope.start_el("NewObjectMetadata");
        crate::xml_ser::serialize_structure_crate_model_s3_object_metadata(var_91, inner_writer)?
    }
    if let Some(var_92) = &input.new_object_tagging {
        let mut inner_writer = scope.start_el("NewObjectTagging").finish();
        for list_item_93 in var_92 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_93, inner_writer)?
            }
        }
    }
    if let Some(var_94) = &input.redirect_location {
        let mut inner_writer = scope.start_el("RedirectLocation").finish();
        inner_writer.data(var_94.as_ref());
    }
    if input.requester_pays {
        let mut inner_writer = scope.start_el("RequesterPays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.requester_pays).encode());
    }
    if let Some(var_95) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_95.as_str());
    }
    if let Some(var_96) = &input.un_modified_since_constraint {
        let mut inner_writer = scope.start_el("UnModifiedSinceConstraint").finish();
        inner_writer.data(
            var_96
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_97) = &input.sse_aws_kms_key_id {
        let mut inner_writer = scope.start_el("SSEAwsKmsKeyId").finish();
        inner_writer.data(var_97.as_ref());
    }
    if let Some(var_98) = &input.target_key_prefix {
        let mut inner_writer = scope.start_el("TargetKeyPrefix").finish();
        inner_writer.data(var_98.as_ref());
    }
    if let Some(var_99) = &input.object_lock_legal_hold_status {
        let mut inner_writer = scope.start_el("ObjectLockLegalHoldStatus").finish();
        inner_writer.data(var_99.as_str());
    }
    if let Some(var_100) = &input.object_lock_mode {
        let mut inner_writer = scope.start_el("ObjectLockMode").finish();
        inner_writer.data(var_100.as_str());
    }
    if let Some(var_101) = &input.object_lock_retain_until_date {
        let mut inner_writer = scope.start_el("ObjectLockRetainUntilDate").finish();
        inner_writer.data(
            var_101
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.bucket_key_enabled {
        let mut inner_writer = scope.start_el("BucketKeyEnabled").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.bucket_key_enabled).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_acl_operation(
    input: &crate::model::S3SetObjectAclOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_102) = &input.access_control_policy {
        let inner_writer = scope.start_el("AccessControlPolicy");
        crate::xml_ser::serialize_structure_crate_model_s3_access_control_policy(
            var_102,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_tagging_operation(
    input: &crate::model::S3SetObjectTaggingOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_103) = &input.tag_set {
        let mut inner_writer = scope.start_el("TagSet").finish();
        for list_item_104 in var_103 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_104, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_delete_object_tagging_operation(
    input: &crate::model::S3DeleteObjectTaggingOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_initiate_restore_object_operation(
    input: &crate::model::S3InitiateRestoreObjectOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_105) = &input.expiration_in_days {
        let mut inner_writer = scope.start_el("ExpirationInDays").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_105).encode());
    }
    if let Some(var_106) = &input.glacier_job_tier {
        let mut inner_writer = scope.start_el("GlacierJobTier").finish();
        inner_writer.data(var_106.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_legal_hold_operation(
    input: &crate::model::S3SetObjectLegalHoldOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_107) = &input.legal_hold {
        let inner_writer = scope.start_el("LegalHold");
        crate::xml_ser::serialize_structure_crate_model_s3_object_lock_legal_hold(
            var_107,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_set_object_retention_operation(
    input: &crate::model::S3SetObjectRetentionOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_108) = &input.bypass_governance_retention {
        let mut inner_writer = scope.start_el("BypassGovernanceRetention").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_108).encode());
    }
    if let Some(var_109) = &input.retention {
        let inner_writer = scope.start_el("Retention");
        crate::xml_ser::serialize_structure_crate_model_s3_retention(var_109, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_region(
    input: &crate::model::Region,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_110) = &input.bucket {
        let mut inner_writer = scope.start_el("Bucket").finish();
        inner_writer.data(var_110.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule(
    input: &crate::model::LifecycleRule,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_111) = &input.expiration {
        let inner_writer = scope.start_el("Expiration");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_expiration(var_111, inner_writer)?
    }
    if let Some(var_112) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_112.as_ref());
    }
    if let Some(var_113) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_filter(
            var_113,
            inner_writer,
        )?
    }
    if let Some(var_114) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_114.as_str());
    }
    if let Some(var_115) = &input.transitions {
        let mut inner_writer = scope.start_el("Transitions").finish();
        for list_item_116 in var_115 {
            {
                let inner_writer = inner_writer.start_el("Transition");
                crate::xml_ser::serialize_structure_crate_model_transition(
                    list_item_116,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_117) = &input.noncurrent_version_transitions {
        let mut inner_writer = scope.start_el("NoncurrentVersionTransitions").finish();
        for list_item_118 in var_117 {
            {
                let inner_writer = inner_writer.start_el("NoncurrentVersionTransition");
                crate::xml_ser::serialize_structure_crate_model_noncurrent_version_transition(
                    list_item_118,
                    inner_writer,
                )?
            }
        }
    }
    if let Some(var_119) = &input.noncurrent_version_expiration {
        let inner_writer = scope.start_el("NoncurrentVersionExpiration");
        crate::xml_ser::serialize_structure_crate_model_noncurrent_version_expiration(
            var_119,
            inner_writer,
        )?
    }
    if let Some(var_120) = &input.abort_incomplete_multipart_upload {
        let inner_writer = scope.start_el("AbortIncompleteMultipartUpload");
        crate::xml_ser::serialize_structure_crate_model_abort_incomplete_multipart_upload(
            var_120,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_account_level(
    input: &crate::model::AccountLevel,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_121) = &input.activity_metrics {
        let inner_writer = scope.start_el("ActivityMetrics");
        crate::xml_ser::serialize_structure_crate_model_activity_metrics(var_121, inner_writer)?
    }
    if let Some(var_122) = &input.bucket_level {
        let inner_writer = scope.start_el("BucketLevel");
        crate::xml_ser::serialize_structure_crate_model_bucket_level(var_122, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_include(
    input: &crate::model::Include,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_123) = &input.buckets {
        let mut inner_writer = scope.start_el("Buckets").finish();
        for list_item_124 in var_123 {
            {
                let mut inner_writer = inner_writer.start_el("Arn").finish();
                inner_writer.data(list_item_124.as_ref());
            }
        }
    }
    if let Some(var_125) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_126 in var_125 {
            {
                let mut inner_writer = inner_writer.start_el("Region").finish();
                inner_writer.data(list_item_126.as_ref());
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_exclude(
    input: &crate::model::Exclude,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_127) = &input.buckets {
        let mut inner_writer = scope.start_el("Buckets").finish();
        for list_item_128 in var_127 {
            {
                let mut inner_writer = inner_writer.start_el("Arn").finish();
                inner_writer.data(list_item_128.as_ref());
            }
        }
    }
    if let Some(var_129) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_130 in var_129 {
            {
                let mut inner_writer = inner_writer.start_el("Region").finish();
                inner_writer.data(list_item_130.as_ref());
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_data_export(
    input: &crate::model::StorageLensDataExport,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_131) = &input.s3_bucket_destination {
        let inner_writer = scope.start_el("S3BucketDestination");
        crate::xml_ser::serialize_structure_crate_model_s3_bucket_destination(
            var_131,
            inner_writer,
        )?
    }
    if let Some(var_132) = &input.cloud_watch_metrics {
        let inner_writer = scope.start_el("CloudWatchMetrics");
        crate::xml_ser::serialize_structure_crate_model_cloud_watch_metrics(var_132, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_aws_org(
    input: &crate::model::StorageLensAwsOrg,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_133) = &input.arn {
        let mut inner_writer = scope.start_el("Arn").finish();
        inner_writer.data(var_133.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_union_crate_model_object_lambda_content_transformation(
    input: &crate::model::ObjectLambdaContentTransformation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::ObjectLambdaContentTransformation::AwsLambda(inner) => {
            let inner_writer = scope_writer.start_el("AwsLambda");
            crate::xml_ser::serialize_structure_crate_model_aws_lambda_transformation(
                inner,
                inner_writer,
            )?
        }
        crate::model::ObjectLambdaContentTransformation::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "ObjectLambdaContentTransformation",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_grant(
    input: &crate::model::S3Grant,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_134) = &input.grantee {
        let inner_writer = scope.start_el("Grantee");
        crate::xml_ser::serialize_structure_crate_model_s3_grantee(var_134, inner_writer)?
    }
    if let Some(var_135) = &input.permission {
        let mut inner_writer = scope.start_el("Permission").finish();
        inner_writer.data(var_135.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_metadata(
    input: &crate::model::S3ObjectMetadata,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_136) = &input.cache_control {
        let mut inner_writer = scope.start_el("CacheControl").finish();
        inner_writer.data(var_136.as_ref());
    }
    if let Some(var_137) = &input.content_disposition {
        let mut inner_writer = scope.start_el("ContentDisposition").finish();
        inner_writer.data(var_137.as_ref());
    }
    if let Some(var_138) = &input.content_encoding {
        let mut inner_writer = scope.start_el("ContentEncoding").finish();
        inner_writer.data(var_138.as_ref());
    }
    if let Some(var_139) = &input.content_language {
        let mut inner_writer = scope.start_el("ContentLanguage").finish();
        inner_writer.data(var_139.as_ref());
    }
    if let Some(var_140) = &input.user_metadata {
        let mut inner_writer = scope.start_el("UserMetadata").finish();
        for (key_141, value_142) in var_140 {
            let mut entry = inner_writer.start_el("entry").finish();
            {
                let mut inner_writer = entry.start_el("key").finish();
                inner_writer.data(key_141.as_ref());
            }
            {
                let mut inner_writer = entry.start_el("value").finish();
                inner_writer.data(value_142.as_ref());
            }
        }
    }
    if let Some(var_143) = &input.content_length {
        let mut inner_writer = scope.start_el("ContentLength").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_143).encode());
    }
    if let Some(var_144) = &input.content_md5 {
        let mut inner_writer = scope.start_el("ContentMD5").finish();
        inner_writer.data(var_144.as_ref());
    }
    if let Some(var_145) = &input.content_type {
        let mut inner_writer = scope.start_el("ContentType").finish();
        inner_writer.data(var_145.as_ref());
    }
    if let Some(var_146) = &input.http_expires_date {
        let mut inner_writer = scope.start_el("HttpExpiresDate").finish();
        inner_writer.data(
            var_146
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.requester_charged {
        let mut inner_writer = scope.start_el("RequesterCharged").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.requester_charged).encode());
    }
    if let Some(var_147) = &input.sse_algorithm {
        let mut inner_writer = scope.start_el("SSEAlgorithm").finish();
        inner_writer.data(var_147.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_access_control_policy(
    input: &crate::model::S3AccessControlPolicy,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_148) = &input.access_control_list {
        let inner_writer = scope.start_el("AccessControlList");
        crate::xml_ser::serialize_structure_crate_model_s3_access_control_list(
            var_148,
            inner_writer,
        )?
    }
    if let Some(var_149) = &input.canned_access_control_list {
        let mut inner_writer = scope.start_el("CannedAccessControlList").finish();
        inner_writer.data(var_149.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_lock_legal_hold(
    input: &crate::model::S3ObjectLockLegalHold,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_150) = &input.status {
        let mut inner_writer = scope.start_el("Status").finish();
        inner_writer.data(var_150.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_retention(
    input: &crate::model::S3Retention,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_151) = &input.retain_until_date {
        let mut inner_writer = scope.start_el("RetainUntilDate").finish();
        inner_writer.data(
            var_151
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if let Some(var_152) = &input.mode {
        let mut inner_writer = scope.start_el("Mode").finish();
        inner_writer.data(var_152.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_expiration(
    input: &crate::model::LifecycleExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_153) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_153
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if input.expired_object_delete_marker {
        let mut inner_writer = scope.start_el("ExpiredObjectDeleteMarker").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.expired_object_delete_marker).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_filter(
    input: &crate::model::LifecycleRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_154) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_154.as_ref());
    }
    if let Some(var_155) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::xml_ser::serialize_structure_crate_model_s3_tag(var_155, inner_writer)?
    }
    if let Some(var_156) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::xml_ser::serialize_structure_crate_model_lifecycle_rule_and_operator(
            var_156,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_transition(
    input: &crate::model::Transition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_157) = &input.date {
        let mut inner_writer = scope.start_el("Date").finish();
        inner_writer.data(
            var_157
                .fmt(aws_smithy_types::date_time::Format::DateTime)?
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope.start_el("Days").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_158) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_158.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_transition(
    input: &crate::model::NoncurrentVersionTransition,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if let Some(var_159) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_159.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_noncurrent_version_expiration(
    input: &crate::model::NoncurrentVersionExpiration,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope.start_el("NoncurrentDays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_abort_incomplete_multipart_upload(
    input: &crate::model::AbortIncompleteMultipartUpload,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days_after_initiation != 0 {
        let mut inner_writer = scope.start_el("DaysAfterInitiation").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.days_after_initiation).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_activity_metrics(
    input: &crate::model::ActivityMetrics,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_bucket_level(
    input: &crate::model::BucketLevel,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_160) = &input.activity_metrics {
        let inner_writer = scope.start_el("ActivityMetrics");
        crate::xml_ser::serialize_structure_crate_model_activity_metrics(var_160, inner_writer)?
    }
    if let Some(var_161) = &input.prefix_level {
        let inner_writer = scope.start_el("PrefixLevel");
        crate::xml_ser::serialize_structure_crate_model_prefix_level(var_161, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_bucket_destination(
    input: &crate::model::S3BucketDestination,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_162) = &input.format {
        let mut inner_writer = scope.start_el("Format").finish();
        inner_writer.data(var_162.as_str());
    }
    if let Some(var_163) = &input.output_schema_version {
        let mut inner_writer = scope.start_el("OutputSchemaVersion").finish();
        inner_writer.data(var_163.as_str());
    }
    if let Some(var_164) = &input.account_id {
        let mut inner_writer = scope.start_el("AccountId").finish();
        inner_writer.data(var_164.as_ref());
    }
    if let Some(var_165) = &input.arn {
        let mut inner_writer = scope.start_el("Arn").finish();
        inner_writer.data(var_165.as_ref());
    }
    if let Some(var_166) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_166.as_ref());
    }
    if let Some(var_167) = &input.encryption {
        let inner_writer = scope.start_el("Encryption");
        crate::xml_ser::serialize_structure_crate_model_storage_lens_data_export_encryption(
            var_167,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_metrics(
    input: &crate::model::CloudWatchMetrics,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_aws_lambda_transformation(
    input: &crate::model::AwsLambdaTransformation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_168) = &input.function_arn {
        let mut inner_writer = scope.start_el("FunctionArn").finish();
        inner_writer.data(var_168.as_ref());
    }
    if let Some(var_169) = &input.function_payload {
        let mut inner_writer = scope.start_el("FunctionPayload").finish();
        inner_writer.data(var_169.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_grantee(
    input: &crate::model::S3Grantee,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_170) = &input.type_identifier {
        let mut inner_writer = scope.start_el("TypeIdentifier").finish();
        inner_writer.data(var_170.as_str());
    }
    if let Some(var_171) = &input.identifier {
        let mut inner_writer = scope.start_el("Identifier").finish();
        inner_writer.data(var_171.as_ref());
    }
    if let Some(var_172) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_172.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_access_control_list(
    input: &crate::model::S3AccessControlList,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_173) = &input.owner {
        let inner_writer = scope.start_el("Owner");
        crate::xml_ser::serialize_structure_crate_model_s3_object_owner(var_173, inner_writer)?
    }
    if let Some(var_174) = &input.grants {
        let mut inner_writer = scope.start_el("Grants").finish();
        for list_item_175 in var_174 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_grant(
                    list_item_175,
                    inner_writer,
                )?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_lifecycle_rule_and_operator(
    input: &crate::model::LifecycleRuleAndOperator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_176) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_176.as_ref());
    }
    if let Some(var_177) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_178 in var_177 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::xml_ser::serialize_structure_crate_model_s3_tag(list_item_178, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_prefix_level(
    input: &crate::model::PrefixLevel,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_179) = &input.storage_metrics {
        let inner_writer = scope.start_el("StorageMetrics");
        crate::xml_ser::serialize_structure_crate_model_prefix_level_storage_metrics(
            var_179,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_storage_lens_data_export_encryption(
    input: &crate::model::StorageLensDataExportEncryption,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_180) = &input.sses3 {
        let inner_writer = scope.start_el("SSE-S3");
        crate::xml_ser::serialize_structure_crate_model_sses3(var_180, inner_writer)?
    }
    if let Some(var_181) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::xml_ser::serialize_structure_crate_model_ssekms(var_181, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_s3_object_owner(
    input: &crate::model::S3ObjectOwner,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_182) = &input.id {
        let mut inner_writer = scope.start_el("ID").finish();
        inner_writer.data(var_182.as_ref());
    }
    if let Some(var_183) = &input.display_name {
        let mut inner_writer = scope.start_el("DisplayName").finish();
        inner_writer.data(var_183.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_prefix_level_storage_metrics(
    input: &crate::model::PrefixLevelStorageMetrics,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope.start_el("IsEnabled").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_184) = &input.selection_criteria {
        let inner_writer = scope.start_el("SelectionCriteria");
        crate::xml_ser::serialize_structure_crate_model_selection_criteria(var_184, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_sses3(
    input: &crate::model::Sses3,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_ssekms(
    input: &crate::model::Ssekms,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_185) = &input.key_id {
        let mut inner_writer = scope.start_el("KeyId").finish();
        inner_writer.data(var_185.as_ref());
    }
    scope.finish();
    Ok(())
}

pub fn serialize_structure_crate_model_selection_criteria(
    input: &crate::model::SelectionCriteria,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_186) = &input.delimiter {
        let mut inner_writer = scope.start_el("Delimiter").finish();
        inner_writer.data(var_186.as_ref());
    }
    if input.max_depth != 0 {
        let mut inner_writer = scope.start_el("MaxDepth").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(input.max_depth).encode());
    }
    if input.min_storage_bytes_percentage != 0.0 {
        let mut inner_writer = scope.start_el("MinStorageBytesPercentage").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.min_storage_bytes_percentage).encode(),
        );
    }
    scope.finish();
    Ok(())
}
