// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_add_thing_to_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_1);
    }
    if let Some(var_2) = &input.billing_group_name {
        object.key("billingGroupName").string(var_2);
    }
    if let Some(var_3) = &input.thing_arn {
        object.key("thingArn").string(var_3);
    }
    if let Some(var_4) = &input.thing_name {
        object.key("thingName").string(var_4);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_add_thing_to_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddThingToThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_5) = &input.thing_arn {
        object.key("thingArn").string(var_5);
    }
    if let Some(var_6) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_6);
    }
    if let Some(var_7) = &input.thing_group_name {
        object.key("thingGroupName").string(var_7);
    }
    if let Some(var_8) = &input.thing_name {
        object.key("thingName").string(var_8);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_targets_with_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateTargetsWithJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.comment {
        object.key("comment").string(var_9);
    }
    if let Some(var_10) = &input.targets {
        let mut array_11 = object.key("targets").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12);
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_attach_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_13) = &input.target {
        object.key("target").string(var_13);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_14) = &input.comment {
        object.key("comment").string(var_14);
    }
    if let Some(var_15) = &input.reason_code {
        object.key("reasonCode").string(var_15);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_cancel_job_execution_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelJobExecutionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_16) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.status_details {
        let mut object_18 = object.key("statusDetails").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19).string(value_20);
            }
        }
        object_18.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.check_name {
        object.key("checkName").string(var_21);
    }
    if let Some(var_22) = &input.client_request_token {
        object.key("clientRequestToken").string(var_22);
    }
    if let Some(var_23) = &input.description {
        object.key("description").string(var_23);
    }
    if let Some(var_24) = &input.expiration_date {
        object
            .key("expirationDate")
            .date_time(var_24, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_25) = &input.resource_identifier {
        let mut object_26 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_26,
            var_25,
        )?;
        object_26.finish();
    }
    if let Some(var_27) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_27);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_28);
    }
    if let Some(var_29) = &input.signing_disabled {
        object.key("signingDisabled").boolean(*var_29);
    }
    if let Some(var_30) = &input.status {
        object.key("status").string(var_30.as_str());
    }
    if let Some(var_31) = &input.tags {
        let mut array_32 = object.key("tags").start_array();
        for item_33 in var_31 {
            {
                let mut object_34 = array_32.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_34, item_33)?;
                object_34.finish();
            }
        }
        array_32.finish();
    }
    if let Some(var_35) = &input.token_key_name {
        object.key("tokenKeyName").string(var_35);
    }
    if let Some(var_36) = &input.token_signing_public_keys {
        let mut object_37 = object.key("tokenSigningPublicKeys").start_object();
        for (key_38, value_39) in var_36 {
            {
                object_37.key(key_38).string(value_39);
            }
        }
        object_37.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.billing_group_properties {
        let mut object_41 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_billing_group_properties(
            &mut object_41,
            var_40,
        )?;
        object_41.finish();
    }
    if let Some(var_42) = &input.tags {
        let mut array_43 = object.key("tags").start_array();
        for item_44 in var_42 {
            {
                let mut object_45 = array_43.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_45, item_44)?;
                object_45.finish();
            }
        }
        array_43.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_certificate_from_csr_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCertificateFromCsrInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.certificate_signing_request {
        object.key("certificateSigningRequest").string(var_46);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_custom_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCustomMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.client_request_token {
        object.key("clientRequestToken").string(var_47);
    }
    if let Some(var_48) = &input.display_name {
        object.key("displayName").string(var_48);
    }
    if let Some(var_49) = &input.metric_type {
        object.key("metricType").string(var_49.as_str());
    }
    if let Some(var_50) = &input.tags {
        let mut array_51 = object.key("tags").start_array();
        for item_52 in var_50 {
            {
                let mut object_53 = array_51.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_53, item_52)?;
                object_53.finish();
            }
        }
        array_51.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dimension_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDimensionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.client_request_token {
        object.key("clientRequestToken").string(var_54);
    }
    if let Some(var_55) = &input.string_values {
        let mut array_56 = object.key("stringValues").start_array();
        for item_57 in var_55 {
            {
                array_56.value().string(item_57);
            }
        }
        array_56.finish();
    }
    if let Some(var_58) = &input.tags {
        let mut array_59 = object.key("tags").start_array();
        for item_60 in var_58 {
            {
                let mut object_61 = array_59.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_61, item_60)?;
                object_61.finish();
            }
        }
        array_59.finish();
    }
    if let Some(var_62) = &input.r#type {
        object.key("type").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_domain_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDomainConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.authorizer_config {
        let mut object_64 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorizer_config(&mut object_64, var_63)?;
        object_64.finish();
    }
    if let Some(var_65) = &input.domain_name {
        object.key("domainName").string(var_65);
    }
    if let Some(var_66) = &input.server_certificate_arns {
        let mut array_67 = object.key("serverCertificateArns").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68);
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.service_type {
        object.key("serviceType").string(var_69.as_str());
    }
    if let Some(var_70) = &input.tags {
        let mut array_71 = object.key("tags").start_array();
        for item_72 in var_70 {
            {
                let mut object_73 = array_71.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_73, item_72)?;
                object_73.finish();
            }
        }
        array_71.finish();
    }
    if let Some(var_74) = &input.validation_certificate_arn {
        object.key("validationCertificateArn").string(var_74);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_dynamic_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDynamicThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.index_name {
        object.key("indexName").string(var_75);
    }
    if let Some(var_76) = &input.query_string {
        object.key("queryString").string(var_76);
    }
    if let Some(var_77) = &input.query_version {
        object.key("queryVersion").string(var_77);
    }
    if let Some(var_78) = &input.tags {
        let mut array_79 = object.key("tags").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_81, item_80)?;
                object_81.finish();
            }
        }
        array_79.finish();
    }
    if let Some(var_82) = &input.thing_group_properties {
        let mut object_83 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_83,
            var_82,
        )?;
        object_83.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_84) = &input.aggregation_field {
        object.key("aggregationField").string(var_84);
    }
    if let Some(var_85) = &input.aggregation_type {
        let mut object_86 = object.key("aggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_type(&mut object_86, var_85)?;
        object_86.finish();
    }
    if let Some(var_87) = &input.description {
        object.key("description").string(var_87);
    }
    if let Some(var_88) = &input.index_name {
        object.key("indexName").string(var_88);
    }
    if let Some(var_89) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_89).into()),
        );
    }
    if let Some(var_90) = &input.query_string {
        object.key("queryString").string(var_90);
    }
    if let Some(var_91) = &input.query_version {
        object.key("queryVersion").string(var_91);
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94)?;
                object_95.finish();
            }
        }
        array_93.finish();
    }
    if let Some(var_96) = &input.unit {
        object.key("unit").string(var_96.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.abort_config {
        let mut object_98 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.description {
        object.key("description").string(var_99);
    }
    if let Some(var_100) = &input.document {
        object.key("document").string(var_100);
    }
    if let Some(var_101) = &input.document_parameters {
        let mut object_102 = object.key("documentParameters").start_object();
        for (key_103, value_104) in var_101 {
            {
                object_102.key(key_103).string(value_104);
            }
        }
        object_102.finish();
    }
    if let Some(var_105) = &input.document_source {
        object.key("documentSource").string(var_105);
    }
    if let Some(var_106) = &input.job_executions_rollout_config {
        let mut object_107 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_107,
            var_106,
        )?;
        object_107.finish();
    }
    if let Some(var_108) = &input.job_template_arn {
        object.key("jobTemplateArn").string(var_108);
    }
    if let Some(var_109) = &input.namespace_id {
        object.key("namespaceId").string(var_109);
    }
    if let Some(var_110) = &input.presigned_url_config {
        let mut object_111 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_111,
            var_110,
        )?;
        object_111.finish();
    }
    if let Some(var_112) = &input.tags {
        let mut array_113 = object.key("tags").start_array();
        for item_114 in var_112 {
            {
                let mut object_115 = array_113.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_115, item_114)?;
                object_115.finish();
            }
        }
        array_113.finish();
    }
    if let Some(var_116) = &input.target_selection {
        object.key("targetSelection").string(var_116.as_str());
    }
    if let Some(var_117) = &input.targets {
        let mut array_118 = object.key("targets").start_array();
        for item_119 in var_117 {
            {
                array_118.value().string(item_119);
            }
        }
        array_118.finish();
    }
    if let Some(var_120) = &input.timeout_config {
        let mut object_121 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_121, var_120)?;
        object_121.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_job_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateJobTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_122) = &input.abort_config {
        let mut object_123 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_123, var_122)?;
        object_123.finish();
    }
    if let Some(var_124) = &input.description {
        object.key("description").string(var_124);
    }
    if let Some(var_125) = &input.document {
        object.key("document").string(var_125);
    }
    if let Some(var_126) = &input.document_source {
        object.key("documentSource").string(var_126);
    }
    if let Some(var_127) = &input.job_arn {
        object.key("jobArn").string(var_127);
    }
    if let Some(var_128) = &input.job_executions_rollout_config {
        let mut object_129 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_129,
            var_128,
        )?;
        object_129.finish();
    }
    if let Some(var_130) = &input.presigned_url_config {
        let mut object_131 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    if let Some(var_132) = &input.tags {
        let mut array_133 = object.key("tags").start_array();
        for item_134 in var_132 {
            {
                let mut object_135 = array_133.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_135, item_134)?;
                object_135.finish();
            }
        }
        array_133.finish();
    }
    if let Some(var_136) = &input.timeout_config {
        let mut object_137 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_137, var_136)?;
        object_137.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_mitigation_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMitigationActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.action_params {
        let mut object_139 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_crate_model_mitigation_action_params(
            &mut object_139,
            var_138,
        )?;
        object_139.finish();
    }
    if let Some(var_140) = &input.role_arn {
        object.key("roleArn").string(var_140);
    }
    if let Some(var_141) = &input.tags {
        let mut array_142 = object.key("tags").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_144, item_143)?;
                object_144.finish();
            }
        }
        array_142.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_ota_update_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOtaUpdateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_145) = &input.additional_parameters {
        let mut object_146 = object.key("additionalParameters").start_object();
        for (key_147, value_148) in var_145 {
            {
                object_146.key(key_147).string(value_148);
            }
        }
        object_146.finish();
    }
    if let Some(var_149) = &input.aws_job_abort_config {
        let mut object_150 = object.key("awsJobAbortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_abort_config(
            &mut object_150,
            var_149,
        )?;
        object_150.finish();
    }
    if let Some(var_151) = &input.aws_job_executions_rollout_config {
        let mut object_152 = object.key("awsJobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_executions_rollout_config(
            &mut object_152,
            var_151,
        )?;
        object_152.finish();
    }
    if let Some(var_153) = &input.aws_job_presigned_url_config {
        let mut object_154 = object.key("awsJobPresignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_presigned_url_config(
            &mut object_154,
            var_153,
        )?;
        object_154.finish();
    }
    if let Some(var_155) = &input.aws_job_timeout_config {
        let mut object_156 = object.key("awsJobTimeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_timeout_config(
            &mut object_156,
            var_155,
        )?;
        object_156.finish();
    }
    if let Some(var_157) = &input.description {
        object.key("description").string(var_157);
    }
    if let Some(var_158) = &input.files {
        let mut array_159 = object.key("files").start_array();
        for item_160 in var_158 {
            {
                let mut object_161 = array_159.value().start_object();
                crate::json_ser::serialize_structure_crate_model_ota_update_file(
                    &mut object_161,
                    item_160,
                )?;
                object_161.finish();
            }
        }
        array_159.finish();
    }
    if let Some(var_162) = &input.protocols {
        let mut array_163 = object.key("protocols").start_array();
        for item_164 in var_162 {
            {
                array_163.value().string(item_164.as_str());
            }
        }
        array_163.finish();
    }
    if let Some(var_165) = &input.role_arn {
        object.key("roleArn").string(var_165);
    }
    if let Some(var_166) = &input.tags {
        let mut array_167 = object.key("tags").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_169, item_168)?;
                object_169.finish();
            }
        }
        array_167.finish();
    }
    if let Some(var_170) = &input.target_selection {
        object.key("targetSelection").string(var_170.as_str());
    }
    if let Some(var_171) = &input.targets {
        let mut array_172 = object.key("targets").start_array();
        for item_173 in var_171 {
            {
                array_172.value().string(item_173);
            }
        }
        array_172.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_174) = &input.policy_document {
        object.key("policyDocument").string(var_174);
    }
    if let Some(var_175) = &input.tags {
        let mut array_176 = object.key("tags").start_array();
        for item_177 in var_175 {
            {
                let mut object_178 = array_176.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_178, item_177)?;
                object_178.finish();
            }
        }
        array_176.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_policy_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePolicyVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.policy_document {
        object.key("policyDocument").string(var_179);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_180) = &input.description {
        object.key("description").string(var_180);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_181) = &input.pre_provisioning_hook {
        let mut object_182 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_hook(
            &mut object_182,
            var_181,
        )?;
        object_182.finish();
    }
    if let Some(var_183) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_183);
    }
    if let Some(var_184) = &input.tags {
        let mut array_185 = object.key("tags").start_array();
        for item_186 in var_184 {
            {
                let mut object_187 = array_185.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_187, item_186)?;
                object_187.finish();
            }
        }
        array_185.finish();
    }
    if let Some(var_188) = &input.template_body {
        object.key("templateBody").string(var_188);
    }
    if let Some(var_189) = &input.template_name {
        object.key("templateName").string(var_189);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_provisioning_template_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateProvisioningTemplateVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.template_body {
        object.key("templateBody").string(var_190);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_role_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRoleAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_191) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.role_arn {
        object.key("roleArn").string(var_192);
    }
    if let Some(var_193) = &input.tags {
        let mut array_194 = object.key("tags").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_196, item_195)?;
                object_196.finish();
            }
        }
        array_194.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_scheduled_audit_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateScheduledAuditInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_197) = &input.day_of_month {
        object.key("dayOfMonth").string(var_197);
    }
    if let Some(var_198) = &input.day_of_week {
        object.key("dayOfWeek").string(var_198.as_str());
    }
    if let Some(var_199) = &input.frequency {
        object.key("frequency").string(var_199.as_str());
    }
    if let Some(var_200) = &input.tags {
        let mut array_201 = object.key("tags").start_array();
        for item_202 in var_200 {
            {
                let mut object_203 = array_201.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_203, item_202)?;
                object_203.finish();
            }
        }
        array_201.finish();
    }
    if let Some(var_204) = &input.target_check_names {
        let mut array_205 = object.key("targetCheckNames").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206);
            }
        }
        array_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_207) = &input.additional_metrics_to_retain {
        let mut array_208 = object.key("additionalMetricsToRetain").start_array();
        for item_209 in var_207 {
            {
                array_208.value().string(item_209);
            }
        }
        array_208.finish();
    }
    if let Some(var_210) = &input.additional_metrics_to_retain_v2 {
        let mut array_211 = object.key("additionalMetricsToRetainV2").start_array();
        for item_212 in var_210 {
            {
                let mut object_213 = array_211.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_to_retain(
                    &mut object_213,
                    item_212,
                )?;
                object_213.finish();
            }
        }
        array_211.finish();
    }
    if let Some(var_214) = &input.alert_targets {
        let mut object_215 = object.key("alertTargets").start_object();
        for (key_216, value_217) in var_214 {
            {
                let mut object_218 = object_215.key(key_216.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_alert_target(
                    &mut object_218,
                    value_217,
                )?;
                object_218.finish();
            }
        }
        object_215.finish();
    }
    if let Some(var_219) = &input.behaviors {
        let mut array_220 = object.key("behaviors").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_222,
                    item_221,
                )?;
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_223);
    }
    if let Some(var_224) = &input.tags {
        let mut array_225 = object.key("tags").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_227, item_226)?;
                object_227.finish();
            }
        }
        array_225.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_stream_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStreamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_228) = &input.description {
        object.key("description").string(var_228);
    }
    if let Some(var_229) = &input.files {
        let mut array_230 = object.key("files").start_array();
        for item_231 in var_229 {
            {
                let mut object_232 = array_230.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stream_file(
                    &mut object_232,
                    item_231,
                )?;
                object_232.finish();
            }
        }
        array_230.finish();
    }
    if let Some(var_233) = &input.role_arn {
        object.key("roleArn").string(var_233);
    }
    if let Some(var_234) = &input.tags {
        let mut array_235 = object.key("tags").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_237, item_236)?;
                object_237.finish();
            }
        }
        array_235.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.attribute_payload {
        let mut object_239 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_239,
            var_238,
        )?;
        object_239.finish();
    }
    if let Some(var_240) = &input.billing_group_name {
        object.key("billingGroupName").string(var_240);
    }
    if let Some(var_241) = &input.thing_type_name {
        object.key("thingTypeName").string(var_241);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.parent_group_name {
        object.key("parentGroupName").string(var_242);
    }
    if let Some(var_243) = &input.tags {
        let mut array_244 = object.key("tags").start_array();
        for item_245 in var_243 {
            {
                let mut object_246 = array_244.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_246, item_245)?;
                object_246.finish();
            }
        }
        array_244.finish();
    }
    if let Some(var_247) = &input.thing_group_properties {
        let mut object_248 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_248,
            var_247,
        )?;
        object_248.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_thing_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateThingTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_249) = &input.tags {
        let mut array_250 = object.key("tags").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_252, item_251)?;
                object_252.finish();
            }
        }
        array_250.finish();
    }
    if let Some(var_253) = &input.thing_type_properties {
        let mut object_254 = object.key("thingTypeProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_type_properties(
            &mut object_254,
            var_253,
        )?;
        object_254.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_topic_rule_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTopicRuleDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_255) = &input.destination_configuration {
        let mut object_256 = object.key("destinationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_topic_rule_destination_configuration(
            &mut object_256,
            var_255,
        )?;
        object_256.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_257) = &input.check_name {
        object.key("checkName").string(var_257);
    }
    if let Some(var_258) = &input.resource_identifier {
        let mut object_259 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_259,
            var_258,
        )?;
        object_259.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_deprecate_thing_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeprecateThingTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.undo_deprecate {
        object.key("undoDeprecate").boolean(input.undo_deprecate);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_260) = &input.check_name {
        object.key("checkName").string(var_260);
    }
    if let Some(var_261) = &input.resource_identifier {
        let mut object_262 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_262,
            var_261,
        )?;
        object_262.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_detach_policy_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachPolicyInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_263) = &input.target {
        object.key("target").string(var_263);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_buckets_aggregation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetBucketsAggregationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_264) = &input.aggregation_field {
        object.key("aggregationField").string(var_264);
    }
    if let Some(var_265) = &input.buckets_aggregation_type {
        let mut object_266 = object.key("bucketsAggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_buckets_aggregation_type(
            &mut object_266,
            var_265,
        )?;
        object_266.finish();
    }
    if let Some(var_267) = &input.index_name {
        object.key("indexName").string(var_267);
    }
    if let Some(var_268) = &input.query_string {
        object.key("queryString").string(var_268);
    }
    if let Some(var_269) = &input.query_version {
        object.key("queryVersion").string(var_269);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_cardinality_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetCardinalityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_270) = &input.aggregation_field {
        object.key("aggregationField").string(var_270);
    }
    if let Some(var_271) = &input.index_name {
        object.key("indexName").string(var_271);
    }
    if let Some(var_272) = &input.query_string {
        object.key("queryString").string(var_272);
    }
    if let Some(var_273) = &input.query_version {
        object.key("queryVersion").string(var_273);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_effective_policies_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetEffectivePoliciesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_274) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_274);
    }
    if let Some(var_275) = &input.principal {
        object.key("principal").string(var_275);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_percentiles_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetPercentilesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_276) = &input.aggregation_field {
        object.key("aggregationField").string(var_276);
    }
    if let Some(var_277) = &input.index_name {
        object.key("indexName").string(var_277);
    }
    if let Some(var_278) = &input.percents {
        let mut array_279 = object.key("percents").start_array();
        for item_280 in var_278 {
            {
                array_279.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_280).into()),
                );
            }
        }
        array_279.finish();
    }
    if let Some(var_281) = &input.query_string {
        object.key("queryString").string(var_281);
    }
    if let Some(var_282) = &input.query_version {
        object.key("queryVersion").string(var_282);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_get_statistics_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetStatisticsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_283) = &input.aggregation_field {
        object.key("aggregationField").string(var_283);
    }
    if let Some(var_284) = &input.index_name {
        object.key("indexName").string(var_284);
    }
    if let Some(var_285) = &input.query_string {
        object.key("queryString").string(var_285);
    }
    if let Some(var_286) = &input.query_version {
        object.key("queryVersion").string(var_286);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_audit_findings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditFindingsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_287) = &input.check_name {
        object.key("checkName").string(var_287);
    }
    if let Some(var_288) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_288, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if input.list_suppressed_findings {
        object
            .key("listSuppressedFindings")
            .boolean(input.list_suppressed_findings);
    }
    if let Some(var_289) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_289).into()),
        );
    }
    if let Some(var_290) = &input.next_token {
        object.key("nextToken").string(var_290);
    }
    if let Some(var_291) = &input.resource_identifier {
        let mut object_292 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_292,
            var_291,
        )?;
        object_292.finish();
    }
    if let Some(var_293) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_293, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_294) = &input.task_id {
        object.key("taskId").string(var_294);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_audit_suppressions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAuditSuppressionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.ascending_order {
        object.key("ascendingOrder").boolean(input.ascending_order);
    }
    if let Some(var_295) = &input.check_name {
        object.key("checkName").string(var_295);
    }
    if let Some(var_296) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_296).into()),
        );
    }
    if let Some(var_297) = &input.next_token {
        object.key("nextToken").string(var_297);
    }
    if let Some(var_298) = &input.resource_identifier {
        let mut object_299 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_299,
            var_298,
        )?;
        object_299.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_verification_state_on_violation_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutVerificationStateOnViolationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_300) = &input.verification_state {
        object.key("verificationState").string(var_300.as_str());
    }
    if let Some(var_301) = &input.verification_state_description {
        object.key("verificationStateDescription").string(var_301);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_ca_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCaCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_302) = &input.ca_certificate {
        object.key("caCertificate").string(var_302);
    }
    if let Some(var_303) = &input.registration_config {
        let mut object_304 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_registration_config(
            &mut object_304,
            var_303,
        )?;
        object_304.finish();
    }
    if let Some(var_305) = &input.tags {
        let mut array_306 = object.key("tags").start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_308, item_307)?;
                object_308.finish();
            }
        }
        array_306.finish();
    }
    if let Some(var_309) = &input.verification_certificate {
        object.key("verificationCertificate").string(var_309);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_310) = &input.ca_certificate_pem {
        object.key("caCertificatePem").string(var_310);
    }
    if let Some(var_311) = &input.certificate_pem {
        object.key("certificatePem").string(var_311);
    }
    if let Some(var_312) = &input.status {
        object.key("status").string(var_312.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_certificate_without_ca_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateWithoutCaInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_313) = &input.certificate_pem {
        object.key("certificatePem").string(var_313);
    }
    if let Some(var_314) = &input.status {
        object.key("status").string(var_314.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_register_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_315) = &input.parameters {
        let mut object_316 = object.key("parameters").start_object();
        for (key_317, value_318) in var_315 {
            {
                object_316.key(key_317).string(value_318);
            }
        }
        object_316.finish();
    }
    if let Some(var_319) = &input.template_body {
        object.key("templateBody").string(var_319);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reject_certificate_transfer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectCertificateTransferInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_320) = &input.reject_reason {
        object.key("rejectReason").string(var_320);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_thing_from_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_321) = &input.billing_group_arn {
        object.key("billingGroupArn").string(var_321);
    }
    if let Some(var_322) = &input.billing_group_name {
        object.key("billingGroupName").string(var_322);
    }
    if let Some(var_323) = &input.thing_arn {
        object.key("thingArn").string(var_323);
    }
    if let Some(var_324) = &input.thing_name {
        object.key("thingName").string(var_324);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_remove_thing_from_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveThingFromThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_325) = &input.thing_arn {
        object.key("thingArn").string(var_325);
    }
    if let Some(var_326) = &input.thing_group_arn {
        object.key("thingGroupArn").string(var_326);
    }
    if let Some(var_327) = &input.thing_group_name {
        object.key("thingGroupName").string(var_327);
    }
    if let Some(var_328) = &input.thing_name {
        object.key("thingName").string(var_328);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_search_index_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SearchIndexInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_329) = &input.index_name {
        object.key("indexName").string(var_329);
    }
    if let Some(var_330) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_330).into()),
        );
    }
    if let Some(var_331) = &input.next_token {
        object.key("nextToken").string(var_331);
    }
    if let Some(var_332) = &input.query_string {
        object.key("queryString").string(var_332);
    }
    if let Some(var_333) = &input.query_version {
        object.key("queryVersion").string(var_333);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_default_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetDefaultAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_334) = &input.authorizer_name {
        object.key("authorizerName").string(var_334);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_v2_logging_level_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingLevelInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_335) = &input.log_level {
        object.key("logLevel").string(var_335.as_str());
    }
    if let Some(var_336) = &input.log_target {
        let mut object_337 = object.key("logTarget").start_object();
        crate::json_ser::serialize_structure_crate_model_log_target(&mut object_337, var_336)?;
        object_337.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_v2_logging_options_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetV2LoggingOptionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_338) = &input.default_log_level {
        object.key("defaultLogLevel").string(var_338.as_str());
    }
    if input.disable_all_logs {
        object.key("disableAllLogs").boolean(input.disable_all_logs);
    }
    if let Some(var_339) = &input.role_arn {
        object.key("roleArn").string(var_339);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_audit_mitigation_actions_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAuditMitigationActionsTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_340) = &input.audit_check_to_actions_mapping {
        let mut object_341 = object.key("auditCheckToActionsMapping").start_object();
        for (key_342, value_343) in var_340 {
            {
                let mut array_344 = object_341.key(key_342).start_array();
                for item_345 in value_343 {
                    {
                        array_344.value().string(item_345);
                    }
                }
                array_344.finish();
            }
        }
        object_341.finish();
    }
    if let Some(var_346) = &input.client_request_token {
        object.key("clientRequestToken").string(var_346);
    }
    if let Some(var_347) = &input.target {
        let mut object_348 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_audit_mitigation_actions_task_target(
            &mut object_348,
            var_347,
        )?;
        object_348.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_detect_mitigation_actions_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDetectMitigationActionsTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_349) = &input.actions {
        let mut array_350 = object.key("actions").start_array();
        for item_351 in var_349 {
            {
                array_350.value().string(item_351);
            }
        }
        array_350.finish();
    }
    if let Some(var_352) = &input.client_request_token {
        object.key("clientRequestToken").string(var_352);
    }
    if let Some(var_353) = &input.include_only_active_violations {
        object.key("includeOnlyActiveViolations").boolean(*var_353);
    }
    if let Some(var_354) = &input.include_suppressed_alerts {
        object.key("includeSuppressedAlerts").boolean(*var_354);
    }
    if let Some(var_355) = &input.target {
        let mut object_356 = object.key("target").start_object();
        crate::json_ser::serialize_structure_crate_model_detect_mitigation_actions_task_target(
            &mut object_356,
            var_355,
        )?;
        object_356.finish();
    }
    if let Some(var_357) = &input.violation_event_occurrence_range {
        let mut object_358 = object.key("violationEventOccurrenceRange").start_object();
        crate::json_ser::serialize_structure_crate_model_violation_event_occurrence_range(
            &mut object_358,
            var_357,
        )?;
        object_358.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_on_demand_audit_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartOnDemandAuditTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_359) = &input.target_check_names {
        let mut array_360 = object.key("targetCheckNames").start_array();
        for item_361 in var_359 {
            {
                array_360.value().string(item_361);
            }
        }
        array_360.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_thing_registration_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartThingRegistrationTaskInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_362) = &input.input_file_bucket {
        object.key("inputFileBucket").string(var_362);
    }
    if let Some(var_363) = &input.input_file_key {
        object.key("inputFileKey").string(var_363);
    }
    if let Some(var_364) = &input.role_arn {
        object.key("roleArn").string(var_364);
    }
    if let Some(var_365) = &input.template_body {
        object.key("templateBody").string(var_365);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_366) = &input.resource_arn {
        object.key("resourceArn").string(var_366);
    }
    if let Some(var_367) = &input.tags {
        let mut array_368 = object.key("tags").start_array();
        for item_369 in var_367 {
            {
                let mut object_370 = array_368.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_370, item_369)?;
                object_370.finish();
            }
        }
        array_368.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_authorization_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestAuthorizationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_371) = &input.auth_infos {
        let mut array_372 = object.key("authInfos").start_array();
        for item_373 in var_371 {
            {
                let mut object_374 = array_372.value().start_object();
                crate::json_ser::serialize_structure_crate_model_auth_info(
                    &mut object_374,
                    item_373,
                )?;
                object_374.finish();
            }
        }
        array_372.finish();
    }
    if let Some(var_375) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_375);
    }
    if let Some(var_376) = &input.policy_names_to_add {
        let mut array_377 = object.key("policyNamesToAdd").start_array();
        for item_378 in var_376 {
            {
                array_377.value().string(item_378);
            }
        }
        array_377.finish();
    }
    if let Some(var_379) = &input.policy_names_to_skip {
        let mut array_380 = object.key("policyNamesToSkip").start_array();
        for item_381 in var_379 {
            {
                array_380.value().string(item_381);
            }
        }
        array_380.finish();
    }
    if let Some(var_382) = &input.principal {
        object.key("principal").string(var_382);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_test_invoke_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TestInvokeAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_383) = &input.http_context {
        let mut object_384 = object.key("httpContext").start_object();
        crate::json_ser::serialize_structure_crate_model_http_context(&mut object_384, var_383)?;
        object_384.finish();
    }
    if let Some(var_385) = &input.mqtt_context {
        let mut object_386 = object.key("mqttContext").start_object();
        crate::json_ser::serialize_structure_crate_model_mqtt_context(&mut object_386, var_385)?;
        object_386.finish();
    }
    if let Some(var_387) = &input.tls_context {
        let mut object_388 = object.key("tlsContext").start_object();
        crate::json_ser::serialize_structure_crate_model_tls_context(&mut object_388, var_387)?;
        object_388.finish();
    }
    if let Some(var_389) = &input.token {
        object.key("token").string(var_389);
    }
    if let Some(var_390) = &input.token_signature {
        object.key("tokenSignature").string(var_390);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_transfer_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TransferCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_391) = &input.transfer_message {
        object.key("transferMessage").string(var_391);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_392) = &input.resource_arn {
        object.key("resourceArn").string(var_392);
    }
    if let Some(var_393) = &input.tag_keys {
        let mut array_394 = object.key("tagKeys").start_array();
        for item_395 in var_393 {
            {
                array_394.value().string(item_395);
            }
        }
        array_394.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_account_audit_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAccountAuditConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_396) = &input.audit_check_configurations {
        let mut object_397 = object.key("auditCheckConfigurations").start_object();
        for (key_398, value_399) in var_396 {
            {
                let mut object_400 = object_397.key(key_398).start_object();
                crate::json_ser::serialize_structure_crate_model_audit_check_configuration(
                    &mut object_400,
                    value_399,
                )?;
                object_400.finish();
            }
        }
        object_397.finish();
    }
    if let Some(var_401) = &input.audit_notification_target_configurations {
        let mut object_402 = object
            .key("auditNotificationTargetConfigurations")
            .start_object();
        for (key_403, value_404) in var_401 {
            {
                let mut object_405 = object_402.key(key_403.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_audit_notification_target(
                    &mut object_405,
                    value_404,
                )?;
                object_405.finish();
            }
        }
        object_402.finish();
    }
    if let Some(var_406) = &input.role_arn {
        object.key("roleArn").string(var_406);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_audit_suppression_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuditSuppressionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_407) = &input.check_name {
        object.key("checkName").string(var_407);
    }
    if let Some(var_408) = &input.description {
        object.key("description").string(var_408);
    }
    if let Some(var_409) = &input.expiration_date {
        object
            .key("expirationDate")
            .date_time(var_409, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_410) = &input.resource_identifier {
        let mut object_411 = object.key("resourceIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_resource_identifier(
            &mut object_411,
            var_410,
        )?;
        object_411.finish();
    }
    if let Some(var_412) = &input.suppress_indefinitely {
        object.key("suppressIndefinitely").boolean(*var_412);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_authorizer_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuthorizerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_413) = &input.authorizer_function_arn {
        object.key("authorizerFunctionArn").string(var_413);
    }
    if let Some(var_414) = &input.status {
        object.key("status").string(var_414.as_str());
    }
    if let Some(var_415) = &input.token_key_name {
        object.key("tokenKeyName").string(var_415);
    }
    if let Some(var_416) = &input.token_signing_public_keys {
        let mut object_417 = object.key("tokenSigningPublicKeys").start_object();
        for (key_418, value_419) in var_416 {
            {
                object_417.key(key_418).string(value_419);
            }
        }
        object_417.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_billing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBillingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_420) = &input.billing_group_properties {
        let mut object_421 = object.key("billingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_billing_group_properties(
            &mut object_421,
            var_420,
        )?;
        object_421.finish();
    }
    if let Some(var_422) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_422).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_ca_certificate_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCaCertificateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_423) = &input.registration_config {
        let mut object_424 = object.key("registrationConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_registration_config(
            &mut object_424,
            var_423,
        )?;
        object_424.finish();
    }
    if input.remove_auto_registration {
        object
            .key("removeAutoRegistration")
            .boolean(input.remove_auto_registration);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_custom_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCustomMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_425) = &input.display_name {
        object.key("displayName").string(var_425);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dimension_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDimensionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_426) = &input.string_values {
        let mut array_427 = object.key("stringValues").start_array();
        for item_428 in var_426 {
            {
                array_427.value().string(item_428);
            }
        }
        array_427.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_429) = &input.authorizer_config {
        let mut object_430 = object.key("authorizerConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_authorizer_config(
            &mut object_430,
            var_429,
        )?;
        object_430.finish();
    }
    if let Some(var_431) = &input.domain_configuration_status {
        object
            .key("domainConfigurationStatus")
            .string(var_431.as_str());
    }
    if input.remove_authorizer_config {
        object
            .key("removeAuthorizerConfig")
            .boolean(input.remove_authorizer_config);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_dynamic_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDynamicThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_432) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_432).into()),
        );
    }
    if let Some(var_433) = &input.index_name {
        object.key("indexName").string(var_433);
    }
    if let Some(var_434) = &input.query_string {
        object.key("queryString").string(var_434);
    }
    if let Some(var_435) = &input.query_version {
        object.key("queryVersion").string(var_435);
    }
    if let Some(var_436) = &input.thing_group_properties {
        let mut object_437 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_437,
            var_436,
        )?;
        object_437.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_438) = &input.event_configurations {
        let mut object_439 = object.key("eventConfigurations").start_object();
        for (key_440, value_441) in var_438 {
            {
                let mut object_442 = object_439.key(key_440.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_configuration(
                    &mut object_442,
                    value_441,
                )?;
                object_442.finish();
            }
        }
        object_439.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_metric_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetMetricInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_443) = &input.aggregation_field {
        object.key("aggregationField").string(var_443);
    }
    if let Some(var_444) = &input.aggregation_type {
        let mut object_445 = object.key("aggregationType").start_object();
        crate::json_ser::serialize_structure_crate_model_aggregation_type(
            &mut object_445,
            var_444,
        )?;
        object_445.finish();
    }
    if let Some(var_446) = &input.description {
        object.key("description").string(var_446);
    }
    if let Some(var_447) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_447).into()),
        );
    }
    if let Some(var_448) = &input.index_name {
        object.key("indexName").string(var_448);
    }
    if let Some(var_449) = &input.period {
        object.key("period").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_449).into()),
        );
    }
    if let Some(var_450) = &input.query_string {
        object.key("queryString").string(var_450);
    }
    if let Some(var_451) = &input.query_version {
        object.key("queryVersion").string(var_451);
    }
    if let Some(var_452) = &input.unit {
        object.key("unit").string(var_452.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_indexing_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIndexingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_453) = &input.thing_group_indexing_configuration {
        let mut object_454 = object.key("thingGroupIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_indexing_configuration(
            &mut object_454,
            var_453,
        )?;
        object_454.finish();
    }
    if let Some(var_455) = &input.thing_indexing_configuration {
        let mut object_456 = object.key("thingIndexingConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_indexing_configuration(
            &mut object_456,
            var_455,
        )?;
        object_456.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateJobInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_457) = &input.abort_config {
        let mut object_458 = object.key("abortConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_abort_config(&mut object_458, var_457)?;
        object_458.finish();
    }
    if let Some(var_459) = &input.description {
        object.key("description").string(var_459);
    }
    if let Some(var_460) = &input.job_executions_rollout_config {
        let mut object_461 = object.key("jobExecutionsRolloutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_job_executions_rollout_config(
            &mut object_461,
            var_460,
        )?;
        object_461.finish();
    }
    if let Some(var_462) = &input.presigned_url_config {
        let mut object_463 = object.key("presignedUrlConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_presigned_url_config(
            &mut object_463,
            var_462,
        )?;
        object_463.finish();
    }
    if let Some(var_464) = &input.timeout_config {
        let mut object_465 = object.key("timeoutConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_timeout_config(&mut object_465, var_464)?;
        object_465.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_mitigation_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMitigationActionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_466) = &input.action_params {
        let mut object_467 = object.key("actionParams").start_object();
        crate::json_ser::serialize_structure_crate_model_mitigation_action_params(
            &mut object_467,
            var_466,
        )?;
        object_467.finish();
    }
    if let Some(var_468) = &input.role_arn {
        object.key("roleArn").string(var_468);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_provisioning_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateProvisioningTemplateInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_469) = &input.default_version_id {
        object.key("defaultVersionId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_469).into()),
        );
    }
    if let Some(var_470) = &input.description {
        object.key("description").string(var_470);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_471) = &input.pre_provisioning_hook {
        let mut object_472 = object.key("preProvisioningHook").start_object();
        crate::json_ser::serialize_structure_crate_model_provisioning_hook(
            &mut object_472,
            var_471,
        )?;
        object_472.finish();
    }
    if let Some(var_473) = &input.provisioning_role_arn {
        object.key("provisioningRoleArn").string(var_473);
    }
    if let Some(var_474) = &input.remove_pre_provisioning_hook {
        object.key("removePreProvisioningHook").boolean(*var_474);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_role_alias_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRoleAliasInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_475) = &input.credential_duration_seconds {
        object.key("credentialDurationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    if let Some(var_476) = &input.role_arn {
        object.key("roleArn").string(var_476);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_scheduled_audit_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateScheduledAuditInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_477) = &input.day_of_month {
        object.key("dayOfMonth").string(var_477);
    }
    if let Some(var_478) = &input.day_of_week {
        object.key("dayOfWeek").string(var_478.as_str());
    }
    if let Some(var_479) = &input.frequency {
        object.key("frequency").string(var_479.as_str());
    }
    if let Some(var_480) = &input.target_check_names {
        let mut array_481 = object.key("targetCheckNames").start_array();
        for item_482 in var_480 {
            {
                array_481.value().string(item_482);
            }
        }
        array_481.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityProfileInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_483) = &input.additional_metrics_to_retain {
        let mut array_484 = object.key("additionalMetricsToRetain").start_array();
        for item_485 in var_483 {
            {
                array_484.value().string(item_485);
            }
        }
        array_484.finish();
    }
    if let Some(var_486) = &input.additional_metrics_to_retain_v2 {
        let mut array_487 = object.key("additionalMetricsToRetainV2").start_array();
        for item_488 in var_486 {
            {
                let mut object_489 = array_487.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metric_to_retain(
                    &mut object_489,
                    item_488,
                )?;
                object_489.finish();
            }
        }
        array_487.finish();
    }
    if let Some(var_490) = &input.alert_targets {
        let mut object_491 = object.key("alertTargets").start_object();
        for (key_492, value_493) in var_490 {
            {
                let mut object_494 = object_491.key(key_492.as_str()).start_object();
                crate::json_ser::serialize_structure_crate_model_alert_target(
                    &mut object_494,
                    value_493,
                )?;
                object_494.finish();
            }
        }
        object_491.finish();
    }
    if let Some(var_495) = &input.behaviors {
        let mut array_496 = object.key("behaviors").start_array();
        for item_497 in var_495 {
            {
                let mut object_498 = array_496.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_498,
                    item_497,
                )?;
                object_498.finish();
            }
        }
        array_496.finish();
    }
    if input.delete_additional_metrics_to_retain {
        object
            .key("deleteAdditionalMetricsToRetain")
            .boolean(input.delete_additional_metrics_to_retain);
    }
    if input.delete_alert_targets {
        object
            .key("deleteAlertTargets")
            .boolean(input.delete_alert_targets);
    }
    if input.delete_behaviors {
        object
            .key("deleteBehaviors")
            .boolean(input.delete_behaviors);
    }
    if let Some(var_499) = &input.security_profile_description {
        object.key("securityProfileDescription").string(var_499);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_stream_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateStreamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_500) = &input.description {
        object.key("description").string(var_500);
    }
    if let Some(var_501) = &input.files {
        let mut array_502 = object.key("files").start_array();
        for item_503 in var_501 {
            {
                let mut object_504 = array_502.value().start_object();
                crate::json_ser::serialize_structure_crate_model_stream_file(
                    &mut object_504,
                    item_503,
                )?;
                object_504.finish();
            }
        }
        array_502.finish();
    }
    if let Some(var_505) = &input.role_arn {
        object.key("roleArn").string(var_505);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_506) = &input.attribute_payload {
        let mut object_507 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_507,
            var_506,
        )?;
        object_507.finish();
    }
    if let Some(var_508) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_508).into()),
        );
    }
    if input.remove_thing_type {
        object
            .key("removeThingType")
            .boolean(input.remove_thing_type);
    }
    if let Some(var_509) = &input.thing_type_name {
        object.key("thingTypeName").string(var_509);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_group_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_510) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_510).into()),
        );
    }
    if let Some(var_511) = &input.thing_group_properties {
        let mut object_512 = object.key("thingGroupProperties").start_object();
        crate::json_ser::serialize_structure_crate_model_thing_group_properties(
            &mut object_512,
            var_511,
        )?;
        object_512.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_thing_groups_for_thing_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateThingGroupsForThingInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    if let Some(var_513) = &input.thing_groups_to_add {
        let mut array_514 = object.key("thingGroupsToAdd").start_array();
        for item_515 in var_513 {
            {
                array_514.value().string(item_515);
            }
        }
        array_514.finish();
    }
    if let Some(var_516) = &input.thing_groups_to_remove {
        let mut array_517 = object.key("thingGroupsToRemove").start_array();
        for item_518 in var_516 {
            {
                array_517.value().string(item_518);
            }
        }
        array_517.finish();
    }
    if let Some(var_519) = &input.thing_name {
        object.key("thingName").string(var_519);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_topic_rule_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTopicRuleDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_520) = &input.arn {
        object.key("arn").string(var_520);
    }
    if let Some(var_521) = &input.status {
        object.key("status").string(var_521.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_validate_security_profile_behaviors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ValidateSecurityProfileBehaviorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_522) = &input.behaviors {
        let mut array_523 = object.key("behaviors").start_array();
        for item_524 in var_522 {
            {
                let mut object_525 = array_523.value().start_object();
                crate::json_ser::serialize_structure_crate_model_behavior(
                    &mut object_525,
                    item_524,
                )?;
                object_525.finish();
            }
        }
        array_523.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_resource_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ResourceIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_526) = &input.device_certificate_id {
        object.key("deviceCertificateId").string(var_526);
    }
    if let Some(var_527) = &input.ca_certificate_id {
        object.key("caCertificateId").string(var_527);
    }
    if let Some(var_528) = &input.cognito_identity_pool_id {
        object.key("cognitoIdentityPoolId").string(var_528);
    }
    if let Some(var_529) = &input.client_id {
        object.key("clientId").string(var_529);
    }
    if let Some(var_530) = &input.policy_version_identifier {
        let mut object_531 = object.key("policyVersionIdentifier").start_object();
        crate::json_ser::serialize_structure_crate_model_policy_version_identifier(
            &mut object_531,
            var_530,
        )?;
        object_531.finish();
    }
    if let Some(var_532) = &input.account {
        object.key("account").string(var_532);
    }
    if let Some(var_533) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_533);
    }
    if let Some(var_534) = &input.role_alias_arn {
        object.key("roleAliasArn").string(var_534);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_535) = &input.key {
        object.key("Key").string(var_535);
    }
    if let Some(var_536) = &input.value {
        object.key("Value").string(var_536);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_billing_group_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BillingGroupProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_537) = &input.billing_group_description {
        object.key("billingGroupDescription").string(var_537);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authorizer_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthorizerConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_538) = &input.default_authorizer_name {
        object.key("defaultAuthorizerName").string(var_538);
    }
    if let Some(var_539) = &input.allow_authorizer_override {
        object.key("allowAuthorizerOverride").boolean(*var_539);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_group_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_540) = &input.thing_group_description {
        object.key("thingGroupDescription").string(var_540);
    }
    if let Some(var_541) = &input.attribute_payload {
        let mut object_542 = object.key("attributePayload").start_object();
        crate::json_ser::serialize_structure_crate_model_attribute_payload(
            &mut object_542,
            var_541,
        )?;
        object_542.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aggregation_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AggregationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_543) = &input.name {
        object.key("name").string(var_543.as_str());
    }
    if let Some(var_544) = &input.values {
        let mut array_545 = object.key("values").start_array();
        for item_546 in var_544 {
            {
                array_545.value().string(item_546);
            }
        }
        array_545.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abort_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_547) = &input.criteria_list {
        let mut array_548 = object.key("criteriaList").start_array();
        for item_549 in var_547 {
            {
                let mut object_550 = array_548.value().start_object();
                crate::json_ser::serialize_structure_crate_model_abort_criteria(
                    &mut object_550,
                    item_549,
                )?;
                object_550.finish();
            }
        }
        array_548.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_job_executions_rollout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JobExecutionsRolloutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_551) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_551).into()),
        );
    }
    if let Some(var_552) = &input.exponential_rate {
        let mut object_553 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_crate_model_exponential_rollout_rate(
            &mut object_553,
            var_552,
        )?;
        object_553.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_presigned_url_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PresignedUrlConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_554) = &input.role_arn {
        object.key("roleArn").string(var_554);
    }
    if let Some(var_555) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_555).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timeout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimeoutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_556) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_556).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mitigation_action_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MitigationActionParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_557) = &input.update_device_certificate_params {
        let mut object_558 = object.key("updateDeviceCertificateParams").start_object();
        crate::json_ser::serialize_structure_crate_model_update_device_certificate_params(
            &mut object_558,
            var_557,
        )?;
        object_558.finish();
    }
    if let Some(var_559) = &input.update_ca_certificate_params {
        let mut object_560 = object.key("updateCACertificateParams").start_object();
        crate::json_ser::serialize_structure_crate_model_update_ca_certificate_params(
            &mut object_560,
            var_559,
        )?;
        object_560.finish();
    }
    if let Some(var_561) = &input.add_things_to_thing_group_params {
        let mut object_562 = object.key("addThingsToThingGroupParams").start_object();
        crate::json_ser::serialize_structure_crate_model_add_things_to_thing_group_params(
            &mut object_562,
            var_561,
        )?;
        object_562.finish();
    }
    if let Some(var_563) = &input.replace_default_policy_version_params {
        let mut object_564 = object
            .key("replaceDefaultPolicyVersionParams")
            .start_object();
        crate::json_ser::serialize_structure_crate_model_replace_default_policy_version_params(
            &mut object_564,
            var_563,
        )?;
        object_564.finish();
    }
    if let Some(var_565) = &input.enable_io_t_logging_params {
        let mut object_566 = object.key("enableIoTLoggingParams").start_object();
        crate::json_ser::serialize_structure_crate_model_enable_io_t_logging_params(
            &mut object_566,
            var_565,
        )?;
        object_566.finish();
    }
    if let Some(var_567) = &input.publish_finding_to_sns_params {
        let mut object_568 = object.key("publishFindingToSnsParams").start_object();
        crate::json_ser::serialize_structure_crate_model_publish_finding_to_sns_params(
            &mut object_568,
            var_567,
        )?;
        object_568.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_abort_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_569) = &input.abort_criteria_list {
        let mut array_570 = object.key("abortCriteriaList").start_array();
        for item_571 in var_569 {
            {
                let mut object_572 = array_570.value().start_object();
                crate::json_ser::serialize_structure_crate_model_aws_job_abort_criteria(
                    &mut object_572,
                    item_571,
                )?;
                object_572.finish();
            }
        }
        array_570.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_executions_rollout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExecutionsRolloutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_573) = &input.maximum_per_minute {
        object.key("maximumPerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_573).into()),
        );
    }
    if let Some(var_574) = &input.exponential_rate {
        let mut object_575 = object.key("exponentialRate").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_exponential_rollout_rate(
            &mut object_575,
            var_574,
        )?;
        object_575.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_presigned_url_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobPresignedUrlConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_576) = &input.expires_in_sec {
        object.key("expiresInSec").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_576).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_timeout_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobTimeoutConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_577) = &input.in_progress_timeout_in_minutes {
        object.key("inProgressTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_577).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ota_update_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OtaUpdateFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_578) = &input.file_name {
        object.key("fileName").string(var_578);
    }
    if let Some(var_579) = &input.file_type {
        object.key("fileType").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_579).into()),
        );
    }
    if let Some(var_580) = &input.file_version {
        object.key("fileVersion").string(var_580);
    }
    if let Some(var_581) = &input.file_location {
        let mut object_582 = object.key("fileLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_file_location(&mut object_582, var_581)?;
        object_582.finish();
    }
    if let Some(var_583) = &input.code_signing {
        let mut object_584 = object.key("codeSigning").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing(&mut object_584, var_583)?;
        object_584.finish();
    }
    if let Some(var_585) = &input.attributes {
        let mut object_586 = object.key("attributes").start_object();
        for (key_587, value_588) in var_585 {
            {
                object_586.key(key_587).string(value_588);
            }
        }
        object_586.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_provisioning_hook(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisioningHook,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_589) = &input.payload_version {
        object.key("payloadVersion").string(var_589);
    }
    if let Some(var_590) = &input.target_arn {
        object.key("targetArn").string(var_590);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_to_retain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricToRetain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_591) = &input.metric {
        object.key("metric").string(var_591);
    }
    if let Some(var_592) = &input.metric_dimension {
        let mut object_593 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_dimension(
            &mut object_593,
            var_592,
        )?;
        object_593.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_alert_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AlertTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_594) = &input.alert_target_arn {
        object.key("alertTargetArn").string(var_594);
    }
    if let Some(var_595) = &input.role_arn {
        object.key("roleArn").string(var_595);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_behavior(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Behavior,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_596) = &input.name {
        object.key("name").string(var_596);
    }
    if let Some(var_597) = &input.metric {
        object.key("metric").string(var_597);
    }
    if let Some(var_598) = &input.metric_dimension {
        let mut object_599 = object.key("metricDimension").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_dimension(
            &mut object_599,
            var_598,
        )?;
        object_599.finish();
    }
    if let Some(var_600) = &input.criteria {
        let mut object_601 = object.key("criteria").start_object();
        crate::json_ser::serialize_structure_crate_model_behavior_criteria(
            &mut object_601,
            var_600,
        )?;
        object_601.finish();
    }
    if let Some(var_602) = &input.suppress_alerts {
        object.key("suppressAlerts").boolean(*var_602);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream_file(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StreamFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_603) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_603).into()),
        );
    }
    if let Some(var_604) = &input.s3_location {
        let mut object_605 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_605, var_604)?;
        object_605.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_attribute_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AttributePayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_606) = &input.attributes {
        let mut object_607 = object.key("attributes").start_object();
        for (key_608, value_609) in var_606 {
            {
                object_607.key(key_608).string(value_609);
            }
        }
        object_607.finish();
    }
    if input.merge {
        object.key("merge").boolean(input.merge);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_type_properties(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingTypeProperties,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_610) = &input.thing_type_description {
        object.key("thingTypeDescription").string(var_610);
    }
    if let Some(var_611) = &input.searchable_attributes {
        let mut array_612 = object.key("searchableAttributes").start_array();
        for item_613 in var_611 {
            {
                array_612.value().string(item_613);
            }
        }
        array_612.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_rule_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRuleDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_614) = &input.http_url_configuration {
        let mut object_615 = object.key("httpUrlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_http_url_destination_configuration(
            &mut object_615,
            var_614,
        )?;
        object_615.finish();
    }
    if let Some(var_616) = &input.vpc_configuration {
        let mut object_617 = object.key("vpcConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_destination_configuration(
            &mut object_617,
            var_616,
        )?;
        object_617.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_buckets_aggregation_type(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BucketsAggregationType,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_618) = &input.terms_aggregation {
        let mut object_619 = object.key("termsAggregation").start_object();
        crate::json_ser::serialize_structure_crate_model_terms_aggregation(
            &mut object_619,
            var_618,
        )?;
        object_619.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_registration_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RegistrationConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_620) = &input.template_body {
        object.key("templateBody").string(var_620);
    }
    if let Some(var_621) = &input.role_arn {
        object.key("roleArn").string(var_621);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_log_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_622) = &input.target_type {
        object.key("targetType").string(var_622.as_str());
    }
    if let Some(var_623) = &input.target_name {
        object.key("targetName").string(var_623);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_mitigation_actions_task_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditMitigationActionsTaskTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_624) = &input.audit_task_id {
        object.key("auditTaskId").string(var_624);
    }
    if let Some(var_625) = &input.finding_ids {
        let mut array_626 = object.key("findingIds").start_array();
        for item_627 in var_625 {
            {
                array_626.value().string(item_627);
            }
        }
        array_626.finish();
    }
    if let Some(var_628) = &input.audit_check_to_reason_code_filter {
        let mut object_629 = object.key("auditCheckToReasonCodeFilter").start_object();
        for (key_630, value_631) in var_628 {
            {
                let mut array_632 = object_629.key(key_630).start_array();
                for item_633 in value_631 {
                    {
                        array_632.value().string(item_633);
                    }
                }
                array_632.finish();
            }
        }
        object_629.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_detect_mitigation_actions_task_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DetectMitigationActionsTaskTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_634) = &input.violation_ids {
        let mut array_635 = object.key("violationIds").start_array();
        for item_636 in var_634 {
            {
                array_635.value().string(item_636);
            }
        }
        array_635.finish();
    }
    if let Some(var_637) = &input.security_profile_name {
        object.key("securityProfileName").string(var_637);
    }
    if let Some(var_638) = &input.behavior_name {
        object.key("behaviorName").string(var_638);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_violation_event_occurrence_range(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ViolationEventOccurrenceRange,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_639) = &input.start_time {
        object
            .key("startTime")
            .date_time(var_639, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_640) = &input.end_time {
        object
            .key("endTime")
            .date_time(var_640, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    Ok(())
}

pub fn serialize_structure_crate_model_auth_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_641) = &input.action_type {
        object.key("actionType").string(var_641.as_str());
    }
    if let Some(var_642) = &input.resources {
        let mut array_643 = object.key("resources").start_array();
        for item_644 in var_642 {
            {
                array_643.value().string(item_644);
            }
        }
        array_643.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_645) = &input.headers {
        let mut object_646 = object.key("headers").start_object();
        for (key_647, value_648) in var_645 {
            {
                object_646.key(key_647).string(value_648);
            }
        }
        object_646.finish();
    }
    if let Some(var_649) = &input.query_string {
        object.key("queryString").string(var_649);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_mqtt_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MqttContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_650) = &input.username {
        object.key("username").string(var_650);
    }
    if let Some(var_651) = &input.password {
        object
            .key("password")
            .string_unchecked(&aws_smithy_types::base64::encode(var_651));
    }
    if let Some(var_652) = &input.client_id {
        object.key("clientId").string(var_652);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls_context(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TlsContext,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_653) = &input.server_name {
        object.key("serverName").string(var_653);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_check_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditCheckConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_audit_notification_target(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuditNotificationTarget,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_654) = &input.target_arn {
        object.key("targetArn").string(var_654);
    }
    if let Some(var_655) = &input.role_arn {
        object.key("roleArn").string(var_655);
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Configuration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("Enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_group_indexing_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingGroupIndexingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_656) = &input.thing_group_indexing_mode {
        object
            .key("thingGroupIndexingMode")
            .string(var_656.as_str());
    }
    if let Some(var_657) = &input.managed_fields {
        let mut array_658 = object.key("managedFields").start_array();
        for item_659 in var_657 {
            {
                let mut object_660 = array_658.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_660, item_659)?;
                object_660.finish();
            }
        }
        array_658.finish();
    }
    if let Some(var_661) = &input.custom_fields {
        let mut array_662 = object.key("customFields").start_array();
        for item_663 in var_661 {
            {
                let mut object_664 = array_662.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_664, item_663)?;
                object_664.finish();
            }
        }
        array_662.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_thing_indexing_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ThingIndexingConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_665) = &input.thing_indexing_mode {
        object.key("thingIndexingMode").string(var_665.as_str());
    }
    if let Some(var_666) = &input.thing_connectivity_indexing_mode {
        object
            .key("thingConnectivityIndexingMode")
            .string(var_666.as_str());
    }
    if let Some(var_667) = &input.device_defender_indexing_mode {
        object
            .key("deviceDefenderIndexingMode")
            .string(var_667.as_str());
    }
    if let Some(var_668) = &input.named_shadow_indexing_mode {
        object
            .key("namedShadowIndexingMode")
            .string(var_668.as_str());
    }
    if let Some(var_669) = &input.managed_fields {
        let mut array_670 = object.key("managedFields").start_array();
        for item_671 in var_669 {
            {
                let mut object_672 = array_670.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_672, item_671)?;
                object_672.finish();
            }
        }
        array_670.finish();
    }
    if let Some(var_673) = &input.custom_fields {
        let mut array_674 = object.key("customFields").start_array();
        for item_675 in var_673 {
            {
                let mut object_676 = array_674.value().start_object();
                crate::json_ser::serialize_structure_crate_model_field(&mut object_676, item_675)?;
                object_676.finish();
            }
        }
        array_674.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_topic_rule_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TopicRulePayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_677) = &input.sql {
        object.key("sql").string(var_677);
    }
    if let Some(var_678) = &input.description {
        object.key("description").string(var_678);
    }
    if let Some(var_679) = &input.actions {
        let mut array_680 = object.key("actions").start_array();
        for item_681 in var_679 {
            {
                let mut object_682 = array_680.value().start_object();
                crate::json_ser::serialize_structure_crate_model_action(&mut object_682, item_681)?;
                object_682.finish();
            }
        }
        array_680.finish();
    }
    if let Some(var_683) = &input.rule_disabled {
        object.key("ruleDisabled").boolean(*var_683);
    }
    if let Some(var_684) = &input.aws_iot_sql_version {
        object.key("awsIotSqlVersion").string(var_684);
    }
    if let Some(var_685) = &input.error_action {
        let mut object_686 = object.key("errorAction").start_object();
        crate::json_ser::serialize_structure_crate_model_action(&mut object_686, var_685)?;
        object_686.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_options_payload(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingOptionsPayload,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_687) = &input.role_arn {
        object.key("roleArn").string(var_687);
    }
    if let Some(var_688) = &input.log_level {
        object.key("logLevel").string(var_688.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_policy_version_identifier(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PolicyVersionIdentifier,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_689) = &input.policy_name {
        object.key("policyName").string(var_689);
    }
    if let Some(var_690) = &input.policy_version_id {
        object.key("policyVersionId").string(var_690);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_abort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AbortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_691) = &input.failure_type {
        object.key("failureType").string(var_691.as_str());
    }
    if let Some(var_692) = &input.action {
        object.key("action").string(var_692.as_str());
    }
    if let Some(var_693) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_693).into()),
        );
    }
    if let Some(var_694) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_694).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_exponential_rollout_rate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ExponentialRolloutRate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_695) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_695).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_696) = &input.rate_increase_criteria {
        let mut object_697 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_rate_increase_criteria(
            &mut object_697,
            var_696,
        )?;
        object_697.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_device_certificate_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateDeviceCertificateParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_698) = &input.action {
        object.key("action").string(var_698.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_ca_certificate_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateCaCertificateParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_699) = &input.action {
        object.key("action").string(var_699.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_add_things_to_thing_group_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AddThingsToThingGroupParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_700) = &input.thing_group_names {
        let mut array_701 = object.key("thingGroupNames").start_array();
        for item_702 in var_700 {
            {
                array_701.value().string(item_702);
            }
        }
        array_701.finish();
    }
    if input.override_dynamic_groups {
        object
            .key("overrideDynamicGroups")
            .boolean(input.override_dynamic_groups);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_replace_default_policy_version_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplaceDefaultPolicyVersionParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_703) = &input.template_name {
        object.key("templateName").string(var_703.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_enable_io_t_logging_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnableIoTLoggingParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_704) = &input.role_arn_for_logging {
        object.key("roleArnForLogging").string(var_704);
    }
    if let Some(var_705) = &input.log_level {
        object.key("logLevel").string(var_705.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_publish_finding_to_sns_params(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublishFindingToSnsParams,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_706) = &input.topic_arn {
        object.key("topicArn").string(var_706);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_abort_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobAbortCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_707) = &input.failure_type {
        object.key("failureType").string(var_707.as_str());
    }
    if let Some(var_708) = &input.action {
        object.key("action").string(var_708.as_str());
    }
    if let Some(var_709) = &input.threshold_percentage {
        object.key("thresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_709).into()),
        );
    }
    if let Some(var_710) = &input.min_number_of_executed_things {
        object.key("minNumberOfExecutedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_710).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_exponential_rollout_rate(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobExponentialRolloutRate,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_711) = &input.base_rate_per_minute {
        object.key("baseRatePerMinute").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_711).into()),
        );
    }
    {
        object.key("incrementFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((input.increment_factor).into()),
        );
    }
    if let Some(var_712) = &input.rate_increase_criteria {
        let mut object_713 = object.key("rateIncreaseCriteria").start_object();
        crate::json_ser::serialize_structure_crate_model_aws_job_rate_increase_criteria(
            &mut object_713,
            var_712,
        )?;
        object_713.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_file_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FileLocation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_714) = &input.stream {
        let mut object_715 = object.key("stream").start_object();
        crate::json_ser::serialize_structure_crate_model_stream(&mut object_715, var_714)?;
        object_715.finish();
    }
    if let Some(var_716) = &input.s3_location {
        let mut object_717 = object.key("s3Location").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_location(&mut object_717, var_716)?;
        object_717.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigning,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_718) = &input.aws_signer_job_id {
        object.key("awsSignerJobId").string(var_718);
    }
    if let Some(var_719) = &input.start_signing_job_parameter {
        let mut object_720 = object.key("startSigningJobParameter").start_object();
        crate::json_ser::serialize_structure_crate_model_start_signing_job_parameter(
            &mut object_720,
            var_719,
        )?;
        object_720.finish();
    }
    if let Some(var_721) = &input.custom_code_signing {
        let mut object_722 = object.key("customCodeSigning").start_object();
        crate::json_ser::serialize_structure_crate_model_custom_code_signing(
            &mut object_722,
            var_721,
        )?;
        object_722.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_723) = &input.dimension_name {
        object.key("dimensionName").string(var_723);
    }
    if let Some(var_724) = &input.operator {
        object.key("operator").string(var_724.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_behavior_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BehaviorCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_725) = &input.comparison_operator {
        object.key("comparisonOperator").string(var_725.as_str());
    }
    if let Some(var_726) = &input.value {
        let mut object_727 = object.key("value").start_object();
        crate::json_ser::serialize_structure_crate_model_metric_value(&mut object_727, var_726)?;
        object_727.finish();
    }
    if let Some(var_728) = &input.duration_seconds {
        object.key("durationSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_728).into()),
        );
    }
    if let Some(var_729) = &input.consecutive_datapoints_to_alarm {
        object.key("consecutiveDatapointsToAlarm").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    if let Some(var_730) = &input.consecutive_datapoints_to_clear {
        object.key("consecutiveDatapointsToClear").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_730).into()),
        );
    }
    if let Some(var_731) = &input.statistical_threshold {
        let mut object_732 = object.key("statisticalThreshold").start_object();
        crate::json_ser::serialize_structure_crate_model_statistical_threshold(
            &mut object_732,
            var_731,
        )?;
        object_732.finish();
    }
    if let Some(var_733) = &input.ml_detection_config {
        let mut object_734 = object.key("mlDetectionConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_machine_learning_detection_config(
            &mut object_734,
            var_733,
        )?;
        object_734.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Location,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_735) = &input.bucket {
        object.key("bucket").string(var_735);
    }
    if let Some(var_736) = &input.key {
        object.key("key").string(var_736);
    }
    if let Some(var_737) = &input.version {
        object.key("version").string(var_737);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_url_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpUrlDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_738) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_738);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_vpc_destination_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcDestinationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_739) = &input.subnet_ids {
        let mut array_740 = object.key("subnetIds").start_array();
        for item_741 in var_739 {
            {
                array_740.value().string(item_741);
            }
        }
        array_740.finish();
    }
    if let Some(var_742) = &input.security_groups {
        let mut array_743 = object.key("securityGroups").start_array();
        for item_744 in var_742 {
            {
                array_743.value().string(item_744);
            }
        }
        array_743.finish();
    }
    if let Some(var_745) = &input.vpc_id {
        object.key("vpcId").string(var_745);
    }
    if let Some(var_746) = &input.role_arn {
        object.key("roleArn").string(var_746);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_terms_aggregation(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TermsAggregation,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.max_buckets != 0 {
        object.key("maxBuckets").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_buckets).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_field(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Field,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_747) = &input.name {
        object.key("name").string(var_747);
    }
    if let Some(var_748) = &input.r#type {
        object.key("type").string(var_748.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_749) = &input.dynamo_db {
        let mut object_750 = object.key("dynamoDB").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_db_action(
            &mut object_750,
            var_749,
        )?;
        object_750.finish();
    }
    if let Some(var_751) = &input.dynamo_d_bv2 {
        let mut object_752 = object.key("dynamoDBv2").start_object();
        crate::json_ser::serialize_structure_crate_model_dynamo_d_bv2_action(
            &mut object_752,
            var_751,
        )?;
        object_752.finish();
    }
    if let Some(var_753) = &input.lambda {
        let mut object_754 = object.key("lambda").start_object();
        crate::json_ser::serialize_structure_crate_model_lambda_action(&mut object_754, var_753)?;
        object_754.finish();
    }
    if let Some(var_755) = &input.sns {
        let mut object_756 = object.key("sns").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_action(&mut object_756, var_755)?;
        object_756.finish();
    }
    if let Some(var_757) = &input.sqs {
        let mut object_758 = object.key("sqs").start_object();
        crate::json_ser::serialize_structure_crate_model_sqs_action(&mut object_758, var_757)?;
        object_758.finish();
    }
    if let Some(var_759) = &input.kinesis {
        let mut object_760 = object.key("kinesis").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_action(&mut object_760, var_759)?;
        object_760.finish();
    }
    if let Some(var_761) = &input.republish {
        let mut object_762 = object.key("republish").start_object();
        crate::json_ser::serialize_structure_crate_model_republish_action(
            &mut object_762,
            var_761,
        )?;
        object_762.finish();
    }
    if let Some(var_763) = &input.s3 {
        let mut object_764 = object.key("s3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_action(&mut object_764, var_763)?;
        object_764.finish();
    }
    if let Some(var_765) = &input.firehose {
        let mut object_766 = object.key("firehose").start_object();
        crate::json_ser::serialize_structure_crate_model_firehose_action(&mut object_766, var_765)?;
        object_766.finish();
    }
    if let Some(var_767) = &input.cloudwatch_metric {
        let mut object_768 = object.key("cloudwatchMetric").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_metric_action(
            &mut object_768,
            var_767,
        )?;
        object_768.finish();
    }
    if let Some(var_769) = &input.cloudwatch_alarm {
        let mut object_770 = object.key("cloudwatchAlarm").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_alarm_action(
            &mut object_770,
            var_769,
        )?;
        object_770.finish();
    }
    if let Some(var_771) = &input.cloudwatch_logs {
        let mut object_772 = object.key("cloudwatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_cloudwatch_logs_action(
            &mut object_772,
            var_771,
        )?;
        object_772.finish();
    }
    if let Some(var_773) = &input.elasticsearch {
        let mut object_774 = object.key("elasticsearch").start_object();
        crate::json_ser::serialize_structure_crate_model_elasticsearch_action(
            &mut object_774,
            var_773,
        )?;
        object_774.finish();
    }
    if let Some(var_775) = &input.salesforce {
        let mut object_776 = object.key("salesforce").start_object();
        crate::json_ser::serialize_structure_crate_model_salesforce_action(
            &mut object_776,
            var_775,
        )?;
        object_776.finish();
    }
    if let Some(var_777) = &input.iot_analytics {
        let mut object_778 = object.key("iotAnalytics").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_analytics_action(
            &mut object_778,
            var_777,
        )?;
        object_778.finish();
    }
    if let Some(var_779) = &input.iot_events {
        let mut object_780 = object.key("iotEvents").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_events_action(
            &mut object_780,
            var_779,
        )?;
        object_780.finish();
    }
    if let Some(var_781) = &input.iot_site_wise {
        let mut object_782 = object.key("iotSiteWise").start_object();
        crate::json_ser::serialize_structure_crate_model_iot_site_wise_action(
            &mut object_782,
            var_781,
        )?;
        object_782.finish();
    }
    if let Some(var_783) = &input.step_functions {
        let mut object_784 = object.key("stepFunctions").start_object();
        crate::json_ser::serialize_structure_crate_model_step_functions_action(
            &mut object_784,
            var_783,
        )?;
        object_784.finish();
    }
    if let Some(var_785) = &input.timestream {
        let mut object_786 = object.key("timestream").start_object();
        crate::json_ser::serialize_structure_crate_model_timestream_action(
            &mut object_786,
            var_785,
        )?;
        object_786.finish();
    }
    if let Some(var_787) = &input.http {
        let mut object_788 = object.key("http").start_object();
        crate::json_ser::serialize_structure_crate_model_http_action(&mut object_788, var_787)?;
        object_788.finish();
    }
    if let Some(var_789) = &input.kafka {
        let mut object_790 = object.key("kafka").start_object();
        crate::json_ser::serialize_structure_crate_model_kafka_action(&mut object_790, var_789)?;
        object_790.finish();
    }
    if let Some(var_791) = &input.open_search {
        let mut object_792 = object.key("openSearch").start_object();
        crate::json_ser::serialize_structure_crate_model_open_search_action(
            &mut object_792,
            var_791,
        )?;
        object_792.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_rate_increase_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RateIncreaseCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_793) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_793).into()),
        );
    }
    if let Some(var_794) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_794).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_aws_job_rate_increase_criteria(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AwsJobRateIncreaseCriteria,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_795) = &input.number_of_notified_things {
        object.key("numberOfNotifiedThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_795).into()),
        );
    }
    if let Some(var_796) = &input.number_of_succeeded_things {
        object.key("numberOfSucceededThings").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_796).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_stream(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Stream,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_797) = &input.stream_id {
        object.key("streamId").string(var_797);
    }
    if let Some(var_798) = &input.file_id {
        object.key("fileId").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_798).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_start_signing_job_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StartSigningJobParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_799) = &input.signing_profile_parameter {
        let mut object_800 = object.key("signingProfileParameter").start_object();
        crate::json_ser::serialize_structure_crate_model_signing_profile_parameter(
            &mut object_800,
            var_799,
        )?;
        object_800.finish();
    }
    if let Some(var_801) = &input.signing_profile_name {
        object.key("signingProfileName").string(var_801);
    }
    if let Some(var_802) = &input.destination {
        let mut object_803 = object.key("destination").start_object();
        crate::json_ser::serialize_structure_crate_model_destination(&mut object_803, var_802)?;
        object_803.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_custom_code_signing(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomCodeSigning,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_804) = &input.signature {
        let mut object_805 = object.key("signature").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_signature(
            &mut object_805,
            var_804,
        )?;
        object_805.finish();
    }
    if let Some(var_806) = &input.certificate_chain {
        let mut object_807 = object.key("certificateChain").start_object();
        crate::json_ser::serialize_structure_crate_model_code_signing_certificate_chain(
            &mut object_807,
            var_806,
        )?;
        object_807.finish();
    }
    if let Some(var_808) = &input.hash_algorithm {
        object.key("hashAlgorithm").string(var_808);
    }
    if let Some(var_809) = &input.signature_algorithm {
        object.key("signatureAlgorithm").string(var_809);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_metric_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MetricValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_810) = &input.count {
        object.key("count").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_810).into()),
        );
    }
    if let Some(var_811) = &input.cidrs {
        let mut array_812 = object.key("cidrs").start_array();
        for item_813 in var_811 {
            {
                array_812.value().string(item_813);
            }
        }
        array_812.finish();
    }
    if let Some(var_814) = &input.ports {
        let mut array_815 = object.key("ports").start_array();
        for item_816 in var_814 {
            {
                array_815.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_816).into()),
                );
            }
        }
        array_815.finish();
    }
    if let Some(var_817) = &input.number {
        object.key("number").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::Float((*var_817).into()),
        );
    }
    if let Some(var_818) = &input.numbers {
        let mut array_819 = object.key("numbers").start_array();
        for item_820 in var_818 {
            {
                array_819.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::Float((*item_820).into()),
                );
            }
        }
        array_819.finish();
    }
    if let Some(var_821) = &input.strings {
        let mut array_822 = object.key("strings").start_array();
        for item_823 in var_821 {
            {
                array_822.value().string(item_823);
            }
        }
        array_822.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_statistical_threshold(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StatisticalThreshold,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_824) = &input.statistic {
        object.key("statistic").string(var_824);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_machine_learning_detection_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MachineLearningDetectionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_825) = &input.confidence_level {
        object.key("confidenceLevel").string(var_825.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_db_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDbAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_826) = &input.table_name {
        object.key("tableName").string(var_826);
    }
    if let Some(var_827) = &input.role_arn {
        object.key("roleArn").string(var_827);
    }
    if let Some(var_828) = &input.operation {
        object.key("operation").string(var_828);
    }
    if let Some(var_829) = &input.hash_key_field {
        object.key("hashKeyField").string(var_829);
    }
    if let Some(var_830) = &input.hash_key_value {
        object.key("hashKeyValue").string(var_830);
    }
    if let Some(var_831) = &input.hash_key_type {
        object.key("hashKeyType").string(var_831.as_str());
    }
    if let Some(var_832) = &input.range_key_field {
        object.key("rangeKeyField").string(var_832);
    }
    if let Some(var_833) = &input.range_key_value {
        object.key("rangeKeyValue").string(var_833);
    }
    if let Some(var_834) = &input.range_key_type {
        object.key("rangeKeyType").string(var_834.as_str());
    }
    if let Some(var_835) = &input.payload_field {
        object.key("payloadField").string(var_835);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_dynamo_d_bv2_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DynamoDBv2Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_836) = &input.role_arn {
        object.key("roleArn").string(var_836);
    }
    if let Some(var_837) = &input.put_item {
        let mut object_838 = object.key("putItem").start_object();
        crate::json_ser::serialize_structure_crate_model_put_item_input(&mut object_838, var_837)?;
        object_838.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_lambda_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_839) = &input.function_arn {
        object.key("functionArn").string(var_839);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_840) = &input.target_arn {
        object.key("targetArn").string(var_840);
    }
    if let Some(var_841) = &input.role_arn {
        object.key("roleArn").string(var_841);
    }
    if let Some(var_842) = &input.message_format {
        object.key("messageFormat").string(var_842.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sqs_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_843) = &input.role_arn {
        object.key("roleArn").string(var_843);
    }
    if let Some(var_844) = &input.queue_url {
        object.key("queueUrl").string(var_844);
    }
    if let Some(var_845) = &input.use_base64 {
        object.key("useBase64").boolean(*var_845);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_846) = &input.role_arn {
        object.key("roleArn").string(var_846);
    }
    if let Some(var_847) = &input.stream_name {
        object.key("streamName").string(var_847);
    }
    if let Some(var_848) = &input.partition_key {
        object.key("partitionKey").string(var_848);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_republish_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RepublishAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_849) = &input.role_arn {
        object.key("roleArn").string(var_849);
    }
    if let Some(var_850) = &input.topic {
        object.key("topic").string(var_850);
    }
    if let Some(var_851) = &input.qos {
        object.key("qos").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_851).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Action,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_852) = &input.role_arn {
        object.key("roleArn").string(var_852);
    }
    if let Some(var_853) = &input.bucket_name {
        object.key("bucketName").string(var_853);
    }
    if let Some(var_854) = &input.key {
        object.key("key").string(var_854);
    }
    if let Some(var_855) = &input.canned_acl {
        object.key("cannedAcl").string(var_855.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firehose_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FirehoseAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_856) = &input.role_arn {
        object.key("roleArn").string(var_856);
    }
    if let Some(var_857) = &input.delivery_stream_name {
        object.key("deliveryStreamName").string(var_857);
    }
    if let Some(var_858) = &input.separator {
        object.key("separator").string(var_858);
    }
    if let Some(var_859) = &input.batch_mode {
        object.key("batchMode").boolean(*var_859);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_metric_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchMetricAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_860) = &input.role_arn {
        object.key("roleArn").string(var_860);
    }
    if let Some(var_861) = &input.metric_namespace {
        object.key("metricNamespace").string(var_861);
    }
    if let Some(var_862) = &input.metric_name {
        object.key("metricName").string(var_862);
    }
    if let Some(var_863) = &input.metric_value {
        object.key("metricValue").string(var_863);
    }
    if let Some(var_864) = &input.metric_unit {
        object.key("metricUnit").string(var_864);
    }
    if let Some(var_865) = &input.metric_timestamp {
        object.key("metricTimestamp").string(var_865);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_alarm_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchAlarmAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_866) = &input.role_arn {
        object.key("roleArn").string(var_866);
    }
    if let Some(var_867) = &input.alarm_name {
        object.key("alarmName").string(var_867);
    }
    if let Some(var_868) = &input.state_reason {
        object.key("stateReason").string(var_868);
    }
    if let Some(var_869) = &input.state_value {
        object.key("stateValue").string(var_869);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloudwatch_logs_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudwatchLogsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_870) = &input.role_arn {
        object.key("roleArn").string(var_870);
    }
    if let Some(var_871) = &input.log_group_name {
        object.key("logGroupName").string(var_871);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_elasticsearch_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ElasticsearchAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_872) = &input.role_arn {
        object.key("roleArn").string(var_872);
    }
    if let Some(var_873) = &input.endpoint {
        object.key("endpoint").string(var_873);
    }
    if let Some(var_874) = &input.index {
        object.key("index").string(var_874);
    }
    if let Some(var_875) = &input.r#type {
        object.key("type").string(var_875);
    }
    if let Some(var_876) = &input.id {
        object.key("id").string(var_876);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_salesforce_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SalesforceAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_877) = &input.token {
        object.key("token").string(var_877);
    }
    if let Some(var_878) = &input.url {
        object.key("url").string(var_878);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_analytics_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotAnalyticsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_879) = &input.channel_arn {
        object.key("channelArn").string(var_879);
    }
    if let Some(var_880) = &input.channel_name {
        object.key("channelName").string(var_880);
    }
    if let Some(var_881) = &input.batch_mode {
        object.key("batchMode").boolean(*var_881);
    }
    if let Some(var_882) = &input.role_arn {
        object.key("roleArn").string(var_882);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_events_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotEventsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_883) = &input.input_name {
        object.key("inputName").string(var_883);
    }
    if let Some(var_884) = &input.message_id {
        object.key("messageId").string(var_884);
    }
    if let Some(var_885) = &input.batch_mode {
        object.key("batchMode").boolean(*var_885);
    }
    if let Some(var_886) = &input.role_arn {
        object.key("roleArn").string(var_886);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iot_site_wise_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IotSiteWiseAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_887) = &input.put_asset_property_value_entries {
        let mut array_888 = object.key("putAssetPropertyValueEntries").start_array();
        for item_889 in var_887 {
            {
                let mut object_890 = array_888.value().start_object();
                crate::json_ser::serialize_structure_crate_model_put_asset_property_value_entry(
                    &mut object_890,
                    item_889,
                )?;
                object_890.finish();
            }
        }
        array_888.finish();
    }
    if let Some(var_891) = &input.role_arn {
        object.key("roleArn").string(var_891);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_step_functions_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StepFunctionsAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_892) = &input.execution_name_prefix {
        object.key("executionNamePrefix").string(var_892);
    }
    if let Some(var_893) = &input.state_machine_name {
        object.key("stateMachineName").string(var_893);
    }
    if let Some(var_894) = &input.role_arn {
        object.key("roleArn").string(var_894);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_895) = &input.role_arn {
        object.key("roleArn").string(var_895);
    }
    if let Some(var_896) = &input.database_name {
        object.key("databaseName").string(var_896);
    }
    if let Some(var_897) = &input.table_name {
        object.key("tableName").string(var_897);
    }
    if let Some(var_898) = &input.dimensions {
        let mut array_899 = object.key("dimensions").start_array();
        for item_900 in var_898 {
            {
                let mut object_901 = array_899.value().start_object();
                crate::json_ser::serialize_structure_crate_model_timestream_dimension(
                    &mut object_901,
                    item_900,
                )?;
                object_901.finish();
            }
        }
        array_899.finish();
    }
    if let Some(var_902) = &input.timestamp {
        let mut object_903 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_crate_model_timestream_timestamp(
            &mut object_903,
            var_902,
        )?;
        object_903.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_904) = &input.url {
        object.key("url").string(var_904);
    }
    if let Some(var_905) = &input.confirmation_url {
        object.key("confirmationUrl").string(var_905);
    }
    if let Some(var_906) = &input.headers {
        let mut array_907 = object.key("headers").start_array();
        for item_908 in var_906 {
            {
                let mut object_909 = array_907.value().start_object();
                crate::json_ser::serialize_structure_crate_model_http_action_header(
                    &mut object_909,
                    item_908,
                )?;
                object_909.finish();
            }
        }
        array_907.finish();
    }
    if let Some(var_910) = &input.auth {
        let mut object_911 = object.key("auth").start_object();
        crate::json_ser::serialize_structure_crate_model_http_authorization(
            &mut object_911,
            var_910,
        )?;
        object_911.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kafka_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KafkaAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_912) = &input.destination_arn {
        object.key("destinationArn").string(var_912);
    }
    if let Some(var_913) = &input.topic {
        object.key("topic").string(var_913);
    }
    if let Some(var_914) = &input.key {
        object.key("key").string(var_914);
    }
    if let Some(var_915) = &input.partition {
        object.key("partition").string(var_915);
    }
    if let Some(var_916) = &input.client_properties {
        let mut object_917 = object.key("clientProperties").start_object();
        for (key_918, value_919) in var_916 {
            {
                object_917.key(key_918).string(value_919);
            }
        }
        object_917.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_search_action(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenSearchAction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_920) = &input.role_arn {
        object.key("roleArn").string(var_920);
    }
    if let Some(var_921) = &input.endpoint {
        object.key("endpoint").string(var_921);
    }
    if let Some(var_922) = &input.index {
        object.key("index").string(var_922);
    }
    if let Some(var_923) = &input.r#type {
        object.key("type").string(var_923);
    }
    if let Some(var_924) = &input.id {
        object.key("id").string(var_924);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_signing_profile_parameter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigningProfileParameter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_925) = &input.certificate_arn {
        object.key("certificateArn").string(var_925);
    }
    if let Some(var_926) = &input.platform {
        object.key("platform").string(var_926);
    }
    if let Some(var_927) = &input.certificate_path_on_device {
        object.key("certificatePathOnDevice").string(var_927);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_928) = &input.s3_destination {
        let mut object_929 = object.key("s3Destination").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_destination(&mut object_929, var_928)?;
        object_929.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing_signature(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningSignature,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_930) = &input.inline_document {
        object
            .key("inlineDocument")
            .string_unchecked(&aws_smithy_types::base64::encode(var_930));
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_signing_certificate_chain(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeSigningCertificateChain,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_931) = &input.certificate_name {
        object.key("certificateName").string(var_931);
    }
    if let Some(var_932) = &input.inline_document {
        object.key("inlineDocument").string(var_932);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_item_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutItemInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_933) = &input.table_name {
        object.key("tableName").string(var_933);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_put_asset_property_value_entry(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PutAssetPropertyValueEntry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_934) = &input.entry_id {
        object.key("entryId").string(var_934);
    }
    if let Some(var_935) = &input.asset_id {
        object.key("assetId").string(var_935);
    }
    if let Some(var_936) = &input.property_id {
        object.key("propertyId").string(var_936);
    }
    if let Some(var_937) = &input.property_alias {
        object.key("propertyAlias").string(var_937);
    }
    if let Some(var_938) = &input.property_values {
        let mut array_939 = object.key("propertyValues").start_array();
        for item_940 in var_938 {
            {
                let mut object_941 = array_939.value().start_object();
                crate::json_ser::serialize_structure_crate_model_asset_property_value(
                    &mut object_941,
                    item_940,
                )?;
                object_941.finish();
            }
        }
        array_939.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_dimension(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamDimension,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_942) = &input.name {
        object.key("name").string(var_942);
    }
    if let Some(var_943) = &input.value {
        object.key("value").string(var_943);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_timestream_timestamp(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TimestreamTimestamp,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_944) = &input.value {
        object.key("value").string(var_944);
    }
    if let Some(var_945) = &input.unit {
        object.key("unit").string(var_945);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_action_header(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpActionHeader,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_946) = &input.key {
        object.key("key").string(var_946);
    }
    if let Some(var_947) = &input.value {
        object.key("value").string(var_947);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_http_authorization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HttpAuthorization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_948) = &input.sigv4 {
        let mut object_949 = object.key("sigv4").start_object();
        crate::json_ser::serialize_structure_crate_model_sig_v4_authorization(
            &mut object_949,
            var_948,
        )?;
        object_949.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Destination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_950) = &input.bucket {
        object.key("bucket").string(var_950);
    }
    if let Some(var_951) = &input.prefix {
        object.key("prefix").string(var_951);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_property_value(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyValue,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_952) = &input.value {
        let mut object_953 = object.key("value").start_object();
        crate::json_ser::serialize_union_crate_model_asset_property_variant(
            &mut object_953,
            var_952,
        )?;
        object_953.finish();
    }
    if let Some(var_954) = &input.timestamp {
        let mut object_955 = object.key("timestamp").start_object();
        crate::json_ser::serialize_structure_crate_model_asset_property_timestamp(
            &mut object_955,
            var_954,
        )?;
        object_955.finish();
    }
    if let Some(var_956) = &input.quality {
        object.key("quality").string(var_956);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sig_v4_authorization(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SigV4Authorization,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_957) = &input.signing_region {
        object.key("signingRegion").string(var_957);
    }
    if let Some(var_958) = &input.service_name {
        object.key("serviceName").string(var_958);
    }
    if let Some(var_959) = &input.role_arn {
        object.key("roleArn").string(var_959);
    }
    Ok(())
}

pub fn serialize_union_crate_model_asset_property_variant(
    object_953: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyVariant,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::AssetPropertyVariant::StringValue(inner) => {
            object_953.key("stringValue").string(inner);
        }
        crate::model::AssetPropertyVariant::IntegerValue(inner) => {
            object_953.key("integerValue").string(inner);
        }
        crate::model::AssetPropertyVariant::DoubleValue(inner) => {
            object_953.key("doubleValue").string(inner);
        }
        crate::model::AssetPropertyVariant::BooleanValue(inner) => {
            object_953.key("booleanValue").string(inner);
        }
        crate::model::AssetPropertyVariant::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant(
                    "AssetPropertyVariant",
                ),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_asset_property_timestamp(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssetPropertyTimestamp,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_960) = &input.time_in_seconds {
        object.key("timeInSeconds").string(var_960);
    }
    if let Some(var_961) = &input.offset_in_nanos {
        object.key("offsetInNanos").string(var_961);
    }
    Ok(())
}
