// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSchedulingPolicyOutput {}
impl std::fmt::Debug for UpdateSchedulingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSchedulingPolicyOutput");
        formatter.finish()
    }
}
/// See [`UpdateSchedulingPolicyOutput`](crate::output::UpdateSchedulingPolicyOutput)
pub mod update_scheduling_policy_output {
    /// A builder for [`UpdateSchedulingPolicyOutput`](crate::output::UpdateSchedulingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateSchedulingPolicyOutput`](crate::output::UpdateSchedulingPolicyOutput)
        pub fn build(self) -> crate::output::UpdateSchedulingPolicyOutput {
            crate::output::UpdateSchedulingPolicyOutput {}
        }
    }
}
impl UpdateSchedulingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSchedulingPolicyOutput`](crate::output::UpdateSchedulingPolicyOutput)
    pub fn builder() -> crate::output::update_scheduling_policy_output::Builder {
        crate::output::update_scheduling_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateJobQueueOutput {
    /// <p>The name of the job queue.</p>
    pub job_queue_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub job_queue_arn: std::option::Option<std::string::String>,
}
impl UpdateJobQueueOutput {
    /// <p>The name of the job queue.</p>
    pub fn job_queue_name(&self) -> std::option::Option<&str> {
        self.job_queue_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub fn job_queue_arn(&self) -> std::option::Option<&str> {
        self.job_queue_arn.as_deref()
    }
}
impl std::fmt::Debug for UpdateJobQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateJobQueueOutput");
        formatter.field("job_queue_name", &self.job_queue_name);
        formatter.field("job_queue_arn", &self.job_queue_arn);
        formatter.finish()
    }
}
/// See [`UpdateJobQueueOutput`](crate::output::UpdateJobQueueOutput)
pub mod update_job_queue_output {
    /// A builder for [`UpdateJobQueueOutput`](crate::output::UpdateJobQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_queue_name: std::option::Option<std::string::String>,
        pub(crate) job_queue_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the job queue.</p>
        pub fn job_queue_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_queue_name = Some(input.into());
            self
        }
        /// <p>The name of the job queue.</p>
        pub fn set_job_queue_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_queue_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
        pub fn job_queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_queue_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
        pub fn set_job_queue_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_queue_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateJobQueueOutput`](crate::output::UpdateJobQueueOutput)
        pub fn build(self) -> crate::output::UpdateJobQueueOutput {
            crate::output::UpdateJobQueueOutput {
                job_queue_name: self.job_queue_name,
                job_queue_arn: self.job_queue_arn,
            }
        }
    }
}
impl UpdateJobQueueOutput {
    /// Creates a new builder-style object to manufacture [`UpdateJobQueueOutput`](crate::output::UpdateJobQueueOutput)
    pub fn builder() -> crate::output::update_job_queue_output::Builder {
        crate::output::update_job_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateComputeEnvironmentOutput {
    /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
    /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub compute_environment_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    pub compute_environment_arn: std::option::Option<std::string::String>,
}
impl UpdateComputeEnvironmentOutput {
    /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
    /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn compute_environment_name(&self) -> std::option::Option<&str> {
        self.compute_environment_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    pub fn compute_environment_arn(&self) -> std::option::Option<&str> {
        self.compute_environment_arn.as_deref()
    }
}
impl std::fmt::Debug for UpdateComputeEnvironmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateComputeEnvironmentOutput");
        formatter.field("compute_environment_name", &self.compute_environment_name);
        formatter.field("compute_environment_arn", &self.compute_environment_arn);
        formatter.finish()
    }
}
/// See [`UpdateComputeEnvironmentOutput`](crate::output::UpdateComputeEnvironmentOutput)
pub mod update_compute_environment_output {
    /// A builder for [`UpdateComputeEnvironmentOutput`](crate::output::UpdateComputeEnvironmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) compute_environment_name: std::option::Option<std::string::String>,
        pub(crate) compute_environment_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
        /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
        pub fn compute_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.compute_environment_name = Some(input.into());
            self
        }
        /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
        /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
        pub fn set_compute_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.compute_environment_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        pub fn compute_environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.compute_environment_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        pub fn set_compute_environment_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.compute_environment_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateComputeEnvironmentOutput`](crate::output::UpdateComputeEnvironmentOutput)
        pub fn build(self) -> crate::output::UpdateComputeEnvironmentOutput {
            crate::output::UpdateComputeEnvironmentOutput {
                compute_environment_name: self.compute_environment_name,
                compute_environment_arn: self.compute_environment_arn,
            }
        }
    }
}
impl UpdateComputeEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateComputeEnvironmentOutput`](crate::output::UpdateComputeEnvironmentOutput)
    pub fn builder() -> crate::output::update_compute_environment_output::Builder {
        crate::output::update_compute_environment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TerminateJobOutput {}
impl std::fmt::Debug for TerminateJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TerminateJobOutput");
        formatter.finish()
    }
}
/// See [`TerminateJobOutput`](crate::output::TerminateJobOutput)
pub mod terminate_job_output {
    /// A builder for [`TerminateJobOutput`](crate::output::TerminateJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TerminateJobOutput`](crate::output::TerminateJobOutput)
        pub fn build(self) -> crate::output::TerminateJobOutput {
            crate::output::TerminateJobOutput {}
        }
    }
}
impl TerminateJobOutput {
    /// Creates a new builder-style object to manufacture [`TerminateJobOutput`](crate::output::TerminateJobOutput)
    pub fn builder() -> crate::output::terminate_job_output::Builder {
        crate::output::terminate_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SubmitJobOutput {
    /// <p>The Amazon Resource Name (ARN) for the job.</p>
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The name of the job.</p>
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the job.</p>
    pub job_id: std::option::Option<std::string::String>,
}
impl SubmitJobOutput {
    /// <p>The Amazon Resource Name (ARN) for the job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The name of the job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The unique identifier for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl std::fmt::Debug for SubmitJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SubmitJobOutput");
        formatter.field("job_arn", &self.job_arn);
        formatter.field("job_name", &self.job_name);
        formatter.field("job_id", &self.job_id);
        formatter.finish()
    }
}
/// See [`SubmitJobOutput`](crate::output::SubmitJobOutput)
pub mod submit_job_output {
    /// A builder for [`SubmitJobOutput`](crate::output::SubmitJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_arn: std::option::Option<std::string::String>,
        pub(crate) job_name: std::option::Option<std::string::String>,
        pub(crate) job_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) for the job.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the job.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        /// <p>The name of the job.</p>
        pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_name = Some(input.into());
            self
        }
        /// <p>The name of the job.</p>
        pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_name = input;
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        /// Consumes the builder and constructs a [`SubmitJobOutput`](crate::output::SubmitJobOutput)
        pub fn build(self) -> crate::output::SubmitJobOutput {
            crate::output::SubmitJobOutput {
                job_arn: self.job_arn,
                job_name: self.job_name,
                job_id: self.job_id,
            }
        }
    }
}
impl SubmitJobOutput {
    /// Creates a new builder-style object to manufacture [`SubmitJobOutput`](crate::output::SubmitJobOutput)
    pub fn builder() -> crate::output::submit_job_output::Builder {
        crate::output::submit_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterJobDefinitionOutput {
    /// <p>The name of the job definition.</p>
    pub job_definition_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub job_definition_arn: std::option::Option<std::string::String>,
    /// <p>The revision of the job definition.</p>
    pub revision: i32,
}
impl RegisterJobDefinitionOutput {
    /// <p>The name of the job definition.</p>
    pub fn job_definition_name(&self) -> std::option::Option<&str> {
        self.job_definition_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
    pub fn job_definition_arn(&self) -> std::option::Option<&str> {
        self.job_definition_arn.as_deref()
    }
    /// <p>The revision of the job definition.</p>
    pub fn revision(&self) -> i32 {
        self.revision
    }
}
impl std::fmt::Debug for RegisterJobDefinitionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterJobDefinitionOutput");
        formatter.field("job_definition_name", &self.job_definition_name);
        formatter.field("job_definition_arn", &self.job_definition_arn);
        formatter.field("revision", &self.revision);
        formatter.finish()
    }
}
/// See [`RegisterJobDefinitionOutput`](crate::output::RegisterJobDefinitionOutput)
pub mod register_job_definition_output {
    /// A builder for [`RegisterJobDefinitionOutput`](crate::output::RegisterJobDefinitionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_definition_name: std::option::Option<std::string::String>,
        pub(crate) job_definition_arn: std::option::Option<std::string::String>,
        pub(crate) revision: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The name of the job definition.</p>
        pub fn job_definition_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_definition_name = Some(input.into());
            self
        }
        /// <p>The name of the job definition.</p>
        pub fn set_job_definition_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_definition_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
        pub fn job_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_definition_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job definition.</p>
        pub fn set_job_definition_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_definition_arn = input;
            self
        }
        /// <p>The revision of the job definition.</p>
        pub fn revision(mut self, input: i32) -> Self {
            self.revision = Some(input);
            self
        }
        /// <p>The revision of the job definition.</p>
        pub fn set_revision(mut self, input: std::option::Option<i32>) -> Self {
            self.revision = input;
            self
        }
        /// Consumes the builder and constructs a [`RegisterJobDefinitionOutput`](crate::output::RegisterJobDefinitionOutput)
        pub fn build(self) -> crate::output::RegisterJobDefinitionOutput {
            crate::output::RegisterJobDefinitionOutput {
                job_definition_name: self.job_definition_name,
                job_definition_arn: self.job_definition_arn,
                revision: self.revision.unwrap_or_default(),
            }
        }
    }
}
impl RegisterJobDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`RegisterJobDefinitionOutput`](crate::output::RegisterJobDefinitionOutput)
    pub fn builder() -> crate::output::register_job_definition_output::Builder {
        crate::output::register_job_definition_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags for the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags for the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags for the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSchedulingPoliciesOutput {
    /// <p>A list of scheduling policies that match the request.</p>
    pub scheduling_policies:
        std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyListingDetail>>,
    /// <p>The <code>nextToken</code> value to include in a future <code>ListSchedulingPolicies</code> request. When the
    /// results of a <code>ListSchedulingPolicies</code> request exceed <code>maxResults</code>, this value can be used to
    /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListSchedulingPoliciesOutput {
    /// <p>A list of scheduling policies that match the request.</p>
    pub fn scheduling_policies(
        &self,
    ) -> std::option::Option<&[crate::model::SchedulingPolicyListingDetail]> {
        self.scheduling_policies.as_deref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>ListSchedulingPolicies</code> request. When the
    /// results of a <code>ListSchedulingPolicies</code> request exceed <code>maxResults</code>, this value can be used to
    /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListSchedulingPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSchedulingPoliciesOutput");
        formatter.field("scheduling_policies", &self.scheduling_policies);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSchedulingPoliciesOutput`](crate::output::ListSchedulingPoliciesOutput)
pub mod list_scheduling_policies_output {
    /// A builder for [`ListSchedulingPoliciesOutput`](crate::output::ListSchedulingPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduling_policies:
            std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyListingDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `scheduling_policies`.
        ///
        /// To override the contents of this collection use [`set_scheduling_policies`](Self::set_scheduling_policies).
        ///
        /// <p>A list of scheduling policies that match the request.</p>
        pub fn scheduling_policies(
            mut self,
            input: impl Into<crate::model::SchedulingPolicyListingDetail>,
        ) -> Self {
            let mut v = self.scheduling_policies.unwrap_or_default();
            v.push(input.into());
            self.scheduling_policies = Some(v);
            self
        }
        /// <p>A list of scheduling policies that match the request.</p>
        pub fn set_scheduling_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyListingDetail>>,
        ) -> Self {
            self.scheduling_policies = input;
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>ListSchedulingPolicies</code> request. When the
        /// results of a <code>ListSchedulingPolicies</code> request exceed <code>maxResults</code>, this value can be used to
        /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>ListSchedulingPolicies</code> request. When the
        /// results of a <code>ListSchedulingPolicies</code> request exceed <code>maxResults</code>, this value can be used to
        /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSchedulingPoliciesOutput`](crate::output::ListSchedulingPoliciesOutput)
        pub fn build(self) -> crate::output::ListSchedulingPoliciesOutput {
            crate::output::ListSchedulingPoliciesOutput {
                scheduling_policies: self.scheduling_policies,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSchedulingPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListSchedulingPoliciesOutput`](crate::output::ListSchedulingPoliciesOutput)
    pub fn builder() -> crate::output::list_scheduling_policies_output::Builder {
        crate::output::list_scheduling_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListJobsOutput {
    /// <p>A list of job summaries that match the request.</p>
    pub job_summary_list: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
    /// <p>The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a
    /// <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of
    /// results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListJobsOutput {
    /// <p>A list of job summaries that match the request.</p>
    pub fn job_summary_list(&self) -> std::option::Option<&[crate::model::JobSummary]> {
        self.job_summary_list.as_deref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a
    /// <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of
    /// results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListJobsOutput");
        formatter.field("job_summary_list", &self.job_summary_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListJobsOutput`](crate::output::ListJobsOutput)
pub mod list_jobs_output {
    /// A builder for [`ListJobsOutput`](crate::output::ListJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_summary_list: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `job_summary_list`.
        ///
        /// To override the contents of this collection use [`set_job_summary_list`](Self::set_job_summary_list).
        ///
        /// <p>A list of job summaries that match the request.</p>
        pub fn job_summary_list(mut self, input: impl Into<crate::model::JobSummary>) -> Self {
            let mut v = self.job_summary_list.unwrap_or_default();
            v.push(input.into());
            self.job_summary_list = Some(v);
            self
        }
        /// <p>A list of job summaries that match the request.</p>
        pub fn set_job_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        ) -> Self {
            self.job_summary_list = input;
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a
        /// <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of
        /// results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>ListJobs</code> request. When the results of a
        /// <code>ListJobs</code> request exceed <code>maxResults</code>, this value can be used to retrieve the next page of
        /// results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListJobsOutput`](crate::output::ListJobsOutput)
        pub fn build(self) -> crate::output::ListJobsOutput {
            crate::output::ListJobsOutput {
                job_summary_list: self.job_summary_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListJobsOutput`](crate::output::ListJobsOutput)
    pub fn builder() -> crate::output::list_jobs_output::Builder {
        crate::output::list_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSchedulingPoliciesOutput {
    /// <p>The list of scheduling policies.</p>
    pub scheduling_policies:
        std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyDetail>>,
}
impl DescribeSchedulingPoliciesOutput {
    /// <p>The list of scheduling policies.</p>
    pub fn scheduling_policies(
        &self,
    ) -> std::option::Option<&[crate::model::SchedulingPolicyDetail]> {
        self.scheduling_policies.as_deref()
    }
}
impl std::fmt::Debug for DescribeSchedulingPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSchedulingPoliciesOutput");
        formatter.field("scheduling_policies", &self.scheduling_policies);
        formatter.finish()
    }
}
/// See [`DescribeSchedulingPoliciesOutput`](crate::output::DescribeSchedulingPoliciesOutput)
pub mod describe_scheduling_policies_output {
    /// A builder for [`DescribeSchedulingPoliciesOutput`](crate::output::DescribeSchedulingPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) scheduling_policies:
            std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyDetail>>,
    }
    impl Builder {
        /// Appends an item to `scheduling_policies`.
        ///
        /// To override the contents of this collection use [`set_scheduling_policies`](Self::set_scheduling_policies).
        ///
        /// <p>The list of scheduling policies.</p>
        pub fn scheduling_policies(
            mut self,
            input: impl Into<crate::model::SchedulingPolicyDetail>,
        ) -> Self {
            let mut v = self.scheduling_policies.unwrap_or_default();
            v.push(input.into());
            self.scheduling_policies = Some(v);
            self
        }
        /// <p>The list of scheduling policies.</p>
        pub fn set_scheduling_policies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SchedulingPolicyDetail>>,
        ) -> Self {
            self.scheduling_policies = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSchedulingPoliciesOutput`](crate::output::DescribeSchedulingPoliciesOutput)
        pub fn build(self) -> crate::output::DescribeSchedulingPoliciesOutput {
            crate::output::DescribeSchedulingPoliciesOutput {
                scheduling_policies: self.scheduling_policies,
            }
        }
    }
}
impl DescribeSchedulingPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSchedulingPoliciesOutput`](crate::output::DescribeSchedulingPoliciesOutput)
    pub fn builder() -> crate::output::describe_scheduling_policies_output::Builder {
        crate::output::describe_scheduling_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeJobsOutput {
    /// <p>The list of jobs.</p>
    pub jobs: std::option::Option<std::vec::Vec<crate::model::JobDetail>>,
}
impl DescribeJobsOutput {
    /// <p>The list of jobs.</p>
    pub fn jobs(&self) -> std::option::Option<&[crate::model::JobDetail]> {
        self.jobs.as_deref()
    }
}
impl std::fmt::Debug for DescribeJobsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeJobsOutput");
        formatter.field("jobs", &self.jobs);
        formatter.finish()
    }
}
/// See [`DescribeJobsOutput`](crate::output::DescribeJobsOutput)
pub mod describe_jobs_output {
    /// A builder for [`DescribeJobsOutput`](crate::output::DescribeJobsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) jobs: std::option::Option<std::vec::Vec<crate::model::JobDetail>>,
    }
    impl Builder {
        /// Appends an item to `jobs`.
        ///
        /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
        ///
        /// <p>The list of jobs.</p>
        pub fn jobs(mut self, input: impl Into<crate::model::JobDetail>) -> Self {
            let mut v = self.jobs.unwrap_or_default();
            v.push(input.into());
            self.jobs = Some(v);
            self
        }
        /// <p>The list of jobs.</p>
        pub fn set_jobs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobDetail>>,
        ) -> Self {
            self.jobs = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobsOutput`](crate::output::DescribeJobsOutput)
        pub fn build(self) -> crate::output::DescribeJobsOutput {
            crate::output::DescribeJobsOutput { jobs: self.jobs }
        }
    }
}
impl DescribeJobsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobsOutput`](crate::output::DescribeJobsOutput)
    pub fn builder() -> crate::output::describe_jobs_output::Builder {
        crate::output::describe_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeJobQueuesOutput {
    /// <p>The list of job queues.</p>
    pub job_queues: std::option::Option<std::vec::Vec<crate::model::JobQueueDetail>>,
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results
    /// of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the
    /// next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeJobQueuesOutput {
    /// <p>The list of job queues.</p>
    pub fn job_queues(&self) -> std::option::Option<&[crate::model::JobQueueDetail]> {
        self.job_queues.as_deref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results
    /// of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the
    /// next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeJobQueuesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeJobQueuesOutput");
        formatter.field("job_queues", &self.job_queues);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeJobQueuesOutput`](crate::output::DescribeJobQueuesOutput)
pub mod describe_job_queues_output {
    /// A builder for [`DescribeJobQueuesOutput`](crate::output::DescribeJobQueuesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_queues: std::option::Option<std::vec::Vec<crate::model::JobQueueDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `job_queues`.
        ///
        /// To override the contents of this collection use [`set_job_queues`](Self::set_job_queues).
        ///
        /// <p>The list of job queues.</p>
        pub fn job_queues(mut self, input: impl Into<crate::model::JobQueueDetail>) -> Self {
            let mut v = self.job_queues.unwrap_or_default();
            v.push(input.into());
            self.job_queues = Some(v);
            self
        }
        /// <p>The list of job queues.</p>
        pub fn set_job_queues(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobQueueDetail>>,
        ) -> Self {
            self.job_queues = input;
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results
        /// of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the
        /// next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobQueues</code> request. When the results
        /// of a <code>DescribeJobQueues</code> request exceed <code>maxResults</code>, this value can be used to retrieve the
        /// next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobQueuesOutput`](crate::output::DescribeJobQueuesOutput)
        pub fn build(self) -> crate::output::DescribeJobQueuesOutput {
            crate::output::DescribeJobQueuesOutput {
                job_queues: self.job_queues,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeJobQueuesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobQueuesOutput`](crate::output::DescribeJobQueuesOutput)
    pub fn builder() -> crate::output::describe_job_queues_output::Builder {
        crate::output::describe_job_queues_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeJobDefinitionsOutput {
    /// <p>The list of job definitions.</p>
    pub job_definitions: std::option::Option<std::vec::Vec<crate::model::JobDefinition>>,
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the
    /// results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to
    /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeJobDefinitionsOutput {
    /// <p>The list of job definitions.</p>
    pub fn job_definitions(&self) -> std::option::Option<&[crate::model::JobDefinition]> {
        self.job_definitions.as_deref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the
    /// results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to
    /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeJobDefinitionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeJobDefinitionsOutput");
        formatter.field("job_definitions", &self.job_definitions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeJobDefinitionsOutput`](crate::output::DescribeJobDefinitionsOutput)
pub mod describe_job_definitions_output {
    /// A builder for [`DescribeJobDefinitionsOutput`](crate::output::DescribeJobDefinitionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_definitions: std::option::Option<std::vec::Vec<crate::model::JobDefinition>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `job_definitions`.
        ///
        /// To override the contents of this collection use [`set_job_definitions`](Self::set_job_definitions).
        ///
        /// <p>The list of job definitions.</p>
        pub fn job_definitions(mut self, input: impl Into<crate::model::JobDefinition>) -> Self {
            let mut v = self.job_definitions.unwrap_or_default();
            v.push(input.into());
            self.job_definitions = Some(v);
            self
        }
        /// <p>The list of job definitions.</p>
        pub fn set_job_definitions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobDefinition>>,
        ) -> Self {
            self.job_definitions = input;
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the
        /// results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to
        /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeJobDefinitions</code> request. When the
        /// results of a <code>DescribeJobDefinitions</code> request exceed <code>maxResults</code>, this value can be used to
        /// retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobDefinitionsOutput`](crate::output::DescribeJobDefinitionsOutput)
        pub fn build(self) -> crate::output::DescribeJobDefinitionsOutput {
            crate::output::DescribeJobDefinitionsOutput {
                job_definitions: self.job_definitions,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeJobDefinitionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobDefinitionsOutput`](crate::output::DescribeJobDefinitionsOutput)
    pub fn builder() -> crate::output::describe_job_definitions_output::Builder {
        crate::output::describe_job_definitions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeComputeEnvironmentsOutput {
    /// <p>The list of compute environments.</p>
    pub compute_environments:
        std::option::Option<std::vec::Vec<crate::model::ComputeEnvironmentDetail>>,
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When
    /// the results of a <code>DescribeComputeEnvironments</code> request exceed <code>maxResults</code>, this value can be
    /// used to retrieve the next page of results. This value is <code>null</code> when there are no more results to
    /// return.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl DescribeComputeEnvironmentsOutput {
    /// <p>The list of compute environments.</p>
    pub fn compute_environments(
        &self,
    ) -> std::option::Option<&[crate::model::ComputeEnvironmentDetail]> {
        self.compute_environments.as_deref()
    }
    /// <p>The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When
    /// the results of a <code>DescribeComputeEnvironments</code> request exceed <code>maxResults</code>, this value can be
    /// used to retrieve the next page of results. This value is <code>null</code> when there are no more results to
    /// return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for DescribeComputeEnvironmentsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeComputeEnvironmentsOutput");
        formatter.field("compute_environments", &self.compute_environments);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`DescribeComputeEnvironmentsOutput`](crate::output::DescribeComputeEnvironmentsOutput)
pub mod describe_compute_environments_output {
    /// A builder for [`DescribeComputeEnvironmentsOutput`](crate::output::DescribeComputeEnvironmentsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) compute_environments:
            std::option::Option<std::vec::Vec<crate::model::ComputeEnvironmentDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `compute_environments`.
        ///
        /// To override the contents of this collection use [`set_compute_environments`](Self::set_compute_environments).
        ///
        /// <p>The list of compute environments.</p>
        pub fn compute_environments(
            mut self,
            input: impl Into<crate::model::ComputeEnvironmentDetail>,
        ) -> Self {
            let mut v = self.compute_environments.unwrap_or_default();
            v.push(input.into());
            self.compute_environments = Some(v);
            self
        }
        /// <p>The list of compute environments.</p>
        pub fn set_compute_environments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ComputeEnvironmentDetail>>,
        ) -> Self {
            self.compute_environments = input;
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When
        /// the results of a <code>DescribeComputeEnvironments</code> request exceed <code>maxResults</code>, this value can be
        /// used to retrieve the next page of results. This value is <code>null</code> when there are no more results to
        /// return.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The <code>nextToken</code> value to include in a future <code>DescribeComputeEnvironments</code> request. When
        /// the results of a <code>DescribeComputeEnvironments</code> request exceed <code>maxResults</code>, this value can be
        /// used to retrieve the next page of results. This value is <code>null</code> when there are no more results to
        /// return.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeComputeEnvironmentsOutput`](crate::output::DescribeComputeEnvironmentsOutput)
        pub fn build(self) -> crate::output::DescribeComputeEnvironmentsOutput {
            crate::output::DescribeComputeEnvironmentsOutput {
                compute_environments: self.compute_environments,
                next_token: self.next_token,
            }
        }
    }
}
impl DescribeComputeEnvironmentsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeComputeEnvironmentsOutput`](crate::output::DescribeComputeEnvironmentsOutput)
    pub fn builder() -> crate::output::describe_compute_environments_output::Builder {
        crate::output::describe_compute_environments_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterJobDefinitionOutput {}
impl std::fmt::Debug for DeregisterJobDefinitionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterJobDefinitionOutput");
        formatter.finish()
    }
}
/// See [`DeregisterJobDefinitionOutput`](crate::output::DeregisterJobDefinitionOutput)
pub mod deregister_job_definition_output {
    /// A builder for [`DeregisterJobDefinitionOutput`](crate::output::DeregisterJobDefinitionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterJobDefinitionOutput`](crate::output::DeregisterJobDefinitionOutput)
        pub fn build(self) -> crate::output::DeregisterJobDefinitionOutput {
            crate::output::DeregisterJobDefinitionOutput {}
        }
    }
}
impl DeregisterJobDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterJobDefinitionOutput`](crate::output::DeregisterJobDefinitionOutput)
    pub fn builder() -> crate::output::deregister_job_definition_output::Builder {
        crate::output::deregister_job_definition_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSchedulingPolicyOutput {}
impl std::fmt::Debug for DeleteSchedulingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSchedulingPolicyOutput");
        formatter.finish()
    }
}
/// See [`DeleteSchedulingPolicyOutput`](crate::output::DeleteSchedulingPolicyOutput)
pub mod delete_scheduling_policy_output {
    /// A builder for [`DeleteSchedulingPolicyOutput`](crate::output::DeleteSchedulingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSchedulingPolicyOutput`](crate::output::DeleteSchedulingPolicyOutput)
        pub fn build(self) -> crate::output::DeleteSchedulingPolicyOutput {
            crate::output::DeleteSchedulingPolicyOutput {}
        }
    }
}
impl DeleteSchedulingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSchedulingPolicyOutput`](crate::output::DeleteSchedulingPolicyOutput)
    pub fn builder() -> crate::output::delete_scheduling_policy_output::Builder {
        crate::output::delete_scheduling_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteJobQueueOutput {}
impl std::fmt::Debug for DeleteJobQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteJobQueueOutput");
        formatter.finish()
    }
}
/// See [`DeleteJobQueueOutput`](crate::output::DeleteJobQueueOutput)
pub mod delete_job_queue_output {
    /// A builder for [`DeleteJobQueueOutput`](crate::output::DeleteJobQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteJobQueueOutput`](crate::output::DeleteJobQueueOutput)
        pub fn build(self) -> crate::output::DeleteJobQueueOutput {
            crate::output::DeleteJobQueueOutput {}
        }
    }
}
impl DeleteJobQueueOutput {
    /// Creates a new builder-style object to manufacture [`DeleteJobQueueOutput`](crate::output::DeleteJobQueueOutput)
    pub fn builder() -> crate::output::delete_job_queue_output::Builder {
        crate::output::delete_job_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteComputeEnvironmentOutput {}
impl std::fmt::Debug for DeleteComputeEnvironmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteComputeEnvironmentOutput");
        formatter.finish()
    }
}
/// See [`DeleteComputeEnvironmentOutput`](crate::output::DeleteComputeEnvironmentOutput)
pub mod delete_compute_environment_output {
    /// A builder for [`DeleteComputeEnvironmentOutput`](crate::output::DeleteComputeEnvironmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteComputeEnvironmentOutput`](crate::output::DeleteComputeEnvironmentOutput)
        pub fn build(self) -> crate::output::DeleteComputeEnvironmentOutput {
            crate::output::DeleteComputeEnvironmentOutput {}
        }
    }
}
impl DeleteComputeEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteComputeEnvironmentOutput`](crate::output::DeleteComputeEnvironmentOutput)
    pub fn builder() -> crate::output::delete_compute_environment_output::Builder {
        crate::output::delete_compute_environment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSchedulingPolicyOutput {
    /// <p>The name of the scheduling policy.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the scheduling policy. The format is
    /// <code>aws:<i>Partition</i>:batch:<i>Region</i>:<i>Account</i>:scheduling-policy/<i>Name</i>
    /// </code>.
    /// For example,
    /// <code>aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy</code>.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl CreateSchedulingPolicyOutput {
    /// <p>The name of the scheduling policy.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the scheduling policy. The format is
    /// <code>aws:<i>Partition</i>:batch:<i>Region</i>:<i>Account</i>:scheduling-policy/<i>Name</i>
    /// </code>.
    /// For example,
    /// <code>aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy</code>.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl std::fmt::Debug for CreateSchedulingPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSchedulingPolicyOutput");
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateSchedulingPolicyOutput`](crate::output::CreateSchedulingPolicyOutput)
pub mod create_scheduling_policy_output {
    /// A builder for [`CreateSchedulingPolicyOutput`](crate::output::CreateSchedulingPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the scheduling policy.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the scheduling policy.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the scheduling policy. The format is
        /// <code>aws:<i>Partition</i>:batch:<i>Region</i>:<i>Account</i>:scheduling-policy/<i>Name</i>
        /// </code>.
        /// For example,
        /// <code>aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy</code>.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the scheduling policy. The format is
        /// <code>aws:<i>Partition</i>:batch:<i>Region</i>:<i>Account</i>:scheduling-policy/<i>Name</i>
        /// </code>.
        /// For example,
        /// <code>aws:aws:batch:us-west-2:012345678910:scheduling-policy/MySchedulingPolicy</code>.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSchedulingPolicyOutput`](crate::output::CreateSchedulingPolicyOutput)
        pub fn build(self) -> crate::output::CreateSchedulingPolicyOutput {
            crate::output::CreateSchedulingPolicyOutput {
                name: self.name,
                arn: self.arn,
            }
        }
    }
}
impl CreateSchedulingPolicyOutput {
    /// Creates a new builder-style object to manufacture [`CreateSchedulingPolicyOutput`](crate::output::CreateSchedulingPolicyOutput)
    pub fn builder() -> crate::output::create_scheduling_policy_output::Builder {
        crate::output::create_scheduling_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateJobQueueOutput {
    /// <p>The name of the job queue.</p>
    pub job_queue_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub job_queue_arn: std::option::Option<std::string::String>,
}
impl CreateJobQueueOutput {
    /// <p>The name of the job queue.</p>
    pub fn job_queue_name(&self) -> std::option::Option<&str> {
        self.job_queue_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
    pub fn job_queue_arn(&self) -> std::option::Option<&str> {
        self.job_queue_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateJobQueueOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateJobQueueOutput");
        formatter.field("job_queue_name", &self.job_queue_name);
        formatter.field("job_queue_arn", &self.job_queue_arn);
        formatter.finish()
    }
}
/// See [`CreateJobQueueOutput`](crate::output::CreateJobQueueOutput)
pub mod create_job_queue_output {
    /// A builder for [`CreateJobQueueOutput`](crate::output::CreateJobQueueOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_queue_name: std::option::Option<std::string::String>,
        pub(crate) job_queue_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the job queue.</p>
        pub fn job_queue_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_queue_name = Some(input.into());
            self
        }
        /// <p>The name of the job queue.</p>
        pub fn set_job_queue_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_queue_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
        pub fn job_queue_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_queue_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job queue.</p>
        pub fn set_job_queue_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.job_queue_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateJobQueueOutput`](crate::output::CreateJobQueueOutput)
        pub fn build(self) -> crate::output::CreateJobQueueOutput {
            crate::output::CreateJobQueueOutput {
                job_queue_name: self.job_queue_name,
                job_queue_arn: self.job_queue_arn,
            }
        }
    }
}
impl CreateJobQueueOutput {
    /// Creates a new builder-style object to manufacture [`CreateJobQueueOutput`](crate::output::CreateJobQueueOutput)
    pub fn builder() -> crate::output::create_job_queue_output::Builder {
        crate::output::create_job_queue_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateComputeEnvironmentOutput {
    /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
    /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub compute_environment_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    pub compute_environment_arn: std::option::Option<std::string::String>,
}
impl CreateComputeEnvironmentOutput {
    /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
    /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
    pub fn compute_environment_name(&self) -> std::option::Option<&str> {
        self.compute_environment_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
    pub fn compute_environment_arn(&self) -> std::option::Option<&str> {
        self.compute_environment_arn.as_deref()
    }
}
impl std::fmt::Debug for CreateComputeEnvironmentOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateComputeEnvironmentOutput");
        formatter.field("compute_environment_name", &self.compute_environment_name);
        formatter.field("compute_environment_arn", &self.compute_environment_arn);
        formatter.finish()
    }
}
/// See [`CreateComputeEnvironmentOutput`](crate::output::CreateComputeEnvironmentOutput)
pub mod create_compute_environment_output {
    /// A builder for [`CreateComputeEnvironmentOutput`](crate::output::CreateComputeEnvironmentOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) compute_environment_name: std::option::Option<std::string::String>,
        pub(crate) compute_environment_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
        /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
        pub fn compute_environment_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.compute_environment_name = Some(input.into());
            self
        }
        /// <p>The name of the compute environment. It can be up to 128 letters long. It can contain uppercase and
        /// lowercase letters, numbers, hyphens (-), and underscores (_).</p>
        pub fn set_compute_environment_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.compute_environment_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        pub fn compute_environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.compute_environment_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the compute environment.</p>
        pub fn set_compute_environment_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.compute_environment_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateComputeEnvironmentOutput`](crate::output::CreateComputeEnvironmentOutput)
        pub fn build(self) -> crate::output::CreateComputeEnvironmentOutput {
            crate::output::CreateComputeEnvironmentOutput {
                compute_environment_name: self.compute_environment_name,
                compute_environment_arn: self.compute_environment_arn,
            }
        }
    }
}
impl CreateComputeEnvironmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateComputeEnvironmentOutput`](crate::output::CreateComputeEnvironmentOutput)
    pub fn builder() -> crate::output::create_compute_environment_output::Builder {
        crate::output::create_compute_environment_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelJobOutput {}
impl std::fmt::Debug for CancelJobOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelJobOutput");
        formatter.finish()
    }
}
/// See [`CancelJobOutput`](crate::output::CancelJobOutput)
pub mod cancel_job_output {
    /// A builder for [`CancelJobOutput`](crate::output::CancelJobOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CancelJobOutput`](crate::output::CancelJobOutput)
        pub fn build(self) -> crate::output::CancelJobOutput {
            crate::output::CancelJobOutput {}
        }
    }
}
impl CancelJobOutput {
    /// Creates a new builder-style object to manufacture [`CancelJobOutput`](crate::output::CancelJobOutput)
    pub fn builder() -> crate::output::cancel_job_output::Builder {
        crate::output::cancel_job_output::Builder::default()
    }
}
