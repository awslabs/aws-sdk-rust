// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes event topics.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEventTopicsInput {
    /// <p>The Directory ID for which to get the list of associated Amazon SNS topics. If this member is null, associations for all Directory IDs are returned.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>A list of Amazon SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p>
    /// <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    #[doc(hidden)]
    pub topic_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeEventTopicsInput {
    /// <p>The Directory ID for which to get the list of associated Amazon SNS topics. If this member is null, associations for all Directory IDs are returned.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>A list of Amazon SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p>
    /// <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    pub fn topic_names(&self) -> std::option::Option<&[std::string::String]> {
        self.topic_names.as_deref()
    }
}
impl DescribeEventTopicsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEventTopicsInput`](crate::operation::describe_event_topics::DescribeEventTopicsInput).
    pub fn builder(
    ) -> crate::operation::describe_event_topics::builders::DescribeEventTopicsInputBuilder {
        crate::operation::describe_event_topics::builders::DescribeEventTopicsInputBuilder::default(
        )
    }
}

/// A builder for [`DescribeEventTopicsInput`](crate::operation::describe_event_topics::DescribeEventTopicsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEventTopicsInputBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) topic_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeEventTopicsInputBuilder {
    /// <p>The Directory ID for which to get the list of associated Amazon SNS topics. If this member is null, associations for all Directory IDs are returned.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The Directory ID for which to get the list of associated Amazon SNS topics. If this member is null, associations for all Directory IDs are returned.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// Appends an item to `topic_names`.
    ///
    /// To override the contents of this collection use [`set_topic_names`](Self::set_topic_names).
    ///
    /// <p>A list of Amazon SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p>
    /// <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    pub fn topic_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.topic_names.unwrap_or_default();
        v.push(input.into());
        self.topic_names = Some(v);
        self
    }
    /// <p>A list of Amazon SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned.</p>
    /// <p>An empty list results in an <code>InvalidParameterException</code> being thrown.</p>
    pub fn set_topic_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.topic_names = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEventTopicsInput`](crate::operation::describe_event_topics::DescribeEventTopicsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_event_topics::DescribeEventTopicsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_event_topics::DescribeEventTopicsInput {
                directory_id: self.directory_id,
                topic_names: self.topic_names,
            },
        )
    }
}
