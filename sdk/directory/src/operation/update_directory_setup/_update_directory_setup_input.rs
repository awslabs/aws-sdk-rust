// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDirectorySetupInput {
    /// <p> The identifier of the directory on which you want to perform the update. </p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p> The type of update that needs to be performed on the directory. For example, OS. </p>
    #[doc(hidden)]
    pub update_type: std::option::Option<crate::types::UpdateType>,
    /// <p> The settings for the OS update that needs to be performed on the directory. </p>
    #[doc(hidden)]
    pub os_update_settings: std::option::Option<crate::types::OsUpdateSettings>,
    /// <p> The boolean that specifies if a snapshot for the directory needs to be taken before updating the directory. </p>
    #[doc(hidden)]
    pub create_snapshot_before_update: std::option::Option<bool>,
}
impl UpdateDirectorySetupInput {
    /// <p> The identifier of the directory on which you want to perform the update. </p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p> The type of update that needs to be performed on the directory. For example, OS. </p>
    pub fn update_type(&self) -> std::option::Option<&crate::types::UpdateType> {
        self.update_type.as_ref()
    }
    /// <p> The settings for the OS update that needs to be performed on the directory. </p>
    pub fn os_update_settings(&self) -> std::option::Option<&crate::types::OsUpdateSettings> {
        self.os_update_settings.as_ref()
    }
    /// <p> The boolean that specifies if a snapshot for the directory needs to be taken before updating the directory. </p>
    pub fn create_snapshot_before_update(&self) -> std::option::Option<bool> {
        self.create_snapshot_before_update
    }
}
impl UpdateDirectorySetupInput {
    /// Creates a new builder-style object to manufacture [`UpdateDirectorySetupInput`](crate::operation::update_directory_setup::UpdateDirectorySetupInput).
    pub fn builder(
    ) -> crate::operation::update_directory_setup::builders::UpdateDirectorySetupInputBuilder {
        crate::operation::update_directory_setup::builders::UpdateDirectorySetupInputBuilder::default()
    }
}

/// A builder for [`UpdateDirectorySetupInput`](crate::operation::update_directory_setup::UpdateDirectorySetupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDirectorySetupInputBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) update_type: std::option::Option<crate::types::UpdateType>,
    pub(crate) os_update_settings: std::option::Option<crate::types::OsUpdateSettings>,
    pub(crate) create_snapshot_before_update: std::option::Option<bool>,
}
impl UpdateDirectorySetupInputBuilder {
    /// <p> The identifier of the directory on which you want to perform the update. </p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p> The identifier of the directory on which you want to perform the update. </p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p> The type of update that needs to be performed on the directory. For example, OS. </p>
    pub fn update_type(mut self, input: crate::types::UpdateType) -> Self {
        self.update_type = Some(input);
        self
    }
    /// <p> The type of update that needs to be performed on the directory. For example, OS. </p>
    pub fn set_update_type(mut self, input: std::option::Option<crate::types::UpdateType>) -> Self {
        self.update_type = input;
        self
    }
    /// <p> The settings for the OS update that needs to be performed on the directory. </p>
    pub fn os_update_settings(mut self, input: crate::types::OsUpdateSettings) -> Self {
        self.os_update_settings = Some(input);
        self
    }
    /// <p> The settings for the OS update that needs to be performed on the directory. </p>
    pub fn set_os_update_settings(
        mut self,
        input: std::option::Option<crate::types::OsUpdateSettings>,
    ) -> Self {
        self.os_update_settings = input;
        self
    }
    /// <p> The boolean that specifies if a snapshot for the directory needs to be taken before updating the directory. </p>
    pub fn create_snapshot_before_update(mut self, input: bool) -> Self {
        self.create_snapshot_before_update = Some(input);
        self
    }
    /// <p> The boolean that specifies if a snapshot for the directory needs to be taken before updating the directory. </p>
    pub fn set_create_snapshot_before_update(mut self, input: std::option::Option<bool>) -> Self {
        self.create_snapshot_before_update = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDirectorySetupInput`](crate::operation::update_directory_setup::UpdateDirectorySetupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_directory_setup::UpdateDirectorySetupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_directory_setup::UpdateDirectorySetupInput {
                directory_id: self.directory_id,
                update_type: self.update_type,
                os_update_settings: self.os_update_settings,
                create_snapshot_before_update: self.create_snapshot_before_update,
            },
        )
    }
}
