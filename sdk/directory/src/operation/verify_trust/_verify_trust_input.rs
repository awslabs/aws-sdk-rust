// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Initiates the verification of an existing trust relationship between an Managed Microsoft AD directory and an external domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VerifyTrustInput {
    /// <p>The unique Trust ID of the trust relationship to verify.</p>
    #[doc(hidden)]
    pub trust_id: std::option::Option<std::string::String>,
}
impl VerifyTrustInput {
    /// <p>The unique Trust ID of the trust relationship to verify.</p>
    pub fn trust_id(&self) -> std::option::Option<&str> {
        self.trust_id.as_deref()
    }
}
impl VerifyTrustInput {
    /// Creates a new builder-style object to manufacture [`VerifyTrustInput`](crate::operation::verify_trust::VerifyTrustInput).
    pub fn builder() -> crate::operation::verify_trust::builders::VerifyTrustInputBuilder {
        crate::operation::verify_trust::builders::VerifyTrustInputBuilder::default()
    }
}

/// A builder for [`VerifyTrustInput`](crate::operation::verify_trust::VerifyTrustInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VerifyTrustInputBuilder {
    pub(crate) trust_id: std::option::Option<std::string::String>,
}
impl VerifyTrustInputBuilder {
    /// <p>The unique Trust ID of the trust relationship to verify.</p>
    pub fn trust_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.trust_id = Some(input.into());
        self
    }
    /// <p>The unique Trust ID of the trust relationship to verify.</p>
    pub fn set_trust_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trust_id = input;
        self
    }
    /// Consumes the builder and constructs a [`VerifyTrustInput`](crate::operation::verify_trust::VerifyTrustInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::verify_trust::VerifyTrustInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::verify_trust::VerifyTrustInput {
            trust_id: self.trust_id,
        })
    }
}
