// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ShareDirectoryInput {
    /// <p>Identifier of the Managed Microsoft AD directory that you want to share with other Amazon Web Services accounts.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub share_notes: ::std::option::Option<::std::string::String>,
    /// <p>Identifier for the directory consumer account with whom the directory is to be shared.</p>
    pub share_target: ::std::option::Option<crate::types::ShareTarget>,
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    pub share_method: ::std::option::Option<crate::types::ShareMethod>,
}
impl ShareDirectoryInput {
    /// <p>Identifier of the Managed Microsoft AD directory that you want to share with other Amazon Web Services accounts.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn share_notes(&self) -> ::std::option::Option<&str> {
        self.share_notes.as_deref()
    }
    /// <p>Identifier for the directory consumer account with whom the directory is to be shared.</p>
    pub fn share_target(&self) -> ::std::option::Option<&crate::types::ShareTarget> {
        self.share_target.as_ref()
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    pub fn share_method(&self) -> ::std::option::Option<&crate::types::ShareMethod> {
        self.share_method.as_ref()
    }
}
impl ::std::fmt::Debug for ShareDirectoryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ShareDirectoryInput");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("share_notes", &"*** Sensitive Data Redacted ***");
        formatter.field("share_target", &self.share_target);
        formatter.field("share_method", &self.share_method);
        formatter.finish()
    }
}
impl ShareDirectoryInput {
    /// Creates a new builder-style object to manufacture [`ShareDirectoryInput`](crate::operation::share_directory::ShareDirectoryInput).
    pub fn builder() -> crate::operation::share_directory::builders::ShareDirectoryInputBuilder {
        crate::operation::share_directory::builders::ShareDirectoryInputBuilder::default()
    }
}

/// A builder for [`ShareDirectoryInput`](crate::operation::share_directory::ShareDirectoryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ShareDirectoryInputBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) share_notes: ::std::option::Option<::std::string::String>,
    pub(crate) share_target: ::std::option::Option<crate::types::ShareTarget>,
    pub(crate) share_method: ::std::option::Option<crate::types::ShareMethod>,
}
impl ShareDirectoryInputBuilder {
    /// <p>Identifier of the Managed Microsoft AD directory that you want to share with other Amazon Web Services accounts.</p>
    /// This field is required.
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifier of the Managed Microsoft AD directory that you want to share with other Amazon Web Services accounts.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>Identifier of the Managed Microsoft AD directory that you want to share with other Amazon Web Services accounts.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn share_notes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_notes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn set_share_notes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_notes = input;
        self
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn get_share_notes(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_notes
    }
    /// <p>Identifier for the directory consumer account with whom the directory is to be shared.</p>
    /// This field is required.
    pub fn share_target(mut self, input: crate::types::ShareTarget) -> Self {
        self.share_target = ::std::option::Option::Some(input);
        self
    }
    /// <p>Identifier for the directory consumer account with whom the directory is to be shared.</p>
    pub fn set_share_target(mut self, input: ::std::option::Option<crate::types::ShareTarget>) -> Self {
        self.share_target = input;
        self
    }
    /// <p>Identifier for the directory consumer account with whom the directory is to be shared.</p>
    pub fn get_share_target(&self) -> &::std::option::Option<crate::types::ShareTarget> {
        &self.share_target
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    /// This field is required.
    pub fn share_method(mut self, input: crate::types::ShareMethod) -> Self {
        self.share_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    pub fn set_share_method(mut self, input: ::std::option::Option<crate::types::ShareMethod>) -> Self {
        self.share_method = input;
        self
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a directory sharing request (<code>HANDSHAKE</code>).</p>
    pub fn get_share_method(&self) -> &::std::option::Option<crate::types::ShareMethod> {
        &self.share_method
    }
    /// Consumes the builder and constructs a [`ShareDirectoryInput`](crate::operation::share_directory::ShareDirectoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::share_directory::ShareDirectoryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::share_directory::ShareDirectoryInput {
            directory_id: self.directory_id,
            share_notes: self.share_notes,
            share_target: self.share_target,
            share_method: self.share_method,
        })
    }
}
impl ::std::fmt::Debug for ShareDirectoryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ShareDirectoryInputBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("share_notes", &"*** Sensitive Data Redacted ***");
        formatter.field("share_target", &self.share_target);
        formatter.field("share_method", &self.share_method);
        formatter.finish()
    }
}
