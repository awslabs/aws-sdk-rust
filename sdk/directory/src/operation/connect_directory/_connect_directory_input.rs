// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the inputs for the <code>ConnectDirectory</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConnectDirectoryInput {
    /// <p>The fully qualified name of your self-managed directory, such as <code>corp.example.com</code>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The NetBIOS name of your self-managed directory, such as <code>CORP</code>.</p>
    #[doc(hidden)]
    pub short_name: std::option::Option<std::string::String>,
    /// <p>The password for your self-managed user account.</p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p>A description for the directory.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The size of the directory.</p>
    #[doc(hidden)]
    pub size: std::option::Option<crate::types::DirectorySize>,
    /// <p>A <code>DirectoryConnectSettings</code> object that contains additional information for the operation.</p>
    #[doc(hidden)]
    pub connect_settings: std::option::Option<crate::types::DirectoryConnectSettings>,
    /// <p>The tags to be assigned to AD Connector.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ConnectDirectoryInput {
    /// <p>The fully qualified name of your self-managed directory, such as <code>corp.example.com</code>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The NetBIOS name of your self-managed directory, such as <code>CORP</code>.</p>
    pub fn short_name(&self) -> std::option::Option<&str> {
        self.short_name.as_deref()
    }
    /// <p>The password for your self-managed user account.</p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p>A description for the directory.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The size of the directory.</p>
    pub fn size(&self) -> std::option::Option<&crate::types::DirectorySize> {
        self.size.as_ref()
    }
    /// <p>A <code>DirectoryConnectSettings</code> object that contains additional information for the operation.</p>
    pub fn connect_settings(&self) -> std::option::Option<&crate::types::DirectoryConnectSettings> {
        self.connect_settings.as_ref()
    }
    /// <p>The tags to be assigned to AD Connector.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for ConnectDirectoryInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConnectDirectoryInput");
        formatter.field("name", &self.name);
        formatter.field("short_name", &self.short_name);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("size", &self.size);
        formatter.field("connect_settings", &self.connect_settings);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl ConnectDirectoryInput {
    /// Creates a new builder-style object to manufacture [`ConnectDirectoryInput`](crate::operation::connect_directory::ConnectDirectoryInput).
    pub fn builder() -> crate::operation::connect_directory::builders::ConnectDirectoryInputBuilder
    {
        crate::operation::connect_directory::builders::ConnectDirectoryInputBuilder::default()
    }
}

/// A builder for [`ConnectDirectoryInput`](crate::operation::connect_directory::ConnectDirectoryInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ConnectDirectoryInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) short_name: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) size: std::option::Option<crate::types::DirectorySize>,
    pub(crate) connect_settings: std::option::Option<crate::types::DirectoryConnectSettings>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl ConnectDirectoryInputBuilder {
    /// <p>The fully qualified name of your self-managed directory, such as <code>corp.example.com</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The fully qualified name of your self-managed directory, such as <code>corp.example.com</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The NetBIOS name of your self-managed directory, such as <code>CORP</code>.</p>
    pub fn short_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.short_name = Some(input.into());
        self
    }
    /// <p>The NetBIOS name of your self-managed directory, such as <code>CORP</code>.</p>
    pub fn set_short_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.short_name = input;
        self
    }
    /// <p>The password for your self-managed user account.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>The password for your self-managed user account.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>A description for the directory.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the directory.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The size of the directory.</p>
    pub fn size(mut self, input: crate::types::DirectorySize) -> Self {
        self.size = Some(input);
        self
    }
    /// <p>The size of the directory.</p>
    pub fn set_size(mut self, input: std::option::Option<crate::types::DirectorySize>) -> Self {
        self.size = input;
        self
    }
    /// <p>A <code>DirectoryConnectSettings</code> object that contains additional information for the operation.</p>
    pub fn connect_settings(mut self, input: crate::types::DirectoryConnectSettings) -> Self {
        self.connect_settings = Some(input);
        self
    }
    /// <p>A <code>DirectoryConnectSettings</code> object that contains additional information for the operation.</p>
    pub fn set_connect_settings(
        mut self,
        input: std::option::Option<crate::types::DirectoryConnectSettings>,
    ) -> Self {
        self.connect_settings = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to AD Connector.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to be assigned to AD Connector.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectDirectoryInput`](crate::operation::connect_directory::ConnectDirectoryInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::connect_directory::ConnectDirectoryInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::connect_directory::ConnectDirectoryInput {
            name: self.name,
            short_name: self.short_name,
            password: self.password,
            description: self.description,
            size: self.size,
            connect_settings: self.connect_settings,
            tags: self.tags,
        })
    }
}
impl std::fmt::Debug for ConnectDirectoryInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConnectDirectoryInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("short_name", &self.short_name);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &self.description);
        formatter.field("size", &self.size);
        formatter.field("connect_settings", &self.connect_settings);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
