// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of the <code>ConnectDirectory</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectDirectoryOutput {
    /// <p>The identifier of the new directory.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ConnectDirectoryOutput {
    /// <p>The identifier of the new directory.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ConnectDirectoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ConnectDirectoryOutput {
    /// Creates a new builder-style object to manufacture [`ConnectDirectoryOutput`](crate::operation::connect_directory::ConnectDirectoryOutput).
    pub fn builder() -> crate::operation::connect_directory::builders::ConnectDirectoryOutputBuilder
    {
        crate::operation::connect_directory::builders::ConnectDirectoryOutputBuilder::default()
    }
}

/// A builder for [`ConnectDirectoryOutput`](crate::operation::connect_directory::ConnectDirectoryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectDirectoryOutputBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ConnectDirectoryOutputBuilder {
    /// <p>The identifier of the new directory.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the new directory.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ConnectDirectoryOutput`](crate::operation::connect_directory::ConnectDirectoryOutput).
    pub fn build(self) -> crate::operation::connect_directory::ConnectDirectoryOutput {
        crate::operation::connect_directory::ConnectDirectoryOutput {
            directory_id: self.directory_id,
            _request_id: self._request_id,
        }
    }
}
