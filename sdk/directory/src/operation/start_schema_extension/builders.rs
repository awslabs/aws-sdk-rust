// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_schema_extension::_start_schema_extension_output::StartSchemaExtensionOutputBuilder;

pub use crate::operation::start_schema_extension::_start_schema_extension_input::StartSchemaExtensionInputBuilder;

/// Fluent builder constructing a request to `StartSchemaExtension`.
///
/// <p>Applies a schema extension to a Microsoft AD directory.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartSchemaExtensionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_schema_extension::builders::StartSchemaExtensionInputBuilder,
}
impl StartSchemaExtensionFluentBuilder {
    /// Creates a new `StartSchemaExtension`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_schema_extension::StartSchemaExtension,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_schema_extension::StartSchemaExtensionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_schema_extension::StartSchemaExtensionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_schema_extension::StartSchemaExtensionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier of the directory for which the schema extension will be applied to.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.directory_id(input.into());
        self
    }
    /// <p>The identifier of the directory for which the schema extension will be applied to.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_directory_id(input);
        self
    }
    /// <p>If true, creates a snapshot of the directory before applying the schema extension.</p>
    pub fn create_snapshot_before_schema_extension(mut self, input: bool) -> Self {
        self.inner = self.inner.create_snapshot_before_schema_extension(input);
        self
    }
    /// <p>If true, creates a snapshot of the directory before applying the schema extension.</p>
    pub fn set_create_snapshot_before_schema_extension(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self
            .inner
            .set_create_snapshot_before_schema_extension(input);
        self
    }
    /// <p>The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.</p>
    pub fn ldif_content(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ldif_content(input.into());
        self
    }
    /// <p>The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.</p>
    pub fn set_ldif_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ldif_content(input);
        self
    }
    /// <p>A description of the schema extension.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the schema extension.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
}
