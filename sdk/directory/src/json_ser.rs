// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_accept_shared_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptSharedDirectoryInput,
) {
    if let Some(var_1) = &input.shared_directory_id {
        object.key("SharedDirectoryId").string(var_1);
    }
}

pub fn serialize_structure_add_ip_routes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddIpRoutesInput,
) {
    if let Some(var_2) = &input.directory_id {
        object.key("DirectoryId").string(var_2);
    }
    if let Some(var_3) = &input.ip_routes {
        let mut array_4 = object.key("IpRoutes").start_array();
        for item_5 in var_3 {
            {
                let mut object_6 = array_4.value().start_object();
                crate::json_ser::serialize_structure_ip_route(&mut object_6, item_5);
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if input.update_security_group_for_directory_controllers {
        object
            .key("UpdateSecurityGroupForDirectoryControllers")
            .boolean(input.update_security_group_for_directory_controllers);
    }
}

pub fn serialize_structure_add_region_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddRegionInput,
) {
    if let Some(var_7) = &input.directory_id {
        object.key("DirectoryId").string(var_7);
    }
    if let Some(var_8) = &input.region_name {
        object.key("RegionName").string(var_8);
    }
    if let Some(var_9) = &input.vpc_settings {
        let mut object_10 = object.key("VPCSettings").start_object();
        crate::json_ser::serialize_structure_directory_vpc_settings(&mut object_10, var_9);
        object_10.finish();
    }
}

pub fn serialize_structure_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_11) = &input.resource_id {
        object.key("ResourceId").string(var_11);
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                let mut object_15 = array_13.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_15, item_14);
                object_15.finish();
            }
        }
        array_13.finish();
    }
}

pub fn serialize_structure_cancel_schema_extension_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelSchemaExtensionInput,
) {
    if let Some(var_16) = &input.directory_id {
        object.key("DirectoryId").string(var_16);
    }
    if let Some(var_17) = &input.schema_extension_id {
        object.key("SchemaExtensionId").string(var_17);
    }
}

pub fn serialize_structure_connect_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ConnectDirectoryInput,
) {
    if let Some(var_18) = &input.name {
        object.key("Name").string(var_18);
    }
    if let Some(var_19) = &input.short_name {
        object.key("ShortName").string(var_19);
    }
    if let Some(var_20) = &input.password {
        object.key("Password").string(var_20);
    }
    if let Some(var_21) = &input.description {
        object.key("Description").string(var_21);
    }
    if let Some(var_22) = &input.size {
        object.key("Size").string(var_22.as_str());
    }
    if let Some(var_23) = &input.connect_settings {
        let mut object_24 = object.key("ConnectSettings").start_object();
        crate::json_ser::serialize_structure_directory_connect_settings(&mut object_24, var_23);
        object_24.finish();
    }
    if let Some(var_25) = &input.tags {
        let mut array_26 = object.key("Tags").start_array();
        for item_27 in var_25 {
            {
                let mut object_28 = array_26.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_28, item_27);
                object_28.finish();
            }
        }
        array_26.finish();
    }
}

pub fn serialize_structure_create_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAliasInput,
) {
    if let Some(var_29) = &input.directory_id {
        object.key("DirectoryId").string(var_29);
    }
    if let Some(var_30) = &input.alias {
        object.key("Alias").string(var_30);
    }
}

pub fn serialize_structure_create_computer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateComputerInput,
) {
    if let Some(var_31) = &input.directory_id {
        object.key("DirectoryId").string(var_31);
    }
    if let Some(var_32) = &input.computer_name {
        object.key("ComputerName").string(var_32);
    }
    if let Some(var_33) = &input.password {
        object.key("Password").string(var_33);
    }
    if let Some(var_34) = &input.organizational_unit_distinguished_name {
        object
            .key("OrganizationalUnitDistinguishedName")
            .string(var_34);
    }
    if let Some(var_35) = &input.computer_attributes {
        let mut array_36 = object.key("ComputerAttributes").start_array();
        for item_37 in var_35 {
            {
                let mut object_38 = array_36.value().start_object();
                crate::json_ser::serialize_structure_attribute(&mut object_38, item_37);
                object_38.finish();
            }
        }
        array_36.finish();
    }
}

pub fn serialize_structure_create_conditional_forwarder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConditionalForwarderInput,
) {
    if let Some(var_39) = &input.directory_id {
        object.key("DirectoryId").string(var_39);
    }
    if let Some(var_40) = &input.remote_domain_name {
        object.key("RemoteDomainName").string(var_40);
    }
    if let Some(var_41) = &input.dns_ip_addrs {
        let mut array_42 = object.key("DnsIpAddrs").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43);
            }
        }
        array_42.finish();
    }
}

pub fn serialize_structure_create_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDirectoryInput,
) {
    if let Some(var_44) = &input.name {
        object.key("Name").string(var_44);
    }
    if let Some(var_45) = &input.short_name {
        object.key("ShortName").string(var_45);
    }
    if let Some(var_46) = &input.password {
        object.key("Password").string(var_46);
    }
    if let Some(var_47) = &input.description {
        object.key("Description").string(var_47);
    }
    if let Some(var_48) = &input.size {
        object.key("Size").string(var_48.as_str());
    }
    if let Some(var_49) = &input.vpc_settings {
        let mut object_50 = object.key("VpcSettings").start_object();
        crate::json_ser::serialize_structure_directory_vpc_settings(&mut object_50, var_49);
        object_50.finish();
    }
    if let Some(var_51) = &input.tags {
        let mut array_52 = object.key("Tags").start_array();
        for item_53 in var_51 {
            {
                let mut object_54 = array_52.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_54, item_53);
                object_54.finish();
            }
        }
        array_52.finish();
    }
}

pub fn serialize_structure_create_log_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLogSubscriptionInput,
) {
    if let Some(var_55) = &input.directory_id {
        object.key("DirectoryId").string(var_55);
    }
    if let Some(var_56) = &input.log_group_name {
        object.key("LogGroupName").string(var_56);
    }
}

pub fn serialize_structure_create_microsoft_ad_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateMicrosoftAdInput,
) {
    if let Some(var_57) = &input.name {
        object.key("Name").string(var_57);
    }
    if let Some(var_58) = &input.short_name {
        object.key("ShortName").string(var_58);
    }
    if let Some(var_59) = &input.password {
        object.key("Password").string(var_59);
    }
    if let Some(var_60) = &input.description {
        object.key("Description").string(var_60);
    }
    if let Some(var_61) = &input.vpc_settings {
        let mut object_62 = object.key("VpcSettings").start_object();
        crate::json_ser::serialize_structure_directory_vpc_settings(&mut object_62, var_61);
        object_62.finish();
    }
    if let Some(var_63) = &input.edition {
        object.key("Edition").string(var_63.as_str());
    }
    if let Some(var_64) = &input.tags {
        let mut array_65 = object.key("Tags").start_array();
        for item_66 in var_64 {
            {
                let mut object_67 = array_65.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_67, item_66);
                object_67.finish();
            }
        }
        array_65.finish();
    }
}

pub fn serialize_structure_create_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotInput,
) {
    if let Some(var_68) = &input.directory_id {
        object.key("DirectoryId").string(var_68);
    }
    if let Some(var_69) = &input.name {
        object.key("Name").string(var_69);
    }
}

pub fn serialize_structure_create_trust_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTrustInput,
) {
    if let Some(var_70) = &input.directory_id {
        object.key("DirectoryId").string(var_70);
    }
    if let Some(var_71) = &input.remote_domain_name {
        object.key("RemoteDomainName").string(var_71);
    }
    if let Some(var_72) = &input.trust_password {
        object.key("TrustPassword").string(var_72);
    }
    if let Some(var_73) = &input.trust_direction {
        object.key("TrustDirection").string(var_73.as_str());
    }
    if let Some(var_74) = &input.trust_type {
        object.key("TrustType").string(var_74.as_str());
    }
    if let Some(var_75) = &input.conditional_forwarder_ip_addrs {
        let mut array_76 = object.key("ConditionalForwarderIpAddrs").start_array();
        for item_77 in var_75 {
            {
                array_76.value().string(item_77);
            }
        }
        array_76.finish();
    }
    if let Some(var_78) = &input.selective_auth {
        object.key("SelectiveAuth").string(var_78.as_str());
    }
}

pub fn serialize_structure_delete_conditional_forwarder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConditionalForwarderInput,
) {
    if let Some(var_79) = &input.directory_id {
        object.key("DirectoryId").string(var_79);
    }
    if let Some(var_80) = &input.remote_domain_name {
        object.key("RemoteDomainName").string(var_80);
    }
}

pub fn serialize_structure_delete_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDirectoryInput,
) {
    if let Some(var_81) = &input.directory_id {
        object.key("DirectoryId").string(var_81);
    }
}

pub fn serialize_structure_delete_log_subscription_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLogSubscriptionInput,
) {
    if let Some(var_82) = &input.directory_id {
        object.key("DirectoryId").string(var_82);
    }
}

pub fn serialize_structure_delete_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSnapshotInput,
) {
    if let Some(var_83) = &input.snapshot_id {
        object.key("SnapshotId").string(var_83);
    }
}

pub fn serialize_structure_delete_trust_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTrustInput,
) {
    if let Some(var_84) = &input.trust_id {
        object.key("TrustId").string(var_84);
    }
    if input.delete_associated_conditional_forwarder {
        object
            .key("DeleteAssociatedConditionalForwarder")
            .boolean(input.delete_associated_conditional_forwarder);
    }
}

pub fn serialize_structure_deregister_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterCertificateInput,
) {
    if let Some(var_85) = &input.directory_id {
        object.key("DirectoryId").string(var_85);
    }
    if let Some(var_86) = &input.certificate_id {
        object.key("CertificateId").string(var_86);
    }
}

pub fn serialize_structure_deregister_event_topic_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterEventTopicInput,
) {
    if let Some(var_87) = &input.directory_id {
        object.key("DirectoryId").string(var_87);
    }
    if let Some(var_88) = &input.topic_name {
        object.key("TopicName").string(var_88);
    }
}

pub fn serialize_structure_describe_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCertificateInput,
) {
    if let Some(var_89) = &input.directory_id {
        object.key("DirectoryId").string(var_89);
    }
    if let Some(var_90) = &input.certificate_id {
        object.key("CertificateId").string(var_90);
    }
}

pub fn serialize_structure_describe_conditional_forwarders_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConditionalForwardersInput,
) {
    if let Some(var_91) = &input.directory_id {
        object.key("DirectoryId").string(var_91);
    }
    if let Some(var_92) = &input.remote_domain_names {
        let mut array_93 = object.key("RemoteDomainNames").start_array();
        for item_94 in var_92 {
            {
                array_93.value().string(item_94);
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_describe_directories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDirectoriesInput,
) {
    if let Some(var_95) = &input.directory_ids {
        let mut array_96 = object.key("DirectoryIds").start_array();
        for item_97 in var_95 {
            {
                array_96.value().string(item_97);
            }
        }
        array_96.finish();
    }
    if let Some(var_98) = &input.next_token {
        object.key("NextToken").string(var_98);
    }
    if let Some(var_99) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_99).into()),
        );
    }
}

pub fn serialize_structure_describe_domain_controllers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainControllersInput,
) {
    if let Some(var_100) = &input.directory_id {
        object.key("DirectoryId").string(var_100);
    }
    if let Some(var_101) = &input.domain_controller_ids {
        let mut array_102 = object.key("DomainControllerIds").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
    if let Some(var_104) = &input.next_token {
        object.key("NextToken").string(var_104);
    }
    if let Some(var_105) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_105).into()),
        );
    }
}

pub fn serialize_structure_describe_event_topics_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeEventTopicsInput,
) {
    if let Some(var_106) = &input.directory_id {
        object.key("DirectoryId").string(var_106);
    }
    if let Some(var_107) = &input.topic_names {
        let mut array_108 = object.key("TopicNames").start_array();
        for item_109 in var_107 {
            {
                array_108.value().string(item_109);
            }
        }
        array_108.finish();
    }
}

pub fn serialize_structure_describe_ldaps_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeLdapsSettingsInput,
) {
    if let Some(var_110) = &input.directory_id {
        object.key("DirectoryId").string(var_110);
    }
    if let Some(var_111) = &input.r#type {
        object.key("Type").string(var_111.as_str());
    }
    if let Some(var_112) = &input.next_token {
        object.key("NextToken").string(var_112);
    }
    if let Some(var_113) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_113).into()),
        );
    }
}

pub fn serialize_structure_describe_regions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRegionsInput,
) {
    if let Some(var_114) = &input.directory_id {
        object.key("DirectoryId").string(var_114);
    }
    if let Some(var_115) = &input.region_name {
        object.key("RegionName").string(var_115);
    }
    if let Some(var_116) = &input.next_token {
        object.key("NextToken").string(var_116);
    }
}

pub fn serialize_structure_describe_shared_directories_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSharedDirectoriesInput,
) {
    if let Some(var_117) = &input.owner_directory_id {
        object.key("OwnerDirectoryId").string(var_117);
    }
    if let Some(var_118) = &input.shared_directory_ids {
        let mut array_119 = object.key("SharedDirectoryIds").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120);
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.next_token {
        object.key("NextToken").string(var_121);
    }
    if let Some(var_122) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_122).into()),
        );
    }
}

pub fn serialize_structure_describe_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSnapshotsInput,
) {
    if let Some(var_123) = &input.directory_id {
        object.key("DirectoryId").string(var_123);
    }
    if let Some(var_124) = &input.snapshot_ids {
        let mut array_125 = object.key("SnapshotIds").start_array();
        for item_126 in var_124 {
            {
                array_125.value().string(item_126);
            }
        }
        array_125.finish();
    }
    if let Some(var_127) = &input.next_token {
        object.key("NextToken").string(var_127);
    }
    if let Some(var_128) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_describe_trusts_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTrustsInput,
) {
    if let Some(var_129) = &input.directory_id {
        object.key("DirectoryId").string(var_129);
    }
    if let Some(var_130) = &input.trust_ids {
        let mut array_131 = object.key("TrustIds").start_array();
        for item_132 in var_130 {
            {
                array_131.value().string(item_132);
            }
        }
        array_131.finish();
    }
    if let Some(var_133) = &input.next_token {
        object.key("NextToken").string(var_133);
    }
    if let Some(var_134) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_134).into()),
        );
    }
}

pub fn serialize_structure_disable_client_authentication_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableClientAuthenticationInput,
) {
    if let Some(var_135) = &input.directory_id {
        object.key("DirectoryId").string(var_135);
    }
    if let Some(var_136) = &input.r#type {
        object.key("Type").string(var_136.as_str());
    }
}

pub fn serialize_structure_disable_ldaps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableLdapsInput,
) {
    if let Some(var_137) = &input.directory_id {
        object.key("DirectoryId").string(var_137);
    }
    if let Some(var_138) = &input.r#type {
        object.key("Type").string(var_138.as_str());
    }
}

pub fn serialize_structure_disable_radius_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableRadiusInput,
) {
    if let Some(var_139) = &input.directory_id {
        object.key("DirectoryId").string(var_139);
    }
}

pub fn serialize_structure_disable_sso_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableSsoInput,
) {
    if let Some(var_140) = &input.directory_id {
        object.key("DirectoryId").string(var_140);
    }
    if let Some(var_141) = &input.user_name {
        object.key("UserName").string(var_141);
    }
    if let Some(var_142) = &input.password {
        object.key("Password").string(var_142);
    }
}

pub fn serialize_structure_enable_client_authentication_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableClientAuthenticationInput,
) {
    if let Some(var_143) = &input.directory_id {
        object.key("DirectoryId").string(var_143);
    }
    if let Some(var_144) = &input.r#type {
        object.key("Type").string(var_144.as_str());
    }
}

pub fn serialize_structure_enable_ldaps_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableLdapsInput,
) {
    if let Some(var_145) = &input.directory_id {
        object.key("DirectoryId").string(var_145);
    }
    if let Some(var_146) = &input.r#type {
        object.key("Type").string(var_146.as_str());
    }
}

pub fn serialize_structure_enable_radius_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableRadiusInput,
) {
    if let Some(var_147) = &input.directory_id {
        object.key("DirectoryId").string(var_147);
    }
    if let Some(var_148) = &input.radius_settings {
        let mut object_149 = object.key("RadiusSettings").start_object();
        crate::json_ser::serialize_structure_radius_settings(&mut object_149, var_148);
        object_149.finish();
    }
}

pub fn serialize_structure_enable_sso_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::EnableSsoInput,
) {
    if let Some(var_150) = &input.directory_id {
        object.key("DirectoryId").string(var_150);
    }
    if let Some(var_151) = &input.user_name {
        object.key("UserName").string(var_151);
    }
    if let Some(var_152) = &input.password {
        object.key("Password").string(var_152);
    }
}

pub fn serialize_structure_get_snapshot_limits_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetSnapshotLimitsInput,
) {
    if let Some(var_153) = &input.directory_id {
        object.key("DirectoryId").string(var_153);
    }
}

pub fn serialize_structure_list_certificates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListCertificatesInput,
) {
    if let Some(var_154) = &input.directory_id {
        object.key("DirectoryId").string(var_154);
    }
    if let Some(var_155) = &input.next_token {
        object.key("NextToken").string(var_155);
    }
    if let Some(var_156) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_156).into()),
        );
    }
}

pub fn serialize_structure_list_ip_routes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListIpRoutesInput,
) {
    if let Some(var_157) = &input.directory_id {
        object.key("DirectoryId").string(var_157);
    }
    if let Some(var_158) = &input.next_token {
        object.key("NextToken").string(var_158);
    }
    if let Some(var_159) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_159).into()),
        );
    }
}

pub fn serialize_structure_list_log_subscriptions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLogSubscriptionsInput,
) {
    if let Some(var_160) = &input.directory_id {
        object.key("DirectoryId").string(var_160);
    }
    if let Some(var_161) = &input.next_token {
        object.key("NextToken").string(var_161);
    }
    if let Some(var_162) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_162).into()),
        );
    }
}

pub fn serialize_structure_list_schema_extensions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSchemaExtensionsInput,
) {
    if let Some(var_163) = &input.directory_id {
        object.key("DirectoryId").string(var_163);
    }
    if let Some(var_164) = &input.next_token {
        object.key("NextToken").string(var_164);
    }
    if let Some(var_165) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_165).into()),
        );
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_166) = &input.resource_id {
        object.key("ResourceId").string(var_166);
    }
    if let Some(var_167) = &input.next_token {
        object.key("NextToken").string(var_167);
    }
    if let Some(var_168) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
}

pub fn serialize_structure_register_certificate_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterCertificateInput,
) {
    if let Some(var_169) = &input.directory_id {
        object.key("DirectoryId").string(var_169);
    }
    if let Some(var_170) = &input.certificate_data {
        object.key("CertificateData").string(var_170);
    }
    if let Some(var_171) = &input.r#type {
        object.key("Type").string(var_171.as_str());
    }
    if let Some(var_172) = &input.client_cert_auth_settings {
        let mut object_173 = object.key("ClientCertAuthSettings").start_object();
        crate::json_ser::serialize_structure_client_cert_auth_settings(&mut object_173, var_172);
        object_173.finish();
    }
}

pub fn serialize_structure_register_event_topic_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterEventTopicInput,
) {
    if let Some(var_174) = &input.directory_id {
        object.key("DirectoryId").string(var_174);
    }
    if let Some(var_175) = &input.topic_name {
        object.key("TopicName").string(var_175);
    }
}

pub fn serialize_structure_reject_shared_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectSharedDirectoryInput,
) {
    if let Some(var_176) = &input.shared_directory_id {
        object.key("SharedDirectoryId").string(var_176);
    }
}

pub fn serialize_structure_remove_ip_routes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveIpRoutesInput,
) {
    if let Some(var_177) = &input.directory_id {
        object.key("DirectoryId").string(var_177);
    }
    if let Some(var_178) = &input.cidr_ips {
        let mut array_179 = object.key("CidrIps").start_array();
        for item_180 in var_178 {
            {
                array_179.value().string(item_180);
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_remove_region_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveRegionInput,
) {
    if let Some(var_181) = &input.directory_id {
        object.key("DirectoryId").string(var_181);
    }
}

pub fn serialize_structure_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_182) = &input.resource_id {
        object.key("ResourceId").string(var_182);
    }
    if let Some(var_183) = &input.tag_keys {
        let mut array_184 = object.key("TagKeys").start_array();
        for item_185 in var_183 {
            {
                array_184.value().string(item_185);
            }
        }
        array_184.finish();
    }
}

pub fn serialize_structure_reset_user_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetUserPasswordInput,
) {
    if let Some(var_186) = &input.directory_id {
        object.key("DirectoryId").string(var_186);
    }
    if let Some(var_187) = &input.user_name {
        object.key("UserName").string(var_187);
    }
    if let Some(var_188) = &input.new_password {
        object.key("NewPassword").string(var_188);
    }
}

pub fn serialize_structure_restore_from_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreFromSnapshotInput,
) {
    if let Some(var_189) = &input.snapshot_id {
        object.key("SnapshotId").string(var_189);
    }
}

pub fn serialize_structure_share_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ShareDirectoryInput,
) {
    if let Some(var_190) = &input.directory_id {
        object.key("DirectoryId").string(var_190);
    }
    if let Some(var_191) = &input.share_notes {
        object.key("ShareNotes").string(var_191);
    }
    if let Some(var_192) = &input.share_target {
        let mut object_193 = object.key("ShareTarget").start_object();
        crate::json_ser::serialize_structure_share_target(&mut object_193, var_192);
        object_193.finish();
    }
    if let Some(var_194) = &input.share_method {
        object.key("ShareMethod").string(var_194.as_str());
    }
}

pub fn serialize_structure_start_schema_extension_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSchemaExtensionInput,
) {
    if let Some(var_195) = &input.directory_id {
        object.key("DirectoryId").string(var_195);
    }
    {
        object
            .key("CreateSnapshotBeforeSchemaExtension")
            .boolean(input.create_snapshot_before_schema_extension);
    }
    if let Some(var_196) = &input.ldif_content {
        object.key("LdifContent").string(var_196);
    }
    if let Some(var_197) = &input.description {
        object.key("Description").string(var_197);
    }
}

pub fn serialize_structure_unshare_directory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UnshareDirectoryInput,
) {
    if let Some(var_198) = &input.directory_id {
        object.key("DirectoryId").string(var_198);
    }
    if let Some(var_199) = &input.unshare_target {
        let mut object_200 = object.key("UnshareTarget").start_object();
        crate::json_ser::serialize_structure_unshare_target(&mut object_200, var_199);
        object_200.finish();
    }
}

pub fn serialize_structure_update_conditional_forwarder_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConditionalForwarderInput,
) {
    if let Some(var_201) = &input.directory_id {
        object.key("DirectoryId").string(var_201);
    }
    if let Some(var_202) = &input.remote_domain_name {
        object.key("RemoteDomainName").string(var_202);
    }
    if let Some(var_203) = &input.dns_ip_addrs {
        let mut array_204 = object.key("DnsIpAddrs").start_array();
        for item_205 in var_203 {
            {
                array_204.value().string(item_205);
            }
        }
        array_204.finish();
    }
}

pub fn serialize_structure_update_number_of_domain_controllers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNumberOfDomainControllersInput,
) {
    if let Some(var_206) = &input.directory_id {
        object.key("DirectoryId").string(var_206);
    }
    {
        object.key("DesiredNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.desired_number).into()),
        );
    }
}

pub fn serialize_structure_update_radius_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRadiusInput,
) {
    if let Some(var_207) = &input.directory_id {
        object.key("DirectoryId").string(var_207);
    }
    if let Some(var_208) = &input.radius_settings {
        let mut object_209 = object.key("RadiusSettings").start_object();
        crate::json_ser::serialize_structure_radius_settings(&mut object_209, var_208);
        object_209.finish();
    }
}

pub fn serialize_structure_update_trust_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateTrustInput,
) {
    if let Some(var_210) = &input.trust_id {
        object.key("TrustId").string(var_210);
    }
    if let Some(var_211) = &input.selective_auth {
        object.key("SelectiveAuth").string(var_211.as_str());
    }
}

pub fn serialize_structure_verify_trust_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::VerifyTrustInput,
) {
    if let Some(var_212) = &input.trust_id {
        object.key("TrustId").string(var_212);
    }
}

pub fn serialize_structure_ip_route(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IpRoute,
) {
    if let Some(var_213) = &input.cidr_ip {
        object.key("CidrIp").string(var_213);
    }
    if let Some(var_214) = &input.description {
        object.key("Description").string(var_214);
    }
}

pub fn serialize_structure_directory_vpc_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectoryVpcSettings,
) {
    if let Some(var_215) = &input.vpc_id {
        object.key("VpcId").string(var_215);
    }
    if let Some(var_216) = &input.subnet_ids {
        let mut array_217 = object.key("SubnetIds").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218);
            }
        }
        array_217.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_219) = &input.key {
        object.key("Key").string(var_219);
    }
    if let Some(var_220) = &input.value {
        object.key("Value").string(var_220);
    }
}

pub fn serialize_structure_directory_connect_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DirectoryConnectSettings,
) {
    if let Some(var_221) = &input.vpc_id {
        object.key("VpcId").string(var_221);
    }
    if let Some(var_222) = &input.subnet_ids {
        let mut array_223 = object.key("SubnetIds").start_array();
        for item_224 in var_222 {
            {
                array_223.value().string(item_224);
            }
        }
        array_223.finish();
    }
    if let Some(var_225) = &input.customer_dns_ips {
        let mut array_226 = object.key("CustomerDnsIps").start_array();
        for item_227 in var_225 {
            {
                array_226.value().string(item_227);
            }
        }
        array_226.finish();
    }
    if let Some(var_228) = &input.customer_user_name {
        object.key("CustomerUserName").string(var_228);
    }
}

pub fn serialize_structure_attribute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Attribute,
) {
    if let Some(var_229) = &input.name {
        object.key("Name").string(var_229);
    }
    if let Some(var_230) = &input.value {
        object.key("Value").string(var_230);
    }
}

pub fn serialize_structure_radius_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RadiusSettings,
) {
    if let Some(var_231) = &input.radius_servers {
        let mut array_232 = object.key("RadiusServers").start_array();
        for item_233 in var_231 {
            {
                array_232.value().string(item_233);
            }
        }
        array_232.finish();
    }
    if input.radius_port != 0 {
        object.key("RadiusPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.radius_port).into()),
        );
    }
    if input.radius_timeout != 0 {
        object.key("RadiusTimeout").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.radius_timeout).into()),
        );
    }
    if input.radius_retries != 0 {
        object.key("RadiusRetries").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.radius_retries).into()),
        );
    }
    if let Some(var_234) = &input.shared_secret {
        object.key("SharedSecret").string(var_234);
    }
    if let Some(var_235) = &input.authentication_protocol {
        object
            .key("AuthenticationProtocol")
            .string(var_235.as_str());
    }
    if let Some(var_236) = &input.display_label {
        object.key("DisplayLabel").string(var_236);
    }
    if input.use_same_username {
        object
            .key("UseSameUsername")
            .boolean(input.use_same_username);
    }
}

pub fn serialize_structure_client_cert_auth_settings(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientCertAuthSettings,
) {
    if let Some(var_237) = &input.ocsp_url {
        object.key("OCSPUrl").string(var_237);
    }
}

pub fn serialize_structure_share_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ShareTarget,
) {
    if let Some(var_238) = &input.id {
        object.key("Id").string(var_238);
    }
    if let Some(var_239) = &input.r#type {
        object.key("Type").string(var_239.as_str());
    }
}

pub fn serialize_structure_unshare_target(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UnshareTarget,
) {
    if let Some(var_240) = &input.id {
        object.key("Id").string(var_240);
    }
    if let Some(var_241) = &input.r#type {
        object.key("Type").string(var_241.as_str());
    }
}
