// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Accepts a directory sharing request that was sent from the directory owner account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptSharedDirectory {
    _private: (),
}
impl AcceptSharedDirectory {
    /// Creates a new builder-style object to manufacture [`AcceptSharedDirectoryInput`](crate::input::AcceptSharedDirectoryInput)
    pub fn builder() -> crate::input::accept_shared_directory_input::Builder {
        crate::input::accept_shared_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptSharedDirectory {
    type Output = std::result::Result<
        crate::output::AcceptSharedDirectoryOutput,
        crate::error::AcceptSharedDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_shared_directory_error(response)
        } else {
            crate::operation_deser::parse_accept_shared_directory_response(response)
        }
    }
}

/// <p>If the DNS server for your self-managed domain uses a publicly addressable IP address,
/// you must add a CIDR address block to correctly route traffic to and from your Microsoft AD
/// on Amazon Web Services. <i>AddIpRoutes</i> adds this address block. You can
/// also use <i>AddIpRoutes</i> to facilitate routing traffic that uses public IP
/// ranges from your Microsoft AD on Amazon Web Services to a peer VPC. </p>
/// <p>Before you call <i>AddIpRoutes</i>, ensure that all of the required
/// permissions have been explicitly granted through a policy. For details about what
/// permissions are required to run the <i>AddIpRoutes</i> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddIpRoutes {
    _private: (),
}
impl AddIpRoutes {
    /// Creates a new builder-style object to manufacture [`AddIpRoutesInput`](crate::input::AddIpRoutesInput)
    pub fn builder() -> crate::input::add_ip_routes_input::Builder {
        crate::input::add_ip_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddIpRoutes {
    type Output =
        std::result::Result<crate::output::AddIpRoutesOutput, crate::error::AddIpRoutesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_ip_routes_error(response)
        } else {
            crate::operation_deser::parse_add_ip_routes_response(response)
        }
    }
}

/// <p>Adds two domain controllers in the specified Region for the specified directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddRegion {
    _private: (),
}
impl AddRegion {
    /// Creates a new builder-style object to manufacture [`AddRegionInput`](crate::input::AddRegionInput)
    pub fn builder() -> crate::input::add_region_input::Builder {
        crate::input::add_region_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddRegion {
    type Output = std::result::Result<crate::output::AddRegionOutput, crate::error::AddRegionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_region_error(response)
        } else {
            crate::operation_deser::parse_add_region_response(response)
        }
    }
}

/// <p>Adds or overwrites one or more tags for the specified directory. Each directory can
/// have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be
/// unique to each resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_add_tags_to_resource_error(response)
        } else {
            crate::operation_deser::parse_add_tags_to_resource_response(response)
        }
    }
}

/// <p>Cancels an in-progress schema extension to a Microsoft AD directory. Once a schema
/// extension has started replicating to all domain controllers, the task can no longer be
/// canceled. A schema extension can be canceled during any of the following states;
/// <code>Initializing</code>, <code>CreatingSnapshot</code>, and
/// <code>UpdatingSchema</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CancelSchemaExtension {
    _private: (),
}
impl CancelSchemaExtension {
    /// Creates a new builder-style object to manufacture [`CancelSchemaExtensionInput`](crate::input::CancelSchemaExtensionInput)
    pub fn builder() -> crate::input::cancel_schema_extension_input::Builder {
        crate::input::cancel_schema_extension_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CancelSchemaExtension {
    type Output = std::result::Result<
        crate::output::CancelSchemaExtensionOutput,
        crate::error::CancelSchemaExtensionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_cancel_schema_extension_error(response)
        } else {
            crate::operation_deser::parse_cancel_schema_extension_response(response)
        }
    }
}

/// <p>Creates an AD Connector to connect to a self-managed directory.</p>
/// <p>Before you call <code>ConnectDirectory</code>, ensure that all of the required permissions
/// have been explicitly granted through a policy. For details about what permissions are required
/// to run the <code>ConnectDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
/// Reference</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConnectDirectory {
    _private: (),
}
impl ConnectDirectory {
    /// Creates a new builder-style object to manufacture [`ConnectDirectoryInput`](crate::input::ConnectDirectoryInput)
    pub fn builder() -> crate::input::connect_directory_input::Builder {
        crate::input::connect_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConnectDirectory {
    type Output = std::result::Result<
        crate::output::ConnectDirectoryOutput,
        crate::error::ConnectDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_connect_directory_error(response)
        } else {
            crate::operation_deser::parse_connect_directory_response(response)
        }
    }
}

/// <p>Creates an alias for a directory and assigns the alias to the directory. The alias is used
/// to construct the access URL for the directory, such as
/// <code>http://<alias>.awsapps.com</code>.</p>
/// <important>
/// <p>After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAlias {
    _private: (),
}
impl CreateAlias {
    /// Creates a new builder-style object to manufacture [`CreateAliasInput`](crate::input::CreateAliasInput)
    pub fn builder() -> crate::input::create_alias_input::Builder {
        crate::input::create_alias_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAlias {
    type Output =
        std::result::Result<crate::output::CreateAliasOutput, crate::error::CreateAliasError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_alias_error(response)
        } else {
            crate::operation_deser::parse_create_alias_response(response)
        }
    }
}

/// <p>Creates an Active Directory computer object in the specified directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateComputer {
    _private: (),
}
impl CreateComputer {
    /// Creates a new builder-style object to manufacture [`CreateComputerInput`](crate::input::CreateComputerInput)
    pub fn builder() -> crate::input::create_computer_input::Builder {
        crate::input::create_computer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateComputer {
    type Output =
        std::result::Result<crate::output::CreateComputerOutput, crate::error::CreateComputerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_computer_error(response)
        } else {
            crate::operation_deser::parse_create_computer_response(response)
        }
    }
}

/// <p>Creates a conditional forwarder associated with your Amazon Web Services directory. Conditional
/// forwarders are required in order to set up a trust relationship with another domain. The
/// conditional forwarder points to the trusted domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConditionalForwarder {
    _private: (),
}
impl CreateConditionalForwarder {
    /// Creates a new builder-style object to manufacture [`CreateConditionalForwarderInput`](crate::input::CreateConditionalForwarderInput)
    pub fn builder() -> crate::input::create_conditional_forwarder_input::Builder {
        crate::input::create_conditional_forwarder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConditionalForwarder {
    type Output = std::result::Result<
        crate::output::CreateConditionalForwarderOutput,
        crate::error::CreateConditionalForwarderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_conditional_forwarder_error(response)
        } else {
            crate::operation_deser::parse_create_conditional_forwarder_response(response)
        }
    }
}

/// <p>Creates a Simple AD directory. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_simple_ad.html">Simple Active Directory</a> in the <i>Directory Service Admin
/// Guide</i>.</p>
/// <p>Before you call <code>CreateDirectory</code>, ensure that all of the required permissions
/// have been explicitly granted through a policy. For details about what permissions are required
/// to run the <code>CreateDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
/// Reference</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectory {
    _private: (),
}
impl CreateDirectory {
    /// Creates a new builder-style object to manufacture [`CreateDirectoryInput`](crate::input::CreateDirectoryInput)
    pub fn builder() -> crate::input::create_directory_input::Builder {
        crate::input::create_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDirectory {
    type Output = std::result::Result<
        crate::output::CreateDirectoryOutput,
        crate::error::CreateDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_directory_error(response)
        } else {
            crate::operation_deser::parse_create_directory_response(response)
        }
    }
}

/// <p>Creates a subscription to forward real-time Directory Service domain controller security
/// logs to the specified Amazon CloudWatch log group in your Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLogSubscription {
    _private: (),
}
impl CreateLogSubscription {
    /// Creates a new builder-style object to manufacture [`CreateLogSubscriptionInput`](crate::input::CreateLogSubscriptionInput)
    pub fn builder() -> crate::input::create_log_subscription_input::Builder {
        crate::input::create_log_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLogSubscription {
    type Output = std::result::Result<
        crate::output::CreateLogSubscriptionOutput,
        crate::error::CreateLogSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_log_subscription_error(response)
        } else {
            crate::operation_deser::parse_create_log_subscription_response(response)
        }
    }
}

/// <p>Creates a Microsoft AD directory in the Amazon Web Services Cloud. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html">Managed Microsoft AD</a> in the <i>Directory Service Admin Guide</i>.</p>
/// <p>Before you call <i>CreateMicrosoftAD</i>, ensure that all of the required
/// permissions have been explicitly granted through a policy. For details about what permissions
/// are required to run the <i>CreateMicrosoftAD</i> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions Reference</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateMicrosoftAD {
    _private: (),
}
impl CreateMicrosoftAD {
    /// Creates a new builder-style object to manufacture [`CreateMicrosoftAdInput`](crate::input::CreateMicrosoftAdInput)
    pub fn builder() -> crate::input::create_microsoft_ad_input::Builder {
        crate::input::create_microsoft_ad_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateMicrosoftAD {
    type Output = std::result::Result<
        crate::output::CreateMicrosoftAdOutput,
        crate::error::CreateMicrosoftADError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_microsoft_ad_error(response)
        } else {
            crate::operation_deser::parse_create_microsoft_ad_response(response)
        }
    }
}

/// <p>Creates a snapshot of a Simple AD or Microsoft AD directory in the Amazon Web Services cloud.</p>
/// <note>
/// <p>You cannot take snapshots of AD Connector directories.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateSnapshot {
    _private: (),
}
impl CreateSnapshot {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotInput`](crate::input::CreateSnapshotInput)
    pub fn builder() -> crate::input::create_snapshot_input::Builder {
        crate::input::create_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateSnapshot {
    type Output =
        std::result::Result<crate::output::CreateSnapshotOutput, crate::error::CreateSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_snapshot_error(response)
        } else {
            crate::operation_deser::parse_create_snapshot_response(response)
        }
    }
}

/// <p>Directory Service for Microsoft Active Directory allows you to configure trust relationships. For
/// example, you can establish a trust between your Managed Microsoft AD directory, and your existing
/// self-managed Microsoft Active Directory. This would allow you to provide users and groups
/// access to resources in either domain, with a single set of credentials.</p>
/// <p>This action initiates the creation of the Amazon Web Services side of a trust relationship between an
/// Managed Microsoft AD directory and an external domain. You can create either a forest trust or an
/// external trust.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTrust {
    _private: (),
}
impl CreateTrust {
    /// Creates a new builder-style object to manufacture [`CreateTrustInput`](crate::input::CreateTrustInput)
    pub fn builder() -> crate::input::create_trust_input::Builder {
        crate::input::create_trust_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTrust {
    type Output =
        std::result::Result<crate::output::CreateTrustOutput, crate::error::CreateTrustError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_trust_error(response)
        } else {
            crate::operation_deser::parse_create_trust_response(response)
        }
    }
}

/// <p>Deletes a conditional forwarder that has been set up for your Amazon Web Services
/// directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConditionalForwarder {
    _private: (),
}
impl DeleteConditionalForwarder {
    /// Creates a new builder-style object to manufacture [`DeleteConditionalForwarderInput`](crate::input::DeleteConditionalForwarderInput)
    pub fn builder() -> crate::input::delete_conditional_forwarder_input::Builder {
        crate::input::delete_conditional_forwarder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConditionalForwarder {
    type Output = std::result::Result<
        crate::output::DeleteConditionalForwarderOutput,
        crate::error::DeleteConditionalForwarderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_conditional_forwarder_error(response)
        } else {
            crate::operation_deser::parse_delete_conditional_forwarder_response(response)
        }
    }
}

/// <p>Deletes an Directory Service directory.</p>
/// <p>Before you call <code>DeleteDirectory</code>, ensure that all of the required permissions
/// have been explicitly granted through a policy. For details about what permissions are required
/// to run the <code>DeleteDirectory</code> operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
/// Reference</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectory {
    _private: (),
}
impl DeleteDirectory {
    /// Creates a new builder-style object to manufacture [`DeleteDirectoryInput`](crate::input::DeleteDirectoryInput)
    pub fn builder() -> crate::input::delete_directory_input::Builder {
        crate::input::delete_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDirectory {
    type Output = std::result::Result<
        crate::output::DeleteDirectoryOutput,
        crate::error::DeleteDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_directory_error(response)
        } else {
            crate::operation_deser::parse_delete_directory_response(response)
        }
    }
}

/// <p>Deletes the specified log subscription.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLogSubscription {
    _private: (),
}
impl DeleteLogSubscription {
    /// Creates a new builder-style object to manufacture [`DeleteLogSubscriptionInput`](crate::input::DeleteLogSubscriptionInput)
    pub fn builder() -> crate::input::delete_log_subscription_input::Builder {
        crate::input::delete_log_subscription_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLogSubscription {
    type Output = std::result::Result<
        crate::output::DeleteLogSubscriptionOutput,
        crate::error::DeleteLogSubscriptionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_log_subscription_error(response)
        } else {
            crate::operation_deser::parse_delete_log_subscription_response(response)
        }
    }
}

/// <p>Deletes a directory snapshot.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSnapshot {
    _private: (),
}
impl DeleteSnapshot {
    /// Creates a new builder-style object to manufacture [`DeleteSnapshotInput`](crate::input::DeleteSnapshotInput)
    pub fn builder() -> crate::input::delete_snapshot_input::Builder {
        crate::input::delete_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteSnapshot {
    type Output =
        std::result::Result<crate::output::DeleteSnapshotOutput, crate::error::DeleteSnapshotError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_snapshot_error(response)
        } else {
            crate::operation_deser::parse_delete_snapshot_response(response)
        }
    }
}

/// <p>Deletes an existing trust relationship between your Managed Microsoft AD directory and an external
/// domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteTrust {
    _private: (),
}
impl DeleteTrust {
    /// Creates a new builder-style object to manufacture [`DeleteTrustInput`](crate::input::DeleteTrustInput)
    pub fn builder() -> crate::input::delete_trust_input::Builder {
        crate::input::delete_trust_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteTrust {
    type Output =
        std::result::Result<crate::output::DeleteTrustOutput, crate::error::DeleteTrustError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_trust_error(response)
        } else {
            crate::operation_deser::parse_delete_trust_response(response)
        }
    }
}

/// <p>Deletes from the system the certificate that was registered for secure LDAP or client certificate authentication.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterCertificate {
    _private: (),
}
impl DeregisterCertificate {
    /// Creates a new builder-style object to manufacture [`DeregisterCertificateInput`](crate::input::DeregisterCertificateInput)
    pub fn builder() -> crate::input::deregister_certificate_input::Builder {
        crate::input::deregister_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterCertificate {
    type Output = std::result::Result<
        crate::output::DeregisterCertificateOutput,
        crate::error::DeregisterCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_certificate_error(response)
        } else {
            crate::operation_deser::parse_deregister_certificate_response(response)
        }
    }
}

/// <p>Removes the specified directory as a publisher to the specified Amazon SNS topic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterEventTopic {
    _private: (),
}
impl DeregisterEventTopic {
    /// Creates a new builder-style object to manufacture [`DeregisterEventTopicInput`](crate::input::DeregisterEventTopicInput)
    pub fn builder() -> crate::input::deregister_event_topic_input::Builder {
        crate::input::deregister_event_topic_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterEventTopic {
    type Output = std::result::Result<
        crate::output::DeregisterEventTopicOutput,
        crate::error::DeregisterEventTopicError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_event_topic_error(response)
        } else {
            crate::operation_deser::parse_deregister_event_topic_response(response)
        }
    }
}

/// <p>Displays information about the certificate registered for secure LDAP or client certificate authentication.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeCertificate {
    _private: (),
}
impl DescribeCertificate {
    /// Creates a new builder-style object to manufacture [`DescribeCertificateInput`](crate::input::DescribeCertificateInput)
    pub fn builder() -> crate::input::describe_certificate_input::Builder {
        crate::input::describe_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeCertificate {
    type Output = std::result::Result<
        crate::output::DescribeCertificateOutput,
        crate::error::DescribeCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_certificate_error(response)
        } else {
            crate::operation_deser::parse_describe_certificate_response(response)
        }
    }
}

/// <p>Retrieves information about the type of client authentication for the specified directory, if the type is specified. If no type is specified, information about all client authentication types that are supported for the specified directory is retrieved. Currently, only <code>SmartCard</code> is supported.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeClientAuthenticationSettings {
    _private: (),
}
impl DescribeClientAuthenticationSettings {
    /// Creates a new builder-style object to manufacture [`DescribeClientAuthenticationSettingsInput`](crate::input::DescribeClientAuthenticationSettingsInput)
    pub fn builder() -> crate::input::describe_client_authentication_settings_input::Builder {
        crate::input::describe_client_authentication_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeClientAuthenticationSettings {
    type Output = std::result::Result<
        crate::output::DescribeClientAuthenticationSettingsOutput,
        crate::error::DescribeClientAuthenticationSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_client_authentication_settings_error(response)
        } else {
            crate::operation_deser::parse_describe_client_authentication_settings_response(response)
        }
    }
}

/// <p>Obtains information about the conditional forwarders for this account.</p>
/// <p>If no input parameters are provided for RemoteDomainNames, this request describes all
/// conditional forwarders for the specified directory ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConditionalForwarders {
    _private: (),
}
impl DescribeConditionalForwarders {
    /// Creates a new builder-style object to manufacture [`DescribeConditionalForwardersInput`](crate::input::DescribeConditionalForwardersInput)
    pub fn builder() -> crate::input::describe_conditional_forwarders_input::Builder {
        crate::input::describe_conditional_forwarders_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConditionalForwarders {
    type Output = std::result::Result<
        crate::output::DescribeConditionalForwardersOutput,
        crate::error::DescribeConditionalForwardersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_conditional_forwarders_error(response)
        } else {
            crate::operation_deser::parse_describe_conditional_forwarders_response(response)
        }
    }
}

/// <p>Obtains information about the directories that belong to this account.</p>
/// <p>You can retrieve information about specific directories by passing the directory
/// identifiers in the <code>DirectoryIds</code> parameter. Otherwise, all directories that belong
/// to the current account are returned.</p>
/// <p>This operation supports pagination with the use of the <code>NextToken</code> request and
/// response parameters. If more results are available, the
/// <code>DescribeDirectoriesResult.NextToken</code> member contains a token that you pass in
/// the next call to <a>DescribeDirectories</a> to retrieve the next set of
/// items.</p>
/// <p>You can also specify a maximum number of return results with the <code>Limit</code>
/// parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectories {
    _private: (),
}
impl DescribeDirectories {
    /// Creates a new builder-style object to manufacture [`DescribeDirectoriesInput`](crate::input::DescribeDirectoriesInput)
    pub fn builder() -> crate::input::describe_directories_input::Builder {
        crate::input::describe_directories_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDirectories {
    type Output = std::result::Result<
        crate::output::DescribeDirectoriesOutput,
        crate::error::DescribeDirectoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_directories_error(response)
        } else {
            crate::operation_deser::parse_describe_directories_response(response)
        }
    }
}

/// <p>Provides information about any domain controllers in your directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDomainControllers {
    _private: (),
}
impl DescribeDomainControllers {
    /// Creates a new builder-style object to manufacture [`DescribeDomainControllersInput`](crate::input::DescribeDomainControllersInput)
    pub fn builder() -> crate::input::describe_domain_controllers_input::Builder {
        crate::input::describe_domain_controllers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDomainControllers {
    type Output = std::result::Result<
        crate::output::DescribeDomainControllersOutput,
        crate::error::DescribeDomainControllersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_domain_controllers_error(response)
        } else {
            crate::operation_deser::parse_describe_domain_controllers_response(response)
        }
    }
}

/// <p>Obtains information about which Amazon SNS topics receive status messages from the specified
/// directory.</p>
/// <p>If no input parameters are provided, such as DirectoryId or TopicName, this request
/// describes all of the associations in the account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEventTopics {
    _private: (),
}
impl DescribeEventTopics {
    /// Creates a new builder-style object to manufacture [`DescribeEventTopicsInput`](crate::input::DescribeEventTopicsInput)
    pub fn builder() -> crate::input::describe_event_topics_input::Builder {
        crate::input::describe_event_topics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeEventTopics {
    type Output = std::result::Result<
        crate::output::DescribeEventTopicsOutput,
        crate::error::DescribeEventTopicsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_event_topics_error(response)
        } else {
            crate::operation_deser::parse_describe_event_topics_response(response)
        }
    }
}

/// <p>Describes the status of LDAP security for the specified directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLDAPSSettings {
    _private: (),
}
impl DescribeLDAPSSettings {
    /// Creates a new builder-style object to manufacture [`DescribeLdapsSettingsInput`](crate::input::DescribeLdapsSettingsInput)
    pub fn builder() -> crate::input::describe_ldaps_settings_input::Builder {
        crate::input::describe_ldaps_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLDAPSSettings {
    type Output = std::result::Result<
        crate::output::DescribeLdapsSettingsOutput,
        crate::error::DescribeLDAPSSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_ldaps_settings_error(response)
        } else {
            crate::operation_deser::parse_describe_ldaps_settings_response(response)
        }
    }
}

/// <p>Provides information about the Regions that are configured for multi-Region
/// replication.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeRegions {
    _private: (),
}
impl DescribeRegions {
    /// Creates a new builder-style object to manufacture [`DescribeRegionsInput`](crate::input::DescribeRegionsInput)
    pub fn builder() -> crate::input::describe_regions_input::Builder {
        crate::input::describe_regions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeRegions {
    type Output = std::result::Result<
        crate::output::DescribeRegionsOutput,
        crate::error::DescribeRegionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_regions_error(response)
        } else {
            crate::operation_deser::parse_describe_regions_response(response)
        }
    }
}

/// <p>Returns the shared directories in your account. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSharedDirectories {
    _private: (),
}
impl DescribeSharedDirectories {
    /// Creates a new builder-style object to manufacture [`DescribeSharedDirectoriesInput`](crate::input::DescribeSharedDirectoriesInput)
    pub fn builder() -> crate::input::describe_shared_directories_input::Builder {
        crate::input::describe_shared_directories_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSharedDirectories {
    type Output = std::result::Result<
        crate::output::DescribeSharedDirectoriesOutput,
        crate::error::DescribeSharedDirectoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_shared_directories_error(response)
        } else {
            crate::operation_deser::parse_describe_shared_directories_response(response)
        }
    }
}

/// <p>Obtains information about the directory snapshots that belong to this account.</p>
/// <p>This operation supports pagination with the use of the <i>NextToken</i> request and
/// response parameters. If more results are available, the <i>DescribeSnapshots.NextToken</i>
/// member contains a token that you pass in the next call to <a>DescribeSnapshots</a> to
/// retrieve the next set of items.</p>
/// <p>You can also specify a maximum number of return results with the <i>Limit</i>
/// parameter.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSnapshots {
    _private: (),
}
impl DescribeSnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotsInput`](crate::input::DescribeSnapshotsInput)
    pub fn builder() -> crate::input::describe_snapshots_input::Builder {
        crate::input::describe_snapshots_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeSnapshots {
    type Output = std::result::Result<
        crate::output::DescribeSnapshotsOutput,
        crate::error::DescribeSnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_snapshots_error(response)
        } else {
            crate::operation_deser::parse_describe_snapshots_response(response)
        }
    }
}

/// <p>Obtains information about the trust relationships for this account.</p>
/// <p>If no input parameters are provided, such as DirectoryId or TrustIds, this request
/// describes all the trust relationships belonging to the account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTrusts {
    _private: (),
}
impl DescribeTrusts {
    /// Creates a new builder-style object to manufacture [`DescribeTrustsInput`](crate::input::DescribeTrustsInput)
    pub fn builder() -> crate::input::describe_trusts_input::Builder {
        crate::input::describe_trusts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTrusts {
    type Output =
        std::result::Result<crate::output::DescribeTrustsOutput, crate::error::DescribeTrustsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_trusts_error(response)
        } else {
            crate::operation_deser::parse_describe_trusts_response(response)
        }
    }
}

/// <p>Disables alternative client authentication methods for the specified directory. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableClientAuthentication {
    _private: (),
}
impl DisableClientAuthentication {
    /// Creates a new builder-style object to manufacture [`DisableClientAuthenticationInput`](crate::input::DisableClientAuthenticationInput)
    pub fn builder() -> crate::input::disable_client_authentication_input::Builder {
        crate::input::disable_client_authentication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableClientAuthentication {
    type Output = std::result::Result<
        crate::output::DisableClientAuthenticationOutput,
        crate::error::DisableClientAuthenticationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_client_authentication_error(response)
        } else {
            crate::operation_deser::parse_disable_client_authentication_response(response)
        }
    }
}

/// <p>Deactivates LDAP secure calls for the specified directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableLDAPS {
    _private: (),
}
impl DisableLDAPS {
    /// Creates a new builder-style object to manufacture [`DisableLdapsInput`](crate::input::DisableLdapsInput)
    pub fn builder() -> crate::input::disable_ldaps_input::Builder {
        crate::input::disable_ldaps_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableLDAPS {
    type Output =
        std::result::Result<crate::output::DisableLdapsOutput, crate::error::DisableLDAPSError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_ldaps_error(response)
        } else {
            crate::operation_deser::parse_disable_ldaps_response(response)
        }
    }
}

/// <p>Disables multi-factor authentication (MFA) with the Remote Authentication Dial In
/// User Service (RADIUS) server for an AD Connector or Microsoft AD directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableRadius {
    _private: (),
}
impl DisableRadius {
    /// Creates a new builder-style object to manufacture [`DisableRadiusInput`](crate::input::DisableRadiusInput)
    pub fn builder() -> crate::input::disable_radius_input::Builder {
        crate::input::disable_radius_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableRadius {
    type Output =
        std::result::Result<crate::output::DisableRadiusOutput, crate::error::DisableRadiusError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_radius_error(response)
        } else {
            crate::operation_deser::parse_disable_radius_response(response)
        }
    }
}

/// <p>Disables single-sign on for a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisableSso {
    _private: (),
}
impl DisableSso {
    /// Creates a new builder-style object to manufacture [`DisableSsoInput`](crate::input::DisableSsoInput)
    pub fn builder() -> crate::input::disable_sso_input::Builder {
        crate::input::disable_sso_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisableSso {
    type Output =
        std::result::Result<crate::output::DisableSsoOutput, crate::error::DisableSsoError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disable_sso_error(response)
        } else {
            crate::operation_deser::parse_disable_sso_response(response)
        }
    }
}

/// <p>Enables alternative client authentication methods for the specified directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableClientAuthentication {
    _private: (),
}
impl EnableClientAuthentication {
    /// Creates a new builder-style object to manufacture [`EnableClientAuthenticationInput`](crate::input::EnableClientAuthenticationInput)
    pub fn builder() -> crate::input::enable_client_authentication_input::Builder {
        crate::input::enable_client_authentication_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableClientAuthentication {
    type Output = std::result::Result<
        crate::output::EnableClientAuthenticationOutput,
        crate::error::EnableClientAuthenticationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_client_authentication_error(response)
        } else {
            crate::operation_deser::parse_enable_client_authentication_response(response)
        }
    }
}

/// <p>Activates the switch for the specific directory to always use LDAP secure calls.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableLDAPS {
    _private: (),
}
impl EnableLDAPS {
    /// Creates a new builder-style object to manufacture [`EnableLdapsInput`](crate::input::EnableLdapsInput)
    pub fn builder() -> crate::input::enable_ldaps_input::Builder {
        crate::input::enable_ldaps_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableLDAPS {
    type Output =
        std::result::Result<crate::output::EnableLdapsOutput, crate::error::EnableLDAPSError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_ldaps_error(response)
        } else {
            crate::operation_deser::parse_enable_ldaps_response(response)
        }
    }
}

/// <p>Enables multi-factor authentication (MFA) with the Remote Authentication Dial In User
/// Service (RADIUS) server for an AD Connector or Microsoft AD directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableRadius {
    _private: (),
}
impl EnableRadius {
    /// Creates a new builder-style object to manufacture [`EnableRadiusInput`](crate::input::EnableRadiusInput)
    pub fn builder() -> crate::input::enable_radius_input::Builder {
        crate::input::enable_radius_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableRadius {
    type Output =
        std::result::Result<crate::output::EnableRadiusOutput, crate::error::EnableRadiusError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_radius_error(response)
        } else {
            crate::operation_deser::parse_enable_radius_response(response)
        }
    }
}

/// <p>Enables single sign-on for a directory. Single sign-on allows users in your directory to
/// access certain Amazon Web Services services from a computer joined to the directory without having to enter
/// their credentials separately.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct EnableSso {
    _private: (),
}
impl EnableSso {
    /// Creates a new builder-style object to manufacture [`EnableSsoInput`](crate::input::EnableSsoInput)
    pub fn builder() -> crate::input::enable_sso_input::Builder {
        crate::input::enable_sso_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for EnableSso {
    type Output = std::result::Result<crate::output::EnableSsoOutput, crate::error::EnableSsoError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_enable_sso_error(response)
        } else {
            crate::operation_deser::parse_enable_sso_response(response)
        }
    }
}

/// <p>Obtains directory limit information for the current Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDirectoryLimits {
    _private: (),
}
impl GetDirectoryLimits {
    /// Creates a new builder-style object to manufacture [`GetDirectoryLimitsInput`](crate::input::GetDirectoryLimitsInput)
    pub fn builder() -> crate::input::get_directory_limits_input::Builder {
        crate::input::get_directory_limits_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDirectoryLimits {
    type Output = std::result::Result<
        crate::output::GetDirectoryLimitsOutput,
        crate::error::GetDirectoryLimitsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_directory_limits_error(response)
        } else {
            crate::operation_deser::parse_get_directory_limits_response(response)
        }
    }
}

/// <p>Obtains the manual snapshot limits for a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSnapshotLimits {
    _private: (),
}
impl GetSnapshotLimits {
    /// Creates a new builder-style object to manufacture [`GetSnapshotLimitsInput`](crate::input::GetSnapshotLimitsInput)
    pub fn builder() -> crate::input::get_snapshot_limits_input::Builder {
        crate::input::get_snapshot_limits_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSnapshotLimits {
    type Output = std::result::Result<
        crate::output::GetSnapshotLimitsOutput,
        crate::error::GetSnapshotLimitsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_snapshot_limits_error(response)
        } else {
            crate::operation_deser::parse_get_snapshot_limits_response(response)
        }
    }
}

/// <p>For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListCertificates {
    _private: (),
}
impl ListCertificates {
    /// Creates a new builder-style object to manufacture [`ListCertificatesInput`](crate::input::ListCertificatesInput)
    pub fn builder() -> crate::input::list_certificates_input::Builder {
        crate::input::list_certificates_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListCertificates {
    type Output = std::result::Result<
        crate::output::ListCertificatesOutput,
        crate::error::ListCertificatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_certificates_error(response)
        } else {
            crate::operation_deser::parse_list_certificates_response(response)
        }
    }
}

/// <p>Lists the address blocks that you have added to a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListIpRoutes {
    _private: (),
}
impl ListIpRoutes {
    /// Creates a new builder-style object to manufacture [`ListIpRoutesInput`](crate::input::ListIpRoutesInput)
    pub fn builder() -> crate::input::list_ip_routes_input::Builder {
        crate::input::list_ip_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListIpRoutes {
    type Output =
        std::result::Result<crate::output::ListIpRoutesOutput, crate::error::ListIpRoutesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_ip_routes_error(response)
        } else {
            crate::operation_deser::parse_list_ip_routes_response(response)
        }
    }
}

/// <p>Lists the active log subscriptions for the Amazon Web Services account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListLogSubscriptions {
    _private: (),
}
impl ListLogSubscriptions {
    /// Creates a new builder-style object to manufacture [`ListLogSubscriptionsInput`](crate::input::ListLogSubscriptionsInput)
    pub fn builder() -> crate::input::list_log_subscriptions_input::Builder {
        crate::input::list_log_subscriptions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListLogSubscriptions {
    type Output = std::result::Result<
        crate::output::ListLogSubscriptionsOutput,
        crate::error::ListLogSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_log_subscriptions_error(response)
        } else {
            crate::operation_deser::parse_list_log_subscriptions_response(response)
        }
    }
}

/// <p>Lists all schema extensions applied to a Microsoft AD Directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListSchemaExtensions {
    _private: (),
}
impl ListSchemaExtensions {
    /// Creates a new builder-style object to manufacture [`ListSchemaExtensionsInput`](crate::input::ListSchemaExtensionsInput)
    pub fn builder() -> crate::input::list_schema_extensions_input::Builder {
        crate::input::list_schema_extensions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListSchemaExtensions {
    type Output = std::result::Result<
        crate::output::ListSchemaExtensionsOutput,
        crate::error::ListSchemaExtensionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_schema_extensions_error(response)
        } else {
            crate::operation_deser::parse_list_schema_extensions_response(response)
        }
    }
}

/// <p>Lists all tags on a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Registers a certificate for a secure LDAP or client certificate authentication.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterCertificate {
    _private: (),
}
impl RegisterCertificate {
    /// Creates a new builder-style object to manufacture [`RegisterCertificateInput`](crate::input::RegisterCertificateInput)
    pub fn builder() -> crate::input::register_certificate_input::Builder {
        crate::input::register_certificate_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterCertificate {
    type Output = std::result::Result<
        crate::output::RegisterCertificateOutput,
        crate::error::RegisterCertificateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_certificate_error(response)
        } else {
            crate::operation_deser::parse_register_certificate_response(response)
        }
    }
}

/// <p>Associates a directory with an Amazon SNS topic. This establishes the directory as a
/// publisher to the specified Amazon SNS topic. You can then receive email or text (SMS) messages when
/// the status of your directory changes. You get notified if your directory goes from an Active
/// status to an Impaired or Inoperable status. You also receive a notification when the directory
/// returns to an Active status.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterEventTopic {
    _private: (),
}
impl RegisterEventTopic {
    /// Creates a new builder-style object to manufacture [`RegisterEventTopicInput`](crate::input::RegisterEventTopicInput)
    pub fn builder() -> crate::input::register_event_topic_input::Builder {
        crate::input::register_event_topic_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterEventTopic {
    type Output = std::result::Result<
        crate::output::RegisterEventTopicOutput,
        crate::error::RegisterEventTopicError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_event_topic_error(response)
        } else {
            crate::operation_deser::parse_register_event_topic_response(response)
        }
    }
}

/// <p>Rejects a directory sharing request that was sent from the directory owner account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RejectSharedDirectory {
    _private: (),
}
impl RejectSharedDirectory {
    /// Creates a new builder-style object to manufacture [`RejectSharedDirectoryInput`](crate::input::RejectSharedDirectoryInput)
    pub fn builder() -> crate::input::reject_shared_directory_input::Builder {
        crate::input::reject_shared_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RejectSharedDirectory {
    type Output = std::result::Result<
        crate::output::RejectSharedDirectoryOutput,
        crate::error::RejectSharedDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reject_shared_directory_error(response)
        } else {
            crate::operation_deser::parse_reject_shared_directory_response(response)
        }
    }
}

/// <p>Removes IP address blocks from a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveIpRoutes {
    _private: (),
}
impl RemoveIpRoutes {
    /// Creates a new builder-style object to manufacture [`RemoveIpRoutesInput`](crate::input::RemoveIpRoutesInput)
    pub fn builder() -> crate::input::remove_ip_routes_input::Builder {
        crate::input::remove_ip_routes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveIpRoutes {
    type Output =
        std::result::Result<crate::output::RemoveIpRoutesOutput, crate::error::RemoveIpRoutesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_ip_routes_error(response)
        } else {
            crate::operation_deser::parse_remove_ip_routes_response(response)
        }
    }
}

/// <p>Stops all replication and removes the domain controllers from the specified Region. You
/// cannot remove the primary Region with this operation. Instead, use the
/// <code>DeleteDirectory</code> API.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveRegion {
    _private: (),
}
impl RemoveRegion {
    /// Creates a new builder-style object to manufacture [`RemoveRegionInput`](crate::input::RemoveRegionInput)
    pub fn builder() -> crate::input::remove_region_input::Builder {
        crate::input::remove_region_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveRegion {
    type Output =
        std::result::Result<crate::output::RemoveRegionOutput, crate::error::RemoveRegionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_region_error(response)
        } else {
            crate::operation_deser::parse_remove_region_response(response)
        }
    }
}

/// <p>Removes tags from a directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_remove_tags_from_resource_error(response)
        } else {
            crate::operation_deser::parse_remove_tags_from_resource_response(response)
        }
    }
}

/// <p>Resets the password for any user in your Managed Microsoft AD or Simple AD
/// directory.</p>
/// <p>You can reset the password for any user in your directory with the following
/// exceptions:</p>
/// <ul>
/// <li>
/// <p>For Simple AD, you cannot reset the password for any user that is a member of either
/// the <b>Domain Admins</b> or <b>Enterprise
/// Admins</b> group except for the administrator user.</p>
/// </li>
/// <li>
/// <p>For Managed Microsoft AD, you can only reset the password for a user that is in an
/// OU based off of the NetBIOS name that you typed when you created your directory. For
/// example, you cannot reset the password for a user in the <b>Amazon Web Services
/// Reserved</b> OU. For more information about the OU structure for an Managed Microsoft AD directory, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ms_ad_getting_started_what_gets_created.html">What Gets Created</a> in the <i>Directory Service Administration
/// Guide</i>.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ResetUserPassword {
    _private: (),
}
impl ResetUserPassword {
    /// Creates a new builder-style object to manufacture [`ResetUserPasswordInput`](crate::input::ResetUserPasswordInput)
    pub fn builder() -> crate::input::reset_user_password_input::Builder {
        crate::input::reset_user_password_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ResetUserPassword {
    type Output = std::result::Result<
        crate::output::ResetUserPasswordOutput,
        crate::error::ResetUserPasswordError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_reset_user_password_error(response)
        } else {
            crate::operation_deser::parse_reset_user_password_response(response)
        }
    }
}

/// <p>Restores a directory using an existing directory snapshot.</p>
/// <p>When you restore a directory from a snapshot, any changes made to the directory after the snapshot date are overwritten.</p>
/// <p>This action returns as soon as the restore operation is initiated. You can monitor the
/// progress of the restore operation by calling the <a>DescribeDirectories</a> operation with
/// the directory identifier. When the <b>DirectoryDescription.Stage</b> value changes to
/// <code>Active</code>, the restore operation is complete.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RestoreFromSnapshot {
    _private: (),
}
impl RestoreFromSnapshot {
    /// Creates a new builder-style object to manufacture [`RestoreFromSnapshotInput`](crate::input::RestoreFromSnapshotInput)
    pub fn builder() -> crate::input::restore_from_snapshot_input::Builder {
        crate::input::restore_from_snapshot_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RestoreFromSnapshot {
    type Output = std::result::Result<
        crate::output::RestoreFromSnapshotOutput,
        crate::error::RestoreFromSnapshotError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_restore_from_snapshot_error(response)
        } else {
            crate::operation_deser::parse_restore_from_snapshot_response(response)
        }
    }
}

/// <p>Shares a specified directory (<code>DirectoryId</code>) in your Amazon Web Services account (directory
/// owner) with another Amazon Web Services account (directory consumer). With this operation you can use your
/// directory from any Amazon Web Services account and from any Amazon VPC within an Amazon Web Services Region.</p>
/// <p>When you share your Managed Microsoft AD directory, Directory Service creates a
/// shared directory in the directory consumer account. This shared directory contains the
/// metadata to provide access to the directory within the directory owner account. The shared
/// directory is visible in all VPCs in the directory consumer account.</p>
/// <p>The <code>ShareMethod</code> parameter determines whether the specified directory can be
/// shared between Amazon Web Services accounts inside the same Amazon Web Services organization (<code>ORGANIZATIONS</code>). It
/// also determines whether you can share the directory with any other Amazon Web Services account either inside
/// or outside of the organization (<code>HANDSHAKE</code>).</p>
/// <p>The <code>ShareNotes</code> parameter is only used when <code>HANDSHAKE</code> is called,
/// which sends a directory sharing request to the directory consumer. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ShareDirectory {
    _private: (),
}
impl ShareDirectory {
    /// Creates a new builder-style object to manufacture [`ShareDirectoryInput`](crate::input::ShareDirectoryInput)
    pub fn builder() -> crate::input::share_directory_input::Builder {
        crate::input::share_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ShareDirectory {
    type Output =
        std::result::Result<crate::output::ShareDirectoryOutput, crate::error::ShareDirectoryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_share_directory_error(response)
        } else {
            crate::operation_deser::parse_share_directory_response(response)
        }
    }
}

/// <p>Applies a schema extension to a Microsoft AD directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartSchemaExtension {
    _private: (),
}
impl StartSchemaExtension {
    /// Creates a new builder-style object to manufacture [`StartSchemaExtensionInput`](crate::input::StartSchemaExtensionInput)
    pub fn builder() -> crate::input::start_schema_extension_input::Builder {
        crate::input::start_schema_extension_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartSchemaExtension {
    type Output = std::result::Result<
        crate::output::StartSchemaExtensionOutput,
        crate::error::StartSchemaExtensionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_schema_extension_error(response)
        } else {
            crate::operation_deser::parse_start_schema_extension_response(response)
        }
    }
}

/// <p>Stops the directory sharing between the directory owner and consumer accounts. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnshareDirectory {
    _private: (),
}
impl UnshareDirectory {
    /// Creates a new builder-style object to manufacture [`UnshareDirectoryInput`](crate::input::UnshareDirectoryInput)
    pub fn builder() -> crate::input::unshare_directory_input::Builder {
        crate::input::unshare_directory_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnshareDirectory {
    type Output = std::result::Result<
        crate::output::UnshareDirectoryOutput,
        crate::error::UnshareDirectoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unshare_directory_error(response)
        } else {
            crate::operation_deser::parse_unshare_directory_response(response)
        }
    }
}

/// <p>Updates a conditional forwarder that has been set up for your Amazon Web Services
/// directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConditionalForwarder {
    _private: (),
}
impl UpdateConditionalForwarder {
    /// Creates a new builder-style object to manufacture [`UpdateConditionalForwarderInput`](crate::input::UpdateConditionalForwarderInput)
    pub fn builder() -> crate::input::update_conditional_forwarder_input::Builder {
        crate::input::update_conditional_forwarder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConditionalForwarder {
    type Output = std::result::Result<
        crate::output::UpdateConditionalForwarderOutput,
        crate::error::UpdateConditionalForwarderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_conditional_forwarder_error(response)
        } else {
            crate::operation_deser::parse_update_conditional_forwarder_response(response)
        }
    }
}

/// <p>Adds or removes domain controllers to or from the directory. Based on the difference
/// between current value and new value (provided through this API call), domain controllers will
/// be added or removed. It may take up to 45 minutes for any new domain controllers to become
/// fully active once the requested number of domain controllers is updated. During this time, you
/// cannot make another update request.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNumberOfDomainControllers {
    _private: (),
}
impl UpdateNumberOfDomainControllers {
    /// Creates a new builder-style object to manufacture [`UpdateNumberOfDomainControllersInput`](crate::input::UpdateNumberOfDomainControllersInput)
    pub fn builder() -> crate::input::update_number_of_domain_controllers_input::Builder {
        crate::input::update_number_of_domain_controllers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateNumberOfDomainControllers {
    type Output = std::result::Result<
        crate::output::UpdateNumberOfDomainControllersOutput,
        crate::error::UpdateNumberOfDomainControllersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_number_of_domain_controllers_error(response)
        } else {
            crate::operation_deser::parse_update_number_of_domain_controllers_response(response)
        }
    }
}

/// <p>Updates the Remote Authentication Dial In User Service (RADIUS) server information
/// for an AD Connector or Microsoft AD directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRadius {
    _private: (),
}
impl UpdateRadius {
    /// Creates a new builder-style object to manufacture [`UpdateRadiusInput`](crate::input::UpdateRadiusInput)
    pub fn builder() -> crate::input::update_radius_input::Builder {
        crate::input::update_radius_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRadius {
    type Output =
        std::result::Result<crate::output::UpdateRadiusOutput, crate::error::UpdateRadiusError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_radius_error(response)
        } else {
            crate::operation_deser::parse_update_radius_response(response)
        }
    }
}

/// <p>Updates the trust that has been set up between your Managed Microsoft AD directory and an
/// self-managed Active Directory.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateTrust {
    _private: (),
}
impl UpdateTrust {
    /// Creates a new builder-style object to manufacture [`UpdateTrustInput`](crate::input::UpdateTrustInput)
    pub fn builder() -> crate::input::update_trust_input::Builder {
        crate::input::update_trust_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateTrust {
    type Output =
        std::result::Result<crate::output::UpdateTrustOutput, crate::error::UpdateTrustError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_trust_error(response)
        } else {
            crate::operation_deser::parse_update_trust_response(response)
        }
    }
}

/// <p>Directory Service for Microsoft Active Directory allows you to configure and verify trust
/// relationships.</p>
/// <p>This action verifies a trust relationship between your Managed Microsoft AD directory and an
/// external domain.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct VerifyTrust {
    _private: (),
}
impl VerifyTrust {
    /// Creates a new builder-style object to manufacture [`VerifyTrustInput`](crate::input::VerifyTrustInput)
    pub fn builder() -> crate::input::verify_trust_input::Builder {
        crate::input::verify_trust_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for VerifyTrust {
    type Output =
        std::result::Result<crate::output::VerifyTrustOutput, crate::error::VerifyTrustError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_verify_trust_error(response)
        } else {
            crate::operation_deser::parse_verify_trust_response(response)
        }
    }
}
