// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AcceptSharedDirectoryError {
    pub kind: AcceptSharedDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AcceptSharedDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryAlreadySharedException(crate::error::DirectoryAlreadySharedException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AcceptSharedDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AcceptSharedDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            AcceptSharedDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => {
                _inner.fmt(f)
            }
            AcceptSharedDirectoryErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            AcceptSharedDirectoryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            AcceptSharedDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            AcceptSharedDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AcceptSharedDirectoryError {
    fn code(&self) -> Option<&str> {
        AcceptSharedDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AcceptSharedDirectoryError {
    pub fn new(kind: AcceptSharedDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AcceptSharedDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AcceptSharedDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            AcceptSharedDirectoryErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_already_shared_exception(&self) -> bool {
        matches!(
            &self.kind,
            AcceptSharedDirectoryErrorKind::DirectoryAlreadySharedException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            AcceptSharedDirectoryErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            AcceptSharedDirectoryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            AcceptSharedDirectoryErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for AcceptSharedDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AcceptSharedDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            AcceptSharedDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => Some(_inner),
            AcceptSharedDirectoryErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            AcceptSharedDirectoryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AcceptSharedDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            AcceptSharedDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddIpRoutesError {
    pub kind: AddIpRoutesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddIpRoutesErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    IpRouteLimitExceededException(crate::error::IpRouteLimitExceededException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddIpRoutesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddIpRoutesErrorKind::ClientException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::IpRouteLimitExceededException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            AddIpRoutesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddIpRoutesError {
    fn code(&self) -> Option<&str> {
        AddIpRoutesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddIpRoutesError {
    pub fn new(kind: AddIpRoutesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddIpRoutesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddIpRoutesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, AddIpRoutesErrorKind::ClientException(_))
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddIpRoutesErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddIpRoutesErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddIpRoutesErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddIpRoutesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_ip_route_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddIpRoutesErrorKind::IpRouteLimitExceededException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, AddIpRoutesErrorKind::ServiceException(_))
    }
}
impl std::error::Error for AddIpRoutesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddIpRoutesErrorKind::ClientException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::IpRouteLimitExceededException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::ServiceException(_inner) => Some(_inner),
            AddIpRoutesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddRegionError {
    pub kind: AddRegionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddRegionErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryAlreadyInRegionException(crate::error::DirectoryAlreadyInRegionException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    RegionLimitExceededException(crate::error::RegionLimitExceededException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddRegionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddRegionErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::ClientException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::DirectoryAlreadyInRegionException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::RegionLimitExceededException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            AddRegionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddRegionError {
    fn code(&self) -> Option<&str> {
        AddRegionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddRegionError {
    pub fn new(kind: AddRegionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddRegionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddRegionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, AddRegionErrorKind::AccessDeniedException(_))
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, AddRegionErrorKind::ClientException(_))
    }
    pub fn is_directory_already_in_region_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::DirectoryAlreadyInRegionException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(&self.kind, AddRegionErrorKind::InvalidParameterException(_))
    }
    pub fn is_region_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::RegionLimitExceededException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, AddRegionErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddRegionErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for AddRegionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddRegionErrorKind::AccessDeniedException(_inner) => Some(_inner),
            AddRegionErrorKind::ClientException(_inner) => Some(_inner),
            AddRegionErrorKind::DirectoryAlreadyInRegionException(_inner) => Some(_inner),
            AddRegionErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            AddRegionErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            AddRegionErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            AddRegionErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AddRegionErrorKind::RegionLimitExceededException(_inner) => Some(_inner),
            AddRegionErrorKind::ServiceException(_inner) => Some(_inner),
            AddRegionErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            AddRegionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddTagsToResourceError {
    pub kind: AddTagsToResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddTagsToResourceErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    TagLimitExceededException(crate::error::TagLimitExceededException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddTagsToResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddTagsToResourceErrorKind::ClientException(_inner) => _inner.fmt(f),
            AddTagsToResourceErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            AddTagsToResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            AddTagsToResourceErrorKind::ServiceException(_inner) => _inner.fmt(f),
            AddTagsToResourceErrorKind::TagLimitExceededException(_inner) => _inner.fmt(f),
            AddTagsToResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddTagsToResourceError {
    fn code(&self) -> Option<&str> {
        AddTagsToResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddTagsToResourceError {
    pub fn new(kind: AddTagsToResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddTagsToResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddTagsToResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, AddTagsToResourceErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddTagsToResourceErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddTagsToResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, AddTagsToResourceErrorKind::ServiceException(_))
    }
    pub fn is_tag_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddTagsToResourceErrorKind::TagLimitExceededException(_)
        )
    }
}
impl std::error::Error for AddTagsToResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddTagsToResourceErrorKind::ClientException(_inner) => Some(_inner),
            AddTagsToResourceErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            AddTagsToResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            AddTagsToResourceErrorKind::ServiceException(_inner) => Some(_inner),
            AddTagsToResourceErrorKind::TagLimitExceededException(_inner) => Some(_inner),
            AddTagsToResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CancelSchemaExtensionError {
    pub kind: CancelSchemaExtensionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CancelSchemaExtensionErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CancelSchemaExtensionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CancelSchemaExtensionErrorKind::ClientException(_inner) => _inner.fmt(f),
            CancelSchemaExtensionErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CancelSchemaExtensionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CancelSchemaExtensionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CancelSchemaExtensionError {
    fn code(&self) -> Option<&str> {
        CancelSchemaExtensionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CancelSchemaExtensionError {
    pub fn new(kind: CancelSchemaExtensionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CancelSchemaExtensionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CancelSchemaExtensionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelSchemaExtensionErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelSchemaExtensionErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            CancelSchemaExtensionErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for CancelSchemaExtensionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CancelSchemaExtensionErrorKind::ClientException(_inner) => Some(_inner),
            CancelSchemaExtensionErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CancelSchemaExtensionErrorKind::ServiceException(_inner) => Some(_inner),
            CancelSchemaExtensionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ConnectDirectoryError {
    pub kind: ConnectDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ConnectDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryLimitExceededException(crate::error::DirectoryLimitExceededException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ConnectDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ConnectDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            ConnectDirectoryErrorKind::DirectoryLimitExceededException(_inner) => _inner.fmt(f),
            ConnectDirectoryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ConnectDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ConnectDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ConnectDirectoryError {
    fn code(&self) -> Option<&str> {
        ConnectDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ConnectDirectoryError {
    pub fn new(kind: ConnectDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ConnectDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ConnectDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ConnectDirectoryErrorKind::ClientException(_))
    }
    pub fn is_directory_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            ConnectDirectoryErrorKind::DirectoryLimitExceededException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ConnectDirectoryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, ConnectDirectoryErrorKind::ServiceException(_))
    }
}
impl std::error::Error for ConnectDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ConnectDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            ConnectDirectoryErrorKind::DirectoryLimitExceededException(_inner) => Some(_inner),
            ConnectDirectoryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ConnectDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            ConnectDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateAliasError {
    pub kind: CreateAliasErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateAliasErrorKind {
    ClientException(crate::error::ClientException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateAliasError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateAliasErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateAliasErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateAliasError {
    fn code(&self) -> Option<&str> {
        CreateAliasError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateAliasError {
    pub fn new(kind: CreateAliasErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateAliasErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateAliasErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateAliasErrorKind::ClientException(_))
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateAliasErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateAliasErrorKind::ServiceException(_))
    }
}
impl std::error::Error for CreateAliasError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateAliasErrorKind::ClientException(_inner) => Some(_inner),
            CreateAliasErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            CreateAliasErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CreateAliasErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateAliasErrorKind::ServiceException(_inner) => Some(_inner),
            CreateAliasErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateComputerError {
    pub kind: CreateComputerErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateComputerErrorKind {
    AuthenticationFailedException(crate::error::AuthenticationFailedException),
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateComputerError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateComputerErrorKind::AuthenticationFailedException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateComputerErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateComputerError {
    fn code(&self) -> Option<&str> {
        CreateComputerError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateComputerError {
    pub fn new(kind: CreateComputerErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateComputerErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateComputerErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::AuthenticationFailedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateComputerErrorKind::ClientException(_))
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateComputerErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateComputerErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateComputerError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateComputerErrorKind::AuthenticationFailedException(_inner) => Some(_inner),
            CreateComputerErrorKind::ClientException(_inner) => Some(_inner),
            CreateComputerErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            CreateComputerErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            CreateComputerErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CreateComputerErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateComputerErrorKind::ServiceException(_inner) => Some(_inner),
            CreateComputerErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateComputerErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateConditionalForwarderError {
    pub kind: CreateConditionalForwarderErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateConditionalForwarderErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateConditionalForwarderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateConditionalForwarderErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            CreateConditionalForwarderErrorKind::EntityAlreadyExistsException(_inner) => {
                _inner.fmt(f)
            }
            CreateConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            CreateConditionalForwarderErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateConditionalForwarderErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            CreateConditionalForwarderErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateConditionalForwarderError {
    fn code(&self) -> Option<&str> {
        CreateConditionalForwarderError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateConditionalForwarderError {
    pub fn new(kind: CreateConditionalForwarderErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateConditionalForwarderErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateConditionalForwarderErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateConditionalForwarderErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateConditionalForwarderError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateConditionalForwarderErrorKind::ClientException(_inner) => Some(_inner),
            CreateConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            CreateConditionalForwarderErrorKind::EntityAlreadyExistsException(_inner) => {
                Some(_inner)
            }
            CreateConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                Some(_inner)
            }
            CreateConditionalForwarderErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateConditionalForwarderErrorKind::ServiceException(_inner) => Some(_inner),
            CreateConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            CreateConditionalForwarderErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateDirectoryError {
    pub kind: CreateDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryLimitExceededException(crate::error::DirectoryLimitExceededException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateDirectoryErrorKind::DirectoryLimitExceededException(_inner) => _inner.fmt(f),
            CreateDirectoryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateDirectoryError {
    fn code(&self) -> Option<&str> {
        CreateDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateDirectoryError {
    pub fn new(kind: CreateDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateDirectoryErrorKind::ClientException(_))
    }
    pub fn is_directory_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateDirectoryErrorKind::DirectoryLimitExceededException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateDirectoryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateDirectoryErrorKind::ServiceException(_))
    }
}
impl std::error::Error for CreateDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            CreateDirectoryErrorKind::DirectoryLimitExceededException(_inner) => Some(_inner),
            CreateDirectoryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            CreateDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateLogSubscriptionError {
    pub kind: CreateLogSubscriptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateLogSubscriptionErrorKind {
    ClientException(crate::error::ClientException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InsufficientPermissionsException(crate::error::InsufficientPermissionsException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateLogSubscriptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateLogSubscriptionErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateLogSubscriptionErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            CreateLogSubscriptionErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CreateLogSubscriptionErrorKind::InsufficientPermissionsException(_inner) => {
                _inner.fmt(f)
            }
            CreateLogSubscriptionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateLogSubscriptionErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateLogSubscriptionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateLogSubscriptionError {
    fn code(&self) -> Option<&str> {
        CreateLogSubscriptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateLogSubscriptionError {
    pub fn new(kind: CreateLogSubscriptionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateLogSubscriptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateLogSubscriptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_insufficient_permissions_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::InsufficientPermissionsException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateLogSubscriptionErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateLogSubscriptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateLogSubscriptionErrorKind::ClientException(_inner) => Some(_inner),
            CreateLogSubscriptionErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            CreateLogSubscriptionErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CreateLogSubscriptionErrorKind::InsufficientPermissionsException(_inner) => {
                Some(_inner)
            }
            CreateLogSubscriptionErrorKind::ServiceException(_inner) => Some(_inner),
            CreateLogSubscriptionErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateLogSubscriptionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateMicrosoftADError {
    pub kind: CreateMicrosoftADErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateMicrosoftADErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryLimitExceededException(crate::error::DirectoryLimitExceededException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateMicrosoftADError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateMicrosoftADErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateMicrosoftADErrorKind::DirectoryLimitExceededException(_inner) => _inner.fmt(f),
            CreateMicrosoftADErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateMicrosoftADErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateMicrosoftADErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateMicrosoftADErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateMicrosoftADError {
    fn code(&self) -> Option<&str> {
        CreateMicrosoftADError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateMicrosoftADError {
    pub fn new(kind: CreateMicrosoftADErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateMicrosoftADErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateMicrosoftADErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateMicrosoftADErrorKind::ClientException(_))
    }
    pub fn is_directory_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMicrosoftADErrorKind::DirectoryLimitExceededException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMicrosoftADErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateMicrosoftADErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateMicrosoftADErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateMicrosoftADError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateMicrosoftADErrorKind::ClientException(_inner) => Some(_inner),
            CreateMicrosoftADErrorKind::DirectoryLimitExceededException(_inner) => Some(_inner),
            CreateMicrosoftADErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateMicrosoftADErrorKind::ServiceException(_inner) => Some(_inner),
            CreateMicrosoftADErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateMicrosoftADErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateSnapshotError {
    pub kind: CreateSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateSnapshotErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    SnapshotLimitExceededException(crate::error::SnapshotLimitExceededException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateSnapshotErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateSnapshotErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CreateSnapshotErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateSnapshotErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateSnapshotErrorKind::SnapshotLimitExceededException(_inner) => _inner.fmt(f),
            CreateSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateSnapshotError {
    fn code(&self) -> Option<&str> {
        CreateSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateSnapshotError {
    pub fn new(kind: CreateSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateSnapshotErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateSnapshotErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateSnapshotErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateSnapshotErrorKind::ServiceException(_))
    }
    pub fn is_snapshot_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateSnapshotErrorKind::SnapshotLimitExceededException(_)
        )
    }
}
impl std::error::Error for CreateSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateSnapshotErrorKind::ClientException(_inner) => Some(_inner),
            CreateSnapshotErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CreateSnapshotErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateSnapshotErrorKind::ServiceException(_inner) => Some(_inner),
            CreateSnapshotErrorKind::SnapshotLimitExceededException(_inner) => Some(_inner),
            CreateSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateTrustError {
    pub kind: CreateTrustErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateTrustErrorKind {
    ClientException(crate::error::ClientException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateTrustError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateTrustErrorKind::ClientException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::ServiceException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            CreateTrustErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateTrustError {
    fn code(&self) -> Option<&str> {
        CreateTrustError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateTrustError {
    pub fn new(kind: CreateTrustErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateTrustErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateTrustErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, CreateTrustErrorKind::ClientException(_))
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateTrustErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateTrustErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateTrustErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, CreateTrustErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateTrustErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateTrustError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateTrustErrorKind::ClientException(_inner) => Some(_inner),
            CreateTrustErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            CreateTrustErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            CreateTrustErrorKind::InvalidParameterException(_inner) => Some(_inner),
            CreateTrustErrorKind::ServiceException(_inner) => Some(_inner),
            CreateTrustErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            CreateTrustErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteConditionalForwarderError {
    pub kind: DeleteConditionalForwarderErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteConditionalForwarderErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteConditionalForwarderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteConditionalForwarderErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeleteConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            DeleteConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DeleteConditionalForwarderErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteConditionalForwarderErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeleteConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DeleteConditionalForwarderErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteConditionalForwarderError {
    fn code(&self) -> Option<&str> {
        DeleteConditionalForwarderError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteConditionalForwarderError {
    pub fn new(kind: DeleteConditionalForwarderErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteConditionalForwarderErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteConditionalForwarderErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteConditionalForwarderErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteConditionalForwarderError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteConditionalForwarderErrorKind::ClientException(_inner) => Some(_inner),
            DeleteConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            DeleteConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                Some(_inner)
            }
            DeleteConditionalForwarderErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteConditionalForwarderErrorKind::ServiceException(_inner) => Some(_inner),
            DeleteConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DeleteConditionalForwarderErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteDirectoryError {
    pub kind: DeleteDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeleteDirectoryErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DeleteDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeleteDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteDirectoryError {
    fn code(&self) -> Option<&str> {
        DeleteDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteDirectoryError {
    pub fn new(kind: DeleteDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DeleteDirectoryErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteDirectoryErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DeleteDirectoryErrorKind::ServiceException(_))
    }
}
impl std::error::Error for DeleteDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            DeleteDirectoryErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DeleteDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            DeleteDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteLogSubscriptionError {
    pub kind: DeleteLogSubscriptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteLogSubscriptionErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteLogSubscriptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteLogSubscriptionErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeleteLogSubscriptionErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DeleteLogSubscriptionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeleteLogSubscriptionErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DeleteLogSubscriptionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteLogSubscriptionError {
    fn code(&self) -> Option<&str> {
        DeleteLogSubscriptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteLogSubscriptionError {
    pub fn new(kind: DeleteLogSubscriptionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteLogSubscriptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteLogSubscriptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLogSubscriptionErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLogSubscriptionErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLogSubscriptionErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteLogSubscriptionErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteLogSubscriptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteLogSubscriptionErrorKind::ClientException(_inner) => Some(_inner),
            DeleteLogSubscriptionErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DeleteLogSubscriptionErrorKind::ServiceException(_inner) => Some(_inner),
            DeleteLogSubscriptionErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DeleteLogSubscriptionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteSnapshotError {
    pub kind: DeleteSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteSnapshotErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteSnapshotErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeleteSnapshotErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DeleteSnapshotErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteSnapshotErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeleteSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteSnapshotError {
    fn code(&self) -> Option<&str> {
        DeleteSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteSnapshotError {
    pub fn new(kind: DeleteSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DeleteSnapshotErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteSnapshotErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteSnapshotErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DeleteSnapshotErrorKind::ServiceException(_))
    }
}
impl std::error::Error for DeleteSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteSnapshotErrorKind::ClientException(_inner) => Some(_inner),
            DeleteSnapshotErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DeleteSnapshotErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteSnapshotErrorKind::ServiceException(_inner) => Some(_inner),
            DeleteSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteTrustError {
    pub kind: DeleteTrustErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteTrustErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteTrustError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteTrustErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeleteTrustErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DeleteTrustErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeleteTrustErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeleteTrustErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DeleteTrustErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteTrustError {
    fn code(&self) -> Option<&str> {
        DeleteTrustError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteTrustError {
    pub fn new(kind: DeleteTrustErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteTrustErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteTrustErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DeleteTrustErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteTrustErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteTrustErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DeleteTrustErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteTrustErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteTrustError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteTrustErrorKind::ClientException(_inner) => Some(_inner),
            DeleteTrustErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DeleteTrustErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeleteTrustErrorKind::ServiceException(_inner) => Some(_inner),
            DeleteTrustErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DeleteTrustErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterCertificateError {
    pub kind: DeregisterCertificateErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterCertificateErrorKind {
    CertificateDoesNotExistException(crate::error::CertificateDoesNotExistException),
    CertificateInUseException(crate::error::CertificateInUseException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterCertificateError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterCertificateErrorKind::CertificateDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DeregisterCertificateErrorKind::CertificateInUseException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DeregisterCertificateErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterCertificateError {
    fn code(&self) -> Option<&str> {
        DeregisterCertificateError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterCertificateError {
    pub fn new(kind: DeregisterCertificateErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterCertificateErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterCertificateErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_certificate_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::CertificateDoesNotExistException(_)
        )
    }
    pub fn is_certificate_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::CertificateInUseException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterCertificateErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeregisterCertificateError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterCertificateErrorKind::CertificateDoesNotExistException(_inner) => {
                Some(_inner)
            }
            DeregisterCertificateErrorKind::CertificateInUseException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::ClientException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::ServiceException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DeregisterCertificateErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeregisterEventTopicError {
    pub kind: DeregisterEventTopicErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeregisterEventTopicErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeregisterEventTopicError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeregisterEventTopicErrorKind::ClientException(_inner) => _inner.fmt(f),
            DeregisterEventTopicErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DeregisterEventTopicErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DeregisterEventTopicErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DeregisterEventTopicErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeregisterEventTopicError {
    fn code(&self) -> Option<&str> {
        DeregisterEventTopicError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeregisterEventTopicError {
    pub fn new(kind: DeregisterEventTopicErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeregisterEventTopicErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeregisterEventTopicErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterEventTopicErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterEventTopicErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterEventTopicErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeregisterEventTopicErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for DeregisterEventTopicError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeregisterEventTopicErrorKind::ClientException(_inner) => Some(_inner),
            DeregisterEventTopicErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DeregisterEventTopicErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DeregisterEventTopicErrorKind::ServiceException(_inner) => Some(_inner),
            DeregisterEventTopicErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeCertificateError {
    pub kind: DescribeCertificateErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeCertificateErrorKind {
    CertificateDoesNotExistException(crate::error::CertificateDoesNotExistException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeCertificateError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeCertificateErrorKind::CertificateDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DescribeCertificateErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeCertificateError {
    fn code(&self) -> Option<&str> {
        DescribeCertificateError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeCertificateError {
    pub fn new(kind: DescribeCertificateErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeCertificateErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeCertificateErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_certificate_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeCertificateErrorKind::CertificateDoesNotExistException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeCertificateErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeCertificateErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeCertificateErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeCertificateErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeCertificateErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeCertificateError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeCertificateErrorKind::CertificateDoesNotExistException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::ClientException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DescribeCertificateErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeClientAuthenticationSettingsError {
    pub kind: DescribeClientAuthenticationSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeClientAuthenticationSettingsErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeClientAuthenticationSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeClientAuthenticationSettingsErrorKind::AccessDeniedException(_inner) => {
                _inner.fmt(f)
            }
            DescribeClientAuthenticationSettingsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeClientAuthenticationSettingsErrorKind::DirectoryDoesNotExistException(
                _inner,
            ) => _inner.fmt(f),
            DescribeClientAuthenticationSettingsErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DescribeClientAuthenticationSettingsErrorKind::ServiceException(_inner) => {
                _inner.fmt(f)
            }
            DescribeClientAuthenticationSettingsErrorKind::UnsupportedOperationException(
                _inner,
            ) => _inner.fmt(f),
            DescribeClientAuthenticationSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeClientAuthenticationSettingsError {
    fn code(&self) -> Option<&str> {
        DescribeClientAuthenticationSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeClientAuthenticationSettingsError {
    pub fn new(
        kind: DescribeClientAuthenticationSettingsErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeClientAuthenticationSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeClientAuthenticationSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeClientAuthenticationSettingsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeClientAuthenticationSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeClientAuthenticationSettingsErrorKind::AccessDeniedException(_inner) => {
                Some(_inner)
            }
            DescribeClientAuthenticationSettingsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeClientAuthenticationSettingsErrorKind::DirectoryDoesNotExistException(
                _inner,
            ) => Some(_inner),
            DescribeClientAuthenticationSettingsErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            DescribeClientAuthenticationSettingsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeClientAuthenticationSettingsErrorKind::UnsupportedOperationException(
                _inner,
            ) => Some(_inner),
            DescribeClientAuthenticationSettingsErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeConditionalForwardersError {
    pub kind: DescribeConditionalForwardersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeConditionalForwardersErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeConditionalForwardersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeConditionalForwardersErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeConditionalForwardersErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            DescribeConditionalForwardersErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DescribeConditionalForwardersErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            DescribeConditionalForwardersErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeConditionalForwardersErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeConditionalForwardersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeConditionalForwardersError {
    fn code(&self) -> Option<&str> {
        DescribeConditionalForwardersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeConditionalForwardersError {
    pub fn new(kind: DescribeConditionalForwardersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeConditionalForwardersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeConditionalForwardersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeConditionalForwardersErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeConditionalForwardersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeConditionalForwardersErrorKind::ClientException(_inner) => Some(_inner),
            DescribeConditionalForwardersErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            DescribeConditionalForwardersErrorKind::EntityDoesNotExistException(_inner) => {
                Some(_inner)
            }
            DescribeConditionalForwardersErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            DescribeConditionalForwardersErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeConditionalForwardersErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DescribeConditionalForwardersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeDirectoriesError {
    pub kind: DescribeDirectoriesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeDirectoriesErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeDirectoriesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeDirectoriesErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeDirectoriesErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeDirectoriesErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeDirectoriesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeDirectoriesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeDirectoriesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeDirectoriesError {
    fn code(&self) -> Option<&str> {
        DescribeDirectoriesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeDirectoriesError {
    pub fn new(kind: DescribeDirectoriesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeDirectoriesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeDirectoriesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeDirectoriesErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDirectoriesErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDirectoriesErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDirectoriesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDirectoriesErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for DescribeDirectoriesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeDirectoriesErrorKind::ClientException(_inner) => Some(_inner),
            DescribeDirectoriesErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeDirectoriesErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeDirectoriesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeDirectoriesErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeDirectoriesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeDomainControllersError {
    pub kind: DescribeDomainControllersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeDomainControllersErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeDomainControllersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeDomainControllersErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeDomainControllersErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DescribeDomainControllersErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeDomainControllersErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeDomainControllersErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeDomainControllersErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeDomainControllersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeDomainControllersError {
    fn code(&self) -> Option<&str> {
        DescribeDomainControllersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeDomainControllersError {
    pub fn new(kind: DescribeDomainControllersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeDomainControllersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeDomainControllersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeDomainControllersErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeDomainControllersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeDomainControllersErrorKind::ClientException(_inner) => Some(_inner),
            DescribeDomainControllersErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeDomainControllersErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeDomainControllersErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeDomainControllersErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeDomainControllersErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DescribeDomainControllersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeEventTopicsError {
    pub kind: DescribeEventTopicsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeEventTopicsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeEventTopicsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeEventTopicsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeEventTopicsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeEventTopicsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeEventTopicsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeEventTopicsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeEventTopicsError {
    fn code(&self) -> Option<&str> {
        DescribeEventTopicsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeEventTopicsError {
    pub fn new(kind: DescribeEventTopicsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeEventTopicsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeEventTopicsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeEventTopicsErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEventTopicsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEventTopicsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeEventTopicsErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for DescribeEventTopicsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeEventTopicsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeEventTopicsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeEventTopicsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeEventTopicsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeEventTopicsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeLDAPSSettingsError {
    pub kind: DescribeLDAPSSettingsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeLDAPSSettingsErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeLDAPSSettingsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeLDAPSSettingsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DescribeLDAPSSettingsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeLDAPSSettingsError {
    fn code(&self) -> Option<&str> {
        DescribeLDAPSSettingsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeLDAPSSettingsError {
    pub fn new(kind: DescribeLDAPSSettingsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeLDAPSSettingsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeLDAPSSettingsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeLDAPSSettingsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeLDAPSSettingsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeLDAPSSettingsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DescribeLDAPSSettingsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeRegionsError {
    pub kind: DescribeRegionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeRegionsErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeRegionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeRegionsErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DescribeRegionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeRegionsError {
    fn code(&self) -> Option<&str> {
        DescribeRegionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeRegionsError {
    pub fn new(kind: DescribeRegionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeRegionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeRegionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRegionsErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeRegionsErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRegionsErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRegionsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRegionsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DescribeRegionsErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeRegionsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeRegionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeRegionsErrorKind::AccessDeniedException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DescribeRegionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeSharedDirectoriesError {
    pub kind: DescribeSharedDirectoriesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeSharedDirectoriesErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeSharedDirectoriesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeSharedDirectoriesErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeSharedDirectoriesErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DescribeSharedDirectoriesErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeSharedDirectoriesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeSharedDirectoriesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeSharedDirectoriesErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeSharedDirectoriesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeSharedDirectoriesError {
    fn code(&self) -> Option<&str> {
        DescribeSharedDirectoriesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeSharedDirectoriesError {
    pub fn new(kind: DescribeSharedDirectoriesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeSharedDirectoriesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeSharedDirectoriesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSharedDirectoriesErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeSharedDirectoriesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeSharedDirectoriesErrorKind::ClientException(_inner) => Some(_inner),
            DescribeSharedDirectoriesErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeSharedDirectoriesErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeSharedDirectoriesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeSharedDirectoriesErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeSharedDirectoriesErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DescribeSharedDirectoriesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeSnapshotsError {
    pub kind: DescribeSnapshotsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeSnapshotsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeSnapshotsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeSnapshotsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeSnapshotsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeSnapshotsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeSnapshotsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeSnapshotsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeSnapshotsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeSnapshotsError {
    fn code(&self) -> Option<&str> {
        DescribeSnapshotsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeSnapshotsError {
    pub fn new(kind: DescribeSnapshotsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeSnapshotsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeSnapshotsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeSnapshotsErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSnapshotsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSnapshotsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeSnapshotsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DescribeSnapshotsErrorKind::ServiceException(_))
    }
}
impl std::error::Error for DescribeSnapshotsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeSnapshotsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeSnapshotsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeSnapshotsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeSnapshotsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeSnapshotsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeSnapshotsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeTrustsError {
    pub kind: DescribeTrustsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeTrustsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeTrustsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeTrustsErrorKind::ClientException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DescribeTrustsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeTrustsError {
    fn code(&self) -> Option<&str> {
        DescribeTrustsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeTrustsError {
    pub fn new(kind: DescribeTrustsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeTrustsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeTrustsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DescribeTrustsErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeTrustsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeTrustsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeTrustsErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DescribeTrustsErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeTrustsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeTrustsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeTrustsErrorKind::ClientException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::ServiceException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DescribeTrustsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisableClientAuthenticationError {
    pub kind: DisableClientAuthenticationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisableClientAuthenticationErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidClientAuthStatusException(crate::error::InvalidClientAuthStatusException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisableClientAuthenticationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisableClientAuthenticationErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            DisableClientAuthenticationErrorKind::ClientException(_inner) => _inner.fmt(f),
            DisableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            DisableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_inner) => {
                _inner.fmt(f)
            }
            DisableClientAuthenticationErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DisableClientAuthenticationErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DisableClientAuthenticationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisableClientAuthenticationError {
    fn code(&self) -> Option<&str> {
        DisableClientAuthenticationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisableClientAuthenticationError {
    pub fn new(kind: DisableClientAuthenticationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisableClientAuthenticationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisableClientAuthenticationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_client_auth_status_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableClientAuthenticationErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DisableClientAuthenticationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisableClientAuthenticationErrorKind::AccessDeniedException(_inner) => Some(_inner),
            DisableClientAuthenticationErrorKind::ClientException(_inner) => Some(_inner),
            DisableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_inner) => {
                Some(_inner)
            }
            DisableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_inner) => {
                Some(_inner)
            }
            DisableClientAuthenticationErrorKind::ServiceException(_inner) => Some(_inner),
            DisableClientAuthenticationErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DisableClientAuthenticationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisableLDAPSError {
    pub kind: DisableLDAPSErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisableLDAPSErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidLdapsStatusException(crate::error::InvalidLdapsStatusException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisableLDAPSError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisableLDAPSErrorKind::ClientException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::InvalidLdapsStatusException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            DisableLDAPSErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisableLDAPSError {
    fn code(&self) -> Option<&str> {
        DisableLDAPSError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisableLDAPSError {
    pub fn new(kind: DisableLDAPSErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisableLDAPSErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisableLDAPSErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DisableLDAPSErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableLDAPSErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableLDAPSErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_ldaps_status_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableLDAPSErrorKind::InvalidLdapsStatusException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableLDAPSErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DisableLDAPSErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableLDAPSErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DisableLDAPSError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisableLDAPSErrorKind::ClientException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::InvalidLdapsStatusException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::InvalidParameterException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::ServiceException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            DisableLDAPSErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisableRadiusError {
    pub kind: DisableRadiusErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisableRadiusErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisableRadiusError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisableRadiusErrorKind::ClientException(_inner) => _inner.fmt(f),
            DisableRadiusErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DisableRadiusErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DisableRadiusErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisableRadiusError {
    fn code(&self) -> Option<&str> {
        DisableRadiusError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisableRadiusError {
    pub fn new(kind: DisableRadiusErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisableRadiusErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisableRadiusErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DisableRadiusErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableRadiusErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DisableRadiusErrorKind::ServiceException(_))
    }
}
impl std::error::Error for DisableRadiusError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisableRadiusErrorKind::ClientException(_inner) => Some(_inner),
            DisableRadiusErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DisableRadiusErrorKind::ServiceException(_inner) => Some(_inner),
            DisableRadiusErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DisableSsoError {
    pub kind: DisableSsoErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DisableSsoErrorKind {
    AuthenticationFailedException(crate::error::AuthenticationFailedException),
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InsufficientPermissionsException(crate::error::InsufficientPermissionsException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DisableSsoError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DisableSsoErrorKind::AuthenticationFailedException(_inner) => _inner.fmt(f),
            DisableSsoErrorKind::ClientException(_inner) => _inner.fmt(f),
            DisableSsoErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            DisableSsoErrorKind::InsufficientPermissionsException(_inner) => _inner.fmt(f),
            DisableSsoErrorKind::ServiceException(_inner) => _inner.fmt(f),
            DisableSsoErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DisableSsoError {
    fn code(&self) -> Option<&str> {
        DisableSsoError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DisableSsoError {
    pub fn new(kind: DisableSsoErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DisableSsoErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DisableSsoErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableSsoErrorKind::AuthenticationFailedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, DisableSsoErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableSsoErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_insufficient_permissions_exception(&self) -> bool {
        matches!(
            &self.kind,
            DisableSsoErrorKind::InsufficientPermissionsException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, DisableSsoErrorKind::ServiceException(_))
    }
}
impl std::error::Error for DisableSsoError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DisableSsoErrorKind::AuthenticationFailedException(_inner) => Some(_inner),
            DisableSsoErrorKind::ClientException(_inner) => Some(_inner),
            DisableSsoErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            DisableSsoErrorKind::InsufficientPermissionsException(_inner) => Some(_inner),
            DisableSsoErrorKind::ServiceException(_inner) => Some(_inner),
            DisableSsoErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct EnableClientAuthenticationError {
    pub kind: EnableClientAuthenticationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum EnableClientAuthenticationErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidClientAuthStatusException(crate::error::InvalidClientAuthStatusException),
    NoAvailableCertificateException(crate::error::NoAvailableCertificateException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for EnableClientAuthenticationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            EnableClientAuthenticationErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            EnableClientAuthenticationErrorKind::ClientException(_inner) => _inner.fmt(f),
            EnableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            EnableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_inner) => {
                _inner.fmt(f)
            }
            EnableClientAuthenticationErrorKind::NoAvailableCertificateException(_inner) => {
                _inner.fmt(f)
            }
            EnableClientAuthenticationErrorKind::ServiceException(_inner) => _inner.fmt(f),
            EnableClientAuthenticationErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            EnableClientAuthenticationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for EnableClientAuthenticationError {
    fn code(&self) -> Option<&str> {
        EnableClientAuthenticationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl EnableClientAuthenticationError {
    pub fn new(kind: EnableClientAuthenticationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: EnableClientAuthenticationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: EnableClientAuthenticationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_client_auth_status_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_)
        )
    }
    pub fn is_no_available_certificate_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::NoAvailableCertificateException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableClientAuthenticationErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for EnableClientAuthenticationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            EnableClientAuthenticationErrorKind::AccessDeniedException(_inner) => Some(_inner),
            EnableClientAuthenticationErrorKind::ClientException(_inner) => Some(_inner),
            EnableClientAuthenticationErrorKind::DirectoryDoesNotExistException(_inner) => {
                Some(_inner)
            }
            EnableClientAuthenticationErrorKind::InvalidClientAuthStatusException(_inner) => {
                Some(_inner)
            }
            EnableClientAuthenticationErrorKind::NoAvailableCertificateException(_inner) => {
                Some(_inner)
            }
            EnableClientAuthenticationErrorKind::ServiceException(_inner) => Some(_inner),
            EnableClientAuthenticationErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            EnableClientAuthenticationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct EnableLDAPSError {
    pub kind: EnableLDAPSErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum EnableLDAPSErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidLdapsStatusException(crate::error::InvalidLdapsStatusException),
    InvalidParameterException(crate::error::InvalidParameterException),
    NoAvailableCertificateException(crate::error::NoAvailableCertificateException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for EnableLDAPSError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            EnableLDAPSErrorKind::ClientException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::InvalidLdapsStatusException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::NoAvailableCertificateException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::ServiceException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            EnableLDAPSErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for EnableLDAPSError {
    fn code(&self) -> Option<&str> {
        EnableLDAPSError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl EnableLDAPSError {
    pub fn new(kind: EnableLDAPSErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: EnableLDAPSErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: EnableLDAPSErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, EnableLDAPSErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_ldaps_status_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::InvalidLdapsStatusException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_no_available_certificate_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::NoAvailableCertificateException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, EnableLDAPSErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableLDAPSErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for EnableLDAPSError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            EnableLDAPSErrorKind::ClientException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::InvalidLdapsStatusException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::InvalidParameterException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::NoAvailableCertificateException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::ServiceException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            EnableLDAPSErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct EnableRadiusError {
    pub kind: EnableRadiusErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum EnableRadiusErrorKind {
    ClientException(crate::error::ClientException),
    EntityAlreadyExistsException(crate::error::EntityAlreadyExistsException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for EnableRadiusError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            EnableRadiusErrorKind::ClientException(_inner) => _inner.fmt(f),
            EnableRadiusErrorKind::EntityAlreadyExistsException(_inner) => _inner.fmt(f),
            EnableRadiusErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            EnableRadiusErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            EnableRadiusErrorKind::ServiceException(_inner) => _inner.fmt(f),
            EnableRadiusErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for EnableRadiusError {
    fn code(&self) -> Option<&str> {
        EnableRadiusError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl EnableRadiusError {
    pub fn new(kind: EnableRadiusErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: EnableRadiusErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: EnableRadiusErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, EnableRadiusErrorKind::ClientException(_))
    }
    pub fn is_entity_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableRadiusErrorKind::EntityAlreadyExistsException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableRadiusErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableRadiusErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, EnableRadiusErrorKind::ServiceException(_))
    }
}
impl std::error::Error for EnableRadiusError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            EnableRadiusErrorKind::ClientException(_inner) => Some(_inner),
            EnableRadiusErrorKind::EntityAlreadyExistsException(_inner) => Some(_inner),
            EnableRadiusErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            EnableRadiusErrorKind::InvalidParameterException(_inner) => Some(_inner),
            EnableRadiusErrorKind::ServiceException(_inner) => Some(_inner),
            EnableRadiusErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct EnableSsoError {
    pub kind: EnableSsoErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum EnableSsoErrorKind {
    AuthenticationFailedException(crate::error::AuthenticationFailedException),
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InsufficientPermissionsException(crate::error::InsufficientPermissionsException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for EnableSsoError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            EnableSsoErrorKind::AuthenticationFailedException(_inner) => _inner.fmt(f),
            EnableSsoErrorKind::ClientException(_inner) => _inner.fmt(f),
            EnableSsoErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            EnableSsoErrorKind::InsufficientPermissionsException(_inner) => _inner.fmt(f),
            EnableSsoErrorKind::ServiceException(_inner) => _inner.fmt(f),
            EnableSsoErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for EnableSsoError {
    fn code(&self) -> Option<&str> {
        EnableSsoError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl EnableSsoError {
    pub fn new(kind: EnableSsoErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: EnableSsoErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: EnableSsoErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_authentication_failed_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableSsoErrorKind::AuthenticationFailedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, EnableSsoErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableSsoErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_insufficient_permissions_exception(&self) -> bool {
        matches!(
            &self.kind,
            EnableSsoErrorKind::InsufficientPermissionsException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, EnableSsoErrorKind::ServiceException(_))
    }
}
impl std::error::Error for EnableSsoError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            EnableSsoErrorKind::AuthenticationFailedException(_inner) => Some(_inner),
            EnableSsoErrorKind::ClientException(_inner) => Some(_inner),
            EnableSsoErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            EnableSsoErrorKind::InsufficientPermissionsException(_inner) => Some(_inner),
            EnableSsoErrorKind::ServiceException(_inner) => Some(_inner),
            EnableSsoErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetDirectoryLimitsError {
    pub kind: GetDirectoryLimitsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetDirectoryLimitsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetDirectoryLimitsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetDirectoryLimitsErrorKind::ClientException(_inner) => _inner.fmt(f),
            GetDirectoryLimitsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            GetDirectoryLimitsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            GetDirectoryLimitsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetDirectoryLimitsError {
    fn code(&self) -> Option<&str> {
        GetDirectoryLimitsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetDirectoryLimitsError {
    pub fn new(kind: GetDirectoryLimitsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetDirectoryLimitsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetDirectoryLimitsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, GetDirectoryLimitsErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetDirectoryLimitsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, GetDirectoryLimitsErrorKind::ServiceException(_))
    }
}
impl std::error::Error for GetDirectoryLimitsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetDirectoryLimitsErrorKind::ClientException(_inner) => Some(_inner),
            GetDirectoryLimitsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            GetDirectoryLimitsErrorKind::ServiceException(_inner) => Some(_inner),
            GetDirectoryLimitsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetSnapshotLimitsError {
    pub kind: GetSnapshotLimitsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetSnapshotLimitsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetSnapshotLimitsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetSnapshotLimitsErrorKind::ClientException(_inner) => _inner.fmt(f),
            GetSnapshotLimitsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            GetSnapshotLimitsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            GetSnapshotLimitsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetSnapshotLimitsError {
    fn code(&self) -> Option<&str> {
        GetSnapshotLimitsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetSnapshotLimitsError {
    pub fn new(kind: GetSnapshotLimitsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetSnapshotLimitsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetSnapshotLimitsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, GetSnapshotLimitsErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            GetSnapshotLimitsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, GetSnapshotLimitsErrorKind::ServiceException(_))
    }
}
impl std::error::Error for GetSnapshotLimitsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetSnapshotLimitsErrorKind::ClientException(_inner) => Some(_inner),
            GetSnapshotLimitsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            GetSnapshotLimitsErrorKind::ServiceException(_inner) => Some(_inner),
            GetSnapshotLimitsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListCertificatesError {
    pub kind: ListCertificatesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListCertificatesErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListCertificatesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListCertificatesErrorKind::ClientException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            ListCertificatesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListCertificatesError {
    fn code(&self) -> Option<&str> {
        ListCertificatesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListCertificatesError {
    pub fn new(kind: ListCertificatesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListCertificatesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListCertificatesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ListCertificatesErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListCertificatesErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListCertificatesErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListCertificatesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, ListCertificatesErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListCertificatesErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for ListCertificatesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListCertificatesErrorKind::ClientException(_inner) => Some(_inner),
            ListCertificatesErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            ListCertificatesErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            ListCertificatesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListCertificatesErrorKind::ServiceException(_inner) => Some(_inner),
            ListCertificatesErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            ListCertificatesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListIpRoutesError {
    pub kind: ListIpRoutesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListIpRoutesErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListIpRoutesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListIpRoutesErrorKind::ClientException(_inner) => _inner.fmt(f),
            ListIpRoutesErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ListIpRoutesErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            ListIpRoutesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListIpRoutesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ListIpRoutesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListIpRoutesError {
    fn code(&self) -> Option<&str> {
        ListIpRoutesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListIpRoutesError {
    pub fn new(kind: ListIpRoutesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListIpRoutesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListIpRoutesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ListIpRoutesErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListIpRoutesErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListIpRoutesErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListIpRoutesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, ListIpRoutesErrorKind::ServiceException(_))
    }
}
impl std::error::Error for ListIpRoutesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListIpRoutesErrorKind::ClientException(_inner) => Some(_inner),
            ListIpRoutesErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ListIpRoutesErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            ListIpRoutesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListIpRoutesErrorKind::ServiceException(_inner) => Some(_inner),
            ListIpRoutesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListLogSubscriptionsError {
    pub kind: ListLogSubscriptionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListLogSubscriptionsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListLogSubscriptionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListLogSubscriptionsErrorKind::ClientException(_inner) => _inner.fmt(f),
            ListLogSubscriptionsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ListLogSubscriptionsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            ListLogSubscriptionsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ListLogSubscriptionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListLogSubscriptionsError {
    fn code(&self) -> Option<&str> {
        ListLogSubscriptionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListLogSubscriptionsError {
    pub fn new(kind: ListLogSubscriptionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListLogSubscriptionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListLogSubscriptionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListLogSubscriptionsErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListLogSubscriptionsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListLogSubscriptionsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListLogSubscriptionsErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for ListLogSubscriptionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListLogSubscriptionsErrorKind::ClientException(_inner) => Some(_inner),
            ListLogSubscriptionsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ListLogSubscriptionsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            ListLogSubscriptionsErrorKind::ServiceException(_inner) => Some(_inner),
            ListLogSubscriptionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListSchemaExtensionsError {
    pub kind: ListSchemaExtensionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListSchemaExtensionsErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListSchemaExtensionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListSchemaExtensionsErrorKind::ClientException(_inner) => _inner.fmt(f),
            ListSchemaExtensionsErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ListSchemaExtensionsErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            ListSchemaExtensionsErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ListSchemaExtensionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListSchemaExtensionsError {
    fn code(&self) -> Option<&str> {
        ListSchemaExtensionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListSchemaExtensionsError {
    pub fn new(kind: ListSchemaExtensionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListSchemaExtensionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListSchemaExtensionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSchemaExtensionsErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSchemaExtensionsErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSchemaExtensionsErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListSchemaExtensionsErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for ListSchemaExtensionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListSchemaExtensionsErrorKind::ClientException(_inner) => Some(_inner),
            ListSchemaExtensionsErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ListSchemaExtensionsErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            ListSchemaExtensionsErrorKind::ServiceException(_inner) => Some(_inner),
            ListSchemaExtensionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListTagsForResourceError {
    pub kind: ListTagsForResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListTagsForResourceErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListTagsForResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListTagsForResourceErrorKind::ClientException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::InvalidNextTokenException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListTagsForResourceError {
    fn code(&self) -> Option<&str> {
        ListTagsForResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListTagsForResourceError {
    pub fn new(kind: ListTagsForResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ListTagsForResourceErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_next_token_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::InvalidNextTokenException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for ListTagsForResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListTagsForResourceErrorKind::ClientException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::InvalidNextTokenException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::ServiceException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterCertificateError {
    pub kind: RegisterCertificateErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterCertificateErrorKind {
    CertificateAlreadyExistsException(crate::error::CertificateAlreadyExistsException),
    CertificateLimitExceededException(crate::error::CertificateLimitExceededException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    InvalidCertificateException(crate::error::InvalidCertificateException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterCertificateError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterCertificateErrorKind::CertificateAlreadyExistsException(_inner) => {
                _inner.fmt(f)
            }
            RegisterCertificateErrorKind::CertificateLimitExceededException(_inner) => {
                _inner.fmt(f)
            }
            RegisterCertificateErrorKind::ClientException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::InvalidCertificateException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            RegisterCertificateErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterCertificateError {
    fn code(&self) -> Option<&str> {
        RegisterCertificateError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterCertificateError {
    pub fn new(kind: RegisterCertificateErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterCertificateErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterCertificateErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_certificate_already_exists_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::CertificateAlreadyExistsException(_)
        )
    }
    pub fn is_certificate_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::CertificateLimitExceededException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, RegisterCertificateErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_invalid_certificate_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::InvalidCertificateException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterCertificateErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for RegisterCertificateError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterCertificateErrorKind::CertificateAlreadyExistsException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::CertificateLimitExceededException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::ClientException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::InvalidCertificateException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::ServiceException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            RegisterCertificateErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RegisterEventTopicError {
    pub kind: RegisterEventTopicErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RegisterEventTopicErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RegisterEventTopicError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RegisterEventTopicErrorKind::ClientException(_inner) => _inner.fmt(f),
            RegisterEventTopicErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            RegisterEventTopicErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RegisterEventTopicErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RegisterEventTopicErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RegisterEventTopicError {
    fn code(&self) -> Option<&str> {
        RegisterEventTopicError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RegisterEventTopicError {
    pub fn new(kind: RegisterEventTopicErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RegisterEventTopicErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RegisterEventTopicErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, RegisterEventTopicErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterEventTopicErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RegisterEventTopicErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, RegisterEventTopicErrorKind::ServiceException(_))
    }
}
impl std::error::Error for RegisterEventTopicError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RegisterEventTopicErrorKind::ClientException(_inner) => Some(_inner),
            RegisterEventTopicErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            RegisterEventTopicErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RegisterEventTopicErrorKind::ServiceException(_inner) => Some(_inner),
            RegisterEventTopicErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RejectSharedDirectoryError {
    pub kind: RejectSharedDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RejectSharedDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryAlreadySharedException(crate::error::DirectoryAlreadySharedException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RejectSharedDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RejectSharedDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            RejectSharedDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => {
                _inner.fmt(f)
            }
            RejectSharedDirectoryErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            RejectSharedDirectoryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RejectSharedDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RejectSharedDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RejectSharedDirectoryError {
    fn code(&self) -> Option<&str> {
        RejectSharedDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RejectSharedDirectoryError {
    pub fn new(kind: RejectSharedDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RejectSharedDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RejectSharedDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            RejectSharedDirectoryErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_already_shared_exception(&self) -> bool {
        matches!(
            &self.kind,
            RejectSharedDirectoryErrorKind::DirectoryAlreadySharedException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RejectSharedDirectoryErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RejectSharedDirectoryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RejectSharedDirectoryErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for RejectSharedDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RejectSharedDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            RejectSharedDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => Some(_inner),
            RejectSharedDirectoryErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            RejectSharedDirectoryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RejectSharedDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            RejectSharedDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemoveIpRoutesError {
    pub kind: RemoveIpRoutesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemoveIpRoutesErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemoveIpRoutesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemoveIpRoutesErrorKind::ClientException(_inner) => _inner.fmt(f),
            RemoveIpRoutesErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            RemoveIpRoutesErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            RemoveIpRoutesErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RemoveIpRoutesErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RemoveIpRoutesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemoveIpRoutesError {
    fn code(&self) -> Option<&str> {
        RemoveIpRoutesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemoveIpRoutesError {
    pub fn new(kind: RemoveIpRoutesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemoveIpRoutesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemoveIpRoutesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, RemoveIpRoutesErrorKind::ClientException(_))
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveIpRoutesErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveIpRoutesErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveIpRoutesErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, RemoveIpRoutesErrorKind::ServiceException(_))
    }
}
impl std::error::Error for RemoveIpRoutesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemoveIpRoutesErrorKind::ClientException(_inner) => Some(_inner),
            RemoveIpRoutesErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            RemoveIpRoutesErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            RemoveIpRoutesErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RemoveIpRoutesErrorKind::ServiceException(_inner) => Some(_inner),
            RemoveIpRoutesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemoveRegionError {
    pub kind: RemoveRegionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemoveRegionErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryDoesNotExistException(crate::error::DirectoryDoesNotExistException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemoveRegionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemoveRegionErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::ClientException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::DirectoryDoesNotExistException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            RemoveRegionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemoveRegionError {
    fn code(&self) -> Option<&str> {
        RemoveRegionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemoveRegionError {
    pub fn new(kind: RemoveRegionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemoveRegionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemoveRegionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(&self.kind, RemoveRegionErrorKind::AccessDeniedException(_))
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, RemoveRegionErrorKind::ClientException(_))
    }
    pub fn is_directory_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveRegionErrorKind::DirectoryDoesNotExistException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveRegionErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, RemoveRegionErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveRegionErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for RemoveRegionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemoveRegionErrorKind::AccessDeniedException(_inner) => Some(_inner),
            RemoveRegionErrorKind::ClientException(_inner) => Some(_inner),
            RemoveRegionErrorKind::DirectoryDoesNotExistException(_inner) => Some(_inner),
            RemoveRegionErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            RemoveRegionErrorKind::ServiceException(_inner) => Some(_inner),
            RemoveRegionErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            RemoveRegionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemoveTagsFromResourceError {
    pub kind: RemoveTagsFromResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemoveTagsFromResourceErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemoveTagsFromResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemoveTagsFromResourceErrorKind::ClientException(_inner) => _inner.fmt(f),
            RemoveTagsFromResourceErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            RemoveTagsFromResourceErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RemoveTagsFromResourceErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RemoveTagsFromResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemoveTagsFromResourceError {
    fn code(&self) -> Option<&str> {
        RemoveTagsFromResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemoveTagsFromResourceError {
    pub fn new(kind: RemoveTagsFromResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemoveTagsFromResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemoveTagsFromResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveTagsFromResourceErrorKind::ClientException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveTagsFromResourceErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveTagsFromResourceErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RemoveTagsFromResourceErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for RemoveTagsFromResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemoveTagsFromResourceErrorKind::ClientException(_inner) => Some(_inner),
            RemoveTagsFromResourceErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            RemoveTagsFromResourceErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RemoveTagsFromResourceErrorKind::ServiceException(_inner) => Some(_inner),
            RemoveTagsFromResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ResetUserPasswordError {
    pub kind: ResetUserPasswordErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ResetUserPasswordErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidPasswordException(crate::error::InvalidPasswordException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    UserDoesNotExistException(crate::error::UserDoesNotExistException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ResetUserPasswordError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ResetUserPasswordErrorKind::ClientException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::InvalidPasswordException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::UserDoesNotExistException(_inner) => _inner.fmt(f),
            ResetUserPasswordErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ResetUserPasswordError {
    fn code(&self) -> Option<&str> {
        ResetUserPasswordError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ResetUserPasswordError {
    pub fn new(kind: ResetUserPasswordErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ResetUserPasswordErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ResetUserPasswordErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ResetUserPasswordErrorKind::ClientException(_))
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetUserPasswordErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetUserPasswordErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_password_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetUserPasswordErrorKind::InvalidPasswordException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, ResetUserPasswordErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetUserPasswordErrorKind::UnsupportedOperationException(_)
        )
    }
    pub fn is_user_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ResetUserPasswordErrorKind::UserDoesNotExistException(_)
        )
    }
}
impl std::error::Error for ResetUserPasswordError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ResetUserPasswordErrorKind::ClientException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::InvalidPasswordException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::ServiceException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::UserDoesNotExistException(_inner) => Some(_inner),
            ResetUserPasswordErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RestoreFromSnapshotError {
    pub kind: RestoreFromSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RestoreFromSnapshotErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RestoreFromSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RestoreFromSnapshotErrorKind::ClientException(_inner) => _inner.fmt(f),
            RestoreFromSnapshotErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            RestoreFromSnapshotErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            RestoreFromSnapshotErrorKind::ServiceException(_inner) => _inner.fmt(f),
            RestoreFromSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RestoreFromSnapshotError {
    fn code(&self) -> Option<&str> {
        RestoreFromSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RestoreFromSnapshotError {
    pub fn new(kind: RestoreFromSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RestoreFromSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RestoreFromSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, RestoreFromSnapshotErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            RestoreFromSnapshotErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            RestoreFromSnapshotErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            RestoreFromSnapshotErrorKind::ServiceException(_)
        )
    }
}
impl std::error::Error for RestoreFromSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RestoreFromSnapshotErrorKind::ClientException(_inner) => Some(_inner),
            RestoreFromSnapshotErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            RestoreFromSnapshotErrorKind::InvalidParameterException(_inner) => Some(_inner),
            RestoreFromSnapshotErrorKind::ServiceException(_inner) => Some(_inner),
            RestoreFromSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ShareDirectoryError {
    pub kind: ShareDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ShareDirectoryErrorKind {
    AccessDeniedException(crate::error::AccessDeniedException),
    ClientException(crate::error::ClientException),
    DirectoryAlreadySharedException(crate::error::DirectoryAlreadySharedException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    InvalidTargetException(crate::error::InvalidTargetException),
    OrganizationsException(crate::error::OrganizationsException),
    ServiceException(crate::error::ServiceException),
    ShareLimitExceededException(crate::error::ShareLimitExceededException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ShareDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ShareDirectoryErrorKind::AccessDeniedException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::InvalidTargetException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::OrganizationsException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::ShareLimitExceededException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            ShareDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ShareDirectoryError {
    fn code(&self) -> Option<&str> {
        ShareDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ShareDirectoryError {
    pub fn new(kind: ShareDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ShareDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ShareDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_access_denied_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::AccessDeniedException(_)
        )
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, ShareDirectoryErrorKind::ClientException(_))
    }
    pub fn is_directory_already_shared_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::DirectoryAlreadySharedException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_invalid_target_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::InvalidTargetException(_)
        )
    }
    pub fn is_organizations_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::OrganizationsException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, ShareDirectoryErrorKind::ServiceException(_))
    }
    pub fn is_share_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::ShareLimitExceededException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ShareDirectoryErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for ShareDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ShareDirectoryErrorKind::AccessDeniedException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::DirectoryAlreadySharedException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::InvalidParameterException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::InvalidTargetException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::OrganizationsException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::ShareLimitExceededException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            ShareDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartSchemaExtensionError {
    pub kind: StartSchemaExtensionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartSchemaExtensionErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    SnapshotLimitExceededException(crate::error::SnapshotLimitExceededException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartSchemaExtensionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartSchemaExtensionErrorKind::ClientException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::DirectoryUnavailableException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::ServiceException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::SnapshotLimitExceededException(_inner) => _inner.fmt(f),
            StartSchemaExtensionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartSchemaExtensionError {
    fn code(&self) -> Option<&str> {
        StartSchemaExtensionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartSchemaExtensionError {
    pub fn new(kind: StartSchemaExtensionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartSchemaExtensionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartSchemaExtensionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::ServiceException(_)
        )
    }
    pub fn is_snapshot_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartSchemaExtensionErrorKind::SnapshotLimitExceededException(_)
        )
    }
}
impl std::error::Error for StartSchemaExtensionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartSchemaExtensionErrorKind::ClientException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::DirectoryUnavailableException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::InvalidParameterException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::ServiceException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::SnapshotLimitExceededException(_inner) => Some(_inner),
            StartSchemaExtensionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UnshareDirectoryError {
    pub kind: UnshareDirectoryErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UnshareDirectoryErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryNotSharedException(crate::error::DirectoryNotSharedException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidTargetException(crate::error::InvalidTargetException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UnshareDirectoryError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UnshareDirectoryErrorKind::ClientException(_inner) => _inner.fmt(f),
            UnshareDirectoryErrorKind::DirectoryNotSharedException(_inner) => _inner.fmt(f),
            UnshareDirectoryErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            UnshareDirectoryErrorKind::InvalidTargetException(_inner) => _inner.fmt(f),
            UnshareDirectoryErrorKind::ServiceException(_inner) => _inner.fmt(f),
            UnshareDirectoryErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UnshareDirectoryError {
    fn code(&self) -> Option<&str> {
        UnshareDirectoryError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UnshareDirectoryError {
    pub fn new(kind: UnshareDirectoryErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UnshareDirectoryErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UnshareDirectoryErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, UnshareDirectoryErrorKind::ClientException(_))
    }
    pub fn is_directory_not_shared_exception(&self) -> bool {
        matches!(
            &self.kind,
            UnshareDirectoryErrorKind::DirectoryNotSharedException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            UnshareDirectoryErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_target_exception(&self) -> bool {
        matches!(
            &self.kind,
            UnshareDirectoryErrorKind::InvalidTargetException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, UnshareDirectoryErrorKind::ServiceException(_))
    }
}
impl std::error::Error for UnshareDirectoryError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UnshareDirectoryErrorKind::ClientException(_inner) => Some(_inner),
            UnshareDirectoryErrorKind::DirectoryNotSharedException(_inner) => Some(_inner),
            UnshareDirectoryErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            UnshareDirectoryErrorKind::InvalidTargetException(_inner) => Some(_inner),
            UnshareDirectoryErrorKind::ServiceException(_inner) => Some(_inner),
            UnshareDirectoryErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateConditionalForwarderError {
    pub kind: UpdateConditionalForwarderErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateConditionalForwarderErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateConditionalForwarderError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateConditionalForwarderErrorKind::ClientException(_inner) => _inner.fmt(f),
            UpdateConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            UpdateConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            UpdateConditionalForwarderErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdateConditionalForwarderErrorKind::ServiceException(_inner) => _inner.fmt(f),
            UpdateConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            UpdateConditionalForwarderErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateConditionalForwarderError {
    fn code(&self) -> Option<&str> {
        UpdateConditionalForwarderError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateConditionalForwarderError {
    pub fn new(kind: UpdateConditionalForwarderErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateConditionalForwarderErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateConditionalForwarderErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateConditionalForwarderErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for UpdateConditionalForwarderError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateConditionalForwarderErrorKind::ClientException(_inner) => Some(_inner),
            UpdateConditionalForwarderErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            UpdateConditionalForwarderErrorKind::EntityDoesNotExistException(_inner) => {
                Some(_inner)
            }
            UpdateConditionalForwarderErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdateConditionalForwarderErrorKind::ServiceException(_inner) => Some(_inner),
            UpdateConditionalForwarderErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            UpdateConditionalForwarderErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateNumberOfDomainControllersError {
    pub kind: UpdateNumberOfDomainControllersErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateNumberOfDomainControllersErrorKind {
    ClientException(crate::error::ClientException),
    DirectoryUnavailableException(crate::error::DirectoryUnavailableException),
    DomainControllerLimitExceededException(crate::error::DomainControllerLimitExceededException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateNumberOfDomainControllersError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateNumberOfDomainControllersErrorKind::ClientException(_inner) => _inner.fmt(f),
            UpdateNumberOfDomainControllersErrorKind::DirectoryUnavailableException(_inner) => {
                _inner.fmt(f)
            }
            UpdateNumberOfDomainControllersErrorKind::DomainControllerLimitExceededException(
                _inner,
            ) => _inner.fmt(f),
            UpdateNumberOfDomainControllersErrorKind::EntityDoesNotExistException(_inner) => {
                _inner.fmt(f)
            }
            UpdateNumberOfDomainControllersErrorKind::InvalidParameterException(_inner) => {
                _inner.fmt(f)
            }
            UpdateNumberOfDomainControllersErrorKind::ServiceException(_inner) => _inner.fmt(f),
            UpdateNumberOfDomainControllersErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            UpdateNumberOfDomainControllersErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateNumberOfDomainControllersError {
    fn code(&self) -> Option<&str> {
        UpdateNumberOfDomainControllersError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateNumberOfDomainControllersError {
    pub fn new(kind: UpdateNumberOfDomainControllersErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateNumberOfDomainControllersErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateNumberOfDomainControllersErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::ClientException(_)
        )
    }
    pub fn is_directory_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::DirectoryUnavailableException(_)
        )
    }
    pub fn is_domain_controller_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::DomainControllerLimitExceededException(_)
        )
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::ServiceException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateNumberOfDomainControllersErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for UpdateNumberOfDomainControllersError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateNumberOfDomainControllersErrorKind::ClientException(_inner) => Some(_inner),
            UpdateNumberOfDomainControllersErrorKind::DirectoryUnavailableException(_inner) => {
                Some(_inner)
            }
            UpdateNumberOfDomainControllersErrorKind::DomainControllerLimitExceededException(
                _inner,
            ) => Some(_inner),
            UpdateNumberOfDomainControllersErrorKind::EntityDoesNotExistException(_inner) => {
                Some(_inner)
            }
            UpdateNumberOfDomainControllersErrorKind::InvalidParameterException(_inner) => {
                Some(_inner)
            }
            UpdateNumberOfDomainControllersErrorKind::ServiceException(_inner) => Some(_inner),
            UpdateNumberOfDomainControllersErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            UpdateNumberOfDomainControllersErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateRadiusError {
    pub kind: UpdateRadiusErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateRadiusErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateRadiusError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateRadiusErrorKind::ClientException(_inner) => _inner.fmt(f),
            UpdateRadiusErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            UpdateRadiusErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdateRadiusErrorKind::ServiceException(_inner) => _inner.fmt(f),
            UpdateRadiusErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateRadiusError {
    fn code(&self) -> Option<&str> {
        UpdateRadiusError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateRadiusError {
    pub fn new(kind: UpdateRadiusErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateRadiusErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateRadiusErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, UpdateRadiusErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateRadiusErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateRadiusErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, UpdateRadiusErrorKind::ServiceException(_))
    }
}
impl std::error::Error for UpdateRadiusError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateRadiusErrorKind::ClientException(_inner) => Some(_inner),
            UpdateRadiusErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            UpdateRadiusErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdateRadiusErrorKind::ServiceException(_inner) => Some(_inner),
            UpdateRadiusErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateTrustError {
    pub kind: UpdateTrustErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateTrustErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateTrustError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateTrustErrorKind::ClientException(_inner) => _inner.fmt(f),
            UpdateTrustErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            UpdateTrustErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            UpdateTrustErrorKind::ServiceException(_inner) => _inner.fmt(f),
            UpdateTrustErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateTrustError {
    fn code(&self) -> Option<&str> {
        UpdateTrustError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateTrustError {
    pub fn new(kind: UpdateTrustErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateTrustErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateTrustErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, UpdateTrustErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateTrustErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateTrustErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, UpdateTrustErrorKind::ServiceException(_))
    }
}
impl std::error::Error for UpdateTrustError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateTrustErrorKind::ClientException(_inner) => Some(_inner),
            UpdateTrustErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            UpdateTrustErrorKind::InvalidParameterException(_inner) => Some(_inner),
            UpdateTrustErrorKind::ServiceException(_inner) => Some(_inner),
            UpdateTrustErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct VerifyTrustError {
    pub kind: VerifyTrustErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum VerifyTrustErrorKind {
    ClientException(crate::error::ClientException),
    EntityDoesNotExistException(crate::error::EntityDoesNotExistException),
    InvalidParameterException(crate::error::InvalidParameterException),
    ServiceException(crate::error::ServiceException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for VerifyTrustError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            VerifyTrustErrorKind::ClientException(_inner) => _inner.fmt(f),
            VerifyTrustErrorKind::EntityDoesNotExistException(_inner) => _inner.fmt(f),
            VerifyTrustErrorKind::InvalidParameterException(_inner) => _inner.fmt(f),
            VerifyTrustErrorKind::ServiceException(_inner) => _inner.fmt(f),
            VerifyTrustErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            VerifyTrustErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for VerifyTrustError {
    fn code(&self) -> Option<&str> {
        VerifyTrustError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl VerifyTrustError {
    pub fn new(kind: VerifyTrustErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: VerifyTrustErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: VerifyTrustErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display
    // as implemented by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_client_exception(&self) -> bool {
        matches!(&self.kind, VerifyTrustErrorKind::ClientException(_))
    }
    pub fn is_entity_does_not_exist_exception(&self) -> bool {
        matches!(
            &self.kind,
            VerifyTrustErrorKind::EntityDoesNotExistException(_)
        )
    }
    pub fn is_invalid_parameter_exception(&self) -> bool {
        matches!(
            &self.kind,
            VerifyTrustErrorKind::InvalidParameterException(_)
        )
    }
    pub fn is_service_exception(&self) -> bool {
        matches!(&self.kind, VerifyTrustErrorKind::ServiceException(_))
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            VerifyTrustErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for VerifyTrustError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            VerifyTrustErrorKind::ClientException(_inner) => Some(_inner),
            VerifyTrustErrorKind::EntityDoesNotExistException(_inner) => Some(_inner),
            VerifyTrustErrorKind::InvalidParameterException(_inner) => Some(_inner),
            VerifyTrustErrorKind::ServiceException(_inner) => Some(_inner),
            VerifyTrustErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            VerifyTrustErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The operation is not supported.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsupportedOperationException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsupportedOperationException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl UnsupportedOperationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedOperationException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for UnsupportedOperationException {}
/// See [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
pub mod unsupported_operation_exception {
    /// A builder for [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
        pub fn build(self) -> crate::error::UnsupportedOperationException {
            crate::error::UnsupportedOperationException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl UnsupportedOperationException {
    /// Creates a new builder-style object to manufacture [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    pub fn builder() -> crate::error::unsupported_operation_exception::Builder {
        crate::error::unsupported_operation_exception::Builder::default()
    }
}

/// <p>An exception has occurred in Directory Service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl ServiceException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ServiceException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ServiceException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for ServiceException {}
/// See [`ServiceException`](crate::error::ServiceException)
pub mod service_exception {
    /// A builder for [`ServiceException`](crate::error::ServiceException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceException`](crate::error::ServiceException)
        pub fn build(self) -> crate::error::ServiceException {
            crate::error::ServiceException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl ServiceException {
    /// Creates a new builder-style object to manufacture [`ServiceException`](crate::error::ServiceException)
    pub fn builder() -> crate::error::service_exception::Builder {
        crate::error::service_exception::Builder::default()
    }
}

/// <p>One or more parameters are not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidParameterException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidParameterException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidParameterException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidParameterException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidParameterException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidParameterException {}
/// See [`InvalidParameterException`](crate::error::InvalidParameterException)
pub mod invalid_parameter_exception {
    /// A builder for [`InvalidParameterException`](crate::error::InvalidParameterException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidParameterException`](crate::error::InvalidParameterException)
        pub fn build(self) -> crate::error::InvalidParameterException {
            crate::error::InvalidParameterException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidParameterException {
    /// Creates a new builder-style object to manufacture [`InvalidParameterException`](crate::error::InvalidParameterException)
    pub fn builder() -> crate::error::invalid_parameter_exception::Builder {
        crate::error::invalid_parameter_exception::Builder::default()
    }
}

/// <p>The specified entity could not be found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityDoesNotExistException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityDoesNotExistException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl EntityDoesNotExistException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityDoesNotExistException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityDoesNotExistException {}
/// See [`EntityDoesNotExistException`](crate::error::EntityDoesNotExistException)
pub mod entity_does_not_exist_exception {
    /// A builder for [`EntityDoesNotExistException`](crate::error::EntityDoesNotExistException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityDoesNotExistException`](crate::error::EntityDoesNotExistException)
        pub fn build(self) -> crate::error::EntityDoesNotExistException {
            crate::error::EntityDoesNotExistException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl EntityDoesNotExistException {
    /// Creates a new builder-style object to manufacture [`EntityDoesNotExistException`](crate::error::EntityDoesNotExistException)
    pub fn builder() -> crate::error::entity_does_not_exist_exception::Builder {
        crate::error::entity_does_not_exist_exception::Builder::default()
    }
}

/// <p>A client exception has occurred.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ClientException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ClientException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ClientException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl ClientException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ClientException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ClientException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ClientException {}
/// See [`ClientException`](crate::error::ClientException)
pub mod client_exception {
    /// A builder for [`ClientException`](crate::error::ClientException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ClientException`](crate::error::ClientException)
        pub fn build(self) -> crate::error::ClientException {
            crate::error::ClientException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl ClientException {
    /// Creates a new builder-style object to manufacture [`ClientException`](crate::error::ClientException)
    pub fn builder() -> crate::error::client_exception::Builder {
        crate::error::client_exception::Builder::default()
    }
}

/// <p>The maximum allowed number of domain controllers per directory was exceeded. The
/// default limit per directory is 20 domain controllers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DomainControllerLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DomainControllerLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DomainControllerLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DomainControllerLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DomainControllerLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DomainControllerLimitExceededException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for DomainControllerLimitExceededException {}
/// See [`DomainControllerLimitExceededException`](crate::error::DomainControllerLimitExceededException)
pub mod domain_controller_limit_exceeded_exception {
    /// A builder for [`DomainControllerLimitExceededException`](crate::error::DomainControllerLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DomainControllerLimitExceededException`](crate::error::DomainControllerLimitExceededException)
        pub fn build(self) -> crate::error::DomainControllerLimitExceededException {
            crate::error::DomainControllerLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DomainControllerLimitExceededException {
    /// Creates a new builder-style object to manufacture [`DomainControllerLimitExceededException`](crate::error::DomainControllerLimitExceededException)
    pub fn builder() -> crate::error::domain_controller_limit_exceeded_exception::Builder {
        crate::error::domain_controller_limit_exceeded_exception::Builder::default()
    }
}

/// <p>The specified directory is unavailable or could not be found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryUnavailableException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryUnavailableException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryUnavailableException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryUnavailableException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryUnavailableException {}
/// See [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
pub mod directory_unavailable_exception {
    /// A builder for [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
        pub fn build(self) -> crate::error::DirectoryUnavailableException {
            crate::error::DirectoryUnavailableException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryUnavailableException {
    /// Creates a new builder-style object to manufacture [`DirectoryUnavailableException`](crate::error::DirectoryUnavailableException)
    pub fn builder() -> crate::error::directory_unavailable_exception::Builder {
        crate::error::directory_unavailable_exception::Builder::default()
    }
}

/// <p>The specified shared target is not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidTargetException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidTargetException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidTargetException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidTargetException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidTargetException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidTargetException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidTargetException {}
/// See [`InvalidTargetException`](crate::error::InvalidTargetException)
pub mod invalid_target_exception {
    /// A builder for [`InvalidTargetException`](crate::error::InvalidTargetException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidTargetException`](crate::error::InvalidTargetException)
        pub fn build(self) -> crate::error::InvalidTargetException {
            crate::error::InvalidTargetException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidTargetException {
    /// Creates a new builder-style object to manufacture [`InvalidTargetException`](crate::error::InvalidTargetException)
    pub fn builder() -> crate::error::invalid_target_exception::Builder {
        crate::error::invalid_target_exception::Builder::default()
    }
}

/// <p>The specified directory has not been shared with this Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryNotSharedException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryNotSharedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryNotSharedException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryNotSharedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryNotSharedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryNotSharedException")?;
        if let Some(inner_9) = &self.message {
            write!(f, ": {}", inner_9)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryNotSharedException {}
/// See [`DirectoryNotSharedException`](crate::error::DirectoryNotSharedException)
pub mod directory_not_shared_exception {
    /// A builder for [`DirectoryNotSharedException`](crate::error::DirectoryNotSharedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryNotSharedException`](crate::error::DirectoryNotSharedException)
        pub fn build(self) -> crate::error::DirectoryNotSharedException {
            crate::error::DirectoryNotSharedException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryNotSharedException {
    /// Creates a new builder-style object to manufacture [`DirectoryNotSharedException`](crate::error::DirectoryNotSharedException)
    pub fn builder() -> crate::error::directory_not_shared_exception::Builder {
        crate::error::directory_not_shared_exception::Builder::default()
    }
}

/// <p>The maximum number of manual snapshots for the directory has been reached. You can
/// use the <a>GetSnapshotLimits</a> operation to determine the snapshot limits
/// for a directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SnapshotLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for SnapshotLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SnapshotLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl SnapshotLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for SnapshotLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "SnapshotLimitExceededException")?;
        if let Some(inner_10) = &self.message {
            write!(f, ": {}", inner_10)?;
        }
        Ok(())
    }
}
impl std::error::Error for SnapshotLimitExceededException {}
/// See [`SnapshotLimitExceededException`](crate::error::SnapshotLimitExceededException)
pub mod snapshot_limit_exceeded_exception {
    /// A builder for [`SnapshotLimitExceededException`](crate::error::SnapshotLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`SnapshotLimitExceededException`](crate::error::SnapshotLimitExceededException)
        pub fn build(self) -> crate::error::SnapshotLimitExceededException {
            crate::error::SnapshotLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl SnapshotLimitExceededException {
    /// Creates a new builder-style object to manufacture [`SnapshotLimitExceededException`](crate::error::SnapshotLimitExceededException)
    pub fn builder() -> crate::error::snapshot_limit_exceeded_exception::Builder {
        crate::error::snapshot_limit_exceeded_exception::Builder::default()
    }
}

/// <p>The maximum number of Amazon Web Services accounts that you can share with this directory has been
/// reached.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ShareLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ShareLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ShareLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl ShareLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ShareLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ShareLimitExceededException")?;
        if let Some(inner_11) = &self.message {
            write!(f, ": {}", inner_11)?;
        }
        Ok(())
    }
}
impl std::error::Error for ShareLimitExceededException {}
/// See [`ShareLimitExceededException`](crate::error::ShareLimitExceededException)
pub mod share_limit_exceeded_exception {
    /// A builder for [`ShareLimitExceededException`](crate::error::ShareLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`ShareLimitExceededException`](crate::error::ShareLimitExceededException)
        pub fn build(self) -> crate::error::ShareLimitExceededException {
            crate::error::ShareLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl ShareLimitExceededException {
    /// Creates a new builder-style object to manufacture [`ShareLimitExceededException`](crate::error::ShareLimitExceededException)
    pub fn builder() -> crate::error::share_limit_exceeded_exception::Builder {
        crate::error::share_limit_exceeded_exception::Builder::default()
    }
}

/// <p>Exception encountered while trying to access your Amazon Web Services organization.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OrganizationsException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for OrganizationsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationsException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl OrganizationsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for OrganizationsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "OrganizationsException")?;
        if let Some(inner_12) = &self.message {
            write!(f, ": {}", inner_12)?;
        }
        Ok(())
    }
}
impl std::error::Error for OrganizationsException {}
/// See [`OrganizationsException`](crate::error::OrganizationsException)
pub mod organizations_exception {
    /// A builder for [`OrganizationsException`](crate::error::OrganizationsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`OrganizationsException`](crate::error::OrganizationsException)
        pub fn build(self) -> crate::error::OrganizationsException {
            crate::error::OrganizationsException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl OrganizationsException {
    /// Creates a new builder-style object to manufacture [`OrganizationsException`](crate::error::OrganizationsException)
    pub fn builder() -> crate::error::organizations_exception::Builder {
        crate::error::organizations_exception::Builder::default()
    }
}

/// <p>The specified directory has already been shared with this Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryAlreadySharedException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryAlreadySharedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryAlreadySharedException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryAlreadySharedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryAlreadySharedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryAlreadySharedException")?;
        if let Some(inner_13) = &self.message {
            write!(f, ": {}", inner_13)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryAlreadySharedException {}
/// See [`DirectoryAlreadySharedException`](crate::error::DirectoryAlreadySharedException)
pub mod directory_already_shared_exception {
    /// A builder for [`DirectoryAlreadySharedException`](crate::error::DirectoryAlreadySharedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryAlreadySharedException`](crate::error::DirectoryAlreadySharedException)
        pub fn build(self) -> crate::error::DirectoryAlreadySharedException {
            crate::error::DirectoryAlreadySharedException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryAlreadySharedException {
    /// Creates a new builder-style object to manufacture [`DirectoryAlreadySharedException`](crate::error::DirectoryAlreadySharedException)
    pub fn builder() -> crate::error::directory_already_shared_exception::Builder {
        crate::error::directory_already_shared_exception::Builder::default()
    }
}

/// <p>Client authentication is not available in this region at this time.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AccessDeniedException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AccessDeniedException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl AccessDeniedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for AccessDeniedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AccessDeniedException")?;
        if let Some(inner_14) = &self.message {
            write!(f, ": {}", inner_14)?;
        }
        Ok(())
    }
}
impl std::error::Error for AccessDeniedException {}
/// See [`AccessDeniedException`](crate::error::AccessDeniedException)
pub mod access_denied_exception {
    /// A builder for [`AccessDeniedException`](crate::error::AccessDeniedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AccessDeniedException`](crate::error::AccessDeniedException)
        pub fn build(self) -> crate::error::AccessDeniedException {
            crate::error::AccessDeniedException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl AccessDeniedException {
    /// Creates a new builder-style object to manufacture [`AccessDeniedException`](crate::error::AccessDeniedException)
    pub fn builder() -> crate::error::access_denied_exception::Builder {
        crate::error::access_denied_exception::Builder::default()
    }
}

/// <p>The user provided a username that does not exist in your directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UserDoesNotExistException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UserDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UserDoesNotExistException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl UserDoesNotExistException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UserDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UserDoesNotExistException")?;
        if let Some(inner_15) = &self.message {
            write!(f, ": {}", inner_15)?;
        }
        Ok(())
    }
}
impl std::error::Error for UserDoesNotExistException {}
/// See [`UserDoesNotExistException`](crate::error::UserDoesNotExistException)
pub mod user_does_not_exist_exception {
    /// A builder for [`UserDoesNotExistException`](crate::error::UserDoesNotExistException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`UserDoesNotExistException`](crate::error::UserDoesNotExistException)
        pub fn build(self) -> crate::error::UserDoesNotExistException {
            crate::error::UserDoesNotExistException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl UserDoesNotExistException {
    /// Creates a new builder-style object to manufacture [`UserDoesNotExistException`](crate::error::UserDoesNotExistException)
    pub fn builder() -> crate::error::user_does_not_exist_exception::Builder {
        crate::error::user_does_not_exist_exception::Builder::default()
    }
}

/// <p>The new password provided by the user does not meet the password complexity
/// requirements defined in your directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidPasswordException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidPasswordException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidPasswordException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidPasswordException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidPasswordException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidPasswordException")?;
        if let Some(inner_16) = &self.message {
            write!(f, ": {}", inner_16)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidPasswordException {}
/// See [`InvalidPasswordException`](crate::error::InvalidPasswordException)
pub mod invalid_password_exception {
    /// A builder for [`InvalidPasswordException`](crate::error::InvalidPasswordException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidPasswordException`](crate::error::InvalidPasswordException)
        pub fn build(self) -> crate::error::InvalidPasswordException {
            crate::error::InvalidPasswordException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidPasswordException {
    /// Creates a new builder-style object to manufacture [`InvalidPasswordException`](crate::error::InvalidPasswordException)
    pub fn builder() -> crate::error::invalid_password_exception::Builder {
        crate::error::invalid_password_exception::Builder::default()
    }
}

/// <p>The specified directory does not exist in the system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryDoesNotExistException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryDoesNotExistException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryDoesNotExistException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryDoesNotExistException")?;
        if let Some(inner_17) = &self.message {
            write!(f, ": {}", inner_17)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryDoesNotExistException {}
/// See [`DirectoryDoesNotExistException`](crate::error::DirectoryDoesNotExistException)
pub mod directory_does_not_exist_exception {
    /// A builder for [`DirectoryDoesNotExistException`](crate::error::DirectoryDoesNotExistException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryDoesNotExistException`](crate::error::DirectoryDoesNotExistException)
        pub fn build(self) -> crate::error::DirectoryDoesNotExistException {
            crate::error::DirectoryDoesNotExistException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryDoesNotExistException {
    /// Creates a new builder-style object to manufacture [`DirectoryDoesNotExistException`](crate::error::DirectoryDoesNotExistException)
    pub fn builder() -> crate::error::directory_does_not_exist_exception::Builder {
        crate::error::directory_does_not_exist_exception::Builder::default()
    }
}

/// <p>The certificate PEM that was provided has incorrect encoding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidCertificateException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidCertificateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidCertificateException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidCertificateException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidCertificateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidCertificateException")?;
        if let Some(inner_18) = &self.message {
            write!(f, ": {}", inner_18)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidCertificateException {}
/// See [`InvalidCertificateException`](crate::error::InvalidCertificateException)
pub mod invalid_certificate_exception {
    /// A builder for [`InvalidCertificateException`](crate::error::InvalidCertificateException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidCertificateException`](crate::error::InvalidCertificateException)
        pub fn build(self) -> crate::error::InvalidCertificateException {
            crate::error::InvalidCertificateException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidCertificateException {
    /// Creates a new builder-style object to manufacture [`InvalidCertificateException`](crate::error::InvalidCertificateException)
    pub fn builder() -> crate::error::invalid_certificate_exception::Builder {
        crate::error::invalid_certificate_exception::Builder::default()
    }
}

/// <p>The certificate could not be added because the certificate limit has been reached.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CertificateLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CertificateLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CertificateLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl CertificateLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CertificateLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CertificateLimitExceededException")?;
        if let Some(inner_19) = &self.message {
            write!(f, ": {}", inner_19)?;
        }
        Ok(())
    }
}
impl std::error::Error for CertificateLimitExceededException {}
/// See [`CertificateLimitExceededException`](crate::error::CertificateLimitExceededException)
pub mod certificate_limit_exceeded_exception {
    /// A builder for [`CertificateLimitExceededException`](crate::error::CertificateLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CertificateLimitExceededException`](crate::error::CertificateLimitExceededException)
        pub fn build(self) -> crate::error::CertificateLimitExceededException {
            crate::error::CertificateLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl CertificateLimitExceededException {
    /// Creates a new builder-style object to manufacture [`CertificateLimitExceededException`](crate::error::CertificateLimitExceededException)
    pub fn builder() -> crate::error::certificate_limit_exceeded_exception::Builder {
        crate::error::certificate_limit_exceeded_exception::Builder::default()
    }
}

/// <p>The certificate has already been registered into the system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CertificateAlreadyExistsException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CertificateAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CertificateAlreadyExistsException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl CertificateAlreadyExistsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CertificateAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CertificateAlreadyExistsException")?;
        if let Some(inner_20) = &self.message {
            write!(f, ": {}", inner_20)?;
        }
        Ok(())
    }
}
impl std::error::Error for CertificateAlreadyExistsException {}
/// See [`CertificateAlreadyExistsException`](crate::error::CertificateAlreadyExistsException)
pub mod certificate_already_exists_exception {
    /// A builder for [`CertificateAlreadyExistsException`](crate::error::CertificateAlreadyExistsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CertificateAlreadyExistsException`](crate::error::CertificateAlreadyExistsException)
        pub fn build(self) -> crate::error::CertificateAlreadyExistsException {
            crate::error::CertificateAlreadyExistsException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl CertificateAlreadyExistsException {
    /// Creates a new builder-style object to manufacture [`CertificateAlreadyExistsException`](crate::error::CertificateAlreadyExistsException)
    pub fn builder() -> crate::error::certificate_already_exists_exception::Builder {
        crate::error::certificate_already_exists_exception::Builder::default()
    }
}

/// <p>The <code>NextToken</code> value is not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidNextTokenException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidNextTokenException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidNextTokenException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidNextTokenException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidNextTokenException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidNextTokenException")?;
        if let Some(inner_21) = &self.message {
            write!(f, ": {}", inner_21)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidNextTokenException {}
/// See [`InvalidNextTokenException`](crate::error::InvalidNextTokenException)
pub mod invalid_next_token_exception {
    /// A builder for [`InvalidNextTokenException`](crate::error::InvalidNextTokenException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidNextTokenException`](crate::error::InvalidNextTokenException)
        pub fn build(self) -> crate::error::InvalidNextTokenException {
            crate::error::InvalidNextTokenException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidNextTokenException {
    /// Creates a new builder-style object to manufacture [`InvalidNextTokenException`](crate::error::InvalidNextTokenException)
    pub fn builder() -> crate::error::invalid_next_token_exception::Builder {
        crate::error::invalid_next_token_exception::Builder::default()
    }
}

/// <p>The account does not have sufficient permission to perform the operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InsufficientPermissionsException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InsufficientPermissionsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InsufficientPermissionsException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InsufficientPermissionsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InsufficientPermissionsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InsufficientPermissionsException")?;
        if let Some(inner_22) = &self.message {
            write!(f, ": {}", inner_22)?;
        }
        Ok(())
    }
}
impl std::error::Error for InsufficientPermissionsException {}
/// See [`InsufficientPermissionsException`](crate::error::InsufficientPermissionsException)
pub mod insufficient_permissions_exception {
    /// A builder for [`InsufficientPermissionsException`](crate::error::InsufficientPermissionsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InsufficientPermissionsException`](crate::error::InsufficientPermissionsException)
        pub fn build(self) -> crate::error::InsufficientPermissionsException {
            crate::error::InsufficientPermissionsException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InsufficientPermissionsException {
    /// Creates a new builder-style object to manufacture [`InsufficientPermissionsException`](crate::error::InsufficientPermissionsException)
    pub fn builder() -> crate::error::insufficient_permissions_exception::Builder {
        crate::error::insufficient_permissions_exception::Builder::default()
    }
}

/// <p>An authentication error occurred.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthenticationFailedException {
    /// <p>The textual message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The identifier of the request that caused the exception.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AuthenticationFailedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthenticationFailedException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl AuthenticationFailedException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for AuthenticationFailedException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "AuthenticationFailedException")?;
        if let Some(inner_23) = &self.message {
            write!(f, ": {}", inner_23)?;
        }
        Ok(())
    }
}
impl std::error::Error for AuthenticationFailedException {}
/// See [`AuthenticationFailedException`](crate::error::AuthenticationFailedException)
pub mod authentication_failed_exception {
    /// A builder for [`AuthenticationFailedException`](crate::error::AuthenticationFailedException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The textual message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The identifier of the request that caused the exception.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AuthenticationFailedException`](crate::error::AuthenticationFailedException)
        pub fn build(self) -> crate::error::AuthenticationFailedException {
            crate::error::AuthenticationFailedException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl AuthenticationFailedException {
    /// Creates a new builder-style object to manufacture [`AuthenticationFailedException`](crate::error::AuthenticationFailedException)
    pub fn builder() -> crate::error::authentication_failed_exception::Builder {
        crate::error::authentication_failed_exception::Builder::default()
    }
}

/// <p>The specified entity already exists.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EntityAlreadyExistsException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for EntityAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EntityAlreadyExistsException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl EntityAlreadyExistsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for EntityAlreadyExistsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EntityAlreadyExistsException")?;
        if let Some(inner_24) = &self.message {
            write!(f, ": {}", inner_24)?;
        }
        Ok(())
    }
}
impl std::error::Error for EntityAlreadyExistsException {}
/// See [`EntityAlreadyExistsException`](crate::error::EntityAlreadyExistsException)
pub mod entity_already_exists_exception {
    /// A builder for [`EntityAlreadyExistsException`](crate::error::EntityAlreadyExistsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`EntityAlreadyExistsException`](crate::error::EntityAlreadyExistsException)
        pub fn build(self) -> crate::error::EntityAlreadyExistsException {
            crate::error::EntityAlreadyExistsException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl EntityAlreadyExistsException {
    /// Creates a new builder-style object to manufacture [`EntityAlreadyExistsException`](crate::error::EntityAlreadyExistsException)
    pub fn builder() -> crate::error::entity_already_exists_exception::Builder {
        crate::error::entity_already_exists_exception::Builder::default()
    }
}

/// <p>Client authentication setup could not be completed because at least one valid certificate must be
/// registered in the system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct NoAvailableCertificateException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for NoAvailableCertificateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("NoAvailableCertificateException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl NoAvailableCertificateException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for NoAvailableCertificateException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "NoAvailableCertificateException")?;
        if let Some(inner_25) = &self.message {
            write!(f, ": {}", inner_25)?;
        }
        Ok(())
    }
}
impl std::error::Error for NoAvailableCertificateException {}
/// See [`NoAvailableCertificateException`](crate::error::NoAvailableCertificateException)
pub mod no_available_certificate_exception {
    /// A builder for [`NoAvailableCertificateException`](crate::error::NoAvailableCertificateException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`NoAvailableCertificateException`](crate::error::NoAvailableCertificateException)
        pub fn build(self) -> crate::error::NoAvailableCertificateException {
            crate::error::NoAvailableCertificateException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl NoAvailableCertificateException {
    /// Creates a new builder-style object to manufacture [`NoAvailableCertificateException`](crate::error::NoAvailableCertificateException)
    pub fn builder() -> crate::error::no_available_certificate_exception::Builder {
        crate::error::no_available_certificate_exception::Builder::default()
    }
}

/// <p>The LDAP activities could not be performed because they are limited by the LDAPS
/// status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidLdapsStatusException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidLdapsStatusException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidLdapsStatusException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidLdapsStatusException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidLdapsStatusException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f,
            "InvalidLdapsStatusException [InvalidLDAPSStatusException]"
        )?;
        if let Some(inner_26) = &self.message {
            write!(f, ": {}", inner_26)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidLdapsStatusException {}
/// See [`InvalidLdapsStatusException`](crate::error::InvalidLdapsStatusException)
pub mod invalid_ldaps_status_exception {
    /// A builder for [`InvalidLdapsStatusException`](crate::error::InvalidLdapsStatusException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidLdapsStatusException`](crate::error::InvalidLdapsStatusException)
        pub fn build(self) -> crate::error::InvalidLdapsStatusException {
            crate::error::InvalidLdapsStatusException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidLdapsStatusException {
    /// Creates a new builder-style object to manufacture [`InvalidLdapsStatusException`](crate::error::InvalidLdapsStatusException)
    pub fn builder() -> crate::error::invalid_ldaps_status_exception::Builder {
        crate::error::invalid_ldaps_status_exception::Builder::default()
    }
}

/// <p>Client authentication is already enabled.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidClientAuthStatusException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidClientAuthStatusException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidClientAuthStatusException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl InvalidClientAuthStatusException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidClientAuthStatusException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidClientAuthStatusException")?;
        if let Some(inner_27) = &self.message {
            write!(f, ": {}", inner_27)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidClientAuthStatusException {}
/// See [`InvalidClientAuthStatusException`](crate::error::InvalidClientAuthStatusException)
pub mod invalid_client_auth_status_exception {
    /// A builder for [`InvalidClientAuthStatusException`](crate::error::InvalidClientAuthStatusException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidClientAuthStatusException`](crate::error::InvalidClientAuthStatusException)
        pub fn build(self) -> crate::error::InvalidClientAuthStatusException {
            crate::error::InvalidClientAuthStatusException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl InvalidClientAuthStatusException {
    /// Creates a new builder-style object to manufacture [`InvalidClientAuthStatusException`](crate::error::InvalidClientAuthStatusException)
    pub fn builder() -> crate::error::invalid_client_auth_status_exception::Builder {
        crate::error::invalid_client_auth_status_exception::Builder::default()
    }
}

/// <p>The certificate is not present in the system for describe or deregister activities.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CertificateDoesNotExistException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CertificateDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CertificateDoesNotExistException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl CertificateDoesNotExistException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CertificateDoesNotExistException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CertificateDoesNotExistException")?;
        if let Some(inner_28) = &self.message {
            write!(f, ": {}", inner_28)?;
        }
        Ok(())
    }
}
impl std::error::Error for CertificateDoesNotExistException {}
/// See [`CertificateDoesNotExistException`](crate::error::CertificateDoesNotExistException)
pub mod certificate_does_not_exist_exception {
    /// A builder for [`CertificateDoesNotExistException`](crate::error::CertificateDoesNotExistException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CertificateDoesNotExistException`](crate::error::CertificateDoesNotExistException)
        pub fn build(self) -> crate::error::CertificateDoesNotExistException {
            crate::error::CertificateDoesNotExistException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl CertificateDoesNotExistException {
    /// Creates a new builder-style object to manufacture [`CertificateDoesNotExistException`](crate::error::CertificateDoesNotExistException)
    pub fn builder() -> crate::error::certificate_does_not_exist_exception::Builder {
        crate::error::certificate_does_not_exist_exception::Builder::default()
    }
}

/// <p>The certificate is being used for the LDAP security connection and cannot be removed
/// without disabling LDAP security.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CertificateInUseException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CertificateInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CertificateInUseException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl CertificateInUseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CertificateInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CertificateInUseException")?;
        if let Some(inner_29) = &self.message {
            write!(f, ": {}", inner_29)?;
        }
        Ok(())
    }
}
impl std::error::Error for CertificateInUseException {}
/// See [`CertificateInUseException`](crate::error::CertificateInUseException)
pub mod certificate_in_use_exception {
    /// A builder for [`CertificateInUseException`](crate::error::CertificateInUseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CertificateInUseException`](crate::error::CertificateInUseException)
        pub fn build(self) -> crate::error::CertificateInUseException {
            crate::error::CertificateInUseException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl CertificateInUseException {
    /// Creates a new builder-style object to manufacture [`CertificateInUseException`](crate::error::CertificateInUseException)
    pub fn builder() -> crate::error::certificate_in_use_exception::Builder {
        crate::error::certificate_in_use_exception::Builder::default()
    }
}

/// <p>The maximum number of directories in the region has been reached. You can use the
/// <a>GetDirectoryLimits</a> operation to determine your directory limits in
/// the region.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryLimitExceededException")?;
        if let Some(inner_30) = &self.message {
            write!(f, ": {}", inner_30)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryLimitExceededException {}
/// See [`DirectoryLimitExceededException`](crate::error::DirectoryLimitExceededException)
pub mod directory_limit_exceeded_exception {
    /// A builder for [`DirectoryLimitExceededException`](crate::error::DirectoryLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryLimitExceededException`](crate::error::DirectoryLimitExceededException)
        pub fn build(self) -> crate::error::DirectoryLimitExceededException {
            crate::error::DirectoryLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryLimitExceededException {
    /// Creates a new builder-style object to manufacture [`DirectoryLimitExceededException`](crate::error::DirectoryLimitExceededException)
    pub fn builder() -> crate::error::directory_limit_exceeded_exception::Builder {
        crate::error::directory_limit_exceeded_exception::Builder::default()
    }
}

/// <p>The maximum allowed number of tags was exceeded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TagLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl TagLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TagLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TagLimitExceededException")?;
        if let Some(inner_31) = &self.message {
            write!(f, ": {}", inner_31)?;
        }
        Ok(())
    }
}
impl std::error::Error for TagLimitExceededException {}
/// See [`TagLimitExceededException`](crate::error::TagLimitExceededException)
pub mod tag_limit_exceeded_exception {
    /// A builder for [`TagLimitExceededException`](crate::error::TagLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`TagLimitExceededException`](crate::error::TagLimitExceededException)
        pub fn build(self) -> crate::error::TagLimitExceededException {
            crate::error::TagLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl TagLimitExceededException {
    /// Creates a new builder-style object to manufacture [`TagLimitExceededException`](crate::error::TagLimitExceededException)
    pub fn builder() -> crate::error::tag_limit_exceeded_exception::Builder {
        crate::error::tag_limit_exceeded_exception::Builder::default()
    }
}

/// <p>You have reached the limit for maximum number of simultaneous Region replications per
/// directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegionLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RegionLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegionLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl RegionLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for RegionLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "RegionLimitExceededException")?;
        if let Some(inner_32) = &self.message {
            write!(f, ": {}", inner_32)?;
        }
        Ok(())
    }
}
impl std::error::Error for RegionLimitExceededException {}
/// See [`RegionLimitExceededException`](crate::error::RegionLimitExceededException)
pub mod region_limit_exceeded_exception {
    /// A builder for [`RegionLimitExceededException`](crate::error::RegionLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`RegionLimitExceededException`](crate::error::RegionLimitExceededException)
        pub fn build(self) -> crate::error::RegionLimitExceededException {
            crate::error::RegionLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl RegionLimitExceededException {
    /// Creates a new builder-style object to manufacture [`RegionLimitExceededException`](crate::error::RegionLimitExceededException)
    pub fn builder() -> crate::error::region_limit_exceeded_exception::Builder {
        crate::error::region_limit_exceeded_exception::Builder::default()
    }
}

/// <p>The Region you specified is the same Region where the Managed Microsoft AD directory
/// was created. Specify a different Region and try again.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DirectoryAlreadyInRegionException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DirectoryAlreadyInRegionException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryAlreadyInRegionException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl DirectoryAlreadyInRegionException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for DirectoryAlreadyInRegionException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "DirectoryAlreadyInRegionException")?;
        if let Some(inner_33) = &self.message {
            write!(f, ": {}", inner_33)?;
        }
        Ok(())
    }
}
impl std::error::Error for DirectoryAlreadyInRegionException {}
/// See [`DirectoryAlreadyInRegionException`](crate::error::DirectoryAlreadyInRegionException)
pub mod directory_already_in_region_exception {
    /// A builder for [`DirectoryAlreadyInRegionException`](crate::error::DirectoryAlreadyInRegionException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DirectoryAlreadyInRegionException`](crate::error::DirectoryAlreadyInRegionException)
        pub fn build(self) -> crate::error::DirectoryAlreadyInRegionException {
            crate::error::DirectoryAlreadyInRegionException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl DirectoryAlreadyInRegionException {
    /// Creates a new builder-style object to manufacture [`DirectoryAlreadyInRegionException`](crate::error::DirectoryAlreadyInRegionException)
    pub fn builder() -> crate::error::directory_already_in_region_exception::Builder {
        crate::error::directory_already_in_region_exception::Builder::default()
    }
}

/// <p>The maximum allowed number of IP addresses was exceeded. The default limit is 100 IP
/// address blocks.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct IpRouteLimitExceededException {
    /// <p>The descriptive message for the exception.</p>
    pub message: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services request identifier.</p>
    pub request_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for IpRouteLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("IpRouteLimitExceededException");
        formatter.field("message", &self.message);
        formatter.field("request_id", &self.request_id);
        formatter.finish()
    }
}
impl IpRouteLimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for IpRouteLimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "IpRouteLimitExceededException")?;
        if let Some(inner_34) = &self.message {
            write!(f, ": {}", inner_34)?;
        }
        Ok(())
    }
}
impl std::error::Error for IpRouteLimitExceededException {}
/// See [`IpRouteLimitExceededException`](crate::error::IpRouteLimitExceededException)
pub mod ip_route_limit_exceeded_exception {
    /// A builder for [`IpRouteLimitExceededException`](crate::error::IpRouteLimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) request_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The descriptive message for the exception.</p>
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// <p>The Amazon Web Services request identifier.</p>
        pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.request_id = Some(input.into());
            self
        }
        pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.request_id = input;
            self
        }
        /// Consumes the builder and constructs a [`IpRouteLimitExceededException`](crate::error::IpRouteLimitExceededException)
        pub fn build(self) -> crate::error::IpRouteLimitExceededException {
            crate::error::IpRouteLimitExceededException {
                message: self.message,
                request_id: self.request_id,
            }
        }
    }
}
impl IpRouteLimitExceededException {
    /// Creates a new builder-style object to manufacture [`IpRouteLimitExceededException`](crate::error::IpRouteLimitExceededException)
    pub fn builder() -> crate::error::ip_route_limit_exceeded_exception::Builder {
        crate::error::ip_route_limit_exceeded_exception::Builder::default()
    }
}
