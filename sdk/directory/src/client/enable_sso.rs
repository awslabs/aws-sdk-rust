// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`EnableSso`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`directory_id(impl Into<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::directory_id) / [`set_directory_id(Option<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::set_directory_id):<br>required: **true**<br><p>The identifier of the directory for which to enable single-sign on.</p><br>
    ///   - [`user_name(impl Into<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::user_name) / [`set_user_name(Option<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::set_user_name):<br>required: **false**<br><p>The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name.</p>  <p>If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the <i>UserName</i> and <i>Password</i> parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.</p><br>
    ///   - [`password(impl Into<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::password) / [`set_password(Option<String>)`](crate::operation::enable_sso::builders::EnableSsoFluentBuilder::set_password):<br>required: **false**<br><p>The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the <i>UserName</i> parameter.</p><br>
    /// - On success, responds with [`EnableSsoOutput`](crate::operation::enable_sso::EnableSsoOutput)
    /// - On failure, responds with [`SdkError<EnableSsoError>`](crate::operation::enable_sso::EnableSsoError)
    pub fn enable_sso(&self) -> crate::operation::enable_sso::builders::EnableSsoFluentBuilder {
        crate::operation::enable_sso::builders::EnableSsoFluentBuilder::new(self.handle.clone())
    }
}
