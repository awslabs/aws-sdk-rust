// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateDirectorySetup`](crate::client::fluent_builders::UpdateDirectorySetup) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`directory_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDirectorySetup::directory_id) / [`set_directory_id(Option<String>)`](crate::client::fluent_builders::UpdateDirectorySetup::set_directory_id): <p> The identifier of the directory on which you want to perform the update. </p>
    ///   - [`update_type(UpdateType)`](crate::client::fluent_builders::UpdateDirectorySetup::update_type) / [`set_update_type(Option<UpdateType>)`](crate::client::fluent_builders::UpdateDirectorySetup::set_update_type): <p> The type of update that needs to be performed on the directory. For example, OS. </p>
    ///   - [`os_update_settings(OsUpdateSettings)`](crate::client::fluent_builders::UpdateDirectorySetup::os_update_settings) / [`set_os_update_settings(Option<OsUpdateSettings>)`](crate::client::fluent_builders::UpdateDirectorySetup::set_os_update_settings): <p> The settings for the OS update that needs to be performed on the directory. </p>
    ///   - [`create_snapshot_before_update(bool)`](crate::client::fluent_builders::UpdateDirectorySetup::create_snapshot_before_update) / [`set_create_snapshot_before_update(Option<bool>)`](crate::client::fluent_builders::UpdateDirectorySetup::set_create_snapshot_before_update): <p> The boolean that specifies if a snapshot for the directory needs to be taken before updating the directory. </p>
    /// - On success, responds with [`UpdateDirectorySetupOutput`](crate::output::UpdateDirectorySetupOutput)
    /// - On failure, responds with [`SdkError<UpdateDirectorySetupError>`](crate::error::UpdateDirectorySetupError)
    pub fn update_directory_setup(&self) -> crate::client::fluent_builders::UpdateDirectorySetup {
        crate::client::fluent_builders::UpdateDirectorySetup::new(self.handle.clone())
    }
}
