// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListSchemaExtensions`](crate::client::fluent_builders::ListSchemaExtensions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSchemaExtensions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`directory_id(impl Into<String>)`](crate::client::fluent_builders::ListSchemaExtensions::directory_id) / [`set_directory_id(Option<String>)`](crate::client::fluent_builders::ListSchemaExtensions::set_directory_id): <p>The identifier of the directory from which to retrieve the schema extension information.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSchemaExtensions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSchemaExtensions::set_next_token): <p>The <code>ListSchemaExtensions.NextToken</code> value from a previous call to <code>ListSchemaExtensions</code>. Pass null if this is the first call.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListSchemaExtensions::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListSchemaExtensions::set_limit): <p>The maximum number of items to return.</p>
    /// - On success, responds with [`ListSchemaExtensionsOutput`](crate::output::ListSchemaExtensionsOutput) with field(s):
    ///   - [`schema_extensions_info(Option<Vec<SchemaExtensionInfo>>)`](crate::output::ListSchemaExtensionsOutput::schema_extensions_info): <p>Information about the schema extensions applied to the directory.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSchemaExtensionsOutput::next_token): <p>If not null, more results are available. Pass this value for the <code>NextToken</code> parameter in a subsequent call to <code>ListSchemaExtensions</code> to retrieve the next set of items.</p>
    /// - On failure, responds with [`SdkError<ListSchemaExtensionsError>`](crate::error::ListSchemaExtensionsError)
    pub fn list_schema_extensions(&self) -> crate::client::fluent_builders::ListSchemaExtensions {
        crate::client::fluent_builders::ListSchemaExtensions::new(self.handle.clone())
    }
}
