// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an Directory Service directory.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DirectoryDescription {
    /// <p>The directory identifier.</p>
    pub directory_id: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified name of the directory.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The short name of the directory.</p>
    pub short_name: ::std::option::Option<::std::string::String>,
    /// <p>The directory size.</p>
    pub size: ::std::option::Option<crate::types::DirectorySize>,
    /// <p>The edition associated with this directory.</p>
    pub edition: ::std::option::Option<crate::types::DirectoryEdition>,
    /// <p>The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub alias: ::std::option::Option<::std::string::String>,
    /// <p>The access URL for the directory, such as <code>http://
    /// <alias>
    /// .awsapps.com
    /// </alias></code>. If no alias has been created for the directory, <code>
    /// <alias></alias></code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub access_url: ::std::option::Option<::std::string::String>,
    /// <p>The description for the directory.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in your self-managed directory to which the AD Connector is connected.</p>
    pub dns_ip_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The current stage of the directory.</p>
    pub stage: ::std::option::Option<crate::types::DirectoryStage>,
    /// <p>Current directory status of the shared Managed Microsoft AD directory.</p>
    pub share_status: ::std::option::Option<crate::types::ShareStatus>,
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a shared directory request (<code>HANDSHAKE</code>).</p>
    pub share_method: ::std::option::Option<crate::types::ShareMethod>,
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub share_notes: ::std::option::Option<::std::string::String>,
    /// <p>Specifies when the directory was created.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time that the stage was last updated.</p>
    pub stage_last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The directory size.</p>
    pub r#type: ::std::option::Option<crate::types::DirectoryType>,
    /// <p>A <code>DirectoryVpcSettingsDescription</code> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed Microsoft AD directory.</p>
    pub vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>,
    /// <p>A <code>DirectoryConnectSettingsDescription</code> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.</p>
    pub connect_settings: ::std::option::Option<crate::types::DirectoryConnectSettingsDescription>,
    /// <p>A <code>RadiusSettings</code> object that contains information about the RADIUS server configured for this directory.</p>
    pub radius_settings: ::std::option::Option<crate::types::RadiusSettings>,
    /// <p>The status of the RADIUS MFA server connection.</p>
    pub radius_status: ::std::option::Option<crate::types::RadiusStatus>,
    /// <p>Additional information about the directory stage.</p>
    pub stage_reason: ::std::option::Option<::std::string::String>,
    /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <code>EnableSso</code> and <code>DisableSso</code>.</p>
    pub sso_enabled: bool,
    /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
    pub desired_number_of_domain_controllers: ::std::option::Option<i32>,
    /// <p>Describes the Managed Microsoft AD directory in the directory owner account.</p>
    pub owner_directory_description: ::std::option::Option<crate::types::OwnerDirectoryDescription>,
    /// <p>Lists the Regions where the directory has replicated.</p>
    pub regions_info: ::std::option::Option<crate::types::RegionsInfo>,
    /// <p>The operating system (OS) version of the directory.</p>
    pub os_version: ::std::option::Option<crate::types::OsVersion>,
}
impl DirectoryDescription {
    /// <p>The directory identifier.</p>
    pub fn directory_id(&self) -> ::std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The fully qualified name of the directory.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The short name of the directory.</p>
    pub fn short_name(&self) -> ::std::option::Option<&str> {
        self.short_name.as_deref()
    }
    /// <p>The directory size.</p>
    pub fn size(&self) -> ::std::option::Option<&crate::types::DirectorySize> {
        self.size.as_ref()
    }
    /// <p>The edition associated with this directory.</p>
    pub fn edition(&self) -> ::std::option::Option<&crate::types::DirectoryEdition> {
        self.edition.as_ref()
    }
    /// <p>The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn alias(&self) -> ::std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>The access URL for the directory, such as <code>http://
    /// <alias>
    /// .awsapps.com
    /// </alias></code>. If no alias has been created for the directory, <code>
    /// <alias></alias></code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn access_url(&self) -> ::std::option::Option<&str> {
        self.access_url.as_deref()
    }
    /// <p>The description for the directory.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in your self-managed directory to which the AD Connector is connected.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ip_addrs.is_none()`.
    pub fn dns_ip_addrs(&self) -> &[::std::string::String] {
        self.dns_ip_addrs.as_deref().unwrap_or_default()
    }
    /// <p>The current stage of the directory.</p>
    pub fn stage(&self) -> ::std::option::Option<&crate::types::DirectoryStage> {
        self.stage.as_ref()
    }
    /// <p>Current directory status of the shared Managed Microsoft AD directory.</p>
    pub fn share_status(&self) -> ::std::option::Option<&crate::types::ShareStatus> {
        self.share_status.as_ref()
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a shared directory request (<code>HANDSHAKE</code>).</p>
    pub fn share_method(&self) -> ::std::option::Option<&crate::types::ShareMethod> {
        self.share_method.as_ref()
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn share_notes(&self) -> ::std::option::Option<&str> {
        self.share_notes.as_deref()
    }
    /// <p>Specifies when the directory was created.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>The date and time that the stage was last updated.</p>
    pub fn stage_last_updated_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.stage_last_updated_date_time.as_ref()
    }
    /// <p>The directory size.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DirectoryType> {
        self.r#type.as_ref()
    }
    /// <p>A <code>DirectoryVpcSettingsDescription</code> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed Microsoft AD directory.</p>
    pub fn vpc_settings(&self) -> ::std::option::Option<&crate::types::DirectoryVpcSettingsDescription> {
        self.vpc_settings.as_ref()
    }
    /// <p>A <code>DirectoryConnectSettingsDescription</code> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.</p>
    pub fn connect_settings(&self) -> ::std::option::Option<&crate::types::DirectoryConnectSettingsDescription> {
        self.connect_settings.as_ref()
    }
    /// <p>A <code>RadiusSettings</code> object that contains information about the RADIUS server configured for this directory.</p>
    pub fn radius_settings(&self) -> ::std::option::Option<&crate::types::RadiusSettings> {
        self.radius_settings.as_ref()
    }
    /// <p>The status of the RADIUS MFA server connection.</p>
    pub fn radius_status(&self) -> ::std::option::Option<&crate::types::RadiusStatus> {
        self.radius_status.as_ref()
    }
    /// <p>Additional information about the directory stage.</p>
    pub fn stage_reason(&self) -> ::std::option::Option<&str> {
        self.stage_reason.as_deref()
    }
    /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <code>EnableSso</code> and <code>DisableSso</code>.</p>
    pub fn sso_enabled(&self) -> bool {
        self.sso_enabled
    }
    /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
    pub fn desired_number_of_domain_controllers(&self) -> ::std::option::Option<i32> {
        self.desired_number_of_domain_controllers
    }
    /// <p>Describes the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn owner_directory_description(&self) -> ::std::option::Option<&crate::types::OwnerDirectoryDescription> {
        self.owner_directory_description.as_ref()
    }
    /// <p>Lists the Regions where the directory has replicated.</p>
    pub fn regions_info(&self) -> ::std::option::Option<&crate::types::RegionsInfo> {
        self.regions_info.as_ref()
    }
    /// <p>The operating system (OS) version of the directory.</p>
    pub fn os_version(&self) -> ::std::option::Option<&crate::types::OsVersion> {
        self.os_version.as_ref()
    }
}
impl ::std::fmt::Debug for DirectoryDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryDescription");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("name", &self.name);
        formatter.field("short_name", &self.short_name);
        formatter.field("size", &self.size);
        formatter.field("edition", &self.edition);
        formatter.field("alias", &self.alias);
        formatter.field("access_url", &self.access_url);
        formatter.field("description", &self.description);
        formatter.field("dns_ip_addrs", &self.dns_ip_addrs);
        formatter.field("stage", &self.stage);
        formatter.field("share_status", &self.share_status);
        formatter.field("share_method", &self.share_method);
        formatter.field("share_notes", &"*** Sensitive Data Redacted ***");
        formatter.field("launch_time", &self.launch_time);
        formatter.field("stage_last_updated_date_time", &self.stage_last_updated_date_time);
        formatter.field("r#type", &self.r#type);
        formatter.field("vpc_settings", &self.vpc_settings);
        formatter.field("connect_settings", &self.connect_settings);
        formatter.field("radius_settings", &self.radius_settings);
        formatter.field("radius_status", &self.radius_status);
        formatter.field("stage_reason", &self.stage_reason);
        formatter.field("sso_enabled", &self.sso_enabled);
        formatter.field("desired_number_of_domain_controllers", &self.desired_number_of_domain_controllers);
        formatter.field("owner_directory_description", &self.owner_directory_description);
        formatter.field("regions_info", &self.regions_info);
        formatter.field("os_version", &self.os_version);
        formatter.finish()
    }
}
impl DirectoryDescription {
    /// Creates a new builder-style object to manufacture [`DirectoryDescription`](crate::types::DirectoryDescription).
    pub fn builder() -> crate::types::builders::DirectoryDescriptionBuilder {
        crate::types::builders::DirectoryDescriptionBuilder::default()
    }
}

/// A builder for [`DirectoryDescription`](crate::types::DirectoryDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DirectoryDescriptionBuilder {
    pub(crate) directory_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) short_name: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<crate::types::DirectorySize>,
    pub(crate) edition: ::std::option::Option<crate::types::DirectoryEdition>,
    pub(crate) alias: ::std::option::Option<::std::string::String>,
    pub(crate) access_url: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) dns_ip_addrs: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) stage: ::std::option::Option<crate::types::DirectoryStage>,
    pub(crate) share_status: ::std::option::Option<crate::types::ShareStatus>,
    pub(crate) share_method: ::std::option::Option<crate::types::ShareMethod>,
    pub(crate) share_notes: ::std::option::Option<::std::string::String>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stage_last_updated_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) r#type: ::std::option::Option<crate::types::DirectoryType>,
    pub(crate) vpc_settings: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>,
    pub(crate) connect_settings: ::std::option::Option<crate::types::DirectoryConnectSettingsDescription>,
    pub(crate) radius_settings: ::std::option::Option<crate::types::RadiusSettings>,
    pub(crate) radius_status: ::std::option::Option<crate::types::RadiusStatus>,
    pub(crate) stage_reason: ::std::option::Option<::std::string::String>,
    pub(crate) sso_enabled: ::std::option::Option<bool>,
    pub(crate) desired_number_of_domain_controllers: ::std::option::Option<i32>,
    pub(crate) owner_directory_description: ::std::option::Option<crate::types::OwnerDirectoryDescription>,
    pub(crate) regions_info: ::std::option::Option<crate::types::RegionsInfo>,
    pub(crate) os_version: ::std::option::Option<crate::types::OsVersion>,
}
impl DirectoryDescriptionBuilder {
    /// <p>The directory identifier.</p>
    pub fn directory_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.directory_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The directory identifier.</p>
    pub fn set_directory_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The directory identifier.</p>
    pub fn get_directory_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.directory_id
    }
    /// <p>The fully qualified name of the directory.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified name of the directory.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The fully qualified name of the directory.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The short name of the directory.</p>
    pub fn short_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.short_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The short name of the directory.</p>
    pub fn set_short_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.short_name = input;
        self
    }
    /// <p>The short name of the directory.</p>
    pub fn get_short_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.short_name
    }
    /// <p>The directory size.</p>
    pub fn size(mut self, input: crate::types::DirectorySize) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The directory size.</p>
    pub fn set_size(mut self, input: ::std::option::Option<crate::types::DirectorySize>) -> Self {
        self.size = input;
        self
    }
    /// <p>The directory size.</p>
    pub fn get_size(&self) -> &::std::option::Option<crate::types::DirectorySize> {
        &self.size
    }
    /// <p>The edition associated with this directory.</p>
    pub fn edition(mut self, input: crate::types::DirectoryEdition) -> Self {
        self.edition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The edition associated with this directory.</p>
    pub fn set_edition(mut self, input: ::std::option::Option<crate::types::DirectoryEdition>) -> Self {
        self.edition = input;
        self
    }
    /// <p>The edition associated with this directory.</p>
    pub fn get_edition(&self) -> &::std::option::Option<crate::types::DirectoryEdition> {
        &self.edition
    }
    /// <p>The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn get_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.alias
    }
    /// <p>The access URL for the directory, such as <code>http://
    /// <alias>
    /// .awsapps.com
    /// </alias></code>. If no alias has been created for the directory, <code>
    /// <alias></alias></code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn access_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The access URL for the directory, such as <code>http://
    /// <alias>
    /// .awsapps.com
    /// </alias></code>. If no alias has been created for the directory, <code>
    /// <alias></alias></code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn set_access_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_url = input;
        self
    }
    /// <p>The access URL for the directory, such as <code>http://
    /// <alias>
    /// .awsapps.com
    /// </alias></code>. If no alias has been created for the directory, <code>
    /// <alias></alias></code> is the directory identifier, such as <code>d-XXXXXXXXXX</code>.</p>
    pub fn get_access_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_url
    }
    /// <p>The description for the directory.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the directory.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description for the directory.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `dns_ip_addrs`.
    ///
    /// To override the contents of this collection use [`set_dns_ip_addrs`](Self::set_dns_ip_addrs).
    ///
    /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in your self-managed directory to which the AD Connector is connected.</p>
    pub fn dns_ip_addrs(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ip_addrs.unwrap_or_default();
        v.push(input.into());
        self.dns_ip_addrs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in your self-managed directory to which the AD Connector is connected.</p>
    pub fn set_dns_ip_addrs(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ip_addrs = input;
        self
    }
    /// <p>The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in your self-managed directory to which the AD Connector is connected.</p>
    pub fn get_dns_ip_addrs(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ip_addrs
    }
    /// <p>The current stage of the directory.</p>
    pub fn stage(mut self, input: crate::types::DirectoryStage) -> Self {
        self.stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current stage of the directory.</p>
    pub fn set_stage(mut self, input: ::std::option::Option<crate::types::DirectoryStage>) -> Self {
        self.stage = input;
        self
    }
    /// <p>The current stage of the directory.</p>
    pub fn get_stage(&self) -> &::std::option::Option<crate::types::DirectoryStage> {
        &self.stage
    }
    /// <p>Current directory status of the shared Managed Microsoft AD directory.</p>
    pub fn share_status(mut self, input: crate::types::ShareStatus) -> Self {
        self.share_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current directory status of the shared Managed Microsoft AD directory.</p>
    pub fn set_share_status(mut self, input: ::std::option::Option<crate::types::ShareStatus>) -> Self {
        self.share_status = input;
        self
    }
    /// <p>Current directory status of the shared Managed Microsoft AD directory.</p>
    pub fn get_share_status(&self) -> &::std::option::Option<crate::types::ShareStatus> {
        &self.share_status
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a shared directory request (<code>HANDSHAKE</code>).</p>
    pub fn share_method(mut self, input: crate::types::ShareMethod) -> Self {
        self.share_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a shared directory request (<code>HANDSHAKE</code>).</p>
    pub fn set_share_method(mut self, input: ::std::option::Option<crate::types::ShareMethod>) -> Self {
        self.share_method = input;
        self
    }
    /// <p>The method used when sharing a directory to determine whether the directory should be shared within your Amazon Web Services organization (<code>ORGANIZATIONS</code>) or with any Amazon Web Services account by sending a shared directory request (<code>HANDSHAKE</code>).</p>
    pub fn get_share_method(&self) -> &::std::option::Option<crate::types::ShareMethod> {
        &self.share_method
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn share_notes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.share_notes = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn set_share_notes(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.share_notes = input;
        self
    }
    /// <p>A directory share request that is sent by the directory owner to the directory consumer. The request includes a typed message to help the directory consumer administrator determine whether to approve or reject the share invitation.</p>
    pub fn get_share_notes(&self) -> &::std::option::Option<::std::string::String> {
        &self.share_notes
    }
    /// <p>Specifies when the directory was created.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies when the directory was created.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>Specifies when the directory was created.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>The date and time that the stage was last updated.</p>
    pub fn stage_last_updated_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.stage_last_updated_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the stage was last updated.</p>
    pub fn set_stage_last_updated_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.stage_last_updated_date_time = input;
        self
    }
    /// <p>The date and time that the stage was last updated.</p>
    pub fn get_stage_last_updated_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.stage_last_updated_date_time
    }
    /// <p>The directory size.</p>
    pub fn r#type(mut self, input: crate::types::DirectoryType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The directory size.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DirectoryType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The directory size.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DirectoryType> {
        &self.r#type
    }
    /// <p>A <code>DirectoryVpcSettingsDescription</code> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed Microsoft AD directory.</p>
    pub fn vpc_settings(mut self, input: crate::types::DirectoryVpcSettingsDescription) -> Self {
        self.vpc_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>DirectoryVpcSettingsDescription</code> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed Microsoft AD directory.</p>
    pub fn set_vpc_settings(mut self, input: ::std::option::Option<crate::types::DirectoryVpcSettingsDescription>) -> Self {
        self.vpc_settings = input;
        self
    }
    /// <p>A <code>DirectoryVpcSettingsDescription</code> object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed Microsoft AD directory.</p>
    pub fn get_vpc_settings(&self) -> &::std::option::Option<crate::types::DirectoryVpcSettingsDescription> {
        &self.vpc_settings
    }
    /// <p>A <code>DirectoryConnectSettingsDescription</code> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.</p>
    pub fn connect_settings(mut self, input: crate::types::DirectoryConnectSettingsDescription) -> Self {
        self.connect_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>DirectoryConnectSettingsDescription</code> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.</p>
    pub fn set_connect_settings(mut self, input: ::std::option::Option<crate::types::DirectoryConnectSettingsDescription>) -> Self {
        self.connect_settings = input;
        self
    }
    /// <p>A <code>DirectoryConnectSettingsDescription</code> object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.</p>
    pub fn get_connect_settings(&self) -> &::std::option::Option<crate::types::DirectoryConnectSettingsDescription> {
        &self.connect_settings
    }
    /// <p>A <code>RadiusSettings</code> object that contains information about the RADIUS server configured for this directory.</p>
    pub fn radius_settings(mut self, input: crate::types::RadiusSettings) -> Self {
        self.radius_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A <code>RadiusSettings</code> object that contains information about the RADIUS server configured for this directory.</p>
    pub fn set_radius_settings(mut self, input: ::std::option::Option<crate::types::RadiusSettings>) -> Self {
        self.radius_settings = input;
        self
    }
    /// <p>A <code>RadiusSettings</code> object that contains information about the RADIUS server configured for this directory.</p>
    pub fn get_radius_settings(&self) -> &::std::option::Option<crate::types::RadiusSettings> {
        &self.radius_settings
    }
    /// <p>The status of the RADIUS MFA server connection.</p>
    pub fn radius_status(mut self, input: crate::types::RadiusStatus) -> Self {
        self.radius_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the RADIUS MFA server connection.</p>
    pub fn set_radius_status(mut self, input: ::std::option::Option<crate::types::RadiusStatus>) -> Self {
        self.radius_status = input;
        self
    }
    /// <p>The status of the RADIUS MFA server connection.</p>
    pub fn get_radius_status(&self) -> &::std::option::Option<crate::types::RadiusStatus> {
        &self.radius_status
    }
    /// <p>Additional information about the directory stage.</p>
    pub fn stage_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about the directory stage.</p>
    pub fn set_stage_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_reason = input;
        self
    }
    /// <p>Additional information about the directory stage.</p>
    pub fn get_stage_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_reason
    }
    /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <code>EnableSso</code> and <code>DisableSso</code>.</p>
    pub fn sso_enabled(mut self, input: bool) -> Self {
        self.sso_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <code>EnableSso</code> and <code>DisableSso</code>.</p>
    pub fn set_sso_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sso_enabled = input;
        self
    }
    /// <p>Indicates if single sign-on is enabled for the directory. For more information, see <code>EnableSso</code> and <code>DisableSso</code>.</p>
    pub fn get_sso_enabled(&self) -> &::std::option::Option<bool> {
        &self.sso_enabled
    }
    /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
    pub fn desired_number_of_domain_controllers(mut self, input: i32) -> Self {
        self.desired_number_of_domain_controllers = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
    pub fn set_desired_number_of_domain_controllers(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_number_of_domain_controllers = input;
        self
    }
    /// <p>The desired number of domain controllers in the directory if the directory is Microsoft AD.</p>
    pub fn get_desired_number_of_domain_controllers(&self) -> &::std::option::Option<i32> {
        &self.desired_number_of_domain_controllers
    }
    /// <p>Describes the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn owner_directory_description(mut self, input: crate::types::OwnerDirectoryDescription) -> Self {
        self.owner_directory_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn set_owner_directory_description(mut self, input: ::std::option::Option<crate::types::OwnerDirectoryDescription>) -> Self {
        self.owner_directory_description = input;
        self
    }
    /// <p>Describes the Managed Microsoft AD directory in the directory owner account.</p>
    pub fn get_owner_directory_description(&self) -> &::std::option::Option<crate::types::OwnerDirectoryDescription> {
        &self.owner_directory_description
    }
    /// <p>Lists the Regions where the directory has replicated.</p>
    pub fn regions_info(mut self, input: crate::types::RegionsInfo) -> Self {
        self.regions_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lists the Regions where the directory has replicated.</p>
    pub fn set_regions_info(mut self, input: ::std::option::Option<crate::types::RegionsInfo>) -> Self {
        self.regions_info = input;
        self
    }
    /// <p>Lists the Regions where the directory has replicated.</p>
    pub fn get_regions_info(&self) -> &::std::option::Option<crate::types::RegionsInfo> {
        &self.regions_info
    }
    /// <p>The operating system (OS) version of the directory.</p>
    pub fn os_version(mut self, input: crate::types::OsVersion) -> Self {
        self.os_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system (OS) version of the directory.</p>
    pub fn set_os_version(mut self, input: ::std::option::Option<crate::types::OsVersion>) -> Self {
        self.os_version = input;
        self
    }
    /// <p>The operating system (OS) version of the directory.</p>
    pub fn get_os_version(&self) -> &::std::option::Option<crate::types::OsVersion> {
        &self.os_version
    }
    /// Consumes the builder and constructs a [`DirectoryDescription`](crate::types::DirectoryDescription).
    pub fn build(self) -> crate::types::DirectoryDescription {
        crate::types::DirectoryDescription {
            directory_id: self.directory_id,
            name: self.name,
            short_name: self.short_name,
            size: self.size,
            edition: self.edition,
            alias: self.alias,
            access_url: self.access_url,
            description: self.description,
            dns_ip_addrs: self.dns_ip_addrs,
            stage: self.stage,
            share_status: self.share_status,
            share_method: self.share_method,
            share_notes: self.share_notes,
            launch_time: self.launch_time,
            stage_last_updated_date_time: self.stage_last_updated_date_time,
            r#type: self.r#type,
            vpc_settings: self.vpc_settings,
            connect_settings: self.connect_settings,
            radius_settings: self.radius_settings,
            radius_status: self.radius_status,
            stage_reason: self.stage_reason,
            sso_enabled: self.sso_enabled.unwrap_or_default(),
            desired_number_of_domain_controllers: self.desired_number_of_domain_controllers,
            owner_directory_description: self.owner_directory_description,
            regions_info: self.regions_info,
            os_version: self.os_version,
        }
    }
}
impl ::std::fmt::Debug for DirectoryDescriptionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DirectoryDescriptionBuilder");
        formatter.field("directory_id", &self.directory_id);
        formatter.field("name", &self.name);
        formatter.field("short_name", &self.short_name);
        formatter.field("size", &self.size);
        formatter.field("edition", &self.edition);
        formatter.field("alias", &self.alias);
        formatter.field("access_url", &self.access_url);
        formatter.field("description", &self.description);
        formatter.field("dns_ip_addrs", &self.dns_ip_addrs);
        formatter.field("stage", &self.stage);
        formatter.field("share_status", &self.share_status);
        formatter.field("share_method", &self.share_method);
        formatter.field("share_notes", &"*** Sensitive Data Redacted ***");
        formatter.field("launch_time", &self.launch_time);
        formatter.field("stage_last_updated_date_time", &self.stage_last_updated_date_time);
        formatter.field("r#type", &self.r#type);
        formatter.field("vpc_settings", &self.vpc_settings);
        formatter.field("connect_settings", &self.connect_settings);
        formatter.field("radius_settings", &self.radius_settings);
        formatter.field("radius_status", &self.radius_status);
        formatter.field("stage_reason", &self.stage_reason);
        formatter.field("sso_enabled", &self.sso_enabled);
        formatter.field("desired_number_of_domain_controllers", &self.desired_number_of_domain_controllers);
        formatter.field("owner_directory_description", &self.owner_directory_description);
        formatter.field("regions_info", &self.regions_info);
        formatter.field("os_version", &self.os_version);
        formatter.finish()
    }
}
