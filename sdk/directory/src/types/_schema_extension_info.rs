// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a schema extension.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SchemaExtensionInfo {
    /// <p>The identifier of the directory to which the schema extension is applied.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The identifier of the schema extension.</p>
    #[doc(hidden)]
    pub schema_extension_id: std::option::Option<std::string::String>,
    /// <p>A description of the schema extension.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The current status of the schema extension.</p>
    #[doc(hidden)]
    pub schema_extension_status: std::option::Option<crate::types::SchemaExtensionStatus>,
    /// <p>The reason for the <code>SchemaExtensionStatus</code>.</p>
    #[doc(hidden)]
    pub schema_extension_status_reason: std::option::Option<std::string::String>,
    /// <p>The date and time that the schema extension started being applied to the directory.</p>
    #[doc(hidden)]
    pub start_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the schema extension was completed.</p>
    #[doc(hidden)]
    pub end_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SchemaExtensionInfo {
    /// <p>The identifier of the directory to which the schema extension is applied.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The identifier of the schema extension.</p>
    pub fn schema_extension_id(&self) -> std::option::Option<&str> {
        self.schema_extension_id.as_deref()
    }
    /// <p>A description of the schema extension.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The current status of the schema extension.</p>
    pub fn schema_extension_status(
        &self,
    ) -> std::option::Option<&crate::types::SchemaExtensionStatus> {
        self.schema_extension_status.as_ref()
    }
    /// <p>The reason for the <code>SchemaExtensionStatus</code>.</p>
    pub fn schema_extension_status_reason(&self) -> std::option::Option<&str> {
        self.schema_extension_status_reason.as_deref()
    }
    /// <p>The date and time that the schema extension started being applied to the directory.</p>
    pub fn start_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_date_time.as_ref()
    }
    /// <p>The date and time that the schema extension was completed.</p>
    pub fn end_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_date_time.as_ref()
    }
}
impl SchemaExtensionInfo {
    /// Creates a new builder-style object to manufacture [`SchemaExtensionInfo`](crate::types::SchemaExtensionInfo).
    pub fn builder() -> crate::types::builders::SchemaExtensionInfoBuilder {
        crate::types::builders::SchemaExtensionInfoBuilder::default()
    }
}

/// A builder for [`SchemaExtensionInfo`](crate::types::SchemaExtensionInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SchemaExtensionInfoBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) schema_extension_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) schema_extension_status: std::option::Option<crate::types::SchemaExtensionStatus>,
    pub(crate) schema_extension_status_reason: std::option::Option<std::string::String>,
    pub(crate) start_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SchemaExtensionInfoBuilder {
    /// <p>The identifier of the directory to which the schema extension is applied.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The identifier of the directory to which the schema extension is applied.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The identifier of the schema extension.</p>
    pub fn schema_extension_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_extension_id = Some(input.into());
        self
    }
    /// <p>The identifier of the schema extension.</p>
    pub fn set_schema_extension_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_extension_id = input;
        self
    }
    /// <p>A description of the schema extension.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the schema extension.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The current status of the schema extension.</p>
    pub fn schema_extension_status(mut self, input: crate::types::SchemaExtensionStatus) -> Self {
        self.schema_extension_status = Some(input);
        self
    }
    /// <p>The current status of the schema extension.</p>
    pub fn set_schema_extension_status(
        mut self,
        input: std::option::Option<crate::types::SchemaExtensionStatus>,
    ) -> Self {
        self.schema_extension_status = input;
        self
    }
    /// <p>The reason for the <code>SchemaExtensionStatus</code>.</p>
    pub fn schema_extension_status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_extension_status_reason = Some(input.into());
        self
    }
    /// <p>The reason for the <code>SchemaExtensionStatus</code>.</p>
    pub fn set_schema_extension_status_reason(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_extension_status_reason = input;
        self
    }
    /// <p>The date and time that the schema extension started being applied to the directory.</p>
    pub fn start_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_date_time = Some(input);
        self
    }
    /// <p>The date and time that the schema extension started being applied to the directory.</p>
    pub fn set_start_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time that the schema extension was completed.</p>
    pub fn end_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_date_time = Some(input);
        self
    }
    /// <p>The date and time that the schema extension was completed.</p>
    pub fn set_end_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.end_date_time = input;
        self
    }
    /// Consumes the builder and constructs a [`SchemaExtensionInfo`](crate::types::SchemaExtensionInfo).
    pub fn build(self) -> crate::types::SchemaExtensionInfo {
        crate::types::SchemaExtensionInfo {
            directory_id: self.directory_id,
            schema_extension_id: self.schema_extension_id,
            description: self.description,
            schema_extension_status: self.schema_extension_status,
            schema_extension_status_reason: self.schema_extension_status_reason,
            start_date_time: self.start_date_time,
            end_date_time: self.end_date_time,
        }
    }
}
