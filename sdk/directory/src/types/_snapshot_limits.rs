// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains manual snapshot limit information for a directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SnapshotLimits {
    /// <p>The maximum number of manual snapshots allowed.</p>
    #[doc(hidden)]
    pub manual_snapshots_limit: std::option::Option<i32>,
    /// <p>The current number of manual snapshots of the directory.</p>
    #[doc(hidden)]
    pub manual_snapshots_current_count: std::option::Option<i32>,
    /// <p>Indicates if the manual snapshot limit has been reached.</p>
    #[doc(hidden)]
    pub manual_snapshots_limit_reached: bool,
}
impl SnapshotLimits {
    /// <p>The maximum number of manual snapshots allowed.</p>
    pub fn manual_snapshots_limit(&self) -> std::option::Option<i32> {
        self.manual_snapshots_limit
    }
    /// <p>The current number of manual snapshots of the directory.</p>
    pub fn manual_snapshots_current_count(&self) -> std::option::Option<i32> {
        self.manual_snapshots_current_count
    }
    /// <p>Indicates if the manual snapshot limit has been reached.</p>
    pub fn manual_snapshots_limit_reached(&self) -> bool {
        self.manual_snapshots_limit_reached
    }
}
impl SnapshotLimits {
    /// Creates a new builder-style object to manufacture [`SnapshotLimits`](crate::types::SnapshotLimits).
    pub fn builder() -> crate::types::builders::SnapshotLimitsBuilder {
        crate::types::builders::SnapshotLimitsBuilder::default()
    }
}

/// A builder for [`SnapshotLimits`](crate::types::SnapshotLimits).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnapshotLimitsBuilder {
    pub(crate) manual_snapshots_limit: std::option::Option<i32>,
    pub(crate) manual_snapshots_current_count: std::option::Option<i32>,
    pub(crate) manual_snapshots_limit_reached: std::option::Option<bool>,
}
impl SnapshotLimitsBuilder {
    /// <p>The maximum number of manual snapshots allowed.</p>
    pub fn manual_snapshots_limit(mut self, input: i32) -> Self {
        self.manual_snapshots_limit = Some(input);
        self
    }
    /// <p>The maximum number of manual snapshots allowed.</p>
    pub fn set_manual_snapshots_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.manual_snapshots_limit = input;
        self
    }
    /// <p>The current number of manual snapshots of the directory.</p>
    pub fn manual_snapshots_current_count(mut self, input: i32) -> Self {
        self.manual_snapshots_current_count = Some(input);
        self
    }
    /// <p>The current number of manual snapshots of the directory.</p>
    pub fn set_manual_snapshots_current_count(mut self, input: std::option::Option<i32>) -> Self {
        self.manual_snapshots_current_count = input;
        self
    }
    /// <p>Indicates if the manual snapshot limit has been reached.</p>
    pub fn manual_snapshots_limit_reached(mut self, input: bool) -> Self {
        self.manual_snapshots_limit_reached = Some(input);
        self
    }
    /// <p>Indicates if the manual snapshot limit has been reached.</p>
    pub fn set_manual_snapshots_limit_reached(mut self, input: std::option::Option<bool>) -> Self {
        self.manual_snapshots_limit_reached = input;
        self
    }
    /// Consumes the builder and constructs a [`SnapshotLimits`](crate::types::SnapshotLimits).
    pub fn build(self) -> crate::types::SnapshotLimits {
        crate::types::SnapshotLimits {
            manual_snapshots_limit: self.manual_snapshots_limit,
            manual_snapshots_current_count: self.manual_snapshots_current_count,
            manual_snapshots_limit_reached: self.manual_snapshots_limit_reached.unwrap_or_default(),
        }
    }
}
