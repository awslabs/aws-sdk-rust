// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>IP address block. This is often the address block of the DNS server used for your self-managed domain. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpRoute {
    /// <p>IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your self-managed domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.</p>
    #[doc(hidden)]
    pub cidr_ip: std::option::Option<std::string::String>,
    /// <p>Description of the address block.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl IpRoute {
    /// <p>IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your self-managed domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.</p>
    pub fn cidr_ip(&self) -> std::option::Option<&str> {
        self.cidr_ip.as_deref()
    }
    /// <p>Description of the address block.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl IpRoute {
    /// Creates a new builder-style object to manufacture [`IpRoute`](crate::types::IpRoute).
    pub fn builder() -> crate::types::builders::IpRouteBuilder {
        crate::types::builders::IpRouteBuilder::default()
    }
}

/// A builder for [`IpRoute`](crate::types::IpRoute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpRouteBuilder {
    pub(crate) cidr_ip: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl IpRouteBuilder {
    /// <p>IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your self-managed domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.</p>
    pub fn cidr_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr_ip = Some(input.into());
        self
    }
    /// <p>IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your self-managed domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.</p>
    pub fn set_cidr_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr_ip = input;
        self
    }
    /// <p>Description of the address block.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description of the address block.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`IpRoute`](crate::types::IpRoute).
    pub fn build(self) -> crate::types::IpRoute {
        crate::types::IpRoute {
            cidr_ip: self.cidr_ip,
            description: self.description,
        }
    }
}
