// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a directory snapshot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Snapshot {
    /// <p>The directory identifier.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>The snapshot identifier.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The snapshot type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::SnapshotType>,
    /// <p>The descriptive name of the snapshot.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The snapshot status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SnapshotStatus>,
    /// <p>The date and time that the snapshot was taken.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl Snapshot {
    /// <p>The directory identifier.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>The snapshot identifier.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The snapshot type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::SnapshotType> {
        self.r#type.as_ref()
    }
    /// <p>The descriptive name of the snapshot.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The snapshot status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::SnapshotStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time that the snapshot was taken.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl Snapshot {
    /// Creates a new builder-style object to manufacture [`Snapshot`](crate::types::Snapshot).
    pub fn builder() -> crate::types::builders::SnapshotBuilder {
        crate::types::builders::SnapshotBuilder::default()
    }
}

/// A builder for [`Snapshot`](crate::types::Snapshot).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SnapshotBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::SnapshotType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::SnapshotStatus>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SnapshotBuilder {
    /// <p>The directory identifier.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>The directory identifier.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>The snapshot identifier.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The snapshot identifier.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The snapshot type.</p>
    pub fn r#type(mut self, input: crate::types::SnapshotType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The snapshot type.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::SnapshotType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The descriptive name of the snapshot.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The descriptive name of the snapshot.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The snapshot status.</p>
    pub fn status(mut self, input: crate::types::SnapshotStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The snapshot status.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SnapshotStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date and time that the snapshot was taken.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The date and time that the snapshot was taken.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`Snapshot`](crate::types::Snapshot).
    pub fn build(self) -> crate::types::Snapshot {
        crate::types::Snapshot {
            directory_id: self.directory_id,
            snapshot_id: self.snapshot_id,
            r#type: self.r#type,
            name: self.name,
            status: self.status,
            start_time: self.start_time,
        }
    }
}
