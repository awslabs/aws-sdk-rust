// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about one or more IP address blocks.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpRouteInfo {
    /// <p>Identifier (ID) of the directory associated with the IP addresses.</p>
    #[doc(hidden)]
    pub directory_id: std::option::Option<std::string::String>,
    /// <p>IP address block in the <code>IpRoute</code>.</p>
    #[doc(hidden)]
    pub cidr_ip: std::option::Option<std::string::String>,
    /// <p>The status of the IP address block.</p>
    #[doc(hidden)]
    pub ip_route_status_msg: std::option::Option<crate::types::IpRouteStatusMsg>,
    /// <p>The date and time the address block was added to the directory.</p>
    #[doc(hidden)]
    pub added_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The reason for the IpRouteStatusMsg.</p>
    #[doc(hidden)]
    pub ip_route_status_reason: std::option::Option<std::string::String>,
    /// <p>Description of the <code>IpRouteInfo</code>.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl IpRouteInfo {
    /// <p>Identifier (ID) of the directory associated with the IP addresses.</p>
    pub fn directory_id(&self) -> std::option::Option<&str> {
        self.directory_id.as_deref()
    }
    /// <p>IP address block in the <code>IpRoute</code>.</p>
    pub fn cidr_ip(&self) -> std::option::Option<&str> {
        self.cidr_ip.as_deref()
    }
    /// <p>The status of the IP address block.</p>
    pub fn ip_route_status_msg(&self) -> std::option::Option<&crate::types::IpRouteStatusMsg> {
        self.ip_route_status_msg.as_ref()
    }
    /// <p>The date and time the address block was added to the directory.</p>
    pub fn added_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.added_date_time.as_ref()
    }
    /// <p>The reason for the IpRouteStatusMsg.</p>
    pub fn ip_route_status_reason(&self) -> std::option::Option<&str> {
        self.ip_route_status_reason.as_deref()
    }
    /// <p>Description of the <code>IpRouteInfo</code>.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl IpRouteInfo {
    /// Creates a new builder-style object to manufacture [`IpRouteInfo`](crate::types::IpRouteInfo).
    pub fn builder() -> crate::types::builders::IpRouteInfoBuilder {
        crate::types::builders::IpRouteInfoBuilder::default()
    }
}

/// A builder for [`IpRouteInfo`](crate::types::IpRouteInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpRouteInfoBuilder {
    pub(crate) directory_id: std::option::Option<std::string::String>,
    pub(crate) cidr_ip: std::option::Option<std::string::String>,
    pub(crate) ip_route_status_msg: std::option::Option<crate::types::IpRouteStatusMsg>,
    pub(crate) added_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ip_route_status_reason: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl IpRouteInfoBuilder {
    /// <p>Identifier (ID) of the directory associated with the IP addresses.</p>
    pub fn directory_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.directory_id = Some(input.into());
        self
    }
    /// <p>Identifier (ID) of the directory associated with the IP addresses.</p>
    pub fn set_directory_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.directory_id = input;
        self
    }
    /// <p>IP address block in the <code>IpRoute</code>.</p>
    pub fn cidr_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr_ip = Some(input.into());
        self
    }
    /// <p>IP address block in the <code>IpRoute</code>.</p>
    pub fn set_cidr_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr_ip = input;
        self
    }
    /// <p>The status of the IP address block.</p>
    pub fn ip_route_status_msg(mut self, input: crate::types::IpRouteStatusMsg) -> Self {
        self.ip_route_status_msg = Some(input);
        self
    }
    /// <p>The status of the IP address block.</p>
    pub fn set_ip_route_status_msg(
        mut self,
        input: std::option::Option<crate::types::IpRouteStatusMsg>,
    ) -> Self {
        self.ip_route_status_msg = input;
        self
    }
    /// <p>The date and time the address block was added to the directory.</p>
    pub fn added_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.added_date_time = Some(input);
        self
    }
    /// <p>The date and time the address block was added to the directory.</p>
    pub fn set_added_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.added_date_time = input;
        self
    }
    /// <p>The reason for the IpRouteStatusMsg.</p>
    pub fn ip_route_status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_route_status_reason = Some(input.into());
        self
    }
    /// <p>The reason for the IpRouteStatusMsg.</p>
    pub fn set_ip_route_status_reason(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ip_route_status_reason = input;
        self
    }
    /// <p>Description of the <code>IpRouteInfo</code>.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description of the <code>IpRouteInfo</code>.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`IpRouteInfo`](crate::types::IpRouteInfo).
    pub fn build(self) -> crate::types::IpRouteInfo {
        crate::types::IpRouteInfo {
            directory_id: self.directory_id,
            cidr_ip: self.cidr_ip,
            ip_route_status_msg: self.ip_route_status_msg,
            added_date_time: self.added_date_time,
            ip_route_status_reason: self.ip_route_status_reason,
            description: self.description,
        }
    }
}
