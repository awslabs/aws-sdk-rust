// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifier that contains details about the directory consumer account with whom the directory is being unshared.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnshareTarget {
    /// <p>Identifier of the directory consumer account.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>Type of identifier to be used in the <i>Id</i> field.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TargetType>,
}
impl UnshareTarget {
    /// <p>Identifier of the directory consumer account.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>Type of identifier to be used in the <i>Id</i> field.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TargetType> {
        self.r#type.as_ref()
    }
}
impl UnshareTarget {
    /// Creates a new builder-style object to manufacture [`UnshareTarget`](crate::types::UnshareTarget).
    pub fn builder() -> crate::types::builders::UnshareTargetBuilder {
        crate::types::builders::UnshareTargetBuilder::default()
    }
}

/// A builder for [`UnshareTarget`](crate::types::UnshareTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnshareTargetBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::TargetType>,
}
impl UnshareTargetBuilder {
    /// <p>Identifier of the directory consumer account.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>Identifier of the directory consumer account.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Type of identifier to be used in the <i>Id</i> field.</p>
    pub fn r#type(mut self, input: crate::types::TargetType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Type of identifier to be used in the <i>Id</i> field.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TargetType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`UnshareTarget`](crate::types::UnshareTarget).
    pub fn build(self) -> crate::types::UnshareTarget {
        crate::types::UnshareTarget {
            id: self.id,
            r#type: self.r#type,
        }
    }
}
