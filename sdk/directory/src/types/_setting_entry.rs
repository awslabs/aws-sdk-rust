// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the specified configurable setting for a directory.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SettingEntry {
    /// <p>The type of directory setting. For example, <code>Protocol</code> or <code>Cipher</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The name of the directory setting. For example:</p>
    /// <p> <code>TLS_1_0</code> </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The valid range of values for the directory setting.</p>
    #[doc(hidden)]
    pub allowed_values: std::option::Option<std::string::String>,
    /// <p>The value of the directory setting that is applied to the directory.</p>
    #[doc(hidden)]
    pub applied_value: std::option::Option<std::string::String>,
    /// <p>The value that was last requested for the directory setting.</p>
    #[doc(hidden)]
    pub requested_value: std::option::Option<std::string::String>,
    /// <p>The overall status of the request to update the directory setting request. If the directory setting is deployed in more than one region, and the request fails in any region, the overall status is <code>Failed</code>.</p>
    #[doc(hidden)]
    pub request_status: std::option::Option<crate::types::DirectoryConfigurationStatus>,
    /// <p>Details about the status of the request to update the directory setting. If the directory setting is deployed in more than one region, status is returned for the request in each region where the setting is deployed.</p>
    #[doc(hidden)]
    pub request_detailed_status: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::DirectoryConfigurationStatus>,
    >,
    /// <p>The last status message for the directory status request.</p>
    #[doc(hidden)]
    pub request_status_message: std::option::Option<std::string::String>,
    /// <p>The date and time when the directory setting was last updated.</p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the request to update a directory setting was last submitted.</p>
    #[doc(hidden)]
    pub last_requested_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SettingEntry {
    /// <p>The type of directory setting. For example, <code>Protocol</code> or <code>Cipher</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The name of the directory setting. For example:</p>
    /// <p> <code>TLS_1_0</code> </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The valid range of values for the directory setting.</p>
    pub fn allowed_values(&self) -> std::option::Option<&str> {
        self.allowed_values.as_deref()
    }
    /// <p>The value of the directory setting that is applied to the directory.</p>
    pub fn applied_value(&self) -> std::option::Option<&str> {
        self.applied_value.as_deref()
    }
    /// <p>The value that was last requested for the directory setting.</p>
    pub fn requested_value(&self) -> std::option::Option<&str> {
        self.requested_value.as_deref()
    }
    /// <p>The overall status of the request to update the directory setting request. If the directory setting is deployed in more than one region, and the request fails in any region, the overall status is <code>Failed</code>.</p>
    pub fn request_status(
        &self,
    ) -> std::option::Option<&crate::types::DirectoryConfigurationStatus> {
        self.request_status.as_ref()
    }
    /// <p>Details about the status of the request to update the directory setting. If the directory setting is deployed in more than one region, status is returned for the request in each region where the setting is deployed.</p>
    pub fn request_detailed_status(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::DirectoryConfigurationStatus>,
    > {
        self.request_detailed_status.as_ref()
    }
    /// <p>The last status message for the directory status request.</p>
    pub fn request_status_message(&self) -> std::option::Option<&str> {
        self.request_status_message.as_deref()
    }
    /// <p>The date and time when the directory setting was last updated.</p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
    /// <p>The date and time when the request to update a directory setting was last submitted.</p>
    pub fn last_requested_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_requested_date_time.as_ref()
    }
}
impl SettingEntry {
    /// Creates a new builder-style object to manufacture [`SettingEntry`](crate::types::SettingEntry).
    pub fn builder() -> crate::types::builders::SettingEntryBuilder {
        crate::types::builders::SettingEntryBuilder::default()
    }
}

/// A builder for [`SettingEntry`](crate::types::SettingEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SettingEntryBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) allowed_values: std::option::Option<std::string::String>,
    pub(crate) applied_value: std::option::Option<std::string::String>,
    pub(crate) requested_value: std::option::Option<std::string::String>,
    pub(crate) request_status: std::option::Option<crate::types::DirectoryConfigurationStatus>,
    pub(crate) request_detailed_status: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::DirectoryConfigurationStatus>,
    >,
    pub(crate) request_status_message: std::option::Option<std::string::String>,
    pub(crate) last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_requested_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SettingEntryBuilder {
    /// <p>The type of directory setting. For example, <code>Protocol</code> or <code>Cipher</code>.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of directory setting. For example, <code>Protocol</code> or <code>Cipher</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name of the directory setting. For example:</p>
    /// <p> <code>TLS_1_0</code> </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the directory setting. For example:</p>
    /// <p> <code>TLS_1_0</code> </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The valid range of values for the directory setting.</p>
    pub fn allowed_values(mut self, input: impl Into<std::string::String>) -> Self {
        self.allowed_values = Some(input.into());
        self
    }
    /// <p>The valid range of values for the directory setting.</p>
    pub fn set_allowed_values(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.allowed_values = input;
        self
    }
    /// <p>The value of the directory setting that is applied to the directory.</p>
    pub fn applied_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.applied_value = Some(input.into());
        self
    }
    /// <p>The value of the directory setting that is applied to the directory.</p>
    pub fn set_applied_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.applied_value = input;
        self
    }
    /// <p>The value that was last requested for the directory setting.</p>
    pub fn requested_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.requested_value = Some(input.into());
        self
    }
    /// <p>The value that was last requested for the directory setting.</p>
    pub fn set_requested_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.requested_value = input;
        self
    }
    /// <p>The overall status of the request to update the directory setting request. If the directory setting is deployed in more than one region, and the request fails in any region, the overall status is <code>Failed</code>.</p>
    pub fn request_status(mut self, input: crate::types::DirectoryConfigurationStatus) -> Self {
        self.request_status = Some(input);
        self
    }
    /// <p>The overall status of the request to update the directory setting request. If the directory setting is deployed in more than one region, and the request fails in any region, the overall status is <code>Failed</code>.</p>
    pub fn set_request_status(
        mut self,
        input: std::option::Option<crate::types::DirectoryConfigurationStatus>,
    ) -> Self {
        self.request_status = input;
        self
    }
    /// Adds a key-value pair to `request_detailed_status`.
    ///
    /// To override the contents of this collection use [`set_request_detailed_status`](Self::set_request_detailed_status).
    ///
    /// <p>Details about the status of the request to update the directory setting. If the directory setting is deployed in more than one region, status is returned for the request in each region where the setting is deployed.</p>
    pub fn request_detailed_status(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::DirectoryConfigurationStatus,
    ) -> Self {
        let mut hash_map = self.request_detailed_status.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.request_detailed_status = Some(hash_map);
        self
    }
    /// <p>Details about the status of the request to update the directory setting. If the directory setting is deployed in more than one region, status is returned for the request in each region where the setting is deployed.</p>
    pub fn set_request_detailed_status(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::DirectoryConfigurationStatus,
            >,
        >,
    ) -> Self {
        self.request_detailed_status = input;
        self
    }
    /// <p>The last status message for the directory status request.</p>
    pub fn request_status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_status_message = Some(input.into());
        self
    }
    /// <p>The last status message for the directory status request.</p>
    pub fn set_request_status_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.request_status_message = input;
        self
    }
    /// <p>The date and time when the directory setting was last updated.</p>
    pub fn last_updated_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = Some(input);
        self
    }
    /// <p>The date and time when the directory setting was last updated.</p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>The date and time when the request to update a directory setting was last submitted.</p>
    pub fn last_requested_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_requested_date_time = Some(input);
        self
    }
    /// <p>The date and time when the request to update a directory setting was last submitted.</p>
    pub fn set_last_requested_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_requested_date_time = input;
        self
    }
    /// Consumes the builder and constructs a [`SettingEntry`](crate::types::SettingEntry).
    pub fn build(self) -> crate::types::SettingEntry {
        crate::types::SettingEntry {
            r#type: self.r#type,
            name: self.name,
            allowed_values: self.allowed_values,
            applied_value: self.applied_value,
            requested_value: self.requested_value,
            request_status: self.request_status,
            request_detailed_status: self.request_detailed_status,
            request_status_message: self.request_status_message,
            last_updated_date_time: self.last_updated_date_time,
            last_requested_date_time: self.last_requested_date_time,
        }
    }
}
