// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An entry of update information related to a requested update type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInfoEntry {
    /// <p> The name of the Region. </p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p> The status of the update performed on the directory. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::UpdateStatus>,
    /// <p> The reason for the current status of the update type activity. </p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p> This specifies if the update was initiated by the customer or by the service team. </p>
    #[doc(hidden)]
    pub initiated_by: std::option::Option<std::string::String>,
    /// <p> The new value of the target setting. </p>
    #[doc(hidden)]
    pub new_value: std::option::Option<crate::types::UpdateValue>,
    /// <p> The old value of the target setting. </p>
    #[doc(hidden)]
    pub previous_value: std::option::Option<crate::types::UpdateValue>,
    /// <p> The start time of the <code>UpdateDirectorySetup</code> for the particular type. </p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The last updated date and time of a particular directory setting. </p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl UpdateInfoEntry {
    /// <p> The name of the Region. </p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p> The status of the update performed on the directory. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::UpdateStatus> {
        self.status.as_ref()
    }
    /// <p> The reason for the current status of the update type activity. </p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p> This specifies if the update was initiated by the customer or by the service team. </p>
    pub fn initiated_by(&self) -> std::option::Option<&str> {
        self.initiated_by.as_deref()
    }
    /// <p> The new value of the target setting. </p>
    pub fn new_value(&self) -> std::option::Option<&crate::types::UpdateValue> {
        self.new_value.as_ref()
    }
    /// <p> The old value of the target setting. </p>
    pub fn previous_value(&self) -> std::option::Option<&crate::types::UpdateValue> {
        self.previous_value.as_ref()
    }
    /// <p> The start time of the <code>UpdateDirectorySetup</code> for the particular type. </p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p> The last updated date and time of a particular directory setting. </p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date_time.as_ref()
    }
}
impl UpdateInfoEntry {
    /// Creates a new builder-style object to manufacture [`UpdateInfoEntry`](crate::types::UpdateInfoEntry).
    pub fn builder() -> crate::types::builders::UpdateInfoEntryBuilder {
        crate::types::builders::UpdateInfoEntryBuilder::default()
    }
}

/// A builder for [`UpdateInfoEntry`](crate::types::UpdateInfoEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInfoEntryBuilder {
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::UpdateStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) initiated_by: std::option::Option<std::string::String>,
    pub(crate) new_value: std::option::Option<crate::types::UpdateValue>,
    pub(crate) previous_value: std::option::Option<crate::types::UpdateValue>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_date_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl UpdateInfoEntryBuilder {
    /// <p> The name of the Region. </p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p> The name of the Region. </p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p> The status of the update performed on the directory. </p>
    pub fn status(mut self, input: crate::types::UpdateStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status of the update performed on the directory. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::UpdateStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The reason for the current status of the update type activity. </p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p> The reason for the current status of the update type activity. </p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p> This specifies if the update was initiated by the customer or by the service team. </p>
    pub fn initiated_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.initiated_by = Some(input.into());
        self
    }
    /// <p> This specifies if the update was initiated by the customer or by the service team. </p>
    pub fn set_initiated_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.initiated_by = input;
        self
    }
    /// <p> The new value of the target setting. </p>
    pub fn new_value(mut self, input: crate::types::UpdateValue) -> Self {
        self.new_value = Some(input);
        self
    }
    /// <p> The new value of the target setting. </p>
    pub fn set_new_value(mut self, input: std::option::Option<crate::types::UpdateValue>) -> Self {
        self.new_value = input;
        self
    }
    /// <p> The old value of the target setting. </p>
    pub fn previous_value(mut self, input: crate::types::UpdateValue) -> Self {
        self.previous_value = Some(input);
        self
    }
    /// <p> The old value of the target setting. </p>
    pub fn set_previous_value(
        mut self,
        input: std::option::Option<crate::types::UpdateValue>,
    ) -> Self {
        self.previous_value = input;
        self
    }
    /// <p> The start time of the <code>UpdateDirectorySetup</code> for the particular type. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p> The start time of the <code>UpdateDirectorySetup</code> for the particular type. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p> The last updated date and time of a particular directory setting. </p>
    pub fn last_updated_date_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date_time = Some(input);
        self
    }
    /// <p> The last updated date and time of a particular directory setting. </p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInfoEntry`](crate::types::UpdateInfoEntry).
    pub fn build(self) -> crate::types::UpdateInfoEntry {
        crate::types::UpdateInfoEntry {
            region: self.region,
            status: self.status,
            status_reason: self.status_reason,
            initiated_by: self.initiated_by,
            new_value: self.new_value,
            previous_value: self.previous_value,
            start_time: self.start_time,
            last_updated_date_time: self.last_updated_date_time,
        }
    }
}
