// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_client_authentication_settings_output_next_token(
    input: &crate::output::DescribeClientAuthenticationSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_directories_output_next_token(
    input: &crate::output::DescribeDirectoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_domain_controllers_output_next_token(
    input: &crate::output::DescribeDomainControllersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_ldaps_settings_output_next_token(
    input: &crate::output::DescribeLdapsSettingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_regions_output_next_token(
    input: &crate::output::DescribeRegionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_shared_directories_output_next_token(
    input: &crate::output::DescribeSharedDirectoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_snapshots_output_next_token(
    input: &crate::output::DescribeSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_trusts_output_next_token(
    input: &crate::output::DescribeTrustsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_update_directory_output_next_token(
    input: &crate::output::DescribeUpdateDirectoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_certificates_output_next_token(
    input: &crate::output::ListCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_ip_routes_output_next_token(
    input: &crate::output::ListIpRoutesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_log_subscriptions_output_next_token(
    input: &crate::output::ListLogSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_schema_extensions_output_next_token(
    input: &crate::output::ListSchemaExtensionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tags_for_resource_output_next_token(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_client_authentication_settings_output_client_authentication_settings_info(
    input: crate::output::DescribeClientAuthenticationSettingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ClientAuthenticationSettingInfo>> {
    let input = match input.client_authentication_settings_info {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_directories_output_directory_descriptions(
    input: crate::output::DescribeDirectoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DirectoryDescription>> {
    let input = match input.directory_descriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_ldaps_settings_output_ldaps_settings_info(
    input: crate::output::DescribeLdapsSettingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LdapsSettingInfo>> {
    let input = match input.ldaps_settings_info {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_regions_output_regions_description(
    input: crate::output::DescribeRegionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RegionDescription>> {
    let input = match input.regions_description {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_shared_directories_output_shared_directories(
    input: crate::output::DescribeSharedDirectoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SharedDirectory>> {
    let input = match input.shared_directories {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_snapshots_output_snapshots(
    input: crate::output::DescribeSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Snapshot>> {
    let input = match input.snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_trusts_output_trusts(
    input: crate::output::DescribeTrustsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Trust>> {
    let input = match input.trusts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_update_directory_output_update_activities(
    input: crate::output::DescribeUpdateDirectoryOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UpdateInfoEntry>> {
    let input = match input.update_activities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_certificates_output_certificates_info(
    input: crate::output::ListCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CertificateInfo>> {
    let input = match input.certificates_info {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_ip_routes_output_ip_routes_info(
    input: crate::output::ListIpRoutesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::IpRouteInfo>> {
    let input = match input.ip_routes_info {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_log_subscriptions_output_log_subscriptions(
    input: crate::output::ListLogSubscriptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LogSubscription>> {
    let input = match input.log_subscriptions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_schema_extensions_output_schema_extensions_info(
    input: crate::output::ListSchemaExtensionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SchemaExtensionInfo>> {
    let input = match input.schema_extensions_info {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
