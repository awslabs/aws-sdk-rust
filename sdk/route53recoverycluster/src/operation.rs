// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Get the state for a routing control. A routing control is a simple on/off switch
/// that you can use to route traffic to cells. When the state is On, traffic flows to a cell. When it's off, traffic does not flow. </p>
/// <p>Before you can create a routing control, you first must create a cluster to host the control.
/// For more information, see
/// <a href="https://docs.aws.amazon.com/recovery-cluster/latest/api/cluster.html">CreateCluster</a>.
/// Access one of the endpoints for the cluster to get or update the routing control state to
/// redirect traffic.</p>
/// <p>For more information about working with routing controls, see
/// <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.html">Routing control</a>
/// in the Route 53 Application Recovery Controller Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRoutingControlState {
    _private: (),
}
impl GetRoutingControlState {
    /// Creates a new builder-style object to manufacture [`GetRoutingControlStateInput`](crate::input::GetRoutingControlStateInput)
    pub fn builder() -> crate::input::get_routing_control_state_input::Builder {
        crate::input::get_routing_control_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRoutingControlState {
    type Output = std::result::Result<
        crate::output::GetRoutingControlStateOutput,
        crate::error::GetRoutingControlStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_routing_control_state_error(response)
        } else {
            crate::operation_deser::parse_get_routing_control_state_response(response)
        }
    }
}

/// <p>Set the state of the routing control to reroute traffic. You can set the value to be On or Off.
/// When the state is On, traffic flows to a cell. When it's off, traffic does not flow.</p>
/// <p>For more information about working with routing controls, see
/// <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.html">Routing control</a>
/// in the Route 53 Application Recovery Controller Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoutingControlState {
    _private: (),
}
impl UpdateRoutingControlState {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingControlStateInput`](crate::input::UpdateRoutingControlStateInput)
    pub fn builder() -> crate::input::update_routing_control_state_input::Builder {
        crate::input::update_routing_control_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRoutingControlState {
    type Output = std::result::Result<
        crate::output::UpdateRoutingControlStateOutput,
        crate::error::UpdateRoutingControlStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_routing_control_state_error(response)
        } else {
            crate::operation_deser::parse_update_routing_control_state_response(response)
        }
    }
}

/// <p>Set multiple routing control states. You can set the value for each state to be On or Off.
/// When the state is On, traffic flows to a cell. When it's off, traffic does not flow.</p>
/// <p>For more information about working with routing controls, see
/// <a href="https://docs.aws.amazon.com/r53recovery/latest/dg/routing-control.html">Routing control</a>
/// in the Route 53 Application Recovery Controller Developer Guide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateRoutingControlStates {
    _private: (),
}
impl UpdateRoutingControlStates {
    /// Creates a new builder-style object to manufacture [`UpdateRoutingControlStatesInput`](crate::input::UpdateRoutingControlStatesInput)
    pub fn builder() -> crate::input::update_routing_control_states_input::Builder {
        crate::input::update_routing_control_states_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateRoutingControlStates {
    type Output = std::result::Result<
        crate::output::UpdateRoutingControlStatesOutput,
        crate::error::UpdateRoutingControlStatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_routing_control_states_error(response)
        } else {
            crate::operation_deser::parse_update_routing_control_states_response(response)
        }
    }
}
