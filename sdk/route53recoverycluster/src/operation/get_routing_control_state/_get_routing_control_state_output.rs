// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRoutingControlStateOutput {
    /// <p>The Amazon Resource Name (ARN) of the response.</p>
    #[doc(hidden)]
    pub routing_control_arn: std::option::Option<std::string::String>,
    /// <p>The state of the routing control.</p>
    #[doc(hidden)]
    pub routing_control_state: std::option::Option<crate::types::RoutingControlState>,
    /// <p>The routing control name.</p>
    #[doc(hidden)]
    pub routing_control_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRoutingControlStateOutput {
    /// <p>The Amazon Resource Name (ARN) of the response.</p>
    pub fn routing_control_arn(&self) -> std::option::Option<&str> {
        self.routing_control_arn.as_deref()
    }
    /// <p>The state of the routing control.</p>
    pub fn routing_control_state(&self) -> std::option::Option<&crate::types::RoutingControlState> {
        self.routing_control_state.as_ref()
    }
    /// <p>The routing control name.</p>
    pub fn routing_control_name(&self) -> std::option::Option<&str> {
        self.routing_control_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRoutingControlStateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRoutingControlStateOutput {
    /// Creates a new builder-style object to manufacture [`GetRoutingControlStateOutput`](crate::operation::get_routing_control_state::GetRoutingControlStateOutput).
    pub fn builder(
    ) -> crate::operation::get_routing_control_state::builders::GetRoutingControlStateOutputBuilder
    {
        crate::operation::get_routing_control_state::builders::GetRoutingControlStateOutputBuilder::default()
    }
}

/// A builder for [`GetRoutingControlStateOutput`](crate::operation::get_routing_control_state::GetRoutingControlStateOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRoutingControlStateOutputBuilder {
    pub(crate) routing_control_arn: std::option::Option<std::string::String>,
    pub(crate) routing_control_state: std::option::Option<crate::types::RoutingControlState>,
    pub(crate) routing_control_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetRoutingControlStateOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the response.</p>
    pub fn routing_control_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.routing_control_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the response.</p>
    pub fn set_routing_control_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.routing_control_arn = input;
        self
    }
    /// <p>The state of the routing control.</p>
    pub fn routing_control_state(mut self, input: crate::types::RoutingControlState) -> Self {
        self.routing_control_state = Some(input);
        self
    }
    /// <p>The state of the routing control.</p>
    pub fn set_routing_control_state(
        mut self,
        input: std::option::Option<crate::types::RoutingControlState>,
    ) -> Self {
        self.routing_control_state = input;
        self
    }
    /// <p>The routing control name.</p>
    pub fn routing_control_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.routing_control_name = Some(input.into());
        self
    }
    /// <p>The routing control name.</p>
    pub fn set_routing_control_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.routing_control_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRoutingControlStateOutput`](crate::operation::get_routing_control_state::GetRoutingControlStateOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_routing_control_state::GetRoutingControlStateOutput {
        crate::operation::get_routing_control_state::GetRoutingControlStateOutput {
            routing_control_arn: self.routing_control_arn,
            routing_control_state: self.routing_control_state,
            routing_control_name: self.routing_control_name,
            _request_id: self._request_id,
        }
    }
}
