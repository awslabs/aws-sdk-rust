// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::increase_replication_factor::_increase_replication_factor_output::IncreaseReplicationFactorOutputBuilder;

pub use crate::operation::increase_replication_factor::_increase_replication_factor_input::IncreaseReplicationFactorInputBuilder;

impl IncreaseReplicationFactorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::increase_replication_factor::IncreaseReplicationFactorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::increase_replication_factor::IncreaseReplicationFactorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.increase_replication_factor();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `IncreaseReplicationFactor`.
///
/// <p>Adds one or more nodes to a DAX cluster.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct IncreaseReplicationFactorFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::increase_replication_factor::builders::IncreaseReplicationFactorInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::increase_replication_factor::IncreaseReplicationFactorOutput,
        crate::operation::increase_replication_factor::IncreaseReplicationFactorError,
    > for IncreaseReplicationFactorFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::increase_replication_factor::IncreaseReplicationFactorOutput,
            crate::operation::increase_replication_factor::IncreaseReplicationFactorError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl IncreaseReplicationFactorFluentBuilder {
    /// Creates a new `IncreaseReplicationFactor`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the IncreaseReplicationFactor as a reference.
    pub fn as_input(&self) -> &crate::operation::increase_replication_factor::builders::IncreaseReplicationFactorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::increase_replication_factor::IncreaseReplicationFactorOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::increase_replication_factor::IncreaseReplicationFactorError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::increase_replication_factor::IncreaseReplicationFactor::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::increase_replication_factor::IncreaseReplicationFactor::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::increase_replication_factor::IncreaseReplicationFactorOutput,
        crate::operation::increase_replication_factor::IncreaseReplicationFactorError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn new_replication_factor(mut self, input: i32) -> Self {
        self.inner = self.inner.new_replication_factor(input);
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn set_new_replication_factor(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_new_replication_factor(input);
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn get_new_replication_factor(&self) -> &::std::option::Option<i32> {
        self.inner.get_new_replication_factor()
    }
    /// Appends an item to `AvailabilityZones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zones(input.into());
        self
    }
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_availability_zones(input);
        self
    }
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_availability_zones()
    }
}
