// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IncreaseReplicationFactorInput {
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The new number of nodes for the DAX cluster.</p>
    #[doc(hidden)]
    pub new_replication_factor: i32,
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl IncreaseReplicationFactorInput {
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn new_replication_factor(&self) -> i32 {
        self.new_replication_factor
    }
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
}
impl IncreaseReplicationFactorInput {
    /// Creates a new builder-style object to manufacture [`IncreaseReplicationFactorInput`](crate::operation::increase_replication_factor::IncreaseReplicationFactorInput).
    pub fn builder() -> crate::operation::increase_replication_factor::builders::IncreaseReplicationFactorInputBuilder{
        crate::operation::increase_replication_factor::builders::IncreaseReplicationFactorInputBuilder::default()
    }
}

/// A builder for [`IncreaseReplicationFactorInput`](crate::operation::increase_replication_factor::IncreaseReplicationFactorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IncreaseReplicationFactorInputBuilder {
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) new_replication_factor: std::option::Option<i32>,
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl IncreaseReplicationFactorInputBuilder {
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the DAX cluster that will receive additional nodes.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn new_replication_factor(mut self, input: i32) -> Self {
        self.new_replication_factor = Some(input);
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn set_new_replication_factor(mut self, input: std::option::Option<i32>) -> Self {
        self.new_replication_factor = input;
        self
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// <p>The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// Consumes the builder and constructs a [`IncreaseReplicationFactorInput`](crate::operation::increase_replication_factor::IncreaseReplicationFactorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::increase_replication_factor::IncreaseReplicationFactorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::increase_replication_factor::IncreaseReplicationFactorInput {
                cluster_name: self.cluster_name,
                new_replication_factor: self.new_replication_factor.unwrap_or_default(),
                availability_zones: self.availability_zones,
            },
        )
    }
}
