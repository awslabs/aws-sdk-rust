// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DecreaseReplicationFactorInput {
    /// <p>The name of the DAX cluster from which you want to remove nodes.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The new number of nodes for the DAX cluster.</p>
    #[doc(hidden)]
    pub new_replication_factor: i32,
    /// <p>The Availability Zone(s) from which to remove nodes.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The unique identifiers of the nodes to be removed from the cluster.</p>
    #[doc(hidden)]
    pub node_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DecreaseReplicationFactorInput {
    /// <p>The name of the DAX cluster from which you want to remove nodes.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn new_replication_factor(&self) -> i32 {
        self.new_replication_factor
    }
    /// <p>The Availability Zone(s) from which to remove nodes.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
    /// <p>The unique identifiers of the nodes to be removed from the cluster.</p>
    pub fn node_ids_to_remove(&self) -> std::option::Option<&[std::string::String]> {
        self.node_ids_to_remove.as_deref()
    }
}
impl DecreaseReplicationFactorInput {
    /// Creates a new builder-style object to manufacture [`DecreaseReplicationFactorInput`](crate::operation::decrease_replication_factor::DecreaseReplicationFactorInput).
    pub fn builder() -> crate::operation::decrease_replication_factor::builders::DecreaseReplicationFactorInputBuilder{
        crate::operation::decrease_replication_factor::builders::DecreaseReplicationFactorInputBuilder::default()
    }
}

/// A builder for [`DecreaseReplicationFactorInput`](crate::operation::decrease_replication_factor::DecreaseReplicationFactorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DecreaseReplicationFactorInputBuilder {
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) new_replication_factor: std::option::Option<i32>,
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) node_ids_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DecreaseReplicationFactorInputBuilder {
    /// <p>The name of the DAX cluster from which you want to remove nodes.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the DAX cluster from which you want to remove nodes.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn new_replication_factor(mut self, input: i32) -> Self {
        self.new_replication_factor = Some(input);
        self
    }
    /// <p>The new number of nodes for the DAX cluster.</p>
    pub fn set_new_replication_factor(mut self, input: std::option::Option<i32>) -> Self {
        self.new_replication_factor = input;
        self
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zone(s) from which to remove nodes.</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// <p>The Availability Zone(s) from which to remove nodes.</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// Appends an item to `node_ids_to_remove`.
    ///
    /// To override the contents of this collection use [`set_node_ids_to_remove`](Self::set_node_ids_to_remove).
    ///
    /// <p>The unique identifiers of the nodes to be removed from the cluster.</p>
    pub fn node_ids_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.node_ids_to_remove.unwrap_or_default();
        v.push(input.into());
        self.node_ids_to_remove = Some(v);
        self
    }
    /// <p>The unique identifiers of the nodes to be removed from the cluster.</p>
    pub fn set_node_ids_to_remove(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.node_ids_to_remove = input;
        self
    }
    /// Consumes the builder and constructs a [`DecreaseReplicationFactorInput`](crate::operation::decrease_replication_factor::DecreaseReplicationFactorInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::decrease_replication_factor::DecreaseReplicationFactorInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::decrease_replication_factor::DecreaseReplicationFactorInput {
                cluster_name: self.cluster_name,
                new_replication_factor: self.new_replication_factor.unwrap_or_default(),
                availability_zones: self.availability_zones,
                node_ids_to_remove: self.node_ids_to_remove,
            },
        )
    }
}
