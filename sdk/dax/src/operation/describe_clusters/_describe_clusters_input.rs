// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeClustersInput {
    /// <p>The names of the DAX clusters being described.</p>
    pub cluster_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    /// <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeClustersInput {
    /// <p>The names of the DAX clusters being described.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cluster_names.is_none()`.
    pub fn cluster_names(&self) -> &[::std::string::String] {
        self.cluster_names.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    /// <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl DescribeClustersInput {
    /// Creates a new builder-style object to manufacture [`DescribeClustersInput`](crate::operation::describe_clusters::DescribeClustersInput).
    pub fn builder() -> crate::operation::describe_clusters::builders::DescribeClustersInputBuilder {
        crate::operation::describe_clusters::builders::DescribeClustersInputBuilder::default()
    }
}

/// A builder for [`DescribeClustersInput`](crate::operation::describe_clusters::DescribeClustersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeClustersInputBuilder {
    pub(crate) cluster_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl DescribeClustersInputBuilder {
    /// Appends an item to `cluster_names`.
    ///
    /// To override the contents of this collection use [`set_cluster_names`](Self::set_cluster_names).
    ///
    /// <p>The names of the DAX clusters being described.</p>
    pub fn cluster_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.cluster_names.unwrap_or_default();
        v.push(input.into());
        self.cluster_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The names of the DAX clusters being described.</p>
    pub fn set_cluster_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.cluster_names = input;
        self
    }
    /// <p>The names of the DAX clusters being described.</p>
    pub fn get_cluster_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.cluster_names
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    /// <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    /// <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    /// <p>The value for <code>MaxResults</code> must be between 20 and 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`DescribeClustersInput`](crate::operation::describe_clusters::DescribeClustersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_clusters::DescribeClustersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_clusters::DescribeClustersInput {
            cluster_names: self.cluster_names,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
