// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_list_application_revisions_output_next_token(
    input: &crate::output::ListApplicationRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_applications_output_next_token(
    input: &crate::output::ListApplicationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_deployment_configs_output_next_token(
    input: &crate::output::ListDeploymentConfigsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_deployment_groups_output_next_token(
    input: &crate::output::ListDeploymentGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_deployment_instances_output_next_token(
    input: &crate::output::ListDeploymentInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_deployments_output_next_token(
    input: &crate::output::ListDeploymentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_application_revisions_output_revisions(
    input: crate::output::ListApplicationRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RevisionLocation>> {
    let input = match input.revisions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_applications_output_applications(
    input: crate::output::ListApplicationsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.applications {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_deployment_configs_output_deployment_configs_list(
    input: crate::output::ListDeploymentConfigsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.deployment_configs_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_deployment_groups_output_deployment_groups(
    input: crate::output::ListDeploymentGroupsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.deployment_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_deployment_instances_output_instances_list(
    input: crate::output::ListDeploymentInstancesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.instances_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_deployments_output_deployments(
    input: crate::output::ListDeploymentsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.deployments {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
