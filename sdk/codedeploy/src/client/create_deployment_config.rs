// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDeploymentConfig`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_config_name(impl Into<String>)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::deployment_config_name) / [`set_deployment_config_name(Option<String>)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::set_deployment_config_name):<br>required: **true**<br><p>The name of the deployment configuration to create.</p><br>
    ///   - [`minimum_healthy_hosts(MinimumHealthyHosts)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::minimum_healthy_hosts) / [`set_minimum_healthy_hosts(Option<MinimumHealthyHosts>)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::set_minimum_healthy_hosts):<br>required: **false**<br><p>The minimum number of healthy instances that should be available at any time during the deployment. There are two parameters expected in the input: type and value.</p>  <p>The type parameter takes either of the following values:</p>  <ul>   <li> <p>HOST_COUNT: The value parameter represents the minimum number of healthy instances as an absolute value.</p> </li>   <li> <p>FLEET_PERCENT: The value parameter represents the minimum number of healthy instances as a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the deployment, CodeDeploy converts the percentage to the equivalent number of instances and rounds up fractional instances.</p> </li>  </ul>  <p>The value parameter takes an integer.</p>  <p>For example, to set a minimum of 95% healthy instance, specify a type of FLEET_PERCENT and a value of 95.</p><br>
    ///   - [`traffic_routing_config(TrafficRoutingConfig)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::traffic_routing_config) / [`set_traffic_routing_config(Option<TrafficRoutingConfig>)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::set_traffic_routing_config):<br>required: **false**<br><p>The configuration that specifies how the deployment traffic is routed.</p><br>
    ///   - [`compute_platform(ComputePlatform)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::compute_platform) / [`set_compute_platform(Option<ComputePlatform>)`](crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::set_compute_platform):<br>required: **false**<br><p>The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).</p><br>
    /// - On success, responds with [`CreateDeploymentConfigOutput`](crate::operation::create_deployment_config::CreateDeploymentConfigOutput) with field(s):
    ///   - [`deployment_config_id(Option<String>)`](crate::operation::create_deployment_config::CreateDeploymentConfigOutput::deployment_config_id): <p>A unique deployment configuration ID.</p>
    /// - On failure, responds with [`SdkError<CreateDeploymentConfigError>`](crate::operation::create_deployment_config::CreateDeploymentConfigError)
    pub fn create_deployment_config(&self) -> crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder {
        crate::operation::create_deployment_config::builders::CreateDeploymentConfigFluentBuilder::new(self.handle.clone())
    }
}
