// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopDeployment`](crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_id(impl Into<String>)`](crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder::deployment_id) / [`set_deployment_id(Option<String>)`](crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder::set_deployment_id):<br>required: **true**<br><p> The unique ID of a deployment. </p><br>
    ///   - [`auto_rollback_enabled(bool)`](crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder::auto_rollback_enabled) / [`set_auto_rollback_enabled(Option<bool>)`](crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder::set_auto_rollback_enabled):<br>required: **false**<br><p> Indicates, when a deployment is stopped, whether instances that have been updated should be rolled back to the previous version of the application revision. </p><br>
    /// - On success, responds with [`StopDeploymentOutput`](crate::operation::stop_deployment::StopDeploymentOutput) with field(s):
    ///   - [`status(Option<StopStatus>)`](crate::operation::stop_deployment::StopDeploymentOutput::status): <p>The status of the stop deployment operation:</p>  <ul>   <li> <p>Pending: The stop operation is pending.</p> </li>   <li> <p>Succeeded: The stop operation was successful.</p> </li>  </ul>
    ///   - [`status_message(Option<String>)`](crate::operation::stop_deployment::StopDeploymentOutput::status_message): <p>An accompanying status message.</p>
    /// - On failure, responds with [`SdkError<StopDeploymentError>`](crate::operation::stop_deployment::StopDeploymentError)
    pub fn stop_deployment(&self) -> crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder {
        crate::operation::stop_deployment::builders::StopDeploymentFluentBuilder::new(self.handle.clone())
    }
}
