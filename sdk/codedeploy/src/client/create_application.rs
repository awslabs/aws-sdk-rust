// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateApplication`](crate::operation::create_application::builders::CreateApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::application_name) / [`set_application_name(Option<String>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_application_name):<br>required: **true**<br><p>The name of the application. This name must be unique with the applicable user or Amazon Web Services account.</p><br>
    ///   - [`compute_platform(ComputePlatform)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::compute_platform) / [`set_compute_platform(Option<ComputePlatform>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_compute_platform):<br>required: **false**<br><p> The destination platform type for the deployment (<code>Lambda</code>, <code>Server</code>, or <code>ECS</code>).</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_application::builders::CreateApplicationFluentBuilder::set_tags):<br>required: **false**<br><p> The metadata that you apply to CodeDeploy applications to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p><br>
    /// - On success, responds with [`CreateApplicationOutput`](crate::operation::create_application::CreateApplicationOutput) with field(s):
    ///   - [`application_id(Option<String>)`](crate::operation::create_application::CreateApplicationOutput::application_id): <p>A unique application ID.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::operation::create_application::CreateApplicationError)
    pub fn create_application(&self) -> crate::operation::create_application::builders::CreateApplicationFluentBuilder {
        crate::operation::create_application::builders::CreateApplicationFluentBuilder::new(self.handle.clone())
    }
}
