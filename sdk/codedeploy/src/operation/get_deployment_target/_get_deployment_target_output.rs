// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeploymentTargetOutput {
    /// <p> A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). </p>
    #[doc(hidden)]
    pub deployment_target: std::option::Option<crate::types::DeploymentTarget>,
    _request_id: Option<String>,
}
impl GetDeploymentTargetOutput {
    /// <p> A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). </p>
    pub fn deployment_target(&self) -> std::option::Option<&crate::types::DeploymentTarget> {
        self.deployment_target.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetDeploymentTargetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeploymentTargetOutput {
    /// Creates a new builder-style object to manufacture [`GetDeploymentTargetOutput`](crate::operation::get_deployment_target::GetDeploymentTargetOutput).
    pub fn builder(
    ) -> crate::operation::get_deployment_target::builders::GetDeploymentTargetOutputBuilder {
        crate::operation::get_deployment_target::builders::GetDeploymentTargetOutputBuilder::default(
        )
    }
}

/// A builder for [`GetDeploymentTargetOutput`](crate::operation::get_deployment_target::GetDeploymentTargetOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeploymentTargetOutputBuilder {
    pub(crate) deployment_target: std::option::Option<crate::types::DeploymentTarget>,
    _request_id: Option<String>,
}
impl GetDeploymentTargetOutputBuilder {
    /// <p> A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). </p>
    pub fn deployment_target(mut self, input: crate::types::DeploymentTarget) -> Self {
        self.deployment_target = Some(input);
        self
    }
    /// <p> A deployment target that contains information about a deployment such as its status, lifecycle events, and when it was last updated. It also contains metadata about the deployment target. The deployment target metadata depends on the deployment target's type (<code>instanceTarget</code>, <code>lambdaTarget</code>, or <code>ecsTarget</code>). </p>
    pub fn set_deployment_target(
        mut self,
        input: std::option::Option<crate::types::DeploymentTarget>,
    ) -> Self {
        self.deployment_target = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeploymentTargetOutput`](crate::operation::get_deployment_target::GetDeploymentTargetOutput).
    pub fn build(self) -> crate::operation::get_deployment_target::GetDeploymentTargetOutput {
        crate::operation::get_deployment_target::GetDeploymentTargetOutput {
            deployment_target: self.deployment_target,
            _request_id: self._request_id,
        }
    }
}
