// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_deployments::_list_deployments_output::ListDeploymentsOutputBuilder;

pub use crate::operation::list_deployments::_list_deployments_input::ListDeploymentsInputBuilder;

/// Fluent builder constructing a request to `ListDeployments`.
///
/// <p>Lists the deployments in a deployment group for an application registered with the IAM user or Amazon Web Services account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDeploymentsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_deployments::builders::ListDeploymentsInputBuilder,
}
impl ListDeploymentsFluentBuilder {
    /// Creates a new `ListDeployments`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_deployments::ListDeployments,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_deployments::ListDeploymentsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_deployments::ListDeploymentsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_deployments::ListDeploymentsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_deployments::paginator::ListDeploymentsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_deployments::paginator::ListDeploymentsPaginator {
        crate::operation::list_deployments::paginator::ListDeploymentsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.</p> <note>
    /// <p>If <code>applicationName</code> is specified, then <code>deploymentGroupName</code> must be specified. If it is not specified, then <code>deploymentGroupName</code> must not be specified. </p>
    /// </note>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>The name of an CodeDeploy application associated with the IAM user or Amazon Web Services account.</p> <note>
    /// <p>If <code>applicationName</code> is specified, then <code>deploymentGroupName</code> must be specified. If it is not specified, then <code>deploymentGroupName</code> must not be specified. </p>
    /// </note>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>The name of a deployment group for the specified application.</p> <note>
    /// <p>If <code>deploymentGroupName</code> is specified, then <code>applicationName</code> must be specified. If it is not specified, then <code>applicationName</code> must not be specified. </p>
    /// </note>
    pub fn deployment_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.deployment_group_name(input.into());
        self
    }
    /// <p>The name of a deployment group for the specified application.</p> <note>
    /// <p>If <code>deploymentGroupName</code> is specified, then <code>applicationName</code> must be specified. If it is not specified, then <code>applicationName</code> must not be specified. </p>
    /// </note>
    pub fn set_deployment_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_deployment_group_name(input);
        self
    }
    /// <p>The unique ID of an external resource for returning deployments linked to the external resource.</p>
    pub fn external_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.external_id(input.into());
        self
    }
    /// <p>The unique ID of an external resource for returning deployments linked to the external resource.</p>
    pub fn set_external_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_external_id(input);
        self
    }
    /// Appends an item to `includeOnlyStatuses`.
    ///
    /// To override the contents of this collection use [`set_include_only_statuses`](Self::set_include_only_statuses).
    ///
    /// <p>A subset of deployments to list by status:</p>
    /// <ul>
    /// <li> <p> <code>Created</code>: Include created deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Queued</code>: Include queued deployments in the resulting list.</p> </li>
    /// <li> <p> <code>In Progress</code>: Include in-progress deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Succeeded</code>: Include successful deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Failed</code>: Include failed deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Stopped</code>: Include stopped deployments in the resulting list.</p> </li>
    /// </ul>
    pub fn include_only_statuses(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.inner = self.inner.include_only_statuses(input);
        self
    }
    /// <p>A subset of deployments to list by status:</p>
    /// <ul>
    /// <li> <p> <code>Created</code>: Include created deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Queued</code>: Include queued deployments in the resulting list.</p> </li>
    /// <li> <p> <code>In Progress</code>: Include in-progress deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Succeeded</code>: Include successful deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Failed</code>: Include failed deployments in the resulting list.</p> </li>
    /// <li> <p> <code>Stopped</code>: Include stopped deployments in the resulting list.</p> </li>
    /// </ul>
    pub fn set_include_only_statuses(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentStatus>>,
    ) -> Self {
        self.inner = self.inner.set_include_only_statuses(input);
        self
    }
    /// <p>A time range (start and end) for returning a subset of the list of deployments.</p>
    pub fn create_time_range(mut self, input: crate::types::TimeRange) -> Self {
        self.inner = self.inner.create_time_range(input);
        self
    }
    /// <p>A time range (start and end) for returning a subset of the list of deployments.</p>
    pub fn set_create_time_range(
        mut self,
        input: std::option::Option<crate::types::TimeRange>,
    ) -> Self {
        self.inner = self.inner.set_create_time_range(input);
        self
    }
    /// <p>An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An identifier returned from the previous list deployments call. It can be used to return the next set of deployments in the list.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
