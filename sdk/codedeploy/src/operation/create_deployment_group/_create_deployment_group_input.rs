// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the input of a <code>CreateDeploymentGroup</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDeploymentGroupInput {
    /// <p>The name of an CodeDeploy application associated with the user or Amazon Web Services account.</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of a new deployment group for the specified application.</p>
    pub deployment_group_name: ::std::option::Option<::std::string::String>,
    /// <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p>
    /// <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p>
    /// <p>For more information about the predefined deployment configurations in CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub deployment_config_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    pub ec2_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::Ec2TagFilter>>,
    /// <p>The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.</p>
    pub on_premises_instance_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    pub auto_scaling_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.</p>
    pub service_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an CodeDeploy Event</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub trigger_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConfig>>,
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is created.</p>
    pub alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    /// <p>Configuration information for an automatic rollback that is added when a deployment group is created.</p>
    pub auto_rollback_configuration: ::std::option::Option<crate::types::AutoRollbackConfiguration>,
    /// <p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p>
    /// <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p>
    /// <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>
    pub outdated_instances_strategy: ::std::option::Option<crate::types::OutdatedInstancesStrategy>,
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.</p>
    pub deployment_style: ::std::option::Option<crate::types::DeploymentStyle>,
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    pub blue_green_deployment_configuration: ::std::option::Option<crate::types::BlueGreenDeploymentConfiguration>,
    /// <p>Information about the load balancer used in a deployment.</p>
    pub load_balancer_info: ::std::option::Option<crate::types::LoadBalancerInfo>,
    /// <p>Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.</p>
    pub ec2_tag_set: ::std::option::Option<crate::types::Ec2TagSet>,
    /// <p> The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>
    /// <clustername>
    /// :
    /// <servicename></servicename>
    /// </clustername></code>. </p>
    pub ecs_services: ::std::option::Option<::std::vec::Vec<crate::types::EcsService>>,
    /// <p>Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    pub on_premises_tag_set: ::std::option::Option<crate::types::OnPremisesTagSet>,
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDeploymentGroupInput {
    /// <p>The name of an CodeDeploy application associated with the user or Amazon Web Services account.</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The name of a new deployment group for the specified application.</p>
    pub fn deployment_group_name(&self) -> ::std::option::Option<&str> {
        self.deployment_group_name.as_deref()
    }
    /// <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p>
    /// <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p>
    /// <p>For more information about the predefined deployment configurations in CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn deployment_config_name(&self) -> ::std::option::Option<&str> {
        self.deployment_config_name.as_deref()
    }
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ec2_tag_filters.is_none()`.
    pub fn ec2_tag_filters(&self) -> &[crate::types::Ec2TagFilter] {
        self.ec2_tag_filters.as_deref().unwrap_or_default()
    }
    /// <p>The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.on_premises_instance_tag_filters.is_none()`.
    pub fn on_premises_instance_tag_filters(&self) -> &[crate::types::TagFilter] {
        self.on_premises_instance_tag_filters.as_deref().unwrap_or_default()
    }
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.auto_scaling_groups.is_none()`.
    pub fn auto_scaling_groups(&self) -> &[::std::string::String] {
        self.auto_scaling_groups.as_deref().unwrap_or_default()
    }
    /// <p>A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.</p>
    pub fn service_role_arn(&self) -> ::std::option::Option<&str> {
        self.service_role_arn.as_deref()
    }
    /// <p>Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an CodeDeploy Event</a> in the <i>CodeDeploy User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trigger_configurations.is_none()`.
    pub fn trigger_configurations(&self) -> &[crate::types::TriggerConfig] {
        self.trigger_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is created.</p>
    pub fn alarm_configuration(&self) -> ::std::option::Option<&crate::types::AlarmConfiguration> {
        self.alarm_configuration.as_ref()
    }
    /// <p>Configuration information for an automatic rollback that is added when a deployment group is created.</p>
    pub fn auto_rollback_configuration(&self) -> ::std::option::Option<&crate::types::AutoRollbackConfiguration> {
        self.auto_rollback_configuration.as_ref()
    }
    /// <p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p>
    /// <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p>
    /// <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>
    pub fn outdated_instances_strategy(&self) -> ::std::option::Option<&crate::types::OutdatedInstancesStrategy> {
        self.outdated_instances_strategy.as_ref()
    }
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.</p>
    pub fn deployment_style(&self) -> ::std::option::Option<&crate::types::DeploymentStyle> {
        self.deployment_style.as_ref()
    }
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    pub fn blue_green_deployment_configuration(&self) -> ::std::option::Option<&crate::types::BlueGreenDeploymentConfiguration> {
        self.blue_green_deployment_configuration.as_ref()
    }
    /// <p>Information about the load balancer used in a deployment.</p>
    pub fn load_balancer_info(&self) -> ::std::option::Option<&crate::types::LoadBalancerInfo> {
        self.load_balancer_info.as_ref()
    }
    /// <p>Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.</p>
    pub fn ec2_tag_set(&self) -> ::std::option::Option<&crate::types::Ec2TagSet> {
        self.ec2_tag_set.as_ref()
    }
    /// <p> The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>
    /// <clustername>
    /// :
    /// <servicename></servicename>
    /// </clustername></code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ecs_services.is_none()`.
    pub fn ecs_services(&self) -> &[crate::types::EcsService] {
        self.ecs_services.as_deref().unwrap_or_default()
    }
    /// <p>Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    pub fn on_premises_tag_set(&self) -> ::std::option::Option<&crate::types::OnPremisesTagSet> {
        self.on_premises_tag_set.as_ref()
    }
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateDeploymentGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentGroupInput`](crate::operation::create_deployment_group::CreateDeploymentGroupInput).
    pub fn builder() -> crate::operation::create_deployment_group::builders::CreateDeploymentGroupInputBuilder {
        crate::operation::create_deployment_group::builders::CreateDeploymentGroupInputBuilder::default()
    }
}

/// A builder for [`CreateDeploymentGroupInput`](crate::operation::create_deployment_group::CreateDeploymentGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDeploymentGroupInputBuilder {
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_config_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::Ec2TagFilter>>,
    pub(crate) on_premises_instance_tag_filters: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>,
    pub(crate) auto_scaling_groups: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) service_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trigger_configurations: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConfig>>,
    pub(crate) alarm_configuration: ::std::option::Option<crate::types::AlarmConfiguration>,
    pub(crate) auto_rollback_configuration: ::std::option::Option<crate::types::AutoRollbackConfiguration>,
    pub(crate) outdated_instances_strategy: ::std::option::Option<crate::types::OutdatedInstancesStrategy>,
    pub(crate) deployment_style: ::std::option::Option<crate::types::DeploymentStyle>,
    pub(crate) blue_green_deployment_configuration: ::std::option::Option<crate::types::BlueGreenDeploymentConfiguration>,
    pub(crate) load_balancer_info: ::std::option::Option<crate::types::LoadBalancerInfo>,
    pub(crate) ec2_tag_set: ::std::option::Option<crate::types::Ec2TagSet>,
    pub(crate) ecs_services: ::std::option::Option<::std::vec::Vec<crate::types::EcsService>>,
    pub(crate) on_premises_tag_set: ::std::option::Option<crate::types::OnPremisesTagSet>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDeploymentGroupInputBuilder {
    /// <p>The name of an CodeDeploy application associated with the user or Amazon Web Services account.</p>
    /// This field is required.
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an CodeDeploy application associated with the user or Amazon Web Services account.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of an CodeDeploy application associated with the user or Amazon Web Services account.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>The name of a new deployment group for the specified application.</p>
    /// This field is required.
    pub fn deployment_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a new deployment group for the specified application.</p>
    pub fn set_deployment_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_group_name = input;
        self
    }
    /// <p>The name of a new deployment group for the specified application.</p>
    pub fn get_deployment_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_group_name
    }
    /// <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p>
    /// <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p>
    /// <p>For more information about the predefined deployment configurations in CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn deployment_config_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_config_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p>
    /// <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p>
    /// <p>For more information about the predefined deployment configurations in CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn set_deployment_config_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_config_name = input;
        self
    }
    /// <p>If specified, the deployment configuration name can be either one of the predefined configurations provided with CodeDeploy or a custom deployment configuration that you create by calling the create deployment configuration operation.</p>
    /// <p> <code>CodeDeployDefault.OneAtATime</code> is the default deployment configuration. It is used if a configuration isn't specified for the deployment or deployment group.</p>
    /// <p>For more information about the predefined deployment configurations in CodeDeploy, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-configurations.html">Working with Deployment Configurations in CodeDeploy</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn get_deployment_config_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_config_name
    }
    /// Appends an item to `ec2_tag_filters`.
    ///
    /// To override the contents of this collection use [`set_ec2_tag_filters`](Self::set_ec2_tag_filters).
    ///
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    pub fn ec2_tag_filters(mut self, input: crate::types::Ec2TagFilter) -> Self {
        let mut v = self.ec2_tag_filters.unwrap_or_default();
        v.push(input);
        self.ec2_tag_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    pub fn set_ec2_tag_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ec2TagFilter>>) -> Self {
        self.ec2_tag_filters = input;
        self
    }
    /// <p>The Amazon EC2 tags on which to filter. The deployment group includes Amazon EC2 instances with any of the specified tags. Cannot be used in the same call as ec2TagSet.</p>
    pub fn get_ec2_tag_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ec2TagFilter>> {
        &self.ec2_tag_filters
    }
    /// Appends an item to `on_premises_instance_tag_filters`.
    ///
    /// To override the contents of this collection use [`set_on_premises_instance_tag_filters`](Self::set_on_premises_instance_tag_filters).
    ///
    /// <p>The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.</p>
    pub fn on_premises_instance_tag_filters(mut self, input: crate::types::TagFilter) -> Self {
        let mut v = self.on_premises_instance_tag_filters.unwrap_or_default();
        v.push(input);
        self.on_premises_instance_tag_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.</p>
    pub fn set_on_premises_instance_tag_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagFilter>>) -> Self {
        self.on_premises_instance_tag_filters = input;
        self
    }
    /// <p>The on-premises instance tags on which to filter. The deployment group includes on-premises instances with any of the specified tags. Cannot be used in the same call as <code>OnPremisesTagSet</code>.</p>
    pub fn get_on_premises_instance_tag_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagFilter>> {
        &self.on_premises_instance_tag_filters
    }
    /// Appends an item to `auto_scaling_groups`.
    ///
    /// To override the contents of this collection use [`set_auto_scaling_groups`](Self::set_auto_scaling_groups).
    ///
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    pub fn auto_scaling_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.auto_scaling_groups.unwrap_or_default();
        v.push(input.into());
        self.auto_scaling_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    pub fn set_auto_scaling_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.auto_scaling_groups = input;
        self
    }
    /// <p>A list of associated Amazon EC2 Auto Scaling groups.</p>
    pub fn get_auto_scaling_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.auto_scaling_groups
    }
    /// <p>A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.</p>
    /// This field is required.
    pub fn service_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.</p>
    pub fn set_service_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_role_arn = input;
        self
    }
    /// <p>A service role Amazon Resource Name (ARN) that allows CodeDeploy to act on the user's behalf when interacting with Amazon Web Services services.</p>
    pub fn get_service_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_role_arn
    }
    /// Appends an item to `trigger_configurations`.
    ///
    /// To override the contents of this collection use [`set_trigger_configurations`](Self::set_trigger_configurations).
    ///
    /// <p>Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an CodeDeploy Event</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn trigger_configurations(mut self, input: crate::types::TriggerConfig) -> Self {
        let mut v = self.trigger_configurations.unwrap_or_default();
        v.push(input);
        self.trigger_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an CodeDeploy Event</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn set_trigger_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TriggerConfig>>) -> Self {
        self.trigger_configurations = input;
        self
    }
    /// <p>Information about triggers to create when the deployment group is created. For examples, see <a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-notify-sns.html">Create a Trigger for an CodeDeploy Event</a> in the <i>CodeDeploy User Guide</i>.</p>
    pub fn get_trigger_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TriggerConfig>> {
        &self.trigger_configurations
    }
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is created.</p>
    pub fn alarm_configuration(mut self, input: crate::types::AlarmConfiguration) -> Self {
        self.alarm_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is created.</p>
    pub fn set_alarm_configuration(mut self, input: ::std::option::Option<crate::types::AlarmConfiguration>) -> Self {
        self.alarm_configuration = input;
        self
    }
    /// <p>Information to add about Amazon CloudWatch alarms when the deployment group is created.</p>
    pub fn get_alarm_configuration(&self) -> &::std::option::Option<crate::types::AlarmConfiguration> {
        &self.alarm_configuration
    }
    /// <p>Configuration information for an automatic rollback that is added when a deployment group is created.</p>
    pub fn auto_rollback_configuration(mut self, input: crate::types::AutoRollbackConfiguration) -> Self {
        self.auto_rollback_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information for an automatic rollback that is added when a deployment group is created.</p>
    pub fn set_auto_rollback_configuration(mut self, input: ::std::option::Option<crate::types::AutoRollbackConfiguration>) -> Self {
        self.auto_rollback_configuration = input;
        self
    }
    /// <p>Configuration information for an automatic rollback that is added when a deployment group is created.</p>
    pub fn get_auto_rollback_configuration(&self) -> &::std::option::Option<crate::types::AutoRollbackConfiguration> {
        &self.auto_rollback_configuration
    }
    /// <p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p>
    /// <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p>
    /// <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>
    pub fn outdated_instances_strategy(mut self, input: crate::types::OutdatedInstancesStrategy) -> Self {
        self.outdated_instances_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p>
    /// <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p>
    /// <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>
    pub fn set_outdated_instances_strategy(mut self, input: ::std::option::Option<crate::types::OutdatedInstancesStrategy>) -> Self {
        self.outdated_instances_strategy = input;
        self
    }
    /// <p>Indicates what happens when new Amazon EC2 instances are launched mid-deployment and do not receive the deployed application revision.</p>
    /// <p>If this option is set to <code>UPDATE</code> or is unspecified, CodeDeploy initiates one or more 'auto-update outdated instances' deployments to apply the deployed application revision to the new Amazon EC2 instances.</p>
    /// <p>If this option is set to <code>IGNORE</code>, CodeDeploy does not initiate a deployment to update the new Amazon EC2 instances. This may result in instances having different revisions.</p>
    pub fn get_outdated_instances_strategy(&self) -> &::std::option::Option<crate::types::OutdatedInstancesStrategy> {
        &self.outdated_instances_strategy
    }
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.</p>
    pub fn deployment_style(mut self, input: crate::types::DeploymentStyle) -> Self {
        self.deployment_style = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.</p>
    pub fn set_deployment_style(mut self, input: ::std::option::Option<crate::types::DeploymentStyle>) -> Self {
        self.deployment_style = input;
        self
    }
    /// <p>Information about the type of deployment, in-place or blue/green, that you want to run and whether to route deployment traffic behind a load balancer.</p>
    pub fn get_deployment_style(&self) -> &::std::option::Option<crate::types::DeploymentStyle> {
        &self.deployment_style
    }
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    pub fn blue_green_deployment_configuration(mut self, input: crate::types::BlueGreenDeploymentConfiguration) -> Self {
        self.blue_green_deployment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    pub fn set_blue_green_deployment_configuration(mut self, input: ::std::option::Option<crate::types::BlueGreenDeploymentConfiguration>) -> Self {
        self.blue_green_deployment_configuration = input;
        self
    }
    /// <p>Information about blue/green deployment options for a deployment group.</p>
    pub fn get_blue_green_deployment_configuration(&self) -> &::std::option::Option<crate::types::BlueGreenDeploymentConfiguration> {
        &self.blue_green_deployment_configuration
    }
    /// <p>Information about the load balancer used in a deployment.</p>
    pub fn load_balancer_info(mut self, input: crate::types::LoadBalancerInfo) -> Self {
        self.load_balancer_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the load balancer used in a deployment.</p>
    pub fn set_load_balancer_info(mut self, input: ::std::option::Option<crate::types::LoadBalancerInfo>) -> Self {
        self.load_balancer_info = input;
        self
    }
    /// <p>Information about the load balancer used in a deployment.</p>
    pub fn get_load_balancer_info(&self) -> &::std::option::Option<crate::types::LoadBalancerInfo> {
        &self.load_balancer_info
    }
    /// <p>Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.</p>
    pub fn ec2_tag_set(mut self, input: crate::types::Ec2TagSet) -> Self {
        self.ec2_tag_set = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.</p>
    pub fn set_ec2_tag_set(mut self, input: ::std::option::Option<crate::types::Ec2TagSet>) -> Self {
        self.ec2_tag_set = input;
        self
    }
    /// <p>Information about groups of tags applied to Amazon EC2 instances. The deployment group includes only Amazon EC2 instances identified by all the tag groups. Cannot be used in the same call as <code>ec2TagFilters</code>.</p>
    pub fn get_ec2_tag_set(&self) -> &::std::option::Option<crate::types::Ec2TagSet> {
        &self.ec2_tag_set
    }
    /// Appends an item to `ecs_services`.
    ///
    /// To override the contents of this collection use [`set_ecs_services`](Self::set_ecs_services).
    ///
    /// <p> The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>
    /// <clustername>
    /// :
    /// <servicename></servicename>
    /// </clustername></code>. </p>
    pub fn ecs_services(mut self, input: crate::types::EcsService) -> Self {
        let mut v = self.ecs_services.unwrap_or_default();
        v.push(input);
        self.ecs_services = ::std::option::Option::Some(v);
        self
    }
    /// <p> The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>
    /// <clustername>
    /// :
    /// <servicename></servicename>
    /// </clustername></code>. </p>
    pub fn set_ecs_services(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EcsService>>) -> Self {
        self.ecs_services = input;
        self
    }
    /// <p> The target Amazon ECS services in the deployment group. This applies only to deployment groups that use the Amazon ECS compute platform. A target Amazon ECS service is specified as an Amazon ECS cluster and service name pair using the format <code>
    /// <clustername>
    /// :
    /// <servicename></servicename>
    /// </clustername></code>. </p>
    pub fn get_ecs_services(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EcsService>> {
        &self.ecs_services
    }
    /// <p>Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    pub fn on_premises_tag_set(mut self, input: crate::types::OnPremisesTagSet) -> Self {
        self.on_premises_tag_set = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    pub fn set_on_premises_tag_set(mut self, input: ::std::option::Option<crate::types::OnPremisesTagSet>) -> Self {
        self.on_premises_tag_set = input;
        self
    }
    /// <p>Information about groups of tags applied to on-premises instances. The deployment group includes only on-premises instances identified by all of the tag groups. Cannot be used in the same call as <code>onPremisesInstanceTagFilters</code>.</p>
    pub fn get_on_premises_tag_set(&self) -> &::std::option::Option<crate::types::OnPremisesTagSet> {
        &self.on_premises_tag_set
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> The metadata that you apply to CodeDeploy deployment groups to help you organize and categorize them. Each tag consists of a key and an optional value, both of which you define. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDeploymentGroupInput`](crate::operation::create_deployment_group::CreateDeploymentGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_deployment_group::CreateDeploymentGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_deployment_group::CreateDeploymentGroupInput {
            application_name: self.application_name,
            deployment_group_name: self.deployment_group_name,
            deployment_config_name: self.deployment_config_name,
            ec2_tag_filters: self.ec2_tag_filters,
            on_premises_instance_tag_filters: self.on_premises_instance_tag_filters,
            auto_scaling_groups: self.auto_scaling_groups,
            service_role_arn: self.service_role_arn,
            trigger_configurations: self.trigger_configurations,
            alarm_configuration: self.alarm_configuration,
            auto_rollback_configuration: self.auto_rollback_configuration,
            outdated_instances_strategy: self.outdated_instances_strategy,
            deployment_style: self.deployment_style,
            blue_green_deployment_configuration: self.blue_green_deployment_configuration,
            load_balancer_info: self.load_balancer_info,
            ec2_tag_set: self.ec2_tag_set,
            ecs_services: self.ecs_services,
            on_premises_tag_set: self.on_premises_tag_set,
            tags: self.tags,
        })
    }
}
