// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_deployment_targets::_list_deployment_targets_output::ListDeploymentTargetsOutputBuilder;

pub use crate::operation::list_deployment_targets::_list_deployment_targets_input::ListDeploymentTargetsInputBuilder;

/// Fluent builder constructing a request to `ListDeploymentTargets`.
///
/// <p> Returns an array of target IDs that are associated a deployment. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListDeploymentTargetsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_deployment_targets::builders::ListDeploymentTargetsInputBuilder,
}
impl ListDeploymentTargetsFluentBuilder {
    /// Creates a new `ListDeploymentTargets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_deployment_targets::ListDeploymentTargets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_deployment_targets::ListDeploymentTargetsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_deployment_targets::ListDeploymentTargetsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_deployment_targets::ListDeploymentTargetsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique ID of a deployment. </p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.deployment_id(input.into());
        self
    }
    /// <p> The unique ID of a deployment. </p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_deployment_id(input);
        self
    }
    /// <p> A token identifier returned from the previous <code>ListDeploymentTargets</code> call. It can be used to return the next set of deployment targets in the list. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A token identifier returned from the previous <code>ListDeploymentTargets</code> call. It can be used to return the next set of deployment targets in the list. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// Adds a key-value pair to `targetFilters`.
    ///
    /// To override the contents of this collection use [`set_target_filters`](Self::set_target_filters).
    ///
    /// <p> A key used to filter the returned targets. The two valid values are:</p>
    /// <ul>
    /// <li> <p> <code>TargetStatus</code> - A <code>TargetStatus</code> filter string can be <code>Failed</code>, <code>InProgress</code>, <code>Pending</code>, <code>Ready</code>, <code>Skipped</code>, <code>Succeeded</code>, or <code>Unknown</code>. </p> </li>
    /// <li> <p> <code>ServerInstanceLabel</code> - A <code>ServerInstanceLabel</code> filter string can be <code>Blue</code> or <code>Green</code>. </p> </li>
    /// </ul>
    pub fn target_filters(
        mut self,
        k: crate::types::TargetFilterName,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.target_filters(k, v);
        self
    }
    /// <p> A key used to filter the returned targets. The two valid values are:</p>
    /// <ul>
    /// <li> <p> <code>TargetStatus</code> - A <code>TargetStatus</code> filter string can be <code>Failed</code>, <code>InProgress</code>, <code>Pending</code>, <code>Ready</code>, <code>Skipped</code>, <code>Succeeded</code>, or <code>Unknown</code>. </p> </li>
    /// <li> <p> <code>ServerInstanceLabel</code> - A <code>ServerInstanceLabel</code> filter string can be <code>Blue</code> or <code>Green</code>. </p> </li>
    /// </ul>
    pub fn set_target_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::TargetFilterName,
                std::vec::Vec<std::string::String>,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_target_filters(input);
        self
    }
}
