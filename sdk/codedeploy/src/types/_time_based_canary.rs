// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration that shifts traffic from one version of a Lambda function or Amazon ECS task set to another in two increments. The original and target Lambda function versions or ECS task sets are specified in the deployment's AppSpec file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TimeBasedCanary {
    /// <p>The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment.</p>
    #[doc(hidden)]
    pub canary_percentage: i32,
    /// <p>The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment.</p>
    #[doc(hidden)]
    pub canary_interval: i32,
}
impl TimeBasedCanary {
    /// <p>The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn canary_percentage(&self) -> i32 {
        self.canary_percentage
    }
    /// <p>The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn canary_interval(&self) -> i32 {
        self.canary_interval
    }
}
impl TimeBasedCanary {
    /// Creates a new builder-style object to manufacture [`TimeBasedCanary`](crate::types::TimeBasedCanary).
    pub fn builder() -> crate::types::builders::TimeBasedCanaryBuilder {
        crate::types::builders::TimeBasedCanaryBuilder::default()
    }
}

/// A builder for [`TimeBasedCanary`](crate::types::TimeBasedCanary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TimeBasedCanaryBuilder {
    pub(crate) canary_percentage: std::option::Option<i32>,
    pub(crate) canary_interval: std::option::Option<i32>,
}
impl TimeBasedCanaryBuilder {
    /// <p>The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn canary_percentage(mut self, input: i32) -> Self {
        self.canary_percentage = Some(input);
        self
    }
    /// <p>The percentage of traffic to shift in the first increment of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn set_canary_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.canary_percentage = input;
        self
    }
    /// <p>The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn canary_interval(mut self, input: i32) -> Self {
        self.canary_interval = Some(input);
        self
    }
    /// <p>The number of minutes between the first and second traffic shifts of a <code>TimeBasedCanary</code> deployment.</p>
    pub fn set_canary_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.canary_interval = input;
        self
    }
    /// Consumes the builder and constructs a [`TimeBasedCanary`](crate::types::TimeBasedCanary).
    pub fn build(self) -> crate::types::TimeBasedCanary {
        crate::types::TimeBasedCanary {
            canary_percentage: self.canary_percentage.unwrap_or_default(),
            canary_interval: self.canary_interval.unwrap_or_default(),
        }
    }
}
