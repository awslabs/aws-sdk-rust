// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorcode = unimplemented!();
/// match errorcode {
///     ErrorCode::AgentIssue => { /* ... */ },
///     ErrorCode::AlarmActive => { /* ... */ },
///     ErrorCode::ApplicationMissing => { /* ... */ },
///     ErrorCode::AutoscalingValidationError => { /* ... */ },
///     ErrorCode::AutoScalingConfiguration => { /* ... */ },
///     ErrorCode::AutoScalingIamRolePermissions => { /* ... */ },
///     ErrorCode::CloudformationStackFailure => { /* ... */ },
///     ErrorCode::CodedeployResourceCannotBeFound => { /* ... */ },
///     ErrorCode::CustomerApplicationUnhealthy => { /* ... */ },
///     ErrorCode::DeploymentGroupMissing => { /* ... */ },
///     ErrorCode::EcsUpdateError => { /* ... */ },
///     ErrorCode::ElasticLoadBalancingInvalid => { /* ... */ },
///     ErrorCode::ElbInvalidInstance => { /* ... */ },
///     ErrorCode::HealthConstraints => { /* ... */ },
///     ErrorCode::HealthConstraintsInvalid => { /* ... */ },
///     ErrorCode::HookExecutionFailure => { /* ... */ },
///     ErrorCode::IamRoleMissing => { /* ... */ },
///     ErrorCode::IamRolePermissions => { /* ... */ },
///     ErrorCode::InternalError => { /* ... */ },
///     ErrorCode::InvalidEcsService => { /* ... */ },
///     ErrorCode::InvalidLambdaConfiguration => { /* ... */ },
///     ErrorCode::InvalidLambdaFunction => { /* ... */ },
///     ErrorCode::InvalidRevision => { /* ... */ },
///     ErrorCode::ManualStop => { /* ... */ },
///     ErrorCode::MissingBlueGreenDeploymentConfiguration => { /* ... */ },
///     ErrorCode::MissingElbInformation => { /* ... */ },
///     ErrorCode::MissingGithubToken => { /* ... */ },
///     ErrorCode::NoEc2Subscription => { /* ... */ },
///     ErrorCode::NoInstances => { /* ... */ },
///     ErrorCode::OverMaxInstances => { /* ... */ },
///     ErrorCode::ResourceLimitExceeded => { /* ... */ },
///     ErrorCode::RevisionMissing => { /* ... */ },
///     ErrorCode::Throttled => { /* ... */ },
///     ErrorCode::Timeout => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorCode::NewFeature` is defined.
/// Specifically, when `errorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    AgentIssue,
    #[allow(missing_docs)] // documentation missing in model
    AlarmActive,
    #[allow(missing_docs)] // documentation missing in model
    ApplicationMissing,
    #[allow(missing_docs)] // documentation missing in model
    AutoscalingValidationError,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    AutoScalingIamRolePermissions,
    #[allow(missing_docs)] // documentation missing in model
    CloudformationStackFailure,
    #[allow(missing_docs)] // documentation missing in model
    CodedeployResourceCannotBeFound,
    #[allow(missing_docs)] // documentation missing in model
    CustomerApplicationUnhealthy,
    #[allow(missing_docs)] // documentation missing in model
    DeploymentGroupMissing,
    #[allow(missing_docs)] // documentation missing in model
    EcsUpdateError,
    #[allow(missing_docs)] // documentation missing in model
    ElasticLoadBalancingInvalid,
    #[allow(missing_docs)] // documentation missing in model
    ElbInvalidInstance,
    #[allow(missing_docs)] // documentation missing in model
    HealthConstraints,
    #[allow(missing_docs)] // documentation missing in model
    HealthConstraintsInvalid,
    #[allow(missing_docs)] // documentation missing in model
    HookExecutionFailure,
    #[allow(missing_docs)] // documentation missing in model
    IamRoleMissing,
    #[allow(missing_docs)] // documentation missing in model
    IamRolePermissions,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidEcsService,
    #[allow(missing_docs)] // documentation missing in model
    InvalidLambdaConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    InvalidLambdaFunction,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRevision,
    #[allow(missing_docs)] // documentation missing in model
    ManualStop,
    #[allow(missing_docs)] // documentation missing in model
    MissingBlueGreenDeploymentConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    MissingElbInformation,
    #[allow(missing_docs)] // documentation missing in model
    MissingGithubToken,
    #[allow(missing_docs)] // documentation missing in model
    NoEc2Subscription,
    #[allow(missing_docs)] // documentation missing in model
    NoInstances,
    #[allow(missing_docs)] // documentation missing in model
    OverMaxInstances,
    #[allow(missing_docs)] // documentation missing in model
    ResourceLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    RevisionMissing,
    #[allow(missing_docs)] // documentation missing in model
    Throttled,
    #[allow(missing_docs)] // documentation missing in model
    Timeout,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "AGENT_ISSUE" => ErrorCode::AgentIssue,
            "ALARM_ACTIVE" => ErrorCode::AlarmActive,
            "APPLICATION_MISSING" => ErrorCode::ApplicationMissing,
            "AUTOSCALING_VALIDATION_ERROR" => ErrorCode::AutoscalingValidationError,
            "AUTO_SCALING_CONFIGURATION" => ErrorCode::AutoScalingConfiguration,
            "AUTO_SCALING_IAM_ROLE_PERMISSIONS" => ErrorCode::AutoScalingIamRolePermissions,
            "CLOUDFORMATION_STACK_FAILURE" => ErrorCode::CloudformationStackFailure,
            "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND" => ErrorCode::CodedeployResourceCannotBeFound,
            "CUSTOMER_APPLICATION_UNHEALTHY" => ErrorCode::CustomerApplicationUnhealthy,
            "DEPLOYMENT_GROUP_MISSING" => ErrorCode::DeploymentGroupMissing,
            "ECS_UPDATE_ERROR" => ErrorCode::EcsUpdateError,
            "ELASTIC_LOAD_BALANCING_INVALID" => ErrorCode::ElasticLoadBalancingInvalid,
            "ELB_INVALID_INSTANCE" => ErrorCode::ElbInvalidInstance,
            "HEALTH_CONSTRAINTS" => ErrorCode::HealthConstraints,
            "HEALTH_CONSTRAINTS_INVALID" => ErrorCode::HealthConstraintsInvalid,
            "HOOK_EXECUTION_FAILURE" => ErrorCode::HookExecutionFailure,
            "IAM_ROLE_MISSING" => ErrorCode::IamRoleMissing,
            "IAM_ROLE_PERMISSIONS" => ErrorCode::IamRolePermissions,
            "INTERNAL_ERROR" => ErrorCode::InternalError,
            "INVALID_ECS_SERVICE" => ErrorCode::InvalidEcsService,
            "INVALID_LAMBDA_CONFIGURATION" => ErrorCode::InvalidLambdaConfiguration,
            "INVALID_LAMBDA_FUNCTION" => ErrorCode::InvalidLambdaFunction,
            "INVALID_REVISION" => ErrorCode::InvalidRevision,
            "MANUAL_STOP" => ErrorCode::ManualStop,
            "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION" => {
                ErrorCode::MissingBlueGreenDeploymentConfiguration
            }
            "MISSING_ELB_INFORMATION" => ErrorCode::MissingElbInformation,
            "MISSING_GITHUB_TOKEN" => ErrorCode::MissingGithubToken,
            "NO_EC2_SUBSCRIPTION" => ErrorCode::NoEc2Subscription,
            "NO_INSTANCES" => ErrorCode::NoInstances,
            "OVER_MAX_INSTANCES" => ErrorCode::OverMaxInstances,
            "RESOURCE_LIMIT_EXCEEDED" => ErrorCode::ResourceLimitExceeded,
            "REVISION_MISSING" => ErrorCode::RevisionMissing,
            "THROTTLED" => ErrorCode::Throttled,
            "TIMEOUT" => ErrorCode::Timeout,
            other => ErrorCode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ErrorCode::from(s))
    }
}
impl ErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorCode::AgentIssue => "AGENT_ISSUE",
            ErrorCode::AlarmActive => "ALARM_ACTIVE",
            ErrorCode::ApplicationMissing => "APPLICATION_MISSING",
            ErrorCode::AutoscalingValidationError => "AUTOSCALING_VALIDATION_ERROR",
            ErrorCode::AutoScalingConfiguration => "AUTO_SCALING_CONFIGURATION",
            ErrorCode::AutoScalingIamRolePermissions => "AUTO_SCALING_IAM_ROLE_PERMISSIONS",
            ErrorCode::CloudformationStackFailure => "CLOUDFORMATION_STACK_FAILURE",
            ErrorCode::CodedeployResourceCannotBeFound => "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND",
            ErrorCode::CustomerApplicationUnhealthy => "CUSTOMER_APPLICATION_UNHEALTHY",
            ErrorCode::DeploymentGroupMissing => "DEPLOYMENT_GROUP_MISSING",
            ErrorCode::EcsUpdateError => "ECS_UPDATE_ERROR",
            ErrorCode::ElasticLoadBalancingInvalid => "ELASTIC_LOAD_BALANCING_INVALID",
            ErrorCode::ElbInvalidInstance => "ELB_INVALID_INSTANCE",
            ErrorCode::HealthConstraints => "HEALTH_CONSTRAINTS",
            ErrorCode::HealthConstraintsInvalid => "HEALTH_CONSTRAINTS_INVALID",
            ErrorCode::HookExecutionFailure => "HOOK_EXECUTION_FAILURE",
            ErrorCode::IamRoleMissing => "IAM_ROLE_MISSING",
            ErrorCode::IamRolePermissions => "IAM_ROLE_PERMISSIONS",
            ErrorCode::InternalError => "INTERNAL_ERROR",
            ErrorCode::InvalidEcsService => "INVALID_ECS_SERVICE",
            ErrorCode::InvalidLambdaConfiguration => "INVALID_LAMBDA_CONFIGURATION",
            ErrorCode::InvalidLambdaFunction => "INVALID_LAMBDA_FUNCTION",
            ErrorCode::InvalidRevision => "INVALID_REVISION",
            ErrorCode::ManualStop => "MANUAL_STOP",
            ErrorCode::MissingBlueGreenDeploymentConfiguration => {
                "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION"
            }
            ErrorCode::MissingElbInformation => "MISSING_ELB_INFORMATION",
            ErrorCode::MissingGithubToken => "MISSING_GITHUB_TOKEN",
            ErrorCode::NoEc2Subscription => "NO_EC2_SUBSCRIPTION",
            ErrorCode::NoInstances => "NO_INSTANCES",
            ErrorCode::OverMaxInstances => "OVER_MAX_INSTANCES",
            ErrorCode::ResourceLimitExceeded => "RESOURCE_LIMIT_EXCEEDED",
            ErrorCode::RevisionMissing => "REVISION_MISSING",
            ErrorCode::Throttled => "THROTTLED",
            ErrorCode::Timeout => "TIMEOUT",
            ErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AGENT_ISSUE",
            "ALARM_ACTIVE",
            "APPLICATION_MISSING",
            "AUTOSCALING_VALIDATION_ERROR",
            "AUTO_SCALING_CONFIGURATION",
            "AUTO_SCALING_IAM_ROLE_PERMISSIONS",
            "CLOUDFORMATION_STACK_FAILURE",
            "CODEDEPLOY_RESOURCE_CANNOT_BE_FOUND",
            "CUSTOMER_APPLICATION_UNHEALTHY",
            "DEPLOYMENT_GROUP_MISSING",
            "ECS_UPDATE_ERROR",
            "ELASTIC_LOAD_BALANCING_INVALID",
            "ELB_INVALID_INSTANCE",
            "HEALTH_CONSTRAINTS",
            "HEALTH_CONSTRAINTS_INVALID",
            "HOOK_EXECUTION_FAILURE",
            "IAM_ROLE_MISSING",
            "IAM_ROLE_PERMISSIONS",
            "INTERNAL_ERROR",
            "INVALID_ECS_SERVICE",
            "INVALID_LAMBDA_CONFIGURATION",
            "INVALID_LAMBDA_FUNCTION",
            "INVALID_REVISION",
            "MANUAL_STOP",
            "MISSING_BLUE_GREEN_DEPLOYMENT_CONFIGURATION",
            "MISSING_ELB_INFORMATION",
            "MISSING_GITHUB_TOKEN",
            "NO_EC2_SUBSCRIPTION",
            "NO_INSTANCES",
            "OVER_MAX_INSTANCES",
            "RESOURCE_LIMIT_EXCEEDED",
            "REVISION_MISSING",
            "THROTTLED",
            "TIMEOUT",
        ]
    }
}
impl AsRef<str> for ErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
