// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the location of an application revision.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RevisionLocation {
    /// <p>The type of application revision:</p>
    /// <ul>
    /// <li> <p>S3: An application revision stored in Amazon S3.</p> </li>
    /// <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li>
    /// <li> <p>String: A YAML-formatted or JSON-formatted string (Lambda deployments only).</p> </li>
    /// <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub revision_type: std::option::Option<crate::types::RevisionLocationType>,
    /// <p>Information about the location of a revision stored in Amazon S3. </p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<crate::types::S3Location>,
    /// <p>Information about the location of application artifacts stored in GitHub.</p>
    #[doc(hidden)]
    pub git_hub_location: std::option::Option<crate::types::GitHubLocation>,
    /// <p>Information about the location of an Lambda deployment revision stored as a RawString.</p>
    #[doc(hidden)]
    pub string: std::option::Option<crate::types::RawString>,
    /// <p> The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. </p>
    #[doc(hidden)]
    pub app_spec_content: std::option::Option<crate::types::AppSpecContent>,
}
impl RevisionLocation {
    /// <p>The type of application revision:</p>
    /// <ul>
    /// <li> <p>S3: An application revision stored in Amazon S3.</p> </li>
    /// <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li>
    /// <li> <p>String: A YAML-formatted or JSON-formatted string (Lambda deployments only).</p> </li>
    /// <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li>
    /// </ul>
    pub fn revision_type(&self) -> std::option::Option<&crate::types::RevisionLocationType> {
        self.revision_type.as_ref()
    }
    /// <p>Information about the location of a revision stored in Amazon S3. </p>
    pub fn s3_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.s3_location.as_ref()
    }
    /// <p>Information about the location of application artifacts stored in GitHub.</p>
    pub fn git_hub_location(&self) -> std::option::Option<&crate::types::GitHubLocation> {
        self.git_hub_location.as_ref()
    }
    /// <p>Information about the location of an Lambda deployment revision stored as a RawString.</p>
    pub fn string(&self) -> std::option::Option<&crate::types::RawString> {
        self.string.as_ref()
    }
    /// <p> The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. </p>
    pub fn app_spec_content(&self) -> std::option::Option<&crate::types::AppSpecContent> {
        self.app_spec_content.as_ref()
    }
}
impl RevisionLocation {
    /// Creates a new builder-style object to manufacture [`RevisionLocation`](crate::types::RevisionLocation).
    pub fn builder() -> crate::types::builders::RevisionLocationBuilder {
        crate::types::builders::RevisionLocationBuilder::default()
    }
}

/// A builder for [`RevisionLocation`](crate::types::RevisionLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RevisionLocationBuilder {
    pub(crate) revision_type: std::option::Option<crate::types::RevisionLocationType>,
    pub(crate) s3_location: std::option::Option<crate::types::S3Location>,
    pub(crate) git_hub_location: std::option::Option<crate::types::GitHubLocation>,
    pub(crate) string: std::option::Option<crate::types::RawString>,
    pub(crate) app_spec_content: std::option::Option<crate::types::AppSpecContent>,
}
impl RevisionLocationBuilder {
    /// <p>The type of application revision:</p>
    /// <ul>
    /// <li> <p>S3: An application revision stored in Amazon S3.</p> </li>
    /// <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li>
    /// <li> <p>String: A YAML-formatted or JSON-formatted string (Lambda deployments only).</p> </li>
    /// <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li>
    /// </ul>
    pub fn revision_type(mut self, input: crate::types::RevisionLocationType) -> Self {
        self.revision_type = Some(input);
        self
    }
    /// <p>The type of application revision:</p>
    /// <ul>
    /// <li> <p>S3: An application revision stored in Amazon S3.</p> </li>
    /// <li> <p>GitHub: An application revision stored in GitHub (EC2/On-premises deployments only).</p> </li>
    /// <li> <p>String: A YAML-formatted or JSON-formatted string (Lambda deployments only).</p> </li>
    /// <li> <p>AppSpecContent: An <code>AppSpecContent</code> object that contains the contents of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML stored as a RawString.</p> </li>
    /// </ul>
    pub fn set_revision_type(
        mut self,
        input: std::option::Option<crate::types::RevisionLocationType>,
    ) -> Self {
        self.revision_type = input;
        self
    }
    /// <p>Information about the location of a revision stored in Amazon S3. </p>
    pub fn s3_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_location = Some(input);
        self
    }
    /// <p>Information about the location of a revision stored in Amazon S3. </p>
    pub fn set_s3_location(mut self, input: std::option::Option<crate::types::S3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>Information about the location of application artifacts stored in GitHub.</p>
    pub fn git_hub_location(mut self, input: crate::types::GitHubLocation) -> Self {
        self.git_hub_location = Some(input);
        self
    }
    /// <p>Information about the location of application artifacts stored in GitHub.</p>
    pub fn set_git_hub_location(
        mut self,
        input: std::option::Option<crate::types::GitHubLocation>,
    ) -> Self {
        self.git_hub_location = input;
        self
    }
    /// <p>Information about the location of an Lambda deployment revision stored as a RawString.</p>
    pub fn string(mut self, input: crate::types::RawString) -> Self {
        self.string = Some(input);
        self
    }
    /// <p>Information about the location of an Lambda deployment revision stored as a RawString.</p>
    pub fn set_string(mut self, input: std::option::Option<crate::types::RawString>) -> Self {
        self.string = input;
        self
    }
    /// <p> The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. </p>
    pub fn app_spec_content(mut self, input: crate::types::AppSpecContent) -> Self {
        self.app_spec_content = Some(input);
        self
    }
    /// <p> The content of an AppSpec file for an Lambda or Amazon ECS deployment. The content is formatted as JSON or YAML and stored as a RawString. </p>
    pub fn set_app_spec_content(
        mut self,
        input: std::option::Option<crate::types::AppSpecContent>,
    ) -> Self {
        self.app_spec_content = input;
        self
    }
    /// Consumes the builder and constructs a [`RevisionLocation`](crate::types::RevisionLocation).
    pub fn build(self) -> crate::types::RevisionLocation {
        crate::types::RevisionLocation {
            revision_type: self.revision_type,
            s3_location: self.s3_location,
            git_hub_location: self.git_hub_location,
            string: self.string,
            app_spec_content: self.app_spec_content,
        }
    }
}
