// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about whether instances in the original environment are terminated when a blue/green deployment is successful. <code>BlueInstanceTerminationOption</code> does not apply to Lambda deployments. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BlueInstanceTerminationOption {
    /// <p>The action to take on instances in the original environment after a successful blue/green deployment.</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li>
    /// <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::InstanceAction>,
    /// <p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p>
    /// <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p>
    /// <p> The maximum setting is 2880 minutes (2 days). </p>
    #[doc(hidden)]
    pub termination_wait_time_in_minutes: i32,
}
impl BlueInstanceTerminationOption {
    /// <p>The action to take on instances in the original environment after a successful blue/green deployment.</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li>
    /// <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li>
    /// </ul>
    pub fn action(&self) -> std::option::Option<&crate::types::InstanceAction> {
        self.action.as_ref()
    }
    /// <p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p>
    /// <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p>
    /// <p> The maximum setting is 2880 minutes (2 days). </p>
    pub fn termination_wait_time_in_minutes(&self) -> i32 {
        self.termination_wait_time_in_minutes
    }
}
impl BlueInstanceTerminationOption {
    /// Creates a new builder-style object to manufacture [`BlueInstanceTerminationOption`](crate::types::BlueInstanceTerminationOption).
    pub fn builder() -> crate::types::builders::BlueInstanceTerminationOptionBuilder {
        crate::types::builders::BlueInstanceTerminationOptionBuilder::default()
    }
}

/// A builder for [`BlueInstanceTerminationOption`](crate::types::BlueInstanceTerminationOption).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BlueInstanceTerminationOptionBuilder {
    pub(crate) action: std::option::Option<crate::types::InstanceAction>,
    pub(crate) termination_wait_time_in_minutes: std::option::Option<i32>,
}
impl BlueInstanceTerminationOptionBuilder {
    /// <p>The action to take on instances in the original environment after a successful blue/green deployment.</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li>
    /// <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li>
    /// </ul>
    pub fn action(mut self, input: crate::types::InstanceAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>The action to take on instances in the original environment after a successful blue/green deployment.</p>
    /// <ul>
    /// <li> <p> <code>TERMINATE</code>: Instances are terminated after a specified wait time.</p> </li>
    /// <li> <p> <code>KEEP_ALIVE</code>: Instances are left running after they are deregistered from the load balancer and removed from the deployment group.</p> </li>
    /// </ul>
    pub fn set_action(mut self, input: std::option::Option<crate::types::InstanceAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p>
    /// <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p>
    /// <p> The maximum setting is 2880 minutes (2 days). </p>
    pub fn termination_wait_time_in_minutes(mut self, input: i32) -> Self {
        self.termination_wait_time_in_minutes = Some(input);
        self
    }
    /// <p>For an Amazon EC2 deployment, the number of minutes to wait after a successful blue/green deployment before terminating instances from the original environment.</p>
    /// <p> For an Amazon ECS deployment, the number of minutes before deleting the original (blue) task set. During an Amazon ECS deployment, CodeDeploy shifts traffic from the original (blue) task set to a replacement (green) task set. </p>
    /// <p> The maximum setting is 2880 minutes (2 days). </p>
    pub fn set_termination_wait_time_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.termination_wait_time_in_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`BlueInstanceTerminationOption`](crate::types::BlueInstanceTerminationOption).
    pub fn build(self) -> crate::types::BlueInstanceTerminationOption {
        crate::types::BlueInstanceTerminationOption {
            action: self.action,
            termination_wait_time_in_minutes: self
                .termination_wait_time_in_minutes
                .unwrap_or_default(),
        }
    }
}
