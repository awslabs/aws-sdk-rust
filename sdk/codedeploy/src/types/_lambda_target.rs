// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the target Lambda function during an Lambda deployment. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaTarget {
    /// <p> The unique ID of a deployment. </p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p> The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. </p>
    #[doc(hidden)]
    pub target_id: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p> The status an Lambda deployment's target Lambda function. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TargetStatus>,
    /// <p> The date and time when the target Lambda function was updated by a deployment. </p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The lifecycle events of the deployment to this target Lambda function. </p>
    #[doc(hidden)]
    pub lifecycle_events: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    /// <p> A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. </p>
    #[doc(hidden)]
    pub lambda_function_info: std::option::Option<crate::types::LambdaFunctionInfo>,
}
impl LambdaTarget {
    /// <p> The unique ID of a deployment. </p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p> The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. </p>
    pub fn target_id(&self) -> std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p> The status an Lambda deployment's target Lambda function. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::TargetStatus> {
        self.status.as_ref()
    }
    /// <p> The date and time when the target Lambda function was updated by a deployment. </p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p> The lifecycle events of the deployment to this target Lambda function. </p>
    pub fn lifecycle_events(&self) -> std::option::Option<&[crate::types::LifecycleEvent]> {
        self.lifecycle_events.as_deref()
    }
    /// <p> A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. </p>
    pub fn lambda_function_info(&self) -> std::option::Option<&crate::types::LambdaFunctionInfo> {
        self.lambda_function_info.as_ref()
    }
}
impl LambdaTarget {
    /// Creates a new builder-style object to manufacture [`LambdaTarget`](crate::types::LambdaTarget).
    pub fn builder() -> crate::types::builders::LambdaTargetBuilder {
        crate::types::builders::LambdaTargetBuilder::default()
    }
}

/// A builder for [`LambdaTarget`](crate::types::LambdaTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaTargetBuilder {
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) target_id: std::option::Option<std::string::String>,
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TargetStatus>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) lifecycle_events: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    pub(crate) lambda_function_info: std::option::Option<crate::types::LambdaFunctionInfo>,
}
impl LambdaTargetBuilder {
    /// <p> The unique ID of a deployment. </p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p> The unique ID of a deployment. </p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p> The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. </p>
    pub fn target_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_id = Some(input.into());
        self
    }
    /// <p> The unique ID of a deployment target that has a type of <code>lambdaTarget</code>. </p>
    pub fn set_target_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the target. </p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p> The status an Lambda deployment's target Lambda function. </p>
    pub fn status(mut self, input: crate::types::TargetStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The status an Lambda deployment's target Lambda function. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::TargetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The date and time when the target Lambda function was updated by a deployment. </p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p> The date and time when the target Lambda function was updated by a deployment. </p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    /// Appends an item to `lifecycle_events`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_events`](Self::set_lifecycle_events).
    ///
    /// <p> The lifecycle events of the deployment to this target Lambda function. </p>
    pub fn lifecycle_events(mut self, input: crate::types::LifecycleEvent) -> Self {
        let mut v = self.lifecycle_events.unwrap_or_default();
        v.push(input);
        self.lifecycle_events = Some(v);
        self
    }
    /// <p> The lifecycle events of the deployment to this target Lambda function. </p>
    pub fn set_lifecycle_events(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    ) -> Self {
        self.lifecycle_events = input;
        self
    }
    /// <p> A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. </p>
    pub fn lambda_function_info(mut self, input: crate::types::LambdaFunctionInfo) -> Self {
        self.lambda_function_info = Some(input);
        self
    }
    /// <p> A <code>LambdaFunctionInfo</code> object that describes a target Lambda function. </p>
    pub fn set_lambda_function_info(
        mut self,
        input: std::option::Option<crate::types::LambdaFunctionInfo>,
    ) -> Self {
        self.lambda_function_info = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaTarget`](crate::types::LambdaTarget).
    pub fn build(self) -> crate::types::LambdaTarget {
        crate::types::LambdaTarget {
            deployment_id: self.deployment_id,
            target_id: self.target_id,
            target_arn: self.target_arn,
            status: self.status,
            last_updated_at: self.last_updated_at,
            lifecycle_events: self.lifecycle_events,
            lambda_function_info: self.lambda_function_info,
        }
    }
}
