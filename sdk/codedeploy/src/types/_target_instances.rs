// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the instances to be used in the replacement environment in a blue/green deployment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TargetInstances {
    /// <p>The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>.</p>
    #[doc(hidden)]
    pub tag_filters: std::option::Option<std::vec::Vec<crate::types::Ec2TagFilter>>,
    /// <p>The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.</p>
    #[doc(hidden)]
    pub auto_scaling_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>.</p>
    #[doc(hidden)]
    pub ec2_tag_set: std::option::Option<crate::types::Ec2TagSet>,
}
impl TargetInstances {
    /// <p>The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>.</p>
    pub fn tag_filters(&self) -> std::option::Option<&[crate::types::Ec2TagFilter]> {
        self.tag_filters.as_deref()
    }
    /// <p>The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.</p>
    pub fn auto_scaling_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.auto_scaling_groups.as_deref()
    }
    /// <p>Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>.</p>
    pub fn ec2_tag_set(&self) -> std::option::Option<&crate::types::Ec2TagSet> {
        self.ec2_tag_set.as_ref()
    }
}
impl TargetInstances {
    /// Creates a new builder-style object to manufacture [`TargetInstances`](crate::types::TargetInstances).
    pub fn builder() -> crate::types::builders::TargetInstancesBuilder {
        crate::types::builders::TargetInstancesBuilder::default()
    }
}

/// A builder for [`TargetInstances`](crate::types::TargetInstances).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TargetInstancesBuilder {
    pub(crate) tag_filters: std::option::Option<std::vec::Vec<crate::types::Ec2TagFilter>>,
    pub(crate) auto_scaling_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) ec2_tag_set: std::option::Option<crate::types::Ec2TagSet>,
}
impl TargetInstancesBuilder {
    /// Appends an item to `tag_filters`.
    ///
    /// To override the contents of this collection use [`set_tag_filters`](Self::set_tag_filters).
    ///
    /// <p>The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>.</p>
    pub fn tag_filters(mut self, input: crate::types::Ec2TagFilter) -> Self {
        let mut v = self.tag_filters.unwrap_or_default();
        v.push(input);
        self.tag_filters = Some(v);
        self
    }
    /// <p>The tag filter key, type, and value used to identify Amazon EC2 instances in a replacement environment for a blue/green deployment. Cannot be used in the same call as <code>ec2TagSet</code>.</p>
    pub fn set_tag_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Ec2TagFilter>>,
    ) -> Self {
        self.tag_filters = input;
        self
    }
    /// Appends an item to `auto_scaling_groups`.
    ///
    /// To override the contents of this collection use [`set_auto_scaling_groups`](Self::set_auto_scaling_groups).
    ///
    /// <p>The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.</p>
    pub fn auto_scaling_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.auto_scaling_groups.unwrap_or_default();
        v.push(input.into());
        self.auto_scaling_groups = Some(v);
        self
    }
    /// <p>The names of one or more Auto Scaling groups to identify a replacement environment for a blue/green deployment.</p>
    pub fn set_auto_scaling_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.auto_scaling_groups = input;
        self
    }
    /// <p>Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>.</p>
    pub fn ec2_tag_set(mut self, input: crate::types::Ec2TagSet) -> Self {
        self.ec2_tag_set = Some(input);
        self
    }
    /// <p>Information about the groups of Amazon EC2 instance tags that an instance must be identified by in order for it to be included in the replacement environment for a blue/green deployment. Cannot be used in the same call as <code>tagFilters</code>.</p>
    pub fn set_ec2_tag_set(mut self, input: std::option::Option<crate::types::Ec2TagSet>) -> Self {
        self.ec2_tag_set = input;
        self
    }
    /// Consumes the builder and constructs a [`TargetInstances`](crate::types::TargetInstances).
    pub fn build(self) -> crate::types::TargetInstances {
        crate::types::TargetInstances {
            tag_filters: self.tag_filters,
            auto_scaling_groups: self.auto_scaling_groups,
            ec2_tag_set: self.ec2_tag_set,
        }
    }
}
