// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a Lambda function specified in a deployment. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LambdaFunctionInfo {
    /// <p> The name of a Lambda function. </p>
    #[doc(hidden)]
    pub function_name: std::option::Option<std::string::String>,
    /// <p> The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Lambda Function Aliases</a> in the <i>Lambda Developer Guide</i>.</p>
    #[doc(hidden)]
    pub function_alias: std::option::Option<std::string::String>,
    /// <p> The version of a Lambda function that production traffic points to. </p>
    #[doc(hidden)]
    pub current_version: std::option::Option<std::string::String>,
    /// <p> The version of a Lambda function that production traffic points to after the Lambda function is deployed. </p>
    #[doc(hidden)]
    pub target_version: std::option::Option<std::string::String>,
    /// <p> The percentage of production traffic that the target version of a Lambda function receives. </p>
    #[doc(hidden)]
    pub target_version_weight: f64,
}
impl LambdaFunctionInfo {
    /// <p> The name of a Lambda function. </p>
    pub fn function_name(&self) -> std::option::Option<&str> {
        self.function_name.as_deref()
    }
    /// <p> The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Lambda Function Aliases</a> in the <i>Lambda Developer Guide</i>.</p>
    pub fn function_alias(&self) -> std::option::Option<&str> {
        self.function_alias.as_deref()
    }
    /// <p> The version of a Lambda function that production traffic points to. </p>
    pub fn current_version(&self) -> std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p> The version of a Lambda function that production traffic points to after the Lambda function is deployed. </p>
    pub fn target_version(&self) -> std::option::Option<&str> {
        self.target_version.as_deref()
    }
    /// <p> The percentage of production traffic that the target version of a Lambda function receives. </p>
    pub fn target_version_weight(&self) -> f64 {
        self.target_version_weight
    }
}
impl LambdaFunctionInfo {
    /// Creates a new builder-style object to manufacture [`LambdaFunctionInfo`](crate::types::LambdaFunctionInfo).
    pub fn builder() -> crate::types::builders::LambdaFunctionInfoBuilder {
        crate::types::builders::LambdaFunctionInfoBuilder::default()
    }
}

/// A builder for [`LambdaFunctionInfo`](crate::types::LambdaFunctionInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LambdaFunctionInfoBuilder {
    pub(crate) function_name: std::option::Option<std::string::String>,
    pub(crate) function_alias: std::option::Option<std::string::String>,
    pub(crate) current_version: std::option::Option<std::string::String>,
    pub(crate) target_version: std::option::Option<std::string::String>,
    pub(crate) target_version_weight: std::option::Option<f64>,
}
impl LambdaFunctionInfoBuilder {
    /// <p> The name of a Lambda function. </p>
    pub fn function_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_name = Some(input.into());
        self
    }
    /// <p> The name of a Lambda function. </p>
    pub fn set_function_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function_name = input;
        self
    }
    /// <p> The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Lambda Function Aliases</a> in the <i>Lambda Developer Guide</i>.</p>
    pub fn function_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.function_alias = Some(input.into());
        self
    }
    /// <p> The alias of a Lambda function. For more information, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/aliases-intro.html">Lambda Function Aliases</a> in the <i>Lambda Developer Guide</i>.</p>
    pub fn set_function_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.function_alias = input;
        self
    }
    /// <p> The version of a Lambda function that production traffic points to. </p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_version = Some(input.into());
        self
    }
    /// <p> The version of a Lambda function that production traffic points to. </p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p> The version of a Lambda function that production traffic points to after the Lambda function is deployed. </p>
    pub fn target_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_version = Some(input.into());
        self
    }
    /// <p> The version of a Lambda function that production traffic points to after the Lambda function is deployed. </p>
    pub fn set_target_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_version = input;
        self
    }
    /// <p> The percentage of production traffic that the target version of a Lambda function receives. </p>
    pub fn target_version_weight(mut self, input: f64) -> Self {
        self.target_version_weight = Some(input);
        self
    }
    /// <p> The percentage of production traffic that the target version of a Lambda function receives. </p>
    pub fn set_target_version_weight(mut self, input: std::option::Option<f64>) -> Self {
        self.target_version_weight = input;
        self
    }
    /// Consumes the builder and constructs a [`LambdaFunctionInfo`](crate::types::LambdaFunctionInfo).
    pub fn build(self) -> crate::types::LambdaFunctionInfo {
        crate::types::LambdaFunctionInfo {
            function_name: self.function_name,
            function_alias: self.function_alias,
            current_version: self.current_version,
            target_version: self.target_version,
            target_version_weight: self.target_version_weight.unwrap_or_default(),
        }
    }
}
