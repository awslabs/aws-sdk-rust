// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about alarms associated with a deployment or deployment group.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlarmConfiguration {
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    pub enabled: bool,
    /// <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// </ul>
    pub ignore_poll_alarm_failure: bool,
    /// <p>A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.</p>
    pub alarms: ::std::option::Option<::std::vec::Vec<crate::types::Alarm>>,
}
impl AlarmConfiguration {
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// </ul>
    pub fn ignore_poll_alarm_failure(&self) -> bool {
        self.ignore_poll_alarm_failure
    }
    /// <p>A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.alarms.is_none()`.
    pub fn alarms(&self) -> &[crate::types::Alarm] {
        self.alarms.as_deref().unwrap_or_default()
    }
}
impl AlarmConfiguration {
    /// Creates a new builder-style object to manufacture [`AlarmConfiguration`](crate::types::AlarmConfiguration).
    pub fn builder() -> crate::types::builders::AlarmConfigurationBuilder {
        crate::types::builders::AlarmConfigurationBuilder::default()
    }
}

/// A builder for [`AlarmConfiguration`](crate::types::AlarmConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AlarmConfigurationBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) ignore_poll_alarm_failure: ::std::option::Option<bool>,
    pub(crate) alarms: ::std::option::Option<::std::vec::Vec<crate::types::Alarm>>,
}
impl AlarmConfigurationBuilder {
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the alarm configuration is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// </ul>
    pub fn ignore_poll_alarm_failure(mut self, input: bool) -> Self {
        self.ignore_poll_alarm_failure = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// </ul>
    pub fn set_ignore_poll_alarm_failure(mut self, input: ::std::option::Option<bool>) -> Self {
        self.ignore_poll_alarm_failure = input;
        self
    }
    /// <p>Indicates whether a deployment should continue if information about the current state of alarms cannot be retrieved from Amazon CloudWatch. The default value is false.</p>
    /// <ul>
    /// <li> <p> <code>true</code>: The deployment proceeds even if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// <li> <p> <code>false</code>: The deployment stops if alarm status information can't be retrieved from Amazon CloudWatch.</p> </li>
    /// </ul>
    pub fn get_ignore_poll_alarm_failure(&self) -> &::std::option::Option<bool> {
        &self.ignore_poll_alarm_failure
    }
    /// Appends an item to `alarms`.
    ///
    /// To override the contents of this collection use [`set_alarms`](Self::set_alarms).
    ///
    /// <p>A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.</p>
    pub fn alarms(mut self, input: crate::types::Alarm) -> Self {
        let mut v = self.alarms.unwrap_or_default();
        v.push(input);
        self.alarms = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.</p>
    pub fn set_alarms(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Alarm>>) -> Self {
        self.alarms = input;
        self
    }
    /// <p>A list of alarms configured for the deployment or deployment group. A maximum of 10 alarms can be added.</p>
    pub fn get_alarms(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Alarm>> {
        &self.alarms
    }
    /// Consumes the builder and constructs a [`AlarmConfiguration`](crate::types::AlarmConfiguration).
    pub fn build(self) -> crate::types::AlarmConfiguration {
        crate::types::AlarmConfiguration {
            enabled: self.enabled.unwrap_or_default(),
            ignore_poll_alarm_failure: self.ignore_poll_alarm_failure.unwrap_or_default(),
            alarms: self.alarms,
        }
    }
}
