// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the deployment status of the instances in the deployment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeploymentOverview {
    /// <p>The number of instances in the deployment in a pending state.</p>
    #[doc(hidden)]
    pub pending: i64,
    /// <p>The number of instances in which the deployment is in progress.</p>
    #[doc(hidden)]
    pub in_progress: i64,
    /// <p>The number of instances in the deployment to which revisions have been successfully deployed.</p>
    #[doc(hidden)]
    pub succeeded: i64,
    /// <p>The number of instances in the deployment in a failed state.</p>
    #[doc(hidden)]
    pub failed: i64,
    /// <p>The number of instances in the deployment in a skipped state.</p>
    #[doc(hidden)]
    pub skipped: i64,
    /// <p>The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.</p>
    #[doc(hidden)]
    pub ready: i64,
}
impl DeploymentOverview {
    /// <p>The number of instances in the deployment in a pending state.</p>
    pub fn pending(&self) -> i64 {
        self.pending
    }
    /// <p>The number of instances in which the deployment is in progress.</p>
    pub fn in_progress(&self) -> i64 {
        self.in_progress
    }
    /// <p>The number of instances in the deployment to which revisions have been successfully deployed.</p>
    pub fn succeeded(&self) -> i64 {
        self.succeeded
    }
    /// <p>The number of instances in the deployment in a failed state.</p>
    pub fn failed(&self) -> i64 {
        self.failed
    }
    /// <p>The number of instances in the deployment in a skipped state.</p>
    pub fn skipped(&self) -> i64 {
        self.skipped
    }
    /// <p>The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.</p>
    pub fn ready(&self) -> i64 {
        self.ready
    }
}
impl DeploymentOverview {
    /// Creates a new builder-style object to manufacture [`DeploymentOverview`](crate::types::DeploymentOverview).
    pub fn builder() -> crate::types::builders::DeploymentOverviewBuilder {
        crate::types::builders::DeploymentOverviewBuilder::default()
    }
}

/// A builder for [`DeploymentOverview`](crate::types::DeploymentOverview).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeploymentOverviewBuilder {
    pub(crate) pending: std::option::Option<i64>,
    pub(crate) in_progress: std::option::Option<i64>,
    pub(crate) succeeded: std::option::Option<i64>,
    pub(crate) failed: std::option::Option<i64>,
    pub(crate) skipped: std::option::Option<i64>,
    pub(crate) ready: std::option::Option<i64>,
}
impl DeploymentOverviewBuilder {
    /// <p>The number of instances in the deployment in a pending state.</p>
    pub fn pending(mut self, input: i64) -> Self {
        self.pending = Some(input);
        self
    }
    /// <p>The number of instances in the deployment in a pending state.</p>
    pub fn set_pending(mut self, input: std::option::Option<i64>) -> Self {
        self.pending = input;
        self
    }
    /// <p>The number of instances in which the deployment is in progress.</p>
    pub fn in_progress(mut self, input: i64) -> Self {
        self.in_progress = Some(input);
        self
    }
    /// <p>The number of instances in which the deployment is in progress.</p>
    pub fn set_in_progress(mut self, input: std::option::Option<i64>) -> Self {
        self.in_progress = input;
        self
    }
    /// <p>The number of instances in the deployment to which revisions have been successfully deployed.</p>
    pub fn succeeded(mut self, input: i64) -> Self {
        self.succeeded = Some(input);
        self
    }
    /// <p>The number of instances in the deployment to which revisions have been successfully deployed.</p>
    pub fn set_succeeded(mut self, input: std::option::Option<i64>) -> Self {
        self.succeeded = input;
        self
    }
    /// <p>The number of instances in the deployment in a failed state.</p>
    pub fn failed(mut self, input: i64) -> Self {
        self.failed = Some(input);
        self
    }
    /// <p>The number of instances in the deployment in a failed state.</p>
    pub fn set_failed(mut self, input: std::option::Option<i64>) -> Self {
        self.failed = input;
        self
    }
    /// <p>The number of instances in the deployment in a skipped state.</p>
    pub fn skipped(mut self, input: i64) -> Self {
        self.skipped = Some(input);
        self
    }
    /// <p>The number of instances in the deployment in a skipped state.</p>
    pub fn set_skipped(mut self, input: std::option::Option<i64>) -> Self {
        self.skipped = input;
        self
    }
    /// <p>The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.</p>
    pub fn ready(mut self, input: i64) -> Self {
        self.ready = Some(input);
        self
    }
    /// <p>The number of instances in a replacement environment ready to receive traffic in a blue/green deployment.</p>
    pub fn set_ready(mut self, input: std::option::Option<i64>) -> Self {
        self.ready = input;
        self
    }
    /// Consumes the builder and constructs a [`DeploymentOverview`](crate::types::DeploymentOverview).
    pub fn build(self) -> crate::types::DeploymentOverview {
        crate::types::DeploymentOverview {
            pending: self.pending.unwrap_or_default(),
            in_progress: self.in_progress.unwrap_or_default(),
            succeeded: self.succeeded.unwrap_or_default(),
            failed: self.failed.unwrap_or_default(),
            skipped: self.skipped.unwrap_or_default(),
            ready: self.ready.unwrap_or_default(),
        }
    }
}
