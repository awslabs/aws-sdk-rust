// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about notification triggers for the deployment group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TriggerConfig {
    /// <p>The name of the notification trigger.</p>
    #[doc(hidden)]
    pub trigger_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.</p>
    #[doc(hidden)]
    pub trigger_target_arn: std::option::Option<std::string::String>,
    /// <p>The event type or types for which notifications are triggered.</p>
    #[doc(hidden)]
    pub trigger_events: std::option::Option<std::vec::Vec<crate::types::TriggerEventType>>,
}
impl TriggerConfig {
    /// <p>The name of the notification trigger.</p>
    pub fn trigger_name(&self) -> std::option::Option<&str> {
        self.trigger_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.</p>
    pub fn trigger_target_arn(&self) -> std::option::Option<&str> {
        self.trigger_target_arn.as_deref()
    }
    /// <p>The event type or types for which notifications are triggered.</p>
    pub fn trigger_events(&self) -> std::option::Option<&[crate::types::TriggerEventType]> {
        self.trigger_events.as_deref()
    }
}
impl TriggerConfig {
    /// Creates a new builder-style object to manufacture [`TriggerConfig`](crate::types::TriggerConfig).
    pub fn builder() -> crate::types::builders::TriggerConfigBuilder {
        crate::types::builders::TriggerConfigBuilder::default()
    }
}

/// A builder for [`TriggerConfig`](crate::types::TriggerConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TriggerConfigBuilder {
    pub(crate) trigger_name: std::option::Option<std::string::String>,
    pub(crate) trigger_target_arn: std::option::Option<std::string::String>,
    pub(crate) trigger_events: std::option::Option<std::vec::Vec<crate::types::TriggerEventType>>,
}
impl TriggerConfigBuilder {
    /// <p>The name of the notification trigger.</p>
    pub fn trigger_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.trigger_name = Some(input.into());
        self
    }
    /// <p>The name of the notification trigger.</p>
    pub fn set_trigger_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trigger_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.</p>
    pub fn trigger_target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.trigger_target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Simple Notification Service topic through which notifications about deployment or instance events are sent.</p>
    pub fn set_trigger_target_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.trigger_target_arn = input;
        self
    }
    /// Appends an item to `trigger_events`.
    ///
    /// To override the contents of this collection use [`set_trigger_events`](Self::set_trigger_events).
    ///
    /// <p>The event type or types for which notifications are triggered.</p>
    pub fn trigger_events(mut self, input: crate::types::TriggerEventType) -> Self {
        let mut v = self.trigger_events.unwrap_or_default();
        v.push(input);
        self.trigger_events = Some(v);
        self
    }
    /// <p>The event type or types for which notifications are triggered.</p>
    pub fn set_trigger_events(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TriggerEventType>>,
    ) -> Self {
        self.trigger_events = input;
        self
    }
    /// Consumes the builder and constructs a [`TriggerConfig`](crate::types::TriggerConfig).
    pub fn build(self) -> crate::types::TriggerConfig {
        crate::types::TriggerConfig {
            trigger_name: self.trigger_name,
            trigger_target_arn: self.trigger_target_arn,
            trigger_events: self.trigger_events,
        }
    }
}
