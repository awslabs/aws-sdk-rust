// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about the target to be updated by an CloudFormation blue/green deployment. This target type is used for all deployments initiated by a CloudFormation stack update.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudFormationTarget {
    /// <p>The unique ID of an CloudFormation blue/green deployment.</p>
    pub deployment_id: ::std::option::Option<::std::string::String>,
    /// <p> The unique ID of a deployment target that has a type of&nbsp;<code>CloudFormationTarget</code>. </p>
    pub target_id: ::std::option::Option<::std::string::String>,
    /// <p> The date and time when the target application was updated by an CloudFormation blue/green deployment. </p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The lifecycle events of the CloudFormation blue/green deployment to this target application. </p>
    pub lifecycle_events: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleEvent>>,
    /// <p> The status of an CloudFormation blue/green deployment's target application. </p>
    pub status: ::std::option::Option<crate::types::TargetStatus>,
    /// <p>The resource type for the CloudFormation blue/green deployment.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.</p>
    pub target_version_weight: f64,
}
impl CloudFormationTarget {
    /// <p>The unique ID of an CloudFormation blue/green deployment.</p>
    pub fn deployment_id(&self) -> ::std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p> The unique ID of a deployment target that has a type of&nbsp;<code>CloudFormationTarget</code>. </p>
    pub fn target_id(&self) -> ::std::option::Option<&str> {
        self.target_id.as_deref()
    }
    /// <p> The date and time when the target application was updated by an CloudFormation blue/green deployment. </p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p> The lifecycle events of the CloudFormation blue/green deployment to this target application. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.lifecycle_events.is_none()`.
    pub fn lifecycle_events(&self) -> &[crate::types::LifecycleEvent] {
        self.lifecycle_events.as_deref().unwrap_or_default()
    }
    /// <p> The status of an CloudFormation blue/green deployment's target application. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TargetStatus> {
        self.status.as_ref()
    }
    /// <p>The resource type for the CloudFormation blue/green deployment.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.</p>
    pub fn target_version_weight(&self) -> f64 {
        self.target_version_weight
    }
}
impl CloudFormationTarget {
    /// Creates a new builder-style object to manufacture [`CloudFormationTarget`](crate::types::CloudFormationTarget).
    pub fn builder() -> crate::types::builders::CloudFormationTargetBuilder {
        crate::types::builders::CloudFormationTargetBuilder::default()
    }
}

/// A builder for [`CloudFormationTarget`](crate::types::CloudFormationTarget).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudFormationTargetBuilder {
    pub(crate) deployment_id: ::std::option::Option<::std::string::String>,
    pub(crate) target_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) lifecycle_events: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleEvent>>,
    pub(crate) status: ::std::option::Option<crate::types::TargetStatus>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) target_version_weight: ::std::option::Option<f64>,
}
impl CloudFormationTargetBuilder {
    /// <p>The unique ID of an CloudFormation blue/green deployment.</p>
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of an CloudFormation blue/green deployment.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The unique ID of an CloudFormation blue/green deployment.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_id
    }
    /// <p> The unique ID of a deployment target that has a type of&nbsp;<code>CloudFormationTarget</code>. </p>
    pub fn target_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique ID of a deployment target that has a type of&nbsp;<code>CloudFormationTarget</code>. </p>
    pub fn set_target_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_id = input;
        self
    }
    /// <p> The unique ID of a deployment target that has a type of&nbsp;<code>CloudFormationTarget</code>. </p>
    pub fn get_target_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_id
    }
    /// <p> The date and time when the target application was updated by an CloudFormation blue/green deployment. </p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> The date and time when the target application was updated by an CloudFormation blue/green deployment. </p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p> The date and time when the target application was updated by an CloudFormation blue/green deployment. </p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// Appends an item to `lifecycle_events`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_events`](Self::set_lifecycle_events).
    ///
    /// <p> The lifecycle events of the CloudFormation blue/green deployment to this target application. </p>
    pub fn lifecycle_events(mut self, input: crate::types::LifecycleEvent) -> Self {
        let mut v = self.lifecycle_events.unwrap_or_default();
        v.push(input);
        self.lifecycle_events = ::std::option::Option::Some(v);
        self
    }
    /// <p> The lifecycle events of the CloudFormation blue/green deployment to this target application. </p>
    pub fn set_lifecycle_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LifecycleEvent>>) -> Self {
        self.lifecycle_events = input;
        self
    }
    /// <p> The lifecycle events of the CloudFormation blue/green deployment to this target application. </p>
    pub fn get_lifecycle_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LifecycleEvent>> {
        &self.lifecycle_events
    }
    /// <p> The status of an CloudFormation blue/green deployment's target application. </p>
    pub fn status(mut self, input: crate::types::TargetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of an CloudFormation blue/green deployment's target application. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TargetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> The status of an CloudFormation blue/green deployment's target application. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TargetStatus> {
        &self.status
    }
    /// <p>The resource type for the CloudFormation blue/green deployment.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type for the CloudFormation blue/green deployment.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type for the CloudFormation blue/green deployment.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.</p>
    pub fn target_version_weight(mut self, input: f64) -> Self {
        self.target_version_weight = ::std::option::Option::Some(input);
        self
    }
    /// <p>The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.</p>
    pub fn set_target_version_weight(mut self, input: ::std::option::Option<f64>) -> Self {
        self.target_version_weight = input;
        self
    }
    /// <p>The percentage of production traffic that the target version of an CloudFormation blue/green deployment receives.</p>
    pub fn get_target_version_weight(&self) -> &::std::option::Option<f64> {
        &self.target_version_weight
    }
    /// Consumes the builder and constructs a [`CloudFormationTarget`](crate::types::CloudFormationTarget).
    pub fn build(self) -> crate::types::CloudFormationTarget {
        crate::types::CloudFormationTarget {
            deployment_id: self.deployment_id,
            target_id: self.target_id,
            last_updated_at: self.last_updated_at,
            lifecycle_events: self.lifecycle_events,
            status: self.status,
            resource_type: self.resource_type,
            target_version_weight: self.target_version_weight.unwrap_or_default(),
        }
    }
}
