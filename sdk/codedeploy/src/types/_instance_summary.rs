// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an instance in a deployment.</p>
#[deprecated(note = "InstanceSummary is deprecated, use DeploymentTarget instead.")]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceSummary {
    /// <p> The unique ID of a deployment. </p>
    #[doc(hidden)]
    pub deployment_id: std::option::Option<std::string::String>,
    /// <p>The instance ID.</p>
    #[doc(hidden)]
    pub instance_id: std::option::Option<std::string::String>,
    /// <p>The deployment status for this instance:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li>
    /// <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li>
    /// <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li>
    /// <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li>
    /// <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li>
    /// <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::InstanceStatus>,
    /// <p>A timestamp that indicates when the instance information was last updated.</p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A list of lifecycle events for this instance.</p>
    #[doc(hidden)]
    pub lifecycle_events: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    /// <p>Information about which environment an instance belongs to in a blue/green deployment.</p>
    /// <ul>
    /// <li> <p>BLUE: The instance is part of the original environment.</p> </li>
    /// <li> <p>GREEN: The instance is part of the replacement environment.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::InstanceType>,
}
impl InstanceSummary {
    /// <p> The unique ID of a deployment. </p>
    pub fn deployment_id(&self) -> std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(&self) -> std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The deployment status for this instance:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li>
    /// <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li>
    /// <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li>
    /// <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li>
    /// <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li>
    /// <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::InstanceStatus> {
        self.status.as_ref()
    }
    /// <p>A timestamp that indicates when the instance information was last updated.</p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>A list of lifecycle events for this instance.</p>
    pub fn lifecycle_events(&self) -> std::option::Option<&[crate::types::LifecycleEvent]> {
        self.lifecycle_events.as_deref()
    }
    /// <p>Information about which environment an instance belongs to in a blue/green deployment.</p>
    /// <ul>
    /// <li> <p>BLUE: The instance is part of the original environment.</p> </li>
    /// <li> <p>GREEN: The instance is part of the replacement environment.</p> </li>
    /// </ul>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::InstanceType> {
        self.instance_type.as_ref()
    }
}
impl InstanceSummary {
    /// Creates a new builder-style object to manufacture [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn builder() -> crate::types::builders::InstanceSummaryBuilder {
        crate::types::builders::InstanceSummaryBuilder::default()
    }
}

/// A builder for [`InstanceSummary`](crate::types::InstanceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceSummaryBuilder {
    pub(crate) deployment_id: std::option::Option<std::string::String>,
    pub(crate) instance_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::InstanceStatus>,
    pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) lifecycle_events: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    pub(crate) instance_type: std::option::Option<crate::types::InstanceType>,
}
impl InstanceSummaryBuilder {
    /// <p> The unique ID of a deployment. </p>
    pub fn deployment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.deployment_id = Some(input.into());
        self
    }
    /// <p> The unique ID of a deployment. </p>
    pub fn set_deployment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The instance ID.</p>
    pub fn instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.instance_id = Some(input.into());
        self
    }
    /// <p>The instance ID.</p>
    pub fn set_instance_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The deployment status for this instance:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li>
    /// <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li>
    /// <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li>
    /// <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li>
    /// <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li>
    /// <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::InstanceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The deployment status for this instance:</p>
    /// <ul>
    /// <li> <p> <code>Pending</code>: The deployment is pending for this instance.</p> </li>
    /// <li> <p> <code>In Progress</code>: The deployment is in progress for this instance.</p> </li>
    /// <li> <p> <code>Succeeded</code>: The deployment has succeeded for this instance.</p> </li>
    /// <li> <p> <code>Failed</code>: The deployment has failed for this instance.</p> </li>
    /// <li> <p> <code>Skipped</code>: The deployment has been skipped for this instance.</p> </li>
    /// <li> <p> <code>Unknown</code>: The deployment status is unknown for this instance.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::InstanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>A timestamp that indicates when the instance information was last updated.</p>
    pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>A timestamp that indicates when the instance information was last updated.</p>
    pub fn set_last_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_at = input;
        self
    }
    /// Appends an item to `lifecycle_events`.
    ///
    /// To override the contents of this collection use [`set_lifecycle_events`](Self::set_lifecycle_events).
    ///
    /// <p>A list of lifecycle events for this instance.</p>
    pub fn lifecycle_events(mut self, input: crate::types::LifecycleEvent) -> Self {
        let mut v = self.lifecycle_events.unwrap_or_default();
        v.push(input);
        self.lifecycle_events = Some(v);
        self
    }
    /// <p>A list of lifecycle events for this instance.</p>
    pub fn set_lifecycle_events(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LifecycleEvent>>,
    ) -> Self {
        self.lifecycle_events = input;
        self
    }
    /// <p>Information about which environment an instance belongs to in a blue/green deployment.</p>
    /// <ul>
    /// <li> <p>BLUE: The instance is part of the original environment.</p> </li>
    /// <li> <p>GREEN: The instance is part of the replacement environment.</p> </li>
    /// </ul>
    pub fn instance_type(mut self, input: crate::types::InstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>Information about which environment an instance belongs to in a blue/green deployment.</p>
    /// <ul>
    /// <li> <p>BLUE: The instance is part of the original environment.</p> </li>
    /// <li> <p>GREEN: The instance is part of the replacement environment.</p> </li>
    /// </ul>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::InstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceSummary`](crate::types::InstanceSummary).
    pub fn build(self) -> crate::types::InstanceSummary {
        crate::types::InstanceSummary {
            deployment_id: self.deployment_id,
            instance_id: self.instance_id,
            status: self.status,
            last_updated_at: self.last_updated_at,
            lifecycle_events: self.lifecycle_events,
            instance_type: self.instance_type,
        }
    }
}
