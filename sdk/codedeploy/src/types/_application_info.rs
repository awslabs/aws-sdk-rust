// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationInfo {
    /// <p>The application ID.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The application name.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The time at which the application was created.</p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>True if the user has authenticated with GitHub for the specified application. Otherwise, false.</p>
    #[doc(hidden)]
    pub linked_to_git_hub: bool,
    /// <p>The name for a connection to a GitHub account.</p>
    #[doc(hidden)]
    pub git_hub_account_name: std::option::Option<std::string::String>,
    /// <p>The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>).</p>
    #[doc(hidden)]
    pub compute_platform: std::option::Option<crate::types::ComputePlatform>,
}
impl ApplicationInfo {
    /// <p>The application ID.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The application name.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The time at which the application was created.</p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>True if the user has authenticated with GitHub for the specified application. Otherwise, false.</p>
    pub fn linked_to_git_hub(&self) -> bool {
        self.linked_to_git_hub
    }
    /// <p>The name for a connection to a GitHub account.</p>
    pub fn git_hub_account_name(&self) -> std::option::Option<&str> {
        self.git_hub_account_name.as_deref()
    }
    /// <p>The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>).</p>
    pub fn compute_platform(&self) -> std::option::Option<&crate::types::ComputePlatform> {
        self.compute_platform.as_ref()
    }
}
impl ApplicationInfo {
    /// Creates a new builder-style object to manufacture [`ApplicationInfo`](crate::types::ApplicationInfo).
    pub fn builder() -> crate::types::builders::ApplicationInfoBuilder {
        crate::types::builders::ApplicationInfoBuilder::default()
    }
}

/// A builder for [`ApplicationInfo`](crate::types::ApplicationInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationInfoBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) linked_to_git_hub: std::option::Option<bool>,
    pub(crate) git_hub_account_name: std::option::Option<std::string::String>,
    pub(crate) compute_platform: std::option::Option<crate::types::ComputePlatform>,
}
impl ApplicationInfoBuilder {
    /// <p>The application ID.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The application ID.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The application name.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The application name.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The time at which the application was created.</p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The time at which the application was created.</p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>True if the user has authenticated with GitHub for the specified application. Otherwise, false.</p>
    pub fn linked_to_git_hub(mut self, input: bool) -> Self {
        self.linked_to_git_hub = Some(input);
        self
    }
    /// <p>True if the user has authenticated with GitHub for the specified application. Otherwise, false.</p>
    pub fn set_linked_to_git_hub(mut self, input: std::option::Option<bool>) -> Self {
        self.linked_to_git_hub = input;
        self
    }
    /// <p>The name for a connection to a GitHub account.</p>
    pub fn git_hub_account_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.git_hub_account_name = Some(input.into());
        self
    }
    /// <p>The name for a connection to a GitHub account.</p>
    pub fn set_git_hub_account_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.git_hub_account_name = input;
        self
    }
    /// <p>The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>).</p>
    pub fn compute_platform(mut self, input: crate::types::ComputePlatform) -> Self {
        self.compute_platform = Some(input);
        self
    }
    /// <p>The destination platform type for deployment of the application (<code>Lambda</code> or <code>Server</code>).</p>
    pub fn set_compute_platform(
        mut self,
        input: std::option::Option<crate::types::ComputePlatform>,
    ) -> Self {
        self.compute_platform = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationInfo`](crate::types::ApplicationInfo).
    pub fn build(self) -> crate::types::ApplicationInfo {
        crate::types::ApplicationInfo {
            application_id: self.application_id,
            application_name: self.application_name,
            create_time: self.create_time,
            linked_to_git_hub: self.linked_to_git_hub.unwrap_or_default(),
            git_hub_account_name: self.git_hub_account_name,
            compute_platform: self.compute_platform,
        }
    }
}
