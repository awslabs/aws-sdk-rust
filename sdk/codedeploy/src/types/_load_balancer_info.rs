// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the Elastic Load Balancing load balancer or target group used in a deployment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoadBalancerInfo {
    /// <p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note>
    /// <p> Adding more than one load balancer to the array is not supported. </p>
    /// </note>
    #[doc(hidden)]
    pub elb_info_list: std::option::Option<std::vec::Vec<crate::types::ElbInfo>>,
    /// <p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note>
    /// <p> Adding more than one target group to the array is not supported. </p>
    /// </note>
    #[doc(hidden)]
    pub target_group_info_list: std::option::Option<std::vec::Vec<crate::types::TargetGroupInfo>>,
    /// <p> The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. </p>
    #[doc(hidden)]
    pub target_group_pair_info_list:
        std::option::Option<std::vec::Vec<crate::types::TargetGroupPairInfo>>,
}
impl LoadBalancerInfo {
    /// <p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note>
    /// <p> Adding more than one load balancer to the array is not supported. </p>
    /// </note>
    pub fn elb_info_list(&self) -> std::option::Option<&[crate::types::ElbInfo]> {
        self.elb_info_list.as_deref()
    }
    /// <p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note>
    /// <p> Adding more than one target group to the array is not supported. </p>
    /// </note>
    pub fn target_group_info_list(&self) -> std::option::Option<&[crate::types::TargetGroupInfo]> {
        self.target_group_info_list.as_deref()
    }
    /// <p> The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. </p>
    pub fn target_group_pair_info_list(
        &self,
    ) -> std::option::Option<&[crate::types::TargetGroupPairInfo]> {
        self.target_group_pair_info_list.as_deref()
    }
}
impl LoadBalancerInfo {
    /// Creates a new builder-style object to manufacture [`LoadBalancerInfo`](crate::types::LoadBalancerInfo).
    pub fn builder() -> crate::types::builders::LoadBalancerInfoBuilder {
        crate::types::builders::LoadBalancerInfoBuilder::default()
    }
}

/// A builder for [`LoadBalancerInfo`](crate::types::LoadBalancerInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoadBalancerInfoBuilder {
    pub(crate) elb_info_list: std::option::Option<std::vec::Vec<crate::types::ElbInfo>>,
    pub(crate) target_group_info_list:
        std::option::Option<std::vec::Vec<crate::types::TargetGroupInfo>>,
    pub(crate) target_group_pair_info_list:
        std::option::Option<std::vec::Vec<crate::types::TargetGroupPairInfo>>,
}
impl LoadBalancerInfoBuilder {
    /// Appends an item to `elb_info_list`.
    ///
    /// To override the contents of this collection use [`set_elb_info_list`](Self::set_elb_info_list).
    ///
    /// <p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note>
    /// <p> Adding more than one load balancer to the array is not supported. </p>
    /// </note>
    pub fn elb_info_list(mut self, input: crate::types::ElbInfo) -> Self {
        let mut v = self.elb_info_list.unwrap_or_default();
        v.push(input);
        self.elb_info_list = Some(v);
        self
    }
    /// <p>An array that contains information about the load balancer to use for load balancing in a deployment. In Elastic Load Balancing, load balancers are used with Classic Load Balancers.</p> <note>
    /// <p> Adding more than one load balancer to the array is not supported. </p>
    /// </note>
    pub fn set_elb_info_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ElbInfo>>,
    ) -> Self {
        self.elb_info_list = input;
        self
    }
    /// Appends an item to `target_group_info_list`.
    ///
    /// To override the contents of this collection use [`set_target_group_info_list`](Self::set_target_group_info_list).
    ///
    /// <p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note>
    /// <p> Adding more than one target group to the array is not supported. </p>
    /// </note>
    pub fn target_group_info_list(mut self, input: crate::types::TargetGroupInfo) -> Self {
        let mut v = self.target_group_info_list.unwrap_or_default();
        v.push(input);
        self.target_group_info_list = Some(v);
        self
    }
    /// <p>An array that contains information about the target group to use for load balancing in a deployment. In Elastic Load Balancing, target groups are used with Application Load Balancers.</p> <note>
    /// <p> Adding more than one target group to the array is not supported. </p>
    /// </note>
    pub fn set_target_group_info_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetGroupInfo>>,
    ) -> Self {
        self.target_group_info_list = input;
        self
    }
    /// Appends an item to `target_group_pair_info_list`.
    ///
    /// To override the contents of this collection use [`set_target_group_pair_info_list`](Self::set_target_group_pair_info_list).
    ///
    /// <p> The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. </p>
    pub fn target_group_pair_info_list(mut self, input: crate::types::TargetGroupPairInfo) -> Self {
        let mut v = self.target_group_pair_info_list.unwrap_or_default();
        v.push(input);
        self.target_group_pair_info_list = Some(v);
        self
    }
    /// <p> The target group pair information. This is an array of <code>TargeGroupPairInfo</code> objects with a maximum size of one. </p>
    pub fn set_target_group_pair_info_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetGroupPairInfo>>,
    ) -> Self {
        self.target_group_pair_info_list = input;
        self
    }
    /// Consumes the builder and constructs a [`LoadBalancerInfo`](crate::types::LoadBalancerInfo).
    pub fn build(self) -> crate::types::LoadBalancerInfo {
        crate::types::LoadBalancerInfo {
            elb_info_list: self.elb_info_list,
            target_group_info_list: self.target_group_info_list,
            target_group_pair_info_list: self.target_group_pair_info_list,
        }
    }
}
