// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_deployment_info<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::DeploymentInfo>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DeploymentInfoBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "applicationName" => {
                                builder = builder.set_application_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentGroupName" => {
                                builder = builder.set_deployment_group_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentConfigName" => {
                                builder = builder.set_deployment_config_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentId" => {
                                builder = builder.set_deployment_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "previousRevision" => {
                                builder = builder.set_previous_revision(
                                    crate::protocol_serde::shape_revision_location::de_revision_location(tokens)?
                                );
                            }
                            "revision" => {
                                builder = builder.set_revision(
                                    crate::protocol_serde::shape_revision_location::de_revision_location(tokens)?
                                );
                            }
                            "status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::DeploymentStatus::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "errorInformation" => {
                                builder = builder.set_error_information(
                                    crate::protocol_serde::shape_error_information::de_error_information(tokens)?
                                );
                            }
                            "createTime" => {
                                builder = builder.set_create_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "startTime" => {
                                builder = builder.set_start_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "completeTime" => {
                                builder = builder.set_complete_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "deploymentOverview" => {
                                builder = builder.set_deployment_overview(
                                    crate::protocol_serde::shape_deployment_overview::de_deployment_overview(tokens)?
                                );
                            }
                            "description" => {
                                builder = builder.set_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "creator" => {
                                builder = builder.set_creator(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::DeploymentCreator::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ignoreApplicationStopFailures" => {
                                builder = builder.set_ignore_application_stop_failures(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "autoRollbackConfiguration" => {
                                builder = builder.set_auto_rollback_configuration(
                                    crate::protocol_serde::shape_auto_rollback_configuration::de_auto_rollback_configuration(tokens)?
                                );
                            }
                            "updateOutdatedInstancesOnly" => {
                                builder = builder.set_update_outdated_instances_only(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "rollbackInfo" => {
                                builder = builder.set_rollback_info(
                                    crate::protocol_serde::shape_rollback_info::de_rollback_info(
                                        tokens,
                                    )?,
                                );
                            }
                            "deploymentStyle" => {
                                builder = builder.set_deployment_style(
                                    crate::protocol_serde::shape_deployment_style::de_deployment_style(tokens)?
                                );
                            }
                            "targetInstances" => {
                                builder = builder.set_target_instances(
                                    crate::protocol_serde::shape_target_instances::de_target_instances(tokens)?
                                );
                            }
                            "instanceTerminationWaitTimeStarted" => {
                                builder = builder.set_instance_termination_wait_time_started(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "blueGreenDeploymentConfiguration" => {
                                builder = builder.set_blue_green_deployment_configuration(
                                    crate::protocol_serde::shape_blue_green_deployment_configuration::de_blue_green_deployment_configuration(tokens)?
                                );
                            }
                            "loadBalancerInfo" => {
                                builder = builder.set_load_balancer_info(
                                    crate::protocol_serde::shape_load_balancer_info::de_load_balancer_info(tokens)?
                                );
                            }
                            "additionalDeploymentStatusInfo" => {
                                builder = builder.set_additional_deployment_status_info(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "fileExistsBehavior" => {
                                builder = builder.set_file_exists_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::FileExistsBehavior::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "deploymentStatusMessages" => {
                                builder = builder.set_deployment_status_messages(
                                    crate::protocol_serde::shape_deployment_status_message_list::de_deployment_status_message_list(tokens)?
                                );
                            }
                            "computePlatform" => {
                                builder = builder.set_compute_platform(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ComputePlatform::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "externalId" => {
                                builder = builder.set_external_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "relatedDeployments" => {
                                builder = builder.set_related_deployments(
                                    crate::protocol_serde::shape_related_deployments::de_related_deployments(tokens)?
                                );
                            }
                            "overrideAlarmConfiguration" => {
                                builder = builder.set_override_alarm_configuration(
                                    crate::protocol_serde::shape_alarm_configuration::de_alarm_configuration(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
