// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_register_on_premises_instance_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceOutput,
    crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "IamArnRequiredException" => crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::IamArnRequiredException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::IamArnRequiredExceptionBuilder::default();
                output = crate::protocol_serde::shape_iam_arn_required_exception::de_iam_arn_required_exception_json_err(_response_body, output)
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "IamSessionArnAlreadyRegisteredException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::IamSessionArnAlreadyRegisteredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IamSessionArnAlreadyRegisteredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_iam_session_arn_already_registered_exception::de_iam_session_arn_already_registered_exception_json_err(_response_body, output).map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "IamUserArnAlreadyRegisteredException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::IamUserArnAlreadyRegisteredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IamUserArnAlreadyRegisteredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_iam_user_arn_already_registered_exception::de_iam_user_arn_already_registered_exception_json_err(_response_body, output).map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "IamUserArnRequiredException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::IamUserArnRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::IamUserArnRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_iam_user_arn_required_exception::de_iam_user_arn_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InstanceNameAlreadyRegisteredException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::InstanceNameAlreadyRegisteredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InstanceNameAlreadyRegisteredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_instance_name_already_registered_exception::de_instance_name_already_registered_exception_json_err(_response_body, output).map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InstanceNameRequiredException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::InstanceNameRequiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InstanceNameRequiredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_instance_name_required_exception::de_instance_name_required_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidIamSessionArnException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::InvalidIamSessionArnException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidIamSessionArnExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_iam_session_arn_exception::de_invalid_iam_session_arn_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidIamUserArnException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::InvalidIamUserArnException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidIamUserArnExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_iam_user_arn_exception::de_invalid_iam_user_arn_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidInstanceNameException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::InvalidInstanceNameException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidInstanceNameExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_instance_name_exception::de_invalid_instance_name_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "MultipleIamArnsProvidedException" => {
            crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::MultipleIamArnsProvidedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::MultipleIamArnsProvidedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_multiple_iam_arns_provided_exception::de_multiple_iam_arns_provided_exception_json_err(
                        _response_body,
                        output,
                    )
                    .map_err(crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_register_on_premises_instance_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceOutput,
    crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::register_on_premises_instance::builders::RegisterOnPremisesInstanceOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_register_on_premises_instance_input(
    input: &crate::operation::register_on_premises_instance::RegisterOnPremisesInstanceInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_register_on_premises_instance_input::ser_register_on_premises_instance_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
