// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_deployment_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_deployment::CreateDeploymentInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.application_name {
        object.key("applicationName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.deployment_group_name {
        object.key("deploymentGroupName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.revision {
        #[allow(unused_mut)]
        let mut object_4 = object.key("revision").start_object();
        crate::protocol_serde::shape_revision_location::ser_revision_location(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.deployment_config_name {
        object.key("deploymentConfigName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ignore_application_stop_failures {
        object.key("ignoreApplicationStopFailures").boolean(*var_7);
    }
    if let Some(var_8) = &input.target_instances {
        #[allow(unused_mut)]
        let mut object_9 = object.key("targetInstances").start_object();
        crate::protocol_serde::shape_target_instances::ser_target_instances(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.auto_rollback_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("autoRollbackConfiguration").start_object();
        crate::protocol_serde::shape_auto_rollback_configuration::ser_auto_rollback_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.update_outdated_instances_only {
        object.key("updateOutdatedInstancesOnly").boolean(*var_12);
    }
    if let Some(var_13) = &input.file_exists_behavior {
        object.key("fileExistsBehavior").string(var_13.as_str());
    }
    if let Some(var_14) = &input.override_alarm_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("overrideAlarmConfiguration").start_object();
        crate::protocol_serde::shape_alarm_configuration::ser_alarm_configuration(&mut object_15, var_14)?;
        object_15.finish();
    }
    Ok(())
}
