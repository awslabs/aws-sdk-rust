// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_deployment_group_info<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::DeploymentGroupInfo>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::DeploymentGroupInfoBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "applicationName" => {
                                builder = builder.set_application_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentGroupId" => {
                                builder = builder.set_deployment_group_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentGroupName" => {
                                builder = builder.set_deployment_group_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "deploymentConfigName" => {
                                builder = builder.set_deployment_config_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ec2TagFilters" => {
                                builder = builder.set_ec2_tag_filters(
                                    crate::protocol_serde::shape_ec2_tag_filter_list::de_ec2_tag_filter_list(tokens)?
                                );
                            }
                            "onPremisesInstanceTagFilters" => {
                                builder = builder.set_on_premises_instance_tag_filters(
                                    crate::protocol_serde::shape_tag_filter_list::de_tag_filter_list(tokens)?
                                );
                            }
                            "autoScalingGroups" => {
                                builder = builder.set_auto_scaling_groups(
                                    crate::protocol_serde::shape_auto_scaling_group_list::de_auto_scaling_group_list(tokens)?
                                );
                            }
                            "serviceRoleArn" => {
                                builder = builder.set_service_role_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "targetRevision" => {
                                builder = builder.set_target_revision(
                                    crate::protocol_serde::shape_revision_location::de_revision_location(tokens)?
                                );
                            }
                            "triggerConfigurations" => {
                                builder = builder.set_trigger_configurations(
                                    crate::protocol_serde::shape_trigger_config_list::de_trigger_config_list(tokens)?
                                );
                            }
                            "alarmConfiguration" => {
                                builder = builder.set_alarm_configuration(
                                    crate::protocol_serde::shape_alarm_configuration::de_alarm_configuration(tokens)?
                                );
                            }
                            "autoRollbackConfiguration" => {
                                builder = builder.set_auto_rollback_configuration(
                                    crate::protocol_serde::shape_auto_rollback_configuration::de_auto_rollback_configuration(tokens)?
                                );
                            }
                            "deploymentStyle" => {
                                builder = builder.set_deployment_style(
                                    crate::protocol_serde::shape_deployment_style::de_deployment_style(tokens)?
                                );
                            }
                            "outdatedInstancesStrategy" => {
                                builder = builder.set_outdated_instances_strategy(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::OutdatedInstancesStrategy::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "blueGreenDeploymentConfiguration" => {
                                builder = builder.set_blue_green_deployment_configuration(
                                    crate::protocol_serde::shape_blue_green_deployment_configuration::de_blue_green_deployment_configuration(tokens)?
                                );
                            }
                            "loadBalancerInfo" => {
                                builder = builder.set_load_balancer_info(
                                    crate::protocol_serde::shape_load_balancer_info::de_load_balancer_info(tokens)?
                                );
                            }
                            "lastSuccessfulDeployment" => {
                                builder = builder.set_last_successful_deployment(
                                    crate::protocol_serde::shape_last_deployment_info::de_last_deployment_info(tokens)?
                                );
                            }
                            "lastAttemptedDeployment" => {
                                builder = builder.set_last_attempted_deployment(
                                    crate::protocol_serde::shape_last_deployment_info::de_last_deployment_info(tokens)?
                                );
                            }
                            "ec2TagSet" => {
                                builder = builder.set_ec2_tag_set(
                                    crate::protocol_serde::shape_ec2_tag_set::de_ec2_tag_set(
                                        tokens,
                                    )?,
                                );
                            }
                            "onPremisesTagSet" => {
                                builder = builder.set_on_premises_tag_set(
                                    crate::protocol_serde::shape_on_premises_tag_set::de_on_premises_tag_set(tokens)?
                                );
                            }
                            "computePlatform" => {
                                builder = builder.set_compute_platform(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ComputePlatform::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "ecsServices" => {
                                builder = builder.set_ecs_services(
                                    crate::protocol_serde::shape_ecs_service_list::de_ecs_service_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
