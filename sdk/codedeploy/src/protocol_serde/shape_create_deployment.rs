// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_create_deployment_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::create_deployment::CreateDeploymentOutput, crate::operation::create_deployment::CreateDeploymentError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::create_deployment::CreateDeploymentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AlarmsLimitExceededException" => crate::operation::create_deployment::CreateDeploymentError::AlarmsLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::AlarmsLimitExceededExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_alarms_limit_exceeded_exception::de_alarms_limit_exceeded_exception_json_err(_response_body, output)
                        .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ApplicationDoesNotExistException" => crate::operation::create_deployment::CreateDeploymentError::ApplicationDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ApplicationDoesNotExistExceptionBuilder::default();
                output = crate::protocol_serde::shape_application_does_not_exist_exception::de_application_does_not_exist_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ApplicationNameRequiredException" => crate::operation::create_deployment::CreateDeploymentError::ApplicationNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ApplicationNameRequiredExceptionBuilder::default();
                output = crate::protocol_serde::shape_application_name_required_exception::de_application_name_required_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DeploymentConfigDoesNotExistException" => {
            crate::operation::create_deployment::CreateDeploymentError::DeploymentConfigDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DeploymentConfigDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_deployment_config_does_not_exist_exception::de_deployment_config_does_not_exist_exception_json_err(_response_body, output).map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DeploymentGroupDoesNotExistException" => {
            crate::operation::create_deployment::CreateDeploymentError::DeploymentGroupDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DeploymentGroupDoesNotExistExceptionBuilder::default();
                    output = crate::protocol_serde::shape_deployment_group_does_not_exist_exception::de_deployment_group_does_not_exist_exception_json_err(_response_body, output).map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "DeploymentGroupNameRequiredException" => crate::operation::create_deployment::CreateDeploymentError::DeploymentGroupNameRequiredException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DeploymentGroupNameRequiredExceptionBuilder::default();
                output = crate::protocol_serde::shape_deployment_group_name_required_exception::de_deployment_group_name_required_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DeploymentLimitExceededException" => crate::operation::create_deployment::CreateDeploymentError::DeploymentLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DeploymentLimitExceededExceptionBuilder::default();
                output = crate::protocol_serde::shape_deployment_limit_exceeded_exception::de_deployment_limit_exceeded_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "DescriptionTooLongException" => crate::operation::create_deployment::CreateDeploymentError::DescriptionTooLongException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::DescriptionTooLongExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_description_too_long_exception::de_description_too_long_exception_json_err(_response_body, output)
                        .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidAlarmConfigException" => crate::operation::create_deployment::CreateDeploymentError::InvalidAlarmConfigException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidAlarmConfigExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_alarm_config_exception::de_invalid_alarm_config_exception_json_err(_response_body, output)
                        .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidApplicationNameException" => crate::operation::create_deployment::CreateDeploymentError::InvalidApplicationNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidApplicationNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_application_name_exception::de_invalid_application_name_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidAutoRollbackConfigException" => crate::operation::create_deployment::CreateDeploymentError::InvalidAutoRollbackConfigException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidAutoRollbackConfigExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_auto_rollback_config_exception::de_invalid_auto_rollback_config_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidAutoScalingGroupException" => crate::operation::create_deployment::CreateDeploymentError::InvalidAutoScalingGroupException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidAutoScalingGroupExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_auto_scaling_group_exception::de_invalid_auto_scaling_group_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDeploymentConfigNameException" => crate::operation::create_deployment::CreateDeploymentError::InvalidDeploymentConfigNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDeploymentConfigNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_deployment_config_name_exception::de_invalid_deployment_config_name_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidDeploymentGroupNameException" => crate::operation::create_deployment::CreateDeploymentError::InvalidDeploymentGroupNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidDeploymentGroupNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_deployment_group_name_exception::de_invalid_deployment_group_name_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidFileExistsBehaviorException" => crate::operation::create_deployment::CreateDeploymentError::InvalidFileExistsBehaviorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidFileExistsBehaviorExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_file_exists_behavior_exception::de_invalid_file_exists_behavior_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidGitHubAccountTokenException" => crate::operation::create_deployment::CreateDeploymentError::InvalidGitHubAccountTokenException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidGitHubAccountTokenExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_git_hub_account_token_exception::de_invalid_git_hub_account_token_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidIgnoreApplicationStopFailuresValueException" => {
            crate::operation::create_deployment::CreateDeploymentError::InvalidIgnoreApplicationStopFailuresValueException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidIgnoreApplicationStopFailuresValueExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_ignore_application_stop_failures_value_exception::de_invalid_ignore_application_stop_failures_value_exception_json_err(_response_body, output).map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidLoadBalancerInfoException" => crate::operation::create_deployment::CreateDeploymentError::InvalidLoadBalancerInfoException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidLoadBalancerInfoExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_load_balancer_info_exception::de_invalid_load_balancer_info_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidRevisionException" => crate::operation::create_deployment::CreateDeploymentError::InvalidRevisionException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidRevisionExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_revision_exception::de_invalid_revision_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidRoleException" => crate::operation::create_deployment::CreateDeploymentError::InvalidRoleException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidRoleExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_role_exception::de_invalid_role_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTargetInstancesException" => crate::operation::create_deployment::CreateDeploymentError::InvalidTargetInstancesException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTargetInstancesExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_target_instances_exception::de_invalid_target_instances_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTrafficRoutingConfigurationException" => {
            crate::operation::create_deployment::CreateDeploymentError::InvalidTrafficRoutingConfigurationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidTrafficRoutingConfigurationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_traffic_routing_configuration_exception::de_invalid_traffic_routing_configuration_exception_json_err(_response_body, output).map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidUpdateOutdatedInstancesOnlyValueException" => {
            crate::operation::create_deployment::CreateDeploymentError::InvalidUpdateOutdatedInstancesOnlyValueException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidUpdateOutdatedInstancesOnlyValueExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_update_outdated_instances_only_value_exception::de_invalid_update_outdated_instances_only_value_exception_json_err(_response_body, output).map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "RevisionDoesNotExistException" => crate::operation::create_deployment::CreateDeploymentError::RevisionDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::RevisionDoesNotExistExceptionBuilder::default();
                output = crate::protocol_serde::shape_revision_does_not_exist_exception::de_revision_does_not_exist_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "RevisionRequiredException" => crate::operation::create_deployment::CreateDeploymentError::RevisionRequiredException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::RevisionRequiredExceptionBuilder::default();
                output = crate::protocol_serde::shape_revision_required_exception::de_revision_required_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ThrottlingException" => crate::operation::create_deployment::CreateDeploymentError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::create_deployment::CreateDeploymentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_create_deployment_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::create_deployment::CreateDeploymentOutput, crate::operation::create_deployment::CreateDeploymentError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder::default();
        output = crate::protocol_serde::shape_create_deployment::de_create_deployment(_response_body, output)
            .map_err(crate::operation::create_deployment::CreateDeploymentError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_create_deployment_input(
    input: &crate::operation::create_deployment::CreateDeploymentInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_create_deployment_input::ser_create_deployment_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_create_deployment(
    value: &[u8],
    mut builder: crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder,
) -> Result<crate::operation::create_deployment::builders::CreateDeploymentOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "deploymentId" => {
                    builder = builder.set_deployment_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
