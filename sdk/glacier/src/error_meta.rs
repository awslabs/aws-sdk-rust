// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Returned if there is insufficient capacity to process this expedited request. This error only applies to expedited retrievals and not to standard or bulk retrievals.</p>
    InsufficientCapacityException(crate::types::error::InsufficientCapacityException),
    /// <p>Returned if a parameter of the request is incorrectly specified.</p>
    InvalidParameterValueException(crate::types::error::InvalidParameterValueException),
    /// <p>Returned if the request results in a vault or account limit being exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>Returned if a required header or parameter is missing from the request.</p>
    MissingParameterValueException(crate::types::error::MissingParameterValueException),
    /// <p>Returned if a retrieval job would exceed the current data policy's retrieval rate limit. For more information about data retrieval policies,</p>
    PolicyEnforcedException(crate::types::error::PolicyEnforcedException),
    /// <p>Returned if, when uploading an archive, Amazon S3 Glacier times out while receiving the upload.</p>
    RequestTimeoutException(crate::types::error::RequestTimeoutException),
    /// <p>Returned if the specified resource (such as a vault, upload ID, or job ID) doesn't exist.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Returned if the service cannot complete the request.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InsufficientCapacityException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MissingParameterValueException(inner) => inner.fmt(f),
            Error::PolicyEnforcedException(inner) => inner.fmt(f),
            Error::RequestTimeoutException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::abort_multipart_upload::AbortMultipartUploadError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::abort_multipart_upload::AbortMultipartUploadError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::abort_multipart_upload::AbortMultipartUploadError> for Error {
    fn from(err: crate::operation::abort_multipart_upload::AbortMultipartUploadError) -> Self {
        match err {
            crate::operation::abort_multipart_upload::AbortMultipartUploadError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::abort_multipart_upload::AbortMultipartUploadError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::abort_multipart_upload::AbortMultipartUploadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::abort_multipart_upload::AbortMultipartUploadError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::abort_multipart_upload::AbortMultipartUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::abort_vault_lock::AbortVaultLockError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::abort_vault_lock::AbortVaultLockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::abort_vault_lock::AbortVaultLockError> for Error {
    fn from(err: crate::operation::abort_vault_lock::AbortVaultLockError) -> Self {
        match err {
            crate::operation::abort_vault_lock::AbortVaultLockError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::abort_vault_lock::AbortVaultLockError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::abort_vault_lock::AbortVaultLockError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::abort_vault_lock::AbortVaultLockError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::abort_vault_lock::AbortVaultLockError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::add_tags_to_vault::AddTagsToVaultError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::add_tags_to_vault::AddTagsToVaultError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags_to_vault::AddTagsToVaultError> for Error {
    fn from(err: crate::operation::add_tags_to_vault::AddTagsToVaultError) -> Self {
        match err {
            crate::operation::add_tags_to_vault::AddTagsToVaultError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::add_tags_to_vault::AddTagsToVaultError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::add_tags_to_vault::AddTagsToVaultError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::add_tags_to_vault::AddTagsToVaultError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::add_tags_to_vault::AddTagsToVaultError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::add_tags_to_vault::AddTagsToVaultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::complete_multipart_upload::CompleteMultipartUploadError> for Error {
    fn from(
        err: crate::operation::complete_multipart_upload::CompleteMultipartUploadError,
    ) -> Self {
        match err {
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::complete_multipart_upload::CompleteMultipartUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::complete_vault_lock::CompleteVaultLockError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::complete_vault_lock::CompleteVaultLockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::complete_vault_lock::CompleteVaultLockError> for Error {
    fn from(err: crate::operation::complete_vault_lock::CompleteVaultLockError) -> Self {
        match err {
            crate::operation::complete_vault_lock::CompleteVaultLockError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::complete_vault_lock::CompleteVaultLockError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::complete_vault_lock::CompleteVaultLockError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::complete_vault_lock::CompleteVaultLockError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::complete_vault_lock::CompleteVaultLockError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_vault::CreateVaultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_vault::CreateVaultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vault::CreateVaultError> for Error {
    fn from(err: crate::operation::create_vault::CreateVaultError) -> Self {
        match err {
            crate::operation::create_vault::CreateVaultError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::create_vault::CreateVaultError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_vault::CreateVaultError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::create_vault::CreateVaultError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::create_vault::CreateVaultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_archive::DeleteArchiveError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_archive::DeleteArchiveError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_archive::DeleteArchiveError> for Error {
    fn from(err: crate::operation::delete_archive::DeleteArchiveError) -> Self {
        match err {
            crate::operation::delete_archive::DeleteArchiveError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::delete_archive::DeleteArchiveError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::delete_archive::DeleteArchiveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_archive::DeleteArchiveError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_archive::DeleteArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_vault::DeleteVaultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_vault::DeleteVaultError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vault::DeleteVaultError> for Error {
    fn from(err: crate::operation::delete_vault::DeleteVaultError) -> Self {
        match err {
            crate::operation::delete_vault::DeleteVaultError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::delete_vault::DeleteVaultError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::delete_vault::DeleteVaultError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_vault::DeleteVaultError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_vault::DeleteVaultError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError> for Error {
    fn from(
        err: crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError,
    ) -> Self {
        match err {
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_vault_access_policy::DeleteVaultAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vault_notifications::DeleteVaultNotificationsError> for Error {
    fn from(
        err: crate::operation::delete_vault_notifications::DeleteVaultNotificationsError,
    ) -> Self {
        match err {
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_vault_notifications::DeleteVaultNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_job::DescribeJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::describe_job::DescribeJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_job::DescribeJobError> for Error {
    fn from(err: crate::operation::describe_job::DescribeJobError) -> Self {
        match err {
            crate::operation::describe_job::DescribeJobError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::describe_job::DescribeJobError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::describe_job::DescribeJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_job::DescribeJobError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_job::DescribeJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_vault::DescribeVaultError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_vault::DescribeVaultError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_vault::DescribeVaultError> for Error {
    fn from(err: crate::operation::describe_vault::DescribeVaultError) -> Self {
        match err {
            crate::operation::describe_vault::DescribeVaultError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::describe_vault::DescribeVaultError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::describe_vault::DescribeVaultError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_vault::DescribeVaultError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_vault::DescribeVaultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError> for Error {
    fn from(err: crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError) -> Self {
        match err {
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_data_retrieval_policy::GetDataRetrievalPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_job_output::GetJobOutputError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_job_output::GetJobOutputError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_job_output::GetJobOutputError> for Error {
    fn from(err: crate::operation::get_job_output::GetJobOutputError) -> Self {
        match err {
            crate::operation::get_job_output::GetJobOutputError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::get_job_output::GetJobOutputError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::get_job_output::GetJobOutputError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_job_output::GetJobOutputError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::get_job_output::GetJobOutputError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vault_access_policy::GetVaultAccessPolicyError> for Error {
    fn from(err: crate::operation::get_vault_access_policy::GetVaultAccessPolicyError) -> Self {
        match err {
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_vault_access_policy::GetVaultAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_vault_lock::GetVaultLockError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_vault_lock::GetVaultLockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vault_lock::GetVaultLockError> for Error {
    fn from(err: crate::operation::get_vault_lock::GetVaultLockError) -> Self {
        match err {
            crate::operation::get_vault_lock::GetVaultLockError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::get_vault_lock::GetVaultLockError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::get_vault_lock::GetVaultLockError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_vault_lock::GetVaultLockError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::get_vault_lock::GetVaultLockError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_vault_notifications::GetVaultNotificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_vault_notifications::GetVaultNotificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vault_notifications::GetVaultNotificationsError> for Error {
    fn from(err: crate::operation::get_vault_notifications::GetVaultNotificationsError) -> Self {
        match err {
            crate::operation::get_vault_notifications::GetVaultNotificationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::get_vault_notifications::GetVaultNotificationsError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::get_vault_notifications::GetVaultNotificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_vault_notifications::GetVaultNotificationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_vault_notifications::GetVaultNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::initiate_job::InitiateJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::initiate_job::InitiateJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initiate_job::InitiateJobError> for Error {
    fn from(err: crate::operation::initiate_job::InitiateJobError) -> Self {
        match err {
            crate::operation::initiate_job::InitiateJobError::InsufficientCapacityException(
                inner,
            ) => Error::InsufficientCapacityException(inner),
            crate::operation::initiate_job::InitiateJobError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::initiate_job::InitiateJobError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::initiate_job::InitiateJobError::PolicyEnforcedException(inner) => {
                Error::PolicyEnforcedException(inner)
            }
            crate::operation::initiate_job::InitiateJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::initiate_job::InitiateJobError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::operation::initiate_job::InitiateJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initiate_multipart_upload::InitiateMultipartUploadError> for Error {
    fn from(
        err: crate::operation::initiate_multipart_upload::InitiateMultipartUploadError,
    ) -> Self {
        match err {
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::initiate_multipart_upload::InitiateMultipartUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::initiate_vault_lock::InitiateVaultLockError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::initiate_vault_lock::InitiateVaultLockError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initiate_vault_lock::InitiateVaultLockError> for Error {
    fn from(err: crate::operation::initiate_vault_lock::InitiateVaultLockError) -> Self {
        match err {
            crate::operation::initiate_vault_lock::InitiateVaultLockError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::initiate_vault_lock::InitiateVaultLockError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::initiate_vault_lock::InitiateVaultLockError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::initiate_vault_lock::InitiateVaultLockError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::initiate_vault_lock::InitiateVaultLockError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_jobs::ListJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_jobs::ListJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_jobs::ListJobsError> for Error {
    fn from(err: crate::operation::list_jobs::ListJobsError) -> Self {
        match err {
            crate::operation::list_jobs::ListJobsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::operation::list_jobs::ListJobsError::MissingParameterValueException(inner) => {
                Error::MissingParameterValueException(inner)
            }
            crate::operation::list_jobs::ListJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_jobs::ListJobsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_jobs::ListJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_multipart_uploads::ListMultipartUploadsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_multipart_uploads::ListMultipartUploadsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_multipart_uploads::ListMultipartUploadsError> for Error {
    fn from(err: crate::operation::list_multipart_uploads::ListMultipartUploadsError) -> Self {
        match err {
            crate::operation::list_multipart_uploads::ListMultipartUploadsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::list_multipart_uploads::ListMultipartUploadsError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::list_multipart_uploads::ListMultipartUploadsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_multipart_uploads::ListMultipartUploadsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_multipart_uploads::ListMultipartUploadsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_parts::ListPartsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_parts::ListPartsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_parts::ListPartsError> for Error {
    fn from(err: crate::operation::list_parts::ListPartsError) -> Self {
        match err {
            crate::operation::list_parts::ListPartsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::operation::list_parts::ListPartsError::MissingParameterValueException(inner) => {
                Error::MissingParameterValueException(inner)
            }
            crate::operation::list_parts::ListPartsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_parts::ListPartsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_parts::ListPartsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_provisioned_capacity::ListProvisionedCapacityError> for Error {
    fn from(
        err: crate::operation::list_provisioned_capacity::ListProvisionedCapacityError,
    ) -> Self {
        match err {
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_provisioned_capacity::ListProvisionedCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_vault::ListTagsForVaultError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_vault::ListTagsForVaultError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_vault::ListTagsForVaultError> for Error {
    fn from(err: crate::operation::list_tags_for_vault::ListTagsForVaultError) -> Self {
        match err {
            crate::operation::list_tags_for_vault::ListTagsForVaultError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::list_tags_for_vault::ListTagsForVaultError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::list_tags_for_vault::ListTagsForVaultError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_vault::ListTagsForVaultError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_tags_for_vault::ListTagsForVaultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_vaults::ListVaultsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_vaults::ListVaultsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vaults::ListVaultsError> for Error {
    fn from(err: crate::operation::list_vaults::ListVaultsError) -> Self {
        match err {
            crate::operation::list_vaults::ListVaultsError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::operation::list_vaults::ListVaultsError::MissingParameterValueException(
                inner,
            ) => Error::MissingParameterValueException(inner),
            crate::operation::list_vaults::ListVaultsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_vaults::ListVaultsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_vaults::ListVaultsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError>
    for Error
{
    fn from(
        err: crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError,
    ) -> Self {
        match err {
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::purchase_provisioned_capacity::PurchaseProvisionedCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError> for Error {
    fn from(err: crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError) -> Self {
        match err {
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::remove_tags_from_vault::RemoveTagsFromVaultError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError> for Error {
    fn from(err: crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError) -> Self {
        match err {
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::set_data_retrieval_policy::SetDataRetrievalPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_vault_access_policy::SetVaultAccessPolicyError> for Error {
    fn from(err: crate::operation::set_vault_access_policy::SetVaultAccessPolicyError) -> Self {
        match err {
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::set_vault_access_policy::SetVaultAccessPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_vault_notifications::SetVaultNotificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_vault_notifications::SetVaultNotificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_vault_notifications::SetVaultNotificationsError> for Error {
    fn from(err: crate::operation::set_vault_notifications::SetVaultNotificationsError) -> Self {
        match err {
            crate::operation::set_vault_notifications::SetVaultNotificationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::set_vault_notifications::SetVaultNotificationsError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::set_vault_notifications::SetVaultNotificationsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::set_vault_notifications::SetVaultNotificationsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::set_vault_notifications::SetVaultNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::upload_archive::UploadArchiveError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upload_archive::UploadArchiveError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upload_archive::UploadArchiveError> for Error {
    fn from(err: crate::operation::upload_archive::UploadArchiveError) -> Self {
        match err {
            crate::operation::upload_archive::UploadArchiveError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::upload_archive::UploadArchiveError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::upload_archive::UploadArchiveError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::upload_archive::UploadArchiveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::upload_archive::UploadArchiveError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::upload_archive::UploadArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::upload_multipart_part::UploadMultipartPartError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upload_multipart_part::UploadMultipartPartError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upload_multipart_part::UploadMultipartPartError> for Error {
    fn from(err: crate::operation::upload_multipart_part::UploadMultipartPartError) -> Self {
        match err {
            crate::operation::upload_multipart_part::UploadMultipartPartError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::operation::upload_multipart_part::UploadMultipartPartError::MissingParameterValueException(inner) => Error::MissingParameterValueException(inner),
            crate::operation::upload_multipart_part::UploadMultipartPartError::RequestTimeoutException(inner) => Error::RequestTimeoutException(inner),
            crate::operation::upload_multipart_part::UploadMultipartPartError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::upload_multipart_part::UploadMultipartPartError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::upload_multipart_part::UploadMultipartPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InsufficientCapacityException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MissingParameterValueException(e) => e.request_id(),
            Self::PolicyEnforcedException(e) => e.request_id(),
            Self::RequestTimeoutException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
