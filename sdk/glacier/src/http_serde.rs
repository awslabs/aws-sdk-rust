// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_complete_multipart_upload_complete_multipart_upload_output_archive_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-archive-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_complete_multipart_upload_output_checksum(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-sha256-tree-hash").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_complete_multipart_upload_complete_multipart_upload_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_vault_create_vault_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_job_output_get_job_output_output_accept_ranges(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Accept-Ranges").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_job_output_get_job_output_output_archive_description(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-archive-description").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_job_output_get_job_output_output_body(
    body: &mut aws_smithy_http::body::SdkBody,
) -> std::result::Result<aws_smithy_http::byte_stream::ByteStream, crate::error::GetJobOutputError>
{
    // replace the body with an empty body
    let body = std::mem::replace(body, aws_smithy_http::body::SdkBody::taken());
    Ok(aws_smithy_http::byte_stream::ByteStream::new(body))
}

pub fn deser_header_get_job_output_get_job_output_output_checksum(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-sha256-tree-hash").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_job_output_get_job_output_output_content_range(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Range").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_job_output_get_job_output_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Content-Type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_vault_access_policy_get_vault_access_policy_output_policy(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VaultAccessPolicy>,
    crate::error::GetVaultAccessPolicyError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_vault_access_policy_payload(body)
                .map_err(crate::error::GetVaultAccessPolicyError::unhandled)
        })
        .transpose()
}

pub fn deser_payload_get_vault_notifications_get_vault_notifications_output_vault_notification_config(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::VaultNotificationConfig>,
    crate::error::GetVaultNotificationsError,
> {
    (!body.is_empty())
        .then(|| {
            crate::json_deser::deser_structure_crate_model_vault_notification_config_payload(body)
                .map_err(crate::error::GetVaultNotificationsError::unhandled)
        })
        .transpose()
}

pub fn deser_header_initiate_job_initiate_job_output_job_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-job-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_initiate_job_initiate_job_output_job_output_path(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-job-output-path").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_initiate_job_initiate_job_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_initiate_multipart_upload_initiate_multipart_upload_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_initiate_multipart_upload_initiate_multipart_upload_output_upload_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-multipart-upload-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_initiate_vault_lock_initiate_vault_lock_output_lock_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-lock-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_purchase_provisioned_capacity_purchase_provisioned_capacity_output_capacity_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-capacity-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_archive_upload_archive_output_archive_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-archive-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_archive_upload_archive_output_checksum(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-sha256-tree-hash").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_archive_upload_archive_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_upload_multipart_part_upload_multipart_part_output_checksum(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amz-sha256-tree-hash").iter();
    aws_smithy_http::header::one_or_none(headers)
}
