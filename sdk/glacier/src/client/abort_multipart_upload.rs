// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AbortMultipartUpload`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::set_account_id): <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID.</p>
    ///   - [`vault_name(impl Into<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::vault_name) / [`set_vault_name(Option<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::set_vault_name): <p>The name of the vault.</p>
    ///   - [`upload_id(impl Into<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::upload_id) / [`set_upload_id(Option<String>)`](crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::set_upload_id): <p>The upload ID of the multipart upload to delete.</p>
    /// - On success, responds with [`AbortMultipartUploadOutput`](crate::operation::abort_multipart_upload::AbortMultipartUploadOutput)
    /// - On failure, responds with [`SdkError<AbortMultipartUploadError>`](crate::operation::abort_multipart_upload::AbortMultipartUploadError)
    pub fn abort_multipart_upload(
        &self,
    ) -> crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder {
        crate::operation::abort_multipart_upload::builders::AbortMultipartUploadFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
