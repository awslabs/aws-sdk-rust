// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_s3_location<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::S3Location>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::S3LocationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "BucketName" => {
                                builder = builder.set_bucket_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Prefix" => {
                                builder = builder.set_prefix(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Encryption" => {
                                builder = builder.set_encryption(
                                    crate::protocol_serde::shape_encryption::de_encryption(tokens)?,
                                );
                            }
                            "CannedACL" => {
                                builder = builder.set_canned_acl(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::CannedAcl::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "AccessControlList" => {
                                builder = builder.set_access_control_list(
                                    crate::protocol_serde::shape_access_control_policy_list::de_access_control_policy_list(tokens)?
                                );
                            }
                            "Tagging" => {
                                builder = builder.set_tagging(
                                    crate::protocol_serde::shape_hashmap::de_hashmap(tokens)?,
                                );
                            }
                            "UserMetadata" => {
                                builder = builder.set_user_metadata(
                                    crate::protocol_serde::shape_hashmap::de_hashmap(tokens)?,
                                );
                            }
                            "StorageClass" => {
                                builder = builder.set_storage_class(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::StorageClass::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_s3_location(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::S3Location,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.bucket_name {
        object.key("BucketName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.prefix {
        object.key("Prefix").string(var_2.as_str());
    }
    if let Some(var_3) = &input.encryption {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Encryption").start_object();
        crate::protocol_serde::shape_encryption::ser_encryption(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.canned_acl {
        object.key("CannedACL").string(var_5.as_str());
    }
    if let Some(var_6) = &input.access_control_list {
        let mut array_7 = object.key("AccessControlList").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_grant::ser_grant(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.tagging {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Tagging").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    if let Some(var_14) = &input.user_metadata {
        #[allow(unused_mut)]
        let mut object_15 = object.key("UserMetadata").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.storage_class {
        object.key("StorageClass").string(var_18.as_str());
    }
    Ok(())
}
