// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides options to add an archive to a vault.</p>
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub struct UploadArchiveInput {
    /// <p>The name of the vault.</p>
    pub vault_name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. </p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The optional description of the archive you are uploading.</p>
    pub archive_description: ::std::option::Option<::std::string::String>,
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
    /// <p>The data to upload.</p>
    pub body: ::aws_smithy_types::byte_stream::ByteStream,
}
impl UploadArchiveInput {
    /// <p>The name of the vault.</p>
    pub fn vault_name(&self) -> ::std::option::Option<&str> {
        self.vault_name.as_deref()
    }
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. </p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The optional description of the archive you are uploading.</p>
    pub fn archive_description(&self) -> ::std::option::Option<&str> {
        self.archive_description.as_deref()
    }
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    pub fn checksum(&self) -> ::std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// <p>The data to upload.</p>
    pub fn body(&self) -> &::aws_smithy_types::byte_stream::ByteStream {
        &self.body
    }
}
impl crate::glacier_interceptors::GlacierAccountId for UploadArchiveInput {
    fn account_id_mut(&mut self) -> &mut Option<String> {
        &mut self.account_id
    }
}
impl UploadArchiveInput {
    /// Creates a new builder-style object to manufacture [`UploadArchiveInput`](crate::operation::upload_archive::UploadArchiveInput).
    pub fn builder() -> crate::operation::upload_archive::builders::UploadArchiveInputBuilder {
        crate::operation::upload_archive::builders::UploadArchiveInputBuilder::default()
    }
}

/// A builder for [`UploadArchiveInput`](crate::operation::upload_archive::UploadArchiveInput).
#[non_exhaustive]
#[derive(::std::default::Default, ::std::fmt::Debug)]
pub struct UploadArchiveInputBuilder {
    pub(crate) vault_name: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) archive_description: ::std::option::Option<::std::string::String>,
    pub(crate) checksum: ::std::option::Option<::std::string::String>,
    pub(crate) body: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>,
}
impl UploadArchiveInputBuilder {
    /// <p>The name of the vault.</p>
    /// This field is required.
    pub fn vault_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vault_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the vault.</p>
    pub fn set_vault_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vault_name = input;
        self
    }
    /// <p>The name of the vault.</p>
    pub fn get_vault_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vault_name
    }
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. </p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. </p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The <code>AccountId</code> value is the AWS account ID of the account that owns the vault. You can either specify an AWS account ID or optionally a single '<code>-</code>' (hyphen), in which case Amazon S3 Glacier uses the AWS account ID associated with the credentials used to sign the request. If you use an account ID, do not include any hyphens ('-') in the ID. </p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The optional description of the archive you are uploading.</p>
    pub fn archive_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.archive_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional description of the archive you are uploading.</p>
    pub fn set_archive_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.archive_description = input;
        self
    }
    /// <p>The optional description of the archive you are uploading.</p>
    pub fn get_archive_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.archive_description
    }
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    pub fn checksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.checksum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    pub fn set_checksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// <p>The SHA256 tree hash of the data being uploaded.</p>
    pub fn get_checksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.checksum
    }
    /// <p>The data to upload.</p>
    pub fn body(mut self, input: ::aws_smithy_types::byte_stream::ByteStream) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data to upload.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::aws_smithy_types::byte_stream::ByteStream>) -> Self {
        self.body = input;
        self
    }
    /// <p>The data to upload.</p>
    pub fn get_body(&self) -> &::std::option::Option<::aws_smithy_types::byte_stream::ByteStream> {
        &self.body
    }
    /// Consumes the builder and constructs a [`UploadArchiveInput`](crate::operation::upload_archive::UploadArchiveInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::upload_archive::UploadArchiveInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::upload_archive::UploadArchiveInput {
            vault_name: self.vault_name,
            account_id: self.account_id,
            archive_description: self.archive_description,
            checksum: self.checksum,
            body: self.body.unwrap_or_default(),
        })
    }
}
