// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the Amazon S3 Glacier response to your request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListJobsOutput {
    /// <p>A list of job objects. Each job object contains metadata describing the job.</p>
    pub job_list: ::std::option::Option<::std::vec::Vec<crate::types::GlacierJobDescription>>,
    /// <p> An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the <code>marker</code> value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. </p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsOutput {
    /// <p>A list of job objects. Each job object contains metadata describing the job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.job_list.is_none()`.
    pub fn job_list(&self) -> &[crate::types::GlacierJobDescription] {
        self.job_list.as_deref().unwrap_or_default()
    }
    /// <p> An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the <code>marker</code> value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. </p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
    pub fn builder() -> crate::operation::list_jobs::builders::ListJobsOutputBuilder {
        crate::operation::list_jobs::builders::ListJobsOutputBuilder::default()
    }
}

/// A builder for [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListJobsOutputBuilder {
    pub(crate) job_list: ::std::option::Option<::std::vec::Vec<crate::types::GlacierJobDescription>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListJobsOutputBuilder {
    /// Appends an item to `job_list`.
    ///
    /// To override the contents of this collection use [`set_job_list`](Self::set_job_list).
    ///
    /// <p>A list of job objects. Each job object contains metadata describing the job.</p>
    pub fn job_list(mut self, input: crate::types::GlacierJobDescription) -> Self {
        let mut v = self.job_list.unwrap_or_default();
        v.push(input);
        self.job_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of job objects. Each job object contains metadata describing the job.</p>
    pub fn set_job_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GlacierJobDescription>>) -> Self {
        self.job_list = input;
        self
    }
    /// <p>A list of job objects. Each job object contains metadata describing the job.</p>
    pub fn get_job_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GlacierJobDescription>> {
        &self.job_list
    }
    /// <p> An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the <code>marker</code> value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. </p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the <code>marker</code> value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. </p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p> An opaque string used for pagination that specifies the job at which the listing of jobs should begin. You get the <code>marker</code> value from a previous List Jobs response. You only need to include the marker if you are continuing the pagination of the results started in a previous List Jobs request. </p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListJobsOutput`](crate::operation::list_jobs::ListJobsOutput).
    pub fn build(self) -> crate::operation::list_jobs::ListJobsOutput {
        crate::operation::list_jobs::ListJobsOutput {
            job_list: self.job_list,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
