// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the Amazon S3 Glacier response to your request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMultipartUploadsOutput {
    /// <p>A list of in-progress multipart uploads.</p>
    #[doc(hidden)]
    pub uploads_list: std::option::Option<std::vec::Vec<crate::types::UploadListElement>>,
    /// <p>An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is <code>null</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMultipartUploadsOutput {
    /// <p>A list of in-progress multipart uploads.</p>
    pub fn uploads_list(&self) -> std::option::Option<&[crate::types::UploadListElement]> {
        self.uploads_list.as_deref()
    }
    /// <p>An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is <code>null</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMultipartUploadsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListMultipartUploadsOutput {
    /// Creates a new builder-style object to manufacture [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
    pub fn builder(
    ) -> crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder {
        crate::operation::list_multipart_uploads::builders::ListMultipartUploadsOutputBuilder::default()
    }
}

/// A builder for [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListMultipartUploadsOutputBuilder {
    pub(crate) uploads_list: std::option::Option<std::vec::Vec<crate::types::UploadListElement>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMultipartUploadsOutputBuilder {
    /// Appends an item to `uploads_list`.
    ///
    /// To override the contents of this collection use [`set_uploads_list`](Self::set_uploads_list).
    ///
    /// <p>A list of in-progress multipart uploads.</p>
    pub fn uploads_list(mut self, input: crate::types::UploadListElement) -> Self {
        let mut v = self.uploads_list.unwrap_or_default();
        v.push(input);
        self.uploads_list = Some(v);
        self
    }
    /// <p>A list of in-progress multipart uploads.</p>
    pub fn set_uploads_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UploadListElement>>,
    ) -> Self {
        self.uploads_list = input;
        self
    }
    /// <p>An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is <code>null</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An opaque string that represents where to continue pagination of the results. You use the marker in a new List Multipart Uploads request to obtain more uploads in the list. If there are no more uploads, this value is <code>null</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListMultipartUploadsOutput`](crate::operation::list_multipart_uploads::ListMultipartUploadsOutput).
    pub fn build(self) -> crate::operation::list_multipart_uploads::ListMultipartUploadsOutput {
        crate::operation::list_multipart_uploads::ListMultipartUploadsOutput {
            uploads_list: self.uploads_list,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
