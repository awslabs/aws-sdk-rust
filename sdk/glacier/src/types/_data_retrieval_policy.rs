// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data retrieval policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataRetrievalPolicy {
    /// <p>The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.</p>
    pub rules: ::std::option::Option<::std::vec::Vec<crate::types::DataRetrievalRule>>,
}
impl DataRetrievalPolicy {
    /// <p>The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rules.is_none()`.
    pub fn rules(&self) -> &[crate::types::DataRetrievalRule] {
        self.rules.as_deref().unwrap_or_default()
    }
}
impl DataRetrievalPolicy {
    /// Creates a new builder-style object to manufacture [`DataRetrievalPolicy`](crate::types::DataRetrievalPolicy).
    pub fn builder() -> crate::types::builders::DataRetrievalPolicyBuilder {
        crate::types::builders::DataRetrievalPolicyBuilder::default()
    }
}

/// A builder for [`DataRetrievalPolicy`](crate::types::DataRetrievalPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataRetrievalPolicyBuilder {
    pub(crate) rules: ::std::option::Option<::std::vec::Vec<crate::types::DataRetrievalRule>>,
}
impl DataRetrievalPolicyBuilder {
    /// Appends an item to `rules`.
    ///
    /// To override the contents of this collection use [`set_rules`](Self::set_rules).
    ///
    /// <p>The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.</p>
    pub fn rules(mut self, input: crate::types::DataRetrievalRule) -> Self {
        let mut v = self.rules.unwrap_or_default();
        v.push(input);
        self.rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.</p>
    pub fn set_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataRetrievalRule>>) -> Self {
        self.rules = input;
        self
    }
    /// <p>The policy rule. Although this is a list type, currently there must be only one rule, which contains a Strategy field and optionally a BytesPerHour field.</p>
    pub fn get_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataRetrievalRule>> {
        &self.rules
    }
    /// Consumes the builder and constructs a [`DataRetrievalPolicy`](crate::types::DataRetrievalPolicy).
    pub fn build(self) -> crate::types::DataRetrievalPolicy {
        crate::types::DataRetrievalPolicy { rules: self.rules }
    }
}
