// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of in-progress multipart uploads for a vault.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UploadListElement {
    /// <p>The ID of a multipart upload.</p>
    #[doc(hidden)]
    pub multipart_upload_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the vault that contains the archive.</p>
    #[doc(hidden)]
    pub vault_arn: std::option::Option<std::string::String>,
    /// <p>The description of the archive that was specified in the Initiate Multipart Upload request.</p>
    #[doc(hidden)]
    pub archive_description: std::option::Option<std::string::String>,
    /// <p>The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.</p>
    #[doc(hidden)]
    pub part_size_in_bytes: i64,
    /// <p>The UTC time at which the multipart upload was initiated.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
}
impl UploadListElement {
    /// <p>The ID of a multipart upload.</p>
    pub fn multipart_upload_id(&self) -> std::option::Option<&str> {
        self.multipart_upload_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the vault that contains the archive.</p>
    pub fn vault_arn(&self) -> std::option::Option<&str> {
        self.vault_arn.as_deref()
    }
    /// <p>The description of the archive that was specified in the Initiate Multipart Upload request.</p>
    pub fn archive_description(&self) -> std::option::Option<&str> {
        self.archive_description.as_deref()
    }
    /// <p>The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.</p>
    pub fn part_size_in_bytes(&self) -> i64 {
        self.part_size_in_bytes
    }
    /// <p>The UTC time at which the multipart upload was initiated.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
}
impl UploadListElement {
    /// Creates a new builder-style object to manufacture [`UploadListElement`](crate::types::UploadListElement).
    pub fn builder() -> crate::types::builders::UploadListElementBuilder {
        crate::types::builders::UploadListElementBuilder::default()
    }
}

/// A builder for [`UploadListElement`](crate::types::UploadListElement).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UploadListElementBuilder {
    pub(crate) multipart_upload_id: std::option::Option<std::string::String>,
    pub(crate) vault_arn: std::option::Option<std::string::String>,
    pub(crate) archive_description: std::option::Option<std::string::String>,
    pub(crate) part_size_in_bytes: std::option::Option<i64>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
}
impl UploadListElementBuilder {
    /// <p>The ID of a multipart upload.</p>
    pub fn multipart_upload_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.multipart_upload_id = Some(input.into());
        self
    }
    /// <p>The ID of a multipart upload.</p>
    pub fn set_multipart_upload_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.multipart_upload_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vault that contains the archive.</p>
    pub fn vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.vault_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vault that contains the archive.</p>
    pub fn set_vault_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vault_arn = input;
        self
    }
    /// <p>The description of the archive that was specified in the Initiate Multipart Upload request.</p>
    pub fn archive_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.archive_description = Some(input.into());
        self
    }
    /// <p>The description of the archive that was specified in the Initiate Multipart Upload request.</p>
    pub fn set_archive_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.archive_description = input;
        self
    }
    /// <p>The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.</p>
    pub fn part_size_in_bytes(mut self, input: i64) -> Self {
        self.part_size_in_bytes = Some(input);
        self
    }
    /// <p>The part size, in bytes, specified in the Initiate Multipart Upload request. This is the size of all the parts in the upload except the last part, which may be smaller than this size.</p>
    pub fn set_part_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.part_size_in_bytes = input;
        self
    }
    /// <p>The UTC time at which the multipart upload was initiated.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The UTC time at which the multipart upload was initiated.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// Consumes the builder and constructs a [`UploadListElement`](crate::types::UploadListElement).
    pub fn build(self) -> crate::types::UploadListElement {
        crate::types::UploadListElement {
            multipart_upload_id: self.multipart_upload_id,
            vault_arn: self.vault_arn,
            archive_description: self.archive_description,
            part_size_in_bytes: self.part_size_in_bytes.unwrap_or_default(),
            creation_date: self.creation_date,
        }
    }
}
