// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a vault's notification configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VaultNotificationConfig {
    /// <p>The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub sns_topic: std::option::Option<std::string::String>,
    /// <p>A list of one or more events for which Amazon S3 Glacier will send a notification to the specified Amazon SNS topic.</p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl VaultNotificationConfig {
    /// <p>The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).</p>
    pub fn sns_topic(&self) -> std::option::Option<&str> {
        self.sns_topic.as_deref()
    }
    /// <p>A list of one or more events for which Amazon S3 Glacier will send a notification to the specified Amazon SNS topic.</p>
    pub fn events(&self) -> std::option::Option<&[std::string::String]> {
        self.events.as_deref()
    }
}
impl VaultNotificationConfig {
    /// Creates a new builder-style object to manufacture [`VaultNotificationConfig`](crate::types::VaultNotificationConfig).
    pub fn builder() -> crate::types::builders::VaultNotificationConfigBuilder {
        crate::types::builders::VaultNotificationConfigBuilder::default()
    }
}

/// A builder for [`VaultNotificationConfig`](crate::types::VaultNotificationConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VaultNotificationConfigBuilder {
    pub(crate) sns_topic: std::option::Option<std::string::String>,
    pub(crate) events: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl VaultNotificationConfigBuilder {
    /// <p>The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).</p>
    pub fn sns_topic(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic = Some(input.into());
        self
    }
    /// <p>The Amazon Simple Notification Service (Amazon SNS) topic Amazon Resource Name (ARN).</p>
    pub fn set_sns_topic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic = input;
        self
    }
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>A list of one or more events for which Amazon S3 Glacier will send a notification to the specified Amazon SNS topic.</p>
    pub fn events(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input.into());
        self.events = Some(v);
        self
    }
    /// <p>A list of one or more events for which Amazon S3 Glacier will send a notification to the specified Amazon SNS topic.</p>
    pub fn set_events(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// Consumes the builder and constructs a [`VaultNotificationConfig`](crate::types::VaultNotificationConfig).
    pub fn build(self) -> crate::types::VaultNotificationConfig {
        crate::types::VaultNotificationConfig {
            sns_topic: self.sns_topic,
            events: self.events,
        }
    }
}
