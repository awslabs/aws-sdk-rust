// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the Amazon S3 Glacier response to your request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVaultOutput {
    /// <p>The Amazon Resource Name (ARN) of the vault.</p>
    #[doc(hidden)]
    pub vault_arn: std::option::Option<std::string::String>,
    /// <p>The name of the vault.</p>
    #[doc(hidden)]
    pub vault_name: std::option::Option<std::string::String>,
    /// <p>The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    #[doc(hidden)]
    pub last_inventory_date: std::option::Option<std::string::String>,
    /// <p>The number of archives in the vault as of the last inventory date. This field will return <code>null</code> if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    #[doc(hidden)]
    pub number_of_archives: i64,
    /// <p>Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    #[doc(hidden)]
    pub size_in_bytes: i64,
}
impl DescribeVaultOutput {
    /// <p>The Amazon Resource Name (ARN) of the vault.</p>
    pub fn vault_arn(&self) -> std::option::Option<&str> {
        self.vault_arn.as_deref()
    }
    /// <p>The name of the vault.</p>
    pub fn vault_name(&self) -> std::option::Option<&str> {
        self.vault_name.as_deref()
    }
    /// <p>The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn last_inventory_date(&self) -> std::option::Option<&str> {
        self.last_inventory_date.as_deref()
    }
    /// <p>The number of archives in the vault as of the last inventory date. This field will return <code>null</code> if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn number_of_archives(&self) -> i64 {
        self.number_of_archives
    }
    /// <p>Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn size_in_bytes(&self) -> i64 {
        self.size_in_bytes
    }
}
impl DescribeVaultOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVaultOutput`](crate::types::DescribeVaultOutput).
    pub fn builder() -> crate::types::builders::DescribeVaultOutputBuilder {
        crate::types::builders::DescribeVaultOutputBuilder::default()
    }
}

/// A builder for [`DescribeVaultOutput`](crate::types::DescribeVaultOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeVaultOutputBuilder {
    pub(crate) vault_arn: std::option::Option<std::string::String>,
    pub(crate) vault_name: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) last_inventory_date: std::option::Option<std::string::String>,
    pub(crate) number_of_archives: std::option::Option<i64>,
    pub(crate) size_in_bytes: std::option::Option<i64>,
}
impl DescribeVaultOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the vault.</p>
    pub fn vault_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.vault_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the vault.</p>
    pub fn set_vault_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vault_arn = input;
        self
    }
    /// <p>The name of the vault.</p>
    pub fn vault_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.vault_name = Some(input.into());
        self
    }
    /// <p>The name of the vault.</p>
    pub fn set_vault_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vault_name = input;
        self
    }
    /// <p>The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The Universal Coordinated Time (UTC) date when the vault was created. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn last_inventory_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_inventory_date = Some(input.into());
        self
    }
    /// <p>The Universal Coordinated Time (UTC) date when Amazon S3 Glacier completed the last vault inventory. This value should be a string in the ISO 8601 date format, for example <code>2012-03-20T17:03:43.221Z</code>.</p>
    pub fn set_last_inventory_date(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_inventory_date = input;
        self
    }
    /// <p>The number of archives in the vault as of the last inventory date. This field will return <code>null</code> if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn number_of_archives(mut self, input: i64) -> Self {
        self.number_of_archives = Some(input);
        self
    }
    /// <p>The number of archives in the vault as of the last inventory date. This field will return <code>null</code> if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn set_number_of_archives(mut self, input: std::option::Option<i64>) -> Self {
        self.number_of_archives = input;
        self
    }
    /// <p>Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn size_in_bytes(mut self, input: i64) -> Self {
        self.size_in_bytes = Some(input);
        self
    }
    /// <p>Total size, in bytes, of the archives in the vault as of the last inventory date. This field will return null if an inventory has not yet run on the vault, for example if you just created the vault.</p>
    pub fn set_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.size_in_bytes = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeVaultOutput`](crate::types::DescribeVaultOutput).
    pub fn build(self) -> crate::types::DescribeVaultOutput {
        crate::types::DescribeVaultOutput {
            vault_arn: self.vault_arn,
            vault_name: self.vault_name,
            creation_date: self.creation_date,
            last_inventory_date: self.last_inventory_date,
            number_of_archives: self.number_of_archives.unwrap_or_default(),
            size_in_bytes: self.size_in_bytes.unwrap_or_default(),
        }
    }
}
