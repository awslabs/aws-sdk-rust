// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the comma-separated value (CSV) file to select from.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CsvInput {
    /// <p>Describes the first line of input. Valid values are <code>None</code>, <code>Ignore</code>, and <code>Use</code>.</p>
    #[doc(hidden)]
    pub file_header_info: std::option::Option<crate::types::FileHeaderInfo>,
    /// <p>A single character used to indicate that a row should be ignored when the character is present at the start of that row.</p>
    #[doc(hidden)]
    pub comments: std::option::Option<std::string::String>,
    /// <p>A single character used for escaping the quotation-mark character inside an already escaped value.</p>
    #[doc(hidden)]
    pub quote_escape_character: std::option::Option<std::string::String>,
    /// <p>A value used to separate individual records from each other.</p>
    #[doc(hidden)]
    pub record_delimiter: std::option::Option<std::string::String>,
    /// <p>A value used to separate individual fields from each other within a record.</p>
    #[doc(hidden)]
    pub field_delimiter: std::option::Option<std::string::String>,
    /// <p>A value used as an escape character where the field delimiter is part of the value.</p>
    #[doc(hidden)]
    pub quote_character: std::option::Option<std::string::String>,
}
impl CsvInput {
    /// <p>Describes the first line of input. Valid values are <code>None</code>, <code>Ignore</code>, and <code>Use</code>.</p>
    pub fn file_header_info(&self) -> std::option::Option<&crate::types::FileHeaderInfo> {
        self.file_header_info.as_ref()
    }
    /// <p>A single character used to indicate that a row should be ignored when the character is present at the start of that row.</p>
    pub fn comments(&self) -> std::option::Option<&str> {
        self.comments.as_deref()
    }
    /// <p>A single character used for escaping the quotation-mark character inside an already escaped value.</p>
    pub fn quote_escape_character(&self) -> std::option::Option<&str> {
        self.quote_escape_character.as_deref()
    }
    /// <p>A value used to separate individual records from each other.</p>
    pub fn record_delimiter(&self) -> std::option::Option<&str> {
        self.record_delimiter.as_deref()
    }
    /// <p>A value used to separate individual fields from each other within a record.</p>
    pub fn field_delimiter(&self) -> std::option::Option<&str> {
        self.field_delimiter.as_deref()
    }
    /// <p>A value used as an escape character where the field delimiter is part of the value.</p>
    pub fn quote_character(&self) -> std::option::Option<&str> {
        self.quote_character.as_deref()
    }
}
impl CsvInput {
    /// Creates a new builder-style object to manufacture [`CsvInput`](crate::types::CsvInput).
    pub fn builder() -> crate::types::builders::CsvInputBuilder {
        crate::types::builders::CsvInputBuilder::default()
    }
}

/// A builder for [`CsvInput`](crate::types::CsvInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CsvInputBuilder {
    pub(crate) file_header_info: std::option::Option<crate::types::FileHeaderInfo>,
    pub(crate) comments: std::option::Option<std::string::String>,
    pub(crate) quote_escape_character: std::option::Option<std::string::String>,
    pub(crate) record_delimiter: std::option::Option<std::string::String>,
    pub(crate) field_delimiter: std::option::Option<std::string::String>,
    pub(crate) quote_character: std::option::Option<std::string::String>,
}
impl CsvInputBuilder {
    /// <p>Describes the first line of input. Valid values are <code>None</code>, <code>Ignore</code>, and <code>Use</code>.</p>
    pub fn file_header_info(mut self, input: crate::types::FileHeaderInfo) -> Self {
        self.file_header_info = Some(input);
        self
    }
    /// <p>Describes the first line of input. Valid values are <code>None</code>, <code>Ignore</code>, and <code>Use</code>.</p>
    pub fn set_file_header_info(
        mut self,
        input: std::option::Option<crate::types::FileHeaderInfo>,
    ) -> Self {
        self.file_header_info = input;
        self
    }
    /// <p>A single character used to indicate that a row should be ignored when the character is present at the start of that row.</p>
    pub fn comments(mut self, input: impl Into<std::string::String>) -> Self {
        self.comments = Some(input.into());
        self
    }
    /// <p>A single character used to indicate that a row should be ignored when the character is present at the start of that row.</p>
    pub fn set_comments(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.comments = input;
        self
    }
    /// <p>A single character used for escaping the quotation-mark character inside an already escaped value.</p>
    pub fn quote_escape_character(mut self, input: impl Into<std::string::String>) -> Self {
        self.quote_escape_character = Some(input.into());
        self
    }
    /// <p>A single character used for escaping the quotation-mark character inside an already escaped value.</p>
    pub fn set_quote_escape_character(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.quote_escape_character = input;
        self
    }
    /// <p>A value used to separate individual records from each other.</p>
    pub fn record_delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.record_delimiter = Some(input.into());
        self
    }
    /// <p>A value used to separate individual records from each other.</p>
    pub fn set_record_delimiter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.record_delimiter = input;
        self
    }
    /// <p>A value used to separate individual fields from each other within a record.</p>
    pub fn field_delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.field_delimiter = Some(input.into());
        self
    }
    /// <p>A value used to separate individual fields from each other within a record.</p>
    pub fn set_field_delimiter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.field_delimiter = input;
        self
    }
    /// <p>A value used as an escape character where the field delimiter is part of the value.</p>
    pub fn quote_character(mut self, input: impl Into<std::string::String>) -> Self {
        self.quote_character = Some(input.into());
        self
    }
    /// <p>A value used as an escape character where the field delimiter is part of the value.</p>
    pub fn set_quote_character(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.quote_character = input;
        self
    }
    /// Consumes the builder and constructs a [`CsvInput`](crate::types::CsvInput).
    pub fn build(self) -> crate::types::CsvInput {
        crate::types::CsvInput {
            file_header_info: self.file_header_info,
            comments: self.comments,
            quote_escape_character: self.quote_escape_character,
            record_delimiter: self.record_delimiter,
            field_delimiter: self.field_delimiter,
            quote_character: self.quote_character,
        }
    }
}
