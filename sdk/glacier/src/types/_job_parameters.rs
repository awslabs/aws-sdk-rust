// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides options for defining a job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobParameters {
    /// <p>When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".</p>
    #[doc(hidden)]
    pub format: std::option::Option<std::string::String>,
    /// <p>The job type. You can initiate a job to perform a select query on an archive, retrieve an archive, or get an inventory of a vault. Valid values are "select", "archive-retrieval" and "inventory-retrieval".</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The ID of the archive that you want to retrieve. This field is required only if <code>Type</code> is set to <code>select</code> or <code>archive-retrieval</code>code&gt;. An error occurs if you specify this request parameter for an inventory retrieval job request. </p>
    #[doc(hidden)]
    pub archive_id: std::option::Option<std::string::String>,
    /// <p>The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon SNS topic ARN to which Amazon S3 Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.</p>
    #[doc(hidden)]
    pub sns_topic: std::option::Option<std::string::String>,
    /// <p>The byte range to retrieve for an archive retrieval. in the form "<i>StartByteValue</i>-<i>EndByteValue</i>" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that <i>StartByteValue</i> must be divisible by 1 MB and <i>EndByteValue</i> plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response. </p>
    /// <p>An error occurs if you specify this field for an inventory retrieval job request.</p>
    #[doc(hidden)]
    pub retrieval_byte_range: std::option::Option<std::string::String>,
    /// <p>The tier to use for a select or an archive retrieval job. Valid values are <code>Expedited</code>, <code>Standard</code>, or <code>Bulk</code>. <code>Standard</code> is the default.</p>
    #[doc(hidden)]
    pub tier: std::option::Option<std::string::String>,
    /// <p>Input parameters used for range inventory retrieval.</p>
    #[doc(hidden)]
    pub inventory_retrieval_parameters:
        std::option::Option<crate::types::InventoryRetrievalJobInput>,
    /// <p>Contains the parameters that define a job.</p>
    #[doc(hidden)]
    pub select_parameters: std::option::Option<crate::types::SelectParameters>,
    /// <p>Contains information about the location where the select job results are stored.</p>
    #[doc(hidden)]
    pub output_location: std::option::Option<crate::types::OutputLocation>,
}
impl JobParameters {
    /// <p>When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".</p>
    pub fn format(&self) -> std::option::Option<&str> {
        self.format.as_deref()
    }
    /// <p>The job type. You can initiate a job to perform a select query on an archive, retrieve an archive, or get an inventory of a vault. Valid values are "select", "archive-retrieval" and "inventory-retrieval".</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The ID of the archive that you want to retrieve. This field is required only if <code>Type</code> is set to <code>select</code> or <code>archive-retrieval</code>code&gt;. An error occurs if you specify this request parameter for an inventory retrieval job request. </p>
    pub fn archive_id(&self) -> std::option::Option<&str> {
        self.archive_id.as_deref()
    }
    /// <p>The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon SNS topic ARN to which Amazon S3 Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.</p>
    pub fn sns_topic(&self) -> std::option::Option<&str> {
        self.sns_topic.as_deref()
    }
    /// <p>The byte range to retrieve for an archive retrieval. in the form "<i>StartByteValue</i>-<i>EndByteValue</i>" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that <i>StartByteValue</i> must be divisible by 1 MB and <i>EndByteValue</i> plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response. </p>
    /// <p>An error occurs if you specify this field for an inventory retrieval job request.</p>
    pub fn retrieval_byte_range(&self) -> std::option::Option<&str> {
        self.retrieval_byte_range.as_deref()
    }
    /// <p>The tier to use for a select or an archive retrieval job. Valid values are <code>Expedited</code>, <code>Standard</code>, or <code>Bulk</code>. <code>Standard</code> is the default.</p>
    pub fn tier(&self) -> std::option::Option<&str> {
        self.tier.as_deref()
    }
    /// <p>Input parameters used for range inventory retrieval.</p>
    pub fn inventory_retrieval_parameters(
        &self,
    ) -> std::option::Option<&crate::types::InventoryRetrievalJobInput> {
        self.inventory_retrieval_parameters.as_ref()
    }
    /// <p>Contains the parameters that define a job.</p>
    pub fn select_parameters(&self) -> std::option::Option<&crate::types::SelectParameters> {
        self.select_parameters.as_ref()
    }
    /// <p>Contains information about the location where the select job results are stored.</p>
    pub fn output_location(&self) -> std::option::Option<&crate::types::OutputLocation> {
        self.output_location.as_ref()
    }
}
impl JobParameters {
    /// Creates a new builder-style object to manufacture [`JobParameters`](crate::types::JobParameters).
    pub fn builder() -> crate::types::builders::JobParametersBuilder {
        crate::types::builders::JobParametersBuilder::default()
    }
}

/// A builder for [`JobParameters`](crate::types::JobParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobParametersBuilder {
    pub(crate) format: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) archive_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) sns_topic: std::option::Option<std::string::String>,
    pub(crate) retrieval_byte_range: std::option::Option<std::string::String>,
    pub(crate) tier: std::option::Option<std::string::String>,
    pub(crate) inventory_retrieval_parameters:
        std::option::Option<crate::types::InventoryRetrievalJobInput>,
    pub(crate) select_parameters: std::option::Option<crate::types::SelectParameters>,
    pub(crate) output_location: std::option::Option<crate::types::OutputLocation>,
}
impl JobParametersBuilder {
    /// <p>When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".</p>
    pub fn format(mut self, input: impl Into<std::string::String>) -> Self {
        self.format = Some(input.into());
        self
    }
    /// <p>When initiating a job to retrieve a vault inventory, you can optionally add this parameter to your request to specify the output format. If you are initiating an inventory job and do not specify a Format field, JSON is the default format. Valid values are "CSV" and "JSON".</p>
    pub fn set_format(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.format = input;
        self
    }
    /// <p>The job type. You can initiate a job to perform a select query on an archive, retrieve an archive, or get an inventory of a vault. Valid values are "select", "archive-retrieval" and "inventory-retrieval".</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The job type. You can initiate a job to perform a select query on an archive, retrieve an archive, or get an inventory of a vault. Valid values are "select", "archive-retrieval" and "inventory-retrieval".</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ID of the archive that you want to retrieve. This field is required only if <code>Type</code> is set to <code>select</code> or <code>archive-retrieval</code>code&gt;. An error occurs if you specify this request parameter for an inventory retrieval job request. </p>
    pub fn archive_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.archive_id = Some(input.into());
        self
    }
    /// <p>The ID of the archive that you want to retrieve. This field is required only if <code>Type</code> is set to <code>select</code> or <code>archive-retrieval</code>code&gt;. An error occurs if you specify this request parameter for an inventory retrieval job request. </p>
    pub fn set_archive_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.archive_id = input;
        self
    }
    /// <p>The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The optional description for the job. The description must be less than or equal to 1,024 bytes. The allowable characters are 7-bit ASCII without control codes-specifically, ASCII values 32-126 decimal or 0x20-0x7E hexadecimal.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon SNS topic ARN to which Amazon S3 Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.</p>
    pub fn sns_topic(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic = Some(input.into());
        self
    }
    /// <p>The Amazon SNS topic ARN to which Amazon S3 Glacier sends a notification when the job is completed and the output is ready for you to download. The specified topic publishes the notification to its subscribers. The SNS topic must exist.</p>
    pub fn set_sns_topic(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic = input;
        self
    }
    /// <p>The byte range to retrieve for an archive retrieval. in the form "<i>StartByteValue</i>-<i>EndByteValue</i>" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that <i>StartByteValue</i> must be divisible by 1 MB and <i>EndByteValue</i> plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response. </p>
    /// <p>An error occurs if you specify this field for an inventory retrieval job request.</p>
    pub fn retrieval_byte_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.retrieval_byte_range = Some(input.into());
        self
    }
    /// <p>The byte range to retrieve for an archive retrieval. in the form "<i>StartByteValue</i>-<i>EndByteValue</i>" If not specified, the whole archive is retrieved. If specified, the byte range must be megabyte (1024*1024) aligned which means that <i>StartByteValue</i> must be divisible by 1 MB and <i>EndByteValue</i> plus 1 must be divisible by 1 MB or be the end of the archive specified as the archive byte size value minus 1. If RetrievalByteRange is not megabyte aligned, this operation returns a 400 response. </p>
    /// <p>An error occurs if you specify this field for an inventory retrieval job request.</p>
    pub fn set_retrieval_byte_range(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.retrieval_byte_range = input;
        self
    }
    /// <p>The tier to use for a select or an archive retrieval job. Valid values are <code>Expedited</code>, <code>Standard</code>, or <code>Bulk</code>. <code>Standard</code> is the default.</p>
    pub fn tier(mut self, input: impl Into<std::string::String>) -> Self {
        self.tier = Some(input.into());
        self
    }
    /// <p>The tier to use for a select or an archive retrieval job. Valid values are <code>Expedited</code>, <code>Standard</code>, or <code>Bulk</code>. <code>Standard</code> is the default.</p>
    pub fn set_tier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tier = input;
        self
    }
    /// <p>Input parameters used for range inventory retrieval.</p>
    pub fn inventory_retrieval_parameters(
        mut self,
        input: crate::types::InventoryRetrievalJobInput,
    ) -> Self {
        self.inventory_retrieval_parameters = Some(input);
        self
    }
    /// <p>Input parameters used for range inventory retrieval.</p>
    pub fn set_inventory_retrieval_parameters(
        mut self,
        input: std::option::Option<crate::types::InventoryRetrievalJobInput>,
    ) -> Self {
        self.inventory_retrieval_parameters = input;
        self
    }
    /// <p>Contains the parameters that define a job.</p>
    pub fn select_parameters(mut self, input: crate::types::SelectParameters) -> Self {
        self.select_parameters = Some(input);
        self
    }
    /// <p>Contains the parameters that define a job.</p>
    pub fn set_select_parameters(
        mut self,
        input: std::option::Option<crate::types::SelectParameters>,
    ) -> Self {
        self.select_parameters = input;
        self
    }
    /// <p>Contains information about the location where the select job results are stored.</p>
    pub fn output_location(mut self, input: crate::types::OutputLocation) -> Self {
        self.output_location = Some(input);
        self
    }
    /// <p>Contains information about the location where the select job results are stored.</p>
    pub fn set_output_location(
        mut self,
        input: std::option::Option<crate::types::OutputLocation>,
    ) -> Self {
        self.output_location = input;
        self
    }
    /// Consumes the builder and constructs a [`JobParameters`](crate::types::JobParameters).
    pub fn build(self) -> crate::types::JobParameters {
        crate::types::JobParameters {
            format: self.format,
            r#type: self.r#type,
            archive_id: self.archive_id,
            description: self.description,
            sns_topic: self.sns_topic,
            retrieval_byte_range: self.retrieval_byte_range,
            tier: self.tier,
            inventory_retrieval_parameters: self.inventory_retrieval_parameters,
            select_parameters: self.select_parameters,
            output_location: self.output_location,
        }
    }
}
