// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_jobs_output_marker(
    input: &crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_multipart_uploads_output_marker(
    input: &crate::operation::list_multipart_uploads::ListMultipartUploadsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_parts_output_marker(
    input: &crate::operation::list_parts::ListPartsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_vaults_output_marker(
    input: &crate::operation::list_vaults::ListVaultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_jobs_output_job_list(
    input: crate::operation::list_jobs::ListJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::GlacierJobDescription>> {
    let input = match input.job_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_multipart_uploads_output_uploads_list(
    input: crate::operation::list_multipart_uploads::ListMultipartUploadsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::UploadListElement>> {
    let input = match input.uploads_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_parts_output_parts(
    input: crate::operation::list_parts::ListPartsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PartListElement>> {
    let input = match input.parts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_vaults_output_vault_list(
    input: crate::operation::list_vaults::ListVaultsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DescribeVaultOutput>> {
    let input = match input.vault_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
