// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::enable_organization_admin_account::_enable_organization_admin_account_output::EnableOrganizationAdminAccountOutputBuilder;

pub use crate::operation::enable_organization_admin_account::_enable_organization_admin_account_input::EnableOrganizationAdminAccountInputBuilder;

impl crate::operation::enable_organization_admin_account::builders::EnableOrganizationAdminAccountInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.enable_organization_admin_account();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `EnableOrganizationAdminAccount`.
///
/// <p>Designates the Detective administrator account for the organization in the current Region.</p>
/// <p>If the account does not have Detective enabled, then enables Detective for that account and creates a new behavior graph.</p>
/// <p>Can only be called by the organization management account.</p>
/// <p>If the organization has a delegated administrator account in Organizations, then the Detective administrator account must be either the delegated administrator account or the organization management account.</p>
/// <p>If the organization does not have a delegated administrator account in Organizations, then you can choose any account in the organization. If you choose an account other than the organization management account, Detective calls Organizations to make that account the delegated administrator account for Detective. The organization management account cannot be the delegated administrator account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct EnableOrganizationAdminAccountFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::enable_organization_admin_account::builders::EnableOrganizationAdminAccountInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountOutput,
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountError,
    > for EnableOrganizationAdminAccountFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountOutput,
            crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl EnableOrganizationAdminAccountFluentBuilder {
    /// Creates a new `EnableOrganizationAdminAccount`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the EnableOrganizationAdminAccount as a reference.
    pub fn as_input(&self) -> &crate::operation::enable_organization_admin_account::builders::EnableOrganizationAdminAccountInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccount::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccount::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountOutput,
        crate::operation::enable_organization_admin_account::EnableOrganizationAdminAccountError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Web Services account identifier of the account to designate as the Detective administrator account for the organization.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account identifier of the account to designate as the Detective administrator account for the organization.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The Amazon Web Services account identifier of the account to designate as the Detective administrator account for the organization.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_account_id()
    }
}
