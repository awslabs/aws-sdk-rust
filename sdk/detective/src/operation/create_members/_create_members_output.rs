// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMembersOutput {
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::types::MemberDetail>>,
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl CreateMembersOutput {
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    pub fn members(&self) -> std::option::Option<&[crate::types::MemberDetail]> {
        self.members.as_deref()
    }
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::types::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateMembersOutput {
    /// Creates a new builder-style object to manufacture [`CreateMembersOutput`](crate::operation::create_members::CreateMembersOutput).
    pub fn builder() -> crate::operation::create_members::builders::CreateMembersOutputBuilder {
        crate::operation::create_members::builders::CreateMembersOutputBuilder::default()
    }
}

/// A builder for [`CreateMembersOutput`](crate::operation::create_members::CreateMembersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateMembersOutputBuilder {
    pub(crate) members: std::option::Option<std::vec::Vec<crate::types::MemberDetail>>,
    pub(crate) unprocessed_accounts:
        std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl CreateMembersOutputBuilder {
    /// Appends an item to `members`.
    ///
    /// To override the contents of this collection use [`set_members`](Self::set_members).
    ///
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    pub fn members(mut self, input: crate::types::MemberDetail) -> Self {
        let mut v = self.members.unwrap_or_default();
        v.push(input);
        self.members = Some(v);
        self
    }
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    pub fn set_members(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MemberDetail>>,
    ) -> Self {
        self.members = input;
        self
    }
    /// Appends an item to `unprocessed_accounts`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
    ///
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    pub fn unprocessed_accounts(mut self, input: crate::types::UnprocessedAccount) -> Self {
        let mut v = self.unprocessed_accounts.unwrap_or_default();
        v.push(input);
        self.unprocessed_accounts = Some(v);
        self
    }
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    pub fn set_unprocessed_accounts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnprocessedAccount>>,
    ) -> Self {
        self.unprocessed_accounts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateMembersOutput`](crate::operation::create_members::CreateMembersOutput).
    pub fn build(self) -> crate::operation::create_members::CreateMembersOutput {
        crate::operation::create_members::CreateMembersOutput {
            members: self.members,
            unprocessed_accounts: self.unprocessed_accounts,
            _request_id: self._request_id,
        }
    }
}
