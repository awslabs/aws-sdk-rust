// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on data source packages for members of the behavior graph.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MembershipDatasources {
    /// <p>The account identifier of the Amazon Web Services account.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the organization behavior graph.</p>
    #[doc(hidden)]
    pub graph_arn: std::option::Option<std::string::String>,
    /// <p>Details on when a data source package was added to a behavior graph.</p>
    #[doc(hidden)]
    pub datasource_package_ingest_history: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            std::collections::HashMap<
                crate::types::DatasourcePackageIngestState,
                crate::types::TimestampForCollection,
            >,
        >,
    >,
}
impl MembershipDatasources {
    /// <p>The account identifier of the Amazon Web Services account.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ARN of the organization behavior graph.</p>
    pub fn graph_arn(&self) -> std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
    /// <p>Details on when a data source package was added to a behavior graph.</p>
    pub fn datasource_package_ingest_history(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DatasourcePackage,
            std::collections::HashMap<
                crate::types::DatasourcePackageIngestState,
                crate::types::TimestampForCollection,
            >,
        >,
    > {
        self.datasource_package_ingest_history.as_ref()
    }
}
impl MembershipDatasources {
    /// Creates a new builder-style object to manufacture [`MembershipDatasources`](crate::types::MembershipDatasources).
    pub fn builder() -> crate::types::builders::MembershipDatasourcesBuilder {
        crate::types::builders::MembershipDatasourcesBuilder::default()
    }
}

/// A builder for [`MembershipDatasources`](crate::types::MembershipDatasources).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MembershipDatasourcesBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) graph_arn: std::option::Option<std::string::String>,
    pub(crate) datasource_package_ingest_history: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            std::collections::HashMap<
                crate::types::DatasourcePackageIngestState,
                crate::types::TimestampForCollection,
            >,
        >,
    >,
}
impl MembershipDatasourcesBuilder {
    /// <p>The account identifier of the Amazon Web Services account.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The account identifier of the Amazon Web Services account.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The ARN of the organization behavior graph.</p>
    pub fn graph_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.graph_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the organization behavior graph.</p>
    pub fn set_graph_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// Adds a key-value pair to `datasource_package_ingest_history`.
    ///
    /// To override the contents of this collection use [`set_datasource_package_ingest_history`](Self::set_datasource_package_ingest_history).
    ///
    /// <p>Details on when a data source package was added to a behavior graph.</p>
    pub fn datasource_package_ingest_history(
        mut self,
        k: crate::types::DatasourcePackage,
        v: std::collections::HashMap<
            crate::types::DatasourcePackageIngestState,
            crate::types::TimestampForCollection,
        >,
    ) -> Self {
        let mut hash_map = self.datasource_package_ingest_history.unwrap_or_default();
        hash_map.insert(k, v);
        self.datasource_package_ingest_history = Some(hash_map);
        self
    }
    /// <p>Details on when a data source package was added to a behavior graph.</p>
    pub fn set_datasource_package_ingest_history(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DatasourcePackage,
                std::collections::HashMap<
                    crate::types::DatasourcePackageIngestState,
                    crate::types::TimestampForCollection,
                >,
            >,
        >,
    ) -> Self {
        self.datasource_package_ingest_history = input;
        self
    }
    /// Consumes the builder and constructs a [`MembershipDatasources`](crate::types::MembershipDatasources).
    pub fn build(self) -> crate::types::MembershipDatasources {
        crate::types::MembershipDatasources {
            account_id: self.account_id,
            graph_arn: self.graph_arn,
            datasource_package_ingest_history: self.datasource_package_ingest_history,
        }
    }
}
