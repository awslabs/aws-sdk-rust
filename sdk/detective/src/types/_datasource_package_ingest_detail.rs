// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the data source packages ingested by your behavior graph.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasourcePackageIngestDetail {
    /// <p>Details on which data source packages are ingested for a member account.</p>
    #[doc(hidden)]
    pub datasource_package_ingest_state:
        std::option::Option<crate::types::DatasourcePackageIngestState>,
    /// <p>The date a data source package was enabled for this account</p>
    #[doc(hidden)]
    pub last_ingest_state_change: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackageIngestState,
            crate::types::TimestampForCollection,
        >,
    >,
}
impl DatasourcePackageIngestDetail {
    /// <p>Details on which data source packages are ingested for a member account.</p>
    pub fn datasource_package_ingest_state(
        &self,
    ) -> std::option::Option<&crate::types::DatasourcePackageIngestState> {
        self.datasource_package_ingest_state.as_ref()
    }
    /// <p>The date a data source package was enabled for this account</p>
    pub fn last_ingest_state_change(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DatasourcePackageIngestState,
            crate::types::TimestampForCollection,
        >,
    > {
        self.last_ingest_state_change.as_ref()
    }
}
impl DatasourcePackageIngestDetail {
    /// Creates a new builder-style object to manufacture [`DatasourcePackageIngestDetail`](crate::types::DatasourcePackageIngestDetail).
    pub fn builder() -> crate::types::builders::DatasourcePackageIngestDetailBuilder {
        crate::types::builders::DatasourcePackageIngestDetailBuilder::default()
    }
}

/// A builder for [`DatasourcePackageIngestDetail`](crate::types::DatasourcePackageIngestDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasourcePackageIngestDetailBuilder {
    pub(crate) datasource_package_ingest_state:
        std::option::Option<crate::types::DatasourcePackageIngestState>,
    pub(crate) last_ingest_state_change: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackageIngestState,
            crate::types::TimestampForCollection,
        >,
    >,
}
impl DatasourcePackageIngestDetailBuilder {
    /// <p>Details on which data source packages are ingested for a member account.</p>
    pub fn datasource_package_ingest_state(
        mut self,
        input: crate::types::DatasourcePackageIngestState,
    ) -> Self {
        self.datasource_package_ingest_state = Some(input);
        self
    }
    /// <p>Details on which data source packages are ingested for a member account.</p>
    pub fn set_datasource_package_ingest_state(
        mut self,
        input: std::option::Option<crate::types::DatasourcePackageIngestState>,
    ) -> Self {
        self.datasource_package_ingest_state = input;
        self
    }
    /// Adds a key-value pair to `last_ingest_state_change`.
    ///
    /// To override the contents of this collection use [`set_last_ingest_state_change`](Self::set_last_ingest_state_change).
    ///
    /// <p>The date a data source package was enabled for this account</p>
    pub fn last_ingest_state_change(
        mut self,
        k: crate::types::DatasourcePackageIngestState,
        v: crate::types::TimestampForCollection,
    ) -> Self {
        let mut hash_map = self.last_ingest_state_change.unwrap_or_default();
        hash_map.insert(k, v);
        self.last_ingest_state_change = Some(hash_map);
        self
    }
    /// <p>The date a data source package was enabled for this account</p>
    pub fn set_last_ingest_state_change(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DatasourcePackageIngestState,
                crate::types::TimestampForCollection,
            >,
        >,
    ) -> Self {
        self.last_ingest_state_change = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasourcePackageIngestDetail`](crate::types::DatasourcePackageIngestDetail).
    pub fn build(self) -> crate::types::DatasourcePackageIngestDetail {
        crate::types::DatasourcePackageIngestDetail {
            datasource_package_ingest_state: self.datasource_package_ingest_state,
            last_ingest_state_change: self.last_ingest_state_change,
        }
    }
}
