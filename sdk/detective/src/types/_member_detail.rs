// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a member account in a behavior graph.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MemberDetail {
    /// <p>The Amazon Web Services account identifier for the member account.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account root user email address for the member account.</p>
    #[doc(hidden)]
    pub email_address: std::option::Option<std::string::String>,
    /// <p>The ARN of the behavior graph.</p>
    #[doc(hidden)]
    pub graph_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    #[deprecated(note = "This property is deprecated. Use AdministratorId instead.")]
    #[doc(hidden)]
    pub master_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    #[doc(hidden)]
    pub administrator_id: std::option::Option<std::string::String>,
    /// <p>The current membership status of the member account. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>INVITED</code> - For invited accounts only. Indicates that the member was sent an invitation but has not yet responded.</p> </li>
    /// <li> <p> <code>VERIFICATION_IN_PROGRESS</code> - For invited accounts only, indicates that Detective is verifying that the account identifier and email address provided for the member account match. If they do match, then Detective sends the invitation. If the email address and account identifier don't match, then the member cannot be added to the behavior graph.</p> <p>For organization accounts in the organization behavior graph, indicates that Detective is verifying that the account belongs to the organization.</p> </li>
    /// <li> <p> <code>VERIFICATION_FAILED</code> - For invited accounts only. Indicates that the account and email address provided for the member account do not match, and Detective did not send an invitation to the account.</p> </li>
    /// <li> <p> <code>ENABLED</code> - Indicates that the member account currently contributes data to the behavior graph. For invited accounts, the member account accepted the invitation. For organization accounts in the organization behavior graph, the Detective administrator account enabled the organization account as a member account.</p> </li>
    /// <li> <p> <code>ACCEPTED_BUT_DISABLED</code> - The account accepted the invitation, or was enabled by the Detective administrator account, but is prevented from contributing data to the behavior graph. <code>DisabledReason</code> provides the reason why the member account is not enabled.</p> </li>
    /// </ul>
    /// <p>Invited accounts that declined an invitation or that were removed from the behavior graph are not included. In the organization behavior graph, organization accounts that the Detective administrator account did not enable are not included.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::MemberStatus>,
    /// <p>For member accounts with a status of <code>ACCEPTED_BUT_DISABLED</code>, the reason that the member account is not enabled.</p>
    /// <p>The reason can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>VOLUME_TOO_HIGH</code> - Indicates that adding the member account would cause the data volume for the behavior graph to be too high.</p> </li>
    /// <li> <p> <code>VOLUME_UNKNOWN</code> - Indicates that Detective is unable to verify the data volume for the member account. This is usually because the member account is not enrolled in Amazon GuardDuty. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub disabled_reason: std::option::Option<crate::types::MemberDisabledReason>,
    /// <p>For invited accounts, the date and time that Detective sent the invitation to the account. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[doc(hidden)]
    pub invited_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time that the member account was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[doc(hidden)]
    pub updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The data volume in bytes per day for the member account.</p>
    #[deprecated(
        note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
    )]
    #[doc(hidden)]
    pub volume_usage_in_bytes: std::option::Option<i64>,
    /// <p>The data and time when the member account data volume was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(
        note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
    )]
    #[doc(hidden)]
    pub volume_usage_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The member account data volume as a percentage of the maximum allowed data volume. 0 indicates 0 percent, and 100 indicates 100 percent.</p>
    /// <p>Note that this is not the percentage of the behavior graph data volume.</p>
    /// <p>For example, the data volume for the behavior graph is 80 GB per day. The maximum data volume is 160 GB per day. If the data volume for the member account is 40 GB per day, then <code>PercentOfGraphUtilization</code> is 25. It represents 25% of the maximum allowed data volume. </p>
    #[deprecated(
        note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
    )]
    #[doc(hidden)]
    pub percent_of_graph_utilization: std::option::Option<f64>,
    /// <p>The date and time when the graph utilization percentage was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(
        note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead."
    )]
    #[doc(hidden)]
    pub percent_of_graph_utilization_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of behavior graph membership.</p>
    /// <p>For an organization account in the organization behavior graph, the type is <code>ORGANIZATION</code>.</p>
    /// <p>For an account that was invited to a behavior graph, the type is <code>INVITATION</code>. </p>
    #[doc(hidden)]
    pub invitation_type: std::option::Option<crate::types::InvitationType>,
    /// <p>Details on the volume of usage for each data source package in a behavior graph.</p>
    #[doc(hidden)]
    pub volume_usage_by_datasource_package: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageUsageInfo,
        >,
    >,
    /// <p>The state of a data source package for the behavior graph.</p>
    #[doc(hidden)]
    pub datasource_package_ingest_states: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageIngestState,
        >,
    >,
}
impl MemberDetail {
    /// <p>The Amazon Web Services account identifier for the member account.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Web Services account root user email address for the member account.</p>
    pub fn email_address(&self) -> std::option::Option<&str> {
        self.email_address.as_deref()
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn graph_arn(&self) -> std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    #[deprecated(note = "This property is deprecated. Use AdministratorId instead.")]
    pub fn master_id(&self) -> std::option::Option<&str> {
        self.master_id.as_deref()
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    pub fn administrator_id(&self) -> std::option::Option<&str> {
        self.administrator_id.as_deref()
    }
    /// <p>The current membership status of the member account. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>INVITED</code> - For invited accounts only. Indicates that the member was sent an invitation but has not yet responded.</p> </li>
    /// <li> <p> <code>VERIFICATION_IN_PROGRESS</code> - For invited accounts only, indicates that Detective is verifying that the account identifier and email address provided for the member account match. If they do match, then Detective sends the invitation. If the email address and account identifier don't match, then the member cannot be added to the behavior graph.</p> <p>For organization accounts in the organization behavior graph, indicates that Detective is verifying that the account belongs to the organization.</p> </li>
    /// <li> <p> <code>VERIFICATION_FAILED</code> - For invited accounts only. Indicates that the account and email address provided for the member account do not match, and Detective did not send an invitation to the account.</p> </li>
    /// <li> <p> <code>ENABLED</code> - Indicates that the member account currently contributes data to the behavior graph. For invited accounts, the member account accepted the invitation. For organization accounts in the organization behavior graph, the Detective administrator account enabled the organization account as a member account.</p> </li>
    /// <li> <p> <code>ACCEPTED_BUT_DISABLED</code> - The account accepted the invitation, or was enabled by the Detective administrator account, but is prevented from contributing data to the behavior graph. <code>DisabledReason</code> provides the reason why the member account is not enabled.</p> </li>
    /// </ul>
    /// <p>Invited accounts that declined an invitation or that were removed from the behavior graph are not included. In the organization behavior graph, organization accounts that the Detective administrator account did not enable are not included.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::MemberStatus> {
        self.status.as_ref()
    }
    /// <p>For member accounts with a status of <code>ACCEPTED_BUT_DISABLED</code>, the reason that the member account is not enabled.</p>
    /// <p>The reason can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>VOLUME_TOO_HIGH</code> - Indicates that adding the member account would cause the data volume for the behavior graph to be too high.</p> </li>
    /// <li> <p> <code>VOLUME_UNKNOWN</code> - Indicates that Detective is unable to verify the data volume for the member account. This is usually because the member account is not enrolled in Amazon GuardDuty. </p> </li>
    /// </ul>
    pub fn disabled_reason(&self) -> std::option::Option<&crate::types::MemberDisabledReason> {
        self.disabled_reason.as_ref()
    }
    /// <p>For invited accounts, the date and time that Detective sent the invitation to the account. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn invited_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.invited_time.as_ref()
    }
    /// <p>The date and time that the member account was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_time.as_ref()
    }
    /// <p>The data volume in bytes per day for the member account.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn volume_usage_in_bytes(&self) -> std::option::Option<i64> {
        self.volume_usage_in_bytes
    }
    /// <p>The data and time when the member account data volume was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn volume_usage_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.volume_usage_updated_time.as_ref()
    }
    /// <p>The member account data volume as a percentage of the maximum allowed data volume. 0 indicates 0 percent, and 100 indicates 100 percent.</p>
    /// <p>Note that this is not the percentage of the behavior graph data volume.</p>
    /// <p>For example, the data volume for the behavior graph is 80 GB per day. The maximum data volume is 160 GB per day. If the data volume for the member account is 40 GB per day, then <code>PercentOfGraphUtilization</code> is 25. It represents 25% of the maximum allowed data volume. </p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn percent_of_graph_utilization(&self) -> std::option::Option<f64> {
        self.percent_of_graph_utilization
    }
    /// <p>The date and time when the graph utilization percentage was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn percent_of_graph_utilization_updated_time(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.percent_of_graph_utilization_updated_time.as_ref()
    }
    /// <p>The type of behavior graph membership.</p>
    /// <p>For an organization account in the organization behavior graph, the type is <code>ORGANIZATION</code>.</p>
    /// <p>For an account that was invited to a behavior graph, the type is <code>INVITATION</code>. </p>
    pub fn invitation_type(&self) -> std::option::Option<&crate::types::InvitationType> {
        self.invitation_type.as_ref()
    }
    /// <p>Details on the volume of usage for each data source package in a behavior graph.</p>
    pub fn volume_usage_by_datasource_package(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageUsageInfo,
        >,
    > {
        self.volume_usage_by_datasource_package.as_ref()
    }
    /// <p>The state of a data source package for the behavior graph.</p>
    pub fn datasource_package_ingest_states(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageIngestState,
        >,
    > {
        self.datasource_package_ingest_states.as_ref()
    }
}
impl MemberDetail {
    /// Creates a new builder-style object to manufacture [`MemberDetail`](crate::types::MemberDetail).
    pub fn builder() -> crate::types::builders::MemberDetailBuilder {
        crate::types::builders::MemberDetailBuilder::default()
    }
}

/// A builder for [`MemberDetail`](crate::types::MemberDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MemberDetailBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) email_address: std::option::Option<std::string::String>,
    pub(crate) graph_arn: std::option::Option<std::string::String>,
    pub(crate) master_id: std::option::Option<std::string::String>,
    pub(crate) administrator_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::MemberStatus>,
    pub(crate) disabled_reason: std::option::Option<crate::types::MemberDisabledReason>,
    pub(crate) invited_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) volume_usage_in_bytes: std::option::Option<i64>,
    pub(crate) volume_usage_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) percent_of_graph_utilization: std::option::Option<f64>,
    pub(crate) percent_of_graph_utilization_updated_time:
        std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) invitation_type: std::option::Option<crate::types::InvitationType>,
    pub(crate) volume_usage_by_datasource_package: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageUsageInfo,
        >,
    >,
    pub(crate) datasource_package_ingest_states: std::option::Option<
        std::collections::HashMap<
            crate::types::DatasourcePackage,
            crate::types::DatasourcePackageIngestState,
        >,
    >,
}
impl MemberDetailBuilder {
    /// <p>The Amazon Web Services account identifier for the member account.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account identifier for the member account.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account root user email address for the member account.</p>
    pub fn email_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_address = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account root user email address for the member account.</p>
    pub fn set_email_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email_address = input;
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn graph_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.graph_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the behavior graph.</p>
    pub fn set_graph_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.graph_arn = input;
        self
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    #[deprecated(note = "This property is deprecated. Use AdministratorId instead.")]
    pub fn master_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    #[deprecated(note = "This property is deprecated. Use AdministratorId instead.")]
    pub fn set_master_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.master_id = input;
        self
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    pub fn administrator_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.administrator_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account identifier of the administrator account for the behavior graph.</p>
    pub fn set_administrator_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.administrator_id = input;
        self
    }
    /// <p>The current membership status of the member account. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>INVITED</code> - For invited accounts only. Indicates that the member was sent an invitation but has not yet responded.</p> </li>
    /// <li> <p> <code>VERIFICATION_IN_PROGRESS</code> - For invited accounts only, indicates that Detective is verifying that the account identifier and email address provided for the member account match. If they do match, then Detective sends the invitation. If the email address and account identifier don't match, then the member cannot be added to the behavior graph.</p> <p>For organization accounts in the organization behavior graph, indicates that Detective is verifying that the account belongs to the organization.</p> </li>
    /// <li> <p> <code>VERIFICATION_FAILED</code> - For invited accounts only. Indicates that the account and email address provided for the member account do not match, and Detective did not send an invitation to the account.</p> </li>
    /// <li> <p> <code>ENABLED</code> - Indicates that the member account currently contributes data to the behavior graph. For invited accounts, the member account accepted the invitation. For organization accounts in the organization behavior graph, the Detective administrator account enabled the organization account as a member account.</p> </li>
    /// <li> <p> <code>ACCEPTED_BUT_DISABLED</code> - The account accepted the invitation, or was enabled by the Detective administrator account, but is prevented from contributing data to the behavior graph. <code>DisabledReason</code> provides the reason why the member account is not enabled.</p> </li>
    /// </ul>
    /// <p>Invited accounts that declined an invitation or that were removed from the behavior graph are not included. In the organization behavior graph, organization accounts that the Detective administrator account did not enable are not included.</p>
    pub fn status(mut self, input: crate::types::MemberStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current membership status of the member account. The status can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>INVITED</code> - For invited accounts only. Indicates that the member was sent an invitation but has not yet responded.</p> </li>
    /// <li> <p> <code>VERIFICATION_IN_PROGRESS</code> - For invited accounts only, indicates that Detective is verifying that the account identifier and email address provided for the member account match. If they do match, then Detective sends the invitation. If the email address and account identifier don't match, then the member cannot be added to the behavior graph.</p> <p>For organization accounts in the organization behavior graph, indicates that Detective is verifying that the account belongs to the organization.</p> </li>
    /// <li> <p> <code>VERIFICATION_FAILED</code> - For invited accounts only. Indicates that the account and email address provided for the member account do not match, and Detective did not send an invitation to the account.</p> </li>
    /// <li> <p> <code>ENABLED</code> - Indicates that the member account currently contributes data to the behavior graph. For invited accounts, the member account accepted the invitation. For organization accounts in the organization behavior graph, the Detective administrator account enabled the organization account as a member account.</p> </li>
    /// <li> <p> <code>ACCEPTED_BUT_DISABLED</code> - The account accepted the invitation, or was enabled by the Detective administrator account, but is prevented from contributing data to the behavior graph. <code>DisabledReason</code> provides the reason why the member account is not enabled.</p> </li>
    /// </ul>
    /// <p>Invited accounts that declined an invitation or that were removed from the behavior graph are not included. In the organization behavior graph, organization accounts that the Detective administrator account did not enable are not included.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::MemberStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>For member accounts with a status of <code>ACCEPTED_BUT_DISABLED</code>, the reason that the member account is not enabled.</p>
    /// <p>The reason can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>VOLUME_TOO_HIGH</code> - Indicates that adding the member account would cause the data volume for the behavior graph to be too high.</p> </li>
    /// <li> <p> <code>VOLUME_UNKNOWN</code> - Indicates that Detective is unable to verify the data volume for the member account. This is usually because the member account is not enrolled in Amazon GuardDuty. </p> </li>
    /// </ul>
    pub fn disabled_reason(mut self, input: crate::types::MemberDisabledReason) -> Self {
        self.disabled_reason = Some(input);
        self
    }
    /// <p>For member accounts with a status of <code>ACCEPTED_BUT_DISABLED</code>, the reason that the member account is not enabled.</p>
    /// <p>The reason can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>VOLUME_TOO_HIGH</code> - Indicates that adding the member account would cause the data volume for the behavior graph to be too high.</p> </li>
    /// <li> <p> <code>VOLUME_UNKNOWN</code> - Indicates that Detective is unable to verify the data volume for the member account. This is usually because the member account is not enrolled in Amazon GuardDuty. </p> </li>
    /// </ul>
    pub fn set_disabled_reason(
        mut self,
        input: std::option::Option<crate::types::MemberDisabledReason>,
    ) -> Self {
        self.disabled_reason = input;
        self
    }
    /// <p>For invited accounts, the date and time that Detective sent the invitation to the account. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn invited_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.invited_time = Some(input);
        self
    }
    /// <p>For invited accounts, the date and time that Detective sent the invitation to the account. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn set_invited_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.invited_time = input;
        self
    }
    /// <p>The date and time that the member account was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_time = Some(input);
        self
    }
    /// <p>The date and time that the member account was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    pub fn set_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_time = input;
        self
    }
    /// <p>The data volume in bytes per day for the member account.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn volume_usage_in_bytes(mut self, input: i64) -> Self {
        self.volume_usage_in_bytes = Some(input);
        self
    }
    /// <p>The data volume in bytes per day for the member account.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn set_volume_usage_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_usage_in_bytes = input;
        self
    }
    /// <p>The data and time when the member account data volume was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn volume_usage_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.volume_usage_updated_time = Some(input);
        self
    }
    /// <p>The data and time when the member account data volume was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn set_volume_usage_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.volume_usage_updated_time = input;
        self
    }
    /// <p>The member account data volume as a percentage of the maximum allowed data volume. 0 indicates 0 percent, and 100 indicates 100 percent.</p>
    /// <p>Note that this is not the percentage of the behavior graph data volume.</p>
    /// <p>For example, the data volume for the behavior graph is 80 GB per day. The maximum data volume is 160 GB per day. If the data volume for the member account is 40 GB per day, then <code>PercentOfGraphUtilization</code> is 25. It represents 25% of the maximum allowed data volume. </p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn percent_of_graph_utilization(mut self, input: f64) -> Self {
        self.percent_of_graph_utilization = Some(input);
        self
    }
    /// <p>The member account data volume as a percentage of the maximum allowed data volume. 0 indicates 0 percent, and 100 indicates 100 percent.</p>
    /// <p>Note that this is not the percentage of the behavior graph data volume.</p>
    /// <p>For example, the data volume for the behavior graph is 80 GB per day. The maximum data volume is 160 GB per day. If the data volume for the member account is 40 GB per day, then <code>PercentOfGraphUtilization</code> is 25. It represents 25% of the maximum allowed data volume. </p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn set_percent_of_graph_utilization(mut self, input: std::option::Option<f64>) -> Self {
        self.percent_of_graph_utilization = input;
        self
    }
    /// <p>The date and time when the graph utilization percentage was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn percent_of_graph_utilization_updated_time(
        mut self,
        input: aws_smithy_types::DateTime,
    ) -> Self {
        self.percent_of_graph_utilization_updated_time = Some(input);
        self
    }
    /// <p>The date and time when the graph utilization percentage was last updated. The value is an ISO8601 formatted string. For example, <code>2021-08-18T16:35:56.284Z</code>.</p>
    #[deprecated(note = "This property is deprecated. Use VolumeUsageByDatasourcePackage instead.")]
    pub fn set_percent_of_graph_utilization_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.percent_of_graph_utilization_updated_time = input;
        self
    }
    /// <p>The type of behavior graph membership.</p>
    /// <p>For an organization account in the organization behavior graph, the type is <code>ORGANIZATION</code>.</p>
    /// <p>For an account that was invited to a behavior graph, the type is <code>INVITATION</code>. </p>
    pub fn invitation_type(mut self, input: crate::types::InvitationType) -> Self {
        self.invitation_type = Some(input);
        self
    }
    /// <p>The type of behavior graph membership.</p>
    /// <p>For an organization account in the organization behavior graph, the type is <code>ORGANIZATION</code>.</p>
    /// <p>For an account that was invited to a behavior graph, the type is <code>INVITATION</code>. </p>
    pub fn set_invitation_type(
        mut self,
        input: std::option::Option<crate::types::InvitationType>,
    ) -> Self {
        self.invitation_type = input;
        self
    }
    /// Adds a key-value pair to `volume_usage_by_datasource_package`.
    ///
    /// To override the contents of this collection use [`set_volume_usage_by_datasource_package`](Self::set_volume_usage_by_datasource_package).
    ///
    /// <p>Details on the volume of usage for each data source package in a behavior graph.</p>
    pub fn volume_usage_by_datasource_package(
        mut self,
        k: crate::types::DatasourcePackage,
        v: crate::types::DatasourcePackageUsageInfo,
    ) -> Self {
        let mut hash_map = self.volume_usage_by_datasource_package.unwrap_or_default();
        hash_map.insert(k, v);
        self.volume_usage_by_datasource_package = Some(hash_map);
        self
    }
    /// <p>Details on the volume of usage for each data source package in a behavior graph.</p>
    pub fn set_volume_usage_by_datasource_package(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DatasourcePackage,
                crate::types::DatasourcePackageUsageInfo,
            >,
        >,
    ) -> Self {
        self.volume_usage_by_datasource_package = input;
        self
    }
    /// Adds a key-value pair to `datasource_package_ingest_states`.
    ///
    /// To override the contents of this collection use [`set_datasource_package_ingest_states`](Self::set_datasource_package_ingest_states).
    ///
    /// <p>The state of a data source package for the behavior graph.</p>
    pub fn datasource_package_ingest_states(
        mut self,
        k: crate::types::DatasourcePackage,
        v: crate::types::DatasourcePackageIngestState,
    ) -> Self {
        let mut hash_map = self.datasource_package_ingest_states.unwrap_or_default();
        hash_map.insert(k, v);
        self.datasource_package_ingest_states = Some(hash_map);
        self
    }
    /// <p>The state of a data source package for the behavior graph.</p>
    pub fn set_datasource_package_ingest_states(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                crate::types::DatasourcePackage,
                crate::types::DatasourcePackageIngestState,
            >,
        >,
    ) -> Self {
        self.datasource_package_ingest_states = input;
        self
    }
    /// Consumes the builder and constructs a [`MemberDetail`](crate::types::MemberDetail).
    pub fn build(self) -> crate::types::MemberDetail {
        crate::types::MemberDetail {
            account_id: self.account_id,
            email_address: self.email_address,
            graph_arn: self.graph_arn,
            master_id: self.master_id,
            administrator_id: self.administrator_id,
            status: self.status,
            disabled_reason: self.disabled_reason,
            invited_time: self.invited_time,
            updated_time: self.updated_time,
            volume_usage_in_bytes: self.volume_usage_in_bytes,
            volume_usage_updated_time: self.volume_usage_updated_time,
            percent_of_graph_utilization: self.percent_of_graph_utilization,
            percent_of_graph_utilization_updated_time: self
                .percent_of_graph_utilization_updated_time,
            invitation_type: self.invitation_type,
            volume_usage_by_datasource_package: self.volume_usage_by_datasource_package,
            datasource_package_ingest_states: self.datasource_package_ingest_states,
        }
    }
}
