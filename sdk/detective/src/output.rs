// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationOutput {}
/// See [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
pub mod update_organization_configuration_output {

    /// A builder for [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateOrganizationConfigurationOutput {
            crate::output::UpdateOrganizationConfigurationOutput {}
        }
    }
}
impl UpdateOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::update_organization_configuration_output::Builder {
        crate::output::update_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatasourcePackagesOutput {}
/// See [`UpdateDatasourcePackagesOutput`](crate::output::UpdateDatasourcePackagesOutput).
pub mod update_datasource_packages_output {

    /// A builder for [`UpdateDatasourcePackagesOutput`](crate::output::UpdateDatasourcePackagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDatasourcePackagesOutput`](crate::output::UpdateDatasourcePackagesOutput).
        pub fn build(self) -> crate::output::UpdateDatasourcePackagesOutput {
            crate::output::UpdateDatasourcePackagesOutput {}
        }
    }
}
impl UpdateDatasourcePackagesOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDatasourcePackagesOutput`](crate::output::UpdateDatasourcePackagesOutput).
    pub fn builder() -> crate::output::update_datasource_packages_output::Builder {
        crate::output::update_datasource_packages_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMonitoringMemberOutput {}
/// See [`StartMonitoringMemberOutput`](crate::output::StartMonitoringMemberOutput).
pub mod start_monitoring_member_output {

    /// A builder for [`StartMonitoringMemberOutput`](crate::output::StartMonitoringMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`StartMonitoringMemberOutput`](crate::output::StartMonitoringMemberOutput).
        pub fn build(self) -> crate::output::StartMonitoringMemberOutput {
            crate::output::StartMonitoringMemberOutput {}
        }
    }
}
impl StartMonitoringMemberOutput {
    /// Creates a new builder-style object to manufacture [`StartMonitoringMemberOutput`](crate::output::StartMonitoringMemberOutput).
    pub fn builder() -> crate::output::start_monitoring_member_output::Builder {
        crate::output::start_monitoring_member_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RejectInvitationOutput {}
/// See [`RejectInvitationOutput`](crate::output::RejectInvitationOutput).
pub mod reject_invitation_output {

    /// A builder for [`RejectInvitationOutput`](crate::output::RejectInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RejectInvitationOutput`](crate::output::RejectInvitationOutput).
        pub fn build(self) -> crate::output::RejectInvitationOutput {
            crate::output::RejectInvitationOutput {}
        }
    }
}
impl RejectInvitationOutput {
    /// Creates a new builder-style object to manufacture [`RejectInvitationOutput`](crate::output::RejectInvitationOutput).
    pub fn builder() -> crate::output::reject_invitation_output::Builder {
        crate::output::reject_invitation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tag values that are assigned to the behavior graph. The request returns up to 50 tag values.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListTagsForResourceOutput {
    /// <p>The tag values that are assigned to the behavior graph. The request returns up to 50 tag values.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tag values that are assigned to the behavior graph. The request returns up to 50 tag values.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tag values that are assigned to the behavior graph. The request returns up to 50 tag values.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrganizationAdminAccountsOutput {
    /// <p>The list of Detective administrator accounts.</p>
    #[doc(hidden)]
    pub administrators: std::option::Option<std::vec::Vec<crate::model::Administrator>>,
    /// <p>If there are more accounts remaining in the results, then this is the pagination token to use to request the next page of accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListOrganizationAdminAccountsOutput {
    /// <p>The list of Detective administrator accounts.</p>
    pub fn administrators(&self) -> std::option::Option<&[crate::model::Administrator]> {
        self.administrators.as_deref()
    }
    /// <p>If there are more accounts remaining in the results, then this is the pagination token to use to request the next page of accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
pub mod list_organization_admin_accounts_output {

    /// A builder for [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) administrators: std::option::Option<std::vec::Vec<crate::model::Administrator>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `administrators`.
        ///
        /// To override the contents of this collection use [`set_administrators`](Self::set_administrators).
        ///
        /// <p>The list of Detective administrator accounts.</p>
        pub fn administrators(mut self, input: crate::model::Administrator) -> Self {
            let mut v = self.administrators.unwrap_or_default();
            v.push(input);
            self.administrators = Some(v);
            self
        }
        /// <p>The list of Detective administrator accounts.</p>
        pub fn set_administrators(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Administrator>>,
        ) -> Self {
            self.administrators = input;
            self
        }
        /// <p>If there are more accounts remaining in the results, then this is the pagination token to use to request the next page of accounts.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more accounts remaining in the results, then this is the pagination token to use to request the next page of accounts.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
        pub fn build(self) -> crate::output::ListOrganizationAdminAccountsOutput {
            crate::output::ListOrganizationAdminAccountsOutput {
                administrators: self.administrators,
                next_token: self.next_token,
            }
        }
    }
}
impl ListOrganizationAdminAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    pub fn builder() -> crate::output::list_organization_admin_accounts_output::Builder {
        crate::output::list_organization_admin_accounts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMembersOutput {
    /// <p>The list of member accounts in the behavior graph.</p>
    /// <p>For invited accounts, the results include member accounts that did not pass verification and member accounts that have not yet accepted the invitation to the behavior graph. The results do not include member accounts that were removed from the behavior graph.</p>
    /// <p>For the organization behavior graph, the results do not include organization accounts that the Detective administrator account has not enabled as member accounts.</p>
    #[doc(hidden)]
    pub member_details: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
    /// <p>If there are more member accounts remaining in the results, then use this pagination token to request the next page of member accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListMembersOutput {
    /// <p>The list of member accounts in the behavior graph.</p>
    /// <p>For invited accounts, the results include member accounts that did not pass verification and member accounts that have not yet accepted the invitation to the behavior graph. The results do not include member accounts that were removed from the behavior graph.</p>
    /// <p>For the organization behavior graph, the results do not include organization accounts that the Detective administrator account has not enabled as member accounts.</p>
    pub fn member_details(&self) -> std::option::Option<&[crate::model::MemberDetail]> {
        self.member_details.as_deref()
    }
    /// <p>If there are more member accounts remaining in the results, then use this pagination token to request the next page of member accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListMembersOutput`](crate::output::ListMembersOutput).
pub mod list_members_output {

    /// A builder for [`ListMembersOutput`](crate::output::ListMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member_details: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `member_details`.
        ///
        /// To override the contents of this collection use [`set_member_details`](Self::set_member_details).
        ///
        /// <p>The list of member accounts in the behavior graph.</p>
        /// <p>For invited accounts, the results include member accounts that did not pass verification and member accounts that have not yet accepted the invitation to the behavior graph. The results do not include member accounts that were removed from the behavior graph.</p>
        /// <p>For the organization behavior graph, the results do not include organization accounts that the Detective administrator account has not enabled as member accounts.</p>
        pub fn member_details(mut self, input: crate::model::MemberDetail) -> Self {
            let mut v = self.member_details.unwrap_or_default();
            v.push(input);
            self.member_details = Some(v);
            self
        }
        /// <p>The list of member accounts in the behavior graph.</p>
        /// <p>For invited accounts, the results include member accounts that did not pass verification and member accounts that have not yet accepted the invitation to the behavior graph. The results do not include member accounts that were removed from the behavior graph.</p>
        /// <p>For the organization behavior graph, the results do not include organization accounts that the Detective administrator account has not enabled as member accounts.</p>
        pub fn set_member_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        ) -> Self {
            self.member_details = input;
            self
        }
        /// <p>If there are more member accounts remaining in the results, then use this pagination token to request the next page of member accounts.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more member accounts remaining in the results, then use this pagination token to request the next page of member accounts.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMembersOutput`](crate::output::ListMembersOutput).
        pub fn build(self) -> crate::output::ListMembersOutput {
            crate::output::ListMembersOutput {
                member_details: self.member_details,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListMembersOutput`](crate::output::ListMembersOutput).
    pub fn builder() -> crate::output::list_members_output::Builder {
        crate::output::list_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInvitationsOutput {
    /// <p>The list of behavior graphs for which the member account has open or accepted invitations.</p>
    #[doc(hidden)]
    pub invitations: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
    /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListInvitationsOutput {
    /// <p>The list of behavior graphs for which the member account has open or accepted invitations.</p>
    pub fn invitations(&self) -> std::option::Option<&[crate::model::MemberDetail]> {
        self.invitations.as_deref()
    }
    /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
pub mod list_invitations_output {

    /// A builder for [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invitations: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `invitations`.
        ///
        /// To override the contents of this collection use [`set_invitations`](Self::set_invitations).
        ///
        /// <p>The list of behavior graphs for which the member account has open or accepted invitations.</p>
        pub fn invitations(mut self, input: crate::model::MemberDetail) -> Self {
            let mut v = self.invitations.unwrap_or_default();
            v.push(input);
            self.invitations = Some(v);
            self
        }
        /// <p>The list of behavior graphs for which the member account has open or accepted invitations.</p>
        pub fn set_invitations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        ) -> Self {
            self.invitations = input;
            self
        }
        /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
        pub fn build(self) -> crate::output::ListInvitationsOutput {
            crate::output::ListInvitationsOutput {
                invitations: self.invitations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    pub fn builder() -> crate::output::list_invitations_output::Builder {
        crate::output::list_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListGraphsOutput {
    /// <p>A list of behavior graphs that the account is an administrator account for.</p>
    #[doc(hidden)]
    pub graph_list: std::option::Option<std::vec::Vec<crate::model::Graph>>,
    /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListGraphsOutput {
    /// <p>A list of behavior graphs that the account is an administrator account for.</p>
    pub fn graph_list(&self) -> std::option::Option<&[crate::model::Graph]> {
        self.graph_list.as_deref()
    }
    /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListGraphsOutput`](crate::output::ListGraphsOutput).
pub mod list_graphs_output {

    /// A builder for [`ListGraphsOutput`](crate::output::ListGraphsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) graph_list: std::option::Option<std::vec::Vec<crate::model::Graph>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `graph_list`.
        ///
        /// To override the contents of this collection use [`set_graph_list`](Self::set_graph_list).
        ///
        /// <p>A list of behavior graphs that the account is an administrator account for.</p>
        pub fn graph_list(mut self, input: crate::model::Graph) -> Self {
            let mut v = self.graph_list.unwrap_or_default();
            v.push(input);
            self.graph_list = Some(v);
            self
        }
        /// <p>A list of behavior graphs that the account is an administrator account for.</p>
        pub fn set_graph_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Graph>>,
        ) -> Self {
            self.graph_list = input;
            self
        }
        /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If there are more behavior graphs remaining in the results, then this is the pagination token to use to request the next page of behavior graphs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListGraphsOutput`](crate::output::ListGraphsOutput).
        pub fn build(self) -> crate::output::ListGraphsOutput {
            crate::output::ListGraphsOutput {
                graph_list: self.graph_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListGraphsOutput {
    /// Creates a new builder-style object to manufacture [`ListGraphsOutput`](crate::output::ListGraphsOutput).
    pub fn builder() -> crate::output::list_graphs_output::Builder {
        crate::output::list_graphs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDatasourcePackagesOutput {
    /// <p>Details on the data source packages active in the behavior graph.</p>
    #[doc(hidden)]
    pub datasource_packages: std::option::Option<
        std::collections::HashMap<
            crate::model::DatasourcePackage,
            crate::model::DatasourcePackageIngestDetail,
        >,
    >,
    /// <p>For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListDatasourcePackagesOutput {
    /// <p>Details on the data source packages active in the behavior graph.</p>
    pub fn datasource_packages(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            crate::model::DatasourcePackage,
            crate::model::DatasourcePackageIngestDetail,
        >,
    > {
        self.datasource_packages.as_ref()
    }
    /// <p>For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
/// See [`ListDatasourcePackagesOutput`](crate::output::ListDatasourcePackagesOutput).
pub mod list_datasource_packages_output {

    /// A builder for [`ListDatasourcePackagesOutput`](crate::output::ListDatasourcePackagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) datasource_packages: std::option::Option<
            std::collections::HashMap<
                crate::model::DatasourcePackage,
                crate::model::DatasourcePackageIngestDetail,
            >,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Adds a key-value pair to `datasource_packages`.
        ///
        /// To override the contents of this collection use [`set_datasource_packages`](Self::set_datasource_packages).
        ///
        /// <p>Details on the data source packages active in the behavior graph.</p>
        pub fn datasource_packages(
            mut self,
            k: crate::model::DatasourcePackage,
            v: crate::model::DatasourcePackageIngestDetail,
        ) -> Self {
            let mut hash_map = self.datasource_packages.unwrap_or_default();
            hash_map.insert(k, v);
            self.datasource_packages = Some(hash_map);
            self
        }
        /// <p>Details on the data source packages active in the behavior graph.</p>
        pub fn set_datasource_packages(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::DatasourcePackage,
                    crate::model::DatasourcePackageIngestDetail,
                >,
            >,
        ) -> Self {
            self.datasource_packages = input;
            self
        }
        /// <p>For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>For requests to get the next page of results, the pagination token that was returned with the previous set of results. The initial request does not include a pagination token.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDatasourcePackagesOutput`](crate::output::ListDatasourcePackagesOutput).
        pub fn build(self) -> crate::output::ListDatasourcePackagesOutput {
            crate::output::ListDatasourcePackagesOutput {
                datasource_packages: self.datasource_packages,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDatasourcePackagesOutput {
    /// Creates a new builder-style object to manufacture [`ListDatasourcePackagesOutput`](crate::output::ListDatasourcePackagesOutput).
    pub fn builder() -> crate::output::list_datasource_packages_output::Builder {
        crate::output::list_datasource_packages_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMembersOutput {
    /// <p>The member account details that Detective is returning in response to the request.</p>
    #[doc(hidden)]
    pub member_details: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
    /// <p>The requested member accounts for which Detective was unable to return member details.</p>
    /// <p>For each account, provides the reason why the request could not be processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
}
impl GetMembersOutput {
    /// <p>The member account details that Detective is returning in response to the request.</p>
    pub fn member_details(&self) -> std::option::Option<&[crate::model::MemberDetail]> {
        self.member_details.as_deref()
    }
    /// <p>The requested member accounts for which Detective was unable to return member details.</p>
    /// <p>For each account, provides the reason why the request could not be processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
/// See [`GetMembersOutput`](crate::output::GetMembersOutput).
pub mod get_members_output {

    /// A builder for [`GetMembersOutput`](crate::output::GetMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member_details: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    }
    impl Builder {
        /// Appends an item to `member_details`.
        ///
        /// To override the contents of this collection use [`set_member_details`](Self::set_member_details).
        ///
        /// <p>The member account details that Detective is returning in response to the request.</p>
        pub fn member_details(mut self, input: crate::model::MemberDetail) -> Self {
            let mut v = self.member_details.unwrap_or_default();
            v.push(input);
            self.member_details = Some(v);
            self
        }
        /// <p>The member account details that Detective is returning in response to the request.</p>
        pub fn set_member_details(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        ) -> Self {
            self.member_details = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>The requested member accounts for which Detective was unable to return member details.</p>
        /// <p>For each account, provides the reason why the request could not be processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>The requested member accounts for which Detective was unable to return member details.</p>
        /// <p>For each account, provides the reason why the request could not be processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        /// Consumes the builder and constructs a [`GetMembersOutput`](crate::output::GetMembersOutput).
        pub fn build(self) -> crate::output::GetMembersOutput {
            crate::output::GetMembersOutput {
                member_details: self.member_details,
                unprocessed_accounts: self.unprocessed_accounts,
            }
        }
    }
}
impl GetMembersOutput {
    /// Creates a new builder-style object to manufacture [`GetMembersOutput`](crate::output::GetMembersOutput).
    pub fn builder() -> crate::output::get_members_output::Builder {
        crate::output::get_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableOrganizationAdminAccountOutput {}
/// See [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
pub mod enable_organization_admin_account_output {

    /// A builder for [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::EnableOrganizationAdminAccountOutput {
            crate::output::EnableOrganizationAdminAccountOutput {}
        }
    }
}
impl EnableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::enable_organization_admin_account_output::Builder {
        crate::output::enable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateMembershipOutput {}
/// See [`DisassociateMembershipOutput`](crate::output::DisassociateMembershipOutput).
pub mod disassociate_membership_output {

    /// A builder for [`DisassociateMembershipOutput`](crate::output::DisassociateMembershipOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateMembershipOutput`](crate::output::DisassociateMembershipOutput).
        pub fn build(self) -> crate::output::DisassociateMembershipOutput {
            crate::output::DisassociateMembershipOutput {}
        }
    }
}
impl DisassociateMembershipOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateMembershipOutput`](crate::output::DisassociateMembershipOutput).
    pub fn builder() -> crate::output::disassociate_membership_output::Builder {
        crate::output::disassociate_membership_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableOrganizationAdminAccountOutput {}
/// See [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
pub mod disable_organization_admin_account_output {

    /// A builder for [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::DisableOrganizationAdminAccountOutput {
            crate::output::DisableOrganizationAdminAccountOutput {}
        }
    }
}
impl DisableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::disable_organization_admin_account_output::Builder {
        crate::output::disable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p>
    #[doc(hidden)]
    pub auto_enable: bool,
}
impl DescribeOrganizationConfigurationOutput {
    /// <p>Indicates whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p>
    pub fn auto_enable(&self) -> bool {
        self.auto_enable
    }
}
/// See [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
pub mod describe_organization_configuration_output {

    /// A builder for [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_enable: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Indicates whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p>
        pub fn auto_enable(mut self, input: bool) -> Self {
            self.auto_enable = Some(input);
            self
        }
        /// <p>Indicates whether to automatically enable new organization accounts as member accounts in the organization behavior graph.</p>
        pub fn set_auto_enable(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_enable = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationConfigurationOutput {
            crate::output::DescribeOrganizationConfigurationOutput {
                auto_enable: self.auto_enable.unwrap_or_default(),
            }
        }
    }
}
impl DescribeOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::describe_organization_configuration_output::Builder {
        crate::output::describe_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMembersOutput {
    /// <p>The list of Amazon Web Services account identifiers for the member accounts that Detective successfully removed from the behavior graph.</p>
    #[doc(hidden)]
    pub account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The list of member accounts that Detective was not able to remove from the behavior graph. For each member account, provides the reason that the deletion could not be processed.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
}
impl DeleteMembersOutput {
    /// <p>The list of Amazon Web Services account identifiers for the member accounts that Detective successfully removed from the behavior graph.</p>
    pub fn account_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.account_ids.as_deref()
    }
    /// <p>The list of member accounts that Detective was not able to remove from the behavior graph. For each member account, provides the reason that the deletion could not be processed.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
/// See [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
pub mod delete_members_output {

    /// A builder for [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    }
    impl Builder {
        /// Appends an item to `account_ids`.
        ///
        /// To override the contents of this collection use [`set_account_ids`](Self::set_account_ids).
        ///
        /// <p>The list of Amazon Web Services account identifiers for the member accounts that Detective successfully removed from the behavior graph.</p>
        pub fn account_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.account_ids.unwrap_or_default();
            v.push(input.into());
            self.account_ids = Some(v);
            self
        }
        /// <p>The list of Amazon Web Services account identifiers for the member accounts that Detective successfully removed from the behavior graph.</p>
        pub fn set_account_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.account_ids = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>The list of member accounts that Detective was not able to remove from the behavior graph. For each member account, provides the reason that the deletion could not be processed.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>The list of member accounts that Detective was not able to remove from the behavior graph. For each member account, provides the reason that the deletion could not be processed.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
        pub fn build(self) -> crate::output::DeleteMembersOutput {
            crate::output::DeleteMembersOutput {
                account_ids: self.account_ids,
                unprocessed_accounts: self.unprocessed_accounts,
            }
        }
    }
}
impl DeleteMembersOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMembersOutput`](crate::output::DeleteMembersOutput).
    pub fn builder() -> crate::output::delete_members_output::Builder {
        crate::output::delete_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteGraphOutput {}
/// See [`DeleteGraphOutput`](crate::output::DeleteGraphOutput).
pub mod delete_graph_output {

    /// A builder for [`DeleteGraphOutput`](crate::output::DeleteGraphOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteGraphOutput`](crate::output::DeleteGraphOutput).
        pub fn build(self) -> crate::output::DeleteGraphOutput {
            crate::output::DeleteGraphOutput {}
        }
    }
}
impl DeleteGraphOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGraphOutput`](crate::output::DeleteGraphOutput).
    pub fn builder() -> crate::output::delete_graph_output::Builder {
        crate::output::delete_graph_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMembersOutput {
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
}
impl CreateMembersOutput {
    /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::MemberDetail]> {
        self.members.as_deref()
    }
    /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
/// See [`CreateMembersOutput`](crate::output::CreateMembersOutput).
pub mod create_members_output {

    /// A builder for [`CreateMembersOutput`](crate::output::CreateMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
        pub fn members(mut self, input: crate::model::MemberDetail) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>The set of member account invitation or enablement requests that Detective was able to process. This includes accounts that are being verified, that failed verification, and that passed verification and are being sent an invitation or are being enabled.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MemberDetail>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>The list of accounts for which Detective was unable to process the invitation or enablement request. For each account, the list provides the reason why the request could not be processed. The list includes accounts that are already member accounts in the behavior graph.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateMembersOutput`](crate::output::CreateMembersOutput).
        pub fn build(self) -> crate::output::CreateMembersOutput {
            crate::output::CreateMembersOutput {
                members: self.members,
                unprocessed_accounts: self.unprocessed_accounts,
            }
        }
    }
}
impl CreateMembersOutput {
    /// Creates a new builder-style object to manufacture [`CreateMembersOutput`](crate::output::CreateMembersOutput).
    pub fn builder() -> crate::output::create_members_output::Builder {
        crate::output::create_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateGraphOutput {
    /// <p>The ARN of the new behavior graph.</p>
    #[doc(hidden)]
    pub graph_arn: std::option::Option<std::string::String>,
}
impl CreateGraphOutput {
    /// <p>The ARN of the new behavior graph.</p>
    pub fn graph_arn(&self) -> std::option::Option<&str> {
        self.graph_arn.as_deref()
    }
}
/// See [`CreateGraphOutput`](crate::output::CreateGraphOutput).
pub mod create_graph_output {

    /// A builder for [`CreateGraphOutput`](crate::output::CreateGraphOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) graph_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ARN of the new behavior graph.</p>
        pub fn graph_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.graph_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the new behavior graph.</p>
        pub fn set_graph_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.graph_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGraphOutput`](crate::output::CreateGraphOutput).
        pub fn build(self) -> crate::output::CreateGraphOutput {
            crate::output::CreateGraphOutput {
                graph_arn: self.graph_arn,
            }
        }
    }
}
impl CreateGraphOutput {
    /// Creates a new builder-style object to manufacture [`CreateGraphOutput`](crate::output::CreateGraphOutput).
    pub fn builder() -> crate::output::create_graph_output::Builder {
        crate::output::create_graph_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetMembershipDatasourcesOutput {
    /// <p>Details on the data source package history for an member of the behavior graph.</p>
    #[doc(hidden)]
    pub membership_datasources:
        std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
    /// <p>Graphs that data source package information could not be retrieved for.</p>
    #[doc(hidden)]
    pub unprocessed_graphs: std::option::Option<std::vec::Vec<crate::model::UnprocessedGraph>>,
}
impl BatchGetMembershipDatasourcesOutput {
    /// <p>Details on the data source package history for an member of the behavior graph.</p>
    pub fn membership_datasources(
        &self,
    ) -> std::option::Option<&[crate::model::MembershipDatasources]> {
        self.membership_datasources.as_deref()
    }
    /// <p>Graphs that data source package information could not be retrieved for.</p>
    pub fn unprocessed_graphs(&self) -> std::option::Option<&[crate::model::UnprocessedGraph]> {
        self.unprocessed_graphs.as_deref()
    }
}
/// See [`BatchGetMembershipDatasourcesOutput`](crate::output::BatchGetMembershipDatasourcesOutput).
pub mod batch_get_membership_datasources_output {

    /// A builder for [`BatchGetMembershipDatasourcesOutput`](crate::output::BatchGetMembershipDatasourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) membership_datasources:
            std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
        pub(crate) unprocessed_graphs:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedGraph>>,
    }
    impl Builder {
        /// Appends an item to `membership_datasources`.
        ///
        /// To override the contents of this collection use [`set_membership_datasources`](Self::set_membership_datasources).
        ///
        /// <p>Details on the data source package history for an member of the behavior graph.</p>
        pub fn membership_datasources(
            mut self,
            input: crate::model::MembershipDatasources,
        ) -> Self {
            let mut v = self.membership_datasources.unwrap_or_default();
            v.push(input);
            self.membership_datasources = Some(v);
            self
        }
        /// <p>Details on the data source package history for an member of the behavior graph.</p>
        pub fn set_membership_datasources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
        ) -> Self {
            self.membership_datasources = input;
            self
        }
        /// Appends an item to `unprocessed_graphs`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_graphs`](Self::set_unprocessed_graphs).
        ///
        /// <p>Graphs that data source package information could not be retrieved for.</p>
        pub fn unprocessed_graphs(mut self, input: crate::model::UnprocessedGraph) -> Self {
            let mut v = self.unprocessed_graphs.unwrap_or_default();
            v.push(input);
            self.unprocessed_graphs = Some(v);
            self
        }
        /// <p>Graphs that data source package information could not be retrieved for.</p>
        pub fn set_unprocessed_graphs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedGraph>>,
        ) -> Self {
            self.unprocessed_graphs = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetMembershipDatasourcesOutput`](crate::output::BatchGetMembershipDatasourcesOutput).
        pub fn build(self) -> crate::output::BatchGetMembershipDatasourcesOutput {
            crate::output::BatchGetMembershipDatasourcesOutput {
                membership_datasources: self.membership_datasources,
                unprocessed_graphs: self.unprocessed_graphs,
            }
        }
    }
}
impl BatchGetMembershipDatasourcesOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetMembershipDatasourcesOutput`](crate::output::BatchGetMembershipDatasourcesOutput).
    pub fn builder() -> crate::output::batch_get_membership_datasources_output::Builder {
        crate::output::batch_get_membership_datasources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetGraphMemberDatasourcesOutput {
    /// <p>Details on the status of data source packages for members of the behavior graph.</p>
    #[doc(hidden)]
    pub member_datasources: std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
    /// <p>Accounts that data source package information could not be retrieved for.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
}
impl BatchGetGraphMemberDatasourcesOutput {
    /// <p>Details on the status of data source packages for members of the behavior graph.</p>
    pub fn member_datasources(
        &self,
    ) -> std::option::Option<&[crate::model::MembershipDatasources]> {
        self.member_datasources.as_deref()
    }
    /// <p>Accounts that data source package information could not be retrieved for.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
/// See [`BatchGetGraphMemberDatasourcesOutput`](crate::output::BatchGetGraphMemberDatasourcesOutput).
pub mod batch_get_graph_member_datasources_output {

    /// A builder for [`BatchGetGraphMemberDatasourcesOutput`](crate::output::BatchGetGraphMemberDatasourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member_datasources:
            std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    }
    impl Builder {
        /// Appends an item to `member_datasources`.
        ///
        /// To override the contents of this collection use [`set_member_datasources`](Self::set_member_datasources).
        ///
        /// <p>Details on the status of data source packages for members of the behavior graph.</p>
        pub fn member_datasources(mut self, input: crate::model::MembershipDatasources) -> Self {
            let mut v = self.member_datasources.unwrap_or_default();
            v.push(input);
            self.member_datasources = Some(v);
            self
        }
        /// <p>Details on the status of data source packages for members of the behavior graph.</p>
        pub fn set_member_datasources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MembershipDatasources>>,
        ) -> Self {
            self.member_datasources = input;
            self
        }
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>Accounts that data source package information could not be retrieved for.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>Accounts that data source package information could not be retrieved for.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetGraphMemberDatasourcesOutput`](crate::output::BatchGetGraphMemberDatasourcesOutput).
        pub fn build(self) -> crate::output::BatchGetGraphMemberDatasourcesOutput {
            crate::output::BatchGetGraphMemberDatasourcesOutput {
                member_datasources: self.member_datasources,
                unprocessed_accounts: self.unprocessed_accounts,
            }
        }
    }
}
impl BatchGetGraphMemberDatasourcesOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetGraphMemberDatasourcesOutput`](crate::output::BatchGetGraphMemberDatasourcesOutput).
    pub fn builder() -> crate::output::batch_get_graph_member_datasources_output::Builder {
        crate::output::batch_get_graph_member_datasources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptInvitationOutput {}
/// See [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
pub mod accept_invitation_output {

    /// A builder for [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
        pub fn build(self) -> crate::output::AcceptInvitationOutput {
            crate::output::AcceptInvitationOutput {}
        }
    }
}
impl AcceptInvitationOutput {
    /// Creates a new builder-style object to manufacture [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    pub fn builder() -> crate::output::accept_invitation_output::Builder {
        crate::output::accept_invitation_output::Builder::default()
    }
}
