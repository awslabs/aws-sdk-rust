// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateJobExecutionInput {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The name of the thing associated with the device.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::JobExecutionStatus>,
    /// <p> Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    #[doc(hidden)]
    pub status_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    #[doc(hidden)]
    pub step_timeout_in_minutes: std::option::Option<i64>,
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    #[doc(hidden)]
    pub expected_version: std::option::Option<i64>,
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    #[doc(hidden)]
    pub include_job_execution_state: std::option::Option<bool>,
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    #[doc(hidden)]
    pub include_job_document: std::option::Option<bool>,
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    #[doc(hidden)]
    pub execution_number: std::option::Option<i64>,
}
impl UpdateJobExecutionInput {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::JobExecutionStatus> {
        self.status.as_ref()
    }
    /// <p> Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn status_details(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.status_details.as_ref()
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn step_timeout_in_minutes(&self) -> std::option::Option<i64> {
        self.step_timeout_in_minutes
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn expected_version(&self) -> std::option::Option<i64> {
        self.expected_version
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn include_job_execution_state(&self) -> std::option::Option<bool> {
        self.include_job_execution_state
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn include_job_document(&self) -> std::option::Option<bool> {
        self.include_job_document
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn execution_number(&self) -> std::option::Option<i64> {
        self.execution_number
    }
}
impl UpdateJobExecutionInput {
    /// Creates a new builder-style object to manufacture [`UpdateJobExecutionInput`](crate::operation::update_job_execution::UpdateJobExecutionInput).
    pub fn builder(
    ) -> crate::operation::update_job_execution::builders::UpdateJobExecutionInputBuilder {
        crate::operation::update_job_execution::builders::UpdateJobExecutionInputBuilder::default()
    }
}

/// A builder for [`UpdateJobExecutionInput`](crate::operation::update_job_execution::UpdateJobExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateJobExecutionInputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::JobExecutionStatus>,
    pub(crate) status_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) step_timeout_in_minutes: std::option::Option<i64>,
    pub(crate) expected_version: std::option::Option<i64>,
    pub(crate) include_job_execution_state: std::option::Option<bool>,
    pub(crate) include_job_document: std::option::Option<bool>,
    pub(crate) execution_number: std::option::Option<i64>,
}
impl UpdateJobExecutionInputBuilder {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn status(mut self, input: crate::types::JobExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::JobExecutionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `status_details`.
    ///
    /// To override the contents of this collection use [`set_status_details`](Self::set_status_details).
    ///
    /// <p> Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn status_details(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.status_details.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.status_details = Some(hash_map);
        self
    }
    /// <p> Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn set_status_details(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn step_timeout_in_minutes(mut self, input: i64) -> Self {
        self.step_timeout_in_minutes = Some(input);
        self
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn set_step_timeout_in_minutes(mut self, input: std::option::Option<i64>) -> Self {
        self.step_timeout_in_minutes = input;
        self
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn expected_version(mut self, input: i64) -> Self {
        self.expected_version = Some(input);
        self
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn set_expected_version(mut self, input: std::option::Option<i64>) -> Self {
        self.expected_version = input;
        self
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn include_job_execution_state(mut self, input: bool) -> Self {
        self.include_job_execution_state = Some(input);
        self
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn set_include_job_execution_state(mut self, input: std::option::Option<bool>) -> Self {
        self.include_job_execution_state = input;
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn include_job_document(mut self, input: bool) -> Self {
        self.include_job_document = Some(input);
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn set_include_job_document(mut self, input: std::option::Option<bool>) -> Self {
        self.include_job_document = input;
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn execution_number(mut self, input: i64) -> Self {
        self.execution_number = Some(input);
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn set_execution_number(mut self, input: std::option::Option<i64>) -> Self {
        self.execution_number = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateJobExecutionInput`](crate::operation::update_job_execution::UpdateJobExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_job_execution::UpdateJobExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_job_execution::UpdateJobExecutionInput {
                job_id: self.job_id,
                thing_name: self.thing_name,
                status: self.status,
                status_details: self.status_details,
                step_timeout_in_minutes: self.step_timeout_in_minutes,
                expected_version: self.expected_version,
                include_job_execution_state: self.include_job_execution_state,
                include_job_document: self.include_job_document,
                execution_number: self.execution_number,
            },
        )
    }
}
