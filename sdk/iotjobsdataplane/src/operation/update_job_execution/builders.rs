// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_job_execution::_update_job_execution_output::UpdateJobExecutionOutputBuilder;

pub use crate::operation::update_job_execution::_update_job_execution_input::UpdateJobExecutionInputBuilder;

impl crate::operation::update_job_execution::builders::UpdateJobExecutionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_job_execution::UpdateJobExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_job_execution::UpdateJobExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_job_execution();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateJobExecution`.
///
/// <p>Updates the status of a job execution.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateJobExecutionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_job_execution::builders::UpdateJobExecutionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_job_execution::UpdateJobExecutionOutput,
        crate::operation::update_job_execution::UpdateJobExecutionError,
    > for UpdateJobExecutionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_job_execution::UpdateJobExecutionOutput,
            crate::operation::update_job_execution::UpdateJobExecutionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateJobExecutionFluentBuilder {
    /// Creates a new `UpdateJobExecution`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateJobExecution as a reference.
    pub fn as_input(&self) -> &crate::operation::update_job_execution::builders::UpdateJobExecutionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_job_execution::UpdateJobExecutionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_job_execution::UpdateJobExecutionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_job_execution::UpdateJobExecution::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_job_execution::UpdateJobExecution::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_job_execution::UpdateJobExecutionOutput,
        crate::operation::update_job_execution::UpdateJobExecutionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_id()
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.thing_name(input.into());
        self
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_thing_name(input);
        self
    }
    /// <p>The name of the thing associated with the device.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_thing_name()
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn status(mut self, input: crate::types::JobExecutionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::JobExecutionStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>The new status for the job execution (IN_PROGRESS, FAILED, SUCCESS, or REJECTED). This must be specified on every update.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::JobExecutionStatus> {
        self.inner.get_status()
    }
    ///
    /// Adds a key-value pair to `statusDetails`.
    ///
    /// To override the contents of this collection use [`set_status_details`](Self::set_status_details).
    ///
    /// <p>Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn status_details(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.status_details(k.into(), v.into());
        self
    }
    /// <p>Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn set_status_details(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_status_details(input);
        self
    }
    /// <p>Optional. A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_status_details()
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn step_timeout_in_minutes(mut self, input: i64) -> Self {
        self.inner = self.inner.step_timeout_in_minutes(input);
        self
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn set_step_timeout_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_step_timeout_in_minutes(input);
        self
    }
    /// <p>Specifies the amount of time this device has to finish execution of this job. If the job execution status is not set to a terminal state before this timer expires, or before the timer is reset (by again calling <code>UpdateJobExecution</code>, setting the status to <code>IN_PROGRESS</code> and specifying a new timeout value in this field) the job execution status will be automatically set to <code>TIMED_OUT</code>. Note that setting or resetting this timeout has no effect on that job execution timeout which may have been specified when the job was created (<code>CreateJob</code> using field <code>timeoutConfig</code>).</p>
    pub fn get_step_timeout_in_minutes(&self) -> &::std::option::Option<i64> {
        self.inner.get_step_timeout_in_minutes()
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn expected_version(mut self, input: i64) -> Self {
        self.inner = self.inner.expected_version(input);
        self
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn set_expected_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_expected_version(input);
        self
    }
    /// <p>Optional. The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)</p>
    pub fn get_expected_version(&self) -> &::std::option::Option<i64> {
        self.inner.get_expected_version()
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn include_job_execution_state(mut self, input: bool) -> Self {
        self.inner = self.inner.include_job_execution_state(input);
        self
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn set_include_job_execution_state(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_job_execution_state(input);
        self
    }
    /// <p>Optional. When included and set to true, the response contains the JobExecutionState data. The default is false.</p>
    pub fn get_include_job_execution_state(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_job_execution_state()
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn include_job_document(mut self, input: bool) -> Self {
        self.inner = self.inner.include_job_document(input);
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn set_include_job_document(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_job_document(input);
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn get_include_job_document(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_job_document()
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn execution_number(mut self, input: i64) -> Self {
        self.inner = self.inner.execution_number(input);
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn set_execution_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_execution_number(input);
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device.</p>
    pub fn get_execution_number(&self) -> &::std::option::Option<i64> {
        self.inner.get_execution_number()
    }
}
