// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeJobExecutionInput {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The thing name associated with the device the job execution is running on.</p>
    pub thing_name: ::std::option::Option<::std::string::String>,
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub include_job_document: ::std::option::Option<bool>,
    /// <p>Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</p>
    pub execution_number: ::std::option::Option<i64>,
}
impl DescribeJobExecutionInput {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The thing name associated with the device the job execution is running on.</p>
    pub fn thing_name(&self) -> ::std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn include_job_document(&self) -> ::std::option::Option<bool> {
        self.include_job_document
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</p>
    pub fn execution_number(&self) -> ::std::option::Option<i64> {
        self.execution_number
    }
}
impl DescribeJobExecutionInput {
    /// Creates a new builder-style object to manufacture [`DescribeJobExecutionInput`](crate::operation::describe_job_execution::DescribeJobExecutionInput).
    pub fn builder() -> crate::operation::describe_job_execution::builders::DescribeJobExecutionInputBuilder {
        crate::operation::describe_job_execution::builders::DescribeJobExecutionInputBuilder::default()
    }
}

/// A builder for [`DescribeJobExecutionInput`](crate::operation::describe_job_execution::DescribeJobExecutionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeJobExecutionInputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) thing_name: ::std::option::Option<::std::string::String>,
    pub(crate) include_job_document: ::std::option::Option<bool>,
    pub(crate) execution_number: ::std::option::Option<i64>,
}
impl DescribeJobExecutionInputBuilder {
    /// <p>The unique identifier assigned to this job when it was created.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The unique identifier assigned to this job when it was created.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The thing name associated with the device the job execution is running on.</p>
    /// This field is required.
    pub fn thing_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.thing_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The thing name associated with the device the job execution is running on.</p>
    pub fn set_thing_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The thing name associated with the device the job execution is running on.</p>
    pub fn get_thing_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.thing_name
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn include_job_document(mut self, input: bool) -> Self {
        self.include_job_document = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn set_include_job_document(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_job_document = input;
        self
    }
    /// <p>Optional. When set to true, the response contains the job document. The default is false.</p>
    pub fn get_include_job_document(&self) -> &::std::option::Option<bool> {
        &self.include_job_document
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</p>
    pub fn execution_number(mut self, input: i64) -> Self {
        self.execution_number = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</p>
    pub fn set_execution_number(mut self, input: ::std::option::Option<i64>) -> Self {
        self.execution_number = input;
        self
    }
    /// <p>Optional. A number that identifies a particular job execution on a particular device. If not specified, the latest job execution is returned.</p>
    pub fn get_execution_number(&self) -> &::std::option::Option<i64> {
        &self.execution_number
    }
    /// Consumes the builder and constructs a [`DescribeJobExecutionInput`](crate::operation::describe_job_execution::DescribeJobExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_job_execution::DescribeJobExecutionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_job_execution::DescribeJobExecutionInput {
            job_id: self.job_id,
            thing_name: self.thing_name,
            include_job_document: self.include_job_document,
            execution_number: self.execution_number,
        })
    }
}
