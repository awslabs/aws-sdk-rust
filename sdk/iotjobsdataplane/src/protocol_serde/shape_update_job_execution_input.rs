// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_job_execution_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_job_execution::UpdateJobExecutionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.execution_number {
        object.key("executionNumber").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.expected_version {
        object.key("expectedVersion").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.include_job_document {
        object.key("includeJobDocument").boolean(*var_3);
    }
    if let Some(var_4) = &input.include_job_execution_state {
        object.key("includeJobExecutionState").boolean(*var_4);
    }
    if let Some(var_5) = &input.status {
        object.key("status").string(var_5.as_str());
    }
    if let Some(var_6) = &input.status_details {
        #[allow(unused_mut)]
        let mut object_7 = object.key("statusDetails").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.step_timeout_in_minutes {
        object.key("stepTimeoutInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    Ok(())
}
