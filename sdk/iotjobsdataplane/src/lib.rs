#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
//! <p>AWS IoT Jobs is a service that allows you to define a set of jobs â€” remote operations that are sent to
//! and executed on one or more devices connected to AWS IoT. For example, you can define a job that instructs a
//! set of devices to download and install application or firmware updates, reboot, rotate certificates, or perform
//! remote troubleshooting operations.</p>
//! <p> To create a job, you make a job document which is a description of the remote operations to be
//! performed, and you specify a list of targets that should perform the operations. The targets can be individual
//! things, thing groups or both.</p>
//! <p> AWS IoT Jobs sends a message to inform the targets that a job is available. The target starts the
//! execution of the job by downloading the job document, performing the operations it specifies, and reporting its
//! progress to AWS IoT. The Jobs service provides commands to track the progress of a job on a specific target and
//! for all the targets of the job</p>

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

pub use config::Config;

mod aws_endpoint;
#[cfg(feature = "client")]
pub mod client;
pub mod config;
pub mod error;
mod error_meta;
pub mod input;
mod json_deser;
mod json_errors;
mod json_ser;
pub mod model;
pub mod operation;
mod operation_deser;
mod operation_ser;
pub mod output;
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");
pub use smithy_http::byte_stream::ByteStream;
pub use smithy_http::result::SdkError;
pub use smithy_types::Blob;
static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("iotjobsdataplane", PKG_VERSION);
pub use aws_auth::Credentials;
pub use aws_types::region::Region;
#[cfg(feature = "client")]
pub use client::Client;
pub use smithy_http::endpoint::Endpoint;
