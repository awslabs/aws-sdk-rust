// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains data about a job execution.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobExecution {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The name of the thing that is executing the job.</p>
    #[doc(hidden)]
    pub thing_name: std::option::Option<std::string::String>,
    /// <p>The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::JobExecutionStatus>,
    /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
    #[doc(hidden)]
    pub status_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    #[doc(hidden)]
    pub queued_at: i64,
    /// <p>The time, in milliseconds since the epoch, when the job execution was started.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<i64>,
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated. </p>
    #[doc(hidden)]
    pub last_updated_at: i64,
    /// <p>The estimated number of seconds that remain before the job execution status will be changed to <code>TIMED_OUT</code>.</p>
    #[doc(hidden)]
    pub approximate_seconds_before_timed_out: std::option::Option<i64>,
    /// <p>The version of the job execution. Job execution versions are incremented each time they are updated by a device.</p>
    #[doc(hidden)]
    pub version_number: i64,
    /// <p>A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.</p>
    #[doc(hidden)]
    pub execution_number: std::option::Option<i64>,
    /// <p>The content of the job document.</p>
    #[doc(hidden)]
    pub job_document: std::option::Option<std::string::String>,
}
impl JobExecution {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The name of the thing that is executing the job.</p>
    pub fn thing_name(&self) -> std::option::Option<&str> {
        self.thing_name.as_deref()
    }
    /// <p>The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".</p>
    pub fn status(&self) -> std::option::Option<&crate::types::JobExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
    pub fn status_details(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.status_details.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn queued_at(&self) -> i64 {
        self.queued_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was started.</p>
    pub fn started_at(&self) -> std::option::Option<i64> {
        self.started_at
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated. </p>
    pub fn last_updated_at(&self) -> i64 {
        self.last_updated_at
    }
    /// <p>The estimated number of seconds that remain before the job execution status will be changed to <code>TIMED_OUT</code>.</p>
    pub fn approximate_seconds_before_timed_out(&self) -> std::option::Option<i64> {
        self.approximate_seconds_before_timed_out
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time they are updated by a device.</p>
    pub fn version_number(&self) -> i64 {
        self.version_number
    }
    /// <p>A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.</p>
    pub fn execution_number(&self) -> std::option::Option<i64> {
        self.execution_number
    }
    /// <p>The content of the job document.</p>
    pub fn job_document(&self) -> std::option::Option<&str> {
        self.job_document.as_deref()
    }
}
impl JobExecution {
    /// Creates a new builder-style object to manufacture [`JobExecution`](crate::types::JobExecution).
    pub fn builder() -> crate::types::builders::JobExecutionBuilder {
        crate::types::builders::JobExecutionBuilder::default()
    }
}

/// A builder for [`JobExecution`](crate::types::JobExecution).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobExecutionBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) thing_name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::JobExecutionStatus>,
    pub(crate) status_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) queued_at: std::option::Option<i64>,
    pub(crate) started_at: std::option::Option<i64>,
    pub(crate) last_updated_at: std::option::Option<i64>,
    pub(crate) approximate_seconds_before_timed_out: std::option::Option<i64>,
    pub(crate) version_number: std::option::Option<i64>,
    pub(crate) execution_number: std::option::Option<i64>,
    pub(crate) job_document: std::option::Option<std::string::String>,
}
impl JobExecutionBuilder {
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier you assigned to this job when it was created.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The name of the thing that is executing the job.</p>
    pub fn thing_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.thing_name = Some(input.into());
        self
    }
    /// <p>The name of the thing that is executing the job.</p>
    pub fn set_thing_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.thing_name = input;
        self
    }
    /// <p>The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".</p>
    pub fn status(mut self, input: crate::types::JobExecutionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the job execution. Can be one of: "QUEUED", "IN_PROGRESS", "FAILED", "SUCCESS", "CANCELED", "REJECTED", or "REMOVED".</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::JobExecutionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `status_details`.
    ///
    /// To override the contents of this collection use [`set_status_details`](Self::set_status_details).
    ///
    /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
    pub fn status_details(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.status_details.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.status_details = Some(hash_map);
        self
    }
    /// <p>A collection of name/value pairs that describe the status of the job execution.</p>
    pub fn set_status_details(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.status_details = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn queued_at(mut self, input: i64) -> Self {
        self.queued_at = Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was enqueued.</p>
    pub fn set_queued_at(mut self, input: std::option::Option<i64>) -> Self {
        self.queued_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was started.</p>
    pub fn started_at(mut self, input: i64) -> Self {
        self.started_at = Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was started.</p>
    pub fn set_started_at(mut self, input: std::option::Option<i64>) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated. </p>
    pub fn last_updated_at(mut self, input: i64) -> Self {
        self.last_updated_at = Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the job execution was last updated. </p>
    pub fn set_last_updated_at(mut self, input: std::option::Option<i64>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The estimated number of seconds that remain before the job execution status will be changed to <code>TIMED_OUT</code>.</p>
    pub fn approximate_seconds_before_timed_out(mut self, input: i64) -> Self {
        self.approximate_seconds_before_timed_out = Some(input);
        self
    }
    /// <p>The estimated number of seconds that remain before the job execution status will be changed to <code>TIMED_OUT</code>.</p>
    pub fn set_approximate_seconds_before_timed_out(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.approximate_seconds_before_timed_out = input;
        self
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time they are updated by a device.</p>
    pub fn version_number(mut self, input: i64) -> Self {
        self.version_number = Some(input);
        self
    }
    /// <p>The version of the job execution. Job execution versions are incremented each time they are updated by a device.</p>
    pub fn set_version_number(mut self, input: std::option::Option<i64>) -> Self {
        self.version_number = input;
        self
    }
    /// <p>A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.</p>
    pub fn execution_number(mut self, input: i64) -> Self {
        self.execution_number = Some(input);
        self
    }
    /// <p>A number that identifies a particular job execution on a particular device. It can be used later in commands that return or update job execution information.</p>
    pub fn set_execution_number(mut self, input: std::option::Option<i64>) -> Self {
        self.execution_number = input;
        self
    }
    /// <p>The content of the job document.</p>
    pub fn job_document(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_document = Some(input.into());
        self
    }
    /// <p>The content of the job document.</p>
    pub fn set_job_document(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_document = input;
        self
    }
    /// Consumes the builder and constructs a [`JobExecution`](crate::types::JobExecution).
    pub fn build(self) -> crate::types::JobExecution {
        crate::types::JobExecution {
            job_id: self.job_id,
            thing_name: self.thing_name,
            status: self.status,
            status_details: self.status_details,
            queued_at: self.queued_at.unwrap_or_default(),
            started_at: self.started_at,
            last_updated_at: self.last_updated_at.unwrap_or_default(),
            approximate_seconds_before_timed_out: self.approximate_seconds_before_timed_out,
            version_number: self.version_number.unwrap_or_default(),
            execution_number: self.execution_number,
            job_document: self.job_document,
        }
    }
}
