// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a new dataset  in an Amazon Lookout for Vision project. <code>CreateDataset</code> can create a
/// training or a test dataset from a valid dataset source (<code>DatasetSource</code>).</p>
/// <p>If you want a single dataset project, specify <code>train</code> for the value of
/// <code>DatasetType</code>.</p>
/// <p>To have a project with separate training and test datasets, call <code>CreateDataset</code> twice.
/// On the first call, specify <code>train</code> for the value of
/// <code>DatasetType</code>. On the second call, specify <code>test</code> for the value of
/// <code>DatasetType</code>. </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:CreateDataset</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataset {
    _private: (),
}
impl CreateDataset {
    /// Creates a new builder-style object to manufacture [`CreateDatasetInput`](crate::input::CreateDatasetInput)
    pub fn builder() -> crate::input::create_dataset_input::Builder {
        crate::input::create_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDataset {
    type Output =
        std::result::Result<crate::output::CreateDatasetOutput, crate::error::CreateDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_dataset_error(response)
        } else {
            crate::operation_deser::parse_create_dataset_response(response)
        }
    }
}

/// <p>Creates a new version of a model within an an Amazon Lookout for Vision project.
/// <code>CreateModel</code> is an asynchronous operation in which Amazon Lookout for Vision trains, tests,
/// and evaluates a new version of a model. </p>
/// <p>To get the current status, check the <code>Status</code> field returned
/// in the response from <a>DescribeModel</a>.</p>
/// <p>If the project has a single dataset, Amazon Lookout for Vision internally splits the dataset
/// to create a training and a test dataset.  
/// If the project has a training and a test dataset, Lookout for Vision uses the respective datasets to train and test
/// the model. </p>
/// <p>After training completes, the evaluation metrics are stored at the location specified in
/// <code>OutputConfig</code>.  </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:CreateModel</code> operation. If you want to tag your model, you also require
/// permission to the <code>lookoutvision:TagResource</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModel {
    _private: (),
}
impl CreateModel {
    /// Creates a new builder-style object to manufacture [`CreateModelInput`](crate::input::CreateModelInput)
    pub fn builder() -> crate::input::create_model_input::Builder {
        crate::input::create_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModel {
    type Output =
        std::result::Result<crate::output::CreateModelOutput, crate::error::CreateModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_create_model_error(response)
        } else {
            crate::operation_deser::parse_create_model_response(response)
        }
    }
}

/// <p>Creates an empty Amazon Lookout for Vision project. After you create the project, add a dataset by calling
/// <a>CreateDataset</a>.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:CreateProject</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateProject {
    _private: (),
}
impl CreateProject {
    /// Creates a new builder-style object to manufacture [`CreateProjectInput`](crate::input::CreateProjectInput)
    pub fn builder() -> crate::input::create_project_input::Builder {
        crate::input::create_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateProject {
    type Output =
        std::result::Result<crate::output::CreateProjectOutput, crate::error::CreateProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_project_error(response)
        } else {
            crate::operation_deser::parse_create_project_response(response)
        }
    }
}

/// <p>Deletes an existing Amazon Lookout for Vision <code>dataset</code>. </p>
/// <p>If your the project has a single
/// dataset, you must create a new dataset before you can create a model.</p>
/// <p>If you project has a training dataset and a test dataset consider the following. </p>
/// <ul>
/// <li>
/// <p>If you delete the test dataset, your project reverts to a single dataset project. If you then
/// train the model, Amazon Lookout for Vision internally splits the remaining dataset into a training and test dataset.</p>
/// </li>
/// <li>
/// <p>If you delete the training dataset, you must create a training dataset before you can create a model.</p>
/// </li>
/// </ul>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DeleteDataset</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataset {
    _private: (),
}
impl DeleteDataset {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetInput`](crate::input::DeleteDatasetInput)
    pub fn builder() -> crate::input::delete_dataset_input::Builder {
        crate::input::delete_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataset {
    type Output =
        std::result::Result<crate::output::DeleteDatasetOutput, crate::error::DeleteDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_dataset_error(response)
        } else {
            crate::operation_deser::parse_delete_dataset_response(response)
        }
    }
}

/// <p>Deletes an Amazon Lookout for Vision model. You can't delete a running model. To stop a running model,
/// use the <a>StopModel</a> operation.</p>
/// <p>It might take a few seconds to delete a model. To determine if a model has been deleted, call
/// <a>ListProjects</a> and check if the version of the model (<code>ModelVersion</code>) is in the
/// <code>Models</code> array. </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DeleteModel</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModel {
    _private: (),
}
impl DeleteModel {
    /// Creates a new builder-style object to manufacture [`DeleteModelInput`](crate::input::DeleteModelInput)
    pub fn builder() -> crate::input::delete_model_input::Builder {
        crate::input::delete_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModel {
    type Output =
        std::result::Result<crate::output::DeleteModelOutput, crate::error::DeleteModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_delete_model_error(response)
        } else {
            crate::operation_deser::parse_delete_model_response(response)
        }
    }
}

/// <p>Deletes an Amazon Lookout for Vision project.</p>
/// <p>To delete a project, you must first delete each version of the model associated with
/// the project. To delete a model use the <a>DeleteModel</a> operation.</p>
/// <p>You also have to delete the dataset(s) associated with the model. For more information, see
/// <a>DeleteDataset</a>.  The images referenced by the training and test datasets aren't deleted.
/// </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DeleteProject</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteProject {
    _private: (),
}
impl DeleteProject {
    /// Creates a new builder-style object to manufacture [`DeleteProjectInput`](crate::input::DeleteProjectInput)
    pub fn builder() -> crate::input::delete_project_input::Builder {
        crate::input::delete_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteProject {
    type Output =
        std::result::Result<crate::output::DeleteProjectOutput, crate::error::DeleteProjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_project_error(response)
        } else {
            crate::operation_deser::parse_delete_project_response(response)
        }
    }
}

/// <p>Describe an Amazon Lookout for Vision dataset.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DescribeDataset</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataset {
    _private: (),
}
impl DescribeDataset {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetInput`](crate::input::DescribeDatasetInput)
    pub fn builder() -> crate::input::describe_dataset_input::Builder {
        crate::input::describe_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDataset {
    type Output = std::result::Result<
        crate::output::DescribeDatasetOutput,
        crate::error::DescribeDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dataset_error(response)
        } else {
            crate::operation_deser::parse_describe_dataset_response(response)
        }
    }
}

/// <p>Describes a version of an Amazon Lookout for Vision model.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DescribeModel</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModel {
    _private: (),
}
impl DescribeModel {
    /// Creates a new builder-style object to manufacture [`DescribeModelInput`](crate::input::DescribeModelInput)
    pub fn builder() -> crate::input::describe_model_input::Builder {
        crate::input::describe_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModel {
    type Output =
        std::result::Result<crate::output::DescribeModelOutput, crate::error::DescribeModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_model_error(response)
        } else {
            crate::operation_deser::parse_describe_model_response(response)
        }
    }
}

/// <p>Describes an Amazon Lookout for Vision project.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DescribeProject</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeProject {
    _private: (),
}
impl DescribeProject {
    /// Creates a new builder-style object to manufacture [`DescribeProjectInput`](crate::input::DescribeProjectInput)
    pub fn builder() -> crate::input::describe_project_input::Builder {
        crate::input::describe_project_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeProject {
    type Output = std::result::Result<
        crate::output::DescribeProjectOutput,
        crate::error::DescribeProjectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_project_error(response)
        } else {
            crate::operation_deser::parse_describe_project_response(response)
        }
    }
}

/// <p>Detects anomalies in an image that you supply. </p>
/// <p>The response from <code>DetectAnomalies</code> includes a boolean prediction
/// that the image contains one or more anomalies and a confidence value for the prediction.</p>
/// <note>
/// <p>Before calling <code>DetectAnomalies</code>, you must first start your model with the <a>StartModel</a> operation.
/// You are charged for the amount of time, in minutes, that a model runs and for the number of anomaly detection units that your
/// model uses. If you are not using a model, use the <a>StopModel</a> operation to stop your model. </p>
/// </note>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:DetectAnomalies</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DetectAnomalies {
    _private: (),
}
impl DetectAnomalies {
    /// Creates a new builder-style object to manufacture [`DetectAnomaliesInput`](crate::input::DetectAnomaliesInput)
    pub fn builder() -> crate::input::detect_anomalies_input::Builder {
        crate::input::detect_anomalies_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DetectAnomalies {
    type Output = std::result::Result<
        crate::output::DetectAnomaliesOutput,
        crate::error::DetectAnomaliesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_detect_anomalies_error(response)
        } else {
            crate::operation_deser::parse_detect_anomalies_response(response)
        }
    }
}

/// <p>Lists the JSON Lines within a dataset. An Amazon Lookout for Vision JSON Line contains the anomaly
/// information for a single image, including the image location and the assigned label.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:ListDatasetEntries</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDatasetEntries {
    _private: (),
}
impl ListDatasetEntries {
    /// Creates a new builder-style object to manufacture [`ListDatasetEntriesInput`](crate::input::ListDatasetEntriesInput)
    pub fn builder() -> crate::input::list_dataset_entries_input::Builder {
        crate::input::list_dataset_entries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDatasetEntries {
    type Output = std::result::Result<
        crate::output::ListDatasetEntriesOutput,
        crate::error::ListDatasetEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_dataset_entries_error(response)
        } else {
            crate::operation_deser::parse_list_dataset_entries_response(response)
        }
    }
}

/// <p>Lists the versions of a model in an Amazon Lookout for Vision project.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:ListModels</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModels {
    _private: (),
}
impl ListModels {
    /// Creates a new builder-style object to manufacture [`ListModelsInput`](crate::input::ListModelsInput)
    pub fn builder() -> crate::input::list_models_input::Builder {
        crate::input::list_models_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModels {
    type Output =
        std::result::Result<crate::output::ListModelsOutput, crate::error::ListModelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_models_error(response)
        } else {
            crate::operation_deser::parse_list_models_response(response)
        }
    }
}

/// <p>Lists the Amazon Lookout for Vision projects in your AWS account.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:ListProjects</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListProjects {
    _private: (),
}
impl ListProjects {
    /// Creates a new builder-style object to manufacture [`ListProjectsInput`](crate::input::ListProjectsInput)
    pub fn builder() -> crate::input::list_projects_input::Builder {
        crate::input::list_projects_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListProjects {
    type Output =
        std::result::Result<crate::output::ListProjectsOutput, crate::error::ListProjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_projects_error(response)
        } else {
            crate::operation_deser::parse_list_projects_response(response)
        }
    }
}

/// <p>Returns a list of tags attached to the specified Amazon Lookout for Vision model.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:ListTagsForResource</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Starts the running of the version of an Amazon Lookout for Vision model. Starting a model takes a while
/// to complete. To check the current state of the model, use <a>DescribeModel</a>.</p>
/// <p>A model is ready to use when its status is <code>HOSTED</code>.</p>
/// <p>Once the model is running, you can detect custom labels in new images by calling
/// <a>DetectAnomalies</a>.</p>
/// <note>
/// <p>You are charged for the amount of time that the model is running. To stop a running
/// model, call <a>StopModel</a>.</p>
/// </note>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:StartModel</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartModel {
    _private: (),
}
impl StartModel {
    /// Creates a new builder-style object to manufacture [`StartModelInput`](crate::input::StartModelInput)
    pub fn builder() -> crate::input::start_model_input::Builder {
        crate::input::start_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartModel {
    type Output =
        std::result::Result<crate::output::StartModelOutput, crate::error::StartModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_start_model_error(response)
        } else {
            crate::operation_deser::parse_start_model_response(response)
        }
    }
}

/// <p>Stops the hosting of a running model. The operation might take a while to complete. To
/// check the current status, call <a>DescribeModel</a>. </p>
/// <p>After the model hosting stops, the <code>Status</code> of the model is <code>TRAINED</code>.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:StopModel</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopModel {
    _private: (),
}
impl StopModel {
    /// Creates a new builder-style object to manufacture [`StopModelInput`](crate::input::StopModelInput)
    pub fn builder() -> crate::input::stop_model_input::Builder {
        crate::input::stop_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopModel {
    type Output = std::result::Result<crate::output::StopModelOutput, crate::error::StopModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_stop_model_error(response)
        } else {
            crate::operation_deser::parse_stop_model_response(response)
        }
    }
}

/// <p>Adds one or more key-value tags to an Amazon Lookout for Vision model.
/// For more information, see <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:TagResource</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from an Amazon Lookout for Vision model. For more information, see
/// <i>Tagging a model</i> in the <i>Amazon Lookout for Vision Developer Guide</i>. </p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:UntagResource</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Adds one or more JSON Line entries to a dataset. A JSON Line includes information about an image
/// used for training or testing an Amazon Lookout for Vision model. The following is an example JSON Line.</p>
/// <p>Updating a dataset might take a while to complete. To check the current status, call <a>DescribeDataset</a> and
/// check the <code>Status</code> field in the response.</p>
/// <p>This operation requires permissions to perform the
/// <code>lookoutvision:UpdateDatasetEntries</code> operation.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDatasetEntries {
    _private: (),
}
impl UpdateDatasetEntries {
    /// Creates a new builder-style object to manufacture [`UpdateDatasetEntriesInput`](crate::input::UpdateDatasetEntriesInput)
    pub fn builder() -> crate::input::update_dataset_entries_input::Builder {
        crate::input::update_dataset_entries_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDatasetEntries {
    type Output = std::result::Result<
        crate::output::UpdateDatasetEntriesOutput,
        crate::error::UpdateDatasetEntriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::operation_deser::parse_update_dataset_entries_error(response)
        } else {
            crate::operation_deser::parse_update_dataset_entries_response(response)
        }
    }
}
