// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the location of a manifest file that Amazon Lookout for Vision uses to to create a dataset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatasetSource {
    /// <p>Location information for the manifest file.</p>
    #[doc(hidden)]
    pub ground_truth_manifest: std::option::Option<crate::types::DatasetGroundTruthManifest>,
}
impl DatasetSource {
    /// <p>Location information for the manifest file.</p>
    pub fn ground_truth_manifest(
        &self,
    ) -> std::option::Option<&crate::types::DatasetGroundTruthManifest> {
        self.ground_truth_manifest.as_ref()
    }
}
impl DatasetSource {
    /// Creates a new builder-style object to manufacture [`DatasetSource`](crate::types::DatasetSource).
    pub fn builder() -> crate::types::builders::DatasetSourceBuilder {
        crate::types::builders::DatasetSourceBuilder::default()
    }
}

/// A builder for [`DatasetSource`](crate::types::DatasetSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatasetSourceBuilder {
    pub(crate) ground_truth_manifest: std::option::Option<crate::types::DatasetGroundTruthManifest>,
}
impl DatasetSourceBuilder {
    /// <p>Location information for the manifest file.</p>
    pub fn ground_truth_manifest(
        mut self,
        input: crate::types::DatasetGroundTruthManifest,
    ) -> Self {
        self.ground_truth_manifest = Some(input);
        self
    }
    /// <p>Location information for the manifest file.</p>
    pub fn set_ground_truth_manifest(
        mut self,
        input: std::option::Option<crate::types::DatasetGroundTruthManifest>,
    ) -> Self {
        self.ground_truth_manifest = input;
        self
    }
    /// Consumes the builder and constructs a [`DatasetSource`](crate::types::DatasetSource).
    pub fn build(self) -> crate::types::DatasetSource {
        crate::types::DatasetSource {
            ground_truth_manifest: self.ground_truth_manifest,
        }
    }
}
