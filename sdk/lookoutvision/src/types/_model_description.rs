// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an Amazon Lookout for Vision model.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModelDescription {
    /// <p>The version of the model</p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the model.</p>
    #[doc(hidden)]
    pub model_arn: std::option::Option<std::string::String>,
    /// <p>The unix timestamp for the date and time that the model was created. </p>
    #[doc(hidden)]
    pub creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description for the model.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The status of the model.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ModelStatus>,
    /// <p>The status message for the model.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>Performance metrics for the model. Created during training.</p>
    #[doc(hidden)]
    pub performance: std::option::Option<crate::types::ModelPerformance>,
    /// <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
    #[doc(hidden)]
    pub output_config: std::option::Option<crate::types::OutputConfig>,
    /// <p>The S3 location where Amazon Lookout for Vision saves the manifest file that was used to test the trained model and generate the performance scores.</p>
    #[doc(hidden)]
    pub evaluation_manifest: std::option::Option<crate::types::OutputS3Object>,
    /// <p>The S3 location where Amazon Lookout for Vision saves the performance metrics.</p>
    #[doc(hidden)]
    pub evaluation_result: std::option::Option<crate::types::OutputS3Object>,
    /// <p>The unix timestamp for the date and time that the evaluation ended. </p>
    #[doc(hidden)]
    pub evaluation_end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model during training.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartModel</code> </p>
    #[doc(hidden)]
    pub min_inference_units: std::option::Option<i32>,
    /// <p>The maximum number of inference units Amazon Lookout for Vision uses to auto-scale the model. For more information, see <code>StartModel</code>.</p>
    #[doc(hidden)]
    pub max_inference_units: std::option::Option<i32>,
}
impl ModelDescription {
    /// <p>The version of the model</p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model.</p>
    pub fn model_arn(&self) -> std::option::Option<&str> {
        self.model_arn.as_deref()
    }
    /// <p>The unix timestamp for the date and time that the model was created. </p>
    pub fn creation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The description for the model.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The status of the model.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ModelStatus> {
        self.status.as_ref()
    }
    /// <p>The status message for the model.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>Performance metrics for the model. Created during training.</p>
    pub fn performance(&self) -> std::option::Option<&crate::types::ModelPerformance> {
        self.performance.as_ref()
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
    pub fn output_config(&self) -> std::option::Option<&crate::types::OutputConfig> {
        self.output_config.as_ref()
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the manifest file that was used to test the trained model and generate the performance scores.</p>
    pub fn evaluation_manifest(&self) -> std::option::Option<&crate::types::OutputS3Object> {
        self.evaluation_manifest.as_ref()
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the performance metrics.</p>
    pub fn evaluation_result(&self) -> std::option::Option<&crate::types::OutputS3Object> {
        self.evaluation_result.as_ref()
    }
    /// <p>The unix timestamp for the date and time that the evaluation ended. </p>
    pub fn evaluation_end_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.evaluation_end_timestamp.as_ref()
    }
    /// <p>The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model during training.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartModel</code> </p>
    pub fn min_inference_units(&self) -> std::option::Option<i32> {
        self.min_inference_units
    }
    /// <p>The maximum number of inference units Amazon Lookout for Vision uses to auto-scale the model. For more information, see <code>StartModel</code>.</p>
    pub fn max_inference_units(&self) -> std::option::Option<i32> {
        self.max_inference_units
    }
}
impl ModelDescription {
    /// Creates a new builder-style object to manufacture [`ModelDescription`](crate::types::ModelDescription).
    pub fn builder() -> crate::types::builders::ModelDescriptionBuilder {
        crate::types::builders::ModelDescriptionBuilder::default()
    }
}

/// A builder for [`ModelDescription`](crate::types::ModelDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModelDescriptionBuilder {
    pub(crate) model_version: std::option::Option<std::string::String>,
    pub(crate) model_arn: std::option::Option<std::string::String>,
    pub(crate) creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::ModelStatus>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) performance: std::option::Option<crate::types::ModelPerformance>,
    pub(crate) output_config: std::option::Option<crate::types::OutputConfig>,
    pub(crate) evaluation_manifest: std::option::Option<crate::types::OutputS3Object>,
    pub(crate) evaluation_result: std::option::Option<crate::types::OutputS3Object>,
    pub(crate) evaluation_end_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) min_inference_units: std::option::Option<i32>,
    pub(crate) max_inference_units: std::option::Option<i32>,
}
impl ModelDescriptionBuilder {
    /// <p>The version of the model</p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p>The version of the model</p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model.</p>
    pub fn model_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model.</p>
    pub fn set_model_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The unix timestamp for the date and time that the model was created. </p>
    pub fn creation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = Some(input);
        self
    }
    /// <p>The unix timestamp for the date and time that the model was created. </p>
    pub fn set_creation_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The description for the model.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the model.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The status of the model.</p>
    pub fn status(mut self, input: crate::types::ModelStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the model.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status message for the model.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message for the model.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>Performance metrics for the model. Created during training.</p>
    pub fn performance(mut self, input: crate::types::ModelPerformance) -> Self {
        self.performance = Some(input);
        self
    }
    /// <p>Performance metrics for the model. Created during training.</p>
    pub fn set_performance(
        mut self,
        input: std::option::Option<crate::types::ModelPerformance>,
    ) -> Self {
        self.performance = input;
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
    pub fn output_config(mut self, input: crate::types::OutputConfig) -> Self {
        self.output_config = Some(input);
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves model training files.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::OutputConfig>,
    ) -> Self {
        self.output_config = input;
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the manifest file that was used to test the trained model and generate the performance scores.</p>
    pub fn evaluation_manifest(mut self, input: crate::types::OutputS3Object) -> Self {
        self.evaluation_manifest = Some(input);
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the manifest file that was used to test the trained model and generate the performance scores.</p>
    pub fn set_evaluation_manifest(
        mut self,
        input: std::option::Option<crate::types::OutputS3Object>,
    ) -> Self {
        self.evaluation_manifest = input;
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the performance metrics.</p>
    pub fn evaluation_result(mut self, input: crate::types::OutputS3Object) -> Self {
        self.evaluation_result = Some(input);
        self
    }
    /// <p>The S3 location where Amazon Lookout for Vision saves the performance metrics.</p>
    pub fn set_evaluation_result(
        mut self,
        input: std::option::Option<crate::types::OutputS3Object>,
    ) -> Self {
        self.evaluation_result = input;
        self
    }
    /// <p>The unix timestamp for the date and time that the evaluation ended. </p>
    pub fn evaluation_end_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.evaluation_end_timestamp = Some(input);
        self
    }
    /// <p>The unix timestamp for the date and time that the evaluation ended. </p>
    pub fn set_evaluation_end_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.evaluation_end_timestamp = input;
        self
    }
    /// <p>The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model during training.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The identifer for the AWS Key Management Service (AWS KMS) key that was used to encrypt the model during training.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartModel</code> </p>
    pub fn min_inference_units(mut self, input: i32) -> Self {
        self.min_inference_units = Some(input);
        self
    }
    /// <p>The minimum number of inference units used by the model. For more information, see <code>StartModel</code> </p>
    pub fn set_min_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.min_inference_units = input;
        self
    }
    /// <p>The maximum number of inference units Amazon Lookout for Vision uses to auto-scale the model. For more information, see <code>StartModel</code>.</p>
    pub fn max_inference_units(mut self, input: i32) -> Self {
        self.max_inference_units = Some(input);
        self
    }
    /// <p>The maximum number of inference units Amazon Lookout for Vision uses to auto-scale the model. For more information, see <code>StartModel</code>.</p>
    pub fn set_max_inference_units(mut self, input: std::option::Option<i32>) -> Self {
        self.max_inference_units = input;
        self
    }
    /// Consumes the builder and constructs a [`ModelDescription`](crate::types::ModelDescription).
    pub fn build(self) -> crate::types::ModelDescription {
        crate::types::ModelDescription {
            model_version: self.model_version,
            model_arn: self.model_arn,
            creation_timestamp: self.creation_timestamp,
            description: self.description,
            status: self.status,
            status_message: self.status_message,
            performance: self.performance,
            output_config: self.output_config,
            evaluation_manifest: self.evaluation_manifest,
            evaluation_result: self.evaluation_result,
            evaluation_end_timestamp: self.evaluation_end_timestamp,
            kms_key_id: self.kms_key_id,
            min_inference_units: self.min_inference_units,
            max_inference_units: self.max_inference_units,
        }
    }
}
