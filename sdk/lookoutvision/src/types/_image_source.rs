// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The source for an image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImageSource {
    /// <p>The type of the image.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl ImageSource {
    /// <p>The type of the image.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl ImageSource {
    /// Creates a new builder-style object to manufacture [`ImageSource`](crate::types::ImageSource).
    pub fn builder() -> crate::types::builders::ImageSourceBuilder {
        crate::types::builders::ImageSourceBuilder::default()
    }
}

/// A builder for [`ImageSource`](crate::types::ImageSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageSourceBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl ImageSourceBuilder {
    /// <p>The type of the image.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the image.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageSource`](crate::types::ImageSource).
    pub fn build(self) -> crate::types::ImageSource {
        crate::types::ImageSource {
            r#type: self.r#type,
        }
    }
}
