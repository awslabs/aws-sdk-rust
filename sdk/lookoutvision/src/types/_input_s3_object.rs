// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon S3 Location information for an input manifest file. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputS3Object {
    /// <p>The Amazon S3 bucket that contains the manifest.</p>
    pub bucket: ::std::option::Option<::std::string::String>,
    /// <p>The name and location of the manifest file withiin the bucket.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The version ID of the bucket.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
}
impl InputS3Object {
    /// <p>The Amazon S3 bucket that contains the manifest.</p>
    pub fn bucket(&self) -> ::std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The name and location of the manifest file withiin the bucket.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The version ID of the bucket.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
}
impl InputS3Object {
    /// Creates a new builder-style object to manufacture [`InputS3Object`](crate::types::InputS3Object).
    pub fn builder() -> crate::types::builders::InputS3ObjectBuilder {
        crate::types::builders::InputS3ObjectBuilder::default()
    }
}

/// A builder for [`InputS3Object`](crate::types::InputS3Object).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputS3ObjectBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
}
impl InputS3ObjectBuilder {
    /// <p>The Amazon S3 bucket that contains the manifest.</p>
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket that contains the manifest.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The Amazon S3 bucket that contains the manifest.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>The name and location of the manifest file withiin the bucket.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name and location of the manifest file withiin the bucket.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name and location of the manifest file withiin the bucket.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The version ID of the bucket.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version ID of the bucket.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The version ID of the bucket.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// Consumes the builder and constructs a [`InputS3Object`](crate::types::InputS3Object).
    pub fn build(self) -> crate::types::InputS3Object {
        crate::types::InputS3Object {
            bucket: self.bucket,
            key: self.key,
            version_id: self.version_id,
        }
    }
}
