// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Configuration information for a Amazon Lookout for Vision model packaging job. For more information, see <code>StartModelPackagingJob</code>. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ModelPackagingConfiguration {
    /// <p> Configuration information for the AWS IoT Greengrass component in a model packaging job. </p>
    pub greengrass: ::std::option::Option<crate::types::GreengrassConfiguration>,
}
impl ModelPackagingConfiguration {
    /// <p> Configuration information for the AWS IoT Greengrass component in a model packaging job. </p>
    pub fn greengrass(&self) -> ::std::option::Option<&crate::types::GreengrassConfiguration> {
        self.greengrass.as_ref()
    }
}
impl ModelPackagingConfiguration {
    /// Creates a new builder-style object to manufacture [`ModelPackagingConfiguration`](crate::types::ModelPackagingConfiguration).
    pub fn builder() -> crate::types::builders::ModelPackagingConfigurationBuilder {
        crate::types::builders::ModelPackagingConfigurationBuilder::default()
    }
}

/// A builder for [`ModelPackagingConfiguration`](crate::types::ModelPackagingConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ModelPackagingConfigurationBuilder {
    pub(crate) greengrass: ::std::option::Option<crate::types::GreengrassConfiguration>,
}
impl ModelPackagingConfigurationBuilder {
    /// <p> Configuration information for the AWS IoT Greengrass component in a model packaging job. </p>
    /// This field is required.
    pub fn greengrass(mut self, input: crate::types::GreengrassConfiguration) -> Self {
        self.greengrass = ::std::option::Option::Some(input);
        self
    }
    /// <p> Configuration information for the AWS IoT Greengrass component in a model packaging job. </p>
    pub fn set_greengrass(mut self, input: ::std::option::Option<crate::types::GreengrassConfiguration>) -> Self {
        self.greengrass = input;
        self
    }
    /// <p> Configuration information for the AWS IoT Greengrass component in a model packaging job. </p>
    pub fn get_greengrass(&self) -> &::std::option::Option<crate::types::GreengrassConfiguration> {
        &self.greengrass
    }
    /// Consumes the builder and constructs a [`ModelPackagingConfiguration`](crate::types::ModelPackagingConfiguration).
    pub fn build(self) -> crate::types::ModelPackagingConfiguration {
        crate::types::ModelPackagingConfiguration { greengrass: self.greengrass }
    }
}
