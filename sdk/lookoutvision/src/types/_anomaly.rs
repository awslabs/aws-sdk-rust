// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an anomaly type found on an image by an image segmentation model. For more information, see <code>DetectAnomalies</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Anomaly {
    /// <p>The name of an anomaly type found in an image. <code>Name</code> maps to an anomaly type in the training dataset, apart from the anomaly type <code>background</code>. The service automatically inserts the <code>background</code> anomaly type into the response from <code>DetectAnomalies</code>. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Information about the pixel mask that covers an anomaly type.</p>
    #[doc(hidden)]
    pub pixel_anomaly: std::option::Option<crate::types::PixelAnomaly>,
}
impl Anomaly {
    /// <p>The name of an anomaly type found in an image. <code>Name</code> maps to an anomaly type in the training dataset, apart from the anomaly type <code>background</code>. The service automatically inserts the <code>background</code> anomaly type into the response from <code>DetectAnomalies</code>. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Information about the pixel mask that covers an anomaly type.</p>
    pub fn pixel_anomaly(&self) -> std::option::Option<&crate::types::PixelAnomaly> {
        self.pixel_anomaly.as_ref()
    }
}
impl Anomaly {
    /// Creates a new builder-style object to manufacture [`Anomaly`](crate::types::Anomaly).
    pub fn builder() -> crate::types::builders::AnomalyBuilder {
        crate::types::builders::AnomalyBuilder::default()
    }
}

/// A builder for [`Anomaly`](crate::types::Anomaly).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnomalyBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) pixel_anomaly: std::option::Option<crate::types::PixelAnomaly>,
}
impl AnomalyBuilder {
    /// <p>The name of an anomaly type found in an image. <code>Name</code> maps to an anomaly type in the training dataset, apart from the anomaly type <code>background</code>. The service automatically inserts the <code>background</code> anomaly type into the response from <code>DetectAnomalies</code>. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of an anomaly type found in an image. <code>Name</code> maps to an anomaly type in the training dataset, apart from the anomaly type <code>background</code>. The service automatically inserts the <code>background</code> anomaly type into the response from <code>DetectAnomalies</code>. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Information about the pixel mask that covers an anomaly type.</p>
    pub fn pixel_anomaly(mut self, input: crate::types::PixelAnomaly) -> Self {
        self.pixel_anomaly = Some(input);
        self
    }
    /// <p>Information about the pixel mask that covers an anomaly type.</p>
    pub fn set_pixel_anomaly(
        mut self,
        input: std::option::Option<crate::types::PixelAnomaly>,
    ) -> Self {
        self.pixel_anomaly = input;
        self
    }
    /// Consumes the builder and constructs a [`Anomaly`](crate::types::Anomaly).
    pub fn build(self) -> crate::types::Anomaly {
        crate::types::Anomaly {
            name: self.name,
            pixel_anomaly: self.pixel_anomaly,
        }
    }
}
