// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for the AWS IoT Greengrass component created in a model packaging job. For more information, see <code>StartModelPackagingJob</code>. </p> <note>
/// <p>You can't specify a component with the same <code>ComponentName</code> and <code>Componentversion</code> as an existing component with the same component name and component version.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GreengrassConfiguration {
    /// <p>Additional compiler options for the Greengrass component. Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators are supported. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p>
    /// <p>For more information, see <i>Compiler options</i> in the Amazon Lookout for Vision Developer Guide. </p>
    #[doc(hidden)]
    pub compiler_options: std::option::Option<std::string::String>,
    /// <p>The target device for the model. Currently the only supported value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>, you can't specify <code>TargetPlatform</code>. </p>
    #[doc(hidden)]
    pub target_device: std::option::Option<crate::types::TargetDevice>,
    /// <p>The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify <code>TargetDevice</code>. </p>
    #[doc(hidden)]
    pub target_platform: std::option::Option<crate::types::TargetPlatform>,
    /// <p> An S3 location in which Lookout for Vision stores the component artifacts. </p>
    #[doc(hidden)]
    pub s3_output_location: std::option::Option<crate::types::S3Location>,
    /// <p> A name for the AWS IoT Greengrass component. </p>
    #[doc(hidden)]
    pub component_name: std::option::Option<std::string::String>,
    /// <p>A Version for the AWS IoT Greengrass component. If you don't provide a value, a default value of <code> <i>Model Version</i>.0.0</code> is used. </p>
    #[doc(hidden)]
    pub component_version: std::option::Option<std::string::String>,
    /// <p> A description for the AWS IoT Greengrass component. </p>
    #[doc(hidden)]
    pub component_description: std::option::Option<std::string::String>,
    /// <p> A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component. </p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl GreengrassConfiguration {
    /// <p>Additional compiler options for the Greengrass component. Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators are supported. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p>
    /// <p>For more information, see <i>Compiler options</i> in the Amazon Lookout for Vision Developer Guide. </p>
    pub fn compiler_options(&self) -> std::option::Option<&str> {
        self.compiler_options.as_deref()
    }
    /// <p>The target device for the model. Currently the only supported value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>, you can't specify <code>TargetPlatform</code>. </p>
    pub fn target_device(&self) -> std::option::Option<&crate::types::TargetDevice> {
        self.target_device.as_ref()
    }
    /// <p>The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify <code>TargetDevice</code>. </p>
    pub fn target_platform(&self) -> std::option::Option<&crate::types::TargetPlatform> {
        self.target_platform.as_ref()
    }
    /// <p> An S3 location in which Lookout for Vision stores the component artifacts. </p>
    pub fn s3_output_location(&self) -> std::option::Option<&crate::types::S3Location> {
        self.s3_output_location.as_ref()
    }
    /// <p> A name for the AWS IoT Greengrass component. </p>
    pub fn component_name(&self) -> std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p>A Version for the AWS IoT Greengrass component. If you don't provide a value, a default value of <code> <i>Model Version</i>.0.0</code> is used. </p>
    pub fn component_version(&self) -> std::option::Option<&str> {
        self.component_version.as_deref()
    }
    /// <p> A description for the AWS IoT Greengrass component. </p>
    pub fn component_description(&self) -> std::option::Option<&str> {
        self.component_description.as_deref()
    }
    /// <p> A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component. </p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl GreengrassConfiguration {
    /// Creates a new builder-style object to manufacture [`GreengrassConfiguration`](crate::types::GreengrassConfiguration).
    pub fn builder() -> crate::types::builders::GreengrassConfigurationBuilder {
        crate::types::builders::GreengrassConfigurationBuilder::default()
    }
}

/// A builder for [`GreengrassConfiguration`](crate::types::GreengrassConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GreengrassConfigurationBuilder {
    pub(crate) compiler_options: std::option::Option<std::string::String>,
    pub(crate) target_device: std::option::Option<crate::types::TargetDevice>,
    pub(crate) target_platform: std::option::Option<crate::types::TargetPlatform>,
    pub(crate) s3_output_location: std::option::Option<crate::types::S3Location>,
    pub(crate) component_name: std::option::Option<std::string::String>,
    pub(crate) component_version: std::option::Option<std::string::String>,
    pub(crate) component_description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl GreengrassConfigurationBuilder {
    /// <p>Additional compiler options for the Greengrass component. Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators are supported. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p>
    /// <p>For more information, see <i>Compiler options</i> in the Amazon Lookout for Vision Developer Guide. </p>
    pub fn compiler_options(mut self, input: impl Into<std::string::String>) -> Self {
        self.compiler_options = Some(input.into());
        self
    }
    /// <p>Additional compiler options for the Greengrass component. Currently, only NVIDIA Graphics Processing Units (GPU) and CPU accelerators are supported. If you specify <code>TargetDevice</code>, don't specify <code>CompilerOptions</code>.</p>
    /// <p>For more information, see <i>Compiler options</i> in the Amazon Lookout for Vision Developer Guide. </p>
    pub fn set_compiler_options(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.compiler_options = input;
        self
    }
    /// <p>The target device for the model. Currently the only supported value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>, you can't specify <code>TargetPlatform</code>. </p>
    pub fn target_device(mut self, input: crate::types::TargetDevice) -> Self {
        self.target_device = Some(input);
        self
    }
    /// <p>The target device for the model. Currently the only supported value is <code>jetson_xavier</code>. If you specify <code>TargetDevice</code>, you can't specify <code>TargetPlatform</code>. </p>
    pub fn set_target_device(
        mut self,
        input: std::option::Option<crate::types::TargetDevice>,
    ) -> Self {
        self.target_device = input;
        self
    }
    /// <p>The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify <code>TargetDevice</code>. </p>
    pub fn target_platform(mut self, input: crate::types::TargetPlatform) -> Self {
        self.target_platform = Some(input);
        self
    }
    /// <p>The target platform for the model. If you specify <code>TargetPlatform</code>, you can't specify <code>TargetDevice</code>. </p>
    pub fn set_target_platform(
        mut self,
        input: std::option::Option<crate::types::TargetPlatform>,
    ) -> Self {
        self.target_platform = input;
        self
    }
    /// <p> An S3 location in which Lookout for Vision stores the component artifacts. </p>
    pub fn s3_output_location(mut self, input: crate::types::S3Location) -> Self {
        self.s3_output_location = Some(input);
        self
    }
    /// <p> An S3 location in which Lookout for Vision stores the component artifacts. </p>
    pub fn set_s3_output_location(
        mut self,
        input: std::option::Option<crate::types::S3Location>,
    ) -> Self {
        self.s3_output_location = input;
        self
    }
    /// <p> A name for the AWS IoT Greengrass component. </p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_name = Some(input.into());
        self
    }
    /// <p> A name for the AWS IoT Greengrass component. </p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p>A Version for the AWS IoT Greengrass component. If you don't provide a value, a default value of <code> <i>Model Version</i>.0.0</code> is used. </p>
    pub fn component_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_version = Some(input.into());
        self
    }
    /// <p>A Version for the AWS IoT Greengrass component. If you don't provide a value, a default value of <code> <i>Model Version</i>.0.0</code> is used. </p>
    pub fn set_component_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_version = input;
        self
    }
    /// <p> A description for the AWS IoT Greengrass component. </p>
    pub fn component_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_description = Some(input.into());
        self
    }
    /// <p> A description for the AWS IoT Greengrass component. </p>
    pub fn set_component_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.component_description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p> A set of tags (key-value pairs) that you want to attach to the AWS IoT Greengrass component. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`GreengrassConfiguration`](crate::types::GreengrassConfiguration).
    pub fn build(self) -> crate::types::GreengrassConfiguration {
        crate::types::GreengrassConfiguration {
            compiler_options: self.compiler_options,
            target_device: self.target_device,
            target_platform: self.target_platform,
            s3_output_location: self.s3_output_location,
            component_name: self.component_name,
            component_version: self.component_version,
            component_description: self.component_description,
            tags: self.tags,
        }
    }
}
