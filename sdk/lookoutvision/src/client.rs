// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Lookout for Vision
///
/// Client for invoking operations on Amazon Lookout for Vision. Each operation on Amazon Lookout for Vision is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_lookoutvision::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_lookoutvision::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_lookoutvision::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateDataset`](crate::client::fluent_builders::CreateDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_project_name): <p>The name of the project in which you want to create a dataset.</p>
    ///   - [`dataset_type(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::dataset_type) / [`set_dataset_type(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_dataset_type): <p>The type of the dataset. Specify <code>train</code> for a training dataset. Specify <code>test</code> for a test dataset.</p>
    ///   - [`dataset_source(DatasetSource)`](crate::client::fluent_builders::CreateDataset::dataset_source) / [`set_dataset_source(Option<DatasetSource>)`](crate::client::fluent_builders::CreateDataset::set_dataset_source): <p>The location of the manifest file that Amazon Lookout for Vision uses to create the dataset.</p>  <p>If you don't specify <code>DatasetSource</code>, an empty dataset is created and the operation synchronously returns. Later, you can add JSON Lines by calling <code>UpdateDatasetEntries</code>. </p>  <p>If you specify a value for <code>DataSource</code>, the manifest at the S3 location is validated and used to create the dataset. The call to <code>CreateDataset</code> is asynchronous and might take a while to complete. To find out the current status, Check the value of <code>Status</code> returned in a call to <code>DescribeDataset</code>.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateDataset::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateDataset::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>CreateDataset</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>CreateDataset</code>. In this case, safely retry your call to <code>CreateDataset</code> by using the same <code>ClientToken</code> parameter value.</p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateDataset</code>. An idempotency token is active for 8 hours. </p>
    /// - On success, responds with [`CreateDatasetOutput`](crate::output::CreateDatasetOutput) with field(s):
    ///   - [`dataset_metadata(Option<DatasetMetadata>)`](crate::output::CreateDatasetOutput::dataset_metadata): <p>Information about the dataset.</p>
    /// - On failure, responds with [`SdkError<CreateDatasetError>`](crate::error::CreateDatasetError)
    pub fn create_dataset(&self) -> crate::client::fluent_builders::CreateDataset {
        crate::client::fluent_builders::CreateDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateModel`](crate::client::fluent_builders::CreateModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::CreateModel::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::CreateModel::set_project_name): <p>The name of the project in which you want to create a model version.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateModel::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateModel::set_description): <p>A description for the version of the model.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateModel::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateModel::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>CreateModel</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>CreateModel</code>. In this case, safely retry your call to <code>CreateModel</code> by using the same <code>ClientToken</code> parameter value. </p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from starting multiple training jobs. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateModel</code>. An idempotency token is active for 8 hours.</p>
    ///   - [`output_config(OutputConfig)`](crate::client::fluent_builders::CreateModel::output_config) / [`set_output_config(Option<OutputConfig>)`](crate::client::fluent_builders::CreateModel::set_output_config): <p>The location where Amazon Lookout for Vision saves the training results.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::CreateModel::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::CreateModel::set_kms_key_id): <p>The identifier for your AWS KMS key. The key is used to encrypt training and test images copied into the service for model training. Your source images are unaffected. If this parameter is not specified, the copied images are encrypted by a key that AWS owns and manages.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateModel::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateModel::set_tags): <p>A set of tags (key-value pairs) that you want to attach to the model.</p>
    /// - On success, responds with [`CreateModelOutput`](crate::output::CreateModelOutput) with field(s):
    ///   - [`model_metadata(Option<ModelMetadata>)`](crate::output::CreateModelOutput::model_metadata): <p>The response from a call to <code>CreateModel</code>.</p>
    /// - On failure, responds with [`SdkError<CreateModelError>`](crate::error::CreateModelError)
    pub fn create_model(&self) -> crate::client::fluent_builders::CreateModel {
        crate::client::fluent_builders::CreateModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateProject`](crate::client::fluent_builders::CreateProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::CreateProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::CreateProject::set_project_name): <p>The name for the project.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateProject::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateProject::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>CreateProject</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>CreateProject</code>. In this case, safely retry your call to <code>CreateProject</code> by using the same <code>ClientToken</code> parameter value. </p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project creation requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>CreateProject</code>. An idempotency token is active for 8 hours.</p>
    /// - On success, responds with [`CreateProjectOutput`](crate::output::CreateProjectOutput) with field(s):
    ///   - [`project_metadata(Option<ProjectMetadata>)`](crate::output::CreateProjectOutput::project_metadata): <p>Information about the project.</p>
    /// - On failure, responds with [`SdkError<CreateProjectError>`](crate::error::CreateProjectError)
    pub fn create_project(&self) -> crate::client::fluent_builders::CreateProject {
        crate::client::fluent_builders::CreateProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDataset`](crate::client::fluent_builders::DeleteDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DeleteDataset::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DeleteDataset::set_project_name): <p>The name of the project that contains the dataset that you want to delete.</p>
    ///   - [`dataset_type(impl Into<String>)`](crate::client::fluent_builders::DeleteDataset::dataset_type) / [`set_dataset_type(Option<String>)`](crate::client::fluent_builders::DeleteDataset::set_dataset_type): <p>The type of the dataset to delete. Specify <code>train</code> to delete the training dataset. Specify <code>test</code> to delete the test dataset. To delete the dataset in a single dataset project, specify <code>train</code>.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteDataset::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteDataset::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>DeleteDataset</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>DeleteDataset</code>. In this case, safely retry your call to <code>DeleteDataset</code> by using the same <code>ClientToken</code> parameter value. </p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple deletetion requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteDataset</code>. An idempotency token is active for 8 hours.</p>
    /// - On success, responds with [`DeleteDatasetOutput`](crate::output::DeleteDatasetOutput)

    /// - On failure, responds with [`SdkError<DeleteDatasetError>`](crate::error::DeleteDatasetError)
    pub fn delete_dataset(&self) -> crate::client::fluent_builders::DeleteDataset {
        crate::client::fluent_builders::DeleteDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteModel`](crate::client::fluent_builders::DeleteModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DeleteModel::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DeleteModel::set_project_name): <p>The name of the project that contains the model that you want to delete.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::DeleteModel::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::DeleteModel::set_model_version): <p>The version of the model that you want to delete.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteModel::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteModel::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>DeleteModel</code> completes only once. You choose the value to pass. For example, an issue might prevent you from getting a response from <code>DeleteModel</code>. In this case, safely retry your call to <code>DeleteModel</code> by using the same <code>ClientToken</code> parameter value.</p>  <p>If you don't supply a value for ClientToken, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple model deletion requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteModel</code>. An idempotency token is active for 8 hours.</p>
    /// - On success, responds with [`DeleteModelOutput`](crate::output::DeleteModelOutput) with field(s):
    ///   - [`model_arn(Option<String>)`](crate::output::DeleteModelOutput::model_arn): <p>The Amazon Resource Name (ARN) of the model that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteModelError>`](crate::error::DeleteModelError)
    pub fn delete_model(&self) -> crate::client::fluent_builders::DeleteModel {
        crate::client::fluent_builders::DeleteModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProject`](crate::client::fluent_builders::DeleteProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DeleteProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DeleteProject::set_project_name): <p>The name of the project to delete.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::DeleteProject::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::DeleteProject::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>DeleteProject</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>DeleteProject</code>. In this case, safely retry your call to <code>DeleteProject</code> by using the same <code>ClientToken</code> parameter value. </p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple project deletion requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>DeleteProject</code>. An idempotency token is active for 8 hours.</p>
    /// - On success, responds with [`DeleteProjectOutput`](crate::output::DeleteProjectOutput) with field(s):
    ///   - [`project_arn(Option<String>)`](crate::output::DeleteProjectOutput::project_arn): <p>The Amazon Resource Name (ARN) of the project that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteProjectError>`](crate::error::DeleteProjectError)
    pub fn delete_project(&self) -> crate::client::fluent_builders::DeleteProject {
        crate::client::fluent_builders::DeleteProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDataset`](crate::client::fluent_builders::DescribeDataset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribeDataset::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribeDataset::set_project_name): <p>The name of the project that contains the dataset that you want to describe.</p>
    ///   - [`dataset_type(impl Into<String>)`](crate::client::fluent_builders::DescribeDataset::dataset_type) / [`set_dataset_type(Option<String>)`](crate::client::fluent_builders::DescribeDataset::set_dataset_type): <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    /// - On success, responds with [`DescribeDatasetOutput`](crate::output::DescribeDatasetOutput) with field(s):
    ///   - [`dataset_description(Option<DatasetDescription>)`](crate::output::DescribeDatasetOutput::dataset_description): <p>The description of the requested dataset. </p>
    /// - On failure, responds with [`SdkError<DescribeDatasetError>`](crate::error::DescribeDatasetError)
    pub fn describe_dataset(&self) -> crate::client::fluent_builders::DescribeDataset {
        crate::client::fluent_builders::DescribeDataset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeModel`](crate::client::fluent_builders::DescribeModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribeModel::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribeModel::set_project_name): <p>The project that contains the version of a model that you want to describe.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::DescribeModel::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::DescribeModel::set_model_version): <p>The version of the model that you want to describe.</p>
    /// - On success, responds with [`DescribeModelOutput`](crate::output::DescribeModelOutput) with field(s):
    ///   - [`model_description(Option<ModelDescription>)`](crate::output::DescribeModelOutput::model_description): <p>Contains the description of the model.</p>
    /// - On failure, responds with [`SdkError<DescribeModelError>`](crate::error::DescribeModelError)
    pub fn describe_model(&self) -> crate::client::fluent_builders::DescribeModel {
        crate::client::fluent_builders::DescribeModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeModelPackagingJob`](crate::client::fluent_builders::DescribeModelPackagingJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribeModelPackagingJob::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribeModelPackagingJob::set_project_name): <p>The name of the project that contains the model packaging job that you want to describe. </p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::DescribeModelPackagingJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::DescribeModelPackagingJob::set_job_name): <p>The job name for the model packaging job. </p>
    /// - On success, responds with [`DescribeModelPackagingJobOutput`](crate::output::DescribeModelPackagingJobOutput) with field(s):
    ///   - [`model_packaging_description(Option<ModelPackagingDescription>)`](crate::output::DescribeModelPackagingJobOutput::model_packaging_description): <p>The description of the model packaging job. </p>
    /// - On failure, responds with [`SdkError<DescribeModelPackagingJobError>`](crate::error::DescribeModelPackagingJobError)
    pub fn describe_model_packaging_job(
        &self,
    ) -> crate::client::fluent_builders::DescribeModelPackagingJob {
        crate::client::fluent_builders::DescribeModelPackagingJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeProject`](crate::client::fluent_builders::DescribeProject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DescribeProject::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DescribeProject::set_project_name): <p>The name of the project that you want to describe.</p>
    /// - On success, responds with [`DescribeProjectOutput`](crate::output::DescribeProjectOutput) with field(s):
    ///   - [`project_description(Option<ProjectDescription>)`](crate::output::DescribeProjectOutput::project_description): <p>The description of the project.</p>
    /// - On failure, responds with [`SdkError<DescribeProjectError>`](crate::error::DescribeProjectError)
    pub fn describe_project(&self) -> crate::client::fluent_builders::DescribeProject {
        crate::client::fluent_builders::DescribeProject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetectAnomalies`](crate::client::fluent_builders::DetectAnomalies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_project_name): <p>The name of the project that contains the model version that you want to use.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_model_version): <p>The version of the model that you want to use.</p>
    ///   - [`body(ByteStream)`](crate::client::fluent_builders::DetectAnomalies::body) / [`set_body(ByteStream)`](crate::client::fluent_builders::DetectAnomalies::set_body): <p>The unencrypted image bytes that you want to analyze. </p>
    ///   - [`content_type(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::content_type) / [`set_content_type(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_content_type): <p>The type of the image passed in <code>Body</code>. Valid values are <code>image/png</code> (PNG format images) and <code>image/jpeg</code> (JPG format images). </p>
    /// - On success, responds with [`DetectAnomaliesOutput`](crate::output::DetectAnomaliesOutput) with field(s):
    ///   - [`detect_anomaly_result(Option<DetectAnomalyResult>)`](crate::output::DetectAnomaliesOutput::detect_anomaly_result): <p>The results of the <code>DetectAnomalies</code> operation.</p>
    /// - On failure, responds with [`SdkError<DetectAnomaliesError>`](crate::error::DetectAnomaliesError)
    pub fn detect_anomalies(&self) -> crate::client::fluent_builders::DetectAnomalies {
        crate::client::fluent_builders::DetectAnomalies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDatasetEntries`](crate::client::fluent_builders::ListDatasetEntries) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDatasetEntries::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::ListDatasetEntries::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::ListDatasetEntries::set_project_name): <p>The name of the project that contains the dataset that you want to list.</p>
    ///   - [`dataset_type(impl Into<String>)`](crate::client::fluent_builders::ListDatasetEntries::dataset_type) / [`set_dataset_type(Option<String>)`](crate::client::fluent_builders::ListDatasetEntries::set_dataset_type): <p>The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    ///   - [`labeled(bool)`](crate::client::fluent_builders::ListDatasetEntries::labeled) / [`set_labeled(Option<bool>)`](crate::client::fluent_builders::ListDatasetEntries::set_labeled): <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don't specify a value, Lookout for Vision returns all entries.</p>
    ///   - [`anomaly_class(impl Into<String>)`](crate::client::fluent_builders::ListDatasetEntries::anomaly_class) / [`set_anomaly_class(Option<String>)`](crate::client::fluent_builders::ListDatasetEntries::set_anomaly_class): <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
    ///   - [`before_creation_date(DateTime)`](crate::client::fluent_builders::ListDatasetEntries::before_creation_date) / [`set_before_creation_date(Option<DateTime>)`](crate::client::fluent_builders::ListDatasetEntries::set_before_creation_date): <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    ///   - [`after_creation_date(DateTime)`](crate::client::fluent_builders::ListDatasetEntries::after_creation_date) / [`set_after_creation_date(Option<DateTime>)`](crate::client::fluent_builders::ListDatasetEntries::set_after_creation_date): <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDatasetEntries::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDatasetEntries::set_next_token): <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDatasetEntries::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDatasetEntries::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    ///   - [`source_ref_contains(impl Into<String>)`](crate::client::fluent_builders::ListDatasetEntries::source_ref_contains) / [`set_source_ref_contains(Option<String>)`](crate::client::fluent_builders::ListDatasetEntries::set_source_ref_contains): <p>Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
    /// - On success, responds with [`ListDatasetEntriesOutput`](crate::output::ListDatasetEntriesOutput) with field(s):
    ///   - [`dataset_entries(Option<Vec<String>>)`](crate::output::ListDatasetEntriesOutput::dataset_entries): <p>A list of the entries (JSON Lines) within the dataset.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDatasetEntriesOutput::next_token): <p>If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set ofdataset entries.</p>
    /// - On failure, responds with [`SdkError<ListDatasetEntriesError>`](crate::error::ListDatasetEntriesError)
    pub fn list_dataset_entries(&self) -> crate::client::fluent_builders::ListDatasetEntries {
        crate::client::fluent_builders::ListDatasetEntries::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListModelPackagingJobs`](crate::client::fluent_builders::ListModelPackagingJobs) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListModelPackagingJobs::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::ListModelPackagingJobs::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::ListModelPackagingJobs::set_project_name): <p> The name of the project for which you want to list the model packaging jobs. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListModelPackagingJobs::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListModelPackagingJobs::set_next_token): <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListModelPackagingJobs::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListModelPackagingJobs::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100. </p>
    /// - On success, responds with [`ListModelPackagingJobsOutput`](crate::output::ListModelPackagingJobsOutput) with field(s):
    ///   - [`model_packaging_jobs(Option<Vec<ModelPackagingJobMetadata>>)`](crate::output::ListModelPackagingJobsOutput::model_packaging_jobs): <p> A list of the model packaging jobs created for the specified Amazon Lookout for Vision project. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListModelPackagingJobsOutput::next_token): <p>If the previous response was incomplete (because there is more results to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListModelPackagingJobsError>`](crate::error::ListModelPackagingJobsError)
    pub fn list_model_packaging_jobs(
        &self,
    ) -> crate::client::fluent_builders::ListModelPackagingJobs {
        crate::client::fluent_builders::ListModelPackagingJobs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListModels`](crate::client::fluent_builders::ListModels) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListModels::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::ListModels::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::ListModels::set_project_name): <p>The name of the project that contains the model versions that you want to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListModels::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListModels::set_next_token): <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of models.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListModels::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListModels::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    /// - On success, responds with [`ListModelsOutput`](crate::output::ListModelsOutput) with field(s):
    ///   - [`models(Option<Vec<ModelMetadata>>)`](crate::output::ListModelsOutput::models): <p>A list of model versions in the specified project. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListModelsOutput::next_token): <p>If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set of models. </p>
    /// - On failure, responds with [`SdkError<ListModelsError>`](crate::error::ListModelsError)
    pub fn list_models(&self) -> crate::client::fluent_builders::ListModels {
        crate::client::fluent_builders::ListModels::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProjects`](crate::client::fluent_builders::ListProjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProjects::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProjects::set_next_token): <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of projects.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListProjects::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListProjects::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    /// - On success, responds with [`ListProjectsOutput`](crate::output::ListProjectsOutput) with field(s):
    ///   - [`projects(Option<Vec<ProjectMetadata>>)`](crate::output::ListProjectsOutput::projects): <p>A list of projects in your AWS account.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListProjectsOutput::next_token): <p>If the response is truncated, Amazon Lookout for Vision returns this token that you can use in the subsequent request to retrieve the next set of projects.</p>
    /// - On failure, responds with [`SdkError<ListProjectsError>`](crate::error::ListProjectsError)
    pub fn list_projects(&self) -> crate::client::fluent_builders::ListProjects {
        crate::client::fluent_builders::ListProjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the model for which you want to list tags. </p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A map of tag keys and values attached to the specified model.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartModel`](crate::client::fluent_builders::StartModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::StartModel::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::StartModel::set_project_name): <p>The name of the project that contains the model that you want to start.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::StartModel::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::StartModel::set_model_version): <p>The version of the model that you want to start.</p>
    ///   - [`min_inference_units(i32)`](crate::client::fluent_builders::StartModel::min_inference_units) / [`set_min_inference_units(Option<i32>)`](crate::client::fluent_builders::StartModel::set_min_inference_units): <p>The minimum number of inference units to use. A single inference unit represents 1 hour of processing. Use a higher number to increase the TPS throughput of your model. You are charged for the number of inference units that you use. </p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartModel::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartModel::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>StartModel</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModel</code>. In this case, safely retry your call to <code>StartModel</code> by using the same <code>ClientToken</code> parameter value. </p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple start requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModel</code>. An idempotency token is active for 8 hours. </p>
    ///   - [`max_inference_units(i32)`](crate::client::fluent_builders::StartModel::max_inference_units) / [`set_max_inference_units(Option<i32>)`](crate::client::fluent_builders::StartModel::set_max_inference_units): <p>The maximum number of inference units to use for auto-scaling the model. If you don't specify a value, Amazon Lookout for Vision doesn't auto-scale the model.</p>
    /// - On success, responds with [`StartModelOutput`](crate::output::StartModelOutput) with field(s):
    ///   - [`status(Option<ModelHostingStatus>)`](crate::output::StartModelOutput::status): <p>The current running status of the model.</p>
    /// - On failure, responds with [`SdkError<StartModelError>`](crate::error::StartModelError)
    pub fn start_model(&self) -> crate::client::fluent_builders::StartModel {
        crate::client::fluent_builders::StartModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartModelPackagingJob`](crate::client::fluent_builders::StartModelPackagingJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::StartModelPackagingJob::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::StartModelPackagingJob::set_project_name): <p> The name of the project which contains the version of the model that you want to package. </p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::StartModelPackagingJob::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::StartModelPackagingJob::set_model_version): <p> The version of the model within the project that you want to package. </p>
    ///   - [`job_name(impl Into<String>)`](crate::client::fluent_builders::StartModelPackagingJob::job_name) / [`set_job_name(Option<String>)`](crate::client::fluent_builders::StartModelPackagingJob::set_job_name): <p>A name for the model packaging job. If you don't supply a value, the service creates a job name for you. </p>
    ///   - [`configuration(ModelPackagingConfiguration)`](crate::client::fluent_builders::StartModelPackagingJob::configuration) / [`set_configuration(Option<ModelPackagingConfiguration>)`](crate::client::fluent_builders::StartModelPackagingJob::set_configuration): <p>The configuration for the model packaging job. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::StartModelPackagingJob::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::StartModelPackagingJob::set_description): <p>A description for the model packaging job. </p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartModelPackagingJob::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartModelPackagingJob::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>
    /// - On success, responds with [`StartModelPackagingJobOutput`](crate::output::StartModelPackagingJobOutput) with field(s):
    ///   - [`job_name(Option<String>)`](crate::output::StartModelPackagingJobOutput::job_name): <p>The job name for the model packaging job. If you don't supply a job name in the <code>JobName</code> input parameter, the service creates a job name for you. </p>
    /// - On failure, responds with [`SdkError<StartModelPackagingJobError>`](crate::error::StartModelPackagingJobError)
    pub fn start_model_packaging_job(
        &self,
    ) -> crate::client::fluent_builders::StartModelPackagingJob {
        crate::client::fluent_builders::StartModelPackagingJob::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopModel`](crate::client::fluent_builders::StopModel) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::StopModel::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::StopModel::set_project_name): <p>The name of the project that contains the model that you want to stop.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::StopModel::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::StopModel::set_model_version): <p>The version of the model that you want to stop.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StopModel::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StopModel::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>StopModel</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StopModel</code>. In this case, safely retry your call to <code>StopModel</code> by using the same <code>ClientToken</code> parameter value.</p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple stop requests. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StopModel</code>. An idempotency token is active for 8 hours. </p>
    /// - On success, responds with [`StopModelOutput`](crate::output::StopModelOutput) with field(s):
    ///   - [`status(Option<ModelHostingStatus>)`](crate::output::StopModelOutput::status): <p>The status of the model.</p>
    /// - On failure, responds with [`SdkError<StopModelError>`](crate::error::StopModelError)
    pub fn stop_model(&self) -> crate::client::fluent_builders::StopModel {
        crate::client::fluent_builders::StopModel::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the model to assign the tags.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value tags to assign to the model.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the model from which you want to remove tags. </p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of the keys of the tags that you want to remove.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDatasetEntries`](crate::client::fluent_builders::UpdateDatasetEntries) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::set_project_name): <p>The name of the project that contains the dataset that you want to update.</p>
    ///   - [`dataset_type(impl Into<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::dataset_type) / [`set_dataset_type(Option<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::set_dataset_type): <p>The type of the dataset that you want to update. Specify <code>train</code> to update the training dataset. Specify <code>test</code> to update the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    ///   - [`changes(Blob)`](crate::client::fluent_builders::UpdateDatasetEntries::changes) / [`set_changes(Option<Blob>)`](crate::client::fluent_builders::UpdateDatasetEntries::set_changes): <p>The entries to add to the dataset.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::UpdateDatasetEntries::set_client_token): <p>ClientToken is an idempotency token that ensures a call to <code>UpdateDatasetEntries</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>UpdateDatasetEntries</code>. In this case, safely retry your call to <code>UpdateDatasetEntries</code> by using the same <code>ClientToken</code> parameter value.</p>  <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple updates with the same dataset entries. You'll need to provide your own value for other use cases. </p>  <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>UpdateDatasetEntries</code>. An idempotency token is active for 8 hours. </p>
    /// - On success, responds with [`UpdateDatasetEntriesOutput`](crate::output::UpdateDatasetEntriesOutput) with field(s):
    ///   - [`status(Option<DatasetStatus>)`](crate::output::UpdateDatasetEntriesOutput::status): <p>The status of the dataset update.</p>
    /// - On failure, responds with [`SdkError<UpdateDatasetEntriesError>`](crate::error::UpdateDatasetEntriesError)
    pub fn update_dataset_entries(&self) -> crate::client::fluent_builders::UpdateDatasetEntries {
        crate::client::fluent_builders::UpdateDatasetEntries::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
