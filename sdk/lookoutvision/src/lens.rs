// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_dataset_entries_output_next_token(
    input: &crate::operation::list_dataset_entries::ListDatasetEntriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_model_packaging_jobs_output_next_token(
    input: &crate::operation::list_model_packaging_jobs::ListModelPackagingJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_models_output_next_token(
    input: &crate::operation::list_models::ListModelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_projects_output_next_token(
    input: &crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_dataset_entries_output_dataset_entries(
    input: crate::operation::list_dataset_entries::ListDatasetEntriesOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.dataset_entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_model_packaging_jobs_output_model_packaging_jobs(
    input: crate::operation::list_model_packaging_jobs::ListModelPackagingJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ModelPackagingJobMetadata>> {
    let input = match input.model_packaging_jobs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_models_output_models(
    input: crate::operation::list_models::ListModelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ModelMetadata>> {
    let input = match input.models {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_projects_output_projects(
    input: crate::operation::list_projects::ListProjectsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProjectMetadata>> {
    let input = match input.projects {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
