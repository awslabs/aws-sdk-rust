// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DetectAnomalies`](crate::client::fluent_builders::DetectAnomalies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`project_name(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::project_name) / [`set_project_name(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_project_name): <p>The name of the project that contains the model version that you want to use.</p>
    ///   - [`model_version(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::model_version) / [`set_model_version(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_model_version): <p>The version of the model that you want to use.</p>
    ///   - [`body(ByteStream)`](crate::client::fluent_builders::DetectAnomalies::body) / [`set_body(ByteStream)`](crate::client::fluent_builders::DetectAnomalies::set_body): <p>The unencrypted image bytes that you want to analyze. </p>
    ///   - [`content_type(impl Into<String>)`](crate::client::fluent_builders::DetectAnomalies::content_type) / [`set_content_type(Option<String>)`](crate::client::fluent_builders::DetectAnomalies::set_content_type): <p>The type of the image passed in <code>Body</code>. Valid values are <code>image/png</code> (PNG format images) and <code>image/jpeg</code> (JPG format images). </p>
    /// - On success, responds with [`DetectAnomaliesOutput`](crate::output::DetectAnomaliesOutput) with field(s):
    ///   - [`detect_anomaly_result(Option<DetectAnomalyResult>)`](crate::output::DetectAnomaliesOutput::detect_anomaly_result): <p>The results of the <code>DetectAnomalies</code> operation.</p>
    /// - On failure, responds with [`SdkError<DetectAnomaliesError>`](crate::error::DetectAnomaliesError)
    pub fn detect_anomalies(&self) -> crate::client::fluent_builders::DetectAnomalies {
        crate::client::fluent_builders::DetectAnomalies::new(self.handle.clone())
    }
}
