// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartModelPackagingJobInput {
    /// <p> The name of the project which contains the version of the model that you want to package. </p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p> The version of the model within the project that you want to package. </p>
    #[doc(hidden)]
    pub model_version: std::option::Option<std::string::String>,
    /// <p>A name for the model packaging job. If you don't supply a value, the service creates a job name for you. </p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The configuration for the model packaging job. </p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::types::ModelPackagingConfiguration>,
    /// <p>A description for the model packaging job. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>
    /// <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>
    /// <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl StartModelPackagingJobInput {
    /// <p> The name of the project which contains the version of the model that you want to package. </p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p> The version of the model within the project that you want to package. </p>
    pub fn model_version(&self) -> std::option::Option<&str> {
        self.model_version.as_deref()
    }
    /// <p>A name for the model packaging job. If you don't supply a value, the service creates a job name for you. </p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The configuration for the model packaging job. </p>
    pub fn configuration(&self) -> std::option::Option<&crate::types::ModelPackagingConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>A description for the model packaging job. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>
    /// <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>
    /// <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartModelPackagingJobInput {
    /// Creates a new builder-style object to manufacture [`StartModelPackagingJobInput`](crate::operation::start_model_packaging_job::StartModelPackagingJobInput).
    pub fn builder(
    ) -> crate::operation::start_model_packaging_job::builders::StartModelPackagingJobInputBuilder
    {
        crate::operation::start_model_packaging_job::builders::StartModelPackagingJobInputBuilder::default()
    }
}

/// A builder for [`StartModelPackagingJobInput`](crate::operation::start_model_packaging_job::StartModelPackagingJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartModelPackagingJobInputBuilder {
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) model_version: std::option::Option<std::string::String>,
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) configuration: std::option::Option<crate::types::ModelPackagingConfiguration>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl StartModelPackagingJobInputBuilder {
    /// <p> The name of the project which contains the version of the model that you want to package. </p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p> The name of the project which contains the version of the model that you want to package. </p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p> The version of the model within the project that you want to package. </p>
    pub fn model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_version = Some(input.into());
        self
    }
    /// <p> The version of the model within the project that you want to package. </p>
    pub fn set_model_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_version = input;
        self
    }
    /// <p>A name for the model packaging job. If you don't supply a value, the service creates a job name for you. </p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>A name for the model packaging job. If you don't supply a value, the service creates a job name for you. </p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The configuration for the model packaging job. </p>
    pub fn configuration(mut self, input: crate::types::ModelPackagingConfiguration) -> Self {
        self.configuration = Some(input);
        self
    }
    /// <p>The configuration for the model packaging job. </p>
    pub fn set_configuration(
        mut self,
        input: std::option::Option<crate::types::ModelPackagingConfiguration>,
    ) -> Self {
        self.configuration = input;
        self
    }
    /// <p>A description for the model packaging job. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description for the model packaging job. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>
    /// <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>
    /// <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>ClientToken is an idempotency token that ensures a call to <code>StartModelPackagingJob</code> completes only once. You choose the value to pass. For example, An issue might prevent you from getting a response from <code>StartModelPackagingJob</code>. In this case, safely retry your call to <code>StartModelPackagingJob</code> by using the same <code>ClientToken</code> parameter value.</p>
    /// <p>If you don't supply a value for <code>ClientToken</code>, the AWS SDK you are using inserts a value for you. This prevents retries after a network error from making multiple dataset creation requests. You'll need to provide your own value for other use cases. </p>
    /// <p>An error occurs if the other input parameters are not the same as in the first request. Using a different value for <code>ClientToken</code> is considered a new call to <code>StartModelPackagingJob</code>. An idempotency token is active for 8 hours. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`StartModelPackagingJobInput`](crate::operation::start_model_packaging_job::StartModelPackagingJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_model_packaging_job::StartModelPackagingJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_model_packaging_job::StartModelPackagingJobInput {
                project_name: self.project_name,
                model_version: self.model_version,
                job_name: self.job_name,
                configuration: self.configuration,
                description: self.description,
                client_token: self.client_token,
            },
        )
    }
}
