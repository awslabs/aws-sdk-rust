// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDatasetInput {
    /// <p>The name of the project that contains the dataset that you want to describe.</p>
    pub project_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    pub dataset_type: ::std::option::Option<::std::string::String>,
}
impl DescribeDatasetInput {
    /// <p>The name of the project that contains the dataset that you want to describe.</p>
    pub fn project_name(&self) -> ::std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    pub fn dataset_type(&self) -> ::std::option::Option<&str> {
        self.dataset_type.as_deref()
    }
}
impl DescribeDatasetInput {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetInput`](crate::operation::describe_dataset::DescribeDatasetInput).
    pub fn builder() -> crate::operation::describe_dataset::builders::DescribeDatasetInputBuilder {
        crate::operation::describe_dataset::builders::DescribeDatasetInputBuilder::default()
    }
}

/// A builder for [`DescribeDatasetInput`](crate::operation::describe_dataset::DescribeDatasetInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDatasetInputBuilder {
    pub(crate) project_name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_type: ::std::option::Option<::std::string::String>,
}
impl DescribeDatasetInputBuilder {
    /// <p>The name of the project that contains the dataset that you want to describe.</p>
    /// This field is required.
    pub fn project_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.project_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the project that contains the dataset that you want to describe.</p>
    pub fn set_project_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The name of the project that contains the dataset that you want to describe.</p>
    pub fn get_project_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.project_name
    }
    /// <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    /// This field is required.
    pub fn dataset_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dataset_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    pub fn set_dataset_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dataset_type = input;
        self
    }
    /// <p>The type of the dataset to describe. Specify <code>train</code> to describe the training dataset. Specify <code>test</code> to describe the test dataset. If you have a single dataset project, specify <code>train</code> </p>
    pub fn get_dataset_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.dataset_type
    }
    /// Consumes the builder and constructs a [`DescribeDatasetInput`](crate::operation::describe_dataset::DescribeDatasetInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_dataset::DescribeDatasetInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_dataset::DescribeDatasetInput {
            project_name: self.project_name,
            dataset_type: self.dataset_type,
        })
    }
}
