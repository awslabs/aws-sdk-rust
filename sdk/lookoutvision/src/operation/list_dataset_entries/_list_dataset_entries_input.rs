// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDatasetEntriesInput {
    /// <p>The name of the project that contains the dataset that you want to list.</p>
    #[doc(hidden)]
    pub project_name: std::option::Option<std::string::String>,
    /// <p>The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    #[doc(hidden)]
    pub dataset_type: std::option::Option<std::string::String>,
    /// <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don't specify a value, Lookout for Vision returns all entries.</p>
    #[doc(hidden)]
    pub labeled: std::option::Option<bool>,
    /// <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
    #[doc(hidden)]
    pub anomaly_class: std::option::Option<std::string::String>,
    /// <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    #[doc(hidden)]
    pub before_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    #[doc(hidden)]
    pub after_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
    #[doc(hidden)]
    pub source_ref_contains: std::option::Option<std::string::String>,
}
impl ListDatasetEntriesInput {
    /// <p>The name of the project that contains the dataset that you want to list.</p>
    pub fn project_name(&self) -> std::option::Option<&str> {
        self.project_name.as_deref()
    }
    /// <p>The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    pub fn dataset_type(&self) -> std::option::Option<&str> {
        self.dataset_type.as_deref()
    }
    /// <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don't specify a value, Lookout for Vision returns all entries.</p>
    pub fn labeled(&self) -> std::option::Option<bool> {
        self.labeled
    }
    /// <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
    pub fn anomaly_class(&self) -> std::option::Option<&str> {
        self.anomaly_class.as_deref()
    }
    /// <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn before_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.before_creation_date.as_ref()
    }
    /// <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn after_creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.after_creation_date.as_ref()
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
    pub fn source_ref_contains(&self) -> std::option::Option<&str> {
        self.source_ref_contains.as_deref()
    }
}
impl ListDatasetEntriesInput {
    /// Creates a new builder-style object to manufacture [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
    pub fn builder(
    ) -> crate::operation::list_dataset_entries::builders::ListDatasetEntriesInputBuilder {
        crate::operation::list_dataset_entries::builders::ListDatasetEntriesInputBuilder::default()
    }
}

/// A builder for [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDatasetEntriesInputBuilder {
    pub(crate) project_name: std::option::Option<std::string::String>,
    pub(crate) dataset_type: std::option::Option<std::string::String>,
    pub(crate) labeled: std::option::Option<bool>,
    pub(crate) anomaly_class: std::option::Option<std::string::String>,
    pub(crate) before_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) after_creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) source_ref_contains: std::option::Option<std::string::String>,
}
impl ListDatasetEntriesInputBuilder {
    /// <p>The name of the project that contains the dataset that you want to list.</p>
    pub fn project_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.project_name = Some(input.into());
        self
    }
    /// <p>The name of the project that contains the dataset that you want to list.</p>
    pub fn set_project_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.project_name = input;
        self
    }
    /// <p>The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    pub fn dataset_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_type = Some(input.into());
        self
    }
    /// <p>The type of the dataset that you want to list. Specify <code>train</code> to list the training dataset. Specify <code>test</code> to list the test dataset. If you have a single dataset project, specify <code>train</code>.</p>
    pub fn set_dataset_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_type = input;
        self
    }
    /// <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don't specify a value, Lookout for Vision returns all entries.</p>
    pub fn labeled(mut self, input: bool) -> Self {
        self.labeled = Some(input);
        self
    }
    /// <p>Specify <code>true</code> to include labeled entries, otherwise specify <code>false</code>. If you don't specify a value, Lookout for Vision returns all entries.</p>
    pub fn set_labeled(mut self, input: std::option::Option<bool>) -> Self {
        self.labeled = input;
        self
    }
    /// <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
    pub fn anomaly_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.anomaly_class = Some(input.into());
        self
    }
    /// <p>Specify <code>normal</code> to include only normal images. Specify <code>anomaly</code> to only include anomalous entries. If you don't specify a value, Amazon Lookout for Vision returns normal and anomalous images.</p>
    pub fn set_anomaly_class(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.anomaly_class = input;
        self
    }
    /// <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn before_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.before_creation_date = Some(input);
        self
    }
    /// <p>Only includes entries before the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn set_before_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.before_creation_date = input;
        self
    }
    /// <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn after_creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.after_creation_date = Some(input);
        self
    }
    /// <p>Only includes entries after the specified date in the response. For example, <code>2020-06-23T00:00:00</code>.</p>
    pub fn set_after_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.after_creation_date = input;
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Lookout for Vision returns a pagination token in the response. You can use this pagination token to retrieve the next set of dataset entries.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per paginated call. The largest value you can specify is 100. If you specify a value greater than 100, a ValidationException error occurs. The default value is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
    pub fn source_ref_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_ref_contains = Some(input.into());
        self
    }
    /// <p>Perform a "contains" search on the values of the <code>source-ref</code> key within the dataset. For example a value of "IMG_17" returns all JSON Lines where the <code>source-ref</code> key value matches <i>*IMG_17*</i>.</p>
    pub fn set_source_ref_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_ref_contains = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDatasetEntriesInput`](crate::operation::list_dataset_entries::ListDatasetEntriesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_dataset_entries::ListDatasetEntriesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_dataset_entries::ListDatasetEntriesInput {
                project_name: self.project_name,
                dataset_type: self.dataset_type,
                labeled: self.labeled,
                anomaly_class: self.anomaly_class,
                before_creation_date: self.before_creation_date,
                after_creation_date: self.after_creation_date,
                next_token: self.next_token,
                max_results: self.max_results,
                source_ref_contains: self.source_ref_contains,
            },
        )
    }
}
