// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_greengrass_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GreengrassConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.compiler_options {
        object.key("CompilerOptions").string(var_1.as_str());
    }
    if let Some(var_2) = &input.target_device {
        object.key("TargetDevice").string(var_2.as_str());
    }
    if let Some(var_3) = &input.target_platform {
        #[allow(unused_mut)]
        let mut object_4 = object.key("TargetPlatform").start_object();
        crate::protocol_serde::shape_target_platform::ser_target_platform(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.s3_output_location {
        #[allow(unused_mut)]
        let mut object_6 = object.key("S3OutputLocation").start_object();
        crate::protocol_serde::shape_s3_location::ser_s3_location(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.component_name {
        object.key("ComponentName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.component_version {
        object.key("ComponentVersion").string(var_8.as_str());
    }
    if let Some(var_9) = &input.component_description {
        object.key("ComponentDescription").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}

pub(crate) fn de_greengrass_configuration<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::GreengrassConfiguration>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GreengrassConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "CompilerOptions" => {
                                builder = builder.set_compiler_options(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "TargetDevice" => {
                                builder = builder.set_target_device(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::TargetDevice::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "TargetPlatform" => {
                                builder = builder.set_target_platform(
                                    crate::protocol_serde::shape_target_platform::de_target_platform(tokens)?
                                );
                            }
                            "S3OutputLocation" => {
                                builder = builder.set_s3_output_location(
                                    crate::protocol_serde::shape_s3_location::de_s3_location(
                                        tokens,
                                    )?,
                                );
                            }
                            "ComponentName" => {
                                builder = builder.set_component_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ComponentVersion" => {
                                builder = builder.set_component_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ComponentDescription" => {
                                builder = builder.set_component_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tag_list::de_tag_list(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
