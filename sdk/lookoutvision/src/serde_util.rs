// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn model_packaging_configuration_correct_errors(
    mut builder: crate::types::builders::ModelPackagingConfigurationBuilder,
) -> crate::types::builders::ModelPackagingConfigurationBuilder {
    if builder.greengrass.is_none() {
        builder.greengrass = {
            let builder = crate::types::builders::GreengrassConfigurationBuilder::default();
            Some(crate::serde_util::greengrass_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn output_config_correct_errors(mut builder: crate::types::builders::OutputConfigBuilder) -> crate::types::builders::OutputConfigBuilder {
    if builder.s3_location.is_none() {
        builder.s3_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            Some(crate::serde_util::s3_location_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn output_s3_object_correct_errors(
    mut builder: crate::types::builders::OutputS3ObjectBuilder,
) -> crate::types::builders::OutputS3ObjectBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn greengrass_configuration_correct_errors(
    mut builder: crate::types::builders::GreengrassConfigurationBuilder,
) -> crate::types::builders::GreengrassConfigurationBuilder {
    if builder.s3_output_location.is_none() {
        builder.s3_output_location = {
            let builder = crate::types::builders::S3LocationBuilder::default();
            Some(crate::serde_util::s3_location_correct_errors(builder).build())
        }
    }
    if builder.component_name.is_none() {
        builder.component_name = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_location_correct_errors(mut builder: crate::types::builders::S3LocationBuilder) -> crate::types::builders::S3LocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn target_platform_correct_errors(
    mut builder: crate::types::builders::TargetPlatformBuilder,
) -> crate::types::builders::TargetPlatformBuilder {
    if builder.os.is_none() {
        builder.os = "no value was set".parse::<crate::types::TargetPlatformOs>().ok()
    }
    if builder.arch.is_none() {
        builder.arch = "no value was set".parse::<crate::types::TargetPlatformArch>().ok()
    }
    builder
}
