// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to perform the action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The update or deletion of a resource caused an inconsistent state.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>Amazon Lookout for Vision experienced a service issue. Try your call again.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>A service quota was exceeded the allowed limit. For more information, see Limits in Amazon Lookout for Vision in the Amazon Lookout for Vision Developer Guide. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Amazon Lookout for Vision is temporarily unable to process the request. Try your call again.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>An input validation error occured. For example, invalid characters in a project name, or if a pagination token is invalid.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_dataset::CreateDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_dataset::CreateDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset::CreateDatasetError> for Error {
    fn from(err: crate::operation::create_dataset::CreateDatasetError) -> Self {
        match err {
            crate::operation::create_dataset::CreateDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_dataset::CreateDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_dataset::CreateDatasetError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_dataset::CreateDatasetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model::CreateModelError> for Error {
    fn from(err: crate::operation::create_model::CreateModelError) -> Self {
        match err {
            crate::operation::create_model::CreateModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_model::CreateModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_model::CreateModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_model::CreateModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model::CreateModelError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_model::CreateModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_model::CreateModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_model::CreateModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_project::CreateProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_project::CreateProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_project::CreateProjectError> for Error {
    fn from(err: crate::operation::create_project::CreateProjectError) -> Self {
        match err {
            crate::operation::create_project::CreateProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_project::CreateProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_project::CreateProjectError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_project::CreateProjectError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_project::CreateProjectError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_project::CreateProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_project::CreateProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_project::CreateProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_dataset::DeleteDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset::DeleteDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset::DeleteDatasetError> for Error {
    fn from(err: crate::operation::delete_dataset::DeleteDatasetError) -> Self {
        match err {
            crate::operation::delete_dataset::DeleteDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model::DeleteModelError> for Error {
    fn from(err: crate::operation::delete_model::DeleteModelError) -> Self {
        match err {
            crate::operation::delete_model::DeleteModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_model::DeleteModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_model::DeleteModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_project::DeleteProjectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_project::DeleteProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_project::DeleteProjectError> for Error {
    fn from(err: crate::operation::delete_project::DeleteProjectError) -> Self {
        match err {
            crate::operation::delete_project::DeleteProjectError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_project::DeleteProjectError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_project::DeleteProjectError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_project::DeleteProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset::DescribeDatasetError> for Error {
    fn from(err: crate::operation::describe_dataset::DescribeDatasetError) -> Self {
        match err {
            crate::operation::describe_dataset::DescribeDatasetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::describe_dataset::DescribeDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_model::DescribeModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model::DescribeModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model::DescribeModelError> for Error {
    fn from(err: crate::operation::describe_model::DescribeModelError) -> Self {
        match err {
            crate::operation::describe_model::DescribeModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_model::DescribeModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::describe_model::DescribeModelError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_model::DescribeModelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_model::DescribeModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_model::DescribeModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_model::DescribeModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError>
    for Error
{
    fn from(
        err: crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError,
    ) -> Self {
        match err {
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_model_packaging_job::DescribeModelPackagingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_project::DescribeProjectError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_project::DescribeProjectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_project::DescribeProjectError> for Error {
    fn from(err: crate::operation::describe_project::DescribeProjectError) -> Self {
        match err {
            crate::operation::describe_project::DescribeProjectError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_project::DescribeProjectError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::describe_project::DescribeProjectError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_project::DescribeProjectError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_project::DescribeProjectError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_project::DescribeProjectError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_project::DescribeProjectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detect_anomalies::DetectAnomaliesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detect_anomalies::DetectAnomaliesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_anomalies::DetectAnomaliesError> for Error {
    fn from(err: crate::operation::detect_anomalies::DetectAnomaliesError) -> Self {
        match err {
            crate::operation::detect_anomalies::DetectAnomaliesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::detect_anomalies::DetectAnomaliesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::detect_anomalies::DetectAnomaliesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::detect_anomalies::DetectAnomaliesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::detect_anomalies::DetectAnomaliesError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::detect_anomalies::DetectAnomaliesError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::detect_anomalies::DetectAnomaliesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_entries::ListDatasetEntriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_dataset_entries::ListDatasetEntriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_dataset_entries::ListDatasetEntriesError> for Error {
    fn from(err: crate::operation::list_dataset_entries::ListDatasetEntriesError) -> Self {
        match err {
            crate::operation::list_dataset_entries::ListDatasetEntriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_dataset_entries::ListDatasetEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError> for Error {
    fn from(err: crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError) -> Self {
        match err {
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_model_packaging_jobs::ListModelPackagingJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_models::ListModelsError> for Error {
    fn from(err: crate::operation::list_models::ListModelsError) -> Self {
        match err {
            crate::operation::list_models::ListModelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_models::ListModelsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_models::ListModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_models::ListModelsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_models::ListModelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_models::ListModelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_models::ListModelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_projects::ListProjectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_projects::ListProjectsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_projects::ListProjectsError> for Error {
    fn from(err: crate::operation::list_projects::ListProjectsError) -> Self {
        match err {
            crate::operation::list_projects::ListProjectsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_projects::ListProjectsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_projects::ListProjectsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_projects::ListProjectsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_projects::ListProjectsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_projects::ListProjectsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_projects::ListProjectsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_model::StartModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::start_model::StartModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_model::StartModelError> for Error {
    fn from(err: crate::operation::start_model::StartModelError) -> Self {
        match err {
            crate::operation::start_model::StartModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_model::StartModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_model::StartModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_model::StartModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_model::StartModelError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_model::StartModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_model::StartModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_model::StartModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_model_packaging_job::StartModelPackagingJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_model_packaging_job::StartModelPackagingJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_model_packaging_job::StartModelPackagingJobError> for Error {
    fn from(err: crate::operation::start_model_packaging_job::StartModelPackagingJobError) -> Self {
        match err {
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_model_packaging_job::StartModelPackagingJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::stop_model::StopModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::stop_model::StopModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_model::StopModelError> for Error {
    fn from(err: crate::operation::stop_model::StopModelError) -> Self {
        match err {
            crate::operation::stop_model::StopModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_model::StopModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::stop_model::StopModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_model::StopModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_model::StopModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_model::StopModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_model::StopModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_dataset_entries::UpdateDatasetEntriesError> for Error {
    fn from(err: crate::operation::update_dataset_entries::UpdateDatasetEntriesError) -> Self {
        match err {
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_dataset_entries::UpdateDatasetEntriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
