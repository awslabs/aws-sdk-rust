// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Structure that describes scheduled query.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ScheduledQueryDescription {
    /// <p>Scheduled query ARN.</p>
    pub arn: ::std::string::String,
    /// <p>Name of the scheduled query.</p>
    pub name: ::std::string::String,
    /// <p>The query to be run.</p>
    pub query_string: ::std::string::String,
    /// <p>Creation time of the scheduled query.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>State of the scheduled query. </p>
    pub state: crate::types::ScheduledQueryState,
    /// <p>Last time the query was run.</p>
    pub previous_invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The next time the scheduled query is scheduled to run.</p>
    pub next_invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Schedule configuration.</p>
    pub schedule_configuration: ::std::option::Option<crate::types::ScheduleConfiguration>,
    /// <p>Notification configuration.</p>
    pub notification_configuration: ::std::option::Option<crate::types::NotificationConfiguration>,
    /// <p>Scheduled query target store configuration.</p>
    pub target_configuration: ::std::option::Option<crate::types::TargetConfiguration>,
    /// <p>IAM role that Timestream uses to run the schedule query.</p>
    pub scheduled_query_execution_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>A customer provided KMS key used to encrypt the scheduled query resource.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Error-reporting configuration for the scheduled query.</p>
    pub error_report_configuration: ::std::option::Option<crate::types::ErrorReportConfiguration>,
    /// <p>Runtime summary for the last scheduled query run. </p>
    pub last_run_summary: ::std::option::Option<crate::types::ScheduledQueryRunSummary>,
    /// <p>Runtime summary for the last five failed scheduled query runs.</p>
    pub recently_failed_runs: ::std::option::Option<::std::vec::Vec<crate::types::ScheduledQueryRunSummary>>,
}
impl ScheduledQueryDescription {
    /// <p>Scheduled query ARN.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>Name of the scheduled query.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The query to be run.</p>
    pub fn query_string(&self) -> &str {
        use std::ops::Deref;
        self.query_string.deref()
    }
    /// <p>Creation time of the scheduled query.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>State of the scheduled query. </p>
    pub fn state(&self) -> &crate::types::ScheduledQueryState {
        &self.state
    }
    /// <p>Last time the query was run.</p>
    pub fn previous_invocation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.previous_invocation_time.as_ref()
    }
    /// <p>The next time the scheduled query is scheduled to run.</p>
    pub fn next_invocation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.next_invocation_time.as_ref()
    }
    /// <p>Schedule configuration.</p>
    pub fn schedule_configuration(&self) -> ::std::option::Option<&crate::types::ScheduleConfiguration> {
        self.schedule_configuration.as_ref()
    }
    /// <p>Notification configuration.</p>
    pub fn notification_configuration(&self) -> ::std::option::Option<&crate::types::NotificationConfiguration> {
        self.notification_configuration.as_ref()
    }
    /// <p>Scheduled query target store configuration.</p>
    pub fn target_configuration(&self) -> ::std::option::Option<&crate::types::TargetConfiguration> {
        self.target_configuration.as_ref()
    }
    /// <p>IAM role that Timestream uses to run the schedule query.</p>
    pub fn scheduled_query_execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.scheduled_query_execution_role_arn.as_deref()
    }
    /// <p>A customer provided KMS key used to encrypt the scheduled query resource.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Error-reporting configuration for the scheduled query.</p>
    pub fn error_report_configuration(&self) -> ::std::option::Option<&crate::types::ErrorReportConfiguration> {
        self.error_report_configuration.as_ref()
    }
    /// <p>Runtime summary for the last scheduled query run. </p>
    pub fn last_run_summary(&self) -> ::std::option::Option<&crate::types::ScheduledQueryRunSummary> {
        self.last_run_summary.as_ref()
    }
    /// <p>Runtime summary for the last five failed scheduled query runs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recently_failed_runs.is_none()`.
    pub fn recently_failed_runs(&self) -> &[crate::types::ScheduledQueryRunSummary] {
        self.recently_failed_runs.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for ScheduledQueryDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduledQueryDescription");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("state", &self.state);
        formatter.field("previous_invocation_time", &self.previous_invocation_time);
        formatter.field("next_invocation_time", &self.next_invocation_time);
        formatter.field("schedule_configuration", &self.schedule_configuration);
        formatter.field("notification_configuration", &self.notification_configuration);
        formatter.field("target_configuration", &self.target_configuration);
        formatter.field("scheduled_query_execution_role_arn", &self.scheduled_query_execution_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("error_report_configuration", &self.error_report_configuration);
        formatter.field("last_run_summary", &self.last_run_summary);
        formatter.field("recently_failed_runs", &self.recently_failed_runs);
        formatter.finish()
    }
}
impl ScheduledQueryDescription {
    /// Creates a new builder-style object to manufacture [`ScheduledQueryDescription`](crate::types::ScheduledQueryDescription).
    pub fn builder() -> crate::types::builders::ScheduledQueryDescriptionBuilder {
        crate::types::builders::ScheduledQueryDescriptionBuilder::default()
    }
}

/// A builder for [`ScheduledQueryDescription`](crate::types::ScheduledQueryDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ScheduledQueryDescriptionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) query_string: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) state: ::std::option::Option<crate::types::ScheduledQueryState>,
    pub(crate) previous_invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) next_invocation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) schedule_configuration: ::std::option::Option<crate::types::ScheduleConfiguration>,
    pub(crate) notification_configuration: ::std::option::Option<crate::types::NotificationConfiguration>,
    pub(crate) target_configuration: ::std::option::Option<crate::types::TargetConfiguration>,
    pub(crate) scheduled_query_execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) error_report_configuration: ::std::option::Option<crate::types::ErrorReportConfiguration>,
    pub(crate) last_run_summary: ::std::option::Option<crate::types::ScheduledQueryRunSummary>,
    pub(crate) recently_failed_runs: ::std::option::Option<::std::vec::Vec<crate::types::ScheduledQueryRunSummary>>,
}
impl ScheduledQueryDescriptionBuilder {
    /// <p>Scheduled query ARN.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Scheduled query ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Scheduled query ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Name of the scheduled query.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the scheduled query.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the scheduled query.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The query to be run.</p>
    /// This field is required.
    pub fn query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query to be run.</p>
    pub fn set_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The query to be run.</p>
    pub fn get_query_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_string
    }
    /// <p>Creation time of the scheduled query.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the scheduled query.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the scheduled query.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>State of the scheduled query. </p>
    /// This field is required.
    pub fn state(mut self, input: crate::types::ScheduledQueryState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the scheduled query. </p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::ScheduledQueryState>) -> Self {
        self.state = input;
        self
    }
    /// <p>State of the scheduled query. </p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::ScheduledQueryState> {
        &self.state
    }
    /// <p>Last time the query was run.</p>
    pub fn previous_invocation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.previous_invocation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Last time the query was run.</p>
    pub fn set_previous_invocation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.previous_invocation_time = input;
        self
    }
    /// <p>Last time the query was run.</p>
    pub fn get_previous_invocation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.previous_invocation_time
    }
    /// <p>The next time the scheduled query is scheduled to run.</p>
    pub fn next_invocation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.next_invocation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The next time the scheduled query is scheduled to run.</p>
    pub fn set_next_invocation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.next_invocation_time = input;
        self
    }
    /// <p>The next time the scheduled query is scheduled to run.</p>
    pub fn get_next_invocation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.next_invocation_time
    }
    /// <p>Schedule configuration.</p>
    /// This field is required.
    pub fn schedule_configuration(mut self, input: crate::types::ScheduleConfiguration) -> Self {
        self.schedule_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Schedule configuration.</p>
    pub fn set_schedule_configuration(mut self, input: ::std::option::Option<crate::types::ScheduleConfiguration>) -> Self {
        self.schedule_configuration = input;
        self
    }
    /// <p>Schedule configuration.</p>
    pub fn get_schedule_configuration(&self) -> &::std::option::Option<crate::types::ScheduleConfiguration> {
        &self.schedule_configuration
    }
    /// <p>Notification configuration.</p>
    /// This field is required.
    pub fn notification_configuration(mut self, input: crate::types::NotificationConfiguration) -> Self {
        self.notification_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Notification configuration.</p>
    pub fn set_notification_configuration(mut self, input: ::std::option::Option<crate::types::NotificationConfiguration>) -> Self {
        self.notification_configuration = input;
        self
    }
    /// <p>Notification configuration.</p>
    pub fn get_notification_configuration(&self) -> &::std::option::Option<crate::types::NotificationConfiguration> {
        &self.notification_configuration
    }
    /// <p>Scheduled query target store configuration.</p>
    pub fn target_configuration(mut self, input: crate::types::TargetConfiguration) -> Self {
        self.target_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Scheduled query target store configuration.</p>
    pub fn set_target_configuration(mut self, input: ::std::option::Option<crate::types::TargetConfiguration>) -> Self {
        self.target_configuration = input;
        self
    }
    /// <p>Scheduled query target store configuration.</p>
    pub fn get_target_configuration(&self) -> &::std::option::Option<crate::types::TargetConfiguration> {
        &self.target_configuration
    }
    /// <p>IAM role that Timestream uses to run the schedule query.</p>
    pub fn scheduled_query_execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.scheduled_query_execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>IAM role that Timestream uses to run the schedule query.</p>
    pub fn set_scheduled_query_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.scheduled_query_execution_role_arn = input;
        self
    }
    /// <p>IAM role that Timestream uses to run the schedule query.</p>
    pub fn get_scheduled_query_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.scheduled_query_execution_role_arn
    }
    /// <p>A customer provided KMS key used to encrypt the scheduled query resource.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customer provided KMS key used to encrypt the scheduled query resource.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>A customer provided KMS key used to encrypt the scheduled query resource.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Error-reporting configuration for the scheduled query.</p>
    pub fn error_report_configuration(mut self, input: crate::types::ErrorReportConfiguration) -> Self {
        self.error_report_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Error-reporting configuration for the scheduled query.</p>
    pub fn set_error_report_configuration(mut self, input: ::std::option::Option<crate::types::ErrorReportConfiguration>) -> Self {
        self.error_report_configuration = input;
        self
    }
    /// <p>Error-reporting configuration for the scheduled query.</p>
    pub fn get_error_report_configuration(&self) -> &::std::option::Option<crate::types::ErrorReportConfiguration> {
        &self.error_report_configuration
    }
    /// <p>Runtime summary for the last scheduled query run. </p>
    pub fn last_run_summary(mut self, input: crate::types::ScheduledQueryRunSummary) -> Self {
        self.last_run_summary = ::std::option::Option::Some(input);
        self
    }
    /// <p>Runtime summary for the last scheduled query run. </p>
    pub fn set_last_run_summary(mut self, input: ::std::option::Option<crate::types::ScheduledQueryRunSummary>) -> Self {
        self.last_run_summary = input;
        self
    }
    /// <p>Runtime summary for the last scheduled query run. </p>
    pub fn get_last_run_summary(&self) -> &::std::option::Option<crate::types::ScheduledQueryRunSummary> {
        &self.last_run_summary
    }
    /// Appends an item to `recently_failed_runs`.
    ///
    /// To override the contents of this collection use [`set_recently_failed_runs`](Self::set_recently_failed_runs).
    ///
    /// <p>Runtime summary for the last five failed scheduled query runs.</p>
    pub fn recently_failed_runs(mut self, input: crate::types::ScheduledQueryRunSummary) -> Self {
        let mut v = self.recently_failed_runs.unwrap_or_default();
        v.push(input);
        self.recently_failed_runs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Runtime summary for the last five failed scheduled query runs.</p>
    pub fn set_recently_failed_runs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ScheduledQueryRunSummary>>) -> Self {
        self.recently_failed_runs = input;
        self
    }
    /// <p>Runtime summary for the last five failed scheduled query runs.</p>
    pub fn get_recently_failed_runs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ScheduledQueryRunSummary>> {
        &self.recently_failed_runs
    }
    /// Consumes the builder and constructs a [`ScheduledQueryDescription`](crate::types::ScheduledQueryDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::ScheduledQueryDescriptionBuilder::arn)
    /// - [`name`](crate::types::builders::ScheduledQueryDescriptionBuilder::name)
    /// - [`query_string`](crate::types::builders::ScheduledQueryDescriptionBuilder::query_string)
    /// - [`state`](crate::types::builders::ScheduledQueryDescriptionBuilder::state)
    pub fn build(self) -> ::std::result::Result<crate::types::ScheduledQueryDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScheduledQueryDescription {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building ScheduledQueryDescription",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ScheduledQueryDescription",
                )
            })?,
            query_string: self.query_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "query_string",
                    "query_string was not specified but it is required when building ScheduledQueryDescription",
                )
            })?,
            creation_time: self.creation_time,
            state: self.state.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "state",
                    "state was not specified but it is required when building ScheduledQueryDescription",
                )
            })?,
            previous_invocation_time: self.previous_invocation_time,
            next_invocation_time: self.next_invocation_time,
            schedule_configuration: self.schedule_configuration,
            notification_configuration: self.notification_configuration,
            target_configuration: self.target_configuration,
            scheduled_query_execution_role_arn: self.scheduled_query_execution_role_arn,
            kms_key_id: self.kms_key_id,
            error_report_configuration: self.error_report_configuration,
            last_run_summary: self.last_run_summary,
            recently_failed_runs: self.recently_failed_runs,
        })
    }
}
impl ::std::fmt::Debug for ScheduledQueryDescriptionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ScheduledQueryDescriptionBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("query_string", &"*** Sensitive Data Redacted ***");
        formatter.field("creation_time", &self.creation_time);
        formatter.field("state", &self.state);
        formatter.field("previous_invocation_time", &self.previous_invocation_time);
        formatter.field("next_invocation_time", &self.next_invocation_time);
        formatter.field("schedule_configuration", &self.schedule_configuration);
        formatter.field("notification_configuration", &self.notification_configuration);
        formatter.field("target_configuration", &self.target_configuration);
        formatter.field("scheduled_query_execution_role_arn", &self.scheduled_query_execution_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("error_report_configuration", &self.error_report_configuration);
        formatter.field("last_run_summary", &self.last_run_summary);
        formatter.field("recently_failed_runs", &self.recently_failed_runs);
        formatter.finish()
    }
}
