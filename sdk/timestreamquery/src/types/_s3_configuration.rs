// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details on S3 location for error reports that result from running a query. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Configuration {
    /// <p> Name of the S3 bucket under which error reports will be created.</p>
    pub bucket_name: ::std::string::String,
    /// <p> Prefix for the error report key. Timestream by default adds the following prefix to the error report path. </p>
    pub object_key_prefix: ::std::option::Option<::std::string::String>,
    /// <p> Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. </p>
    pub encryption_option: ::std::option::Option<crate::types::S3EncryptionOption>,
}
impl S3Configuration {
    /// <p> Name of the S3 bucket under which error reports will be created.</p>
    pub fn bucket_name(&self) -> &str {
        use std::ops::Deref;
        self.bucket_name.deref()
    }
    /// <p> Prefix for the error report key. Timestream by default adds the following prefix to the error report path. </p>
    pub fn object_key_prefix(&self) -> ::std::option::Option<&str> {
        self.object_key_prefix.as_deref()
    }
    /// <p> Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. </p>
    pub fn encryption_option(&self) -> ::std::option::Option<&crate::types::S3EncryptionOption> {
        self.encryption_option.as_ref()
    }
}
impl S3Configuration {
    /// Creates a new builder-style object to manufacture [`S3Configuration`](crate::types::S3Configuration).
    pub fn builder() -> crate::types::builders::S3ConfigurationBuilder {
        crate::types::builders::S3ConfigurationBuilder::default()
    }
}

/// A builder for [`S3Configuration`](crate::types::S3Configuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ConfigurationBuilder {
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) object_key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_option: ::std::option::Option<crate::types::S3EncryptionOption>,
}
impl S3ConfigurationBuilder {
    /// <p> Name of the S3 bucket under which error reports will be created.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Name of the S3 bucket under which error reports will be created.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p> Name of the S3 bucket under which error reports will be created.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p> Prefix for the error report key. Timestream by default adds the following prefix to the error report path. </p>
    pub fn object_key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Prefix for the error report key. Timestream by default adds the following prefix to the error report path. </p>
    pub fn set_object_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_key_prefix = input;
        self
    }
    /// <p> Prefix for the error report key. Timestream by default adds the following prefix to the error report path. </p>
    pub fn get_object_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_key_prefix
    }
    /// <p> Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. </p>
    pub fn encryption_option(mut self, input: crate::types::S3EncryptionOption) -> Self {
        self.encryption_option = ::std::option::Option::Some(input);
        self
    }
    /// <p> Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. </p>
    pub fn set_encryption_option(mut self, input: ::std::option::Option<crate::types::S3EncryptionOption>) -> Self {
        self.encryption_option = input;
        self
    }
    /// <p> Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default. </p>
    pub fn get_encryption_option(&self) -> &::std::option::Option<crate::types::S3EncryptionOption> {
        &self.encryption_option
    }
    /// Consumes the builder and constructs a [`S3Configuration`](crate::types::S3Configuration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_name`](crate::types::builders::S3ConfigurationBuilder::bucket_name)
    pub fn build(self) -> ::std::result::Result<crate::types::S3Configuration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3Configuration {
            bucket_name: self.bucket_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_name",
                    "bucket_name was not specified but it is required when building S3Configuration",
                )
            })?,
            object_key_prefix: self.object_key_prefix,
            encryption_option: self.encryption_option,
        })
    }
}
