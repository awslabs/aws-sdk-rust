// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This type is used to map column(s) from the query result to a dimension in the destination table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionMapping {
    /// <p>Column name from query result.</p>
    pub name: ::std::string::String,
    /// <p>Type for the dimension. </p>
    pub dimension_value_type: crate::types::DimensionValueType,
}
impl DimensionMapping {
    /// <p>Column name from query result.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Type for the dimension. </p>
    pub fn dimension_value_type(&self) -> &crate::types::DimensionValueType {
        &self.dimension_value_type
    }
}
impl DimensionMapping {
    /// Creates a new builder-style object to manufacture [`DimensionMapping`](crate::types::DimensionMapping).
    pub fn builder() -> crate::types::builders::DimensionMappingBuilder {
        crate::types::builders::DimensionMappingBuilder::default()
    }
}

/// A builder for [`DimensionMapping`](crate::types::DimensionMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DimensionMappingBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) dimension_value_type: ::std::option::Option<crate::types::DimensionValueType>,
}
impl DimensionMappingBuilder {
    /// <p>Column name from query result.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Column name from query result.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Column name from query result.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Type for the dimension. </p>
    /// This field is required.
    pub fn dimension_value_type(mut self, input: crate::types::DimensionValueType) -> Self {
        self.dimension_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Type for the dimension. </p>
    pub fn set_dimension_value_type(mut self, input: ::std::option::Option<crate::types::DimensionValueType>) -> Self {
        self.dimension_value_type = input;
        self
    }
    /// <p>Type for the dimension. </p>
    pub fn get_dimension_value_type(&self) -> &::std::option::Option<crate::types::DimensionValueType> {
        &self.dimension_value_type
    }
    /// Consumes the builder and constructs a [`DimensionMapping`](crate::types::DimensionMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::DimensionMappingBuilder::name)
    /// - [`dimension_value_type`](crate::types::builders::DimensionMappingBuilder::dimension_value_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DimensionMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DimensionMapping {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building DimensionMapping",
                )
            })?,
            dimension_value_type: self.dimension_value_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension_value_type",
                    "dimension_value_type was not specified but it is required when building DimensionMapping",
                )
            })?,
        })
    }
}
