// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MultiMeasureMappings {
    /// <p>The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.</p>
    pub target_multi_measure_name: ::std::option::Option<::std::string::String>,
    /// <p>Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.</p>
    pub multi_measure_attribute_mappings: ::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>,
}
impl MultiMeasureMappings {
    /// <p>The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.</p>
    pub fn target_multi_measure_name(&self) -> ::std::option::Option<&str> {
        self.target_multi_measure_name.as_deref()
    }
    /// <p>Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.</p>
    pub fn multi_measure_attribute_mappings(&self) -> &[crate::types::MultiMeasureAttributeMapping] {
        use std::ops::Deref;
        self.multi_measure_attribute_mappings.deref()
    }
}
impl MultiMeasureMappings {
    /// Creates a new builder-style object to manufacture [`MultiMeasureMappings`](crate::types::MultiMeasureMappings).
    pub fn builder() -> crate::types::builders::MultiMeasureMappingsBuilder {
        crate::types::builders::MultiMeasureMappingsBuilder::default()
    }
}

/// A builder for [`MultiMeasureMappings`](crate::types::MultiMeasureMappings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MultiMeasureMappingsBuilder {
    pub(crate) target_multi_measure_name: ::std::option::Option<::std::string::String>,
    pub(crate) multi_measure_attribute_mappings: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
}
impl MultiMeasureMappingsBuilder {
    /// <p>The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.</p>
    pub fn target_multi_measure_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_multi_measure_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.</p>
    pub fn set_target_multi_measure_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_multi_measure_name = input;
        self
    }
    /// <p>The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.</p>
    pub fn get_target_multi_measure_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_multi_measure_name
    }
    /// Appends an item to `multi_measure_attribute_mappings`.
    ///
    /// To override the contents of this collection use [`set_multi_measure_attribute_mappings`](Self::set_multi_measure_attribute_mappings).
    ///
    /// <p>Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.</p>
    pub fn multi_measure_attribute_mappings(mut self, input: crate::types::MultiMeasureAttributeMapping) -> Self {
        let mut v = self.multi_measure_attribute_mappings.unwrap_or_default();
        v.push(input);
        self.multi_measure_attribute_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.</p>
    pub fn set_multi_measure_attribute_mappings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
    ) -> Self {
        self.multi_measure_attribute_mappings = input;
        self
    }
    /// <p>Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.</p>
    pub fn get_multi_measure_attribute_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>> {
        &self.multi_measure_attribute_mappings
    }
    /// Consumes the builder and constructs a [`MultiMeasureMappings`](crate::types::MultiMeasureMappings).
    /// This method will fail if any of the following fields are not set:
    /// - [`multi_measure_attribute_mappings`](crate::types::builders::MultiMeasureMappingsBuilder::multi_measure_attribute_mappings)
    pub fn build(self) -> ::std::result::Result<crate::types::MultiMeasureMappings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MultiMeasureMappings {
            target_multi_measure_name: self.target_multi_measure_name,
            multi_measure_attribute_mappings: self.multi_measure_attribute_mappings.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "multi_measure_attribute_mappings",
                    "multi_measure_attribute_mappings was not specified but it is required when building MultiMeasureMappings",
                )
            })?,
        })
    }
}
