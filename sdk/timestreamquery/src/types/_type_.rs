// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Type {
    /// <p>Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. </p>
    pub scalar_type: ::std::option::Option<crate::types::ScalarType>,
    /// <p>Indicates if the column is an array.</p>
    pub array_column_info: ::std::option::Option<crate::types::ColumnInfo>,
    /// <p>Indicates if the column is a timeseries data type.</p>
    pub time_series_measure_value_column_info: ::std::option::Option<crate::types::ColumnInfo>,
    /// <p>Indicates if the column is a row.</p>
    pub row_column_info: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>,
}
impl Type {
    /// <p>Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. </p>
    pub fn scalar_type(&self) -> ::std::option::Option<&crate::types::ScalarType> {
        self.scalar_type.as_ref()
    }
    /// <p>Indicates if the column is an array.</p>
    pub fn array_column_info(&self) -> ::std::option::Option<&crate::types::ColumnInfo> {
        self.array_column_info.as_ref()
    }
    /// <p>Indicates if the column is a timeseries data type.</p>
    pub fn time_series_measure_value_column_info(&self) -> ::std::option::Option<&crate::types::ColumnInfo> {
        self.time_series_measure_value_column_info.as_ref()
    }
    /// <p>Indicates if the column is a row.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.row_column_info.is_none()`.
    pub fn row_column_info(&self) -> &[crate::types::ColumnInfo] {
        self.row_column_info.as_deref().unwrap_or_default()
    }
}
impl Type {
    /// Creates a new builder-style object to manufacture [`Type`](crate::types::Type).
    pub fn builder() -> crate::types::builders::TypeBuilder {
        crate::types::builders::TypeBuilder::default()
    }
}

/// A builder for [`Type`](crate::types::Type).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TypeBuilder {
    pub(crate) scalar_type: ::std::option::Option<crate::types::ScalarType>,
    pub(crate) array_column_info: ::std::option::Option<crate::types::ColumnInfo>,
    pub(crate) time_series_measure_value_column_info: ::std::option::Option<crate::types::ColumnInfo>,
    pub(crate) row_column_info: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>,
}
impl TypeBuilder {
    /// <p>Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. </p>
    pub fn scalar_type(mut self, input: crate::types::ScalarType) -> Self {
        self.scalar_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. </p>
    pub fn set_scalar_type(mut self, input: ::std::option::Option<crate::types::ScalarType>) -> Self {
        self.scalar_type = input;
        self
    }
    /// <p>Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. </p>
    pub fn get_scalar_type(&self) -> &::std::option::Option<crate::types::ScalarType> {
        &self.scalar_type
    }
    /// <p>Indicates if the column is an array.</p>
    pub fn array_column_info(mut self, input: crate::types::ColumnInfo) -> Self {
        self.array_column_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the column is an array.</p>
    pub fn set_array_column_info(mut self, input: ::std::option::Option<crate::types::ColumnInfo>) -> Self {
        self.array_column_info = input;
        self
    }
    /// <p>Indicates if the column is an array.</p>
    pub fn get_array_column_info(&self) -> &::std::option::Option<crate::types::ColumnInfo> {
        &self.array_column_info
    }
    /// <p>Indicates if the column is a timeseries data type.</p>
    pub fn time_series_measure_value_column_info(mut self, input: crate::types::ColumnInfo) -> Self {
        self.time_series_measure_value_column_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates if the column is a timeseries data type.</p>
    pub fn set_time_series_measure_value_column_info(mut self, input: ::std::option::Option<crate::types::ColumnInfo>) -> Self {
        self.time_series_measure_value_column_info = input;
        self
    }
    /// <p>Indicates if the column is a timeseries data type.</p>
    pub fn get_time_series_measure_value_column_info(&self) -> &::std::option::Option<crate::types::ColumnInfo> {
        &self.time_series_measure_value_column_info
    }
    /// Appends an item to `row_column_info`.
    ///
    /// To override the contents of this collection use [`set_row_column_info`](Self::set_row_column_info).
    ///
    /// <p>Indicates if the column is a row.</p>
    pub fn row_column_info(mut self, input: crate::types::ColumnInfo) -> Self {
        let mut v = self.row_column_info.unwrap_or_default();
        v.push(input);
        self.row_column_info = ::std::option::Option::Some(v);
        self
    }
    /// <p>Indicates if the column is a row.</p>
    pub fn set_row_column_info(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>>) -> Self {
        self.row_column_info = input;
        self
    }
    /// <p>Indicates if the column is a row.</p>
    pub fn get_row_column_info(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ColumnInfo>> {
        &self.row_column_info
    }
    /// Consumes the builder and constructs a [`Type`](crate::types::Type).
    pub fn build(self) -> crate::types::Type {
        crate::types::Type {
            scalar_type: self.scalar_type,
            array_column_info: self.array_column_info,
            time_series_measure_value_column_info: self.time_series_measure_value_column_info,
            row_column_info: self.row_column_info,
        }
    }
}
