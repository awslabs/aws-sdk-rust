// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_scheduled_query_output_correct_errors(
    mut builder: crate::operation::create_scheduled_query::builders::CreateScheduledQueryOutputBuilder,
) -> crate::operation::create_scheduled_query::builders::CreateScheduledQueryOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_endpoints_output_correct_errors(
    mut builder: crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder,
) -> crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder {
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_scheduled_query_output_correct_errors(
    mut builder: crate::operation::describe_scheduled_query::builders::DescribeScheduledQueryOutputBuilder,
) -> crate::operation::describe_scheduled_query::builders::DescribeScheduledQueryOutputBuilder {
    if builder.scheduled_query.is_none() {
        builder.scheduled_query = {
            let builder = crate::types::builders::ScheduledQueryDescriptionBuilder::default();
            crate::serde_util::scheduled_query_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_scheduled_queries_output_correct_errors(
    mut builder: crate::operation::list_scheduled_queries::builders::ListScheduledQueriesOutputBuilder,
) -> crate::operation::list_scheduled_queries::builders::ListScheduledQueriesOutputBuilder {
    if builder.scheduled_queries.is_none() {
        builder.scheduled_queries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn prepare_query_output_correct_errors(
    mut builder: crate::operation::prepare_query::builders::PrepareQueryOutputBuilder,
) -> crate::operation::prepare_query::builders::PrepareQueryOutputBuilder {
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    if builder.columns.is_none() {
        builder.columns = Some(Default::default())
    }
    if builder.parameters.is_none() {
        builder.parameters = Some(Default::default())
    }
    builder
}

pub(crate) fn query_output_correct_errors(
    mut builder: crate::operation::query::builders::QueryOutputBuilder,
) -> crate::operation::query::builders::QueryOutputBuilder {
    if builder.query_id.is_none() {
        builder.query_id = Some(Default::default())
    }
    if builder.rows.is_none() {
        builder.rows = Some(Default::default())
    }
    if builder.column_info.is_none() {
        builder.column_info = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduled_query_description_correct_errors(
    mut builder: crate::types::builders::ScheduledQueryDescriptionBuilder,
) -> crate::types::builders::ScheduledQueryDescriptionBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.query_string.is_none() {
        builder.query_string = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ScheduledQueryState>().ok()
    }
    if builder.schedule_configuration.is_none() {
        builder.schedule_configuration = {
            let builder = crate::types::builders::ScheduleConfigurationBuilder::default();
            crate::serde_util::schedule_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.notification_configuration.is_none() {
        builder.notification_configuration = {
            let builder = crate::types::builders::NotificationConfigurationBuilder::default();
            Some(crate::serde_util::notification_configuration_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn schedule_configuration_correct_errors(
    mut builder: crate::types::builders::ScheduleConfigurationBuilder,
) -> crate::types::builders::ScheduleConfigurationBuilder {
    if builder.schedule_expression.is_none() {
        builder.schedule_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn notification_configuration_correct_errors(
    mut builder: crate::types::builders::NotificationConfigurationBuilder,
) -> crate::types::builders::NotificationConfigurationBuilder {
    if builder.sns_configuration.is_none() {
        builder.sns_configuration = {
            let builder = crate::types::builders::SnsConfigurationBuilder::default();
            crate::serde_util::sns_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn column_info_correct_errors(mut builder: crate::types::builders::ColumnInfoBuilder) -> crate::types::builders::ColumnInfoBuilder {
    if builder.r#type.is_none() {
        builder.r#type = {
            let builder = crate::types::builders::TypeBuilder::default();
            Some(builder.build()).map(::std::boxed::Box::new)
        }
    }
    builder
}

pub(crate) fn endpoint_correct_errors(mut builder: crate::types::builders::EndpointBuilder) -> crate::types::builders::EndpointBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    if builder.cache_period_in_minutes.is_none() {
        builder.cache_period_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn error_report_configuration_correct_errors(
    mut builder: crate::types::builders::ErrorReportConfigurationBuilder,
) -> crate::types::builders::ErrorReportConfigurationBuilder {
    if builder.s3_configuration.is_none() {
        builder.s3_configuration = {
            let builder = crate::types::builders::S3ConfigurationBuilder::default();
            crate::serde_util::s3_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn parameter_mapping_correct_errors(
    mut builder: crate::types::builders::ParameterMappingBuilder,
) -> crate::types::builders::ParameterMappingBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = {
            let builder = crate::types::builders::TypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn row_correct_errors(mut builder: crate::types::builders::RowBuilder) -> crate::types::builders::RowBuilder {
    if builder.data.is_none() {
        builder.data = Some(Default::default())
    }
    builder
}

pub(crate) fn scheduled_query_correct_errors(
    mut builder: crate::types::builders::ScheduledQueryBuilder,
) -> crate::types::builders::ScheduledQueryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ScheduledQueryState>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn target_configuration_correct_errors(
    mut builder: crate::types::builders::TargetConfigurationBuilder,
) -> crate::types::builders::TargetConfigurationBuilder {
    if builder.timestream_configuration.is_none() {
        builder.timestream_configuration = {
            let builder = crate::types::builders::TimestreamConfigurationBuilder::default();
            crate::serde_util::timestream_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn sns_configuration_correct_errors(
    mut builder: crate::types::builders::SnsConfigurationBuilder,
) -> crate::types::builders::SnsConfigurationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_configuration_correct_errors(
    mut builder: crate::types::builders::S3ConfigurationBuilder,
) -> crate::types::builders::S3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn timestream_configuration_correct_errors(
    mut builder: crate::types::builders::TimestreamConfigurationBuilder,
) -> crate::types::builders::TimestreamConfigurationBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.time_column.is_none() {
        builder.time_column = Some(Default::default())
    }
    if builder.dimension_mappings.is_none() {
        builder.dimension_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn multi_measure_mappings_correct_errors(
    mut builder: crate::types::builders::MultiMeasureMappingsBuilder,
) -> crate::types::builders::MultiMeasureMappingsBuilder {
    if builder.multi_measure_attribute_mappings.is_none() {
        builder.multi_measure_attribute_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn dimension_mapping_correct_errors(
    mut builder: crate::types::builders::DimensionMappingBuilder,
) -> crate::types::builders::DimensionMappingBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.dimension_value_type.is_none() {
        builder.dimension_value_type = "no value was set".parse::<crate::types::DimensionValueType>().ok()
    }
    builder
}

pub(crate) fn mixed_measure_mapping_correct_errors(
    mut builder: crate::types::builders::MixedMeasureMappingBuilder,
) -> crate::types::builders::MixedMeasureMappingBuilder {
    if builder.measure_value_type.is_none() {
        builder.measure_value_type = "no value was set".parse::<crate::types::MeasureValueType>().ok()
    }
    builder
}

pub(crate) fn multi_measure_attribute_mapping_correct_errors(
    mut builder: crate::types::builders::MultiMeasureAttributeMappingBuilder,
) -> crate::types::builders::MultiMeasureAttributeMappingBuilder {
    if builder.source_column.is_none() {
        builder.source_column = Some(Default::default())
    }
    if builder.measure_value_type.is_none() {
        builder.measure_value_type = "no value was set".parse::<crate::types::ScalarMeasureValueType>().ok()
    }
    builder
}

pub(crate) fn time_series_data_point_correct_errors(
    mut builder: crate::types::builders::TimeSeriesDataPointBuilder,
) -> crate::types::builders::TimeSeriesDataPointBuilder {
    if builder.time.is_none() {
        builder.time = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = {
            let builder = crate::types::builders::DatumBuilder::default();
            Some(builder.build())
        }
    }
    builder
}
