// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`Query`](crate::operation::query::builders::QueryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`query_string(impl Into<String>)`](crate::operation::query::builders::QueryFluentBuilder::query_string) / [`set_query_string(Option<String>)`](crate::operation::query::builders::QueryFluentBuilder::set_query_string):<br>required: **true**<br><p> The query to be run by Timestream. </p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::query::builders::QueryFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::query::builders::QueryFluentBuilder::set_client_token):<br>required: **false**<br><p> Unique, case-sensitive string of up to 64 ASCII characters specified when a <code>Query</code> request is made. Providing a <code>ClientToken</code> makes the call to <code>Query</code> <i>idempotent</i>. This means that running the same query repeatedly will produce the same result. In other words, making multiple identical <code>Query</code> requests has the same effect as making a single request. When using <code>ClientToken</code> in a query, note the following: </p>  <ul>   <li> <p> If the Query API is instantiated without a <code>ClientToken</code>, the Query SDK generates a <code>ClientToken</code> on your behalf.</p> </li>   <li> <p>If the <code>Query</code> invocation only contains the <code>ClientToken</code> but does not include a <code>NextToken</code>, that invocation of <code>Query</code> is assumed to be a new query run.</p> </li>   <li> <p>If the invocation contains <code>NextToken</code>, that particular invocation is assumed to be a subsequent invocation of a prior call to the Query API, and a result set is returned.</p> </li>   <li> <p> After 4 hours, any request with the same <code>ClientToken</code> is treated as a new request. </p> </li>  </ul><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::query::builders::QueryFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::query::builders::QueryFluentBuilder::set_next_token):<br>required: **false**<br><p> A pagination token used to return a set of results. When the <code>Query</code> API is invoked using <code>NextToken</code>, that particular invocation is assumed to be a subsequent invocation of a prior call to <code>Query</code>, and a result set is returned. However, if the <code>Query</code> invocation only contains the <code>ClientToken</code>, that invocation of <code>Query</code> is assumed to be a new query run. </p>  <p>Note the following when using NextToken in a query:</p>  <ul>   <li> <p>A pagination token can be used for up to five <code>Query</code> invocations, OR for a duration of up to 1 hour â€“ whichever comes first.</p> </li>   <li> <p>Using the same <code>NextToken</code> will return the same set of records. To keep paginating through the result set, you must to use the most recent <code>nextToken</code>.</p> </li>   <li> <p>Suppose a <code>Query</code> invocation returns two <code>NextToken</code> values, <code>TokenA</code> and <code>TokenB</code>. If <code>TokenB</code> is used in a subsequent <code>Query</code> invocation, then <code>TokenA</code> is invalidated and cannot be reused.</p> </li>   <li> <p>To request a previous result set from a query after pagination has begun, you must re-invoke the Query API.</p> </li>   <li> <p>The latest <code>NextToken</code> should be used to paginate until <code>null</code> is returned, at which point a new <code>NextToken</code> should be used.</p> </li>   <li> <p> If the IAM principal of the query initiator and the result reader are not the same and/or the query initiator and the result reader do not have the same query string in the query requests, the query will fail with an <code>Invalid pagination token</code> error. </p> </li>  </ul><br>
    ///   - [`max_rows(i32)`](crate::operation::query::builders::QueryFluentBuilder::max_rows) / [`set_max_rows(Option<i32>)`](crate::operation::query::builders::QueryFluentBuilder::set_max_rows):<br>required: **false**<br><p> The total number of rows to be returned in the <code>Query</code> output. The initial run of <code>Query</code> with a <code>MaxRows</code> value specified will return the result set of the query in two cases: </p>  <ul>   <li> <p>The size of the result is less than <code>1MB</code>.</p> </li>   <li> <p>The number of rows in the result set is less than the value of <code>maxRows</code>.</p> </li>  </ul>  <p>Otherwise, the initial invocation of <code>Query</code> only returns a <code>NextToken</code>, which can then be used in subsequent calls to fetch the result set. To resume pagination, provide the <code>NextToken</code> value in the subsequent command.</p>  <p>If the row size is large (e.g. a row has many columns), Timestream may return fewer rows to keep the response size from exceeding the 1 MB limit. If <code>MaxRows</code> is not provided, Timestream will send the necessary number of rows to meet the 1 MB limit.</p><br>
    /// - On success, responds with [`QueryOutput`](crate::operation::query::QueryOutput) with field(s):
    ///   - [`query_id(String)`](crate::operation::query::QueryOutput::query_id): <p> A unique ID for the given query. </p>
    ///   - [`next_token(Option<String>)`](crate::operation::query::QueryOutput::next_token): <p> A pagination token that can be used again on a <code>Query</code> call to get the next set of results. </p>
    ///   - [`rows(Vec::<Row>)`](crate::operation::query::QueryOutput::rows): <p> The result set rows returned by the query. </p>
    ///   - [`column_info(Vec::<ColumnInfo>)`](crate::operation::query::QueryOutput::column_info): <p> The column data types of the returned result set. </p>
    ///   - [`query_status(Option<QueryStatus>)`](crate::operation::query::QueryOutput::query_status): <p>Information about the status of the query, including progress and bytes scanned.</p>
    /// - On failure, responds with [`SdkError<QueryError>`](crate::operation::query::QueryError)
    pub fn query(&self) -> crate::operation::query::builders::QueryFluentBuilder {
        crate::operation::query::builders::QueryFluentBuilder::new(self.handle.clone())
    }
}
