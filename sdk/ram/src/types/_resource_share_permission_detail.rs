// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a RAM managed permission.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceSharePermissionDetail {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of this RAM managed permission.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The version of the permission described in this response.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the version of the permission represented in this response is the default version for this permission.</p>
    pub default_version: ::std::option::Option<bool>,
    /// <p>The name of this permission.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The resource type to which this permission applies.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub permission: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the permission was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time when the permission was last updated.</p>
    pub last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.</p>
    pub is_resource_type_default: ::std::option::Option<bool>,
    /// <p>The type of managed permission. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_MANAGED</code> – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.</p> </li>
    /// <li> <p> <code>CUSTOMER_MANAGED</code> – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.</p> </li>
    /// </ul>
    pub permission_type: ::std::option::Option<crate::types::PermissionType>,
    /// <p>Indicates what features are available for this resource share. This parameter can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>STANDARD</b> – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been <b>CREATED_FROM_POLICY</b> and then promoted.</p> </li>
    /// <li> <p> <b>CREATED_FROM_POLICY</b> – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <b>PROMOTING_TO_STANDARD</b> – This resource share was originally <code>CREATED_FROM_POLICY</code>, but the customer ran the <code>PromoteResourceShareCreatedFromPolicy</code> and that operation is still in progress. This value changes to <code>STANDARD</code> when complete.</p> </li>
    /// </ul>
    pub feature_set: ::std::option::Option<crate::types::PermissionFeatureSet>,
    /// <p>The current status of the association between the permission and the resource share. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ATTACHABLE</code> – This permission or version can be associated with resource shares.</p> </li>
    /// <li> <p> <code>UNATTACHABLE</code> – This permission or version can't currently be associated with resource shares.</p> </li>
    /// <li> <p> <code>DELETING</code> – This permission or version is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> – This permission or version is deleted.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::PermissionStatus>,
    /// <p>The tag key and value pairs attached to the resource share.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ResourceSharePermissionDetail {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of this RAM managed permission.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The version of the permission described in this response.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for this permission.</p>
    pub fn default_version(&self) -> ::std::option::Option<bool> {
        self.default_version
    }
    /// <p>The name of this permission.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The resource type to which this permission applies.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub fn permission(&self) -> ::std::option::Option<&str> {
        self.permission.as_deref()
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn last_updated_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.</p>
    pub fn is_resource_type_default(&self) -> ::std::option::Option<bool> {
        self.is_resource_type_default
    }
    /// <p>The type of managed permission. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_MANAGED</code> – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.</p> </li>
    /// <li> <p> <code>CUSTOMER_MANAGED</code> – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.</p> </li>
    /// </ul>
    pub fn permission_type(&self) -> ::std::option::Option<&crate::types::PermissionType> {
        self.permission_type.as_ref()
    }
    /// <p>Indicates what features are available for this resource share. This parameter can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>STANDARD</b> – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been <b>CREATED_FROM_POLICY</b> and then promoted.</p> </li>
    /// <li> <p> <b>CREATED_FROM_POLICY</b> – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <b>PROMOTING_TO_STANDARD</b> – This resource share was originally <code>CREATED_FROM_POLICY</code>, but the customer ran the <code>PromoteResourceShareCreatedFromPolicy</code> and that operation is still in progress. This value changes to <code>STANDARD</code> when complete.</p> </li>
    /// </ul>
    pub fn feature_set(&self) -> ::std::option::Option<&crate::types::PermissionFeatureSet> {
        self.feature_set.as_ref()
    }
    /// <p>The current status of the association between the permission and the resource share. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ATTACHABLE</code> – This permission or version can be associated with resource shares.</p> </li>
    /// <li> <p> <code>UNATTACHABLE</code> – This permission or version can't currently be associated with resource shares.</p> </li>
    /// <li> <p> <code>DELETING</code> – This permission or version is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> – This permission or version is deleted.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PermissionStatus> {
        self.status.as_ref()
    }
    /// <p>The tag key and value pairs attached to the resource share.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ResourceSharePermissionDetail {
    /// Creates a new builder-style object to manufacture [`ResourceSharePermissionDetail`](crate::types::ResourceSharePermissionDetail).
    pub fn builder() -> crate::types::builders::ResourceSharePermissionDetailBuilder {
        crate::types::builders::ResourceSharePermissionDetailBuilder::default()
    }
}

/// A builder for [`ResourceSharePermissionDetail`](crate::types::ResourceSharePermissionDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceSharePermissionDetailBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) default_version: ::std::option::Option<bool>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) permission: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) is_resource_type_default: ::std::option::Option<bool>,
    pub(crate) permission_type: ::std::option::Option<crate::types::PermissionType>,
    pub(crate) feature_set: ::std::option::Option<crate::types::PermissionFeatureSet>,
    pub(crate) status: ::std::option::Option<crate::types::PermissionStatus>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl ResourceSharePermissionDetailBuilder {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of this RAM managed permission.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of this RAM managed permission.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of this RAM managed permission.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The version of the permission described in this response.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the permission described in this response.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the permission described in this response.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for this permission.</p>
    pub fn default_version(mut self, input: bool) -> Self {
        self.default_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for this permission.</p>
    pub fn set_default_version(mut self, input: ::std::option::Option<bool>) -> Self {
        self.default_version = input;
        self
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for this permission.</p>
    pub fn get_default_version(&self) -> &::std::option::Option<bool> {
        &self.default_version
    }
    /// <p>The name of this permission.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of this permission.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of this permission.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The resource type to which this permission applies.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource type to which this permission applies.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The resource type to which this permission applies.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub fn permission(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.permission = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub fn set_permission(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.permission = input;
        self
    }
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub fn get_permission(&self) -> &::std::option::Option<::std::string::String> {
        &self.permission
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn last_updated_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn set_last_updated_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn get_last_updated_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_time
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.</p>
    pub fn is_resource_type_default(mut self, input: bool) -> Self {
        self.is_resource_type_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.</p>
    pub fn set_is_resource_type_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_resource_type_default = input;
        self
    }
    /// <p>Specifies whether the version of the permission represented in this response is the default version for all resources of this resource type.</p>
    pub fn get_is_resource_type_default(&self) -> &::std::option::Option<bool> {
        &self.is_resource_type_default
    }
    /// <p>The type of managed permission. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_MANAGED</code> – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.</p> </li>
    /// <li> <p> <code>CUSTOMER_MANAGED</code> – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.</p> </li>
    /// </ul>
    pub fn permission_type(mut self, input: crate::types::PermissionType) -> Self {
        self.permission_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of managed permission. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_MANAGED</code> – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.</p> </li>
    /// <li> <p> <code>CUSTOMER_MANAGED</code> – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.</p> </li>
    /// </ul>
    pub fn set_permission_type(mut self, input: ::std::option::Option<crate::types::PermissionType>) -> Self {
        self.permission_type = input;
        self
    }
    /// <p>The type of managed permission. This can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>AWS_MANAGED</code> – Amazon Web Services created and manages this managed permission. You can associate it with your resource shares, but you can't modify it.</p> </li>
    /// <li> <p> <code>CUSTOMER_MANAGED</code> – You, or another principal in your account created this managed permission. You can associate it with your resource shares and create new versions that have different permissions.</p> </li>
    /// </ul>
    pub fn get_permission_type(&self) -> &::std::option::Option<crate::types::PermissionType> {
        &self.permission_type
    }
    /// <p>Indicates what features are available for this resource share. This parameter can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>STANDARD</b> – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been <b>CREATED_FROM_POLICY</b> and then promoted.</p> </li>
    /// <li> <p> <b>CREATED_FROM_POLICY</b> – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <b>PROMOTING_TO_STANDARD</b> – This resource share was originally <code>CREATED_FROM_POLICY</code>, but the customer ran the <code>PromoteResourceShareCreatedFromPolicy</code> and that operation is still in progress. This value changes to <code>STANDARD</code> when complete.</p> </li>
    /// </ul>
    pub fn feature_set(mut self, input: crate::types::PermissionFeatureSet) -> Self {
        self.feature_set = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates what features are available for this resource share. This parameter can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>STANDARD</b> – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been <b>CREATED_FROM_POLICY</b> and then promoted.</p> </li>
    /// <li> <p> <b>CREATED_FROM_POLICY</b> – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <b>PROMOTING_TO_STANDARD</b> – This resource share was originally <code>CREATED_FROM_POLICY</code>, but the customer ran the <code>PromoteResourceShareCreatedFromPolicy</code> and that operation is still in progress. This value changes to <code>STANDARD</code> when complete.</p> </li>
    /// </ul>
    pub fn set_feature_set(mut self, input: ::std::option::Option<crate::types::PermissionFeatureSet>) -> Self {
        self.feature_set = input;
        self
    }
    /// <p>Indicates what features are available for this resource share. This parameter can have one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>STANDARD</b> – A resource share that supports all functionality. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs. This resource share might have been created by RAM, or it might have been <b>CREATED_FROM_POLICY</b> and then promoted.</p> </li>
    /// <li> <p> <b>CREATED_FROM_POLICY</b> – The customer manually shared a resource by attaching a resource-based policy. That policy did not match any existing managed permissions, so RAM created this customer managed permission automatically on the customer's behalf based on the attached policy document. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <b>PROMOTING_TO_STANDARD</b> – This resource share was originally <code>CREATED_FROM_POLICY</code>, but the customer ran the <code>PromoteResourceShareCreatedFromPolicy</code> and that operation is still in progress. This value changes to <code>STANDARD</code> when complete.</p> </li>
    /// </ul>
    pub fn get_feature_set(&self) -> &::std::option::Option<crate::types::PermissionFeatureSet> {
        &self.feature_set
    }
    /// <p>The current status of the association between the permission and the resource share. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ATTACHABLE</code> – This permission or version can be associated with resource shares.</p> </li>
    /// <li> <p> <code>UNATTACHABLE</code> – This permission or version can't currently be associated with resource shares.</p> </li>
    /// <li> <p> <code>DELETING</code> – This permission or version is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> – This permission or version is deleted.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::PermissionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the association between the permission and the resource share. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ATTACHABLE</code> – This permission or version can be associated with resource shares.</p> </li>
    /// <li> <p> <code>UNATTACHABLE</code> – This permission or version can't currently be associated with resource shares.</p> </li>
    /// <li> <p> <code>DELETING</code> – This permission or version is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> – This permission or version is deleted.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PermissionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the association between the permission and the resource share. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ATTACHABLE</code> – This permission or version can be associated with resource shares.</p> </li>
    /// <li> <p> <code>UNATTACHABLE</code> – This permission or version can't currently be associated with resource shares.</p> </li>
    /// <li> <p> <code>DELETING</code> – This permission or version is in the process of being deleted.</p> </li>
    /// <li> <p> <code>DELETED</code> – This permission or version is deleted.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PermissionStatus> {
        &self.status
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag key and value pairs attached to the resource share.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag key and value pairs attached to the resource share.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tag key and value pairs attached to the resource share.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`ResourceSharePermissionDetail`](crate::types::ResourceSharePermissionDetail).
    pub fn build(self) -> crate::types::ResourceSharePermissionDetail {
        crate::types::ResourceSharePermissionDetail {
            arn: self.arn,
            version: self.version,
            default_version: self.default_version,
            name: self.name,
            resource_type: self.resource_type,
            permission: self.permission,
            creation_time: self.creation_time,
            last_updated_time: self.last_updated_time,
            is_resource_type_default: self.is_resource_type_default,
            permission_type: self.permission_type,
            feature_set: self.feature_set,
            status: self.status,
            tags: self.tags,
        }
    }
}
