// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a shareable resource type and the Amazon Web Services service to which resources of that type belong.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceNameAndResourceType {
    /// <p>The type of the resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resource_region_scope: std::option::Option<crate::types::ResourceRegionScope>,
}
impl ServiceNameAndResourceType {
    /// <p>The type of the resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn resource_region_scope(&self) -> std::option::Option<&crate::types::ResourceRegionScope> {
        self.resource_region_scope.as_ref()
    }
}
impl ServiceNameAndResourceType {
    /// Creates a new builder-style object to manufacture [`ServiceNameAndResourceType`](crate::types::ServiceNameAndResourceType).
    pub fn builder() -> crate::types::builders::ServiceNameAndResourceTypeBuilder {
        crate::types::builders::ServiceNameAndResourceTypeBuilder::default()
    }
}

/// A builder for [`ServiceNameAndResourceType`](crate::types::ServiceNameAndResourceType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceNameAndResourceTypeBuilder {
    pub(crate) resource_type: std::option::Option<std::string::String>,
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) resource_region_scope: std::option::Option<crate::types::ResourceRegionScope>,
}
impl ServiceNameAndResourceTypeBuilder {
    /// <p>The type of the resource.</p>
    pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_type = Some(input.into());
        self
    }
    /// <p>The type of the resource.</p>
    pub fn set_resource_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn resource_region_scope(mut self, input: crate::types::ResourceRegionScope) -> Self {
        self.resource_region_scope = Some(input);
        self
    }
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn set_resource_region_scope(
        mut self,
        input: std::option::Option<crate::types::ResourceRegionScope>,
    ) -> Self {
        self.resource_region_scope = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceNameAndResourceType`](crate::types::ServiceNameAndResourceType).
    pub fn build(self) -> crate::types::ServiceNameAndResourceType {
        crate::types::ServiceNameAndResourceType {
            resource_type: self.resource_type,
            service_name: self.service_name,
            resource_region_scope: self.resource_region_scope,
        }
    }
}
