// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_permission_version::_delete_permission_version_output::DeletePermissionVersionOutputBuilder;

pub use crate::operation::delete_permission_version::_delete_permission_version_input::DeletePermissionVersionInputBuilder;

impl crate::operation::delete_permission_version::builders::DeletePermissionVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_permission_version::DeletePermissionVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_permission_version::DeletePermissionVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_permission_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeletePermissionVersion`.
///
/// <p>Deletes one version of a customer managed permission. The version you specify must not be attached to any resource share and must not be the default version for the permission.</p>
/// <p>If a customer managed permission has the maximum of 5 versions, then you must delete at least one version before you can create another.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeletePermissionVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_permission_version::builders::DeletePermissionVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_permission_version::DeletePermissionVersionOutput,
        crate::operation::delete_permission_version::DeletePermissionVersionError,
    > for DeletePermissionVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_permission_version::DeletePermissionVersionOutput,
            crate::operation::delete_permission_version::DeletePermissionVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeletePermissionVersionFluentBuilder {
    /// Creates a new `DeletePermissionVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeletePermissionVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_permission_version::builders::DeletePermissionVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_permission_version::DeletePermissionVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_permission_version::DeletePermissionVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_permission_version::DeletePermissionVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_permission_version::DeletePermissionVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_permission_version::DeletePermissionVersionOutput,
        crate::operation::delete_permission_version::DeletePermissionVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the permission with the version you want to delete.</p>
    pub fn permission_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.permission_arn(input.into());
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the permission with the version you want to delete.</p>
    pub fn set_permission_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_permission_arn(input);
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the permission with the version you want to delete.</p>
    pub fn get_permission_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_permission_arn()
    }
    /// <p>Specifies the version number to delete.</p>
    /// <p>You can't delete the default version for a customer managed permission.</p>
    /// <p>You can't delete a version if it's the only version of the permission. You must either first create another version, or delete the permission completely.</p>
    /// <p>You can't delete a version if it is attached to any resource shares. If the version is the default, you must first use <code>SetDefaultPermissionVersion</code> to set a different version as the default for the customer managed permission, and then use <code>AssociateResourceSharePermission</code> to update your resource shares to use the new default version.</p>
    pub fn permission_version(mut self, input: i32) -> Self {
        self.inner = self.inner.permission_version(input);
        self
    }
    /// <p>Specifies the version number to delete.</p>
    /// <p>You can't delete the default version for a customer managed permission.</p>
    /// <p>You can't delete a version if it's the only version of the permission. You must either first create another version, or delete the permission completely.</p>
    /// <p>You can't delete a version if it is attached to any resource shares. If the version is the default, you must first use <code>SetDefaultPermissionVersion</code> to set a different version as the default for the customer managed permission, and then use <code>AssociateResourceSharePermission</code> to update your resource shares to use the new default version.</p>
    pub fn set_permission_version(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_permission_version(input);
        self
    }
    /// <p>Specifies the version number to delete.</p>
    /// <p>You can't delete the default version for a customer managed permission.</p>
    /// <p>You can't delete a version if it's the only version of the permission. You must either first create another version, or delete the permission completely.</p>
    /// <p>You can't delete a version if it is attached to any resource shares. If the version is the default, you must first use <code>SetDefaultPermissionVersion</code> to set a different version as the default for the customer managed permission, and then use <code>AssociateResourceSharePermission</code> to update your resource shares to use the new default version.</p>
    pub fn get_permission_version(&self) -> &::std::option::Option<i32> {
        self.inner.get_permission_version()
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
