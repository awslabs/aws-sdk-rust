// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::promote_resource_share_created_from_policy::_promote_resource_share_created_from_policy_output::PromoteResourceShareCreatedFromPolicyOutputBuilder;

pub use crate::operation::promote_resource_share_created_from_policy::_promote_resource_share_created_from_policy_input::PromoteResourceShareCreatedFromPolicyInputBuilder;

impl PromoteResourceShareCreatedFromPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.promote_resource_share_created_from_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PromoteResourceShareCreatedFromPolicy`.
///
/// <p>When you attach a resource-based policy to a resource, RAM automatically creates a resource share of <code>featureSet</code>=<code>CREATED_FROM_POLICY</code> with a managed permission that has the same IAM permissions as the original resource-based policy. However, this type of managed permission is visible to only the resource share owner, and the associated resource share can't be modified by using RAM.</p>
/// <p>This operation promotes the resource share to a <code>STANDARD</code> resource share that is fully manageable in RAM. When you promote a resource share, you can then manage the resource share in RAM and it becomes visible to all of the principals you shared it with.</p> <important>
/// <p>Before you perform this operation, you should first run <code>PromotePermissionCreatedFromPolicy</code>to ensure that you have an appropriate customer managed permission that can be associated with this resource share after its is promoted. If this operation can't find a managed permission that exactly matches the existing <code>CREATED_FROM_POLICY</code> permission, then this operation fails.</p>
/// </important>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PromoteResourceShareCreatedFromPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::promote_resource_share_created_from_policy::builders::PromoteResourceShareCreatedFromPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyOutput,
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyError,
    > for PromoteResourceShareCreatedFromPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyOutput,
            crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PromoteResourceShareCreatedFromPolicyFluentBuilder {
    /// Creates a new `PromoteResourceShareCreatedFromPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PromoteResourceShareCreatedFromPolicy as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::promote_resource_share_created_from_policy::builders::PromoteResourceShareCreatedFromPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicy::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicy::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyOutput,
        crate::operation::promote_resource_share_created_from_policy::PromoteResourceShareCreatedFromPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the resource share to promote.</p>
    pub fn resource_share_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_share_arn(input.into());
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the resource share to promote.</p>
    pub fn set_resource_share_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_share_arn(input);
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Name (ARN)</a> of the resource share to promote.</p>
    pub fn get_resource_share_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_share_arn()
    }
}
