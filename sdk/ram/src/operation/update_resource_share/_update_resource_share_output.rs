// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateResourceShareOutput {
    /// <p>Information about the resource share.</p>
    #[doc(hidden)]
    pub resource_share: std::option::Option<crate::types::ResourceShare>,
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateResourceShareOutput {
    /// <p>Information about the resource share.</p>
    pub fn resource_share(&self) -> std::option::Option<&crate::types::ResourceShare> {
        self.resource_share.as_ref()
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateResourceShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateResourceShareOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceShareOutput`](crate::operation::update_resource_share::UpdateResourceShareOutput).
    pub fn builder(
    ) -> crate::operation::update_resource_share::builders::UpdateResourceShareOutputBuilder {
        crate::operation::update_resource_share::builders::UpdateResourceShareOutputBuilder::default(
        )
    }
}

/// A builder for [`UpdateResourceShareOutput`](crate::operation::update_resource_share::UpdateResourceShareOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateResourceShareOutputBuilder {
    pub(crate) resource_share: std::option::Option<crate::types::ResourceShare>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateResourceShareOutputBuilder {
    /// <p>Information about the resource share.</p>
    pub fn resource_share(mut self, input: crate::types::ResourceShare) -> Self {
        self.resource_share = Some(input);
        self
    }
    /// <p>Information about the resource share.</p>
    pub fn set_resource_share(
        mut self,
        input: std::option::Option<crate::types::ResourceShare>,
    ) -> Self {
        self.resource_share = input;
        self
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateResourceShareOutput`](crate::operation::update_resource_share::UpdateResourceShareOutput).
    pub fn build(self) -> crate::operation::update_resource_share::UpdateResourceShareOutput {
        crate::operation::update_resource_share::UpdateResourceShareOutput {
            resource_share: self.resource_share,
            client_token: self.client_token,
            _request_id: self._request_id,
        }
    }
}
