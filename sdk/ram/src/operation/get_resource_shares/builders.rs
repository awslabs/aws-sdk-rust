// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_resource_shares::_get_resource_shares_output::GetResourceSharesOutputBuilder;

pub use crate::operation::get_resource_shares::_get_resource_shares_input::GetResourceSharesInputBuilder;

/// Fluent builder constructing a request to `GetResourceShares`.
///
/// <p>Retrieves details about the resource shares that you own or that are shared with you.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceSharesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_resource_shares::builders::GetResourceSharesInputBuilder,
}
impl GetResourceSharesFluentBuilder {
    /// Creates a new `GetResourceShares`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_resource_shares::GetResourceShares,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_shares::GetResourceSharesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_resource_shares::GetResourceSharesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_resource_shares::GetResourceSharesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_resource_shares::paginator::GetResourceSharesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_resource_shares::paginator::GetResourceSharesPaginator {
        crate::operation::get_resource_shares::paginator::GetResourceSharesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Appends an item to `resourceShareArns`.
    ///
    /// To override the contents of this collection use [`set_resource_share_arns`](Self::set_resource_share_arns).
    ///
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> of individual resource shares that you want information about.</p>
    pub fn resource_share_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_share_arns(input.into());
        self
    }
    /// <p>Specifies the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> of individual resource shares that you want information about.</p>
    pub fn set_resource_share_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_resource_share_arns(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that have this status.</p>
    pub fn resource_share_status(mut self, input: crate::types::ResourceShareStatus) -> Self {
        self.inner = self.inner.resource_share_status(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that have this status.</p>
    pub fn set_resource_share_status(
        mut self,
        input: std::option::Option<crate::types::ResourceShareStatus>,
    ) -> Self {
        self.inner = self.inner.set_resource_share_status(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that match the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>SELF</code> </b> – resource shares that your account shares with other accounts</p> </li>
    /// <li> <p> <b> <code>OTHER-ACCOUNTS</code> </b> – resource shares that other accounts share with your account</p> </li>
    /// </ul>
    pub fn resource_owner(mut self, input: crate::types::ResourceOwner) -> Self {
        self.inner = self.inner.resource_owner(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that match the following:</p>
    /// <ul>
    /// <li> <p> <b> <code>SELF</code> </b> – resource shares that your account shares with other accounts</p> </li>
    /// <li> <p> <b> <code>OTHER-ACCOUNTS</code> </b> – resource shares that other accounts share with your account</p> </li>
    /// </ul>
    pub fn set_resource_owner(
        mut self,
        input: std::option::Option<crate::types::ResourceOwner>,
    ) -> Self {
        self.inner = self.inner.set_resource_owner(input);
        self
    }
    /// <p>Specifies the name of an individual resource share that you want to retrieve details about.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Specifies the name of an individual resource share that you want to retrieve details about.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// Appends an item to `tagFilters`.
    ///
    /// To override the contents of this collection use [`set_tag_filters`](Self::set_tag_filters).
    ///
    /// <p>Specifies that you want to retrieve details of only those resource shares that match the specified tag keys and values.</p>
    pub fn tag_filters(mut self, input: crate::types::TagFilter) -> Self {
        self.inner = self.inner.tag_filters(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that match the specified tag keys and values.</p>
    pub fn set_tag_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagFilter>>,
    ) -> Self {
        self.inner = self.inner.set_tag_filters(input);
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specifies that you want to receive the next page of results. Valid only if you received a <code>NextToken</code> response in the previous request. If you did, it indicates that more output is available. Set this parameter to the value provided by the previous call's <code>NextToken</code> response to request the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the total number of results that you want included on each page of the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the number you specify, the <code>NextToken</code> response element is returned with a value (not null). Include the specified value as the <code>NextToken</code> request parameter in the next call to the operation to get the next part of the results. Note that the service might return fewer results than the maximum even when there are more results available. You should check <code>NextToken</code> after every operation to ensure that you receive all of the results.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that use the RAM permission with this <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a>.</p>
    pub fn permission_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.permission_arn(input.into());
        self
    }
    /// <p>Specifies that you want to retrieve details of only those resource shares that use the RAM permission with this <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a>.</p>
    pub fn set_permission_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_permission_arn(input);
        self
    }
}
