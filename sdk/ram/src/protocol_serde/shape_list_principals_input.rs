// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_principals_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_principals::ListPrincipalsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.next_token {
        object.key("nextToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.principals {
        let mut array_4 = object.key("principals").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.resource_arn {
        object.key("resourceArn").string(var_6.as_str());
    }
    if let Some(var_7) = &input.resource_owner {
        object.key("resourceOwner").string(var_7.as_str());
    }
    if let Some(var_8) = &input.resource_share_arns {
        let mut array_9 = object.key("resourceShareArns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.resource_type {
        object.key("resourceType").string(var_11.as_str());
    }
    Ok(())
}
