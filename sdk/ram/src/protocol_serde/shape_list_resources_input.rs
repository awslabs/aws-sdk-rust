// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_resources_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_resources::ListResourcesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_1).into()),
        );
    }
    if let Some(var_2) = &input.next_token {
        object.key("nextToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.principal {
        object.key("principal").string(var_3.as_str());
    }
    if let Some(var_4) = &input.resource_arns {
        let mut array_5 = object.key("resourceArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.resource_owner {
        object.key("resourceOwner").string(var_7.as_str());
    }
    if let Some(var_8) = &input.resource_region_scope {
        object.key("resourceRegionScope").string(var_8.as_str());
    }
    if let Some(var_9) = &input.resource_share_arns {
        let mut array_10 = object.key("resourceShareArns").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.resource_type {
        object.key("resourceType").string(var_12.as_str());
    }
    Ok(())
}
