// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a resource share in RAM.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceShare {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
    #[doc(hidden)]
    pub resource_share_arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource share.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the resource share.</p>
    #[doc(hidden)]
    pub owning_account_id: std::option::Option<std::string::String>,
    /// <p>Indicates whether principals outside your organization in Organizations can be associated with a resource share.</p>
    #[doc(hidden)]
    pub allow_external_principals: std::option::Option<bool>,
    /// <p>The current status of the resource share.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ResourceShareStatus>,
    /// <p>A message about the status of the resource share.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The tag key and value pairs attached to the resource share.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The date and time when the resource share was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the resource share was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates how the resource share was created. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>CREATED_FROM_POLICY</code> - Indicates that the resource share was created from an Identity and Access Management (IAM) resource-based permission policy attached to the resource. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <code>PROMOTING_TO_STANDARD</code> - The resource share is in the process of being promoted. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <code>STANDARD</code> - Indicates that the resource share was created in RAM using the console or APIs. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub feature_set: std::option::Option<crate::model::ResourceShareFeatureSet>,
}
impl ResourceShare {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
    pub fn resource_share_arn(&self) -> std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The name of the resource share.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the resource share.</p>
    pub fn owning_account_id(&self) -> std::option::Option<&str> {
        self.owning_account_id.as_deref()
    }
    /// <p>Indicates whether principals outside your organization in Organizations can be associated with a resource share.</p>
    pub fn allow_external_principals(&self) -> std::option::Option<bool> {
        self.allow_external_principals
    }
    /// <p>The current status of the resource share.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ResourceShareStatus> {
        self.status.as_ref()
    }
    /// <p>A message about the status of the resource share.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The tag key and value pairs attached to the resource share.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The date and time when the resource share was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the resource share was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Indicates how the resource share was created. Possible values include:</p>
    /// <ul>
    /// <li> <p> <code>CREATED_FROM_POLICY</code> - Indicates that the resource share was created from an Identity and Access Management (IAM) resource-based permission policy attached to the resource. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <code>PROMOTING_TO_STANDARD</code> - The resource share is in the process of being promoted. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
    /// <li> <p> <code>STANDARD</code> - Indicates that the resource share was created in RAM using the console or APIs. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs.</p> </li>
    /// </ul>
    pub fn feature_set(&self) -> std::option::Option<&crate::model::ResourceShareFeatureSet> {
        self.feature_set.as_ref()
    }
}
impl ResourceShare {
    /// Creates a new builder-style object to manufacture [`ResourceShare`](crate::model::ResourceShare).
    pub fn builder() -> crate::model::resource_share::Builder {
        crate::model::resource_share::Builder::default()
    }
}

/// See [`ResourceShare`](crate::model::ResourceShare).
pub mod resource_share {

    /// A builder for [`ResourceShare`](crate::model::ResourceShare).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_share_arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) owning_account_id: std::option::Option<std::string::String>,
        pub(crate) allow_external_principals: std::option::Option<bool>,
        pub(crate) status: std::option::Option<crate::model::ResourceShareStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) feature_set: std::option::Option<crate::model::ResourceShareFeatureSet>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
        pub fn resource_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
        pub fn set_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_arn = input;
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the resource share.</p>
        pub fn owning_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owning_account_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that owns the resource share.</p>
        pub fn set_owning_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.owning_account_id = input;
            self
        }
        /// <p>Indicates whether principals outside your organization in Organizations can be associated with a resource share.</p>
        pub fn allow_external_principals(mut self, input: bool) -> Self {
            self.allow_external_principals = Some(input);
            self
        }
        /// <p>Indicates whether principals outside your organization in Organizations can be associated with a resource share.</p>
        pub fn set_allow_external_principals(mut self, input: std::option::Option<bool>) -> Self {
            self.allow_external_principals = input;
            self
        }
        /// <p>The current status of the resource share.</p>
        pub fn status(mut self, input: crate::model::ResourceShareStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the resource share.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ResourceShareStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A message about the status of the resource share.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>A message about the status of the resource share.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tag key and value pairs attached to the resource share.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The tag key and value pairs attached to the resource share.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The date and time when the resource share was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the resource share was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date and time when the resource share was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date and time when the resource share was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Indicates how the resource share was created. Possible values include:</p>
        /// <ul>
        /// <li> <p> <code>CREATED_FROM_POLICY</code> - Indicates that the resource share was created from an Identity and Access Management (IAM) resource-based permission policy attached to the resource. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
        /// <li> <p> <code>PROMOTING_TO_STANDARD</code> - The resource share is in the process of being promoted. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
        /// <li> <p> <code>STANDARD</code> - Indicates that the resource share was created in RAM using the console or APIs. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs.</p> </li>
        /// </ul>
        pub fn feature_set(mut self, input: crate::model::ResourceShareFeatureSet) -> Self {
            self.feature_set = Some(input);
            self
        }
        /// <p>Indicates how the resource share was created. Possible values include:</p>
        /// <ul>
        /// <li> <p> <code>CREATED_FROM_POLICY</code> - Indicates that the resource share was created from an Identity and Access Management (IAM) resource-based permission policy attached to the resource. This type of resource share is visible only to the Amazon Web Services account that created it. You can't modify it in RAM unless you promote it. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
        /// <li> <p> <code>PROMOTING_TO_STANDARD</code> - The resource share is in the process of being promoted. For more information, see <code>PromoteResourceShareCreatedFromPolicy</code>.</p> </li>
        /// <li> <p> <code>STANDARD</code> - Indicates that the resource share was created in RAM using the console or APIs. These resource shares are visible to all principals you share the resource share with. You can modify these resource shares in RAM using the console or APIs.</p> </li>
        /// </ul>
        pub fn set_feature_set(
            mut self,
            input: std::option::Option<crate::model::ResourceShareFeatureSet>,
        ) -> Self {
            self.feature_set = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceShare`](crate::model::ResourceShare).
        pub fn build(self) -> crate::model::ResourceShare {
            crate::model::ResourceShare {
                resource_share_arn: self.resource_share_arn,
                name: self.name,
                owning_account_id: self.owning_account_id,
                allow_external_principals: self.allow_external_principals,
                status: self.status,
                status_message: self.status_message,
                tags: self.tags,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                feature_set: self.feature_set,
            }
        }
    }
}

/// When writing a match expression against `ResourceShareFeatureSet`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcesharefeatureset = unimplemented!();
/// match resourcesharefeatureset {
///     ResourceShareFeatureSet::CreatedFromPolicy => { /* ... */ },
///     ResourceShareFeatureSet::PromotingToStandard => { /* ... */ },
///     ResourceShareFeatureSet::Standard => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcesharefeatureset` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceShareFeatureSet::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceShareFeatureSet::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceShareFeatureSet::NewFeature` is defined.
/// Specifically, when `resourcesharefeatureset` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceShareFeatureSet::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceShareFeatureSet {
    #[allow(missing_docs)] // documentation missing in model
    CreatedFromPolicy,
    #[allow(missing_docs)] // documentation missing in model
    PromotingToStandard,
    #[allow(missing_docs)] // documentation missing in model
    Standard,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceShareFeatureSet {
    fn from(s: &str) -> Self {
        match s {
            "CREATED_FROM_POLICY" => ResourceShareFeatureSet::CreatedFromPolicy,
            "PROMOTING_TO_STANDARD" => ResourceShareFeatureSet::PromotingToStandard,
            "STANDARD" => ResourceShareFeatureSet::Standard,
            other => ResourceShareFeatureSet::Unknown(crate::types::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ResourceShareFeatureSet {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceShareFeatureSet::from(s))
    }
}
impl ResourceShareFeatureSet {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceShareFeatureSet::CreatedFromPolicy => "CREATED_FROM_POLICY",
            ResourceShareFeatureSet::PromotingToStandard => "PROMOTING_TO_STANDARD",
            ResourceShareFeatureSet::Standard => "STANDARD",
            ResourceShareFeatureSet::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["CREATED_FROM_POLICY", "PROMOTING_TO_STANDARD", "STANDARD"]
    }
}
impl AsRef<str> for ResourceShareFeatureSet {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A structure containing a tag. A tag is metadata that you can attach to your resources to help organize and categorize them. You can also use them to help you secure your resources. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Controlling access to Amazon Web Services resources using tags</a>.</p>
/// <p>For more information about tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Tag {
    /// <p>The key, or name, attached to the tag. Every tag must have a key. Key names are case sensitive.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The string value attached to the tag. The value can be an empty string. Key values are case sensitive.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Tag {
    /// <p>The key, or name, attached to the tag. Every tag must have a key. Key names are case sensitive.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The string value attached to the tag. The value can be an empty string. Key values are case sensitive.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Tag {
    /// Creates a new builder-style object to manufacture [`Tag`](crate::model::Tag).
    pub fn builder() -> crate::model::tag::Builder {
        crate::model::tag::Builder::default()
    }
}

/// See [`Tag`](crate::model::Tag).
pub mod tag {

    /// A builder for [`Tag`](crate::model::Tag).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) value: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The key, or name, attached to the tag. Every tag must have a key. Key names are case sensitive.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        /// <p>The key, or name, attached to the tag. Every tag must have a key. Key names are case sensitive.</p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// <p>The string value attached to the tag. The value can be an empty string. Key values are case sensitive.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The string value attached to the tag. The value can be an empty string. Key values are case sensitive.</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// Consumes the builder and constructs a [`Tag`](crate::model::Tag).
        pub fn build(self) -> crate::model::Tag {
            crate::model::Tag {
                key: self.key,
                value: self.value,
            }
        }
    }
}

/// When writing a match expression against `ResourceShareStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcesharestatus = unimplemented!();
/// match resourcesharestatus {
///     ResourceShareStatus::Active => { /* ... */ },
///     ResourceShareStatus::Deleted => { /* ... */ },
///     ResourceShareStatus::Deleting => { /* ... */ },
///     ResourceShareStatus::Failed => { /* ... */ },
///     ResourceShareStatus::Pending => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcesharestatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceShareStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceShareStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceShareStatus::NewFeature` is defined.
/// Specifically, when `resourcesharestatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceShareStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceShareStatus {
    #[allow(missing_docs)] // documentation missing in model
    Active,
    #[allow(missing_docs)] // documentation missing in model
    Deleted,
    #[allow(missing_docs)] // documentation missing in model
    Deleting,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceShareStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACTIVE" => ResourceShareStatus::Active,
            "DELETED" => ResourceShareStatus::Deleted,
            "DELETING" => ResourceShareStatus::Deleting,
            "FAILED" => ResourceShareStatus::Failed,
            "PENDING" => ResourceShareStatus::Pending,
            other => {
                ResourceShareStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ResourceShareStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceShareStatus::from(s))
    }
}
impl ResourceShareStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceShareStatus::Active => "ACTIVE",
            ResourceShareStatus::Deleted => "DELETED",
            ResourceShareStatus::Deleting => "DELETING",
            ResourceShareStatus::Failed => "FAILED",
            ResourceShareStatus::Pending => "PENDING",
            ResourceShareStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ACTIVE", "DELETED", "DELETING", "FAILED", "PENDING"]
    }
}
impl AsRef<str> for ResourceShareStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Describes an invitation for an Amazon Web Services account to join a resource share.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceShareInvitation {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the invitation.</p>
    #[doc(hidden)]
    pub resource_share_invitation_arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource share.</p>
    #[doc(hidden)]
    pub resource_share_name: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
    #[doc(hidden)]
    pub resource_share_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that sent the invitation.</p>
    #[doc(hidden)]
    pub sender_account_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that received the invitation.</p>
    #[doc(hidden)]
    pub receiver_account_id: std::option::Option<std::string::String>,
    /// <p>The date and time when the invitation was sent.</p>
    #[doc(hidden)]
    pub invitation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current status of the invitation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ResourceShareInvitationStatus>,
    /// <p>To view the resources associated with a pending resource share invitation, use <code>ListPendingInvitationResources</code>.</p>
    #[deprecated(note = "This member has been deprecated. Use ListPendingInvitationResources.")]
    #[doc(hidden)]
    pub resource_share_associations:
        std::option::Option<std::vec::Vec<crate::model::ResourceShareAssociation>>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the IAM user or role that received the invitation.</p>
    #[doc(hidden)]
    pub receiver_arn: std::option::Option<std::string::String>,
}
impl ResourceShareInvitation {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the invitation.</p>
    pub fn resource_share_invitation_arn(&self) -> std::option::Option<&str> {
        self.resource_share_invitation_arn.as_deref()
    }
    /// <p>The name of the resource share.</p>
    pub fn resource_share_name(&self) -> std::option::Option<&str> {
        self.resource_share_name.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
    pub fn resource_share_arn(&self) -> std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that sent the invitation.</p>
    pub fn sender_account_id(&self) -> std::option::Option<&str> {
        self.sender_account_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that received the invitation.</p>
    pub fn receiver_account_id(&self) -> std::option::Option<&str> {
        self.receiver_account_id.as_deref()
    }
    /// <p>The date and time when the invitation was sent.</p>
    pub fn invitation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.invitation_timestamp.as_ref()
    }
    /// <p>The current status of the invitation.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ResourceShareInvitationStatus> {
        self.status.as_ref()
    }
    /// <p>To view the resources associated with a pending resource share invitation, use <code>ListPendingInvitationResources</code>.</p>
    #[deprecated(note = "This member has been deprecated. Use ListPendingInvitationResources.")]
    pub fn resource_share_associations(
        &self,
    ) -> std::option::Option<&[crate::model::ResourceShareAssociation]> {
        self.resource_share_associations.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the IAM user or role that received the invitation.</p>
    pub fn receiver_arn(&self) -> std::option::Option<&str> {
        self.receiver_arn.as_deref()
    }
}
impl ResourceShareInvitation {
    /// Creates a new builder-style object to manufacture [`ResourceShareInvitation`](crate::model::ResourceShareInvitation).
    pub fn builder() -> crate::model::resource_share_invitation::Builder {
        crate::model::resource_share_invitation::Builder::default()
    }
}

/// See [`ResourceShareInvitation`](crate::model::ResourceShareInvitation).
pub mod resource_share_invitation {

    /// A builder for [`ResourceShareInvitation`](crate::model::ResourceShareInvitation).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_share_invitation_arn: std::option::Option<std::string::String>,
        pub(crate) resource_share_name: std::option::Option<std::string::String>,
        pub(crate) resource_share_arn: std::option::Option<std::string::String>,
        pub(crate) sender_account_id: std::option::Option<std::string::String>,
        pub(crate) receiver_account_id: std::option::Option<std::string::String>,
        pub(crate) invitation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::ResourceShareInvitationStatus>,
        pub(crate) resource_share_associations:
            std::option::Option<std::vec::Vec<crate::model::ResourceShareAssociation>>,
        pub(crate) receiver_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the invitation.</p>
        pub fn resource_share_invitation_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.resource_share_invitation_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the invitation.</p>
        pub fn set_resource_share_invitation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_invitation_arn = input;
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn resource_share_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_name = Some(input.into());
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn set_resource_share_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_name = input;
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
        pub fn resource_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share</p>
        pub fn set_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_arn = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that sent the invitation.</p>
        pub fn sender_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.sender_account_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that sent the invitation.</p>
        pub fn set_sender_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sender_account_id = input;
            self
        }
        /// <p>The ID of the Amazon Web Services account that received the invitation.</p>
        pub fn receiver_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.receiver_account_id = Some(input.into());
            self
        }
        /// <p>The ID of the Amazon Web Services account that received the invitation.</p>
        pub fn set_receiver_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.receiver_account_id = input;
            self
        }
        /// <p>The date and time when the invitation was sent.</p>
        pub fn invitation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.invitation_timestamp = Some(input);
            self
        }
        /// <p>The date and time when the invitation was sent.</p>
        pub fn set_invitation_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.invitation_timestamp = input;
            self
        }
        /// <p>The current status of the invitation.</p>
        pub fn status(mut self, input: crate::model::ResourceShareInvitationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the invitation.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ResourceShareInvitationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Appends an item to `resource_share_associations`.
        ///
        /// To override the contents of this collection use [`set_resource_share_associations`](Self::set_resource_share_associations).
        ///
        /// <p>To view the resources associated with a pending resource share invitation, use <code>ListPendingInvitationResources</code>.</p>
        #[deprecated(note = "This member has been deprecated. Use ListPendingInvitationResources.")]
        pub fn resource_share_associations(
            mut self,
            input: crate::model::ResourceShareAssociation,
        ) -> Self {
            let mut v = self.resource_share_associations.unwrap_or_default();
            v.push(input);
            self.resource_share_associations = Some(v);
            self
        }
        /// <p>To view the resources associated with a pending resource share invitation, use <code>ListPendingInvitationResources</code>.</p>
        #[deprecated(note = "This member has been deprecated. Use ListPendingInvitationResources.")]
        pub fn set_resource_share_associations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceShareAssociation>>,
        ) -> Self {
            self.resource_share_associations = input;
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the IAM user or role that received the invitation.</p>
        pub fn receiver_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.receiver_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the IAM user or role that received the invitation.</p>
        pub fn set_receiver_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.receiver_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceShareInvitation`](crate::model::ResourceShareInvitation).
        pub fn build(self) -> crate::model::ResourceShareInvitation {
            crate::model::ResourceShareInvitation {
                resource_share_invitation_arn: self.resource_share_invitation_arn,
                resource_share_name: self.resource_share_name,
                resource_share_arn: self.resource_share_arn,
                sender_account_id: self.sender_account_id,
                receiver_account_id: self.receiver_account_id,
                invitation_timestamp: self.invitation_timestamp,
                status: self.status,
                resource_share_associations: self.resource_share_associations,
                receiver_arn: self.receiver_arn,
            }
        }
    }
}

/// <p>Describes an association with a resource share and either a principal or a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceShareAssociation {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share.</p>
    #[doc(hidden)]
    pub resource_share_arn: std::option::Option<std::string::String>,
    /// <p>The name of the resource share.</p>
    #[doc(hidden)]
    pub resource_share_name: std::option::Option<std::string::String>,
    /// <p>The associated entity. This can be either of the following:</p>
    /// <ul>
    /// <li> <p>For a resource association, this is the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p> </li>
    /// <li> <p>For principal associations, this is one of the following:</p>
    /// <ul>
    /// <li> <p>The ID of an Amazon Web Services account</p> </li>
    /// <li> <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of an organization in Organizations</p> </li>
    /// <li> <p>The ARN of an organizational unit (OU) in Organizations</p> </li>
    /// <li> <p>The ARN of an IAM role</p> </li>
    /// <li> <p>The ARN of an IAM user</p> </li>
    /// </ul> </li>
    /// </ul>
    #[doc(hidden)]
    pub associated_entity: std::option::Option<std::string::String>,
    /// <p>The type of entity included in this association.</p>
    #[doc(hidden)]
    pub association_type: std::option::Option<crate::model::ResourceShareAssociationType>,
    /// <p>The current status of the association.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ResourceShareAssociationStatus>,
    /// <p>A message about the status of the association.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The date and time when the association was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the association was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
    #[doc(hidden)]
    pub external: std::option::Option<bool>,
}
impl ResourceShareAssociation {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share.</p>
    pub fn resource_share_arn(&self) -> std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The name of the resource share.</p>
    pub fn resource_share_name(&self) -> std::option::Option<&str> {
        self.resource_share_name.as_deref()
    }
    /// <p>The associated entity. This can be either of the following:</p>
    /// <ul>
    /// <li> <p>For a resource association, this is the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p> </li>
    /// <li> <p>For principal associations, this is one of the following:</p>
    /// <ul>
    /// <li> <p>The ID of an Amazon Web Services account</p> </li>
    /// <li> <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of an organization in Organizations</p> </li>
    /// <li> <p>The ARN of an organizational unit (OU) in Organizations</p> </li>
    /// <li> <p>The ARN of an IAM role</p> </li>
    /// <li> <p>The ARN of an IAM user</p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn associated_entity(&self) -> std::option::Option<&str> {
        self.associated_entity.as_deref()
    }
    /// <p>The type of entity included in this association.</p>
    pub fn association_type(
        &self,
    ) -> std::option::Option<&crate::model::ResourceShareAssociationType> {
        self.association_type.as_ref()
    }
    /// <p>The current status of the association.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ResourceShareAssociationStatus> {
        self.status.as_ref()
    }
    /// <p>A message about the status of the association.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The date and time when the association was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the association was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
    pub fn external(&self) -> std::option::Option<bool> {
        self.external
    }
}
impl ResourceShareAssociation {
    /// Creates a new builder-style object to manufacture [`ResourceShareAssociation`](crate::model::ResourceShareAssociation).
    pub fn builder() -> crate::model::resource_share_association::Builder {
        crate::model::resource_share_association::Builder::default()
    }
}

/// See [`ResourceShareAssociation`](crate::model::ResourceShareAssociation).
pub mod resource_share_association {

    /// A builder for [`ResourceShareAssociation`](crate::model::ResourceShareAssociation).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_share_arn: std::option::Option<std::string::String>,
        pub(crate) resource_share_name: std::option::Option<std::string::String>,
        pub(crate) associated_entity: std::option::Option<std::string::String>,
        pub(crate) association_type:
            std::option::Option<crate::model::ResourceShareAssociationType>,
        pub(crate) status: std::option::Option<crate::model::ResourceShareAssociationStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) external: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share.</p>
        pub fn resource_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share.</p>
        pub fn set_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_arn = input;
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn resource_share_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_name = Some(input.into());
            self
        }
        /// <p>The name of the resource share.</p>
        pub fn set_resource_share_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_name = input;
            self
        }
        /// <p>The associated entity. This can be either of the following:</p>
        /// <ul>
        /// <li> <p>For a resource association, this is the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p> </li>
        /// <li> <p>For principal associations, this is one of the following:</p>
        /// <ul>
        /// <li> <p>The ID of an Amazon Web Services account</p> </li>
        /// <li> <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of an organization in Organizations</p> </li>
        /// <li> <p>The ARN of an organizational unit (OU) in Organizations</p> </li>
        /// <li> <p>The ARN of an IAM role</p> </li>
        /// <li> <p>The ARN of an IAM user</p> </li>
        /// </ul> </li>
        /// </ul>
        pub fn associated_entity(mut self, input: impl Into<std::string::String>) -> Self {
            self.associated_entity = Some(input.into());
            self
        }
        /// <p>The associated entity. This can be either of the following:</p>
        /// <ul>
        /// <li> <p>For a resource association, this is the <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p> </li>
        /// <li> <p>For principal associations, this is one of the following:</p>
        /// <ul>
        /// <li> <p>The ID of an Amazon Web Services account</p> </li>
        /// <li> <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of an organization in Organizations</p> </li>
        /// <li> <p>The ARN of an organizational unit (OU) in Organizations</p> </li>
        /// <li> <p>The ARN of an IAM role</p> </li>
        /// <li> <p>The ARN of an IAM user</p> </li>
        /// </ul> </li>
        /// </ul>
        pub fn set_associated_entity(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.associated_entity = input;
            self
        }
        /// <p>The type of entity included in this association.</p>
        pub fn association_type(
            mut self,
            input: crate::model::ResourceShareAssociationType,
        ) -> Self {
            self.association_type = Some(input);
            self
        }
        /// <p>The type of entity included in this association.</p>
        pub fn set_association_type(
            mut self,
            input: std::option::Option<crate::model::ResourceShareAssociationType>,
        ) -> Self {
            self.association_type = input;
            self
        }
        /// <p>The current status of the association.</p>
        pub fn status(mut self, input: crate::model::ResourceShareAssociationStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the association.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ResourceShareAssociationStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A message about the status of the association.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>A message about the status of the association.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The date and time when the association was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the association was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date and time when the association was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date and time when the association was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
        pub fn external(mut self, input: bool) -> Self {
            self.external = Some(input);
            self
        }
        /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
        pub fn set_external(mut self, input: std::option::Option<bool>) -> Self {
            self.external = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceShareAssociation`](crate::model::ResourceShareAssociation).
        pub fn build(self) -> crate::model::ResourceShareAssociation {
            crate::model::ResourceShareAssociation {
                resource_share_arn: self.resource_share_arn,
                resource_share_name: self.resource_share_name,
                associated_entity: self.associated_entity,
                association_type: self.association_type,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                external: self.external,
            }
        }
    }
}

/// When writing a match expression against `ResourceShareAssociationStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceshareassociationstatus = unimplemented!();
/// match resourceshareassociationstatus {
///     ResourceShareAssociationStatus::Associated => { /* ... */ },
///     ResourceShareAssociationStatus::Associating => { /* ... */ },
///     ResourceShareAssociationStatus::Disassociated => { /* ... */ },
///     ResourceShareAssociationStatus::Disassociating => { /* ... */ },
///     ResourceShareAssociationStatus::Failed => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceshareassociationstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceShareAssociationStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceShareAssociationStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceShareAssociationStatus::NewFeature` is defined.
/// Specifically, when `resourceshareassociationstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceShareAssociationStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceShareAssociationStatus {
    #[allow(missing_docs)] // documentation missing in model
    Associated,
    #[allow(missing_docs)] // documentation missing in model
    Associating,
    #[allow(missing_docs)] // documentation missing in model
    Disassociated,
    #[allow(missing_docs)] // documentation missing in model
    Disassociating,
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceShareAssociationStatus {
    fn from(s: &str) -> Self {
        match s {
            "ASSOCIATED" => ResourceShareAssociationStatus::Associated,
            "ASSOCIATING" => ResourceShareAssociationStatus::Associating,
            "DISASSOCIATED" => ResourceShareAssociationStatus::Disassociated,
            "DISASSOCIATING" => ResourceShareAssociationStatus::Disassociating,
            "FAILED" => ResourceShareAssociationStatus::Failed,
            other => ResourceShareAssociationStatus::Unknown(crate::types::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ResourceShareAssociationStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceShareAssociationStatus::from(s))
    }
}
impl ResourceShareAssociationStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceShareAssociationStatus::Associated => "ASSOCIATED",
            ResourceShareAssociationStatus::Associating => "ASSOCIATING",
            ResourceShareAssociationStatus::Disassociated => "DISASSOCIATED",
            ResourceShareAssociationStatus::Disassociating => "DISASSOCIATING",
            ResourceShareAssociationStatus::Failed => "FAILED",
            ResourceShareAssociationStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ASSOCIATED",
            "ASSOCIATING",
            "DISASSOCIATED",
            "DISASSOCIATING",
            "FAILED",
        ]
    }
}
impl AsRef<str> for ResourceShareAssociationStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ResourceShareAssociationType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceshareassociationtype = unimplemented!();
/// match resourceshareassociationtype {
///     ResourceShareAssociationType::Principal => { /* ... */ },
///     ResourceShareAssociationType::Resource => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceshareassociationtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceShareAssociationType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceShareAssociationType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceShareAssociationType::NewFeature` is defined.
/// Specifically, when `resourceshareassociationtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceShareAssociationType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceShareAssociationType {
    #[allow(missing_docs)] // documentation missing in model
    Principal,
    #[allow(missing_docs)] // documentation missing in model
    Resource,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceShareAssociationType {
    fn from(s: &str) -> Self {
        match s {
            "PRINCIPAL" => ResourceShareAssociationType::Principal,
            "RESOURCE" => ResourceShareAssociationType::Resource,
            other => ResourceShareAssociationType::Unknown(crate::types::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ResourceShareAssociationType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceShareAssociationType::from(s))
    }
}
impl ResourceShareAssociationType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceShareAssociationType::Principal => "PRINCIPAL",
            ResourceShareAssociationType::Resource => "RESOURCE",
            ResourceShareAssociationType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["PRINCIPAL", "RESOURCE"]
    }
}
impl AsRef<str> for ResourceShareAssociationType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ResourceShareInvitationStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceshareinvitationstatus = unimplemented!();
/// match resourceshareinvitationstatus {
///     ResourceShareInvitationStatus::Accepted => { /* ... */ },
///     ResourceShareInvitationStatus::Expired => { /* ... */ },
///     ResourceShareInvitationStatus::Pending => { /* ... */ },
///     ResourceShareInvitationStatus::Rejected => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceshareinvitationstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceShareInvitationStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceShareInvitationStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceShareInvitationStatus::NewFeature` is defined.
/// Specifically, when `resourceshareinvitationstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceShareInvitationStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceShareInvitationStatus {
    #[allow(missing_docs)] // documentation missing in model
    Accepted,
    #[allow(missing_docs)] // documentation missing in model
    Expired,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    Rejected,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceShareInvitationStatus {
    fn from(s: &str) -> Self {
        match s {
            "ACCEPTED" => ResourceShareInvitationStatus::Accepted,
            "EXPIRED" => ResourceShareInvitationStatus::Expired,
            "PENDING" => ResourceShareInvitationStatus::Pending,
            "REJECTED" => ResourceShareInvitationStatus::Rejected,
            other => ResourceShareInvitationStatus::Unknown(crate::types::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ResourceShareInvitationStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceShareInvitationStatus::from(s))
    }
}
impl ResourceShareInvitationStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceShareInvitationStatus::Accepted => "ACCEPTED",
            ResourceShareInvitationStatus::Expired => "EXPIRED",
            ResourceShareInvitationStatus::Pending => "PENDING",
            ResourceShareInvitationStatus::Rejected => "REJECTED",
            ResourceShareInvitationStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ACCEPTED", "EXPIRED", "PENDING", "REJECTED"]
    }
}
impl AsRef<str> for ResourceShareInvitationStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Information about a shareable resource type and the Amazon Web Services service to which resources of that type belong.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceNameAndResourceType {
    /// <p>The type of the resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resource_region_scope: std::option::Option<crate::model::ResourceRegionScope>,
}
impl ServiceNameAndResourceType {
    /// <p>The type of the resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>Specifies the scope of visibility of resources of this type:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn resource_region_scope(&self) -> std::option::Option<&crate::model::ResourceRegionScope> {
        self.resource_region_scope.as_ref()
    }
}
impl ServiceNameAndResourceType {
    /// Creates a new builder-style object to manufacture [`ServiceNameAndResourceType`](crate::model::ServiceNameAndResourceType).
    pub fn builder() -> crate::model::service_name_and_resource_type::Builder {
        crate::model::service_name_and_resource_type::Builder::default()
    }
}

/// See [`ServiceNameAndResourceType`](crate::model::ServiceNameAndResourceType).
pub mod service_name_and_resource_type {

    /// A builder for [`ServiceNameAndResourceType`](crate::model::ServiceNameAndResourceType).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) service_name: std::option::Option<std::string::String>,
        pub(crate) resource_region_scope: std::option::Option<crate::model::ResourceRegionScope>,
    }
    impl Builder {
        /// <p>The type of the resource.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        /// <p>The type of the resource.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
        pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_name = Some(input.into());
            self
        }
        /// <p>The name of the Amazon Web Services service to which resources of this type belong.</p>
        pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_name = input;
            self
        }
        /// <p>Specifies the scope of visibility of resources of this type:</p>
        /// <ul>
        /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
        /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
        /// </ul>
        pub fn resource_region_scope(mut self, input: crate::model::ResourceRegionScope) -> Self {
            self.resource_region_scope = Some(input);
            self
        }
        /// <p>Specifies the scope of visibility of resources of this type:</p>
        /// <ul>
        /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
        /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
        /// </ul>
        pub fn set_resource_region_scope(
            mut self,
            input: std::option::Option<crate::model::ResourceRegionScope>,
        ) -> Self {
            self.resource_region_scope = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceNameAndResourceType`](crate::model::ServiceNameAndResourceType).
        pub fn build(self) -> crate::model::ServiceNameAndResourceType {
            crate::model::ServiceNameAndResourceType {
                resource_type: self.resource_type,
                service_name: self.service_name,
                resource_region_scope: self.resource_region_scope,
            }
        }
    }
}

/// When writing a match expression against `ResourceRegionScope`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceregionscope = unimplemented!();
/// match resourceregionscope {
///     ResourceRegionScope::Global => { /* ... */ },
///     ResourceRegionScope::Regional => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceregionscope` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceRegionScope::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceRegionScope::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceRegionScope::NewFeature` is defined.
/// Specifically, when `resourceregionscope` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceRegionScope::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceRegionScope {
    #[allow(missing_docs)] // documentation missing in model
    Global,
    #[allow(missing_docs)] // documentation missing in model
    Regional,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceRegionScope {
    fn from(s: &str) -> Self {
        match s {
            "GLOBAL" => ResourceRegionScope::Global,
            "REGIONAL" => ResourceRegionScope::Regional,
            other => {
                ResourceRegionScope::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ResourceRegionScope {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceRegionScope::from(s))
    }
}
impl ResourceRegionScope {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceRegionScope::Global => "GLOBAL",
            ResourceRegionScope::Regional => "REGIONAL",
            ResourceRegionScope::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["GLOBAL", "REGIONAL"]
    }
}
impl AsRef<str> for ResourceRegionScope {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ResourceRegionScopeFilter`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceregionscopefilter = unimplemented!();
/// match resourceregionscopefilter {
///     ResourceRegionScopeFilter::All => { /* ... */ },
///     ResourceRegionScopeFilter::Global => { /* ... */ },
///     ResourceRegionScopeFilter::Regional => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceregionscopefilter` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceRegionScopeFilter::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceRegionScopeFilter::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceRegionScopeFilter::NewFeature` is defined.
/// Specifically, when `resourceregionscopefilter` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceRegionScopeFilter::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceRegionScopeFilter {
    #[allow(missing_docs)] // documentation missing in model
    All,
    #[allow(missing_docs)] // documentation missing in model
    Global,
    #[allow(missing_docs)] // documentation missing in model
    Regional,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceRegionScopeFilter {
    fn from(s: &str) -> Self {
        match s {
            "ALL" => ResourceRegionScopeFilter::All,
            "GLOBAL" => ResourceRegionScopeFilter::Global,
            "REGIONAL" => ResourceRegionScopeFilter::Regional,
            other => ResourceRegionScopeFilter::Unknown(crate::types::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for ResourceRegionScopeFilter {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceRegionScopeFilter::from(s))
    }
}
impl ResourceRegionScopeFilter {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceRegionScopeFilter::All => "ALL",
            ResourceRegionScopeFilter::Global => "GLOBAL",
            ResourceRegionScopeFilter::Regional => "REGIONAL",
            ResourceRegionScopeFilter::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["ALL", "GLOBAL", "REGIONAL"]
    }
}
impl AsRef<str> for ResourceRegionScopeFilter {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Information about an RAM permission that is associated with a resource share and any of its resources of a specified type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceSharePermissionSummary {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the permission you want information about.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The version of the permission represented in this structure.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
    #[doc(hidden)]
    pub default_version: std::option::Option<bool>,
    /// <p>The name of this permission.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of resource to which this permission applies.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The current status of the permission.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The date and time when the permission was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the permission was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
    #[doc(hidden)]
    pub is_resource_type_default: std::option::Option<bool>,
}
impl ResourceSharePermissionSummary {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the permission you want information about.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The version of the permission represented in this structure.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
    pub fn default_version(&self) -> std::option::Option<bool> {
        self.default_version
    }
    /// <p>The name of this permission.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of resource to which this permission applies.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The current status of the permission.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
    pub fn is_resource_type_default(&self) -> std::option::Option<bool> {
        self.is_resource_type_default
    }
}
impl ResourceSharePermissionSummary {
    /// Creates a new builder-style object to manufacture [`ResourceSharePermissionSummary`](crate::model::ResourceSharePermissionSummary).
    pub fn builder() -> crate::model::resource_share_permission_summary::Builder {
        crate::model::resource_share_permission_summary::Builder::default()
    }
}

/// See [`ResourceSharePermissionSummary`](crate::model::ResourceSharePermissionSummary).
pub mod resource_share_permission_summary {

    /// A builder for [`ResourceSharePermissionSummary`](crate::model::ResourceSharePermissionSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) version: std::option::Option<std::string::String>,
        pub(crate) default_version: std::option::Option<bool>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) is_resource_type_default: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the permission you want information about.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the permission you want information about.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The version of the permission represented in this structure.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        /// <p>The version of the permission represented in this structure.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
        pub fn default_version(mut self, input: bool) -> Self {
            self.default_version = Some(input);
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
        pub fn set_default_version(mut self, input: std::option::Option<bool>) -> Self {
            self.default_version = input;
            self
        }
        /// <p>The name of this permission.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of this permission.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The type of resource to which this permission applies.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        /// <p>The type of resource to which this permission applies.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The current status of the permission.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        /// <p>The current status of the permission.</p>
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The date and time when the permission was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the permission was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date and time when the permission was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date and time when the permission was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
        pub fn is_resource_type_default(mut self, input: bool) -> Self {
            self.is_resource_type_default = Some(input);
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
        pub fn set_is_resource_type_default(mut self, input: std::option::Option<bool>) -> Self {
            self.is_resource_type_default = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceSharePermissionSummary`](crate::model::ResourceSharePermissionSummary).
        pub fn build(self) -> crate::model::ResourceSharePermissionSummary {
            crate::model::ResourceSharePermissionSummary {
                arn: self.arn,
                version: self.version,
                default_version: self.default_version,
                name: self.name,
                resource_type: self.resource_type,
                status: self.status,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                is_resource_type_default: self.is_resource_type_default,
            }
        }
    }
}

/// <p>Describes a resource associated with a resource share in RAM.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Resource {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The resource type. This takes the form of: <code>service-code</code>:<code>resource-code</code> </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share this resource is associated with.</p>
    #[doc(hidden)]
    pub resource_share_arn: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource group. This value is available only if the resource is part of a resource group.</p>
    #[doc(hidden)]
    pub resource_group_arn: std::option::Option<std::string::String>,
    /// <p>The current status of the resource.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::ResourceStatus>,
    /// <p>A message about the status of the resource.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The date and time when the resource was associated with the resource share.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date an time when the association was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the scope of visibility of this resource:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub resource_region_scope: std::option::Option<crate::model::ResourceRegionScope>,
}
impl Resource {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The resource type. This takes the form of: <code>service-code</code>:<code>resource-code</code> </p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share this resource is associated with.</p>
    pub fn resource_share_arn(&self) -> std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource group. This value is available only if the resource is part of a resource group.</p>
    pub fn resource_group_arn(&self) -> std::option::Option<&str> {
        self.resource_group_arn.as_deref()
    }
    /// <p>The current status of the resource.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::ResourceStatus> {
        self.status.as_ref()
    }
    /// <p>A message about the status of the resource.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The date and time when the resource was associated with the resource share.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date an time when the association was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Specifies the scope of visibility of this resource:</p>
    /// <ul>
    /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
    /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn resource_region_scope(&self) -> std::option::Option<&crate::model::ResourceRegionScope> {
        self.resource_region_scope.as_ref()
    }
}
impl Resource {
    /// Creates a new builder-style object to manufacture [`Resource`](crate::model::Resource).
    pub fn builder() -> crate::model::resource::Builder {
        crate::model::resource::Builder::default()
    }
}

/// See [`Resource`](crate::model::Resource).
pub mod resource {

    /// A builder for [`Resource`](crate::model::Resource).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) r#type: std::option::Option<std::string::String>,
        pub(crate) resource_share_arn: std::option::Option<std::string::String>,
        pub(crate) resource_group_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ResourceStatus>,
        pub(crate) status_message: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) resource_region_scope: std::option::Option<crate::model::ResourceRegionScope>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The resource type. This takes the form of: <code>service-code</code>:<code>resource-code</code> </p>
        pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
            self.r#type = Some(input.into());
            self
        }
        /// <p>The resource type. This takes the form of: <code>service-code</code>:<code>resource-code</code> </p>
        pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share this resource is associated with.</p>
        pub fn resource_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource share this resource is associated with.</p>
        pub fn set_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_arn = input;
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource group. This value is available only if the resource is part of a resource group.</p>
        pub fn resource_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_group_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of the resource group. This value is available only if the resource is part of a resource group.</p>
        pub fn set_resource_group_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_group_arn = input;
            self
        }
        /// <p>The current status of the resource.</p>
        pub fn status(mut self, input: crate::model::ResourceStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the resource.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ResourceStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>A message about the status of the resource.</p>
        pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.status_message = Some(input.into());
            self
        }
        /// <p>A message about the status of the resource.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// <p>The date and time when the resource was associated with the resource share.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the resource was associated with the resource share.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date an time when the association was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date an time when the association was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Specifies the scope of visibility of this resource:</p>
        /// <ul>
        /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
        /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
        /// </ul>
        pub fn resource_region_scope(mut self, input: crate::model::ResourceRegionScope) -> Self {
            self.resource_region_scope = Some(input);
            self
        }
        /// <p>Specifies the scope of visibility of this resource:</p>
        /// <ul>
        /// <li> <p> <b>REGIONAL</b> – The resource can be accessed only by using requests that target the Amazon Web Services Region in which the resource exists.</p> </li>
        /// <li> <p> <b>GLOBAL</b> – The resource can be accessed from any Amazon Web Services Region.</p> </li>
        /// </ul>
        pub fn set_resource_region_scope(
            mut self,
            input: std::option::Option<crate::model::ResourceRegionScope>,
        ) -> Self {
            self.resource_region_scope = input;
            self
        }
        /// Consumes the builder and constructs a [`Resource`](crate::model::Resource).
        pub fn build(self) -> crate::model::Resource {
            crate::model::Resource {
                arn: self.arn,
                r#type: self.r#type,
                resource_share_arn: self.resource_share_arn,
                resource_group_arn: self.resource_group_arn,
                status: self.status,
                status_message: self.status_message,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                resource_region_scope: self.resource_region_scope,
            }
        }
    }
}

/// When writing a match expression against `ResourceStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourcestatus = unimplemented!();
/// match resourcestatus {
///     ResourceStatus::Available => { /* ... */ },
///     ResourceStatus::LimitExceeded => { /* ... */ },
///     ResourceStatus::Pending => { /* ... */ },
///     ResourceStatus::Unavailable => { /* ... */ },
///     ResourceStatus::ZonalResourceInaccessible => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourcestatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceStatus::NewFeature` is defined.
/// Specifically, when `resourcestatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceStatus {
    #[allow(missing_docs)] // documentation missing in model
    Available,
    #[allow(missing_docs)] // documentation missing in model
    LimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Pending,
    #[allow(missing_docs)] // documentation missing in model
    Unavailable,
    #[allow(missing_docs)] // documentation missing in model
    ZonalResourceInaccessible,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceStatus {
    fn from(s: &str) -> Self {
        match s {
            "AVAILABLE" => ResourceStatus::Available,
            "LIMIT_EXCEEDED" => ResourceStatus::LimitExceeded,
            "PENDING" => ResourceStatus::Pending,
            "UNAVAILABLE" => ResourceStatus::Unavailable,
            "ZONAL_RESOURCE_INACCESSIBLE" => ResourceStatus::ZonalResourceInaccessible,
            other => ResourceStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ResourceStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceStatus::from(s))
    }
}
impl ResourceStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceStatus::Available => "AVAILABLE",
            ResourceStatus::LimitExceeded => "LIMIT_EXCEEDED",
            ResourceStatus::Pending => "PENDING",
            ResourceStatus::Unavailable => "UNAVAILABLE",
            ResourceStatus::ZonalResourceInaccessible => "ZONAL_RESOURCE_INACCESSIBLE",
            ResourceStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AVAILABLE",
            "LIMIT_EXCEEDED",
            "PENDING",
            "UNAVAILABLE",
            "ZONAL_RESOURCE_INACCESSIBLE",
        ]
    }
}
impl AsRef<str> for ResourceStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `ResourceOwner`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let resourceowner = unimplemented!();
/// match resourceowner {
///     ResourceOwner::OtherAccounts => { /* ... */ },
///     ResourceOwner::SelfValue => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `resourceowner` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ResourceOwner::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ResourceOwner::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ResourceOwner::NewFeature` is defined.
/// Specifically, when `resourceowner` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ResourceOwner::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// _Note: `ResourceOwner::Self` has been renamed to `::SelfValue`._
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ResourceOwner {
    #[allow(missing_docs)] // documentation missing in model
    OtherAccounts,
    /// _Note: `::Self` has been renamed to `::SelfValue`._
    SelfValue,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ResourceOwner {
    fn from(s: &str) -> Self {
        match s {
            "OTHER-ACCOUNTS" => ResourceOwner::OtherAccounts,
            "SELF" => ResourceOwner::SelfValue,
            other => ResourceOwner::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ResourceOwner {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ResourceOwner::from(s))
    }
}
impl ResourceOwner {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ResourceOwner::OtherAccounts => "OTHER-ACCOUNTS",
            ResourceOwner::SelfValue => "SELF",
            ResourceOwner::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["OTHER-ACCOUNTS", "SELF"]
    }
}
impl AsRef<str> for ResourceOwner {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Describes a principal for use with Resource Access Manager.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Principal {
    /// <p>The ID of the principal.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of a resource share the principal is associated with.</p>
    #[doc(hidden)]
    pub resource_share_arn: std::option::Option<std::string::String>,
    /// <p>The date and time when the principal was associated with the resource share.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the association was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
    #[doc(hidden)]
    pub external: std::option::Option<bool>,
}
impl Principal {
    /// <p>The ID of the principal.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of a resource share the principal is associated with.</p>
    pub fn resource_share_arn(&self) -> std::option::Option<&str> {
        self.resource_share_arn.as_deref()
    }
    /// <p>The date and time when the principal was associated with the resource share.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the association was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
    pub fn external(&self) -> std::option::Option<bool> {
        self.external
    }
}
impl Principal {
    /// Creates a new builder-style object to manufacture [`Principal`](crate::model::Principal).
    pub fn builder() -> crate::model::principal::Builder {
        crate::model::principal::Builder::default()
    }
}

/// See [`Principal`](crate::model::Principal).
pub mod principal {

    /// A builder for [`Principal`](crate::model::Principal).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) resource_share_arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) external: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The ID of the principal.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The ID of the principal.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of a resource share the principal is associated with.</p>
        pub fn resource_share_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_share_arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of a resource share the principal is associated with.</p>
        pub fn set_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_share_arn = input;
            self
        }
        /// <p>The date and time when the principal was associated with the resource share.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the principal was associated with the resource share.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date and time when the association was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date and time when the association was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
        pub fn external(mut self, input: bool) -> Self {
            self.external = Some(input);
            self
        }
        /// <p>Indicates whether the principal belongs to the same organization in Organizations as the Amazon Web Services account that owns the resource share.</p>
        pub fn set_external(mut self, input: std::option::Option<bool>) -> Self {
            self.external = input;
            self
        }
        /// Consumes the builder and constructs a [`Principal`](crate::model::Principal).
        pub fn build(self) -> crate::model::Principal {
            crate::model::Principal {
                id: self.id,
                resource_share_arn: self.resource_share_arn,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                external: self.external,
            }
        }
    }
}

/// <p>A tag key and optional list of possible values that you can use to filter results for tagged resources.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagFilter {
    /// <p>The tag key. This must have a valid string value and can't be empty.</p>
    #[doc(hidden)]
    pub tag_key: std::option::Option<std::string::String>,
    /// <p>A list of zero or more tag values. If no values are provided, then the filter matches any tag with the specified key, regardless of its value.</p>
    #[doc(hidden)]
    pub tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl TagFilter {
    /// <p>The tag key. This must have a valid string value and can't be empty.</p>
    pub fn tag_key(&self) -> std::option::Option<&str> {
        self.tag_key.as_deref()
    }
    /// <p>A list of zero or more tag values. If no values are provided, then the filter matches any tag with the specified key, regardless of its value.</p>
    pub fn tag_values(&self) -> std::option::Option<&[std::string::String]> {
        self.tag_values.as_deref()
    }
}
impl TagFilter {
    /// Creates a new builder-style object to manufacture [`TagFilter`](crate::model::TagFilter).
    pub fn builder() -> crate::model::tag_filter::Builder {
        crate::model::tag_filter::Builder::default()
    }
}

/// See [`TagFilter`](crate::model::TagFilter).
pub mod tag_filter {

    /// A builder for [`TagFilter`](crate::model::TagFilter).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_key: std::option::Option<std::string::String>,
        pub(crate) tag_values: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The tag key. This must have a valid string value and can't be empty.</p>
        pub fn tag_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.tag_key = Some(input.into());
            self
        }
        /// <p>The tag key. This must have a valid string value and can't be empty.</p>
        pub fn set_tag_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.tag_key = input;
            self
        }
        /// Appends an item to `tag_values`.
        ///
        /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
        ///
        /// <p>A list of zero or more tag values. If no values are provided, then the filter matches any tag with the specified key, regardless of its value.</p>
        pub fn tag_values(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.tag_values.unwrap_or_default();
            v.push(input.into());
            self.tag_values = Some(v);
            self
        }
        /// <p>A list of zero or more tag values. If no values are provided, then the filter matches any tag with the specified key, regardless of its value.</p>
        pub fn set_tag_values(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.tag_values = input;
            self
        }
        /// Consumes the builder and constructs a [`TagFilter`](crate::model::TagFilter).
        pub fn build(self) -> crate::model::TagFilter {
            crate::model::TagFilter {
                tag_key: self.tag_key,
                tag_values: self.tag_values,
            }
        }
    }
}

/// <p>Information about an RAM permission.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceSharePermissionDetail {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of this RAM permission.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The version of the permission represented in this structure.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
    #[doc(hidden)]
    pub default_version: std::option::Option<bool>,
    /// <p>The name of this permission.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The resource type to which this permission applies.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<std::string::String>,
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    #[doc(hidden)]
    pub permission: std::option::Option<std::string::String>,
    /// <p>The date and time when the permission was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the permission was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
    #[doc(hidden)]
    pub is_resource_type_default: std::option::Option<bool>,
}
impl ResourceSharePermissionDetail {
    /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of this RAM permission.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The version of the permission represented in this structure.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
    pub fn default_version(&self) -> std::option::Option<bool> {
        self.default_version
    }
    /// <p>The name of this permission.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The resource type to which this permission applies.</p>
    pub fn resource_type(&self) -> std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
    pub fn permission(&self) -> std::option::Option<&str> {
        self.permission.as_deref()
    }
    /// <p>The date and time when the permission was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The date and time when the permission was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
    pub fn is_resource_type_default(&self) -> std::option::Option<bool> {
        self.is_resource_type_default
    }
}
impl ResourceSharePermissionDetail {
    /// Creates a new builder-style object to manufacture [`ResourceSharePermissionDetail`](crate::model::ResourceSharePermissionDetail).
    pub fn builder() -> crate::model::resource_share_permission_detail::Builder {
        crate::model::resource_share_permission_detail::Builder::default()
    }
}

/// See [`ResourceSharePermissionDetail`](crate::model::ResourceSharePermissionDetail).
pub mod resource_share_permission_detail {

    /// A builder for [`ResourceSharePermissionDetail`](crate::model::ResourceSharePermissionDetail).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) version: std::option::Option<std::string::String>,
        pub(crate) default_version: std::option::Option<bool>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) resource_type: std::option::Option<std::string::String>,
        pub(crate) permission: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) is_resource_type_default: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of this RAM permission.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resoure Name (ARN)</a> of this RAM permission.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The version of the permission represented in this structure.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        /// <p>The version of the permission represented in this structure.</p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
        pub fn default_version(mut self, input: bool) -> Self {
            self.default_version = Some(input);
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for this permission.</p>
        pub fn set_default_version(mut self, input: std::option::Option<bool>) -> Self {
            self.default_version = input;
            self
        }
        /// <p>The name of this permission.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of this permission.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The resource type to which this permission applies.</p>
        pub fn resource_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_type = Some(input.into());
            self
        }
        /// <p>The resource type to which this permission applies.</p>
        pub fn set_resource_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_type = input;
            self
        }
        /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
        pub fn permission(mut self, input: impl Into<std::string::String>) -> Self {
            self.permission = Some(input.into());
            self
        }
        /// <p>The permission's effect and actions in JSON format. The <code>effect</code> indicates whether the specified actions are allowed or denied. The <code>actions</code> list the operations to which the principal is granted or denied access.</p>
        pub fn set_permission(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.permission = input;
            self
        }
        /// <p>The date and time when the permission was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The date and time when the permission was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The date and time when the permission was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The date and time when the permission was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
        pub fn is_resource_type_default(mut self, input: bool) -> Self {
            self.is_resource_type_default = Some(input);
            self
        }
        /// <p>Specifies whether the version of the permission represented in this structure is the default version for all resources of this resource type.</p>
        pub fn set_is_resource_type_default(mut self, input: std::option::Option<bool>) -> Self {
            self.is_resource_type_default = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceSharePermissionDetail`](crate::model::ResourceSharePermissionDetail).
        pub fn build(self) -> crate::model::ResourceSharePermissionDetail {
            crate::model::ResourceSharePermissionDetail {
                arn: self.arn,
                version: self.version,
                default_version: self.default_version,
                name: self.name,
                resource_type: self.resource_type,
                permission: self.permission,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                is_resource_type_default: self.is_resource_type_default,
            }
        }
    }
}
