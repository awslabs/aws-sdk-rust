// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn idempotent_parameter_mismatch_exception_correct_errors(
    mut builder: crate::types::error::builders::IdempotentParameterMismatchExceptionBuilder,
) -> crate::types::error::builders::IdempotentParameterMismatchExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_client_token_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidClientTokenExceptionBuilder,
) -> crate::types::error::builders::InvalidClientTokenExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn malformed_arn_exception_correct_errors(
    mut builder: crate::types::error::builders::MalformedArnExceptionBuilder,
) -> crate::types::error::builders::MalformedArnExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn operation_not_permitted_exception_correct_errors(
    mut builder: crate::types::error::builders::OperationNotPermittedExceptionBuilder,
) -> crate::types::error::builders::OperationNotPermittedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_share_invitation_already_accepted_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceShareInvitationAlreadyAcceptedExceptionBuilder,
) -> crate::types::error::builders::ResourceShareInvitationAlreadyAcceptedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_share_invitation_already_rejected_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceShareInvitationAlreadyRejectedExceptionBuilder,
) -> crate::types::error::builders::ResourceShareInvitationAlreadyRejectedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_share_invitation_arn_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceShareInvitationArnNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceShareInvitationArnNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_share_invitation_expired_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceShareInvitationExpiredExceptionBuilder,
) -> crate::types::error::builders::ResourceShareInvitationExpiredExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn server_internal_exception_correct_errors(
    mut builder: crate::types::error::builders::ServerInternalExceptionBuilder,
) -> crate::types::error::builders::ServerInternalExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidParameterExceptionBuilder,
) -> crate::types::error::builders::InvalidParameterExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_state_transition_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidStateTransitionExceptionBuilder,
) -> crate::types::error::builders::InvalidStateTransitionExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_share_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceShareLimitExceededExceptionBuilder,
) -> crate::types::error::builders::ResourceShareLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn unknown_resource_exception_correct_errors(
    mut builder: crate::types::error::builders::UnknownResourceExceptionBuilder,
) -> crate::types::error::builders::UnknownResourceExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_policy_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidPolicyExceptionBuilder,
) -> crate::types::error::builders::InvalidPolicyExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn malformed_policy_template_exception_correct_errors(
    mut builder: crate::types::error::builders::MalformedPolicyTemplateExceptionBuilder,
) -> crate::types::error::builders::MalformedPolicyTemplateExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_already_exists_exception_correct_errors(
    mut builder: crate::types::error::builders::PermissionAlreadyExistsExceptionBuilder,
) -> crate::types::error::builders::PermissionAlreadyExistsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::PermissionLimitExceededExceptionBuilder,
) -> crate::types::error::builders::PermissionLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_versions_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::PermissionVersionsLimitExceededExceptionBuilder,
) -> crate::types::error::builders::PermissionVersionsLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_limit_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::TagLimitExceededExceptionBuilder,
) -> crate::types::error::builders::TagLimitExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_policy_violation_exception_correct_errors(
    mut builder: crate::types::error::builders::TagPolicyViolationExceptionBuilder,
) -> crate::types::error::builders::TagPolicyViolationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_next_token_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidNextTokenExceptionBuilder,
) -> crate::types::error::builders::InvalidNextTokenExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_arn_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceArnNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceArnNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_max_results_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidMaxResultsExceptionBuilder,
) -> crate::types::error::builders::InvalidMaxResultsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_required_parameter_exception_correct_errors(
    mut builder: crate::types::error::builders::MissingRequiredParameterExceptionBuilder,
) -> crate::types::error::builders::MissingRequiredParameterExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn invalid_resource_type_exception_correct_errors(
    mut builder: crate::types::error::builders::InvalidResourceTypeExceptionBuilder,
) -> crate::types::error::builders::InvalidResourceTypeExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn unmatched_policy_permission_exception_correct_errors(
    mut builder: crate::types::error::builders::UnmatchedPolicyPermissionExceptionBuilder,
) -> crate::types::error::builders::UnmatchedPolicyPermissionExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
