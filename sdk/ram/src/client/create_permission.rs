// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreatePermission`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::set_name):<br>required: **true**<br><p>Specifies the name of the customer managed permission. The name must be unique within the Amazon Web Services Region.</p><br>
    ///   - [`resource_type(impl Into<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::resource_type) / [`set_resource_type(Option<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::set_resource_type):<br>required: **true**<br><p>Specifies the name of the resource type that this customer managed permission applies to.</p>  <p>The format is <code> <i>    <service-code></service-code></i>:<i>    <resource-type></resource-type></i> </code> and is not case sensitive. For example, to specify an Amazon EC2 Subnet, you can use the string <code>ec2:subnet</code>. To see the list of valid values for this parameter, query the <code>ListResourceTypes</code> operation.</p><br>
    ///   - [`policy_template(impl Into<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::policy_template) / [`set_policy_template(Option<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::set_policy_template):<br>required: **true**<br><p>A string in JSON format string that contains the following elements of a resource-based policy:</p>  <ul>   <li> <p> <b>Effect</b>: must be set to <code>ALLOW</code>.</p> </li>   <li> <p> <b>Action</b>: specifies the actions that are allowed by this customer managed permission. The list must contain only actions that are supported by the specified resource type. For a list of all actions supported by each resource type, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the <i>Identity and Access Management User Guide</i>.</p> </li>   <li> <p> <b>Condition</b>: (optional) specifies conditional parameters that must evaluate to true when a user attempts an action for that action to be allowed. For more information about the Condition element, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition.html">IAM policies: Condition element</a> in the <i>Identity and Access Management User Guide</i>.</p> </li>  </ul>  <p>This template can't include either the <code>Resource</code> or <code>Principal</code> elements. Those are both filled in by RAM when it instantiates the resource-based policy on each resource shared using this managed permission. The <code>Resource</code> comes from the ARN of the specific resource that you are sharing. The <code>Principal</code> comes from the list of identities added to the resource share.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive identifier that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>  <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>  <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_permission::builders::CreatePermissionFluentBuilder::set_tags):<br>required: **false**<br><p>Specifies a list of one or more tag key and value pairs to attach to the permission.</p><br>
    /// - On success, responds with [`CreatePermissionOutput`](crate::operation::create_permission::CreatePermissionOutput) with field(s):
    ///   - [`permission(Option<ResourceSharePermissionSummary>)`](crate::operation::create_permission::CreatePermissionOutput::permission): <p>A structure with information about this customer managed permission.</p>
    ///   - [`client_token(Option<String>)`](crate::operation::create_permission::CreatePermissionOutput::client_token): <p>The idempotency identifier associated with this request. If you want to repeat the same operation in an idempotent manner then you must include this value in the <code>clientToken</code> request parameter of that later call. All other parameters must also have the same values that you used in the first call.</p>
    /// - On failure, responds with [`SdkError<CreatePermissionError>`](crate::operation::create_permission::CreatePermissionError)
    pub fn create_permission(&self) -> crate::operation::create_permission::builders::CreatePermissionFluentBuilder {
        crate::operation::create_permission::builders::CreatePermissionFluentBuilder::new(self.handle.clone())
    }
}
