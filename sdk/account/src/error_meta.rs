// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The operation failed because the calling identity doesn't have the minimum required permissions.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The operation failed because of an error internal to Amazon Web Services. Try your operation again later.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The operation failed because it specified a resource that can't be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The operation failed because it was called too frequently and exceeded a throttle limit.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The operation failed because one of the input parameters was invalid.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAlternateContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAlternateContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAlternateContactError> for Error {
    fn from(err: crate::error::DeleteAlternateContactError) -> Self {
        match err {
            crate::error::DeleteAlternateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAlternateContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAlternateContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAlternateContactError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteAlternateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAlternateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAlternateContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAlternateContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAlternateContactError> for Error {
    fn from(err: crate::error::GetAlternateContactError) -> Self {
        match err {
            crate::error::GetAlternateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAlternateContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAlternateContactError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAlternateContactError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAlternateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAlternateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetContactInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetContactInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetContactInformationError> for Error {
    fn from(err: crate::error::GetContactInformationError) -> Self {
        match err {
            crate::error::GetContactInformationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetContactInformationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetContactInformationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetContactInformationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetContactInformationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetContactInformationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAlternateContactError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutAlternateContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAlternateContactError> for Error {
    fn from(err: crate::error::PutAlternateContactError) -> Self {
        match err {
            crate::error::PutAlternateContactError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutAlternateContactError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutAlternateContactError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutAlternateContactError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutAlternateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutContactInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutContactInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutContactInformationError> for Error {
    fn from(err: crate::error::PutContactInformationError) -> Self {
        match err {
            crate::error::PutContactInformationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutContactInformationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutContactInformationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutContactInformationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutContactInformationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
