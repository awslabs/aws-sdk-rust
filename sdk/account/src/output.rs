// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutContactInformationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutContactInformationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutContactInformationOutput`](crate::output::PutContactInformationOutput).
pub mod put_contact_information_output {

    /// A builder for [`PutContactInformationOutput`](crate::output::PutContactInformationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutContactInformationOutput`](crate::output::PutContactInformationOutput).
        pub fn build(self) -> crate::output::PutContactInformationOutput {
            crate::output::PutContactInformationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutContactInformationOutput {
    /// Creates a new builder-style object to manufacture [`PutContactInformationOutput`](crate::output::PutContactInformationOutput).
    pub fn builder() -> crate::output::put_contact_information_output::Builder {
        crate::output::put_contact_information_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetContactInformationOutput {
    /// <p>Contains the details of the primary contact information associated with an Amazon Web Services account.</p>
    #[doc(hidden)]
    pub contact_information: std::option::Option<crate::model::ContactInformation>,
    _request_id: Option<String>,
}
impl GetContactInformationOutput {
    /// <p>Contains the details of the primary contact information associated with an Amazon Web Services account.</p>
    pub fn contact_information(&self) -> std::option::Option<&crate::model::ContactInformation> {
        self.contact_information.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetContactInformationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetContactInformationOutput`](crate::output::GetContactInformationOutput).
pub mod get_contact_information_output {

    /// A builder for [`GetContactInformationOutput`](crate::output::GetContactInformationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) contact_information: std::option::Option<crate::model::ContactInformation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Contains the details of the primary contact information associated with an Amazon Web Services account.</p>
        pub fn contact_information(mut self, input: crate::model::ContactInformation) -> Self {
            self.contact_information = Some(input);
            self
        }
        /// <p>Contains the details of the primary contact information associated with an Amazon Web Services account.</p>
        pub fn set_contact_information(
            mut self,
            input: std::option::Option<crate::model::ContactInformation>,
        ) -> Self {
            self.contact_information = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetContactInformationOutput`](crate::output::GetContactInformationOutput).
        pub fn build(self) -> crate::output::GetContactInformationOutput {
            crate::output::GetContactInformationOutput {
                contact_information: self.contact_information,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetContactInformationOutput {
    /// Creates a new builder-style object to manufacture [`GetContactInformationOutput`](crate::output::GetContactInformationOutput).
    pub fn builder() -> crate::output::get_contact_information_output::Builder {
        crate::output::get_contact_information_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutAlternateContactOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutAlternateContactOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput).
pub mod put_alternate_contact_output {

    /// A builder for [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput).
        pub fn build(self) -> crate::output::PutAlternateContactOutput {
            crate::output::PutAlternateContactOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput).
    pub fn builder() -> crate::output::put_alternate_contact_output::Builder {
        crate::output::put_alternate_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAlternateContactOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAlternateContactOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput).
pub mod delete_alternate_contact_output {

    /// A builder for [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput).
        pub fn build(self) -> crate::output::DeleteAlternateContactOutput {
            crate::output::DeleteAlternateContactOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput).
    pub fn builder() -> crate::output::delete_alternate_contact_output::Builder {
        crate::output::delete_alternate_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAlternateContactOutput {
    /// <p>A structure that contains the details for the specified alternate contact.</p>
    #[doc(hidden)]
    pub alternate_contact: std::option::Option<crate::model::AlternateContact>,
    _request_id: Option<String>,
}
impl GetAlternateContactOutput {
    /// <p>A structure that contains the details for the specified alternate contact.</p>
    pub fn alternate_contact(&self) -> std::option::Option<&crate::model::AlternateContact> {
        self.alternate_contact.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAlternateContactOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput).
pub mod get_alternate_contact_output {

    /// A builder for [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) alternate_contact: std::option::Option<crate::model::AlternateContact>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that contains the details for the specified alternate contact.</p>
        pub fn alternate_contact(mut self, input: crate::model::AlternateContact) -> Self {
            self.alternate_contact = Some(input);
            self
        }
        /// <p>A structure that contains the details for the specified alternate contact.</p>
        pub fn set_alternate_contact(
            mut self,
            input: std::option::Option<crate::model::AlternateContact>,
        ) -> Self {
            self.alternate_contact = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput).
        pub fn build(self) -> crate::output::GetAlternateContactOutput {
            crate::output::GetAlternateContactOutput {
                alternate_contact: self.alternate_contact,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput).
    pub fn builder() -> crate::output::get_alternate_contact_output::Builder {
        crate::output::get_alternate_contact_output::Builder::default()
    }
}
