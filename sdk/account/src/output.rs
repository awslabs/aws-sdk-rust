// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAlternateContactOutput {}
impl std::fmt::Debug for PutAlternateContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAlternateContactOutput");
        formatter.finish()
    }
}
/// See [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput)
pub mod put_alternate_contact_output {
    /// A builder for [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput)
        pub fn build(self) -> crate::output::PutAlternateContactOutput {
            crate::output::PutAlternateContactOutput {}
        }
    }
}
impl PutAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`PutAlternateContactOutput`](crate::output::PutAlternateContactOutput)
    pub fn builder() -> crate::output::put_alternate_contact_output::Builder {
        crate::output::put_alternate_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAlternateContactOutput {}
impl std::fmt::Debug for DeleteAlternateContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAlternateContactOutput");
        formatter.finish()
    }
}
/// See [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput)
pub mod delete_alternate_contact_output {
    /// A builder for [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput)
        pub fn build(self) -> crate::output::DeleteAlternateContactOutput {
            crate::output::DeleteAlternateContactOutput {}
        }
    }
}
impl DeleteAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAlternateContactOutput`](crate::output::DeleteAlternateContactOutput)
    pub fn builder() -> crate::output::delete_alternate_contact_output::Builder {
        crate::output::delete_alternate_contact_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAlternateContactOutput {
    /// <p>A structure that contains the details for the specified alternate contact.</p>
    pub alternate_contact: std::option::Option<crate::model::AlternateContact>,
}
impl std::fmt::Debug for GetAlternateContactOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAlternateContactOutput");
        formatter.field("alternate_contact", &self.alternate_contact);
        formatter.finish()
    }
}
/// See [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput)
pub mod get_alternate_contact_output {
    /// A builder for [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) alternate_contact: std::option::Option<crate::model::AlternateContact>,
    }
    impl Builder {
        /// <p>A structure that contains the details for the specified alternate contact.</p>
        pub fn alternate_contact(mut self, input: crate::model::AlternateContact) -> Self {
            self.alternate_contact = Some(input);
            self
        }
        /// <p>A structure that contains the details for the specified alternate contact.</p>
        pub fn set_alternate_contact(
            mut self,
            input: std::option::Option<crate::model::AlternateContact>,
        ) -> Self {
            self.alternate_contact = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput)
        pub fn build(self) -> crate::output::GetAlternateContactOutput {
            crate::output::GetAlternateContactOutput {
                alternate_contact: self.alternate_contact,
            }
        }
    }
}
impl GetAlternateContactOutput {
    /// Creates a new builder-style object to manufacture [`GetAlternateContactOutput`](crate::output::GetAlternateContactOutput)
    pub fn builder() -> crate::output::get_alternate_contact_output::Builder {
        crate::output::get_alternate_contact_output::Builder::default()
    }
}
