// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the specified alternate contact from an Amazon Web Services account.</p>
/// <p>For complete details about how to use the alternate contact operations, see <a href="https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-update-contact.html">Access or
/// updating the alternate contacts</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAlternateContact {
    _private: (),
}
impl DeleteAlternateContact {
    /// Creates a new builder-style object to manufacture [`DeleteAlternateContactInput`](crate::input::DeleteAlternateContactInput)
    pub fn builder() -> crate::input::delete_alternate_contact_input::Builder {
        crate::input::delete_alternate_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAlternateContact {
    type Output = std::result::Result<
        crate::output::DeleteAlternateContactOutput,
        crate::error::DeleteAlternateContactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_alternate_contact_error(response)
        } else {
            crate::operation_deser::parse_delete_alternate_contact_response(response)
        }
    }
}

/// <p>Retrieves the specified alternate contact attached to an Amazon Web Services account.</p>
/// <p>For complete details about how to use the alternate contact operations, see <a href="https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-update-contact.html">Access or
/// updating the alternate contacts</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAlternateContact {
    _private: (),
}
impl GetAlternateContact {
    /// Creates a new builder-style object to manufacture [`GetAlternateContactInput`](crate::input::GetAlternateContactInput)
    pub fn builder() -> crate::input::get_alternate_contact_input::Builder {
        crate::input::get_alternate_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAlternateContact {
    type Output = std::result::Result<
        crate::output::GetAlternateContactOutput,
        crate::error::GetAlternateContactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_alternate_contact_error(response)
        } else {
            crate::operation_deser::parse_get_alternate_contact_response(response)
        }
    }
}

/// <p>Modifies the specified alternate contact attached to an Amazon Web Services account.</p>
/// <p>For complete details about how to use the alternate contact operations, see <a href="https://docs.aws.amazon.com/accounts/latest/reference/manage-acct-update-contact.html">Access or
/// updating the alternate contacts</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutAlternateContact {
    _private: (),
}
impl PutAlternateContact {
    /// Creates a new builder-style object to manufacture [`PutAlternateContactInput`](crate::input::PutAlternateContactInput)
    pub fn builder() -> crate::input::put_alternate_contact_input::Builder {
        crate::input::put_alternate_contact_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutAlternateContact {
    type Output = std::result::Result<
        crate::output::PutAlternateContactOutput,
        crate::error::PutAlternateContactError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_alternate_contact_error(response)
        } else {
            crate::operation_deser::parse_put_alternate_contact_response(response)
        }
    }
}
