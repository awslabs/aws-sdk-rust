// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Recycle Bin
///
/// Client for invoking operations on Amazon Recycle Bin. Each operation on Amazon Recycle Bin is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_rbin::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_rbin::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_rbin::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateRule`](crate::client::fluent_builders::CreateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::CreateRule::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::CreateRule::set_retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateRule::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateRule::set_description): <p>The retention rule description.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRule::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRule::set_tags): <p>Information about the tags to assign to the retention rule.</p>
    ///   - [`resource_type(ResourceType)`](crate::client::fluent_builders::CreateRule::resource_type) / [`set_resource_type(Option<ResourceType>)`](crate::client::fluent_builders::CreateRule::set_resource_type): <p>The resource type to be retained by the retention rule. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To retain snapshots, specify <code>EBS_SNAPSHOT</code>. To retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.</p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::CreateRule::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::CreateRule::set_resource_tags): <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p>  <p>You can add the same tag key and value pair to a maximum or five retention rules.</p>  <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>
    ///   - [`lock_configuration(LockConfiguration)`](crate::client::fluent_builders::CreateRule::lock_configuration) / [`set_lock_configuration(Option<LockConfiguration>)`](crate::client::fluent_builders::CreateRule::set_lock_configuration): <p>Information about the retention rule lock configuration.</p>
    /// - On success, responds with [`CreateRuleOutput`](crate::output::CreateRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::output::CreateRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::CreateRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`description(Option<String>)`](crate::output::CreateRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::CreateRuleOutput::tags): <p>Information about the tags assigned to the retention rule.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::output::CreateRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::CreateRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::output::CreateRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_configuration(Option<LockConfiguration>)`](crate::output::CreateRuleOutput::lock_configuration): <p>Information about the retention rule lock configuration.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::output::CreateRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<CreateRuleError>`](crate::error::CreateRuleError)
    pub fn create_rule(&self) -> crate::client::fluent_builders::CreateRule {
        crate::client::fluent_builders::CreateRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRule`](crate::client::fluent_builders::DeleteRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::DeleteRule::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::DeleteRule::set_identifier): <p>The unique ID of the retention rule.</p>
    /// - On success, responds with [`DeleteRuleOutput`](crate::output::DeleteRuleOutput)

    /// - On failure, responds with [`SdkError<DeleteRuleError>`](crate::error::DeleteRuleError)
    pub fn delete_rule(&self) -> crate::client::fluent_builders::DeleteRule {
        crate::client::fluent_builders::DeleteRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRule`](crate::client::fluent_builders::GetRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::GetRule::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::GetRule::set_identifier): <p>The unique ID of the retention rule.</p>
    /// - On success, responds with [`GetRuleOutput`](crate::output::GetRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::output::GetRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`description(Option<String>)`](crate::output::GetRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::output::GetRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::GetRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::GetRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::output::GetRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_configuration(Option<LockConfiguration>)`](crate::output::GetRuleOutput::lock_configuration): <p>Information about the retention rule lock configuration.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::output::GetRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    ///   - [`lock_end_time(Option<DateTime>)`](crate::output::GetRuleOutput::lock_end_time): <p>The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.</p>
    /// - On failure, responds with [`SdkError<GetRuleError>`](crate::error::GetRuleError)
    pub fn get_rule(&self) -> crate::client::fluent_builders::GetRule {
        crate::client::fluent_builders::GetRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRules`](crate::client::fluent_builders::ListRules) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRules::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRules::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRules::set_max_results): <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRules::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRules::set_next_token): <p>The token for the next page of results.</p>
    ///   - [`resource_type(ResourceType)`](crate::client::fluent_builders::ListRules::resource_type) / [`set_resource_type(Option<ResourceType>)`](crate::client::fluent_builders::ListRules::set_resource_type): <p>The resource type retained by the retention rule. Only retention rules that retain the specified resource type are listed. Currently, only Amazon EBS snapshots and EBS-backed AMIs are supported. To list retention rules that retain snapshots, specify <code>EBS_SNAPSHOT</code>. To list retention rules that retain EBS-backed AMIs, specify <code>EC2_IMAGE</code>.</p>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::ListRules::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::ListRules::set_resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`lock_state(LockState)`](crate::client::fluent_builders::ListRules::lock_state) / [`set_lock_state(Option<LockState>)`](crate::client::fluent_builders::ListRules::set_lock_state): <p>The lock state of the retention rules to list. Only retention rules with the specified lock state are returned.</p>
    /// - On success, responds with [`ListRulesOutput`](crate::output::ListRulesOutput) with field(s):
    ///   - [`rules(Option<Vec<RuleSummary>>)`](crate::output::ListRulesOutput::rules): <p>Information about the retention rules.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRulesOutput::next_token): <p>The token to use to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListRulesError>`](crate::error::ListRulesError)
    pub fn list_rules(&self) -> crate::client::fluent_builders::ListRules {
        crate::client::fluent_builders::ListRules::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the retention rule.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>Information about the tags assigned to the retention rule.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`LockRule`](crate::client::fluent_builders::LockRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::LockRule::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::LockRule::set_identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`lock_configuration(LockConfiguration)`](crate::client::fluent_builders::LockRule::lock_configuration) / [`set_lock_configuration(Option<LockConfiguration>)`](crate::client::fluent_builders::LockRule::set_lock_configuration): <p>Information about the retention rule lock configuration.</p>
    /// - On success, responds with [`LockRuleOutput`](crate::output::LockRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::output::LockRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`description(Option<String>)`](crate::output::LockRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::output::LockRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::LockRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::LockRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::output::LockRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_configuration(Option<LockConfiguration>)`](crate::output::LockRuleOutput::lock_configuration): <p>Information about the retention rule lock configuration.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::output::LockRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<LockRuleError>`](crate::error::LockRuleError)
    pub fn lock_rule(&self) -> crate::client::fluent_builders::LockRule {
        crate::client::fluent_builders::LockRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the retention rule.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>Information about the tags to assign to the retention rule.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UnlockRule`](crate::client::fluent_builders::UnlockRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::UnlockRule::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::UnlockRule::set_identifier): <p>The unique ID of the retention rule.</p>
    /// - On success, responds with [`UnlockRuleOutput`](crate::output::UnlockRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::output::UnlockRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`description(Option<String>)`](crate::output::UnlockRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::output::UnlockRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::UnlockRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::UnlockRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::output::UnlockRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_configuration(Option<LockConfiguration>)`](crate::output::UnlockRuleOutput::lock_configuration): <p>Information about the retention rule lock configuration.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::output::UnlockRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    ///   - [`lock_end_time(Option<DateTime>)`](crate::output::UnlockRuleOutput::lock_end_time): <p>The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.</p>
    /// - On failure, responds with [`SdkError<UnlockRuleError>`](crate::error::UnlockRuleError)
    pub fn unlock_rule(&self) -> crate::client::fluent_builders::UnlockRule {
        crate::client::fluent_builders::UnlockRule::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the retention rule.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys of the tags to unassign. All tags that have the specified tag key are unassigned.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRule`](crate::client::fluent_builders::UpdateRule) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::client::fluent_builders::UpdateRule::identifier) / [`set_identifier(Option<String>)`](crate::client::fluent_builders::UpdateRule::set_identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`retention_period(RetentionPeriod)`](crate::client::fluent_builders::UpdateRule::retention_period) / [`set_retention_period(Option<RetentionPeriod>)`](crate::client::fluent_builders::UpdateRule::set_retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateRule::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateRule::set_description): <p>The retention rule description.</p>
    ///   - [`resource_type(ResourceType)`](crate::client::fluent_builders::UpdateRule::resource_type) / [`set_resource_type(Option<ResourceType>)`](crate::client::fluent_builders::UpdateRule::set_resource_type): <note>   <p>This parameter is currently not supported. You can't update a retention rule's resource type after creation.</p>  </note>
    ///   - [`resource_tags(Vec<ResourceTag>)`](crate::client::fluent_builders::UpdateRule::resource_tags) / [`set_resource_tags(Option<Vec<ResourceTag>>)`](crate::client::fluent_builders::UpdateRule::set_resource_tags): <p>Specifies the resource tags to use to identify resources that are to be retained by a tag-level retention rule. For tag-level retention rules, only deleted resources, of the specified resource type, that have one or more of the specified tag key and value pairs are retained. If a resource is deleted, but it does not have any of the specified tag key and value pairs, it is immediately deleted without being retained by the retention rule.</p>  <p>You can add the same tag key and value pair to a maximum or five retention rules.</p>  <p>To create a Region-level retention rule, omit this parameter. A Region-level retention rule does not have any resource tags specified. It retains all deleted resources of the specified resource type in the Region in which the rule is created, even if the resources are not tagged.</p>
    /// - On success, responds with [`UpdateRuleOutput`](crate::output::UpdateRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::output::UpdateRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::output::UpdateRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`description(Option<String>)`](crate::output::UpdateRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::output::UpdateRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`resource_tags(Option<Vec<ResourceTag>>)`](crate::output::UpdateRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::output::UpdateRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::output::UpdateRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    ///   - [`lock_end_time(Option<DateTime>)`](crate::output::UpdateRuleOutput::lock_end_time): <p>The date and time at which the unlock delay is set to expire. Only returned for retention rules that have been unlocked and that are still within the unlock delay period.</p>
    /// - On failure, responds with [`SdkError<UpdateRuleError>`](crate::error::UpdateRuleError)
    pub fn update_rule(&self) -> crate::client::fluent_builders::UpdateRule {
        crate::client::fluent_builders::UpdateRule::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
