// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`LockRule`](crate::operation::lock_rule::builders::LockRuleFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`identifier(impl Into<String>)`](crate::operation::lock_rule::builders::LockRuleFluentBuilder::identifier) / [`set_identifier(Option<String>)`](crate::operation::lock_rule::builders::LockRuleFluentBuilder::set_identifier):<br>required: **true**<br><p>The unique ID of the retention rule.</p><br>
    ///   - [`lock_configuration(LockConfiguration)`](crate::operation::lock_rule::builders::LockRuleFluentBuilder::lock_configuration) / [`set_lock_configuration(Option<LockConfiguration>)`](crate::operation::lock_rule::builders::LockRuleFluentBuilder::set_lock_configuration):<br>required: **true**<br><p>Information about the retention rule lock configuration.</p><br>
    /// - On success, responds with [`LockRuleOutput`](crate::operation::lock_rule::LockRuleOutput) with field(s):
    ///   - [`identifier(Option<String>)`](crate::operation::lock_rule::LockRuleOutput::identifier): <p>The unique ID of the retention rule.</p>
    ///   - [`description(Option<String>)`](crate::operation::lock_rule::LockRuleOutput::description): <p>The retention rule description.</p>
    ///   - [`resource_type(Option<ResourceType>)`](crate::operation::lock_rule::LockRuleOutput::resource_type): <p>The resource type retained by the retention rule.</p>
    ///   - [`retention_period(Option<RetentionPeriod>)`](crate::operation::lock_rule::LockRuleOutput::retention_period): <p>Information about the retention period for which the retention rule is to retain resources.</p>
    ///   - [`resource_tags(Option<Vec::<ResourceTag>>)`](crate::operation::lock_rule::LockRuleOutput::resource_tags): <p>Information about the resource tags used to identify resources that are retained by the retention rule.</p>
    ///   - [`status(Option<RuleStatus>)`](crate::operation::lock_rule::LockRuleOutput::status): <p>The state of the retention rule. Only retention rules that are in the <code>available</code> state retain resources.</p>
    ///   - [`lock_configuration(Option<LockConfiguration>)`](crate::operation::lock_rule::LockRuleOutput::lock_configuration): <p>Information about the retention rule lock configuration.</p>
    ///   - [`lock_state(Option<LockState>)`](crate::operation::lock_rule::LockRuleOutput::lock_state): <p>The lock state for the retention rule.</p>  <ul>   <li> <p> <code>locked</code> - The retention rule is locked and can't be modified or deleted.</p> </li>   <li> <p> <code>pending_unlock</code> - The retention rule has been unlocked but it is still within the unlock delay period. The retention rule can be modified or deleted only after the unlock delay period has expired.</p> </li>   <li> <p> <code>unlocked</code> - The retention rule is unlocked and it can be modified or deleted by any user with the required permissions.</p> </li>   <li> <p> <code>null</code> - The retention rule has never been locked. Once a retention rule has been locked, it can transition between the <code>locked</code> and <code>unlocked</code> states only; it can never transition back to <code>null</code>.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<LockRuleError>`](crate::operation::lock_rule::LockRuleError)
    pub fn lock_rule(&self) -> crate::operation::lock_rule::builders::LockRuleFluentBuilder {
        crate::operation::lock_rule::builders::LockRuleFluentBuilder::new(self.handle.clone())
    }
}
