// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a retention rule lock configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LockConfiguration {
    /// <p>Information about the retention rule unlock delay.</p>
    pub unlock_delay: ::std::option::Option<crate::types::UnlockDelay>,
}
impl LockConfiguration {
    /// <p>Information about the retention rule unlock delay.</p>
    pub fn unlock_delay(&self) -> ::std::option::Option<&crate::types::UnlockDelay> {
        self.unlock_delay.as_ref()
    }
}
impl LockConfiguration {
    /// Creates a new builder-style object to manufacture [`LockConfiguration`](crate::types::LockConfiguration).
    pub fn builder() -> crate::types::builders::LockConfigurationBuilder {
        crate::types::builders::LockConfigurationBuilder::default()
    }
}

/// A builder for [`LockConfiguration`](crate::types::LockConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LockConfigurationBuilder {
    pub(crate) unlock_delay: ::std::option::Option<crate::types::UnlockDelay>,
}
impl LockConfigurationBuilder {
    /// <p>Information about the retention rule unlock delay.</p>
    /// This field is required.
    pub fn unlock_delay(mut self, input: crate::types::UnlockDelay) -> Self {
        self.unlock_delay = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the retention rule unlock delay.</p>
    pub fn set_unlock_delay(mut self, input: ::std::option::Option<crate::types::UnlockDelay>) -> Self {
        self.unlock_delay = input;
        self
    }
    /// <p>Information about the retention rule unlock delay.</p>
    pub fn get_unlock_delay(&self) -> &::std::option::Option<crate::types::UnlockDelay> {
        &self.unlock_delay
    }
    /// Consumes the builder and constructs a [`LockConfiguration`](crate::types::LockConfiguration).
    pub fn build(self) -> crate::types::LockConfiguration {
        crate::types::LockConfiguration {
            unlock_delay: self.unlock_delay,
        }
    }
}
