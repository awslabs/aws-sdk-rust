// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the S3 object that a finding applies to.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3Object {
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    pub bucket_arn: ::std::option::Option<::std::string::String>,
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    pub e_tag: ::std::option::Option<::std::string::String>,
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    pub extension: ::std::option::Option<::std::string::String>,
    /// <p>The full name (<i>key</i>) of the object, including the object's prefix if applicable.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    pub last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The full path to the affected object, including the name of the affected bucket and the object's name (key).</p>
    pub path: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    pub public_access: ::std::option::Option<bool>,
    /// <p>The type of server-side encryption that was used to encrypt the object.</p>
    pub server_side_encryption: ::std::option::Option<crate::types::ServerSideEncryption>,
    /// <p>The total storage size, in bytes, of the object.</p>
    pub size: ::std::option::Option<i64>,
    /// <p>The storage class of the object.</p>
    pub storage_class: ::std::option::Option<crate::types::StorageClass>,
    /// <p>The tags that are associated with the object.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>,
    /// <p>The identifier for the affected version of the object.</p>
    pub version_id: ::std::option::Option<::std::string::String>,
}
impl S3Object {
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    pub fn bucket_arn(&self) -> ::std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    pub fn e_tag(&self) -> ::std::option::Option<&str> {
        self.e_tag.as_deref()
    }
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    pub fn extension(&self) -> ::std::option::Option<&str> {
        self.extension.as_deref()
    }
    /// <p>The full name (<i>key</i>) of the object, including the object's prefix if applicable.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    pub fn last_modified(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified.as_ref()
    }
    /// <p>The full path to the affected object, including the name of the affected bucket and the object's name (key).</p>
    pub fn path(&self) -> ::std::option::Option<&str> {
        self.path.as_deref()
    }
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    pub fn public_access(&self) -> ::std::option::Option<bool> {
        self.public_access
    }
    /// <p>The type of server-side encryption that was used to encrypt the object.</p>
    pub fn server_side_encryption(&self) -> ::std::option::Option<&crate::types::ServerSideEncryption> {
        self.server_side_encryption.as_ref()
    }
    /// <p>The total storage size, in bytes, of the object.</p>
    pub fn size(&self) -> ::std::option::Option<i64> {
        self.size
    }
    /// <p>The storage class of the object.</p>
    pub fn storage_class(&self) -> ::std::option::Option<&crate::types::StorageClass> {
        self.storage_class.as_ref()
    }
    /// <p>The tags that are associated with the object.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::KeyValuePair] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The identifier for the affected version of the object.</p>
    pub fn version_id(&self) -> ::std::option::Option<&str> {
        self.version_id.as_deref()
    }
}
impl S3Object {
    /// Creates a new builder-style object to manufacture [`S3Object`](crate::types::S3Object).
    pub fn builder() -> crate::types::builders::S3ObjectBuilder {
        crate::types::builders::S3ObjectBuilder::default()
    }
}

/// A builder for [`S3Object`](crate::types::S3Object).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ObjectBuilder {
    pub(crate) bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) e_tag: ::std::option::Option<::std::string::String>,
    pub(crate) extension: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) public_access: ::std::option::Option<bool>,
    pub(crate) server_side_encryption: ::std::option::Option<crate::types::ServerSideEncryption>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) storage_class: ::std::option::Option<crate::types::StorageClass>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>,
    pub(crate) version_id: ::std::option::Option<::std::string::String>,
}
impl S3ObjectBuilder {
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    pub fn bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    pub fn set_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket that contains the object.</p>
    pub fn get_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_arn
    }
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    pub fn e_tag(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.e_tag = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    pub fn set_e_tag(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.e_tag = input;
        self
    }
    /// <p>The entity tag (ETag) that identifies the affected version of the object. If the object was overwritten or changed after Amazon Macie produced the finding, this value might be different from the current ETag for the object.</p>
    pub fn get_e_tag(&self) -> &::std::option::Option<::std::string::String> {
        &self.e_tag
    }
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    pub fn extension(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.extension = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    pub fn set_extension(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.extension = input;
        self
    }
    /// <p>The file name extension of the object. If the object doesn't have a file name extension, this value is "".</p>
    pub fn get_extension(&self) -> &::std::option::Option<::std::string::String> {
        &self.extension
    }
    /// <p>The full name (<i>key</i>) of the object, including the object's prefix if applicable.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full name (<i>key</i>) of the object, including the object's prefix if applicable.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The full name (<i>key</i>) of the object, including the object's prefix if applicable.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    pub fn last_modified(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    pub fn set_last_modified(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the object was last modified.</p>
    pub fn get_last_modified(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified
    }
    /// <p>The full path to the affected object, including the name of the affected bucket and the object's name (key).</p>
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The full path to the affected object, including the name of the affected bucket and the object's name (key).</p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p>The full path to the affected object, including the name of the affected bucket and the object's name (key).</p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    pub fn public_access(mut self, input: bool) -> Self {
        self.public_access = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    pub fn set_public_access(mut self, input: ::std::option::Option<bool>) -> Self {
        self.public_access = input;
        self
    }
    /// <p>Specifies whether the object is publicly accessible due to the combination of permissions settings that apply to the object.</p>
    pub fn get_public_access(&self) -> &::std::option::Option<bool> {
        &self.public_access
    }
    /// <p>The type of server-side encryption that was used to encrypt the object.</p>
    pub fn server_side_encryption(mut self, input: crate::types::ServerSideEncryption) -> Self {
        self.server_side_encryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of server-side encryption that was used to encrypt the object.</p>
    pub fn set_server_side_encryption(mut self, input: ::std::option::Option<crate::types::ServerSideEncryption>) -> Self {
        self.server_side_encryption = input;
        self
    }
    /// <p>The type of server-side encryption that was used to encrypt the object.</p>
    pub fn get_server_side_encryption(&self) -> &::std::option::Option<crate::types::ServerSideEncryption> {
        &self.server_side_encryption
    }
    /// <p>The total storage size, in bytes, of the object.</p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total storage size, in bytes, of the object.</p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p>The total storage size, in bytes, of the object.</p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// <p>The storage class of the object.</p>
    pub fn storage_class(mut self, input: crate::types::StorageClass) -> Self {
        self.storage_class = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage class of the object.</p>
    pub fn set_storage_class(mut self, input: ::std::option::Option<crate::types::StorageClass>) -> Self {
        self.storage_class = input;
        self
    }
    /// <p>The storage class of the object.</p>
    pub fn get_storage_class(&self) -> &::std::option::Option<crate::types::StorageClass> {
        &self.storage_class
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that are associated with the object.</p>
    pub fn tags(mut self, input: crate::types::KeyValuePair) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags that are associated with the object.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that are associated with the object.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KeyValuePair>> {
        &self.tags
    }
    /// <p>The identifier for the affected version of the object.</p>
    pub fn version_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the affected version of the object.</p>
    pub fn set_version_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version_id = input;
        self
    }
    /// <p>The identifier for the affected version of the object.</p>
    pub fn get_version_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.version_id
    }
    /// Consumes the builder and constructs a [`S3Object`](crate::types::S3Object).
    pub fn build(self) -> crate::types::S3Object {
        crate::types::S3Object {
            bucket_arn: self.bucket_arn,
            e_tag: self.e_tag,
            extension: self.extension,
            key: self.key,
            last_modified: self.last_modified,
            path: self.path,
            public_access: self.public_access,
            server_side_encryption: self.server_side_encryption,
            size: self.size,
            storage_class: self.storage_class,
            tags: self.tags,
            version_id: self.version_id,
        }
    }
}
