// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a property-based filter condition that determines which Amazon Web Services resources are included or excluded from the query results.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchResourcesSimpleCriterion {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub comparator: ::std::option::Option<crate::types::SearchResourcesComparator>,
    /// <p>The property to use in the condition.</p>
    pub key: ::std::option::Option<crate::types::SearchResourcesSimpleCriterionKey>,
    /// <p>An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.</p></li>
    /// <li><p>S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission">BucketPublicAccess.effectivePermission</a> property of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_NAME - A string that represents the name of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess">BucketMetadata.sharedAccess</a> property of an S3 bucket.</p></li>
    /// </ul>
    /// <p>Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SearchResourcesSimpleCriterion {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(&self) -> ::std::option::Option<&crate::types::SearchResourcesComparator> {
        self.comparator.as_ref()
    }
    /// <p>The property to use in the condition.</p>
    pub fn key(&self) -> ::std::option::Option<&crate::types::SearchResourcesSimpleCriterionKey> {
        self.key.as_ref()
    }
    /// <p>An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.</p></li>
    /// <li><p>S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission">BucketPublicAccess.effectivePermission</a> property of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_NAME - A string that represents the name of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess">BucketMetadata.sharedAccess</a> property of an S3 bucket.</p></li>
    /// </ul>
    /// <p>Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl SearchResourcesSimpleCriterion {
    /// Creates a new builder-style object to manufacture [`SearchResourcesSimpleCriterion`](crate::types::SearchResourcesSimpleCriterion).
    pub fn builder() -> crate::types::builders::SearchResourcesSimpleCriterionBuilder {
        crate::types::builders::SearchResourcesSimpleCriterionBuilder::default()
    }
}

/// A builder for [`SearchResourcesSimpleCriterion`](crate::types::SearchResourcesSimpleCriterion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchResourcesSimpleCriterionBuilder {
    pub(crate) comparator: ::std::option::Option<crate::types::SearchResourcesComparator>,
    pub(crate) key: ::std::option::Option<crate::types::SearchResourcesSimpleCriterionKey>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SearchResourcesSimpleCriterionBuilder {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(mut self, input: crate::types::SearchResourcesComparator) -> Self {
        self.comparator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn set_comparator(mut self, input: ::std::option::Option<crate::types::SearchResourcesComparator>) -> Self {
        self.comparator = input;
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn get_comparator(&self) -> &::std::option::Option<crate::types::SearchResourcesComparator> {
        &self.comparator
    }
    /// <p>The property to use in the condition.</p>
    pub fn key(mut self, input: crate::types::SearchResourcesSimpleCriterionKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The property to use in the condition.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::SearchResourcesSimpleCriterionKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The property to use in the condition.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::SearchResourcesSimpleCriterionKey> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.</p></li>
    /// <li><p>S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission">BucketPublicAccess.effectivePermission</a> property of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_NAME - A string that represents the name of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess">BucketMetadata.sharedAccess</a> property of an S3 bucket.</p></li>
    /// </ul>
    /// <p>Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.</p></li>
    /// <li><p>S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission">BucketPublicAccess.effectivePermission</a> property of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_NAME - A string that represents the name of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess">BucketMetadata.sharedAccess</a> property of an S3 bucket.</p></li>
    /// </ul>
    /// <p>Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>An array that lists one or more values to use in the condition. If you specify multiple values, Amazon Macie uses OR logic to join the values. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>ACCOUNT_ID - A string that represents the unique identifier for the Amazon Web Services account that owns the resource.</p></li>
    /// <li><p>S3_BUCKET_EFFECTIVE_PERMISSION - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketpublicaccess-effectivepermission">BucketPublicAccess.effectivePermission</a> property of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_NAME - A string that represents the name of an S3 bucket.</p></li>
    /// <li><p>S3_BUCKET_SHARED_ACCESS - A string that represents an enumerated value that Macie defines for the <a href="https://docs.aws.amazon.com/macie/latest/APIReference/datasources-s3.html#datasources-s3-prop-bucketmetadata-sharedaccess">BucketMetadata.sharedAccess</a> property of an S3 bucket.</p></li>
    /// </ul>
    /// <p>Values are case sensitive. Also, Macie doesn't support use of partial values or wildcard characters in values.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`SearchResourcesSimpleCriterion`](crate::types::SearchResourcesSimpleCriterion).
    pub fn build(self) -> crate::types::SearchResourcesSimpleCriterion {
        crate::types::SearchResourcesSimpleCriterion {
            comparator: self.comparator,
            key: self.key,
            values: self.values,
        }
    }
}
