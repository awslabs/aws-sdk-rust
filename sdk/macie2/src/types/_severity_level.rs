// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a severity level for findings that a custom data identifier produces. A severity level determines which severity is assigned to the findings, based on the number of occurrences of text that matches the custom data identifier's detection criteria.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SeverityLevel {
    /// <p>The minimum number of occurrences of text that must match the custom data identifier's detection criteria in order to produce a finding with the specified severity (severity).</p>
    #[doc(hidden)]
    pub occurrences_threshold: i64,
    /// <p>The severity to assign to a finding: if the number of occurrences is greater than or equal to the specified threshold (occurrencesThreshold); and, if applicable, the number of occurrences is less than the threshold for the next consecutive severity level for the custom data identifier, moving from LOW to HIGH.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::DataIdentifierSeverity>,
}
impl SeverityLevel {
    /// <p>The minimum number of occurrences of text that must match the custom data identifier's detection criteria in order to produce a finding with the specified severity (severity).</p>
    pub fn occurrences_threshold(&self) -> i64 {
        self.occurrences_threshold
    }
    /// <p>The severity to assign to a finding: if the number of occurrences is greater than or equal to the specified threshold (occurrencesThreshold); and, if applicable, the number of occurrences is less than the threshold for the next consecutive severity level for the custom data identifier, moving from LOW to HIGH.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::DataIdentifierSeverity> {
        self.severity.as_ref()
    }
}
impl SeverityLevel {
    /// Creates a new builder-style object to manufacture [`SeverityLevel`](crate::types::SeverityLevel).
    pub fn builder() -> crate::types::builders::SeverityLevelBuilder {
        crate::types::builders::SeverityLevelBuilder::default()
    }
}

/// A builder for [`SeverityLevel`](crate::types::SeverityLevel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SeverityLevelBuilder {
    pub(crate) occurrences_threshold: std::option::Option<i64>,
    pub(crate) severity: std::option::Option<crate::types::DataIdentifierSeverity>,
}
impl SeverityLevelBuilder {
    /// <p>The minimum number of occurrences of text that must match the custom data identifier's detection criteria in order to produce a finding with the specified severity (severity).</p>
    pub fn occurrences_threshold(mut self, input: i64) -> Self {
        self.occurrences_threshold = Some(input);
        self
    }
    /// <p>The minimum number of occurrences of text that must match the custom data identifier's detection criteria in order to produce a finding with the specified severity (severity).</p>
    pub fn set_occurrences_threshold(mut self, input: std::option::Option<i64>) -> Self {
        self.occurrences_threshold = input;
        self
    }
    /// <p>The severity to assign to a finding: if the number of occurrences is greater than or equal to the specified threshold (occurrencesThreshold); and, if applicable, the number of occurrences is less than the threshold for the next consecutive severity level for the custom data identifier, moving from LOW to HIGH.</p>
    pub fn severity(mut self, input: crate::types::DataIdentifierSeverity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity to assign to a finding: if the number of occurrences is greater than or equal to the specified threshold (occurrencesThreshold); and, if applicable, the number of occurrences is less than the threshold for the next consecutive severity level for the custom data identifier, moving from LOW to HIGH.</p>
    pub fn set_severity(
        mut self,
        input: std::option::Option<crate::types::DataIdentifierSeverity>,
    ) -> Self {
        self.severity = input;
        self
    }
    /// Consumes the builder and constructs a [`SeverityLevel`](crate::types::SeverityLevel).
    pub fn build(self) -> crate::types::SeverityLevel {
        crate::types::SeverityLevel {
            occurrences_threshold: self.occurrences_threshold.unwrap_or_default(),
            severity: self.severity,
        }
    }
}
