// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the number of S3 buckets that use certain types of server-side encryption by default or don't encrypt new objects by default. For detailed information about these settings, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-encryption.html">Setting default server-side encryption behavior for Amazon S3 buckets</a> in the <i>Amazon Simple Storage Service User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketCountByEncryptionType {
    /// <p>The total number of buckets that use an KMS key to encrypt new objects by default, either an Amazon Web Services managed key or a customer managed key. These buckets use KMS encryption (SSE-KMS) by default.</p>
    #[doc(hidden)]
    pub kms_managed: i64,
    /// <p>The total number of buckets that use an Amazon S3 managed key to encrypt new objects by default. These buckets use Amazon S3 managed encryption (SSE-S3) by default.</p>
    #[doc(hidden)]
    pub s3_managed: i64,
    /// <p>The total number of buckets that don't encrypt new objects by default. Default encryption is disabled for these buckets.</p>
    #[doc(hidden)]
    pub unencrypted: i64,
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    #[doc(hidden)]
    pub unknown: i64,
}
impl BucketCountByEncryptionType {
    /// <p>The total number of buckets that use an KMS key to encrypt new objects by default, either an Amazon Web Services managed key or a customer managed key. These buckets use KMS encryption (SSE-KMS) by default.</p>
    pub fn kms_managed(&self) -> i64 {
        self.kms_managed
    }
    /// <p>The total number of buckets that use an Amazon S3 managed key to encrypt new objects by default. These buckets use Amazon S3 managed encryption (SSE-S3) by default.</p>
    pub fn s3_managed(&self) -> i64 {
        self.s3_managed
    }
    /// <p>The total number of buckets that don't encrypt new objects by default. Default encryption is disabled for these buckets.</p>
    pub fn unencrypted(&self) -> i64 {
        self.unencrypted
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn unknown(&self) -> i64 {
        self.unknown
    }
}
impl BucketCountByEncryptionType {
    /// Creates a new builder-style object to manufacture [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
    pub fn builder() -> crate::types::builders::BucketCountByEncryptionTypeBuilder {
        crate::types::builders::BucketCountByEncryptionTypeBuilder::default()
    }
}

/// A builder for [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketCountByEncryptionTypeBuilder {
    pub(crate) kms_managed: std::option::Option<i64>,
    pub(crate) s3_managed: std::option::Option<i64>,
    pub(crate) unencrypted: std::option::Option<i64>,
    pub(crate) unknown: std::option::Option<i64>,
}
impl BucketCountByEncryptionTypeBuilder {
    /// <p>The total number of buckets that use an KMS key to encrypt new objects by default, either an Amazon Web Services managed key or a customer managed key. These buckets use KMS encryption (SSE-KMS) by default.</p>
    pub fn kms_managed(mut self, input: i64) -> Self {
        self.kms_managed = Some(input);
        self
    }
    /// <p>The total number of buckets that use an KMS key to encrypt new objects by default, either an Amazon Web Services managed key or a customer managed key. These buckets use KMS encryption (SSE-KMS) by default.</p>
    pub fn set_kms_managed(mut self, input: std::option::Option<i64>) -> Self {
        self.kms_managed = input;
        self
    }
    /// <p>The total number of buckets that use an Amazon S3 managed key to encrypt new objects by default. These buckets use Amazon S3 managed encryption (SSE-S3) by default.</p>
    pub fn s3_managed(mut self, input: i64) -> Self {
        self.s3_managed = Some(input);
        self
    }
    /// <p>The total number of buckets that use an Amazon S3 managed key to encrypt new objects by default. These buckets use Amazon S3 managed encryption (SSE-S3) by default.</p>
    pub fn set_s3_managed(mut self, input: std::option::Option<i64>) -> Self {
        self.s3_managed = input;
        self
    }
    /// <p>The total number of buckets that don't encrypt new objects by default. Default encryption is disabled for these buckets.</p>
    pub fn unencrypted(mut self, input: i64) -> Self {
        self.unencrypted = Some(input);
        self
    }
    /// <p>The total number of buckets that don't encrypt new objects by default. Default encryption is disabled for these buckets.</p>
    pub fn set_unencrypted(mut self, input: std::option::Option<i64>) -> Self {
        self.unencrypted = input;
        self
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn unknown(mut self, input: i64) -> Self {
        self.unknown = Some(input);
        self
    }
    /// <p>The total number of buckets that Amazon Macie doesn't have current encryption metadata for. Macie can't provide current data about the default encryption settings for these buckets.</p>
    pub fn set_unknown(mut self, input: std::option::Option<i64>) -> Self {
        self.unknown = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketCountByEncryptionType`](crate::types::BucketCountByEncryptionType).
    pub fn build(self) -> crate::types::BucketCountByEncryptionType {
        crate::types::BucketCountByEncryptionType {
            kms_managed: self.kms_managed.unwrap_or_default(),
            s3_managed: self.s3_managed.unwrap_or_default(),
            unencrypted: self.unencrypted.unwrap_or_default(),
            unknown: self.unknown.unwrap_or_default(),
        }
    }
}
