// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides aggregated statistical data for sensitive data discovery metrics that apply to S3 buckets, grouped by bucket sensitivity score (sensitivityScore). If automated sensitive data discovery is currently disabled for your account, the value for each metric is 0.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketStatisticsBySensitivity {
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of -1.</p>
    #[doc(hidden)]
    pub classification_error: std::option::Option<crate::types::SensitivityAggregations>,
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 50.</p>
    #[doc(hidden)]
    pub not_classified: std::option::Option<crate::types::SensitivityAggregations>,
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 0-49.</p>
    #[doc(hidden)]
    pub not_sensitive: std::option::Option<crate::types::SensitivityAggregations>,
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 51-100.</p>
    #[doc(hidden)]
    pub sensitive: std::option::Option<crate::types::SensitivityAggregations>,
}
impl BucketStatisticsBySensitivity {
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of -1.</p>
    pub fn classification_error(
        &self,
    ) -> std::option::Option<&crate::types::SensitivityAggregations> {
        self.classification_error.as_ref()
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 50.</p>
    pub fn not_classified(&self) -> std::option::Option<&crate::types::SensitivityAggregations> {
        self.not_classified.as_ref()
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 0-49.</p>
    pub fn not_sensitive(&self) -> std::option::Option<&crate::types::SensitivityAggregations> {
        self.not_sensitive.as_ref()
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 51-100.</p>
    pub fn sensitive(&self) -> std::option::Option<&crate::types::SensitivityAggregations> {
        self.sensitive.as_ref()
    }
}
impl BucketStatisticsBySensitivity {
    /// Creates a new builder-style object to manufacture [`BucketStatisticsBySensitivity`](crate::types::BucketStatisticsBySensitivity).
    pub fn builder() -> crate::types::builders::BucketStatisticsBySensitivityBuilder {
        crate::types::builders::BucketStatisticsBySensitivityBuilder::default()
    }
}

/// A builder for [`BucketStatisticsBySensitivity`](crate::types::BucketStatisticsBySensitivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketStatisticsBySensitivityBuilder {
    pub(crate) classification_error: std::option::Option<crate::types::SensitivityAggregations>,
    pub(crate) not_classified: std::option::Option<crate::types::SensitivityAggregations>,
    pub(crate) not_sensitive: std::option::Option<crate::types::SensitivityAggregations>,
    pub(crate) sensitive: std::option::Option<crate::types::SensitivityAggregations>,
}
impl BucketStatisticsBySensitivityBuilder {
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of -1.</p>
    pub fn classification_error(mut self, input: crate::types::SensitivityAggregations) -> Self {
        self.classification_error = Some(input);
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of -1.</p>
    pub fn set_classification_error(
        mut self,
        input: std::option::Option<crate::types::SensitivityAggregations>,
    ) -> Self {
        self.classification_error = input;
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 50.</p>
    pub fn not_classified(mut self, input: crate::types::SensitivityAggregations) -> Self {
        self.not_classified = Some(input);
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 50.</p>
    pub fn set_not_classified(
        mut self,
        input: std::option::Option<crate::types::SensitivityAggregations>,
    ) -> Self {
        self.not_classified = input;
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 0-49.</p>
    pub fn not_sensitive(mut self, input: crate::types::SensitivityAggregations) -> Self {
        self.not_sensitive = Some(input);
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 0-49.</p>
    pub fn set_not_sensitive(
        mut self,
        input: std::option::Option<crate::types::SensitivityAggregations>,
    ) -> Self {
        self.not_sensitive = input;
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 51-100.</p>
    pub fn sensitive(mut self, input: crate::types::SensitivityAggregations) -> Self {
        self.sensitive = Some(input);
        self
    }
    /// <p>The aggregated statistical data for all buckets that have a sensitivity score of 51-100.</p>
    pub fn set_sensitive(
        mut self,
        input: std::option::Option<crate::types::SensitivityAggregations>,
    ) -> Self {
        self.sensitive = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketStatisticsBySensitivity`](crate::types::BucketStatisticsBySensitivity).
    pub fn build(self) -> crate::types::BucketStatisticsBySensitivity {
        crate::types::BucketStatisticsBySensitivity {
            classification_error: self.classification_error,
            not_classified: self.not_classified,
            not_sensitive: self.not_sensitive,
            sensitive: self.sensitive,
        }
    }
}
