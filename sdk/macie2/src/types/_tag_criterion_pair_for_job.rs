// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a tag key, a tag value, or a tag key and value (as a pair) to use in a tag-based condition that determines whether an S3 bucket is included or excluded from a classification job. Tag keys and values are case sensitive. Also, Amazon Macie doesn't support use of partial values or wildcard characters in tag-based conditions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagCriterionPairForJob {
    /// <p>The value for the tag key to use in the condition.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The tag value to use in the condition.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl TagCriterionPairForJob {
    /// <p>The value for the tag key to use in the condition.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The tag value to use in the condition.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl TagCriterionPairForJob {
    /// Creates a new builder-style object to manufacture [`TagCriterionPairForJob`](crate::types::TagCriterionPairForJob).
    pub fn builder() -> crate::types::builders::TagCriterionPairForJobBuilder {
        crate::types::builders::TagCriterionPairForJobBuilder::default()
    }
}

/// A builder for [`TagCriterionPairForJob`](crate::types::TagCriterionPairForJob).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TagCriterionPairForJobBuilder {
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl TagCriterionPairForJobBuilder {
    /// <p>The value for the tag key to use in the condition.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The value for the tag key to use in the condition.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The tag value to use in the condition.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The tag value to use in the condition.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`TagCriterionPairForJob`](crate::types::TagCriterionPairForJob).
    pub fn build(self) -> crate::types::TagCriterionPairForJob {
        crate::types::TagCriterionPairForJob {
            key: self.key,
            value: self.value,
        }
    }
}
