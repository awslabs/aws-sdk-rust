// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies one or more property- and tag-based conditions that define criteria for including or excluding S3 objects from a classification job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobScopingBlock {
    /// <p>An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
    pub and: ::std::option::Option<::std::vec::Vec<crate::types::JobScopeTerm>>,
}
impl JobScopingBlock {
    /// <p>An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.and.is_none()`.
    pub fn and(&self) -> &[crate::types::JobScopeTerm] {
        self.and.as_deref().unwrap_or_default()
    }
}
impl JobScopingBlock {
    /// Creates a new builder-style object to manufacture [`JobScopingBlock`](crate::types::JobScopingBlock).
    pub fn builder() -> crate::types::builders::JobScopingBlockBuilder {
        crate::types::builders::JobScopingBlockBuilder::default()
    }
}

/// A builder for [`JobScopingBlock`](crate::types::JobScopingBlock).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobScopingBlockBuilder {
    pub(crate) and: ::std::option::Option<::std::vec::Vec<crate::types::JobScopeTerm>>,
}
impl JobScopingBlockBuilder {
    /// Appends an item to `and`.
    ///
    /// To override the contents of this collection use [`set_and`](Self::set_and).
    ///
    /// <p>An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
    pub fn and(mut self, input: crate::types::JobScopeTerm) -> Self {
        let mut v = self.and.unwrap_or_default();
        v.push(input);
        self.and = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
    pub fn set_and(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JobScopeTerm>>) -> Self {
        self.and = input;
        self
    }
    /// <p>An array of conditions, one for each property- or tag-based condition that determines which objects to include or exclude from the job. If you specify more than one condition, Amazon Macie uses AND logic to join the conditions.</p>
    pub fn get_and(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JobScopeTerm>> {
        &self.and
    }
    /// Consumes the builder and constructs a [`JobScopingBlock`](crate::types::JobScopingBlock).
    pub fn build(self) -> crate::types::JobScopingBlock {
        crate::types::JobScopingBlock { and: self.and }
    }
}
