// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the details of a finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Finding {
    /// <p>The unique identifier for the Amazon Web Services account that the finding applies to. This is typically the account that owns the affected resource.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the finding is archived (suppressed).</p>
    #[doc(hidden)]
    pub archived: bool,
    /// <p>The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.</p>
    #[doc(hidden)]
    pub category: std::option::Option<crate::types::FindingCategory>,
    /// <p>The details of a sensitive data finding. This value is null for a policy finding.</p>
    #[doc(hidden)]
    pub classification_details: std::option::Option<crate::types::ClassificationDetails>,
    /// <p>The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered unique.</p>
    #[doc(hidden)]
    pub count: i64,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie created the finding.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the finding.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services partition that Amazon Macie created the finding in.</p>
    #[doc(hidden)]
    pub partition: std::option::Option<std::string::String>,
    /// <p>The details of a policy finding. This value is null for a sensitive data finding.</p>
    #[doc(hidden)]
    pub policy_details: std::option::Option<crate::types::PolicyDetails>,
    /// <p>The Amazon Web Services Region that Amazon Macie created the finding in.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The resources that the finding applies to.</p>
    #[doc(hidden)]
    pub resources_affected: std::option::Option<crate::types::ResourcesAffected>,
    /// <p>Specifies whether the finding is a sample finding. A <i>sample finding</i> is a finding that uses example data to demonstrate what a finding might contain.</p>
    #[doc(hidden)]
    pub sample: bool,
    /// <p>The version of the schema that was used to define the data structures in the finding.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
    /// <p>The severity level and score for the finding.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::Severity>,
    /// <p>The brief description of the finding.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The type of the finding.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::FindingType>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie last updated the finding. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl Finding {
    /// <p>The unique identifier for the Amazon Web Services account that the finding applies to. This is typically the account that owns the affected resource.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Specifies whether the finding is archived (suppressed).</p>
    pub fn archived(&self) -> bool {
        self.archived
    }
    /// <p>The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.</p>
    pub fn category(&self) -> std::option::Option<&crate::types::FindingCategory> {
        self.category.as_ref()
    }
    /// <p>The details of a sensitive data finding. This value is null for a policy finding.</p>
    pub fn classification_details(
        &self,
    ) -> std::option::Option<&crate::types::ClassificationDetails> {
        self.classification_details.as_ref()
    }
    /// <p>The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered unique.</p>
    pub fn count(&self) -> i64 {
        self.count
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie created the finding.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The description of the finding.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The Amazon Web Services partition that Amazon Macie created the finding in.</p>
    pub fn partition(&self) -> std::option::Option<&str> {
        self.partition.as_deref()
    }
    /// <p>The details of a policy finding. This value is null for a sensitive data finding.</p>
    pub fn policy_details(&self) -> std::option::Option<&crate::types::PolicyDetails> {
        self.policy_details.as_ref()
    }
    /// <p>The Amazon Web Services Region that Amazon Macie created the finding in.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The resources that the finding applies to.</p>
    pub fn resources_affected(&self) -> std::option::Option<&crate::types::ResourcesAffected> {
        self.resources_affected.as_ref()
    }
    /// <p>Specifies whether the finding is a sample finding. A <i>sample finding</i> is a finding that uses example data to demonstrate what a finding might contain.</p>
    pub fn sample(&self) -> bool {
        self.sample
    }
    /// <p>The version of the schema that was used to define the data structures in the finding.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
    /// <p>The severity level and score for the finding.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
    /// <p>The brief description of the finding.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The type of the finding.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::FindingType> {
        self.r#type.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie last updated the finding. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl Finding {
    /// Creates a new builder-style object to manufacture [`Finding`](crate::types::Finding).
    pub fn builder() -> crate::types::builders::FindingBuilder {
        crate::types::builders::FindingBuilder::default()
    }
}

/// A builder for [`Finding`](crate::types::Finding).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FindingBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) archived: std::option::Option<bool>,
    pub(crate) category: std::option::Option<crate::types::FindingCategory>,
    pub(crate) classification_details: std::option::Option<crate::types::ClassificationDetails>,
    pub(crate) count: std::option::Option<i64>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) partition: std::option::Option<std::string::String>,
    pub(crate) policy_details: std::option::Option<crate::types::PolicyDetails>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) resources_affected: std::option::Option<crate::types::ResourcesAffected>,
    pub(crate) sample: std::option::Option<bool>,
    pub(crate) schema_version: std::option::Option<std::string::String>,
    pub(crate) severity: std::option::Option<crate::types::Severity>,
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::FindingType>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl FindingBuilder {
    /// <p>The unique identifier for the Amazon Web Services account that the finding applies to. This is typically the account that owns the affected resource.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Web Services account that the finding applies to. This is typically the account that owns the affected resource.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Specifies whether the finding is archived (suppressed).</p>
    pub fn archived(mut self, input: bool) -> Self {
        self.archived = Some(input);
        self
    }
    /// <p>Specifies whether the finding is archived (suppressed).</p>
    pub fn set_archived(mut self, input: std::option::Option<bool>) -> Self {
        self.archived = input;
        self
    }
    /// <p>The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.</p>
    pub fn category(mut self, input: crate::types::FindingCategory) -> Self {
        self.category = Some(input);
        self
    }
    /// <p>The category of the finding. Possible values are: CLASSIFICATION, for a sensitive data finding; and, POLICY, for a policy finding.</p>
    pub fn set_category(
        mut self,
        input: std::option::Option<crate::types::FindingCategory>,
    ) -> Self {
        self.category = input;
        self
    }
    /// <p>The details of a sensitive data finding. This value is null for a policy finding.</p>
    pub fn classification_details(mut self, input: crate::types::ClassificationDetails) -> Self {
        self.classification_details = Some(input);
        self
    }
    /// <p>The details of a sensitive data finding. This value is null for a policy finding.</p>
    pub fn set_classification_details(
        mut self,
        input: std::option::Option<crate::types::ClassificationDetails>,
    ) -> Self {
        self.classification_details = input;
        self
    }
    /// <p>The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered unique.</p>
    pub fn count(mut self, input: i64) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The total number of occurrences of the finding. For sensitive data findings, this value is always 1. All sensitive data findings are considered unique.</p>
    pub fn set_count(mut self, input: std::option::Option<i64>) -> Self {
        self.count = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie created the finding.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie created the finding.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The description of the finding.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the finding.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the finding. This is a random string that Amazon Macie generates and assigns to a finding when it creates the finding.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The Amazon Web Services partition that Amazon Macie created the finding in.</p>
    pub fn partition(mut self, input: impl Into<std::string::String>) -> Self {
        self.partition = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services partition that Amazon Macie created the finding in.</p>
    pub fn set_partition(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.partition = input;
        self
    }
    /// <p>The details of a policy finding. This value is null for a sensitive data finding.</p>
    pub fn policy_details(mut self, input: crate::types::PolicyDetails) -> Self {
        self.policy_details = Some(input);
        self
    }
    /// <p>The details of a policy finding. This value is null for a sensitive data finding.</p>
    pub fn set_policy_details(
        mut self,
        input: std::option::Option<crate::types::PolicyDetails>,
    ) -> Self {
        self.policy_details = input;
        self
    }
    /// <p>The Amazon Web Services Region that Amazon Macie created the finding in.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region that Amazon Macie created the finding in.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The resources that the finding applies to.</p>
    pub fn resources_affected(mut self, input: crate::types::ResourcesAffected) -> Self {
        self.resources_affected = Some(input);
        self
    }
    /// <p>The resources that the finding applies to.</p>
    pub fn set_resources_affected(
        mut self,
        input: std::option::Option<crate::types::ResourcesAffected>,
    ) -> Self {
        self.resources_affected = input;
        self
    }
    /// <p>Specifies whether the finding is a sample finding. A <i>sample finding</i> is a finding that uses example data to demonstrate what a finding might contain.</p>
    pub fn sample(mut self, input: bool) -> Self {
        self.sample = Some(input);
        self
    }
    /// <p>Specifies whether the finding is a sample finding. A <i>sample finding</i> is a finding that uses example data to demonstrate what a finding might contain.</p>
    pub fn set_sample(mut self, input: std::option::Option<bool>) -> Self {
        self.sample = input;
        self
    }
    /// <p>The version of the schema that was used to define the data structures in the finding.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>The version of the schema that was used to define the data structures in the finding.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// <p>The severity level and score for the finding.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity level and score for the finding.</p>
    pub fn set_severity(mut self, input: std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The brief description of the finding.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The brief description of the finding.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The type of the finding.</p>
    pub fn r#type(mut self, input: crate::types::FindingType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the finding.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::FindingType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie last updated the finding. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie last updated the finding. For sensitive data findings, this value is the same as the value for the createdAt property. All sensitive data findings are considered new.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`Finding`](crate::types::Finding).
    pub fn build(self) -> crate::types::Finding {
        crate::types::Finding {
            account_id: self.account_id,
            archived: self.archived.unwrap_or_default(),
            category: self.category,
            classification_details: self.classification_details,
            count: self.count.unwrap_or_default(),
            created_at: self.created_at,
            description: self.description,
            id: self.id,
            partition: self.partition,
            policy_details: self.policy_details,
            region: self.region,
            resources_affected: self.resources_affected,
            sample: self.sample.unwrap_or_default(),
            schema_version: self.schema_version,
            severity: self.severity,
            title: self.title,
            r#type: self.r#type,
            updated_at: self.updated_at,
        }
    }
}
