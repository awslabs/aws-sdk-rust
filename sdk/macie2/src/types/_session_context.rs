// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a session that was created for an entity that performed an action by using temporary security credentials.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SessionContext {
    /// <p>The date and time when the credentials were issued, and whether the credentials were authenticated with a multi-factor authentication (MFA) device.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<crate::types::SessionContextAttributes>,
    /// <p>The source and type of credentials that were issued to the entity.</p>
    #[doc(hidden)]
    pub session_issuer: std::option::Option<crate::types::SessionIssuer>,
}
impl SessionContext {
    /// <p>The date and time when the credentials were issued, and whether the credentials were authenticated with a multi-factor authentication (MFA) device.</p>
    pub fn attributes(&self) -> std::option::Option<&crate::types::SessionContextAttributes> {
        self.attributes.as_ref()
    }
    /// <p>The source and type of credentials that were issued to the entity.</p>
    pub fn session_issuer(&self) -> std::option::Option<&crate::types::SessionIssuer> {
        self.session_issuer.as_ref()
    }
}
impl SessionContext {
    /// Creates a new builder-style object to manufacture [`SessionContext`](crate::types::SessionContext).
    pub fn builder() -> crate::types::builders::SessionContextBuilder {
        crate::types::builders::SessionContextBuilder::default()
    }
}

/// A builder for [`SessionContext`](crate::types::SessionContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SessionContextBuilder {
    pub(crate) attributes: std::option::Option<crate::types::SessionContextAttributes>,
    pub(crate) session_issuer: std::option::Option<crate::types::SessionIssuer>,
}
impl SessionContextBuilder {
    /// <p>The date and time when the credentials were issued, and whether the credentials were authenticated with a multi-factor authentication (MFA) device.</p>
    pub fn attributes(mut self, input: crate::types::SessionContextAttributes) -> Self {
        self.attributes = Some(input);
        self
    }
    /// <p>The date and time when the credentials were issued, and whether the credentials were authenticated with a multi-factor authentication (MFA) device.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<crate::types::SessionContextAttributes>,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The source and type of credentials that were issued to the entity.</p>
    pub fn session_issuer(mut self, input: crate::types::SessionIssuer) -> Self {
        self.session_issuer = Some(input);
        self
    }
    /// <p>The source and type of credentials that were issued to the entity.</p>
    pub fn set_session_issuer(
        mut self,
        input: std::option::Option<crate::types::SessionIssuer>,
    ) -> Self {
        self.session_issuer = input;
        self
    }
    /// Consumes the builder and constructs a [`SessionContext`](crate::types::SessionContext).
    pub fn build(self) -> crate::types::SessionContext {
        crate::types::SessionContext {
            attributes: self.attributes,
            session_issuer: self.session_issuer,
        }
    }
}
