// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the names of the S3 buckets that are excluded from automated sensitive data discovery.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3ClassificationScopeExclusion {
    /// <p>An array of strings, one for each S3 bucket that is excluded. Each string is the full name of an excluded bucket.</p>
    #[doc(hidden)]
    pub bucket_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl S3ClassificationScopeExclusion {
    /// <p>An array of strings, one for each S3 bucket that is excluded. Each string is the full name of an excluded bucket.</p>
    pub fn bucket_names(&self) -> std::option::Option<&[std::string::String]> {
        self.bucket_names.as_deref()
    }
}
impl S3ClassificationScopeExclusion {
    /// Creates a new builder-style object to manufacture [`S3ClassificationScopeExclusion`](crate::types::S3ClassificationScopeExclusion).
    pub fn builder() -> crate::types::builders::S3ClassificationScopeExclusionBuilder {
        crate::types::builders::S3ClassificationScopeExclusionBuilder::default()
    }
}

/// A builder for [`S3ClassificationScopeExclusion`](crate::types::S3ClassificationScopeExclusion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ClassificationScopeExclusionBuilder {
    pub(crate) bucket_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl S3ClassificationScopeExclusionBuilder {
    /// Appends an item to `bucket_names`.
    ///
    /// To override the contents of this collection use [`set_bucket_names`](Self::set_bucket_names).
    ///
    /// <p>An array of strings, one for each S3 bucket that is excluded. Each string is the full name of an excluded bucket.</p>
    pub fn bucket_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.bucket_names.unwrap_or_default();
        v.push(input.into());
        self.bucket_names = Some(v);
        self
    }
    /// <p>An array of strings, one for each S3 bucket that is excluded. Each string is the full name of an excluded bucket.</p>
    pub fn set_bucket_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.bucket_names = input;
        self
    }
    /// Consumes the builder and constructs a [`S3ClassificationScopeExclusion`](crate::types::S3ClassificationScopeExclusion).
    pub fn build(self) -> crate::types::S3ClassificationScopeExclusion {
        crate::types::S3ClassificationScopeExclusion {
            bucket_names: self.bucket_names,
        }
    }
}
