// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a property-based condition that determines whether an S3 object is included or excluded from a classification job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SimpleScopeTerm {
    /// <p>The operator to use in the condition. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - EQ (equals) or NE (not equals)</p></li>
    /// <li><p>OBJECT_KEY - STARTS_WITH</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - Any operator except CONTAINS</p></li>
    /// <li><p>OBJECT_SIZE - Any operator except CONTAINS</p></li>
    /// </ul>
    pub comparator: ::std::option::Option<crate::types::JobComparator>,
    /// <p>The object property to use in the condition.</p>
    pub key: ::std::option::Option<crate::types::ScopeFilterKey>,
    /// <p>An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value.</p>
    /// <p>Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf</p></li>
    /// <li><p>OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2020-09-28T14:31:13Z</p></li>
    /// <li><p>OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.</p></li>
    /// </ul>
    /// <p>Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.</p>
    pub values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SimpleScopeTerm {
    /// <p>The operator to use in the condition. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - EQ (equals) or NE (not equals)</p></li>
    /// <li><p>OBJECT_KEY - STARTS_WITH</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - Any operator except CONTAINS</p></li>
    /// <li><p>OBJECT_SIZE - Any operator except CONTAINS</p></li>
    /// </ul>
    pub fn comparator(&self) -> ::std::option::Option<&crate::types::JobComparator> {
        self.comparator.as_ref()
    }
    /// <p>The object property to use in the condition.</p>
    pub fn key(&self) -> ::std::option::Option<&crate::types::ScopeFilterKey> {
        self.key.as_ref()
    }
    /// <p>An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value.</p>
    /// <p>Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf</p></li>
    /// <li><p>OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2020-09-28T14:31:13Z</p></li>
    /// <li><p>OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.</p></li>
    /// </ul>
    /// <p>Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.values.is_none()`.
    pub fn values(&self) -> &[::std::string::String] {
        self.values.as_deref().unwrap_or_default()
    }
}
impl SimpleScopeTerm {
    /// Creates a new builder-style object to manufacture [`SimpleScopeTerm`](crate::types::SimpleScopeTerm).
    pub fn builder() -> crate::types::builders::SimpleScopeTermBuilder {
        crate::types::builders::SimpleScopeTermBuilder::default()
    }
}

/// A builder for [`SimpleScopeTerm`](crate::types::SimpleScopeTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SimpleScopeTermBuilder {
    pub(crate) comparator: ::std::option::Option<crate::types::JobComparator>,
    pub(crate) key: ::std::option::Option<crate::types::ScopeFilterKey>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SimpleScopeTermBuilder {
    /// <p>The operator to use in the condition. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - EQ (equals) or NE (not equals)</p></li>
    /// <li><p>OBJECT_KEY - STARTS_WITH</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - Any operator except CONTAINS</p></li>
    /// <li><p>OBJECT_SIZE - Any operator except CONTAINS</p></li>
    /// </ul>
    pub fn comparator(mut self, input: crate::types::JobComparator) -> Self {
        self.comparator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use in the condition. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - EQ (equals) or NE (not equals)</p></li>
    /// <li><p>OBJECT_KEY - STARTS_WITH</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - Any operator except CONTAINS</p></li>
    /// <li><p>OBJECT_SIZE - Any operator except CONTAINS</p></li>
    /// </ul>
    pub fn set_comparator(mut self, input: ::std::option::Option<crate::types::JobComparator>) -> Self {
        self.comparator = input;
        self
    }
    /// <p>The operator to use in the condition. Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - EQ (equals) or NE (not equals)</p></li>
    /// <li><p>OBJECT_KEY - STARTS_WITH</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - Any operator except CONTAINS</p></li>
    /// <li><p>OBJECT_SIZE - Any operator except CONTAINS</p></li>
    /// </ul>
    pub fn get_comparator(&self) -> &::std::option::Option<crate::types::JobComparator> {
        &self.comparator
    }
    /// <p>The object property to use in the condition.</p>
    pub fn key(mut self, input: crate::types::ScopeFilterKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The object property to use in the condition.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::ScopeFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The object property to use in the condition.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::ScopeFilterKey> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value.</p>
    /// <p>Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf</p></li>
    /// <li><p>OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2020-09-28T14:31:13Z</p></li>
    /// <li><p>OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.</p></li>
    /// </ul>
    /// <p>Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.</p>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value.</p>
    /// <p>Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf</p></li>
    /// <li><p>OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2020-09-28T14:31:13Z</p></li>
    /// <li><p>OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.</p></li>
    /// </ul>
    /// <p>Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.</p>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>An array that lists the values to use in the condition. If the value for the key property is OBJECT_EXTENSION or OBJECT_KEY, this array can specify multiple values and Amazon Macie uses OR logic to join the values. Otherwise, this array can specify only one value.</p>
    /// <p>Valid values for each supported property (key) are:</p>
    /// <ul>
    /// <li><p>OBJECT_EXTENSION - A string that represents the file name extension of an object. For example: docx or pdf</p></li>
    /// <li><p>OBJECT_KEY - A string that represents the key prefix (folder name or path) of an object. For example: logs or awslogs/eventlogs. This value applies a condition to objects whose keys (names) begin with the specified value.</p></li>
    /// <li><p>OBJECT_LAST_MODIFIED_DATE - The date and time (in UTC and extended ISO 8601 format) when an object was created or last changed, whichever is latest. For example: 2020-09-28T14:31:13Z</p></li>
    /// <li><p>OBJECT_SIZE - An integer that represents the storage size (in bytes) of an object.</p></li>
    /// </ul>
    /// <p>Macie doesn't support use of wildcard characters in these values. Also, string values are case sensitive.</p>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// Consumes the builder and constructs a [`SimpleScopeTerm`](crate::types::SimpleScopeTerm).
    pub fn build(self) -> crate::types::SimpleScopeTerm {
        crate::types::SimpleScopeTerm {
            comparator: self.comparator,
            key: self.key,
            values: self.values,
        }
    }
}
