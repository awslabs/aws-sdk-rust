// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a tag-based filter condition that determines which Amazon Web Services resources are included or excluded from the query results.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchResourcesTagCriterion {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    #[doc(hidden)]
    pub comparator: std::option::Option<crate::types::SearchResourcesComparator>,
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    #[doc(hidden)]
    pub tag_values:
        std::option::Option<std::vec::Vec<crate::types::SearchResourcesTagCriterionPair>>,
}
impl SearchResourcesTagCriterion {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(&self) -> std::option::Option<&crate::types::SearchResourcesComparator> {
        self.comparator.as_ref()
    }
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn tag_values(
        &self,
    ) -> std::option::Option<&[crate::types::SearchResourcesTagCriterionPair]> {
        self.tag_values.as_deref()
    }
}
impl SearchResourcesTagCriterion {
    /// Creates a new builder-style object to manufacture [`SearchResourcesTagCriterion`](crate::types::SearchResourcesTagCriterion).
    pub fn builder() -> crate::types::builders::SearchResourcesTagCriterionBuilder {
        crate::types::builders::SearchResourcesTagCriterionBuilder::default()
    }
}

/// A builder for [`SearchResourcesTagCriterion`](crate::types::SearchResourcesTagCriterion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchResourcesTagCriterionBuilder {
    pub(crate) comparator: std::option::Option<crate::types::SearchResourcesComparator>,
    pub(crate) tag_values:
        std::option::Option<std::vec::Vec<crate::types::SearchResourcesTagCriterionPair>>,
}
impl SearchResourcesTagCriterionBuilder {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(mut self, input: crate::types::SearchResourcesComparator) -> Self {
        self.comparator = Some(input);
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn set_comparator(
        mut self,
        input: std::option::Option<crate::types::SearchResourcesComparator>,
    ) -> Self {
        self.comparator = input;
        self
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn tag_values(mut self, input: crate::types::SearchResourcesTagCriterionPair) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input);
        self.tag_values = Some(v);
        self
    }
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn set_tag_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SearchResourcesTagCriterionPair>>,
    ) -> Self {
        self.tag_values = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchResourcesTagCriterion`](crate::types::SearchResourcesTagCriterion).
    pub fn build(self) -> crate::types::SearchResourcesTagCriterion {
        crate::types::SearchResourcesTagCriterion {
            comparator: self.comparator,
            tag_values: self.tag_values,
        }
    }
}
