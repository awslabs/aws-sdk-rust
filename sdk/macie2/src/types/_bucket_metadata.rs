// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides statistical data and other information about an S3 bucket that Amazon Macie monitors and analyzes for your account. If an error occurs when Macie attempts to retrieve and process metadata from Amazon S3 for the bucket and the bucket's objects, the value for the versioning property is false and the value for most other properties is null. Key exceptions are accountId, bucketArn, bucketCreatedAt, bucketName, lastUpdated, and region. To identify the cause of the error, refer to the errorCode and errorMessage values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketMetadata {
    /// <p>The unique identifier for the Amazon Web Services account that owns the bucket.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are uploaded to the bucket. Possible values are:</p>
    /// <ul>
    /// <li><p>FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.</p></li>
    /// <li><p>TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.</p></li>
    /// </ul>
    /// <p>Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.</p>
    #[doc(hidden)]
    pub allows_unencrypted_object_uploads:
        std::option::Option<crate::types::AllowsUnencryptedObjectUploads>,
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    #[doc(hidden)]
    pub bucket_arn: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the bucket was created, or changes such as edits to the bucket's policy were most recently made to the bucket.</p>
    #[doc(hidden)]
    pub bucket_created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the bucket.</p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub classifiable_object_count: i64,
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    #[doc(hidden)]
    pub classifiable_size_in_bytes: i64,
    /// <p>Specifies the error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::BucketMetadataErrorCode>,
    /// <p>A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>Specifies whether any one-time or recurring classification jobs are configured to analyze data in the bucket, and, if so, the details of the job that ran most recently.</p>
    #[doc(hidden)]
    pub job_details: std::option::Option<crate::types::JobDetails>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently performed automated sensitive data discovery for the bucket. This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    #[doc(hidden)]
    pub last_automated_discovery_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the bucket.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total number of objects in the bucket.</p>
    #[doc(hidden)]
    pub object_count: i64,
    /// <p>The total number of objects that are in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.</p>
    #[doc(hidden)]
    pub object_count_by_encryption_type:
        std::option::Option<crate::types::ObjectCountByEncryptionType>,
    /// <p>Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket, and provides information about those settings.</p>
    #[doc(hidden)]
    pub public_access: std::option::Option<crate::types::BucketPublicAccess>,
    /// <p>The Amazon Web Services Region that hosts the bucket.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>Specifies whether the bucket is configured to replicate one or more objects to buckets for other Amazon Web Services accounts and, if so, which accounts.</p>
    #[doc(hidden)]
    pub replication_details: std::option::Option<crate::types::ReplicationDetails>,
    /// <p>The sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    #[doc(hidden)]
    pub sensitivity_score: i32,
    /// <p>Specifies whether the bucket encrypts new objects by default and, if so, the type of server-side encryption that's used.</p>
    #[doc(hidden)]
    pub server_side_encryption: std::option::Option<crate::types::BucketServerSideEncryption>,
    /// <p>Specifies whether the bucket is shared with another Amazon Web Services account. Possible values are:</p>
    /// <ul>
    /// <li><p>EXTERNAL - The bucket is shared with an Amazon Web Services account that isn't part of the same Amazon Macie organization.</p></li>
    /// <li><p>INTERNAL - The bucket is shared with an Amazon Web Services account that's part of the same Amazon Macie organization.</p></li>
    /// <li><p>NOT_SHARED - The bucket isn't shared with other Amazon Web Services accounts.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie wasn't able to evaluate the shared access settings for the bucket.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub shared_access: std::option::Option<crate::types::SharedAccess>,
    /// <p>The total storage size, in bytes, of the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.</p>
    #[doc(hidden)]
    pub size_in_bytes: i64,
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    #[doc(hidden)]
    pub size_in_bytes_compressed: i64,
    /// <p>An array that specifies the tags (keys and values) that are associated with the bucket.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    /// <p>The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub unclassifiable_object_count: std::option::Option<crate::types::ObjectLevelStatistics>,
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub unclassifiable_object_size_in_bytes:
        std::option::Option<crate::types::ObjectLevelStatistics>,
    /// <p>Specifies whether versioning is enabled for the bucket.</p>
    #[doc(hidden)]
    pub versioning: bool,
}
impl BucketMetadata {
    /// <p>The unique identifier for the Amazon Web Services account that owns the bucket.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are uploaded to the bucket. Possible values are:</p>
    /// <ul>
    /// <li><p>FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.</p></li>
    /// <li><p>TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.</p></li>
    /// </ul>
    /// <p>Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.</p>
    pub fn allows_unencrypted_object_uploads(
        &self,
    ) -> std::option::Option<&crate::types::AllowsUnencryptedObjectUploads> {
        self.allows_unencrypted_object_uploads.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn bucket_arn(&self) -> std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the bucket was created, or changes such as edits to the bucket's policy were most recently made to the bucket.</p>
    pub fn bucket_created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.bucket_created_at.as_ref()
    }
    /// <p>The name of the bucket.</p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    pub fn classifiable_object_count(&self) -> i64 {
        self.classifiable_object_count
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn classifiable_size_in_bytes(&self) -> i64 {
        self.classifiable_size_in_bytes
    }
    /// <p>Specifies the error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::BucketMetadataErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>Specifies whether any one-time or recurring classification jobs are configured to analyze data in the bucket, and, if so, the details of the job that ran most recently.</p>
    pub fn job_details(&self) -> std::option::Option<&crate::types::JobDetails> {
        self.job_details.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently performed automated sensitive data discovery for the bucket. This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn last_automated_discovery_time(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_automated_discovery_time.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the bucket.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>The total number of objects in the bucket.</p>
    pub fn object_count(&self) -> i64 {
        self.object_count
    }
    /// <p>The total number of objects that are in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.</p>
    pub fn object_count_by_encryption_type(
        &self,
    ) -> std::option::Option<&crate::types::ObjectCountByEncryptionType> {
        self.object_count_by_encryption_type.as_ref()
    }
    /// <p>Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket, and provides information about those settings.</p>
    pub fn public_access(&self) -> std::option::Option<&crate::types::BucketPublicAccess> {
        self.public_access.as_ref()
    }
    /// <p>The Amazon Web Services Region that hosts the bucket.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Specifies whether the bucket is configured to replicate one or more objects to buckets for other Amazon Web Services accounts and, if so, which accounts.</p>
    pub fn replication_details(&self) -> std::option::Option<&crate::types::ReplicationDetails> {
        self.replication_details.as_ref()
    }
    /// <p>The sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn sensitivity_score(&self) -> i32 {
        self.sensitivity_score
    }
    /// <p>Specifies whether the bucket encrypts new objects by default and, if so, the type of server-side encryption that's used.</p>
    pub fn server_side_encryption(
        &self,
    ) -> std::option::Option<&crate::types::BucketServerSideEncryption> {
        self.server_side_encryption.as_ref()
    }
    /// <p>Specifies whether the bucket is shared with another Amazon Web Services account. Possible values are:</p>
    /// <ul>
    /// <li><p>EXTERNAL - The bucket is shared with an Amazon Web Services account that isn't part of the same Amazon Macie organization.</p></li>
    /// <li><p>INTERNAL - The bucket is shared with an Amazon Web Services account that's part of the same Amazon Macie organization.</p></li>
    /// <li><p>NOT_SHARED - The bucket isn't shared with other Amazon Web Services accounts.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie wasn't able to evaluate the shared access settings for the bucket.</p></li>
    /// </ul>
    pub fn shared_access(&self) -> std::option::Option<&crate::types::SharedAccess> {
        self.shared_access.as_ref()
    }
    /// <p>The total storage size, in bytes, of the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.</p>
    pub fn size_in_bytes(&self) -> i64 {
        self.size_in_bytes
    }
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn size_in_bytes_compressed(&self) -> i64 {
        self.size_in_bytes_compressed
    }
    /// <p>An array that specifies the tags (keys and values) that are associated with the bucket.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::KeyValuePair]> {
        self.tags.as_deref()
    }
    /// <p>The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_count(
        &self,
    ) -> std::option::Option<&crate::types::ObjectLevelStatistics> {
        self.unclassifiable_object_count.as_ref()
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_size_in_bytes(
        &self,
    ) -> std::option::Option<&crate::types::ObjectLevelStatistics> {
        self.unclassifiable_object_size_in_bytes.as_ref()
    }
    /// <p>Specifies whether versioning is enabled for the bucket.</p>
    pub fn versioning(&self) -> bool {
        self.versioning
    }
}
impl BucketMetadata {
    /// Creates a new builder-style object to manufacture [`BucketMetadata`](crate::types::BucketMetadata).
    pub fn builder() -> crate::types::builders::BucketMetadataBuilder {
        crate::types::builders::BucketMetadataBuilder::default()
    }
}

/// A builder for [`BucketMetadata`](crate::types::BucketMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketMetadataBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) allows_unencrypted_object_uploads:
        std::option::Option<crate::types::AllowsUnencryptedObjectUploads>,
    pub(crate) bucket_arn: std::option::Option<std::string::String>,
    pub(crate) bucket_created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) classifiable_object_count: std::option::Option<i64>,
    pub(crate) classifiable_size_in_bytes: std::option::Option<i64>,
    pub(crate) error_code: std::option::Option<crate::types::BucketMetadataErrorCode>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) job_details: std::option::Option<crate::types::JobDetails>,
    pub(crate) last_automated_discovery_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) object_count: std::option::Option<i64>,
    pub(crate) object_count_by_encryption_type:
        std::option::Option<crate::types::ObjectCountByEncryptionType>,
    pub(crate) public_access: std::option::Option<crate::types::BucketPublicAccess>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) replication_details: std::option::Option<crate::types::ReplicationDetails>,
    pub(crate) sensitivity_score: std::option::Option<i32>,
    pub(crate) server_side_encryption:
        std::option::Option<crate::types::BucketServerSideEncryption>,
    pub(crate) shared_access: std::option::Option<crate::types::SharedAccess>,
    pub(crate) size_in_bytes: std::option::Option<i64>,
    pub(crate) size_in_bytes_compressed: std::option::Option<i64>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    pub(crate) unclassifiable_object_count:
        std::option::Option<crate::types::ObjectLevelStatistics>,
    pub(crate) unclassifiable_object_size_in_bytes:
        std::option::Option<crate::types::ObjectLevelStatistics>,
    pub(crate) versioning: std::option::Option<bool>,
}
impl BucketMetadataBuilder {
    /// <p>The unique identifier for the Amazon Web Services account that owns the bucket.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Web Services account that owns the bucket.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are uploaded to the bucket. Possible values are:</p>
    /// <ul>
    /// <li><p>FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.</p></li>
    /// <li><p>TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.</p></li>
    /// </ul>
    /// <p>Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.</p>
    pub fn allows_unencrypted_object_uploads(
        mut self,
        input: crate::types::AllowsUnencryptedObjectUploads,
    ) -> Self {
        self.allows_unencrypted_object_uploads = Some(input);
        self
    }
    /// <p>Specifies whether the bucket policy for the bucket requires server-side encryption of objects when objects are uploaded to the bucket. Possible values are:</p>
    /// <ul>
    /// <li><p>FALSE - The bucket policy requires server-side encryption of new objects. PutObject requests must include a valid server-side encryption header.</p></li>
    /// <li><p>TRUE - The bucket doesn't have a bucket policy or it has a bucket policy that doesn't require server-side encryption of new objects. If a bucket policy exists, it doesn't require PutObject requests to include a valid server-side encryption header.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie can't determine whether the bucket policy requires server-side encryption of new objects.</p></li>
    /// </ul>
    /// <p>Valid server-side encryption headers are: x-amz-server-side-encryption with a value of AES256 or aws:kms, and x-amz-server-side-encryption-customer-algorithm with a value of AES256.</p>
    pub fn set_allows_unencrypted_object_uploads(
        mut self,
        input: std::option::Option<crate::types::AllowsUnencryptedObjectUploads>,
    ) -> Self {
        self.allows_unencrypted_object_uploads = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the bucket.</p>
    pub fn set_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the bucket was created, or changes such as edits to the bucket's policy were most recently made to the bucket.</p>
    pub fn bucket_created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.bucket_created_at = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the bucket was created, or changes such as edits to the bucket's policy were most recently made to the bucket.</p>
    pub fn set_bucket_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.bucket_created_at = input;
        self
    }
    /// <p>The name of the bucket.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the bucket.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    pub fn classifiable_object_count(mut self, input: i64) -> Self {
        self.classifiable_object_count = Some(input);
        self
    }
    /// <p>The total number of objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    pub fn set_classifiable_object_count(mut self, input: std::option::Option<i64>) -> Self {
        self.classifiable_object_count = input;
        self
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn classifiable_size_in_bytes(mut self, input: i64) -> Self {
        self.classifiable_size_in_bytes = Some(input);
        self
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can analyze in the bucket. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for the bucket, Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn set_classifiable_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.classifiable_size_in_bytes = input;
        self
    }
    /// <p>Specifies the error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.</p>
    pub fn error_code(mut self, input: crate::types::BucketMetadataErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>Specifies the error code for an error that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. If this value is ACCESS_DENIED, Macie doesn't have permission to retrieve the information. For example, the bucket has a restrictive bucket policy and Amazon S3 denied the request. If this value is null, Macie was able to retrieve and process the information.</p>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::BucketMetadataErrorCode>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p>A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>A brief description of the error (errorCode) that prevented Amazon Macie from retrieving and processing information about the bucket and the bucket's objects. This value is null if Macie was able to retrieve and process the information.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>Specifies whether any one-time or recurring classification jobs are configured to analyze data in the bucket, and, if so, the details of the job that ran most recently.</p>
    pub fn job_details(mut self, input: crate::types::JobDetails) -> Self {
        self.job_details = Some(input);
        self
    }
    /// <p>Specifies whether any one-time or recurring classification jobs are configured to analyze data in the bucket, and, if so, the details of the job that ran most recently.</p>
    pub fn set_job_details(mut self, input: std::option::Option<crate::types::JobDetails>) -> Self {
        self.job_details = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently performed automated sensitive data discovery for the bucket. This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn last_automated_discovery_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_automated_discovery_time = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently performed automated sensitive data discovery for the bucket. This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn set_last_automated_discovery_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_automated_discovery_time = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the bucket.</p>
    pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the bucket.</p>
    pub fn set_last_updated(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>The total number of objects in the bucket.</p>
    pub fn object_count(mut self, input: i64) -> Self {
        self.object_count = Some(input);
        self
    }
    /// <p>The total number of objects in the bucket.</p>
    pub fn set_object_count(mut self, input: std::option::Option<i64>) -> Self {
        self.object_count = input;
        self
    }
    /// <p>The total number of objects that are in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.</p>
    pub fn object_count_by_encryption_type(
        mut self,
        input: crate::types::ObjectCountByEncryptionType,
    ) -> Self {
        self.object_count_by_encryption_type = Some(input);
        self
    }
    /// <p>The total number of objects that are in the bucket, grouped by server-side encryption type. This includes a grouping that reports the total number of objects that aren't encrypted or use client-side encryption.</p>
    pub fn set_object_count_by_encryption_type(
        mut self,
        input: std::option::Option<crate::types::ObjectCountByEncryptionType>,
    ) -> Self {
        self.object_count_by_encryption_type = input;
        self
    }
    /// <p>Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket, and provides information about those settings.</p>
    pub fn public_access(mut self, input: crate::types::BucketPublicAccess) -> Self {
        self.public_access = Some(input);
        self
    }
    /// <p>Specifies whether the bucket is publicly accessible due to the combination of permissions settings that apply to the bucket, and provides information about those settings.</p>
    pub fn set_public_access(
        mut self,
        input: std::option::Option<crate::types::BucketPublicAccess>,
    ) -> Self {
        self.public_access = input;
        self
    }
    /// <p>The Amazon Web Services Region that hosts the bucket.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region that hosts the bucket.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Specifies whether the bucket is configured to replicate one or more objects to buckets for other Amazon Web Services accounts and, if so, which accounts.</p>
    pub fn replication_details(mut self, input: crate::types::ReplicationDetails) -> Self {
        self.replication_details = Some(input);
        self
    }
    /// <p>Specifies whether the bucket is configured to replicate one or more objects to buckets for other Amazon Web Services accounts and, if so, which accounts.</p>
    pub fn set_replication_details(
        mut self,
        input: std::option::Option<crate::types::ReplicationDetails>,
    ) -> Self {
        self.replication_details = input;
        self
    }
    /// <p>The sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn sensitivity_score(mut self, input: i32) -> Self {
        self.sensitivity_score = Some(input);
        self
    }
    /// <p>The sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). This value is null if automated sensitive data discovery is currently disabled for your account.</p>
    pub fn set_sensitivity_score(mut self, input: std::option::Option<i32>) -> Self {
        self.sensitivity_score = input;
        self
    }
    /// <p>Specifies whether the bucket encrypts new objects by default and, if so, the type of server-side encryption that's used.</p>
    pub fn server_side_encryption(
        mut self,
        input: crate::types::BucketServerSideEncryption,
    ) -> Self {
        self.server_side_encryption = Some(input);
        self
    }
    /// <p>Specifies whether the bucket encrypts new objects by default and, if so, the type of server-side encryption that's used.</p>
    pub fn set_server_side_encryption(
        mut self,
        input: std::option::Option<crate::types::BucketServerSideEncryption>,
    ) -> Self {
        self.server_side_encryption = input;
        self
    }
    /// <p>Specifies whether the bucket is shared with another Amazon Web Services account. Possible values are:</p>
    /// <ul>
    /// <li><p>EXTERNAL - The bucket is shared with an Amazon Web Services account that isn't part of the same Amazon Macie organization.</p></li>
    /// <li><p>INTERNAL - The bucket is shared with an Amazon Web Services account that's part of the same Amazon Macie organization.</p></li>
    /// <li><p>NOT_SHARED - The bucket isn't shared with other Amazon Web Services accounts.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie wasn't able to evaluate the shared access settings for the bucket.</p></li>
    /// </ul>
    pub fn shared_access(mut self, input: crate::types::SharedAccess) -> Self {
        self.shared_access = Some(input);
        self
    }
    /// <p>Specifies whether the bucket is shared with another Amazon Web Services account. Possible values are:</p>
    /// <ul>
    /// <li><p>EXTERNAL - The bucket is shared with an Amazon Web Services account that isn't part of the same Amazon Macie organization.</p></li>
    /// <li><p>INTERNAL - The bucket is shared with an Amazon Web Services account that's part of the same Amazon Macie organization.</p></li>
    /// <li><p>NOT_SHARED - The bucket isn't shared with other Amazon Web Services accounts.</p></li>
    /// <li><p>UNKNOWN - Amazon Macie wasn't able to evaluate the shared access settings for the bucket.</p></li>
    /// </ul>
    pub fn set_shared_access(
        mut self,
        input: std::option::Option<crate::types::SharedAccess>,
    ) -> Self {
        self.shared_access = input;
        self
    }
    /// <p>The total storage size, in bytes, of the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.</p>
    pub fn size_in_bytes(mut self, input: i64) -> Self {
        self.size_in_bytes = Some(input);
        self
    }
    /// <p>The total storage size, in bytes, of the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each object in the bucket. This value doesn't reflect the storage size of all versions of each object in the bucket.</p>
    pub fn set_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.size_in_bytes = input;
        self
    }
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn size_in_bytes_compressed(mut self, input: i64) -> Self {
        self.size_in_bytes_compressed = Some(input);
        self
    }
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the bucket.</p>
    /// <p>If versioning is enabled for the bucket, Amazon Macie calculates this value based on the size of the latest version of each applicable object in the bucket. This value doesn't reflect the storage size of all versions of each applicable object in the bucket.</p>
    pub fn set_size_in_bytes_compressed(mut self, input: std::option::Option<i64>) -> Self {
        self.size_in_bytes_compressed = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array that specifies the tags (keys and values) that are associated with the bucket.</p>
    pub fn tags(mut self, input: crate::types::KeyValuePair) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An array that specifies the tags (keys and values) that are associated with the bucket.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::KeyValuePair>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_count(
        mut self,
        input: crate::types::ObjectLevelStatistics,
    ) -> Self {
        self.unclassifiable_object_count = Some(input);
        self
    }
    /// <p>The total number of objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn set_unclassifiable_object_count(
        mut self,
        input: std::option::Option<crate::types::ObjectLevelStatistics>,
    ) -> Self {
        self.unclassifiable_object_count = input;
        self
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_size_in_bytes(
        mut self,
        input: crate::types::ObjectLevelStatistics,
    ) -> Self {
        self.unclassifiable_object_size_in_bytes = Some(input);
        self
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the bucket. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn set_unclassifiable_object_size_in_bytes(
        mut self,
        input: std::option::Option<crate::types::ObjectLevelStatistics>,
    ) -> Self {
        self.unclassifiable_object_size_in_bytes = input;
        self
    }
    /// <p>Specifies whether versioning is enabled for the bucket.</p>
    pub fn versioning(mut self, input: bool) -> Self {
        self.versioning = Some(input);
        self
    }
    /// <p>Specifies whether versioning is enabled for the bucket.</p>
    pub fn set_versioning(mut self, input: std::option::Option<bool>) -> Self {
        self.versioning = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketMetadata`](crate::types::BucketMetadata).
    pub fn build(self) -> crate::types::BucketMetadata {
        crate::types::BucketMetadata {
            account_id: self.account_id,
            allows_unencrypted_object_uploads: self.allows_unencrypted_object_uploads,
            bucket_arn: self.bucket_arn,
            bucket_created_at: self.bucket_created_at,
            bucket_name: self.bucket_name,
            classifiable_object_count: self.classifiable_object_count.unwrap_or_default(),
            classifiable_size_in_bytes: self.classifiable_size_in_bytes.unwrap_or_default(),
            error_code: self.error_code,
            error_message: self.error_message,
            job_details: self.job_details,
            last_automated_discovery_time: self.last_automated_discovery_time,
            last_updated: self.last_updated,
            object_count: self.object_count.unwrap_or_default(),
            object_count_by_encryption_type: self.object_count_by_encryption_type,
            public_access: self.public_access,
            region: self.region,
            replication_details: self.replication_details,
            sensitivity_score: self.sensitivity_score.unwrap_or_default(),
            server_side_encryption: self.server_side_encryption,
            shared_access: self.shared_access,
            size_in_bytes: self.size_in_bytes.unwrap_or_default(),
            size_in_bytes_compressed: self.size_in_bytes_compressed.unwrap_or_default(),
            tags: self.tags,
            unclassifiable_object_count: self.unclassifiable_object_count,
            unclassifiable_object_size_in_bytes: self.unclassifiable_object_size_in_bytes,
            versioning: self.versioning.unwrap_or_default(),
        }
    }
}
