// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the registered owner of an IP address.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpOwner {
    /// <p>The autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    #[doc(hidden)]
    pub asn: std::option::Option<std::string::String>,
    /// <p>The organization identifier that's associated with the autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    #[doc(hidden)]
    pub asn_org: std::option::Option<std::string::String>,
    /// <p>The name of the internet service provider (ISP) that owned the IP address.</p>
    #[doc(hidden)]
    pub isp: std::option::Option<std::string::String>,
    /// <p>The name of the organization that owned the IP address.</p>
    #[doc(hidden)]
    pub org: std::option::Option<std::string::String>,
}
impl IpOwner {
    /// <p>The autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn asn(&self) -> std::option::Option<&str> {
        self.asn.as_deref()
    }
    /// <p>The organization identifier that's associated with the autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn asn_org(&self) -> std::option::Option<&str> {
        self.asn_org.as_deref()
    }
    /// <p>The name of the internet service provider (ISP) that owned the IP address.</p>
    pub fn isp(&self) -> std::option::Option<&str> {
        self.isp.as_deref()
    }
    /// <p>The name of the organization that owned the IP address.</p>
    pub fn org(&self) -> std::option::Option<&str> {
        self.org.as_deref()
    }
}
impl IpOwner {
    /// Creates a new builder-style object to manufacture [`IpOwner`](crate::types::IpOwner).
    pub fn builder() -> crate::types::builders::IpOwnerBuilder {
        crate::types::builders::IpOwnerBuilder::default()
    }
}

/// A builder for [`IpOwner`](crate::types::IpOwner).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpOwnerBuilder {
    pub(crate) asn: std::option::Option<std::string::String>,
    pub(crate) asn_org: std::option::Option<std::string::String>,
    pub(crate) isp: std::option::Option<std::string::String>,
    pub(crate) org: std::option::Option<std::string::String>,
}
impl IpOwnerBuilder {
    /// <p>The autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn asn(mut self, input: impl Into<std::string::String>) -> Self {
        self.asn = Some(input.into());
        self
    }
    /// <p>The autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn set_asn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asn = input;
        self
    }
    /// <p>The organization identifier that's associated with the autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn asn_org(mut self, input: impl Into<std::string::String>) -> Self {
        self.asn_org = Some(input.into());
        self
    }
    /// <p>The organization identifier that's associated with the autonomous system number (ASN) for the autonomous system that included the IP address.</p>
    pub fn set_asn_org(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.asn_org = input;
        self
    }
    /// <p>The name of the internet service provider (ISP) that owned the IP address.</p>
    pub fn isp(mut self, input: impl Into<std::string::String>) -> Self {
        self.isp = Some(input.into());
        self
    }
    /// <p>The name of the internet service provider (ISP) that owned the IP address.</p>
    pub fn set_isp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.isp = input;
        self
    }
    /// <p>The name of the organization that owned the IP address.</p>
    pub fn org(mut self, input: impl Into<std::string::String>) -> Self {
        self.org = Some(input.into());
        self
    }
    /// <p>The name of the organization that owned the IP address.</p>
    pub fn set_org(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.org = input;
        self
    }
    /// Consumes the builder and constructs a [`IpOwner`](crate::types::IpOwner).
    pub fn build(self) -> crate::types::IpOwner {
        crate::types::IpOwner {
            asn: self.asn,
            asn_org: self.asn_org,
            isp: self.isp,
            org: self.org,
        }
    }
}
