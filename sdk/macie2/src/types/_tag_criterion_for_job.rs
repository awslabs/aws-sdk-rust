// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a tag-based condition that determines whether an S3 bucket is included or excluded from a classification job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagCriterionForJob {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub comparator: ::std::option::Option<crate::types::JobComparator>,
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub tag_values: ::std::option::Option<::std::vec::Vec<crate::types::TagCriterionPairForJob>>,
}
impl TagCriterionForJob {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(&self) -> ::std::option::Option<&crate::types::JobComparator> {
        self.comparator.as_ref()
    }
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_values.is_none()`.
    pub fn tag_values(&self) -> &[crate::types::TagCriterionPairForJob] {
        self.tag_values.as_deref().unwrap_or_default()
    }
}
impl TagCriterionForJob {
    /// Creates a new builder-style object to manufacture [`TagCriterionForJob`](crate::types::TagCriterionForJob).
    pub fn builder() -> crate::types::builders::TagCriterionForJobBuilder {
        crate::types::builders::TagCriterionForJobBuilder::default()
    }
}

/// A builder for [`TagCriterionForJob`](crate::types::TagCriterionForJob).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagCriterionForJobBuilder {
    pub(crate) comparator: ::std::option::Option<crate::types::JobComparator>,
    pub(crate) tag_values: ::std::option::Option<::std::vec::Vec<crate::types::TagCriterionPairForJob>>,
}
impl TagCriterionForJobBuilder {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn comparator(mut self, input: crate::types::JobComparator) -> Self {
        self.comparator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn set_comparator(mut self, input: ::std::option::Option<crate::types::JobComparator>) -> Self {
        self.comparator = input;
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) and NE (not equals).</p>
    pub fn get_comparator(&self) -> &::std::option::Option<crate::types::JobComparator> {
        &self.comparator
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn tag_values(mut self, input: crate::types::TagCriterionPairForJob) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input);
        self.tag_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn set_tag_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagCriterionPairForJob>>) -> Self {
        self.tag_values = input;
        self
    }
    /// <p>The tag keys, tag values, or tag key and value pairs to use in the condition.</p>
    pub fn get_tag_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagCriterionPairForJob>> {
        &self.tag_values
    }
    /// Consumes the builder and constructs a [`TagCriterionForJob`](crate::types::TagCriterionForJob).
    pub fn build(self) -> crate::types::TagCriterionForJob {
        crate::types::TagCriterionForJob {
            comparator: self.comparator,
            tag_values: self.tag_values,
        }
    }
}
