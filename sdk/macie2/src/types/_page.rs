// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the location of an occurrence of sensitive data in an Adobe Portable Document Format file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Page {
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub line_range: std::option::Option<crate::types::Range>,
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub offset_range: std::option::Option<crate::types::Range>,
    /// <p>The page number of the page that contains the sensitive data.</p>
    #[doc(hidden)]
    pub page_number: i64,
}
impl Page {
    /// <p>Reserved for future use.</p>
    pub fn line_range(&self) -> std::option::Option<&crate::types::Range> {
        self.line_range.as_ref()
    }
    /// <p>Reserved for future use.</p>
    pub fn offset_range(&self) -> std::option::Option<&crate::types::Range> {
        self.offset_range.as_ref()
    }
    /// <p>The page number of the page that contains the sensitive data.</p>
    pub fn page_number(&self) -> i64 {
        self.page_number
    }
}
impl Page {
    /// Creates a new builder-style object to manufacture [`Page`](crate::types::Page).
    pub fn builder() -> crate::types::builders::PageBuilder {
        crate::types::builders::PageBuilder::default()
    }
}

/// A builder for [`Page`](crate::types::Page).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PageBuilder {
    pub(crate) line_range: std::option::Option<crate::types::Range>,
    pub(crate) offset_range: std::option::Option<crate::types::Range>,
    pub(crate) page_number: std::option::Option<i64>,
}
impl PageBuilder {
    /// <p>Reserved for future use.</p>
    pub fn line_range(mut self, input: crate::types::Range) -> Self {
        self.line_range = Some(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_line_range(mut self, input: std::option::Option<crate::types::Range>) -> Self {
        self.line_range = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn offset_range(mut self, input: crate::types::Range) -> Self {
        self.offset_range = Some(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_offset_range(mut self, input: std::option::Option<crate::types::Range>) -> Self {
        self.offset_range = input;
        self
    }
    /// <p>The page number of the page that contains the sensitive data.</p>
    pub fn page_number(mut self, input: i64) -> Self {
        self.page_number = Some(input);
        self
    }
    /// <p>The page number of the page that contains the sensitive data.</p>
    pub fn set_page_number(mut self, input: std::option::Option<i64>) -> Self {
        self.page_number = input;
        self
    }
    /// Consumes the builder and constructs a [`Page`](crate::types::Page).
    pub fn build(self) -> crate::types::Page {
        crate::types::Page {
            line_range: self.line_range,
            offset_range: self.offset_range,
            page_number: self.page_number.unwrap_or_default(),
        }
    }
}
