// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an Identity and Access Management (IAM) user who performed an action on an affected resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IamUser {
    /// <p>The unique identifier for the Amazon Web Services account that's associated with the IAM user who performed the action.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user who performed the action.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the IAM user who performed the action.</p>
    #[doc(hidden)]
    pub principal_id: std::option::Option<std::string::String>,
    /// <p>The user name of the IAM user who performed the action.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
}
impl IamUser {
    /// <p>The unique identifier for the Amazon Web Services account that's associated with the IAM user who performed the action.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user who performed the action.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the IAM user who performed the action.</p>
    pub fn principal_id(&self) -> std::option::Option<&str> {
        self.principal_id.as_deref()
    }
    /// <p>The user name of the IAM user who performed the action.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
}
impl IamUser {
    /// Creates a new builder-style object to manufacture [`IamUser`](crate::types::IamUser).
    pub fn builder() -> crate::types::builders::IamUserBuilder {
        crate::types::builders::IamUserBuilder::default()
    }
}

/// A builder for [`IamUser`](crate::types::IamUser).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IamUserBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) principal_id: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
}
impl IamUserBuilder {
    /// <p>The unique identifier for the Amazon Web Services account that's associated with the IAM user who performed the action.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Web Services account that's associated with the IAM user who performed the action.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user who performed the action.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the principal that performed the action. The last section of the ARN contains the name of the user who performed the action.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The unique identifier for the IAM user who performed the action.</p>
    pub fn principal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.principal_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the IAM user who performed the action.</p>
    pub fn set_principal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.principal_id = input;
        self
    }
    /// <p>The user name of the IAM user who performed the action.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The user name of the IAM user who performed the action.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// Consumes the builder and constructs a [`IamUser`](crate::types::IamUser).
    pub fn build(self) -> crate::types::IamUser {
        crate::types::IamUser {
            account_id: self.account_id,
            arn: self.arn,
            principal_id: self.principal_id,
            user_name: self.user_name,
        }
    }
}
