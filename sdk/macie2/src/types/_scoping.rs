// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies one or more property- and tag-based conditions that define criteria for including or excluding S3 objects from a classification job. Exclude conditions take precedence over include conditions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Scoping {
    /// <p>The property- and tag-based conditions that determine which objects to exclude from the analysis.</p>
    #[doc(hidden)]
    pub excludes: std::option::Option<crate::types::JobScopingBlock>,
    /// <p>The property- and tag-based conditions that determine which objects to include in the analysis.</p>
    #[doc(hidden)]
    pub includes: std::option::Option<crate::types::JobScopingBlock>,
}
impl Scoping {
    /// <p>The property- and tag-based conditions that determine which objects to exclude from the analysis.</p>
    pub fn excludes(&self) -> std::option::Option<&crate::types::JobScopingBlock> {
        self.excludes.as_ref()
    }
    /// <p>The property- and tag-based conditions that determine which objects to include in the analysis.</p>
    pub fn includes(&self) -> std::option::Option<&crate::types::JobScopingBlock> {
        self.includes.as_ref()
    }
}
impl Scoping {
    /// Creates a new builder-style object to manufacture [`Scoping`](crate::types::Scoping).
    pub fn builder() -> crate::types::builders::ScopingBuilder {
        crate::types::builders::ScopingBuilder::default()
    }
}

/// A builder for [`Scoping`](crate::types::Scoping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ScopingBuilder {
    pub(crate) excludes: std::option::Option<crate::types::JobScopingBlock>,
    pub(crate) includes: std::option::Option<crate::types::JobScopingBlock>,
}
impl ScopingBuilder {
    /// <p>The property- and tag-based conditions that determine which objects to exclude from the analysis.</p>
    pub fn excludes(mut self, input: crate::types::JobScopingBlock) -> Self {
        self.excludes = Some(input);
        self
    }
    /// <p>The property- and tag-based conditions that determine which objects to exclude from the analysis.</p>
    pub fn set_excludes(
        mut self,
        input: std::option::Option<crate::types::JobScopingBlock>,
    ) -> Self {
        self.excludes = input;
        self
    }
    /// <p>The property- and tag-based conditions that determine which objects to include in the analysis.</p>
    pub fn includes(mut self, input: crate::types::JobScopingBlock) -> Self {
        self.includes = Some(input);
        self
    }
    /// <p>The property- and tag-based conditions that determine which objects to include in the analysis.</p>
    pub fn set_includes(
        mut self,
        input: std::option::Option<crate::types::JobScopingBlock>,
    ) -> Self {
        self.includes = input;
        self
    }
    /// Consumes the builder and constructs a [`Scoping`](crate::types::Scoping).
    pub fn build(self) -> crate::types::Scoping {
        crate::types::Scoping {
            excludes: self.excludes,
            includes: self.includes,
        }
    }
}
