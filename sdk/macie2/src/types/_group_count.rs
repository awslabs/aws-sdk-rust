// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a group of results for a query that retrieved aggregated statistical data about findings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GroupCount {
    /// <p>The total number of findings in the group of query results.</p>
    #[doc(hidden)]
    pub count: i64,
    /// <p>The name of the property that defines the group in the query results, as specified by the groupBy property in the query request.</p>
    #[doc(hidden)]
    pub group_key: std::option::Option<std::string::String>,
}
impl GroupCount {
    /// <p>The total number of findings in the group of query results.</p>
    pub fn count(&self) -> i64 {
        self.count
    }
    /// <p>The name of the property that defines the group in the query results, as specified by the groupBy property in the query request.</p>
    pub fn group_key(&self) -> std::option::Option<&str> {
        self.group_key.as_deref()
    }
}
impl GroupCount {
    /// Creates a new builder-style object to manufacture [`GroupCount`](crate::types::GroupCount).
    pub fn builder() -> crate::types::builders::GroupCountBuilder {
        crate::types::builders::GroupCountBuilder::default()
    }
}

/// A builder for [`GroupCount`](crate::types::GroupCount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupCountBuilder {
    pub(crate) count: std::option::Option<i64>,
    pub(crate) group_key: std::option::Option<std::string::String>,
}
impl GroupCountBuilder {
    /// <p>The total number of findings in the group of query results.</p>
    pub fn count(mut self, input: i64) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The total number of findings in the group of query results.</p>
    pub fn set_count(mut self, input: std::option::Option<i64>) -> Self {
        self.count = input;
        self
    }
    /// <p>The name of the property that defines the group in the query results, as specified by the groupBy property in the query request.</p>
    pub fn group_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_key = Some(input.into());
        self
    }
    /// <p>The name of the property that defines the group in the query results, as specified by the groupBy property in the query request.</p>
    pub fn set_group_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_key = input;
        self
    }
    /// Consumes the builder and constructs a [`GroupCount`](crate::types::GroupCount).
    pub fn build(self) -> crate::types::GroupCount {
        crate::types::GroupCount {
            count: self.count.unwrap_or_default(),
            group_key: self.group_key,
        }
    }
}
