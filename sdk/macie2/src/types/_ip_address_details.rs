// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the IP address of the device that an entity used to perform an action on an affected resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IpAddressDetails {
    /// <p>The Internet Protocol version 4 (IPv4) address of the device.</p>
    #[doc(hidden)]
    pub ip_address_v4: std::option::Option<std::string::String>,
    /// <p>The city that the IP address originated from.</p>
    #[doc(hidden)]
    pub ip_city: std::option::Option<crate::types::IpCity>,
    /// <p>The country that the IP address originated from.</p>
    #[doc(hidden)]
    pub ip_country: std::option::Option<crate::types::IpCountry>,
    /// <p>The geographic coordinates of the location that the IP address originated from.</p>
    #[doc(hidden)]
    pub ip_geo_location: std::option::Option<crate::types::IpGeoLocation>,
    /// <p>The registered owner of the IP address.</p>
    #[doc(hidden)]
    pub ip_owner: std::option::Option<crate::types::IpOwner>,
}
impl IpAddressDetails {
    /// <p>The Internet Protocol version 4 (IPv4) address of the device.</p>
    pub fn ip_address_v4(&self) -> std::option::Option<&str> {
        self.ip_address_v4.as_deref()
    }
    /// <p>The city that the IP address originated from.</p>
    pub fn ip_city(&self) -> std::option::Option<&crate::types::IpCity> {
        self.ip_city.as_ref()
    }
    /// <p>The country that the IP address originated from.</p>
    pub fn ip_country(&self) -> std::option::Option<&crate::types::IpCountry> {
        self.ip_country.as_ref()
    }
    /// <p>The geographic coordinates of the location that the IP address originated from.</p>
    pub fn ip_geo_location(&self) -> std::option::Option<&crate::types::IpGeoLocation> {
        self.ip_geo_location.as_ref()
    }
    /// <p>The registered owner of the IP address.</p>
    pub fn ip_owner(&self) -> std::option::Option<&crate::types::IpOwner> {
        self.ip_owner.as_ref()
    }
}
impl IpAddressDetails {
    /// Creates a new builder-style object to manufacture [`IpAddressDetails`](crate::types::IpAddressDetails).
    pub fn builder() -> crate::types::builders::IpAddressDetailsBuilder {
        crate::types::builders::IpAddressDetailsBuilder::default()
    }
}

/// A builder for [`IpAddressDetails`](crate::types::IpAddressDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IpAddressDetailsBuilder {
    pub(crate) ip_address_v4: std::option::Option<std::string::String>,
    pub(crate) ip_city: std::option::Option<crate::types::IpCity>,
    pub(crate) ip_country: std::option::Option<crate::types::IpCountry>,
    pub(crate) ip_geo_location: std::option::Option<crate::types::IpGeoLocation>,
    pub(crate) ip_owner: std::option::Option<crate::types::IpOwner>,
}
impl IpAddressDetailsBuilder {
    /// <p>The Internet Protocol version 4 (IPv4) address of the device.</p>
    pub fn ip_address_v4(mut self, input: impl Into<std::string::String>) -> Self {
        self.ip_address_v4 = Some(input.into());
        self
    }
    /// <p>The Internet Protocol version 4 (IPv4) address of the device.</p>
    pub fn set_ip_address_v4(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ip_address_v4 = input;
        self
    }
    /// <p>The city that the IP address originated from.</p>
    pub fn ip_city(mut self, input: crate::types::IpCity) -> Self {
        self.ip_city = Some(input);
        self
    }
    /// <p>The city that the IP address originated from.</p>
    pub fn set_ip_city(mut self, input: std::option::Option<crate::types::IpCity>) -> Self {
        self.ip_city = input;
        self
    }
    /// <p>The country that the IP address originated from.</p>
    pub fn ip_country(mut self, input: crate::types::IpCountry) -> Self {
        self.ip_country = Some(input);
        self
    }
    /// <p>The country that the IP address originated from.</p>
    pub fn set_ip_country(mut self, input: std::option::Option<crate::types::IpCountry>) -> Self {
        self.ip_country = input;
        self
    }
    /// <p>The geographic coordinates of the location that the IP address originated from.</p>
    pub fn ip_geo_location(mut self, input: crate::types::IpGeoLocation) -> Self {
        self.ip_geo_location = Some(input);
        self
    }
    /// <p>The geographic coordinates of the location that the IP address originated from.</p>
    pub fn set_ip_geo_location(
        mut self,
        input: std::option::Option<crate::types::IpGeoLocation>,
    ) -> Self {
        self.ip_geo_location = input;
        self
    }
    /// <p>The registered owner of the IP address.</p>
    pub fn ip_owner(mut self, input: crate::types::IpOwner) -> Self {
        self.ip_owner = Some(input);
        self
    }
    /// <p>The registered owner of the IP address.</p>
    pub fn set_ip_owner(mut self, input: std::option::Option<crate::types::IpOwner>) -> Self {
        self.ip_owner = input;
        self
    }
    /// Consumes the builder and constructs a [`IpAddressDetails`](crate::types::IpAddressDetails).
    pub fn build(self) -> crate::types::IpAddressDetails {
        crate::types::IpAddressDetails {
            ip_address_v4: self.ip_address_v4,
            ip_city: self.ip_city,
            ip_country: self.ip_country,
            ip_geo_location: self.ip_geo_location,
            ip_owner: self.ip_owner,
        }
    }
}
