// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies 1-10 occurrences of a specific type of sensitive data reported by a finding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectedDataDetails {
    /// <p>An occurrence of the specified type of sensitive data. Each occurrence can contain 1-128 characters.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl DetectedDataDetails {
    /// <p>An occurrence of the specified type of sensitive data. Each occurrence can contain 1-128 characters.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl DetectedDataDetails {
    /// Creates a new builder-style object to manufacture [`DetectedDataDetails`](crate::types::DetectedDataDetails).
    pub fn builder() -> crate::types::builders::DetectedDataDetailsBuilder {
        crate::types::builders::DetectedDataDetailsBuilder::default()
    }
}

/// A builder for [`DetectedDataDetails`](crate::types::DetectedDataDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectedDataDetailsBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl DetectedDataDetailsBuilder {
    /// <p>An occurrence of the specified type of sensitive data. Each occurrence can contain 1-128 characters.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An occurrence of the specified type of sensitive data. Each occurrence can contain 1-128 characters.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>An occurrence of the specified type of sensitive data. Each occurrence can contain 1-128 characters.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`DetectedDataDetails`](crate::types::DetectedDataDetails).
    pub fn build(self) -> crate::types::DetectedDataDetails {
        crate::types::DetectedDataDetails { value: self.value }
    }
}
