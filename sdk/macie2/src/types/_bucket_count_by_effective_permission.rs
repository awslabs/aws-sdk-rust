// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about the number of S3 buckets that are publicly accessible based on a combination of permissions settings for each bucket.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BucketCountByEffectivePermission {
    /// <p>The total number of buckets that allow the general public to have read or write access to the bucket.</p>
    #[doc(hidden)]
    pub publicly_accessible: i64,
    /// <p>The total number of buckets that allow the general public to have read access to the bucket.</p>
    #[doc(hidden)]
    pub publicly_readable: i64,
    /// <p>The total number of buckets that allow the general public to have write access to the bucket.</p>
    #[doc(hidden)]
    pub publicly_writable: i64,
    /// <p>The total number of buckets that Amazon Macie wasn't able to evaluate permissions settings for. Macie can't determine whether these buckets are publicly accessible.</p>
    #[doc(hidden)]
    pub unknown: i64,
}
impl BucketCountByEffectivePermission {
    /// <p>The total number of buckets that allow the general public to have read or write access to the bucket.</p>
    pub fn publicly_accessible(&self) -> i64 {
        self.publicly_accessible
    }
    /// <p>The total number of buckets that allow the general public to have read access to the bucket.</p>
    pub fn publicly_readable(&self) -> i64 {
        self.publicly_readable
    }
    /// <p>The total number of buckets that allow the general public to have write access to the bucket.</p>
    pub fn publicly_writable(&self) -> i64 {
        self.publicly_writable
    }
    /// <p>The total number of buckets that Amazon Macie wasn't able to evaluate permissions settings for. Macie can't determine whether these buckets are publicly accessible.</p>
    pub fn unknown(&self) -> i64 {
        self.unknown
    }
}
impl BucketCountByEffectivePermission {
    /// Creates a new builder-style object to manufacture [`BucketCountByEffectivePermission`](crate::types::BucketCountByEffectivePermission).
    pub fn builder() -> crate::types::builders::BucketCountByEffectivePermissionBuilder {
        crate::types::builders::BucketCountByEffectivePermissionBuilder::default()
    }
}

/// A builder for [`BucketCountByEffectivePermission`](crate::types::BucketCountByEffectivePermission).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BucketCountByEffectivePermissionBuilder {
    pub(crate) publicly_accessible: std::option::Option<i64>,
    pub(crate) publicly_readable: std::option::Option<i64>,
    pub(crate) publicly_writable: std::option::Option<i64>,
    pub(crate) unknown: std::option::Option<i64>,
}
impl BucketCountByEffectivePermissionBuilder {
    /// <p>The total number of buckets that allow the general public to have read or write access to the bucket.</p>
    pub fn publicly_accessible(mut self, input: i64) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>The total number of buckets that allow the general public to have read or write access to the bucket.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<i64>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>The total number of buckets that allow the general public to have read access to the bucket.</p>
    pub fn publicly_readable(mut self, input: i64) -> Self {
        self.publicly_readable = Some(input);
        self
    }
    /// <p>The total number of buckets that allow the general public to have read access to the bucket.</p>
    pub fn set_publicly_readable(mut self, input: std::option::Option<i64>) -> Self {
        self.publicly_readable = input;
        self
    }
    /// <p>The total number of buckets that allow the general public to have write access to the bucket.</p>
    pub fn publicly_writable(mut self, input: i64) -> Self {
        self.publicly_writable = Some(input);
        self
    }
    /// <p>The total number of buckets that allow the general public to have write access to the bucket.</p>
    pub fn set_publicly_writable(mut self, input: std::option::Option<i64>) -> Self {
        self.publicly_writable = input;
        self
    }
    /// <p>The total number of buckets that Amazon Macie wasn't able to evaluate permissions settings for. Macie can't determine whether these buckets are publicly accessible.</p>
    pub fn unknown(mut self, input: i64) -> Self {
        self.unknown = Some(input);
        self
    }
    /// <p>The total number of buckets that Amazon Macie wasn't able to evaluate permissions settings for. Macie can't determine whether these buckets are publicly accessible.</p>
    pub fn set_unknown(mut self, input: std::option::Option<i64>) -> Self {
        self.unknown = input;
        self
    }
    /// Consumes the builder and constructs a [`BucketCountByEffectivePermission`](crate::types::BucketCountByEffectivePermission).
    pub fn build(self) -> crate::types::BucketCountByEffectivePermission {
        crate::types::BucketCountByEffectivePermission {
            publicly_accessible: self.publicly_accessible.unwrap_or_default(),
            publicly_readable: self.publicly_readable.unwrap_or_default(),
            publicly_writable: self.publicly_writable.unwrap_or_default(),
            unknown: self.unknown.unwrap_or_default(),
        }
    }
}
