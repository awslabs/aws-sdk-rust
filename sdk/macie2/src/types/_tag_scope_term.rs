// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a tag-based condition that determines whether an S3 object is included or excluded from a classification job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TagScopeTerm {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).</p>
    pub comparator: ::std::option::Option<crate::types::JobComparator>,
    /// <p>The object property to use in the condition. The only valid value is TAG.</p>
    pub key: ::std::option::Option<::std::string::String>,
    /// <p>The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.</p>
    pub tag_values: ::std::option::Option<::std::vec::Vec<crate::types::TagValuePair>>,
    /// <p>The type of object to apply the condition to.</p>
    pub target: ::std::option::Option<crate::types::TagTarget>,
}
impl TagScopeTerm {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).</p>
    pub fn comparator(&self) -> ::std::option::Option<&crate::types::JobComparator> {
        self.comparator.as_ref()
    }
    /// <p>The object property to use in the condition. The only valid value is TAG.</p>
    pub fn key(&self) -> ::std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_values.is_none()`.
    pub fn tag_values(&self) -> &[crate::types::TagValuePair] {
        self.tag_values.as_deref().unwrap_or_default()
    }
    /// <p>The type of object to apply the condition to.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::TagTarget> {
        self.target.as_ref()
    }
}
impl TagScopeTerm {
    /// Creates a new builder-style object to manufacture [`TagScopeTerm`](crate::types::TagScopeTerm).
    pub fn builder() -> crate::types::builders::TagScopeTermBuilder {
        crate::types::builders::TagScopeTermBuilder::default()
    }
}

/// A builder for [`TagScopeTerm`](crate::types::TagScopeTerm).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TagScopeTermBuilder {
    pub(crate) comparator: ::std::option::Option<crate::types::JobComparator>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) tag_values: ::std::option::Option<::std::vec::Vec<crate::types::TagValuePair>>,
    pub(crate) target: ::std::option::Option<crate::types::TagTarget>,
}
impl TagScopeTermBuilder {
    /// <p>The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).</p>
    pub fn comparator(mut self, input: crate::types::JobComparator) -> Self {
        self.comparator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).</p>
    pub fn set_comparator(mut self, input: ::std::option::Option<crate::types::JobComparator>) -> Self {
        self.comparator = input;
        self
    }
    /// <p>The operator to use in the condition. Valid values are EQ (equals) or NE (not equals).</p>
    pub fn get_comparator(&self) -> &::std::option::Option<crate::types::JobComparator> {
        &self.comparator
    }
    /// <p>The object property to use in the condition. The only valid value is TAG.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The object property to use in the condition. The only valid value is TAG.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The object property to use in the condition. The only valid value is TAG.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// Appends an item to `tag_values`.
    ///
    /// To override the contents of this collection use [`set_tag_values`](Self::set_tag_values).
    ///
    /// <p>The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.</p>
    pub fn tag_values(mut self, input: crate::types::TagValuePair) -> Self {
        let mut v = self.tag_values.unwrap_or_default();
        v.push(input);
        self.tag_values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.</p>
    pub fn set_tag_values(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagValuePair>>) -> Self {
        self.tag_values = input;
        self
    }
    /// <p>The tag keys or tag key and value pairs to use in the condition. To specify only tag keys in a condition, specify the keys in this array and set the value for each associated tag value to an empty string.</p>
    pub fn get_tag_values(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagValuePair>> {
        &self.tag_values
    }
    /// <p>The type of object to apply the condition to.</p>
    pub fn target(mut self, input: crate::types::TagTarget) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of object to apply the condition to.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::TagTarget>) -> Self {
        self.target = input;
        self
    }
    /// <p>The type of object to apply the condition to.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::TagTarget> {
        &self.target
    }
    /// Consumes the builder and constructs a [`TagScopeTerm`](crate::types::TagScopeTerm).
    pub fn build(self) -> crate::types::TagScopeTerm {
        crate::types::TagScopeTerm {
            comparator: self.comparator,
            key: self.key,
            tag_values: self.tag_values,
            target: self.target,
        }
    }
}
