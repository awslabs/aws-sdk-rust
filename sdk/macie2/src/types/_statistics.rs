// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides processing statistics for a classification job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Statistics {
    /// <p>The approximate number of objects that the job has yet to process during its current run.</p>
    #[doc(hidden)]
    pub approximate_number_of_objects_to_process: f64,
    /// <p>The number of times that the job has run.</p>
    #[doc(hidden)]
    pub number_of_runs: f64,
}
impl Statistics {
    /// <p>The approximate number of objects that the job has yet to process during its current run.</p>
    pub fn approximate_number_of_objects_to_process(&self) -> f64 {
        self.approximate_number_of_objects_to_process
    }
    /// <p>The number of times that the job has run.</p>
    pub fn number_of_runs(&self) -> f64 {
        self.number_of_runs
    }
}
impl Statistics {
    /// Creates a new builder-style object to manufacture [`Statistics`](crate::types::Statistics).
    pub fn builder() -> crate::types::builders::StatisticsBuilder {
        crate::types::builders::StatisticsBuilder::default()
    }
}

/// A builder for [`Statistics`](crate::types::Statistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatisticsBuilder {
    pub(crate) approximate_number_of_objects_to_process: std::option::Option<f64>,
    pub(crate) number_of_runs: std::option::Option<f64>,
}
impl StatisticsBuilder {
    /// <p>The approximate number of objects that the job has yet to process during its current run.</p>
    pub fn approximate_number_of_objects_to_process(mut self, input: f64) -> Self {
        self.approximate_number_of_objects_to_process = Some(input);
        self
    }
    /// <p>The approximate number of objects that the job has yet to process during its current run.</p>
    pub fn set_approximate_number_of_objects_to_process(
        mut self,
        input: std::option::Option<f64>,
    ) -> Self {
        self.approximate_number_of_objects_to_process = input;
        self
    }
    /// <p>The number of times that the job has run.</p>
    pub fn number_of_runs(mut self, input: f64) -> Self {
        self.number_of_runs = Some(input);
        self
    }
    /// <p>The number of times that the job has run.</p>
    pub fn set_number_of_runs(mut self, input: std::option::Option<f64>) -> Self {
        self.number_of_runs = input;
        self
    }
    /// Consumes the builder and constructs a [`Statistics`](crate::types::Statistics).
    pub fn build(self) -> crate::types::Statistics {
        crate::types::Statistics {
            approximate_number_of_objects_to_process: self
                .approximate_number_of_objects_to_process
                .unwrap_or_default(),
            number_of_runs: self.number_of_runs.unwrap_or_default(),
        }
    }
}
