// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a current quota for an Amazon Macie account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceLimit {
    /// <p>Specifies whether the account has met the quota that corresponds to the metric specified by the UsageByAccount.type field in the response.</p>
    #[doc(hidden)]
    pub is_service_limited: bool,
    /// <p>The unit of measurement for the value specified by the value field.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::Unit>,
    /// <p>The value for the metric specified by the UsageByAccount.type field in the response.</p>
    #[doc(hidden)]
    pub value: i64,
}
impl ServiceLimit {
    /// <p>Specifies whether the account has met the quota that corresponds to the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn is_service_limited(&self) -> bool {
        self.is_service_limited
    }
    /// <p>The unit of measurement for the value specified by the value field.</p>
    pub fn unit(&self) -> std::option::Option<&crate::types::Unit> {
        self.unit.as_ref()
    }
    /// <p>The value for the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn value(&self) -> i64 {
        self.value
    }
}
impl ServiceLimit {
    /// Creates a new builder-style object to manufacture [`ServiceLimit`](crate::types::ServiceLimit).
    pub fn builder() -> crate::types::builders::ServiceLimitBuilder {
        crate::types::builders::ServiceLimitBuilder::default()
    }
}

/// A builder for [`ServiceLimit`](crate::types::ServiceLimit).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceLimitBuilder {
    pub(crate) is_service_limited: std::option::Option<bool>,
    pub(crate) unit: std::option::Option<crate::types::Unit>,
    pub(crate) value: std::option::Option<i64>,
}
impl ServiceLimitBuilder {
    /// <p>Specifies whether the account has met the quota that corresponds to the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn is_service_limited(mut self, input: bool) -> Self {
        self.is_service_limited = Some(input);
        self
    }
    /// <p>Specifies whether the account has met the quota that corresponds to the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn set_is_service_limited(mut self, input: std::option::Option<bool>) -> Self {
        self.is_service_limited = input;
        self
    }
    /// <p>The unit of measurement for the value specified by the value field.</p>
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit of measurement for the value specified by the value field.</p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The value for the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn value(mut self, input: i64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value for the metric specified by the UsageByAccount.type field in the response.</p>
    pub fn set_value(mut self, input: std::option::Option<i64>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceLimit`](crate::types::ServiceLimit).
    pub fn build(self) -> crate::types::ServiceLimit {
        crate::types::ServiceLimit {
            is_service_limited: self.is_service_limited.unwrap_or_default(),
            unit: self.unit,
            value: self.value.unwrap_or_default(),
        }
    }
}
