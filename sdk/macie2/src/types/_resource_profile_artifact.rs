// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about an S3 object that Amazon Macie selected for analysis while performing automated sensitive data discovery for an S3 bucket, and the status and results of the analysis. This information is available only if automated sensitive data discovery is currently enabled for your account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ResourceProfileArtifact {
    /// <p>The Amazon Resource Name (ARN) of the object.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the analysis. Possible values are:</p>
    /// <ul>
    /// <li><p>COMPLETE - Amazon Macie successfully completed its analysis of the object.</p></li>
    /// <li><p>PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.</p></li>
    /// <li><p>SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.</p></li>
    /// </ul>
    pub classification_result_status: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether Amazon Macie found sensitive data in the object.</p>
    pub sensitive: ::std::option::Option<bool>,
}
impl ResourceProfileArtifact {
    /// <p>The Amazon Resource Name (ARN) of the object.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the analysis. Possible values are:</p>
    /// <ul>
    /// <li><p>COMPLETE - Amazon Macie successfully completed its analysis of the object.</p></li>
    /// <li><p>PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.</p></li>
    /// <li><p>SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.</p></li>
    /// </ul>
    pub fn classification_result_status(&self) -> ::std::option::Option<&str> {
        self.classification_result_status.as_deref()
    }
    /// <p>Specifies whether Amazon Macie found sensitive data in the object.</p>
    pub fn sensitive(&self) -> ::std::option::Option<bool> {
        self.sensitive
    }
}
impl ResourceProfileArtifact {
    /// Creates a new builder-style object to manufacture [`ResourceProfileArtifact`](crate::types::ResourceProfileArtifact).
    pub fn builder() -> crate::types::builders::ResourceProfileArtifactBuilder {
        crate::types::builders::ResourceProfileArtifactBuilder::default()
    }
}

/// A builder for [`ResourceProfileArtifact`](crate::types::ResourceProfileArtifact).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ResourceProfileArtifactBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) classification_result_status: ::std::option::Option<::std::string::String>,
    pub(crate) sensitive: ::std::option::Option<bool>,
}
impl ResourceProfileArtifactBuilder {
    /// <p>The Amazon Resource Name (ARN) of the object.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the object.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the object.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The status of the analysis. Possible values are:</p>
    /// <ul>
    /// <li><p>COMPLETE - Amazon Macie successfully completed its analysis of the object.</p></li>
    /// <li><p>PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.</p></li>
    /// <li><p>SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.</p></li>
    /// </ul>
    /// This field is required.
    pub fn classification_result_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.classification_result_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the analysis. Possible values are:</p>
    /// <ul>
    /// <li><p>COMPLETE - Amazon Macie successfully completed its analysis of the object.</p></li>
    /// <li><p>PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.</p></li>
    /// <li><p>SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.</p></li>
    /// </ul>
    pub fn set_classification_result_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.classification_result_status = input;
        self
    }
    /// <p>The status of the analysis. Possible values are:</p>
    /// <ul>
    /// <li><p>COMPLETE - Amazon Macie successfully completed its analysis of the object.</p></li>
    /// <li><p>PARTIAL - Macie analyzed only a subset of data in the object. For example, the object is an archive file that contains files in an unsupported format.</p></li>
    /// <li><p>SKIPPED - Macie wasn't able to analyze the object. For example, the object is a malformed file.</p></li>
    /// </ul>
    pub fn get_classification_result_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.classification_result_status
    }
    /// <p>Specifies whether Amazon Macie found sensitive data in the object.</p>
    pub fn sensitive(mut self, input: bool) -> Self {
        self.sensitive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether Amazon Macie found sensitive data in the object.</p>
    pub fn set_sensitive(mut self, input: ::std::option::Option<bool>) -> Self {
        self.sensitive = input;
        self
    }
    /// <p>Specifies whether Amazon Macie found sensitive data in the object.</p>
    pub fn get_sensitive(&self) -> &::std::option::Option<bool> {
        &self.sensitive
    }
    /// Consumes the builder and constructs a [`ResourceProfileArtifact`](crate::types::ResourceProfileArtifact).
    pub fn build(self) -> crate::types::ResourceProfileArtifact {
        crate::types::ResourceProfileArtifact {
            arn: self.arn,
            classification_result_status: self.classification_result_status,
            sensitive: self.sensitive,
        }
    }
}
