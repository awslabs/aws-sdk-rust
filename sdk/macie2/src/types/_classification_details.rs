// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a sensitive data finding and the details of the finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClassificationDetails {
    /// <p>The path to the folder or file in Amazon S3 that contains the corresponding sensitive data discovery result for the finding. If a finding applies to a large archive or compressed file, this value is the path to a folder. Otherwise, this value is the path to a file.</p>
    #[doc(hidden)]
    pub detailed_results_location: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>Specifies how Amazon Macie found the sensitive data that produced the finding. Possible values are: SENSITIVE_DATA_DISCOVERY_JOB, for a classification job; and, AUTOMATED_SENSITIVE_DATA_DISCOVERY, for automated sensitive data discovery.</p>
    #[doc(hidden)]
    pub origin_type: std::option::Option<crate::types::OriginType>,
    /// <p>The status and other details of the finding.</p>
    #[doc(hidden)]
    pub result: std::option::Option<crate::types::ClassificationResult>,
}
impl ClassificationDetails {
    /// <p>The path to the folder or file in Amazon S3 that contains the corresponding sensitive data discovery result for the finding. If a finding applies to a large archive or compressed file, this value is the path to a folder. Otherwise, this value is the path to a file.</p>
    pub fn detailed_results_location(&self) -> std::option::Option<&str> {
        self.detailed_results_location.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The unique identifier for the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>Specifies how Amazon Macie found the sensitive data that produced the finding. Possible values are: SENSITIVE_DATA_DISCOVERY_JOB, for a classification job; and, AUTOMATED_SENSITIVE_DATA_DISCOVERY, for automated sensitive data discovery.</p>
    pub fn origin_type(&self) -> std::option::Option<&crate::types::OriginType> {
        self.origin_type.as_ref()
    }
    /// <p>The status and other details of the finding.</p>
    pub fn result(&self) -> std::option::Option<&crate::types::ClassificationResult> {
        self.result.as_ref()
    }
}
impl ClassificationDetails {
    /// Creates a new builder-style object to manufacture [`ClassificationDetails`](crate::types::ClassificationDetails).
    pub fn builder() -> crate::types::builders::ClassificationDetailsBuilder {
        crate::types::builders::ClassificationDetailsBuilder::default()
    }
}

/// A builder for [`ClassificationDetails`](crate::types::ClassificationDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClassificationDetailsBuilder {
    pub(crate) detailed_results_location: std::option::Option<std::string::String>,
    pub(crate) job_arn: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) origin_type: std::option::Option<crate::types::OriginType>,
    pub(crate) result: std::option::Option<crate::types::ClassificationResult>,
}
impl ClassificationDetailsBuilder {
    /// <p>The path to the folder or file in Amazon S3 that contains the corresponding sensitive data discovery result for the finding. If a finding applies to a large archive or compressed file, this value is the path to a folder. Otherwise, this value is the path to a file.</p>
    pub fn detailed_results_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.detailed_results_location = Some(input.into());
        self
    }
    /// <p>The path to the folder or file in Amazon S3 that contains the corresponding sensitive data discovery result for the finding. If a finding applies to a large archive or compressed file, this value is the path to a folder. Otherwise, this value is the path to a file.</p>
    pub fn set_detailed_results_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.detailed_results_location = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The unique identifier for the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the classification job that produced the finding. This value is null if the origin of the finding (originType) is AUTOMATED_SENSITIVE_DATA_DISCOVERY.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>Specifies how Amazon Macie found the sensitive data that produced the finding. Possible values are: SENSITIVE_DATA_DISCOVERY_JOB, for a classification job; and, AUTOMATED_SENSITIVE_DATA_DISCOVERY, for automated sensitive data discovery.</p>
    pub fn origin_type(mut self, input: crate::types::OriginType) -> Self {
        self.origin_type = Some(input);
        self
    }
    /// <p>Specifies how Amazon Macie found the sensitive data that produced the finding. Possible values are: SENSITIVE_DATA_DISCOVERY_JOB, for a classification job; and, AUTOMATED_SENSITIVE_DATA_DISCOVERY, for automated sensitive data discovery.</p>
    pub fn set_origin_type(mut self, input: std::option::Option<crate::types::OriginType>) -> Self {
        self.origin_type = input;
        self
    }
    /// <p>The status and other details of the finding.</p>
    pub fn result(mut self, input: crate::types::ClassificationResult) -> Self {
        self.result = Some(input);
        self
    }
    /// <p>The status and other details of the finding.</p>
    pub fn set_result(
        mut self,
        input: std::option::Option<crate::types::ClassificationResult>,
    ) -> Self {
        self.result = input;
        self
    }
    /// Consumes the builder and constructs a [`ClassificationDetails`](crate::types::ClassificationDetails).
    pub fn build(self) -> crate::types::ClassificationDetails {
        crate::types::ClassificationDetails {
            detailed_results_location: self.detailed_results_location,
            job_arn: self.job_arn,
            job_id: self.job_id,
            origin_type: self.origin_type,
            result: self.result,
        }
    }
}
