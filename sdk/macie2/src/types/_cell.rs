// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the location of an occurrence of sensitive data in a Microsoft Excel workbook, CSV file, or TSV file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Cell {
    /// <p>The location of the cell, as an absolute cell reference, that contains the sensitive data, for example Sheet2!C5 for cell C5 on Sheet2 in a Microsoft Excel workbook. This value is null for CSV and TSV files.</p>
    #[doc(hidden)]
    pub cell_reference: std::option::Option<std::string::String>,
    /// <p>The column number of the column that contains the sensitive data. For a Microsoft Excel workbook, this value correlates to the alphabetical character(s) for a column identifier, for example: 1 for column A, 2 for column B, and so on.</p>
    #[doc(hidden)]
    pub column: i64,
    /// <p>The name of the column that contains the sensitive data, if available.</p>
    #[doc(hidden)]
    pub column_name: std::option::Option<std::string::String>,
    /// <p>The row number of the row that contains the sensitive data.</p>
    #[doc(hidden)]
    pub row: i64,
}
impl Cell {
    /// <p>The location of the cell, as an absolute cell reference, that contains the sensitive data, for example Sheet2!C5 for cell C5 on Sheet2 in a Microsoft Excel workbook. This value is null for CSV and TSV files.</p>
    pub fn cell_reference(&self) -> std::option::Option<&str> {
        self.cell_reference.as_deref()
    }
    /// <p>The column number of the column that contains the sensitive data. For a Microsoft Excel workbook, this value correlates to the alphabetical character(s) for a column identifier, for example: 1 for column A, 2 for column B, and so on.</p>
    pub fn column(&self) -> i64 {
        self.column
    }
    /// <p>The name of the column that contains the sensitive data, if available.</p>
    pub fn column_name(&self) -> std::option::Option<&str> {
        self.column_name.as_deref()
    }
    /// <p>The row number of the row that contains the sensitive data.</p>
    pub fn row(&self) -> i64 {
        self.row
    }
}
impl Cell {
    /// Creates a new builder-style object to manufacture [`Cell`](crate::types::Cell).
    pub fn builder() -> crate::types::builders::CellBuilder {
        crate::types::builders::CellBuilder::default()
    }
}

/// A builder for [`Cell`](crate::types::Cell).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CellBuilder {
    pub(crate) cell_reference: std::option::Option<std::string::String>,
    pub(crate) column: std::option::Option<i64>,
    pub(crate) column_name: std::option::Option<std::string::String>,
    pub(crate) row: std::option::Option<i64>,
}
impl CellBuilder {
    /// <p>The location of the cell, as an absolute cell reference, that contains the sensitive data, for example Sheet2!C5 for cell C5 on Sheet2 in a Microsoft Excel workbook. This value is null for CSV and TSV files.</p>
    pub fn cell_reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.cell_reference = Some(input.into());
        self
    }
    /// <p>The location of the cell, as an absolute cell reference, that contains the sensitive data, for example Sheet2!C5 for cell C5 on Sheet2 in a Microsoft Excel workbook. This value is null for CSV and TSV files.</p>
    pub fn set_cell_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cell_reference = input;
        self
    }
    /// <p>The column number of the column that contains the sensitive data. For a Microsoft Excel workbook, this value correlates to the alphabetical character(s) for a column identifier, for example: 1 for column A, 2 for column B, and so on.</p>
    pub fn column(mut self, input: i64) -> Self {
        self.column = Some(input);
        self
    }
    /// <p>The column number of the column that contains the sensitive data. For a Microsoft Excel workbook, this value correlates to the alphabetical character(s) for a column identifier, for example: 1 for column A, 2 for column B, and so on.</p>
    pub fn set_column(mut self, input: std::option::Option<i64>) -> Self {
        self.column = input;
        self
    }
    /// <p>The name of the column that contains the sensitive data, if available.</p>
    pub fn column_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.column_name = Some(input.into());
        self
    }
    /// <p>The name of the column that contains the sensitive data, if available.</p>
    pub fn set_column_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.column_name = input;
        self
    }
    /// <p>The row number of the row that contains the sensitive data.</p>
    pub fn row(mut self, input: i64) -> Self {
        self.row = Some(input);
        self
    }
    /// <p>The row number of the row that contains the sensitive data.</p>
    pub fn set_row(mut self, input: std::option::Option<i64>) -> Self {
        self.row = input;
        self
    }
    /// Consumes the builder and constructs a [`Cell`](crate::types::Cell).
    pub fn build(self) -> crate::types::Cell {
        crate::types::Cell {
            cell_reference: self.cell_reference,
            column: self.column.unwrap_or_default(),
            column_name: self.column_name,
            row: self.row.unwrap_or_default(),
        }
    }
}
