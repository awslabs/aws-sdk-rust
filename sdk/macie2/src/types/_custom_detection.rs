// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about a custom data identifier that produced a sensitive data finding, and the sensitive data that it detected for the finding.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomDetection {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The total number of occurrences of the sensitive data that the custom data identifier detected.</p>
    #[doc(hidden)]
    pub count: i64,
    /// <p>The name of the custom data identifier.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The location of 1-15 occurrences of the sensitive data that the custom data identifier detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.</p>
    #[doc(hidden)]
    pub occurrences: std::option::Option<crate::types::Occurrences>,
}
impl CustomDetection {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The total number of occurrences of the sensitive data that the custom data identifier detected.</p>
    pub fn count(&self) -> i64 {
        self.count
    }
    /// <p>The name of the custom data identifier.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The location of 1-15 occurrences of the sensitive data that the custom data identifier detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.</p>
    pub fn occurrences(&self) -> std::option::Option<&crate::types::Occurrences> {
        self.occurrences.as_ref()
    }
}
impl CustomDetection {
    /// Creates a new builder-style object to manufacture [`CustomDetection`](crate::types::CustomDetection).
    pub fn builder() -> crate::types::builders::CustomDetectionBuilder {
        crate::types::builders::CustomDetectionBuilder::default()
    }
}

/// A builder for [`CustomDetection`](crate::types::CustomDetection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomDetectionBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) count: std::option::Option<i64>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) occurrences: std::option::Option<crate::types::Occurrences>,
}
impl CustomDetectionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The total number of occurrences of the sensitive data that the custom data identifier detected.</p>
    pub fn count(mut self, input: i64) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The total number of occurrences of the sensitive data that the custom data identifier detected.</p>
    pub fn set_count(mut self, input: std::option::Option<i64>) -> Self {
        self.count = input;
        self
    }
    /// <p>The name of the custom data identifier.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the custom data identifier.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The location of 1-15 occurrences of the sensitive data that the custom data identifier detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.</p>
    pub fn occurrences(mut self, input: crate::types::Occurrences) -> Self {
        self.occurrences = Some(input);
        self
    }
    /// <p>The location of 1-15 occurrences of the sensitive data that the custom data identifier detected. A finding includes location data for a maximum of 15 occurrences of sensitive data.</p>
    pub fn set_occurrences(
        mut self,
        input: std::option::Option<crate::types::Occurrences>,
    ) -> Self {
        self.occurrences = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomDetection`](crate::types::CustomDetection).
    pub fn build(self) -> crate::types::CustomDetection {
        crate::types::CustomDetection {
            arn: self.arn,
            count: self.count.unwrap_or_default(),
            name: self.name,
            occurrences: self.occurrences,
        }
    }
}
