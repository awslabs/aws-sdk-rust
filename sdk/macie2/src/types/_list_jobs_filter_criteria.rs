// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies criteria for filtering the results of a request for information about classification jobs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListJobsFilterCriteria {
    /// <p>An array of objects, one for each condition that determines which jobs to exclude from the results.</p>
    #[doc(hidden)]
    pub excludes: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
    /// <p>An array of objects, one for each condition that determines which jobs to include in the results.</p>
    #[doc(hidden)]
    pub includes: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
}
impl ListJobsFilterCriteria {
    /// <p>An array of objects, one for each condition that determines which jobs to exclude from the results.</p>
    pub fn excludes(&self) -> std::option::Option<&[crate::types::ListJobsFilterTerm]> {
        self.excludes.as_deref()
    }
    /// <p>An array of objects, one for each condition that determines which jobs to include in the results.</p>
    pub fn includes(&self) -> std::option::Option<&[crate::types::ListJobsFilterTerm]> {
        self.includes.as_deref()
    }
}
impl ListJobsFilterCriteria {
    /// Creates a new builder-style object to manufacture [`ListJobsFilterCriteria`](crate::types::ListJobsFilterCriteria).
    pub fn builder() -> crate::types::builders::ListJobsFilterCriteriaBuilder {
        crate::types::builders::ListJobsFilterCriteriaBuilder::default()
    }
}

/// A builder for [`ListJobsFilterCriteria`](crate::types::ListJobsFilterCriteria).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListJobsFilterCriteriaBuilder {
    pub(crate) excludes: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
    pub(crate) includes: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
}
impl ListJobsFilterCriteriaBuilder {
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>An array of objects, one for each condition that determines which jobs to exclude from the results.</p>
    pub fn excludes(mut self, input: crate::types::ListJobsFilterTerm) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = Some(v);
        self
    }
    /// <p>An array of objects, one for each condition that determines which jobs to exclude from the results.</p>
    pub fn set_excludes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
    ) -> Self {
        self.excludes = input;
        self
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>An array of objects, one for each condition that determines which jobs to include in the results.</p>
    pub fn includes(mut self, input: crate::types::ListJobsFilterTerm) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = Some(v);
        self
    }
    /// <p>An array of objects, one for each condition that determines which jobs to include in the results.</p>
    pub fn set_includes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ListJobsFilterTerm>>,
    ) -> Self {
        self.includes = input;
        self
    }
    /// Consumes the builder and constructs a [`ListJobsFilterCriteria`](crate::types::ListJobsFilterCriteria).
    pub fn build(self) -> crate::types::ListJobsFilterCriteria {
        crate::types::ListJobsFilterCriteria {
            excludes: self.excludes,
            includes: self.includes,
        }
    }
}
