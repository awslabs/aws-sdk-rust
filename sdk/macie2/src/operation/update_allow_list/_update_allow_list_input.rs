// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAllowListInput {
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression that defines a text pattern to ignore (regex).</p>
    /// <p>You can change a list's underlying criteria, such as the name of the S3 object or the regular expression to use. However, you can't change the type from s3WordsList to regex or the other way around.</p>
    #[doc(hidden)]
    pub criteria: std::option::Option<crate::types::AllowListCriteria>,
    /// <p>A custom description of the allow list. The description can contain as many as 512 characters.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A custom name for the allow list. The name can contain as many as 128 characters.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
}
impl UpdateAllowListInput {
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression that defines a text pattern to ignore (regex).</p>
    /// <p>You can change a list's underlying criteria, such as the name of the S3 object or the regular expression to use. However, you can't change the type from s3WordsList to regex or the other way around.</p>
    pub fn criteria(&self) -> std::option::Option<&crate::types::AllowListCriteria> {
        self.criteria.as_ref()
    }
    /// <p>A custom description of the allow list. The description can contain as many as 512 characters.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A custom name for the allow list. The name can contain as many as 128 characters.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
}
impl UpdateAllowListInput {
    /// Creates a new builder-style object to manufacture [`UpdateAllowListInput`](crate::operation::update_allow_list::UpdateAllowListInput).
    pub fn builder() -> crate::operation::update_allow_list::builders::UpdateAllowListInputBuilder {
        crate::operation::update_allow_list::builders::UpdateAllowListInputBuilder::default()
    }
}

/// A builder for [`UpdateAllowListInput`](crate::operation::update_allow_list::UpdateAllowListInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateAllowListInputBuilder {
    pub(crate) criteria: std::option::Option<crate::types::AllowListCriteria>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
}
impl UpdateAllowListInputBuilder {
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression that defines a text pattern to ignore (regex).</p>
    /// <p>You can change a list's underlying criteria, such as the name of the S3 object or the regular expression to use. However, you can't change the type from s3WordsList to regex or the other way around.</p>
    pub fn criteria(mut self, input: crate::types::AllowListCriteria) -> Self {
        self.criteria = Some(input);
        self
    }
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression that defines a text pattern to ignore (regex).</p>
    /// <p>You can change a list's underlying criteria, such as the name of the S3 object or the regular expression to use. However, you can't change the type from s3WordsList to regex or the other way around.</p>
    pub fn set_criteria(
        mut self,
        input: std::option::Option<crate::types::AllowListCriteria>,
    ) -> Self {
        self.criteria = input;
        self
    }
    /// <p>A custom description of the allow list. The description can contain as many as 512 characters.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A custom description of the allow list. The description can contain as many as 512 characters.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A custom name for the allow list. The name can contain as many as 128 characters.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>A custom name for the allow list. The name can contain as many as 128 characters.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAllowListInput`](crate::operation::update_allow_list::UpdateAllowListInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_allow_list::UpdateAllowListInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_allow_list::UpdateAllowListInput {
            criteria: self.criteria,
            description: self.description,
            id: self.id,
            name: self.name,
        })
    }
}
