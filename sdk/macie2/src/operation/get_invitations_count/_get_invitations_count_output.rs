// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInvitationsCountOutput {
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    #[doc(hidden)]
    pub invitations_count: i64,
    _request_id: Option<String>,
}
impl GetInvitationsCountOutput {
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    pub fn invitations_count(&self) -> i64 {
        self.invitations_count
    }
}
impl aws_http::request_id::RequestId for GetInvitationsCountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInvitationsCountOutput {
    /// Creates a new builder-style object to manufacture [`GetInvitationsCountOutput`](crate::operation::get_invitations_count::GetInvitationsCountOutput).
    pub fn builder(
    ) -> crate::operation::get_invitations_count::builders::GetInvitationsCountOutputBuilder {
        crate::operation::get_invitations_count::builders::GetInvitationsCountOutputBuilder::default(
        )
    }
}

/// A builder for [`GetInvitationsCountOutput`](crate::operation::get_invitations_count::GetInvitationsCountOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetInvitationsCountOutputBuilder {
    pub(crate) invitations_count: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetInvitationsCountOutputBuilder {
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    pub fn invitations_count(mut self, input: i64) -> Self {
        self.invitations_count = Some(input);
        self
    }
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    pub fn set_invitations_count(mut self, input: std::option::Option<i64>) -> Self {
        self.invitations_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInvitationsCountOutput`](crate::operation::get_invitations_count::GetInvitationsCountOutput).
    pub fn build(self) -> crate::operation::get_invitations_count::GetInvitationsCountOutput {
        crate::operation::get_invitations_count::GetInvitationsCountOutput {
            invitations_count: self.invitations_count.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
