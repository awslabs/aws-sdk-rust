// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListMembersInput {
    /// <p>The maximum number of items to include in each page of a paginated response.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.</p>
    pub only_associated: ::std::option::Option<::std::string::String>,
}
impl ListMembersInput {
    /// <p>The maximum number of items to include in each page of a paginated response.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.</p>
    pub fn only_associated(&self) -> ::std::option::Option<&str> {
        self.only_associated.as_deref()
    }
}
impl ListMembersInput {
    /// Creates a new builder-style object to manufacture [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
    pub fn builder() -> crate::operation::list_members::builders::ListMembersInputBuilder {
        crate::operation::list_members::builders::ListMembersInputBuilder::default()
    }
}

/// A builder for [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListMembersInputBuilder {
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) only_associated: ::std::option::Option<::std::string::String>,
}
impl ListMembersInputBuilder {
    /// <p>The maximum number of items to include in each page of a paginated response.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of items to include in each page of a paginated response.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.</p>
    pub fn only_associated(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.only_associated = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.</p>
    pub fn set_only_associated(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.only_associated = input;
        self
    }
    /// <p>Specifies which accounts to include in the response, based on the status of an account's relationship with the administrator account. By default, the response includes only current member accounts. To include all accounts, set this value to false.</p>
    pub fn get_only_associated(&self) -> &::std::option::Option<::std::string::String> {
        &self.only_associated
    }
    /// Consumes the builder and constructs a [`ListMembersInput`](crate::operation::list_members::ListMembersInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_members::ListMembersInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_members::ListMembersInput {
            max_results: self.max_results,
            next_token: self.next_token,
            only_associated: self.only_associated,
        })
    }
}
