// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestCustomDataIdentifierInput {
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.</p>
    #[doc(hidden)]
    pub ignore_words: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.</p>
    #[doc(hidden)]
    pub keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.</p>
    #[doc(hidden)]
    pub maximum_match_distance: i32,
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.</p>
    #[doc(hidden)]
    pub regex: std::option::Option<std::string::String>,
    /// <p>The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.</p>
    #[doc(hidden)]
    pub sample_text: std::option::Option<std::string::String>,
}
impl TestCustomDataIdentifierInput {
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.</p>
    pub fn ignore_words(&self) -> std::option::Option<&[std::string::String]> {
        self.ignore_words.as_deref()
    }
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.</p>
    pub fn keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.keywords.as_deref()
    }
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.</p>
    pub fn maximum_match_distance(&self) -> i32 {
        self.maximum_match_distance
    }
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.</p>
    pub fn regex(&self) -> std::option::Option<&str> {
        self.regex.as_deref()
    }
    /// <p>The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.</p>
    pub fn sample_text(&self) -> std::option::Option<&str> {
        self.sample_text.as_deref()
    }
}
impl TestCustomDataIdentifierInput {
    /// Creates a new builder-style object to manufacture [`TestCustomDataIdentifierInput`](crate::operation::test_custom_data_identifier::TestCustomDataIdentifierInput).
    pub fn builder(
    ) -> crate::operation::test_custom_data_identifier::builders::TestCustomDataIdentifierInputBuilder
    {
        crate::operation::test_custom_data_identifier::builders::TestCustomDataIdentifierInputBuilder::default()
    }
}

/// A builder for [`TestCustomDataIdentifierInput`](crate::operation::test_custom_data_identifier::TestCustomDataIdentifierInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestCustomDataIdentifierInputBuilder {
    pub(crate) ignore_words: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) maximum_match_distance: std::option::Option<i32>,
    pub(crate) regex: std::option::Option<std::string::String>,
    pub(crate) sample_text: std::option::Option<std::string::String>,
}
impl TestCustomDataIdentifierInputBuilder {
    /// Appends an item to `ignore_words`.
    ///
    /// To override the contents of this collection use [`set_ignore_words`](Self::set_ignore_words).
    ///
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.</p>
    pub fn ignore_words(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ignore_words.unwrap_or_default();
        v.push(input.into());
        self.ignore_words = Some(v);
        self
    }
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. The array can contain as many as 10 ignore words. Each ignore word can contain 4-90 UTF-8 characters. Ignore words are case sensitive.</p>
    pub fn set_ignore_words(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ignore_words = input;
        self
    }
    /// Appends an item to `keywords`.
    ///
    /// To override the contents of this collection use [`set_keywords`](Self::set_keywords).
    ///
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.</p>
    pub fn keywords(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.keywords.unwrap_or_default();
        v.push(input.into());
        self.keywords = Some(v);
        self
    }
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. The array can contain as many as 50 keywords. Each keyword can contain 3-90 UTF-8 characters. Keywords aren't case sensitive.</p>
    pub fn set_keywords(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.keywords = input;
        self
    }
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.</p>
    pub fn maximum_match_distance(mut self, input: i32) -> Self {
        self.maximum_match_distance = Some(input);
        self
    }
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. The distance can be 1-300 characters. The default value is 50.</p>
    pub fn set_maximum_match_distance(mut self, input: std::option::Option<i32>) -> Self {
        self.maximum_match_distance = input;
        self
    }
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.</p>
    pub fn regex(mut self, input: impl Into<std::string::String>) -> Self {
        self.regex = Some(input.into());
        self
    }
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match. The expression can contain as many as 512 characters.</p>
    pub fn set_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.regex = input;
        self
    }
    /// <p>The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.</p>
    pub fn sample_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.sample_text = Some(input.into());
        self
    }
    /// <p>The sample text to inspect by using the custom data identifier. The text can contain as many as 1,000 characters.</p>
    pub fn set_sample_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sample_text = input;
        self
    }
    /// Consumes the builder and constructs a [`TestCustomDataIdentifierInput`](crate::operation::test_custom_data_identifier::TestCustomDataIdentifierInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_custom_data_identifier::TestCustomDataIdentifierInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::test_custom_data_identifier::TestCustomDataIdentifierInput {
                ignore_words: self.ignore_words,
                keywords: self.keywords,
                maximum_match_distance: self.maximum_match_distance.unwrap_or_default(),
                regex: self.regex,
                sample_text: self.sample_text,
            },
        )
    }
}
