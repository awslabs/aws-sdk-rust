// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_findings_filter::_update_findings_filter_output::UpdateFindingsFilterOutputBuilder;

pub use crate::operation::update_findings_filter::_update_findings_filter_input::UpdateFindingsFilterInputBuilder;

/// Fluent builder constructing a request to `UpdateFindingsFilter`.
///
/// <p>Updates the criteria and other settings for a findings filter.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateFindingsFilterFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_findings_filter::builders::UpdateFindingsFilterInputBuilder,
}
impl UpdateFindingsFilterFluentBuilder {
    /// Creates a new `UpdateFindingsFilter`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_findings_filter::UpdateFindingsFilter,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_findings_filter::UpdateFindingsFilterError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_findings_filter::UpdateFindingsFilterOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_findings_filter::UpdateFindingsFilterError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The action to perform on findings that match the filter criteria (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
    pub fn action(mut self, input: crate::types::FindingsFilterAction) -> Self {
        self.inner = self.inner.action(input);
        self
    }
    /// <p>The action to perform on findings that match the filter criteria (findingCriteria). Valid values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
    pub fn set_action(
        mut self,
        input: std::option::Option<crate::types::FindingsFilterAction>,
    ) -> Self {
        self.inner = self.inner.set_action(input);
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive token that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A custom description of the filter. The description can contain as many as 512 characters.</p>
    /// <p>We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A custom description of the filter. The description can contain as many as 512 characters.</p>
    /// <p>We strongly recommend that you avoid including any sensitive data in the description of a filter. Other users might be able to see this description, depending on the actions that they're allowed to perform in Amazon Macie.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The criteria to use to filter findings.</p>
    pub fn finding_criteria(mut self, input: crate::types::FindingCriteria) -> Self {
        self.inner = self.inner.finding_criteria(input);
        self
    }
    /// <p>The criteria to use to filter findings.</p>
    pub fn set_finding_criteria(
        mut self,
        input: std::option::Option<crate::types::FindingCriteria>,
    ) -> Self {
        self.inner = self.inner.set_finding_criteria(input);
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters.</p>
    /// <p>We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>A custom name for the filter. The name must contain at least 3 characters and can contain as many as 64 characters.</p>
    /// <p>We strongly recommend that you avoid including any sensitive data in the name of a filter. Other users might be able to see this name, depending on the actions that they're allowed to perform in Amazon Macie.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
    pub fn position(mut self, input: i32) -> Self {
        self.inner = self.inner.position(input);
        self
    }
    /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
    pub fn set_position(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_position(input);
        self
    }
}
