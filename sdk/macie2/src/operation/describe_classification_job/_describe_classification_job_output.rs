// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClassificationJobOutput {
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    #[doc(hidden)]
    pub allow_list_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    #[doc(hidden)]
    pub custom_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The custom description of the job.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    #[doc(hidden)]
    pub initial_run: bool,
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub job_type: std::option::Option<crate::types::JobType>,
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    #[doc(hidden)]
    pub last_run_error_status: std::option::Option<crate::types::LastRunErrorStatus>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    #[doc(hidden)]
    pub last_run_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    #[doc(hidden)]
    pub managed_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    #[doc(hidden)]
    pub managed_data_identifier_selector:
        std::option::Option<crate::types::ManagedDataIdentifierSelector>,
    /// <p>The custom name of the job.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    #[doc(hidden)]
    pub s3_job_definition: std::option::Option<crate::types::S3JobDefinition>,
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    #[doc(hidden)]
    pub sampling_percentage: i32,
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    #[doc(hidden)]
    pub schedule_frequency: std::option::Option<crate::types::JobScheduleFrequency>,
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::types::Statistics>,
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    #[doc(hidden)]
    pub user_paused_details: std::option::Option<crate::types::UserPausedDetails>,
    _request_id: Option<String>,
}
impl DescribeClassificationJobOutput {
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    pub fn allow_list_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.allow_list_ids.as_deref()
    }
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    pub fn custom_data_identifier_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.custom_data_identifier_ids.as_deref()
    }
    /// <p>The custom description of the job.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    pub fn initial_run(&self) -> bool {
        self.initial_run
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The unique identifier for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    pub fn job_type(&self) -> std::option::Option<&crate::types::JobType> {
        self.job_type.as_ref()
    }
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    pub fn last_run_error_status(&self) -> std::option::Option<&crate::types::LastRunErrorStatus> {
        self.last_run_error_status.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    pub fn last_run_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_run_time.as_ref()
    }
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    pub fn managed_data_identifier_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.managed_data_identifier_ids.as_deref()
    }
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    pub fn managed_data_identifier_selector(
        &self,
    ) -> std::option::Option<&crate::types::ManagedDataIdentifierSelector> {
        self.managed_data_identifier_selector.as_ref()
    }
    /// <p>The custom name of the job.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    pub fn s3_job_definition(&self) -> std::option::Option<&crate::types::S3JobDefinition> {
        self.s3_job_definition.as_ref()
    }
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    pub fn sampling_percentage(&self) -> i32 {
        self.sampling_percentage
    }
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    pub fn schedule_frequency(&self) -> std::option::Option<&crate::types::JobScheduleFrequency> {
        self.schedule_frequency.as_ref()
    }
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::types::Statistics> {
        self.statistics.as_ref()
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    pub fn user_paused_details(&self) -> std::option::Option<&crate::types::UserPausedDetails> {
        self.user_paused_details.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeClassificationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeClassificationJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClassificationJobOutput`](crate::operation::describe_classification_job::DescribeClassificationJobOutput).
    pub fn builder() -> crate::operation::describe_classification_job::builders::DescribeClassificationJobOutputBuilder{
        crate::operation::describe_classification_job::builders::DescribeClassificationJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeClassificationJobOutput`](crate::operation::describe_classification_job::DescribeClassificationJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeClassificationJobOutputBuilder {
    pub(crate) allow_list_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) custom_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) initial_run: std::option::Option<bool>,
    pub(crate) job_arn: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) job_type: std::option::Option<crate::types::JobType>,
    pub(crate) last_run_error_status: std::option::Option<crate::types::LastRunErrorStatus>,
    pub(crate) last_run_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) managed_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) managed_data_identifier_selector:
        std::option::Option<crate::types::ManagedDataIdentifierSelector>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) s3_job_definition: std::option::Option<crate::types::S3JobDefinition>,
    pub(crate) sampling_percentage: std::option::Option<i32>,
    pub(crate) schedule_frequency: std::option::Option<crate::types::JobScheduleFrequency>,
    pub(crate) statistics: std::option::Option<crate::types::Statistics>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) user_paused_details: std::option::Option<crate::types::UserPausedDetails>,
    _request_id: Option<String>,
}
impl DescribeClassificationJobOutputBuilder {
    /// Appends an item to `allow_list_ids`.
    ///
    /// To override the contents of this collection use [`set_allow_list_ids`](Self::set_allow_list_ids).
    ///
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    pub fn allow_list_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.allow_list_ids.unwrap_or_default();
        v.push(input.into());
        self.allow_list_ids = Some(v);
        self
    }
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    pub fn set_allow_list_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.allow_list_ids = input;
        self
    }
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// Appends an item to `custom_data_identifier_ids`.
    ///
    /// To override the contents of this collection use [`set_custom_data_identifier_ids`](Self::set_custom_data_identifier_ids).
    ///
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    pub fn custom_data_identifier_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.custom_data_identifier_ids.unwrap_or_default();
        v.push(input.into());
        self.custom_data_identifier_ids = Some(v);
        self
    }
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    pub fn set_custom_data_identifier_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.custom_data_identifier_ids = input;
        self
    }
    /// <p>The custom description of the job.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The custom description of the job.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    pub fn initial_run(mut self, input: bool) -> Self {
        self.initial_run = Some(input);
        self
    }
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    pub fn set_initial_run(mut self, input: std::option::Option<bool>) -> Self {
        self.initial_run = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_arn = input;
        self
    }
    /// <p>The unique identifier for the job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    pub fn job_type(mut self, input: crate::types::JobType) -> Self {
        self.job_type = Some(input);
        self
    }
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    pub fn set_job_type(mut self, input: std::option::Option<crate::types::JobType>) -> Self {
        self.job_type = input;
        self
    }
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    pub fn last_run_error_status(mut self, input: crate::types::LastRunErrorStatus) -> Self {
        self.last_run_error_status = Some(input);
        self
    }
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    pub fn set_last_run_error_status(
        mut self,
        input: std::option::Option<crate::types::LastRunErrorStatus>,
    ) -> Self {
        self.last_run_error_status = input;
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    pub fn last_run_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_run_time = Some(input);
        self
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    pub fn set_last_run_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_run_time = input;
        self
    }
    /// Appends an item to `managed_data_identifier_ids`.
    ///
    /// To override the contents of this collection use [`set_managed_data_identifier_ids`](Self::set_managed_data_identifier_ids).
    ///
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    pub fn managed_data_identifier_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.managed_data_identifier_ids.unwrap_or_default();
        v.push(input.into());
        self.managed_data_identifier_ids = Some(v);
        self
    }
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    pub fn set_managed_data_identifier_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.managed_data_identifier_ids = input;
        self
    }
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    pub fn managed_data_identifier_selector(
        mut self,
        input: crate::types::ManagedDataIdentifierSelector,
    ) -> Self {
        self.managed_data_identifier_selector = Some(input);
        self
    }
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    pub fn set_managed_data_identifier_selector(
        mut self,
        input: std::option::Option<crate::types::ManagedDataIdentifierSelector>,
    ) -> Self {
        self.managed_data_identifier_selector = input;
        self
    }
    /// <p>The custom name of the job.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The custom name of the job.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    pub fn s3_job_definition(mut self, input: crate::types::S3JobDefinition) -> Self {
        self.s3_job_definition = Some(input);
        self
    }
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    pub fn set_s3_job_definition(
        mut self,
        input: std::option::Option<crate::types::S3JobDefinition>,
    ) -> Self {
        self.s3_job_definition = input;
        self
    }
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    pub fn sampling_percentage(mut self, input: i32) -> Self {
        self.sampling_percentage = Some(input);
        self
    }
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    pub fn set_sampling_percentage(mut self, input: std::option::Option<i32>) -> Self {
        self.sampling_percentage = input;
        self
    }
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    pub fn schedule_frequency(mut self, input: crate::types::JobScheduleFrequency) -> Self {
        self.schedule_frequency = Some(input);
        self
    }
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    pub fn set_schedule_frequency(
        mut self,
        input: std::option::Option<crate::types::JobScheduleFrequency>,
    ) -> Self {
        self.schedule_frequency = input;
        self
    }
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    pub fn statistics(mut self, input: crate::types::Statistics) -> Self {
        self.statistics = Some(input);
        self
    }
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    pub fn set_statistics(mut self, input: std::option::Option<crate::types::Statistics>) -> Self {
        self.statistics = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    pub fn user_paused_details(mut self, input: crate::types::UserPausedDetails) -> Self {
        self.user_paused_details = Some(input);
        self
    }
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    pub fn set_user_paused_details(
        mut self,
        input: std::option::Option<crate::types::UserPausedDetails>,
    ) -> Self {
        self.user_paused_details = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeClassificationJobOutput`](crate::operation::describe_classification_job::DescribeClassificationJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_classification_job::DescribeClassificationJobOutput {
        crate::operation::describe_classification_job::DescribeClassificationJobOutput {
            allow_list_ids: self.allow_list_ids,
            client_token: self.client_token,
            created_at: self.created_at,
            custom_data_identifier_ids: self.custom_data_identifier_ids,
            description: self.description,
            initial_run: self.initial_run.unwrap_or_default(),
            job_arn: self.job_arn,
            job_id: self.job_id,
            job_status: self.job_status,
            job_type: self.job_type,
            last_run_error_status: self.last_run_error_status,
            last_run_time: self.last_run_time,
            managed_data_identifier_ids: self.managed_data_identifier_ids,
            managed_data_identifier_selector: self.managed_data_identifier_selector,
            name: self.name,
            s3_job_definition: self.s3_job_definition,
            sampling_percentage: self.sampling_percentage.unwrap_or_default(),
            schedule_frequency: self.schedule_frequency,
            statistics: self.statistics,
            tags: self.tags,
            user_paused_details: self.user_paused_details,
            _request_id: self._request_id,
        }
    }
}
