// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_sensitivity_inspection_template::_update_sensitivity_inspection_template_output::UpdateSensitivityInspectionTemplateOutputBuilder;

pub use crate::operation::update_sensitivity_inspection_template::_update_sensitivity_inspection_template_input::UpdateSensitivityInspectionTemplateInputBuilder;

/// Fluent builder constructing a request to `UpdateSensitivityInspectionTemplate`.
///
/// <p>Updates the settings for the sensitivity inspection template for an account.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSensitivityInspectionTemplateFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_sensitivity_inspection_template::builders::UpdateSensitivityInspectionTemplateInputBuilder
            }
impl UpdateSensitivityInspectionTemplateFluentBuilder {
    /// Creates a new `UpdateSensitivityInspectionTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_sensitivity_inspection_template::UpdateSensitivityInspectionTemplate, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_sensitivity_inspection_template::UpdateSensitivityInspectionTemplateError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_sensitivity_inspection_template::UpdateSensitivityInspectionTemplateOutput, aws_smithy_http::result::SdkError<crate::operation::update_sensitivity_inspection_template::UpdateSensitivityInspectionTemplateError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A custom description of the template.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A custom description of the template.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The managed data identifiers to explicitly exclude (not use) when analyzing data.</p>
    /// <p>To exclude an allow list or custom data identifier that's currently included by the template, update the values for the SensitivityInspectionTemplateIncludes.allowListIds and SensitivityInspectionTemplateIncludes.customDataIdentifierIds properties, respectively.</p>
    pub fn excludes(mut self, input: crate::types::SensitivityInspectionTemplateExcludes) -> Self {
        self.inner = self.inner.excludes(input);
        self
    }
    /// <p>The managed data identifiers to explicitly exclude (not use) when analyzing data.</p>
    /// <p>To exclude an allow list or custom data identifier that's currently included by the template, update the values for the SensitivityInspectionTemplateIncludes.allowListIds and SensitivityInspectionTemplateIncludes.customDataIdentifierIds properties, respectively.</p>
    pub fn set_excludes(
        mut self,
        input: std::option::Option<crate::types::SensitivityInspectionTemplateExcludes>,
    ) -> Self {
        self.inner = self.inner.set_excludes(input);
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.id(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Macie resource that the request applies to.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_id(input);
        self
    }
    /// <p>The allow lists, custom data identifiers, and managed data identifiers to include (use) when analyzing data.</p>
    pub fn includes(mut self, input: crate::types::SensitivityInspectionTemplateIncludes) -> Self {
        self.inner = self.inner.includes(input);
        self
    }
    /// <p>The allow lists, custom data identifiers, and managed data identifiers to include (use) when analyzing data.</p>
    pub fn set_includes(
        mut self,
        input: std::option::Option<crate::types::SensitivityInspectionTemplateIncludes>,
    ) -> Self {
        self.inner = self.inner.set_includes(input);
        self
    }
}
