// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetUsageTotalsInput {
    /// <p>The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.</p>
    pub time_range: ::std::option::Option<::std::string::String>,
}
impl GetUsageTotalsInput {
    /// <p>The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.</p>
    pub fn time_range(&self) -> ::std::option::Option<&str> {
        self.time_range.as_deref()
    }
}
impl GetUsageTotalsInput {
    /// Creates a new builder-style object to manufacture [`GetUsageTotalsInput`](crate::operation::get_usage_totals::GetUsageTotalsInput).
    pub fn builder() -> crate::operation::get_usage_totals::builders::GetUsageTotalsInputBuilder {
        crate::operation::get_usage_totals::builders::GetUsageTotalsInputBuilder::default()
    }
}

/// A builder for [`GetUsageTotalsInput`](crate::operation::get_usage_totals::GetUsageTotalsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetUsageTotalsInputBuilder {
    pub(crate) time_range: ::std::option::Option<::std::string::String>,
}
impl GetUsageTotalsInputBuilder {
    /// <p>The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.</p>
    pub fn time_range(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_range = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.</p>
    pub fn set_time_range(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_range = input;
        self
    }
    /// <p>The inclusive time period to retrieve the data for. Valid values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days. If you don't specify a value for this parameter, Amazon Macie provides aggregated usage data for the preceding 30 days.</p>
    pub fn get_time_range(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_range
    }
    /// Consumes the builder and constructs a [`GetUsageTotalsInput`](crate::operation::get_usage_totals::GetUsageTotalsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_usage_totals::GetUsageTotalsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_usage_totals::GetUsageTotalsInput { time_range: self.time_range })
    }
}
