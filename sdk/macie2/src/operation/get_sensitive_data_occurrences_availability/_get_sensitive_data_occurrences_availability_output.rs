// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrencesAvailabilityOutput {
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::AvailabilityCode>,
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    #[doc(hidden)]
    pub reasons: std::option::Option<std::vec::Vec<crate::types::UnavailabilityReasonCode>>,
    _request_id: Option<String>,
}
impl GetSensitiveDataOccurrencesAvailabilityOutput {
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    pub fn code(&self) -> std::option::Option<&crate::types::AvailabilityCode> {
        self.code.as_ref()
    }
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    pub fn reasons(&self) -> std::option::Option<&[crate::types::UnavailabilityReasonCode]> {
        self.reasons.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSensitiveDataOccurrencesAvailabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSensitiveDataOccurrencesAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::operation::get_sensitive_data_occurrences_availability::GetSensitiveDataOccurrencesAvailabilityOutput).
    pub fn builder() -> crate::operation::get_sensitive_data_occurrences_availability::builders::GetSensitiveDataOccurrencesAvailabilityOutputBuilder{
        crate::operation::get_sensitive_data_occurrences_availability::builders::GetSensitiveDataOccurrencesAvailabilityOutputBuilder::default()
    }
}

/// A builder for [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::operation::get_sensitive_data_occurrences_availability::GetSensitiveDataOccurrencesAvailabilityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrencesAvailabilityOutputBuilder {
    pub(crate) code: std::option::Option<crate::types::AvailabilityCode>,
    pub(crate) reasons: std::option::Option<std::vec::Vec<crate::types::UnavailabilityReasonCode>>,
    _request_id: Option<String>,
}
impl GetSensitiveDataOccurrencesAvailabilityOutputBuilder {
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    pub fn code(mut self, input: crate::types::AvailabilityCode) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    pub fn set_code(mut self, input: std::option::Option<crate::types::AvailabilityCode>) -> Self {
        self.code = input;
        self
    }
    /// Appends an item to `reasons`.
    ///
    /// To override the contents of this collection use [`set_reasons`](Self::set_reasons).
    ///
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    pub fn reasons(mut self, input: crate::types::UnavailabilityReasonCode) -> Self {
        let mut v = self.reasons.unwrap_or_default();
        v.push(input);
        self.reasons = Some(v);
        self
    }
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    pub fn set_reasons(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UnavailabilityReasonCode>>,
    ) -> Self {
        self.reasons = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::operation::get_sensitive_data_occurrences_availability::GetSensitiveDataOccurrencesAvailabilityOutput).
    pub fn build(self) -> crate::operation::get_sensitive_data_occurrences_availability::GetSensitiveDataOccurrencesAvailabilityOutput{
        crate::operation::get_sensitive_data_occurrences_availability::GetSensitiveDataOccurrencesAvailabilityOutput {
            code: self.code
            ,
            reasons: self.reasons
            ,
            _request_id: self._request_id,
        }
    }
}
