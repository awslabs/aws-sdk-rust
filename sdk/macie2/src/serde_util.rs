// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn unprocessable_entity_exception_correct_errors(
    mut builder: crate::types::error::builders::UnprocessableEntityExceptionBuilder,
) -> crate::types::error::builders::UnprocessableEntityExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn allow_list_status_correct_errors(
    mut builder: crate::types::builders::AllowListStatusBuilder,
) -> crate::types::builders::AllowListStatusBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::AllowListStatusCode>().ok()
    }
    builder
}

pub(crate) fn reveal_configuration_correct_errors(
    mut builder: crate::types::builders::RevealConfigurationBuilder,
) -> crate::types::builders::RevealConfigurationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RevealStatus>().ok()
    }
    builder
}

pub(crate) fn s3_classification_scope_correct_errors(
    mut builder: crate::types::builders::S3ClassificationScopeBuilder,
) -> crate::types::builders::S3ClassificationScopeBuilder {
    if builder.excludes.is_none() {
        builder.excludes = {
            let builder = crate::types::builders::S3ClassificationScopeExclusionBuilder::default();
            Some(crate::serde_util::s3_classification_scope_exclusion_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn security_hub_configuration_correct_errors(
    mut builder: crate::types::builders::SecurityHubConfigurationBuilder,
) -> crate::types::builders::SecurityHubConfigurationBuilder {
    if builder.publish_classification_findings.is_none() {
        builder.publish_classification_findings = Some(Default::default())
    }
    if builder.publish_policy_findings.is_none() {
        builder.publish_policy_findings = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_profile_artifact_correct_errors(
    mut builder: crate::types::builders::ResourceProfileArtifactBuilder,
) -> crate::types::builders::ResourceProfileArtifactBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.classification_result_status.is_none() {
        builder.classification_result_status = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_classification_scope_exclusion_correct_errors(
    mut builder: crate::types::builders::S3ClassificationScopeExclusionBuilder,
) -> crate::types::builders::S3ClassificationScopeExclusionBuilder {
    if builder.bucket_names.is_none() {
        builder.bucket_names = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_destination_correct_errors(
    mut builder: crate::types::builders::S3DestinationBuilder,
) -> crate::types::builders::S3DestinationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_words_list_correct_errors(mut builder: crate::types::builders::S3WordsListBuilder) -> crate::types::builders::S3WordsListBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    if builder.object_key.is_none() {
        builder.object_key = Some(Default::default())
    }
    builder
}

pub(crate) fn severity_level_correct_errors(
    mut builder: crate::types::builders::SeverityLevelBuilder,
) -> crate::types::builders::SeverityLevelBuilder {
    if builder.occurrences_threshold.is_none() {
        builder.occurrences_threshold = Some(Default::default())
    }
    if builder.severity.is_none() {
        builder.severity = "no value was set".parse::<crate::types::DataIdentifierSeverity>().ok()
    }
    builder
}

pub(crate) fn detected_data_details_correct_errors(
    mut builder: crate::types::builders::DetectedDataDetailsBuilder,
) -> crate::types::builders::DetectedDataDetailsBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_bucket_definition_for_job_correct_errors(
    mut builder: crate::types::builders::S3BucketDefinitionForJobBuilder,
) -> crate::types::builders::S3BucketDefinitionForJobBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.buckets.is_none() {
        builder.buckets = Some(Default::default())
    }
    builder
}
