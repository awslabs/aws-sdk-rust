// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AcceptInvitation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`accept_invitation`](crate::client::fluent_builders::AcceptInvitation).
///
/// `ParseStrictResponse` impl for `AcceptInvitation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AcceptInvitation {
    _private: (),
}
impl AcceptInvitation {
    /// Creates a new builder-style object to manufacture [`AcceptInvitationInput`](crate::input::AcceptInvitationInput).
    pub fn builder() -> crate::input::accept_invitation_input::Builder {
        crate::input::accept_invitation_input::Builder::default()
    }
    /// Creates a new `AcceptInvitation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AcceptInvitation {
    type Output = std::result::Result<
        crate::output::AcceptInvitationOutput,
        crate::error::AcceptInvitationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_accept_invitation::de_accept_invitation_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_accept_invitation::de_accept_invitation_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `BatchGetCustomDataIdentifiers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_get_custom_data_identifiers`](crate::client::fluent_builders::BatchGetCustomDataIdentifiers).
///
/// `ParseStrictResponse` impl for `BatchGetCustomDataIdentifiers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchGetCustomDataIdentifiers {
    _private: (),
}
impl BatchGetCustomDataIdentifiers {
    /// Creates a new builder-style object to manufacture [`BatchGetCustomDataIdentifiersInput`](crate::input::BatchGetCustomDataIdentifiersInput).
    pub fn builder() -> crate::input::batch_get_custom_data_identifiers_input::Builder {
        crate::input::batch_get_custom_data_identifiers_input::Builder::default()
    }
    /// Creates a new `BatchGetCustomDataIdentifiers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchGetCustomDataIdentifiers {
    type Output = std::result::Result<
        crate::output::BatchGetCustomDataIdentifiersOutput,
        crate::error::BatchGetCustomDataIdentifiersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_get_custom_data_identifiers::de_batch_get_custom_data_identifiers_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_get_custom_data_identifiers::de_batch_get_custom_data_identifiers_http_response(response)
        }
    }
}

/// Operation shape for `CreateAllowList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_allow_list`](crate::client::fluent_builders::CreateAllowList).
///
/// `ParseStrictResponse` impl for `CreateAllowList`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAllowList {
    _private: (),
}
impl CreateAllowList {
    /// Creates a new builder-style object to manufacture [`CreateAllowListInput`](crate::input::CreateAllowListInput).
    pub fn builder() -> crate::input::create_allow_list_input::Builder {
        crate::input::create_allow_list_input::Builder::default()
    }
    /// Creates a new `CreateAllowList` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAllowList {
    type Output = std::result::Result<
        crate::output::CreateAllowListOutput,
        crate::error::CreateAllowListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_allow_list::de_create_allow_list_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_allow_list::de_create_allow_list_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateClassificationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_classification_job`](crate::client::fluent_builders::CreateClassificationJob).
///
/// `ParseStrictResponse` impl for `CreateClassificationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateClassificationJob {
    _private: (),
}
impl CreateClassificationJob {
    /// Creates a new builder-style object to manufacture [`CreateClassificationJobInput`](crate::input::CreateClassificationJobInput).
    pub fn builder() -> crate::input::create_classification_job_input::Builder {
        crate::input::create_classification_job_input::Builder::default()
    }
    /// Creates a new `CreateClassificationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateClassificationJob {
    type Output = std::result::Result<
        crate::output::CreateClassificationJobOutput,
        crate::error::CreateClassificationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_classification_job::de_create_classification_job_http_error(response)
        } else {
            crate::protocol_serde::shape_create_classification_job::de_create_classification_job_http_response(response)
        }
    }
}

/// Operation shape for `CreateCustomDataIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_custom_data_identifier`](crate::client::fluent_builders::CreateCustomDataIdentifier).
///
/// `ParseStrictResponse` impl for `CreateCustomDataIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomDataIdentifier {
    _private: (),
}
impl CreateCustomDataIdentifier {
    /// Creates a new builder-style object to manufacture [`CreateCustomDataIdentifierInput`](crate::input::CreateCustomDataIdentifierInput).
    pub fn builder() -> crate::input::create_custom_data_identifier_input::Builder {
        crate::input::create_custom_data_identifier_input::Builder::default()
    }
    /// Creates a new `CreateCustomDataIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCustomDataIdentifier {
    type Output = std::result::Result<
        crate::output::CreateCustomDataIdentifierOutput,
        crate::error::CreateCustomDataIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_custom_data_identifier::de_create_custom_data_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_create_custom_data_identifier::de_create_custom_data_identifier_http_response(response)
        }
    }
}

/// Operation shape for `CreateFindingsFilter`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_findings_filter`](crate::client::fluent_builders::CreateFindingsFilter).
///
/// `ParseStrictResponse` impl for `CreateFindingsFilter`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateFindingsFilter {
    _private: (),
}
impl CreateFindingsFilter {
    /// Creates a new builder-style object to manufacture [`CreateFindingsFilterInput`](crate::input::CreateFindingsFilterInput).
    pub fn builder() -> crate::input::create_findings_filter_input::Builder {
        crate::input::create_findings_filter_input::Builder::default()
    }
    /// Creates a new `CreateFindingsFilter` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateFindingsFilter {
    type Output = std::result::Result<
        crate::output::CreateFindingsFilterOutput,
        crate::error::CreateFindingsFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_findings_filter::de_create_findings_filter_http_error(response)
        } else {
            crate::protocol_serde::shape_create_findings_filter::de_create_findings_filter_http_response(response)
        }
    }
}

/// Operation shape for `CreateInvitations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_invitations`](crate::client::fluent_builders::CreateInvitations).
///
/// `ParseStrictResponse` impl for `CreateInvitations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateInvitations {
    _private: (),
}
impl CreateInvitations {
    /// Creates a new builder-style object to manufacture [`CreateInvitationsInput`](crate::input::CreateInvitationsInput).
    pub fn builder() -> crate::input::create_invitations_input::Builder {
        crate::input::create_invitations_input::Builder::default()
    }
    /// Creates a new `CreateInvitations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateInvitations {
    type Output = std::result::Result<
        crate::output::CreateInvitationsOutput,
        crate::error::CreateInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_invitations::de_create_invitations_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_invitations::de_create_invitations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_member`](crate::client::fluent_builders::CreateMember).
///
/// `ParseStrictResponse` impl for `CreateMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateMember {
    _private: (),
}
impl CreateMember {
    /// Creates a new builder-style object to manufacture [`CreateMemberInput`](crate::input::CreateMemberInput).
    pub fn builder() -> crate::input::create_member_input::Builder {
        crate::input::create_member_input::Builder::default()
    }
    /// Creates a new `CreateMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateMember {
    type Output =
        std::result::Result<crate::output::CreateMemberOutput, crate::error::CreateMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_member::de_create_member_http_error(response)
        } else {
            crate::protocol_serde::shape_create_member::de_create_member_http_response(response)
        }
    }
}

/// Operation shape for `CreateSampleFindings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_sample_findings`](crate::client::fluent_builders::CreateSampleFindings).
///
/// `ParseStrictResponse` impl for `CreateSampleFindings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSampleFindings {
    _private: (),
}
impl CreateSampleFindings {
    /// Creates a new builder-style object to manufacture [`CreateSampleFindingsInput`](crate::input::CreateSampleFindingsInput).
    pub fn builder() -> crate::input::create_sample_findings_input::Builder {
        crate::input::create_sample_findings_input::Builder::default()
    }
    /// Creates a new `CreateSampleFindings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSampleFindings {
    type Output = std::result::Result<
        crate::output::CreateSampleFindingsOutput,
        crate::error::CreateSampleFindingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_sample_findings::de_create_sample_findings_http_error(response)
        } else {
            crate::protocol_serde::shape_create_sample_findings::de_create_sample_findings_http_response(response)
        }
    }
}

/// Operation shape for `DeclineInvitations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`decline_invitations`](crate::client::fluent_builders::DeclineInvitations).
///
/// `ParseStrictResponse` impl for `DeclineInvitations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeclineInvitations {
    _private: (),
}
impl DeclineInvitations {
    /// Creates a new builder-style object to manufacture [`DeclineInvitationsInput`](crate::input::DeclineInvitationsInput).
    pub fn builder() -> crate::input::decline_invitations_input::Builder {
        crate::input::decline_invitations_input::Builder::default()
    }
    /// Creates a new `DeclineInvitations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeclineInvitations {
    type Output = std::result::Result<
        crate::output::DeclineInvitationsOutput,
        crate::error::DeclineInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_decline_invitations::de_decline_invitations_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_decline_invitations::de_decline_invitations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteAllowList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_allow_list`](crate::client::fluent_builders::DeleteAllowList).
///
/// `ParseStrictResponse` impl for `DeleteAllowList`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAllowList {
    _private: (),
}
impl DeleteAllowList {
    /// Creates a new builder-style object to manufacture [`DeleteAllowListInput`](crate::input::DeleteAllowListInput).
    pub fn builder() -> crate::input::delete_allow_list_input::Builder {
        crate::input::delete_allow_list_input::Builder::default()
    }
    /// Creates a new `DeleteAllowList` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAllowList {
    type Output = std::result::Result<
        crate::output::DeleteAllowListOutput,
        crate::error::DeleteAllowListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_allow_list::de_delete_allow_list_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_allow_list::de_delete_allow_list_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteCustomDataIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_custom_data_identifier`](crate::client::fluent_builders::DeleteCustomDataIdentifier).
///
/// `ParseStrictResponse` impl for `DeleteCustomDataIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCustomDataIdentifier {
    _private: (),
}
impl DeleteCustomDataIdentifier {
    /// Creates a new builder-style object to manufacture [`DeleteCustomDataIdentifierInput`](crate::input::DeleteCustomDataIdentifierInput).
    pub fn builder() -> crate::input::delete_custom_data_identifier_input::Builder {
        crate::input::delete_custom_data_identifier_input::Builder::default()
    }
    /// Creates a new `DeleteCustomDataIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCustomDataIdentifier {
    type Output = std::result::Result<
        crate::output::DeleteCustomDataIdentifierOutput,
        crate::error::DeleteCustomDataIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_custom_data_identifier::de_delete_custom_data_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_custom_data_identifier::de_delete_custom_data_identifier_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFindingsFilter`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_findings_filter`](crate::client::fluent_builders::DeleteFindingsFilter).
///
/// `ParseStrictResponse` impl for `DeleteFindingsFilter`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFindingsFilter {
    _private: (),
}
impl DeleteFindingsFilter {
    /// Creates a new builder-style object to manufacture [`DeleteFindingsFilterInput`](crate::input::DeleteFindingsFilterInput).
    pub fn builder() -> crate::input::delete_findings_filter_input::Builder {
        crate::input::delete_findings_filter_input::Builder::default()
    }
    /// Creates a new `DeleteFindingsFilter` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFindingsFilter {
    type Output = std::result::Result<
        crate::output::DeleteFindingsFilterOutput,
        crate::error::DeleteFindingsFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_findings_filter::de_delete_findings_filter_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_findings_filter::de_delete_findings_filter_http_response(response)
        }
    }
}

/// Operation shape for `DeleteInvitations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_invitations`](crate::client::fluent_builders::DeleteInvitations).
///
/// `ParseStrictResponse` impl for `DeleteInvitations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteInvitations {
    _private: (),
}
impl DeleteInvitations {
    /// Creates a new builder-style object to manufacture [`DeleteInvitationsInput`](crate::input::DeleteInvitationsInput).
    pub fn builder() -> crate::input::delete_invitations_input::Builder {
        crate::input::delete_invitations_input::Builder::default()
    }
    /// Creates a new `DeleteInvitations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteInvitations {
    type Output = std::result::Result<
        crate::output::DeleteInvitationsOutput,
        crate::error::DeleteInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_invitations::de_delete_invitations_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_invitations::de_delete_invitations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_member`](crate::client::fluent_builders::DeleteMember).
///
/// `ParseStrictResponse` impl for `DeleteMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteMember {
    _private: (),
}
impl DeleteMember {
    /// Creates a new builder-style object to manufacture [`DeleteMemberInput`](crate::input::DeleteMemberInput).
    pub fn builder() -> crate::input::delete_member_input::Builder {
        crate::input::delete_member_input::Builder::default()
    }
    /// Creates a new `DeleteMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteMember {
    type Output =
        std::result::Result<crate::output::DeleteMemberOutput, crate::error::DeleteMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_member::de_delete_member_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_member::de_delete_member_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBuckets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_buckets`](crate::client::fluent_builders::DescribeBuckets).
///
/// `ParseStrictResponse` impl for `DescribeBuckets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBuckets {
    _private: (),
}
impl DescribeBuckets {
    /// Creates a new builder-style object to manufacture [`DescribeBucketsInput`](crate::input::DescribeBucketsInput).
    pub fn builder() -> crate::input::describe_buckets_input::Builder {
        crate::input::describe_buckets_input::Builder::default()
    }
    /// Creates a new `DescribeBuckets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBuckets {
    type Output = std::result::Result<
        crate::output::DescribeBucketsOutput,
        crate::error::DescribeBucketsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_buckets::de_describe_buckets_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_buckets::de_describe_buckets_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeClassificationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_classification_job`](crate::client::fluent_builders::DescribeClassificationJob).
///
/// `ParseStrictResponse` impl for `DescribeClassificationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeClassificationJob {
    _private: (),
}
impl DescribeClassificationJob {
    /// Creates a new builder-style object to manufacture [`DescribeClassificationJobInput`](crate::input::DescribeClassificationJobInput).
    pub fn builder() -> crate::input::describe_classification_job_input::Builder {
        crate::input::describe_classification_job_input::Builder::default()
    }
    /// Creates a new `DescribeClassificationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeClassificationJob {
    type Output = std::result::Result<
        crate::output::DescribeClassificationJobOutput,
        crate::error::DescribeClassificationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_classification_job::de_describe_classification_job_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_classification_job::de_describe_classification_job_http_response(response)
        }
    }
}

/// Operation shape for `DescribeOrganizationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_organization_configuration`](crate::client::fluent_builders::DescribeOrganizationConfiguration).
///
/// `ParseStrictResponse` impl for `DescribeOrganizationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeOrganizationConfiguration {
    _private: (),
}
impl DescribeOrganizationConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationInput`](crate::input::DescribeOrganizationConfigurationInput).
    pub fn builder() -> crate::input::describe_organization_configuration_input::Builder {
        crate::input::describe_organization_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeOrganizationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeOrganizationConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeOrganizationConfigurationOutput,
        crate::error::DescribeOrganizationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_organization_configuration::de_describe_organization_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_organization_configuration::de_describe_organization_configuration_http_response(response)
        }
    }
}

/// Operation shape for `DisableMacie`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_macie`](crate::client::fluent_builders::DisableMacie).
///
/// `ParseStrictResponse` impl for `DisableMacie`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableMacie {
    _private: (),
}
impl DisableMacie {
    /// Creates a new builder-style object to manufacture [`DisableMacieInput`](crate::input::DisableMacieInput).
    pub fn builder() -> crate::input::disable_macie_input::Builder {
        crate::input::disable_macie_input::Builder::default()
    }
    /// Creates a new `DisableMacie` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableMacie {
    type Output =
        std::result::Result<crate::output::DisableMacieOutput, crate::error::DisableMacieError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_macie::de_disable_macie_http_error(response)
        } else {
            crate::protocol_serde::shape_disable_macie::de_disable_macie_http_response(response)
        }
    }
}

/// Operation shape for `DisableOrganizationAdminAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_organization_admin_account`](crate::client::fluent_builders::DisableOrganizationAdminAccount).
///
/// `ParseStrictResponse` impl for `DisableOrganizationAdminAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableOrganizationAdminAccount {
    _private: (),
}
impl DisableOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`DisableOrganizationAdminAccountInput`](crate::input::DisableOrganizationAdminAccountInput).
    pub fn builder() -> crate::input::disable_organization_admin_account_input::Builder {
        crate::input::disable_organization_admin_account_input::Builder::default()
    }
    /// Creates a new `DisableOrganizationAdminAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::DisableOrganizationAdminAccountOutput,
        crate::error::DisableOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_organization_admin_account::de_disable_organization_admin_account_http_error(response)
        } else {
            crate::protocol_serde::shape_disable_organization_admin_account::de_disable_organization_admin_account_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateFromAdministratorAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_from_administrator_account`](crate::client::fluent_builders::DisassociateFromAdministratorAccount).
///
/// `ParseStrictResponse` impl for `DisassociateFromAdministratorAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateFromAdministratorAccount {
    _private: (),
}
impl DisassociateFromAdministratorAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateFromAdministratorAccountInput`](crate::input::DisassociateFromAdministratorAccountInput).
    pub fn builder() -> crate::input::disassociate_from_administrator_account_input::Builder {
        crate::input::disassociate_from_administrator_account_input::Builder::default()
    }
    /// Creates a new `DisassociateFromAdministratorAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateFromAdministratorAccount {
    type Output = std::result::Result<
        crate::output::DisassociateFromAdministratorAccountOutput,
        crate::error::DisassociateFromAdministratorAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_from_administrator_account::de_disassociate_from_administrator_account_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_from_administrator_account::de_disassociate_from_administrator_account_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateFromMasterAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_from_master_account`](crate::client::fluent_builders::DisassociateFromMasterAccount).
///
/// `ParseStrictResponse` impl for `DisassociateFromMasterAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateFromMasterAccount {
    _private: (),
}
impl DisassociateFromMasterAccount {
    /// Creates a new builder-style object to manufacture [`DisassociateFromMasterAccountInput`](crate::input::DisassociateFromMasterAccountInput).
    pub fn builder() -> crate::input::disassociate_from_master_account_input::Builder {
        crate::input::disassociate_from_master_account_input::Builder::default()
    }
    /// Creates a new `DisassociateFromMasterAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateFromMasterAccount {
    type Output = std::result::Result<
        crate::output::DisassociateFromMasterAccountOutput,
        crate::error::DisassociateFromMasterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_from_master_account::de_disassociate_from_master_account_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_from_master_account::de_disassociate_from_master_account_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_member`](crate::client::fluent_builders::DisassociateMember).
///
/// `ParseStrictResponse` impl for `DisassociateMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateMember {
    _private: (),
}
impl DisassociateMember {
    /// Creates a new builder-style object to manufacture [`DisassociateMemberInput`](crate::input::DisassociateMemberInput).
    pub fn builder() -> crate::input::disassociate_member_input::Builder {
        crate::input::disassociate_member_input::Builder::default()
    }
    /// Creates a new `DisassociateMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateMember {
    type Output = std::result::Result<
        crate::output::DisassociateMemberOutput,
        crate::error::DisassociateMemberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_member::de_disassociate_member_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disassociate_member::de_disassociate_member_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `EnableMacie`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_macie`](crate::client::fluent_builders::EnableMacie).
///
/// `ParseStrictResponse` impl for `EnableMacie`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableMacie {
    _private: (),
}
impl EnableMacie {
    /// Creates a new builder-style object to manufacture [`EnableMacieInput`](crate::input::EnableMacieInput).
    pub fn builder() -> crate::input::enable_macie_input::Builder {
        crate::input::enable_macie_input::Builder::default()
    }
    /// Creates a new `EnableMacie` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableMacie {
    type Output =
        std::result::Result<crate::output::EnableMacieOutput, crate::error::EnableMacieError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_macie::de_enable_macie_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_macie::de_enable_macie_http_response(response)
        }
    }
}

/// Operation shape for `EnableOrganizationAdminAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_organization_admin_account`](crate::client::fluent_builders::EnableOrganizationAdminAccount).
///
/// `ParseStrictResponse` impl for `EnableOrganizationAdminAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableOrganizationAdminAccount {
    _private: (),
}
impl EnableOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationAdminAccountInput`](crate::input::EnableOrganizationAdminAccountInput).
    pub fn builder() -> crate::input::enable_organization_admin_account_input::Builder {
        crate::input::enable_organization_admin_account_input::Builder::default()
    }
    /// Creates a new `EnableOrganizationAdminAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::EnableOrganizationAdminAccountOutput,
        crate::error::EnableOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_organization_admin_account::de_enable_organization_admin_account_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_organization_admin_account::de_enable_organization_admin_account_http_response(response)
        }
    }
}

/// Operation shape for `GetAdministratorAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_administrator_account`](crate::client::fluent_builders::GetAdministratorAccount).
///
/// `ParseStrictResponse` impl for `GetAdministratorAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAdministratorAccount {
    _private: (),
}
impl GetAdministratorAccount {
    /// Creates a new builder-style object to manufacture [`GetAdministratorAccountInput`](crate::input::GetAdministratorAccountInput).
    pub fn builder() -> crate::input::get_administrator_account_input::Builder {
        crate::input::get_administrator_account_input::Builder::default()
    }
    /// Creates a new `GetAdministratorAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAdministratorAccount {
    type Output = std::result::Result<
        crate::output::GetAdministratorAccountOutput,
        crate::error::GetAdministratorAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_administrator_account::de_get_administrator_account_http_error(response)
        } else {
            crate::protocol_serde::shape_get_administrator_account::de_get_administrator_account_http_response(response)
        }
    }
}

/// Operation shape for `GetAllowList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_allow_list`](crate::client::fluent_builders::GetAllowList).
///
/// `ParseStrictResponse` impl for `GetAllowList`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAllowList {
    _private: (),
}
impl GetAllowList {
    /// Creates a new builder-style object to manufacture [`GetAllowListInput`](crate::input::GetAllowListInput).
    pub fn builder() -> crate::input::get_allow_list_input::Builder {
        crate::input::get_allow_list_input::Builder::default()
    }
    /// Creates a new `GetAllowList` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAllowList {
    type Output =
        std::result::Result<crate::output::GetAllowListOutput, crate::error::GetAllowListError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_allow_list::de_get_allow_list_http_error(response)
        } else {
            crate::protocol_serde::shape_get_allow_list::de_get_allow_list_http_response(response)
        }
    }
}

/// Operation shape for `GetAutomatedDiscoveryConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_automated_discovery_configuration`](crate::client::fluent_builders::GetAutomatedDiscoveryConfiguration).
///
/// `ParseStrictResponse` impl for `GetAutomatedDiscoveryConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetAutomatedDiscoveryConfiguration {
    _private: (),
}
impl GetAutomatedDiscoveryConfiguration {
    /// Creates a new builder-style object to manufacture [`GetAutomatedDiscoveryConfigurationInput`](crate::input::GetAutomatedDiscoveryConfigurationInput).
    pub fn builder() -> crate::input::get_automated_discovery_configuration_input::Builder {
        crate::input::get_automated_discovery_configuration_input::Builder::default()
    }
    /// Creates a new `GetAutomatedDiscoveryConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetAutomatedDiscoveryConfiguration {
    type Output = std::result::Result<
        crate::output::GetAutomatedDiscoveryConfigurationOutput,
        crate::error::GetAutomatedDiscoveryConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_automated_discovery_configuration::de_get_automated_discovery_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_automated_discovery_configuration::de_get_automated_discovery_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetBucketStatistics`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_bucket_statistics`](crate::client::fluent_builders::GetBucketStatistics).
///
/// `ParseStrictResponse` impl for `GetBucketStatistics`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetBucketStatistics {
    _private: (),
}
impl GetBucketStatistics {
    /// Creates a new builder-style object to manufacture [`GetBucketStatisticsInput`](crate::input::GetBucketStatisticsInput).
    pub fn builder() -> crate::input::get_bucket_statistics_input::Builder {
        crate::input::get_bucket_statistics_input::Builder::default()
    }
    /// Creates a new `GetBucketStatistics` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetBucketStatistics {
    type Output = std::result::Result<
        crate::output::GetBucketStatisticsOutput,
        crate::error::GetBucketStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_bucket_statistics::de_get_bucket_statistics_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_bucket_statistics::de_get_bucket_statistics_http_response(response)
        }
    }
}

/// Operation shape for `GetClassificationExportConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_classification_export_configuration`](crate::client::fluent_builders::GetClassificationExportConfiguration).
///
/// `ParseStrictResponse` impl for `GetClassificationExportConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetClassificationExportConfiguration {
    _private: (),
}
impl GetClassificationExportConfiguration {
    /// Creates a new builder-style object to manufacture [`GetClassificationExportConfigurationInput`](crate::input::GetClassificationExportConfigurationInput).
    pub fn builder() -> crate::input::get_classification_export_configuration_input::Builder {
        crate::input::get_classification_export_configuration_input::Builder::default()
    }
    /// Creates a new `GetClassificationExportConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetClassificationExportConfiguration {
    type Output = std::result::Result<
        crate::output::GetClassificationExportConfigurationOutput,
        crate::error::GetClassificationExportConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_classification_export_configuration::de_get_classification_export_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_classification_export_configuration::de_get_classification_export_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetClassificationScope`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_classification_scope`](crate::client::fluent_builders::GetClassificationScope).
///
/// `ParseStrictResponse` impl for `GetClassificationScope`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetClassificationScope {
    _private: (),
}
impl GetClassificationScope {
    /// Creates a new builder-style object to manufacture [`GetClassificationScopeInput`](crate::input::GetClassificationScopeInput).
    pub fn builder() -> crate::input::get_classification_scope_input::Builder {
        crate::input::get_classification_scope_input::Builder::default()
    }
    /// Creates a new `GetClassificationScope` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetClassificationScope {
    type Output = std::result::Result<
        crate::output::GetClassificationScopeOutput,
        crate::error::GetClassificationScopeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_classification_scope::de_get_classification_scope_http_error(response)
        } else {
            crate::protocol_serde::shape_get_classification_scope::de_get_classification_scope_http_response(response)
        }
    }
}

/// Operation shape for `GetCustomDataIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_custom_data_identifier`](crate::client::fluent_builders::GetCustomDataIdentifier).
///
/// `ParseStrictResponse` impl for `GetCustomDataIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCustomDataIdentifier {
    _private: (),
}
impl GetCustomDataIdentifier {
    /// Creates a new builder-style object to manufacture [`GetCustomDataIdentifierInput`](crate::input::GetCustomDataIdentifierInput).
    pub fn builder() -> crate::input::get_custom_data_identifier_input::Builder {
        crate::input::get_custom_data_identifier_input::Builder::default()
    }
    /// Creates a new `GetCustomDataIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCustomDataIdentifier {
    type Output = std::result::Result<
        crate::output::GetCustomDataIdentifierOutput,
        crate::error::GetCustomDataIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_custom_data_identifier::de_get_custom_data_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_get_custom_data_identifier::de_get_custom_data_identifier_http_response(response)
        }
    }
}

/// Operation shape for `GetFindings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_findings`](crate::client::fluent_builders::GetFindings).
///
/// `ParseStrictResponse` impl for `GetFindings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFindings {
    _private: (),
}
impl GetFindings {
    /// Creates a new builder-style object to manufacture [`GetFindingsInput`](crate::input::GetFindingsInput).
    pub fn builder() -> crate::input::get_findings_input::Builder {
        crate::input::get_findings_input::Builder::default()
    }
    /// Creates a new `GetFindings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFindings {
    type Output =
        std::result::Result<crate::output::GetFindingsOutput, crate::error::GetFindingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_findings::de_get_findings_http_error(response)
        } else {
            crate::protocol_serde::shape_get_findings::de_get_findings_http_response(response)
        }
    }
}

/// Operation shape for `GetFindingsFilter`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_findings_filter`](crate::client::fluent_builders::GetFindingsFilter).
///
/// `ParseStrictResponse` impl for `GetFindingsFilter`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFindingsFilter {
    _private: (),
}
impl GetFindingsFilter {
    /// Creates a new builder-style object to manufacture [`GetFindingsFilterInput`](crate::input::GetFindingsFilterInput).
    pub fn builder() -> crate::input::get_findings_filter_input::Builder {
        crate::input::get_findings_filter_input::Builder::default()
    }
    /// Creates a new `GetFindingsFilter` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFindingsFilter {
    type Output = std::result::Result<
        crate::output::GetFindingsFilterOutput,
        crate::error::GetFindingsFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_findings_filter::de_get_findings_filter_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_findings_filter::de_get_findings_filter_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetFindingsPublicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_findings_publication_configuration`](crate::client::fluent_builders::GetFindingsPublicationConfiguration).
///
/// `ParseStrictResponse` impl for `GetFindingsPublicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFindingsPublicationConfiguration {
    _private: (),
}
impl GetFindingsPublicationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetFindingsPublicationConfigurationInput`](crate::input::GetFindingsPublicationConfigurationInput).
    pub fn builder() -> crate::input::get_findings_publication_configuration_input::Builder {
        crate::input::get_findings_publication_configuration_input::Builder::default()
    }
    /// Creates a new `GetFindingsPublicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFindingsPublicationConfiguration {
    type Output = std::result::Result<
        crate::output::GetFindingsPublicationConfigurationOutput,
        crate::error::GetFindingsPublicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_findings_publication_configuration::de_get_findings_publication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_findings_publication_configuration::de_get_findings_publication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetFindingStatistics`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_finding_statistics`](crate::client::fluent_builders::GetFindingStatistics).
///
/// `ParseStrictResponse` impl for `GetFindingStatistics`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFindingStatistics {
    _private: (),
}
impl GetFindingStatistics {
    /// Creates a new builder-style object to manufacture [`GetFindingStatisticsInput`](crate::input::GetFindingStatisticsInput).
    pub fn builder() -> crate::input::get_finding_statistics_input::Builder {
        crate::input::get_finding_statistics_input::Builder::default()
    }
    /// Creates a new `GetFindingStatistics` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFindingStatistics {
    type Output = std::result::Result<
        crate::output::GetFindingStatisticsOutput,
        crate::error::GetFindingStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_finding_statistics::de_get_finding_statistics_http_error(response)
        } else {
            crate::protocol_serde::shape_get_finding_statistics::de_get_finding_statistics_http_response(response)
        }
    }
}

/// Operation shape for `GetInvitationsCount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_invitations_count`](crate::client::fluent_builders::GetInvitationsCount).
///
/// `ParseStrictResponse` impl for `GetInvitationsCount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetInvitationsCount {
    _private: (),
}
impl GetInvitationsCount {
    /// Creates a new builder-style object to manufacture [`GetInvitationsCountInput`](crate::input::GetInvitationsCountInput).
    pub fn builder() -> crate::input::get_invitations_count_input::Builder {
        crate::input::get_invitations_count_input::Builder::default()
    }
    /// Creates a new `GetInvitationsCount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetInvitationsCount {
    type Output = std::result::Result<
        crate::output::GetInvitationsCountOutput,
        crate::error::GetInvitationsCountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_invitations_count::de_get_invitations_count_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_invitations_count::de_get_invitations_count_http_response(response)
        }
    }
}

/// Operation shape for `GetMacieSession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_macie_session`](crate::client::fluent_builders::GetMacieSession).
///
/// `ParseStrictResponse` impl for `GetMacieSession`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMacieSession {
    _private: (),
}
impl GetMacieSession {
    /// Creates a new builder-style object to manufacture [`GetMacieSessionInput`](crate::input::GetMacieSessionInput).
    pub fn builder() -> crate::input::get_macie_session_input::Builder {
        crate::input::get_macie_session_input::Builder::default()
    }
    /// Creates a new `GetMacieSession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMacieSession {
    type Output = std::result::Result<
        crate::output::GetMacieSessionOutput,
        crate::error::GetMacieSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_macie_session::de_get_macie_session_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_macie_session::de_get_macie_session_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetMasterAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_master_account`](crate::client::fluent_builders::GetMasterAccount).
///
/// `ParseStrictResponse` impl for `GetMasterAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMasterAccount {
    _private: (),
}
impl GetMasterAccount {
    /// Creates a new builder-style object to manufacture [`GetMasterAccountInput`](crate::input::GetMasterAccountInput).
    pub fn builder() -> crate::input::get_master_account_input::Builder {
        crate::input::get_master_account_input::Builder::default()
    }
    /// Creates a new `GetMasterAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMasterAccount {
    type Output = std::result::Result<
        crate::output::GetMasterAccountOutput,
        crate::error::GetMasterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_master_account::de_get_master_account_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_master_account::de_get_master_account_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetMember`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_member`](crate::client::fluent_builders::GetMember).
///
/// `ParseStrictResponse` impl for `GetMember`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMember {
    _private: (),
}
impl GetMember {
    /// Creates a new builder-style object to manufacture [`GetMemberInput`](crate::input::GetMemberInput).
    pub fn builder() -> crate::input::get_member_input::Builder {
        crate::input::get_member_input::Builder::default()
    }
    /// Creates a new `GetMember` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMember {
    type Output = std::result::Result<crate::output::GetMemberOutput, crate::error::GetMemberError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_member::de_get_member_http_error(response)
        } else {
            crate::protocol_serde::shape_get_member::de_get_member_http_response(response)
        }
    }
}

/// Operation shape for `GetResourceProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_resource_profile`](crate::client::fluent_builders::GetResourceProfile).
///
/// `ParseStrictResponse` impl for `GetResourceProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetResourceProfile {
    _private: (),
}
impl GetResourceProfile {
    /// Creates a new builder-style object to manufacture [`GetResourceProfileInput`](crate::input::GetResourceProfileInput).
    pub fn builder() -> crate::input::get_resource_profile_input::Builder {
        crate::input::get_resource_profile_input::Builder::default()
    }
    /// Creates a new `GetResourceProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetResourceProfile {
    type Output = std::result::Result<
        crate::output::GetResourceProfileOutput,
        crate::error::GetResourceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_resource_profile::de_get_resource_profile_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_resource_profile::de_get_resource_profile_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetRevealConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_reveal_configuration`](crate::client::fluent_builders::GetRevealConfiguration).
///
/// `ParseStrictResponse` impl for `GetRevealConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRevealConfiguration {
    _private: (),
}
impl GetRevealConfiguration {
    /// Creates a new builder-style object to manufacture [`GetRevealConfigurationInput`](crate::input::GetRevealConfigurationInput).
    pub fn builder() -> crate::input::get_reveal_configuration_input::Builder {
        crate::input::get_reveal_configuration_input::Builder::default()
    }
    /// Creates a new `GetRevealConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRevealConfiguration {
    type Output = std::result::Result<
        crate::output::GetRevealConfigurationOutput,
        crate::error::GetRevealConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_reveal_configuration::de_get_reveal_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_reveal_configuration::de_get_reveal_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetSensitiveDataOccurrences`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sensitive_data_occurrences`](crate::client::fluent_builders::GetSensitiveDataOccurrences).
///
/// `ParseStrictResponse` impl for `GetSensitiveDataOccurrences`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrences {
    _private: (),
}
impl GetSensitiveDataOccurrences {
    /// Creates a new builder-style object to manufacture [`GetSensitiveDataOccurrencesInput`](crate::input::GetSensitiveDataOccurrencesInput).
    pub fn builder() -> crate::input::get_sensitive_data_occurrences_input::Builder {
        crate::input::get_sensitive_data_occurrences_input::Builder::default()
    }
    /// Creates a new `GetSensitiveDataOccurrences` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSensitiveDataOccurrences {
    type Output = std::result::Result<
        crate::output::GetSensitiveDataOccurrencesOutput,
        crate::error::GetSensitiveDataOccurrencesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_sensitive_data_occurrences::de_get_sensitive_data_occurrences_http_error(response)
        } else {
            crate::protocol_serde::shape_get_sensitive_data_occurrences::de_get_sensitive_data_occurrences_http_response(response)
        }
    }
}

/// Operation shape for `GetSensitiveDataOccurrencesAvailability`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sensitive_data_occurrences_availability`](crate::client::fluent_builders::GetSensitiveDataOccurrencesAvailability).
///
/// `ParseStrictResponse` impl for `GetSensitiveDataOccurrencesAvailability`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrencesAvailability {
    _private: (),
}
impl GetSensitiveDataOccurrencesAvailability {
    /// Creates a new builder-style object to manufacture [`GetSensitiveDataOccurrencesAvailabilityInput`](crate::input::GetSensitiveDataOccurrencesAvailabilityInput).
    pub fn builder() -> crate::input::get_sensitive_data_occurrences_availability_input::Builder {
        crate::input::get_sensitive_data_occurrences_availability_input::Builder::default()
    }
    /// Creates a new `GetSensitiveDataOccurrencesAvailability` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSensitiveDataOccurrencesAvailability {
    type Output = std::result::Result<
        crate::output::GetSensitiveDataOccurrencesAvailabilityOutput,
        crate::error::GetSensitiveDataOccurrencesAvailabilityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_sensitive_data_occurrences_availability::de_get_sensitive_data_occurrences_availability_http_error(response)
        } else {
            crate::protocol_serde::shape_get_sensitive_data_occurrences_availability::de_get_sensitive_data_occurrences_availability_http_response(response)
        }
    }
}

/// Operation shape for `GetSensitivityInspectionTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_sensitivity_inspection_template`](crate::client::fluent_builders::GetSensitivityInspectionTemplate).
///
/// `ParseStrictResponse` impl for `GetSensitivityInspectionTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSensitivityInspectionTemplate {
    _private: (),
}
impl GetSensitivityInspectionTemplate {
    /// Creates a new builder-style object to manufacture [`GetSensitivityInspectionTemplateInput`](crate::input::GetSensitivityInspectionTemplateInput).
    pub fn builder() -> crate::input::get_sensitivity_inspection_template_input::Builder {
        crate::input::get_sensitivity_inspection_template_input::Builder::default()
    }
    /// Creates a new `GetSensitivityInspectionTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSensitivityInspectionTemplate {
    type Output = std::result::Result<
        crate::output::GetSensitivityInspectionTemplateOutput,
        crate::error::GetSensitivityInspectionTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_sensitivity_inspection_template::de_get_sensitivity_inspection_template_http_error(response)
        } else {
            crate::protocol_serde::shape_get_sensitivity_inspection_template::de_get_sensitivity_inspection_template_http_response(response)
        }
    }
}

/// Operation shape for `GetUsageStatistics`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_usage_statistics`](crate::client::fluent_builders::GetUsageStatistics).
///
/// `ParseStrictResponse` impl for `GetUsageStatistics`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetUsageStatistics {
    _private: (),
}
impl GetUsageStatistics {
    /// Creates a new builder-style object to manufacture [`GetUsageStatisticsInput`](crate::input::GetUsageStatisticsInput).
    pub fn builder() -> crate::input::get_usage_statistics_input::Builder {
        crate::input::get_usage_statistics_input::Builder::default()
    }
    /// Creates a new `GetUsageStatistics` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetUsageStatistics {
    type Output = std::result::Result<
        crate::output::GetUsageStatisticsOutput,
        crate::error::GetUsageStatisticsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_usage_statistics::de_get_usage_statistics_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_usage_statistics::de_get_usage_statistics_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetUsageTotals`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_usage_totals`](crate::client::fluent_builders::GetUsageTotals).
///
/// `ParseStrictResponse` impl for `GetUsageTotals`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetUsageTotals {
    _private: (),
}
impl GetUsageTotals {
    /// Creates a new builder-style object to manufacture [`GetUsageTotalsInput`](crate::input::GetUsageTotalsInput).
    pub fn builder() -> crate::input::get_usage_totals_input::Builder {
        crate::input::get_usage_totals_input::Builder::default()
    }
    /// Creates a new `GetUsageTotals` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetUsageTotals {
    type Output =
        std::result::Result<crate::output::GetUsageTotalsOutput, crate::error::GetUsageTotalsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_usage_totals::de_get_usage_totals_http_error(response)
        } else {
            crate::protocol_serde::shape_get_usage_totals::de_get_usage_totals_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListAllowLists`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_allow_lists`](crate::client::fluent_builders::ListAllowLists).
///
/// `ParseStrictResponse` impl for `ListAllowLists`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAllowLists {
    _private: (),
}
impl ListAllowLists {
    /// Creates a new builder-style object to manufacture [`ListAllowListsInput`](crate::input::ListAllowListsInput).
    pub fn builder() -> crate::input::list_allow_lists_input::Builder {
        crate::input::list_allow_lists_input::Builder::default()
    }
    /// Creates a new `ListAllowLists` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAllowLists {
    type Output =
        std::result::Result<crate::output::ListAllowListsOutput, crate::error::ListAllowListsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_allow_lists::de_list_allow_lists_http_error(response)
        } else {
            crate::protocol_serde::shape_list_allow_lists::de_list_allow_lists_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListClassificationJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_classification_jobs`](crate::client::fluent_builders::ListClassificationJobs).
///
/// `ParseStrictResponse` impl for `ListClassificationJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListClassificationJobs {
    _private: (),
}
impl ListClassificationJobs {
    /// Creates a new builder-style object to manufacture [`ListClassificationJobsInput`](crate::input::ListClassificationJobsInput).
    pub fn builder() -> crate::input::list_classification_jobs_input::Builder {
        crate::input::list_classification_jobs_input::Builder::default()
    }
    /// Creates a new `ListClassificationJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListClassificationJobs {
    type Output = std::result::Result<
        crate::output::ListClassificationJobsOutput,
        crate::error::ListClassificationJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_classification_jobs::de_list_classification_jobs_http_error(response)
        } else {
            crate::protocol_serde::shape_list_classification_jobs::de_list_classification_jobs_http_response(response)
        }
    }
}

/// Operation shape for `ListClassificationScopes`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_classification_scopes`](crate::client::fluent_builders::ListClassificationScopes).
///
/// `ParseStrictResponse` impl for `ListClassificationScopes`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListClassificationScopes {
    _private: (),
}
impl ListClassificationScopes {
    /// Creates a new builder-style object to manufacture [`ListClassificationScopesInput`](crate::input::ListClassificationScopesInput).
    pub fn builder() -> crate::input::list_classification_scopes_input::Builder {
        crate::input::list_classification_scopes_input::Builder::default()
    }
    /// Creates a new `ListClassificationScopes` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListClassificationScopes {
    type Output = std::result::Result<
        crate::output::ListClassificationScopesOutput,
        crate::error::ListClassificationScopesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_classification_scopes::de_list_classification_scopes_http_error(response)
        } else {
            crate::protocol_serde::shape_list_classification_scopes::de_list_classification_scopes_http_response(response)
        }
    }
}

/// Operation shape for `ListCustomDataIdentifiers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_custom_data_identifiers`](crate::client::fluent_builders::ListCustomDataIdentifiers).
///
/// `ParseStrictResponse` impl for `ListCustomDataIdentifiers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListCustomDataIdentifiers {
    _private: (),
}
impl ListCustomDataIdentifiers {
    /// Creates a new builder-style object to manufacture [`ListCustomDataIdentifiersInput`](crate::input::ListCustomDataIdentifiersInput).
    pub fn builder() -> crate::input::list_custom_data_identifiers_input::Builder {
        crate::input::list_custom_data_identifiers_input::Builder::default()
    }
    /// Creates a new `ListCustomDataIdentifiers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListCustomDataIdentifiers {
    type Output = std::result::Result<
        crate::output::ListCustomDataIdentifiersOutput,
        crate::error::ListCustomDataIdentifiersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_custom_data_identifiers::de_list_custom_data_identifiers_http_error(response)
        } else {
            crate::protocol_serde::shape_list_custom_data_identifiers::de_list_custom_data_identifiers_http_response(response)
        }
    }
}

/// Operation shape for `ListFindings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_findings`](crate::client::fluent_builders::ListFindings).
///
/// `ParseStrictResponse` impl for `ListFindings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFindings {
    _private: (),
}
impl ListFindings {
    /// Creates a new builder-style object to manufacture [`ListFindingsInput`](crate::input::ListFindingsInput).
    pub fn builder() -> crate::input::list_findings_input::Builder {
        crate::input::list_findings_input::Builder::default()
    }
    /// Creates a new `ListFindings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFindings {
    type Output =
        std::result::Result<crate::output::ListFindingsOutput, crate::error::ListFindingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_findings::de_list_findings_http_error(response)
        } else {
            crate::protocol_serde::shape_list_findings::de_list_findings_http_response(response)
        }
    }
}

/// Operation shape for `ListFindingsFilters`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_findings_filters`](crate::client::fluent_builders::ListFindingsFilters).
///
/// `ParseStrictResponse` impl for `ListFindingsFilters`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFindingsFilters {
    _private: (),
}
impl ListFindingsFilters {
    /// Creates a new builder-style object to manufacture [`ListFindingsFiltersInput`](crate::input::ListFindingsFiltersInput).
    pub fn builder() -> crate::input::list_findings_filters_input::Builder {
        crate::input::list_findings_filters_input::Builder::default()
    }
    /// Creates a new `ListFindingsFilters` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFindingsFilters {
    type Output = std::result::Result<
        crate::output::ListFindingsFiltersOutput,
        crate::error::ListFindingsFiltersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_findings_filters::de_list_findings_filters_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_findings_filters::de_list_findings_filters_http_response(response)
        }
    }
}

/// Operation shape for `ListInvitations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_invitations`](crate::client::fluent_builders::ListInvitations).
///
/// `ParseStrictResponse` impl for `ListInvitations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListInvitations {
    _private: (),
}
impl ListInvitations {
    /// Creates a new builder-style object to manufacture [`ListInvitationsInput`](crate::input::ListInvitationsInput).
    pub fn builder() -> crate::input::list_invitations_input::Builder {
        crate::input::list_invitations_input::Builder::default()
    }
    /// Creates a new `ListInvitations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListInvitations {
    type Output = std::result::Result<
        crate::output::ListInvitationsOutput,
        crate::error::ListInvitationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_invitations::de_list_invitations_http_error(response)
        } else {
            crate::protocol_serde::shape_list_invitations::de_list_invitations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListManagedDataIdentifiers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_managed_data_identifiers`](crate::client::fluent_builders::ListManagedDataIdentifiers).
///
/// `ParseStrictResponse` impl for `ListManagedDataIdentifiers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListManagedDataIdentifiers {
    _private: (),
}
impl ListManagedDataIdentifiers {
    /// Creates a new builder-style object to manufacture [`ListManagedDataIdentifiersInput`](crate::input::ListManagedDataIdentifiersInput).
    pub fn builder() -> crate::input::list_managed_data_identifiers_input::Builder {
        crate::input::list_managed_data_identifiers_input::Builder::default()
    }
    /// Creates a new `ListManagedDataIdentifiers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListManagedDataIdentifiers {
    type Output = std::result::Result<
        crate::output::ListManagedDataIdentifiersOutput,
        crate::error::ListManagedDataIdentifiersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_managed_data_identifiers::de_list_managed_data_identifiers_http_error(response)
        } else {
            crate::protocol_serde::shape_list_managed_data_identifiers::de_list_managed_data_identifiers_http_response(response)
        }
    }
}

/// Operation shape for `ListMembers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_members`](crate::client::fluent_builders::ListMembers).
///
/// `ParseStrictResponse` impl for `ListMembers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListMembers {
    _private: (),
}
impl ListMembers {
    /// Creates a new builder-style object to manufacture [`ListMembersInput`](crate::input::ListMembersInput).
    pub fn builder() -> crate::input::list_members_input::Builder {
        crate::input::list_members_input::Builder::default()
    }
    /// Creates a new `ListMembers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListMembers {
    type Output =
        std::result::Result<crate::output::ListMembersOutput, crate::error::ListMembersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_members::de_list_members_http_error(response)
        } else {
            crate::protocol_serde::shape_list_members::de_list_members_http_response(response)
        }
    }
}

/// Operation shape for `ListOrganizationAdminAccounts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_organization_admin_accounts`](crate::client::fluent_builders::ListOrganizationAdminAccounts).
///
/// `ParseStrictResponse` impl for `ListOrganizationAdminAccounts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListOrganizationAdminAccounts {
    _private: (),
}
impl ListOrganizationAdminAccounts {
    /// Creates a new builder-style object to manufacture [`ListOrganizationAdminAccountsInput`](crate::input::ListOrganizationAdminAccountsInput).
    pub fn builder() -> crate::input::list_organization_admin_accounts_input::Builder {
        crate::input::list_organization_admin_accounts_input::Builder::default()
    }
    /// Creates a new `ListOrganizationAdminAccounts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListOrganizationAdminAccounts {
    type Output = std::result::Result<
        crate::output::ListOrganizationAdminAccountsOutput,
        crate::error::ListOrganizationAdminAccountsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_organization_admin_accounts::de_list_organization_admin_accounts_http_error(response)
        } else {
            crate::protocol_serde::shape_list_organization_admin_accounts::de_list_organization_admin_accounts_http_response(response)
        }
    }
}

/// Operation shape for `ListResourceProfileArtifacts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_resource_profile_artifacts`](crate::client::fluent_builders::ListResourceProfileArtifacts).
///
/// `ParseStrictResponse` impl for `ListResourceProfileArtifacts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListResourceProfileArtifacts {
    _private: (),
}
impl ListResourceProfileArtifacts {
    /// Creates a new builder-style object to manufacture [`ListResourceProfileArtifactsInput`](crate::input::ListResourceProfileArtifactsInput).
    pub fn builder() -> crate::input::list_resource_profile_artifacts_input::Builder {
        crate::input::list_resource_profile_artifacts_input::Builder::default()
    }
    /// Creates a new `ListResourceProfileArtifacts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListResourceProfileArtifacts {
    type Output = std::result::Result<
        crate::output::ListResourceProfileArtifactsOutput,
        crate::error::ListResourceProfileArtifactsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_resource_profile_artifacts::de_list_resource_profile_artifacts_http_error(response)
        } else {
            crate::protocol_serde::shape_list_resource_profile_artifacts::de_list_resource_profile_artifacts_http_response(response)
        }
    }
}

/// Operation shape for `ListResourceProfileDetections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_resource_profile_detections`](crate::client::fluent_builders::ListResourceProfileDetections).
///
/// `ParseStrictResponse` impl for `ListResourceProfileDetections`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListResourceProfileDetections {
    _private: (),
}
impl ListResourceProfileDetections {
    /// Creates a new builder-style object to manufacture [`ListResourceProfileDetectionsInput`](crate::input::ListResourceProfileDetectionsInput).
    pub fn builder() -> crate::input::list_resource_profile_detections_input::Builder {
        crate::input::list_resource_profile_detections_input::Builder::default()
    }
    /// Creates a new `ListResourceProfileDetections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListResourceProfileDetections {
    type Output = std::result::Result<
        crate::output::ListResourceProfileDetectionsOutput,
        crate::error::ListResourceProfileDetectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_resource_profile_detections::de_list_resource_profile_detections_http_error(response)
        } else {
            crate::protocol_serde::shape_list_resource_profile_detections::de_list_resource_profile_detections_http_response(response)
        }
    }
}

/// Operation shape for `ListSensitivityInspectionTemplates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_sensitivity_inspection_templates`](crate::client::fluent_builders::ListSensitivityInspectionTemplates).
///
/// `ParseStrictResponse` impl for `ListSensitivityInspectionTemplates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSensitivityInspectionTemplates {
    _private: (),
}
impl ListSensitivityInspectionTemplates {
    /// Creates a new builder-style object to manufacture [`ListSensitivityInspectionTemplatesInput`](crate::input::ListSensitivityInspectionTemplatesInput).
    pub fn builder() -> crate::input::list_sensitivity_inspection_templates_input::Builder {
        crate::input::list_sensitivity_inspection_templates_input::Builder::default()
    }
    /// Creates a new `ListSensitivityInspectionTemplates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSensitivityInspectionTemplates {
    type Output = std::result::Result<
        crate::output::ListSensitivityInspectionTemplatesOutput,
        crate::error::ListSensitivityInspectionTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_sensitivity_inspection_templates::de_list_sensitivity_inspection_templates_http_error(response)
        } else {
            crate::protocol_serde::shape_list_sensitivity_inspection_templates::de_list_sensitivity_inspection_templates_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `PutClassificationExportConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_classification_export_configuration`](crate::client::fluent_builders::PutClassificationExportConfiguration).
///
/// `ParseStrictResponse` impl for `PutClassificationExportConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutClassificationExportConfiguration {
    _private: (),
}
impl PutClassificationExportConfiguration {
    /// Creates a new builder-style object to manufacture [`PutClassificationExportConfigurationInput`](crate::input::PutClassificationExportConfigurationInput).
    pub fn builder() -> crate::input::put_classification_export_configuration_input::Builder {
        crate::input::put_classification_export_configuration_input::Builder::default()
    }
    /// Creates a new `PutClassificationExportConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutClassificationExportConfiguration {
    type Output = std::result::Result<
        crate::output::PutClassificationExportConfigurationOutput,
        crate::error::PutClassificationExportConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_classification_export_configuration::de_put_classification_export_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_put_classification_export_configuration::de_put_classification_export_configuration_http_response(response)
        }
    }
}

/// Operation shape for `PutFindingsPublicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_findings_publication_configuration`](crate::client::fluent_builders::PutFindingsPublicationConfiguration).
///
/// `ParseStrictResponse` impl for `PutFindingsPublicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutFindingsPublicationConfiguration {
    _private: (),
}
impl PutFindingsPublicationConfiguration {
    /// Creates a new builder-style object to manufacture [`PutFindingsPublicationConfigurationInput`](crate::input::PutFindingsPublicationConfigurationInput).
    pub fn builder() -> crate::input::put_findings_publication_configuration_input::Builder {
        crate::input::put_findings_publication_configuration_input::Builder::default()
    }
    /// Creates a new `PutFindingsPublicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutFindingsPublicationConfiguration {
    type Output = std::result::Result<
        crate::output::PutFindingsPublicationConfigurationOutput,
        crate::error::PutFindingsPublicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_findings_publication_configuration::de_put_findings_publication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_put_findings_publication_configuration::de_put_findings_publication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `SearchResources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_resources`](crate::client::fluent_builders::SearchResources).
///
/// `ParseStrictResponse` impl for `SearchResources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchResources {
    _private: (),
}
impl SearchResources {
    /// Creates a new builder-style object to manufacture [`SearchResourcesInput`](crate::input::SearchResourcesInput).
    pub fn builder() -> crate::input::search_resources_input::Builder {
        crate::input::search_resources_input::Builder::default()
    }
    /// Creates a new `SearchResources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchResources {
    type Output = std::result::Result<
        crate::output::SearchResourcesOutput,
        crate::error::SearchResourcesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_search_resources::de_search_resources_http_error(response)
        } else {
            crate::protocol_serde::shape_search_resources::de_search_resources_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TestCustomDataIdentifier`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`test_custom_data_identifier`](crate::client::fluent_builders::TestCustomDataIdentifier).
///
/// `ParseStrictResponse` impl for `TestCustomDataIdentifier`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TestCustomDataIdentifier {
    _private: (),
}
impl TestCustomDataIdentifier {
    /// Creates a new builder-style object to manufacture [`TestCustomDataIdentifierInput`](crate::input::TestCustomDataIdentifierInput).
    pub fn builder() -> crate::input::test_custom_data_identifier_input::Builder {
        crate::input::test_custom_data_identifier_input::Builder::default()
    }
    /// Creates a new `TestCustomDataIdentifier` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TestCustomDataIdentifier {
    type Output = std::result::Result<
        crate::output::TestCustomDataIdentifierOutput,
        crate::error::TestCustomDataIdentifierError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_test_custom_data_identifier::de_test_custom_data_identifier_http_error(response)
        } else {
            crate::protocol_serde::shape_test_custom_data_identifier::de_test_custom_data_identifier_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateAllowList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_allow_list`](crate::client::fluent_builders::UpdateAllowList).
///
/// `ParseStrictResponse` impl for `UpdateAllowList`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAllowList {
    _private: (),
}
impl UpdateAllowList {
    /// Creates a new builder-style object to manufacture [`UpdateAllowListInput`](crate::input::UpdateAllowListInput).
    pub fn builder() -> crate::input::update_allow_list_input::Builder {
        crate::input::update_allow_list_input::Builder::default()
    }
    /// Creates a new `UpdateAllowList` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAllowList {
    type Output = std::result::Result<
        crate::output::UpdateAllowListOutput,
        crate::error::UpdateAllowListError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_allow_list::de_update_allow_list_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_allow_list::de_update_allow_list_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateAutomatedDiscoveryConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_automated_discovery_configuration`](crate::client::fluent_builders::UpdateAutomatedDiscoveryConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateAutomatedDiscoveryConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAutomatedDiscoveryConfiguration {
    _private: (),
}
impl UpdateAutomatedDiscoveryConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateAutomatedDiscoveryConfigurationInput`](crate::input::UpdateAutomatedDiscoveryConfigurationInput).
    pub fn builder() -> crate::input::update_automated_discovery_configuration_input::Builder {
        crate::input::update_automated_discovery_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateAutomatedDiscoveryConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAutomatedDiscoveryConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateAutomatedDiscoveryConfigurationOutput,
        crate::error::UpdateAutomatedDiscoveryConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_automated_discovery_configuration::de_update_automated_discovery_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_automated_discovery_configuration::de_update_automated_discovery_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateClassificationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_classification_job`](crate::client::fluent_builders::UpdateClassificationJob).
///
/// `ParseStrictResponse` impl for `UpdateClassificationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateClassificationJob {
    _private: (),
}
impl UpdateClassificationJob {
    /// Creates a new builder-style object to manufacture [`UpdateClassificationJobInput`](crate::input::UpdateClassificationJobInput).
    pub fn builder() -> crate::input::update_classification_job_input::Builder {
        crate::input::update_classification_job_input::Builder::default()
    }
    /// Creates a new `UpdateClassificationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateClassificationJob {
    type Output = std::result::Result<
        crate::output::UpdateClassificationJobOutput,
        crate::error::UpdateClassificationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_classification_job::de_update_classification_job_http_error(response)
        } else {
            crate::protocol_serde::shape_update_classification_job::de_update_classification_job_http_response(response)
        }
    }
}

/// Operation shape for `UpdateClassificationScope`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_classification_scope`](crate::client::fluent_builders::UpdateClassificationScope).
///
/// `ParseStrictResponse` impl for `UpdateClassificationScope`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateClassificationScope {
    _private: (),
}
impl UpdateClassificationScope {
    /// Creates a new builder-style object to manufacture [`UpdateClassificationScopeInput`](crate::input::UpdateClassificationScopeInput).
    pub fn builder() -> crate::input::update_classification_scope_input::Builder {
        crate::input::update_classification_scope_input::Builder::default()
    }
    /// Creates a new `UpdateClassificationScope` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateClassificationScope {
    type Output = std::result::Result<
        crate::output::UpdateClassificationScopeOutput,
        crate::error::UpdateClassificationScopeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_classification_scope::de_update_classification_scope_http_error(response)
        } else {
            crate::protocol_serde::shape_update_classification_scope::de_update_classification_scope_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFindingsFilter`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_findings_filter`](crate::client::fluent_builders::UpdateFindingsFilter).
///
/// `ParseStrictResponse` impl for `UpdateFindingsFilter`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFindingsFilter {
    _private: (),
}
impl UpdateFindingsFilter {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsFilterInput`](crate::input::UpdateFindingsFilterInput).
    pub fn builder() -> crate::input::update_findings_filter_input::Builder {
        crate::input::update_findings_filter_input::Builder::default()
    }
    /// Creates a new `UpdateFindingsFilter` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFindingsFilter {
    type Output = std::result::Result<
        crate::output::UpdateFindingsFilterOutput,
        crate::error::UpdateFindingsFilterError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_findings_filter::de_update_findings_filter_http_error(response)
        } else {
            crate::protocol_serde::shape_update_findings_filter::de_update_findings_filter_http_response(response)
        }
    }
}

/// Operation shape for `UpdateMacieSession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_macie_session`](crate::client::fluent_builders::UpdateMacieSession).
///
/// `ParseStrictResponse` impl for `UpdateMacieSession`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateMacieSession {
    _private: (),
}
impl UpdateMacieSession {
    /// Creates a new builder-style object to manufacture [`UpdateMacieSessionInput`](crate::input::UpdateMacieSessionInput).
    pub fn builder() -> crate::input::update_macie_session_input::Builder {
        crate::input::update_macie_session_input::Builder::default()
    }
    /// Creates a new `UpdateMacieSession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateMacieSession {
    type Output = std::result::Result<
        crate::output::UpdateMacieSessionOutput,
        crate::error::UpdateMacieSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_macie_session::de_update_macie_session_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_macie_session::de_update_macie_session_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateMemberSession`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_member_session`](crate::client::fluent_builders::UpdateMemberSession).
///
/// `ParseStrictResponse` impl for `UpdateMemberSession`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateMemberSession {
    _private: (),
}
impl UpdateMemberSession {
    /// Creates a new builder-style object to manufacture [`UpdateMemberSessionInput`](crate::input::UpdateMemberSessionInput).
    pub fn builder() -> crate::input::update_member_session_input::Builder {
        crate::input::update_member_session_input::Builder::default()
    }
    /// Creates a new `UpdateMemberSession` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateMemberSession {
    type Output = std::result::Result<
        crate::output::UpdateMemberSessionOutput,
        crate::error::UpdateMemberSessionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_member_session::de_update_member_session_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_member_session::de_update_member_session_http_response(response)
        }
    }
}

/// Operation shape for `UpdateOrganizationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_organization_configuration`](crate::client::fluent_builders::UpdateOrganizationConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateOrganizationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateOrganizationConfiguration {
    _private: (),
}
impl UpdateOrganizationConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationInput`](crate::input::UpdateOrganizationConfigurationInput).
    pub fn builder() -> crate::input::update_organization_configuration_input::Builder {
        crate::input::update_organization_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateOrganizationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateOrganizationConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateOrganizationConfigurationOutput,
        crate::error::UpdateOrganizationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_organization_configuration::de_update_organization_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_organization_configuration::de_update_organization_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateResourceProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_resource_profile`](crate::client::fluent_builders::UpdateResourceProfile).
///
/// `ParseStrictResponse` impl for `UpdateResourceProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateResourceProfile {
    _private: (),
}
impl UpdateResourceProfile {
    /// Creates a new builder-style object to manufacture [`UpdateResourceProfileInput`](crate::input::UpdateResourceProfileInput).
    pub fn builder() -> crate::input::update_resource_profile_input::Builder {
        crate::input::update_resource_profile_input::Builder::default()
    }
    /// Creates a new `UpdateResourceProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateResourceProfile {
    type Output = std::result::Result<
        crate::output::UpdateResourceProfileOutput,
        crate::error::UpdateResourceProfileError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_resource_profile::de_update_resource_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_update_resource_profile::de_update_resource_profile_http_response(response)
        }
    }
}

/// Operation shape for `UpdateResourceProfileDetections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_resource_profile_detections`](crate::client::fluent_builders::UpdateResourceProfileDetections).
///
/// `ParseStrictResponse` impl for `UpdateResourceProfileDetections`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateResourceProfileDetections {
    _private: (),
}
impl UpdateResourceProfileDetections {
    /// Creates a new builder-style object to manufacture [`UpdateResourceProfileDetectionsInput`](crate::input::UpdateResourceProfileDetectionsInput).
    pub fn builder() -> crate::input::update_resource_profile_detections_input::Builder {
        crate::input::update_resource_profile_detections_input::Builder::default()
    }
    /// Creates a new `UpdateResourceProfileDetections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateResourceProfileDetections {
    type Output = std::result::Result<
        crate::output::UpdateResourceProfileDetectionsOutput,
        crate::error::UpdateResourceProfileDetectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_resource_profile_detections::de_update_resource_profile_detections_http_error(response)
        } else {
            crate::protocol_serde::shape_update_resource_profile_detections::de_update_resource_profile_detections_http_response(response)
        }
    }
}

/// Operation shape for `UpdateRevealConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_reveal_configuration`](crate::client::fluent_builders::UpdateRevealConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateRevealConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateRevealConfiguration {
    _private: (),
}
impl UpdateRevealConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateRevealConfigurationInput`](crate::input::UpdateRevealConfigurationInput).
    pub fn builder() -> crate::input::update_reveal_configuration_input::Builder {
        crate::input::update_reveal_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateRevealConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateRevealConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateRevealConfigurationOutput,
        crate::error::UpdateRevealConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_reveal_configuration::de_update_reveal_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_reveal_configuration::de_update_reveal_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateSensitivityInspectionTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_sensitivity_inspection_template`](crate::client::fluent_builders::UpdateSensitivityInspectionTemplate).
///
/// `ParseStrictResponse` impl for `UpdateSensitivityInspectionTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSensitivityInspectionTemplate {
    _private: (),
}
impl UpdateSensitivityInspectionTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateSensitivityInspectionTemplateInput`](crate::input::UpdateSensitivityInspectionTemplateInput).
    pub fn builder() -> crate::input::update_sensitivity_inspection_template_input::Builder {
        crate::input::update_sensitivity_inspection_template_input::Builder::default()
    }
    /// Creates a new `UpdateSensitivityInspectionTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSensitivityInspectionTemplate {
    type Output = std::result::Result<
        crate::output::UpdateSensitivityInspectionTemplateOutput,
        crate::error::UpdateSensitivityInspectionTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_sensitivity_inspection_template::de_update_sensitivity_inspection_template_http_error(response)
        } else {
            crate::protocol_serde::shape_update_sensitivity_inspection_template::de_update_sensitivity_inspection_template_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
