// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_buckets_output_next_token(
    input: &crate::output::DescribeBucketsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_usage_statistics_output_next_token(
    input: &crate::output::GetUsageStatisticsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_classification_jobs_output_next_token(
    input: &crate::output::ListClassificationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_custom_data_identifiers_output_next_token(
    input: &crate::output::ListCustomDataIdentifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_findings_output_next_token(
    input: &crate::output::ListFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_findings_filters_output_next_token(
    input: &crate::output::ListFindingsFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_invitations_output_next_token(
    input: &crate::output::ListInvitationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_members_output_next_token(
    input: &crate::output::ListMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_organization_admin_accounts_output_next_token(
    input: &crate::output::ListOrganizationAdminAccountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_search_resources_output_next_token(
    input: &crate::output::SearchResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_buckets_output_buckets(
    input: crate::output::DescribeBucketsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::BucketMetadata>> {
    let input = match input.buckets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_usage_statistics_output_records(
    input: crate::output::GetUsageStatisticsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UsageRecord>> {
    let input = match input.records {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_classification_jobs_output_items(
    input: crate::output::ListClassificationJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_custom_data_identifiers_output_items(
    input: crate::output::ListCustomDataIdentifiersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CustomDataIdentifierSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_findings_output_finding_ids(
    input: crate::output::ListFindingsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.finding_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_findings_filters_output_findings_filter_list_items(
    input: crate::output::ListFindingsFiltersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FindingsFilterListItem>> {
    let input = match input.findings_filter_list_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_invitations_output_invitations(
    input: crate::output::ListInvitationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Invitation>> {
    let input = match input.invitations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_members_output_members(
    input: crate::output::ListMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Member>> {
    let input = match input.members {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_organization_admin_accounts_output_admin_accounts(
    input: crate::output::ListOrganizationAdminAccountsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AdminAccount>> {
    let input = match input.admin_accounts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_search_resources_output_matching_resources(
    input: crate::output::SearchResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::MatchingResource>> {
    let input = match input.matching_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
