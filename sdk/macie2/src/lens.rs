// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_buckets_output_next_token(
    input: &crate::operation::describe_buckets::DescribeBucketsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_usage_statistics_output_next_token(
    input: &crate::operation::get_usage_statistics::GetUsageStatisticsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_allow_lists_output_next_token(
    input: &crate::operation::list_allow_lists::ListAllowListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_classification_jobs_output_next_token(
    input: &crate::operation::list_classification_jobs::ListClassificationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_classification_scopes_output_next_token(
    input: &crate::operation::list_classification_scopes::ListClassificationScopesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_custom_data_identifiers_output_next_token(
    input: &crate::operation::list_custom_data_identifiers::ListCustomDataIdentifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_findings_output_next_token(
    input: &crate::operation::list_findings::ListFindingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_findings_filters_output_next_token(
    input: &crate::operation::list_findings_filters::ListFindingsFiltersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_invitations_output_next_token(
    input: &crate::operation::list_invitations::ListInvitationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_managed_data_identifiers_output_next_token(
    input: &crate::operation::list_managed_data_identifiers::ListManagedDataIdentifiersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_members_output_next_token(
    input: &crate::operation::list_members::ListMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_organization_admin_accounts_output_next_token(
    input: &crate::operation::list_organization_admin_accounts::ListOrganizationAdminAccountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_profile_artifacts_output_next_token(
    input: &crate::operation::list_resource_profile_artifacts::ListResourceProfileArtifactsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_resource_profile_detections_output_next_token(
    input: &crate::operation::list_resource_profile_detections::ListResourceProfileDetectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_sensitivity_inspection_templates_output_next_token(
    input: &crate::operation::list_sensitivity_inspection_templates::ListSensitivityInspectionTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_resources_output_next_token(
    input: &crate::operation::search_resources::SearchResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_buckets_output_buckets(
    input: crate::operation::describe_buckets::DescribeBucketsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BucketMetadata>> {
    let input = match input.buckets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_usage_statistics_output_records(
    input: crate::operation::get_usage_statistics::GetUsageStatisticsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::UsageRecord>> {
    let input = match input.records {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_allow_lists_output_allow_lists(
    input: crate::operation::list_allow_lists::ListAllowListsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AllowListSummary>> {
    let input = match input.allow_lists {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_classification_jobs_output_items(
    input: crate::operation::list_classification_jobs::ListClassificationJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_classification_scopes_output_classification_scopes(
    input: crate::operation::list_classification_scopes::ListClassificationScopesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClassificationScopeSummary>> {
    let input = match input.classification_scopes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_custom_data_identifiers_output_items(
    input: crate::operation::list_custom_data_identifiers::ListCustomDataIdentifiersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::CustomDataIdentifierSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_findings_output_finding_ids(
    input: crate::operation::list_findings::ListFindingsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.finding_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_findings_filters_output_findings_filter_list_items(
    input: crate::operation::list_findings_filters::ListFindingsFiltersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::FindingsFilterListItem>> {
    let input = match input.findings_filter_list_items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_invitations_output_invitations(
    input: crate::operation::list_invitations::ListInvitationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Invitation>> {
    let input = match input.invitations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_managed_data_identifiers_output_items(
    input: crate::operation::list_managed_data_identifiers::ListManagedDataIdentifiersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ManagedDataIdentifierSummary>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_members_output_members(
    input: crate::operation::list_members::ListMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Member>> {
    let input = match input.members {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_organization_admin_accounts_output_admin_accounts(
    input: crate::operation::list_organization_admin_accounts::ListOrganizationAdminAccountsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AdminAccount>> {
    let input = match input.admin_accounts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_profile_artifacts_output_artifacts(
    input: crate::operation::list_resource_profile_artifacts::ListResourceProfileArtifactsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ResourceProfileArtifact>> {
    let input = match input.artifacts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_resource_profile_detections_output_detections(
    input: crate::operation::list_resource_profile_detections::ListResourceProfileDetectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Detection>> {
    let input = match input.detections {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_sensitivity_inspection_templates_output_sensitivity_inspection_templates(
    input: crate::operation::list_sensitivity_inspection_templates::ListSensitivityInspectionTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SensitivityInspectionTemplatesEntry>> {
    let input = match input.sensitivity_inspection_templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_search_resources_output_matching_resources(
    input: crate::operation::search_resources::SearchResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MatchingResource>> {
    let input = match input.matching_resources {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
