// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_classification_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_classification_job::CreateClassificationJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.allow_list_ids {
        let mut array_2 = object.key("allowListIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.custom_data_identifier_ids {
        let mut array_6 = object.key("customDataIdentifierIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.initial_run {
        object.key("initialRun").boolean(*var_9);
    }
    if let Some(var_10) = &input.job_type {
        object.key("jobType").string(var_10.as_str());
    }
    if let Some(var_11) = &input.managed_data_identifier_ids {
        let mut array_12 = object.key("managedDataIdentifierIds").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.managed_data_identifier_selector {
        object.key("managedDataIdentifierSelector").string(var_14.as_str());
    }
    if let Some(var_15) = &input.name {
        object.key("name").string(var_15.as_str());
    }
    if let Some(var_16) = &input.s3_job_definition {
        #[allow(unused_mut)]
        let mut object_17 = object.key("s3JobDefinition").start_object();
        crate::protocol_serde::shape_s3_job_definition::ser_s3_job_definition(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.sampling_percentage {
        object.key("samplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.schedule_frequency {
        #[allow(unused_mut)]
        let mut object_20 = object.key("scheduleFrequency").start_object();
        crate::protocol_serde::shape_job_schedule_frequency::ser_job_schedule_frequency(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.tags {
        #[allow(unused_mut)]
        let mut object_22 = object.key("tags").start_object();
        for (key_23, value_24) in var_21 {
            {
                object_22.key(key_23.as_str()).string(value_24.as_str());
            }
        }
        object_22.finish();
    }
    Ok(())
}
