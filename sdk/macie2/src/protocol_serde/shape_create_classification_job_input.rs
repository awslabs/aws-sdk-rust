// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_classification_job_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_classification_job::CreateClassificationJobInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.allow_list_ids {
        let mut array_2 = object.key("allowListIds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.client_token {
        object.key("clientToken").string(var_4.as_str());
    }
    if let Some(var_5) = &input.custom_data_identifier_ids {
        let mut array_6 = object.key("customDataIdentifierIds").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if input.initial_run {
        object.key("initialRun").boolean(input.initial_run);
    }
    if let Some(var_9) = &input.job_type {
        object.key("jobType").string(var_9.as_str());
    }
    if let Some(var_10) = &input.managed_data_identifier_ids {
        let mut array_11 = object.key("managedDataIdentifierIds").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.managed_data_identifier_selector {
        object
            .key("managedDataIdentifierSelector")
            .string(var_13.as_str());
    }
    if let Some(var_14) = &input.name {
        object.key("name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.s3_job_definition {
        #[allow(unused_mut)]
        let mut object_16 = object.key("s3JobDefinition").start_object();
        crate::protocol_serde::shape_s3_job_definition::ser_s3_job_definition(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if input.sampling_percentage != 0 {
        object.key("samplingPercentage").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.sampling_percentage).into()),
        );
    }
    if let Some(var_17) = &input.schedule_frequency {
        #[allow(unused_mut)]
        let mut object_18 = object.key("scheduleFrequency").start_object();
        crate::protocol_serde::shape_job_schedule_frequency::ser_job_schedule_frequency(
            &mut object_18,
            var_17,
        )?;
        object_18.finish();
    }
    if let Some(var_19) = &input.tags {
        #[allow(unused_mut)]
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21.as_str()).string(value_22.as_str());
            }
        }
        object_20.finish();
    }
    Ok(())
}
