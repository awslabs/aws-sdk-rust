// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_usage_statistics_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_usage_statistics::GetUsageStatisticsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.filter_by {
        let mut array_2 = object.key("filterBy").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_usage_statistics_filter::ser_usage_statistics_filter(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.next_token {
        object.key("nextToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.sort_by {
        #[allow(unused_mut)]
        let mut object_8 = object.key("sortBy").start_object();
        crate::protocol_serde::shape_usage_statistics_sort_by::ser_usage_statistics_sort_by(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.time_range {
        object.key("timeRange").string(var_9.as_str());
    }
    Ok(())
}
