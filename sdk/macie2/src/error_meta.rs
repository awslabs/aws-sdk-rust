// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Provides information about an error that occurred due to insufficient access to a specified resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Provides information about an error that occurred due to a versioning conflict for a specified resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>Provides information about an error that occurred due to an unknown internal server error, exception, or failure.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>Provides information about an error that occurred because a specified resource wasn't found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>Provides information about an error that occurred due to one or more service quotas for an account.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>Provides information about an error that occurred because too many requests were sent during a certain amount of time.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>Provides information about an error that occurred due to an unprocessable entity.</p>
    UnprocessableEntityException(crate::error::UnprocessableEntityException),
    /// <p>Provides information about an error that occurred due to a syntax error in a request.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnprocessableEntityException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptInvitationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptInvitationError> for Error {
    fn from(err: crate::error::AcceptInvitationError) -> Self {
        match err {
            crate::error::AcceptInvitationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AcceptInvitationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AcceptInvitationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AcceptInvitationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptInvitationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::AcceptInvitationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AcceptInvitationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcceptInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetCustomDataIdentifiersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchGetCustomDataIdentifiersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetCustomDataIdentifiersError> for Error {
    fn from(err: crate::error::BatchGetCustomDataIdentifiersError) -> Self {
        match err {
            crate::error::BatchGetCustomDataIdentifiersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::BatchGetCustomDataIdentifiersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchGetCustomDataIdentifiersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAllowListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateAllowListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAllowListError> for Error {
    fn from(err: crate::error::CreateAllowListError) -> Self {
        match err {
            crate::error::CreateAllowListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAllowListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAllowListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAllowListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAllowListError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateAllowListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateAllowListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAllowListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateClassificationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateClassificationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateClassificationJobError> for Error {
    fn from(err: crate::error::CreateClassificationJobError) -> Self {
        match err {
            crate::error::CreateClassificationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateClassificationJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateClassificationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateClassificationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateClassificationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateClassificationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateClassificationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateClassificationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomDataIdentifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCustomDataIdentifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomDataIdentifierError> for Error {
    fn from(err: crate::error::CreateCustomDataIdentifierError) -> Self {
        match err {
            crate::error::CreateCustomDataIdentifierError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateCustomDataIdentifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFindingsFilterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateFindingsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFindingsFilterError> for Error {
    fn from(err: crate::error::CreateFindingsFilterError) -> Self {
        match err {
            crate::error::CreateFindingsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateFindingsFilterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateFindingsFilterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateFindingsFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFindingsFilterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateFindingsFilterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFindingsFilterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateFindingsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInvitationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInvitationsError> for Error {
    fn from(err: crate::error::CreateInvitationsError) -> Self {
        match err {
            crate::error::CreateInvitationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateInvitationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateInvitationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateInvitationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateInvitationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMemberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMemberError> for Error {
    fn from(err: crate::error::CreateMemberError) -> Self {
        match err {
            crate::error::CreateMemberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateMemberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateMemberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateMemberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateMemberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateMemberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSampleFindingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSampleFindingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSampleFindingsError> for Error {
    fn from(err: crate::error::CreateSampleFindingsError) -> Self {
        match err {
            crate::error::CreateSampleFindingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSampleFindingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSampleFindingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSampleFindingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateSampleFindingsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateSampleFindingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSampleFindingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateSampleFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeclineInvitationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeclineInvitationsError> for Error {
    fn from(err: crate::error::DeclineInvitationsError) -> Self {
        match err {
            crate::error::DeclineInvitationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeclineInvitationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeclineInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeclineInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeclineInvitationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeclineInvitationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeclineInvitationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeclineInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAllowListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAllowListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAllowListError> for Error {
    fn from(err: crate::error::DeleteAllowListError) -> Self {
        match err {
            crate::error::DeleteAllowListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAllowListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAllowListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAllowListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteAllowListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAllowListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomDataIdentifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomDataIdentifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomDataIdentifierError> for Error {
    fn from(err: crate::error::DeleteCustomDataIdentifierError) -> Self {
        match err {
            crate::error::DeleteCustomDataIdentifierError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteCustomDataIdentifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFindingsFilterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteFindingsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFindingsFilterError> for Error {
    fn from(err: crate::error::DeleteFindingsFilterError) -> Self {
        match err {
            crate::error::DeleteFindingsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteFindingsFilterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteFindingsFilterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteFindingsFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFindingsFilterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteFindingsFilterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFindingsFilterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteFindingsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInvitationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInvitationsError> for Error {
    fn from(err: crate::error::DeleteInvitationsError) -> Self {
        match err {
            crate::error::DeleteInvitationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteInvitationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteInvitationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteInvitationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteInvitationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMemberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMemberError> for Error {
    fn from(err: crate::error::DeleteMemberError) -> Self {
        match err {
            crate::error::DeleteMemberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteMemberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteMemberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteMemberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteMemberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DeleteMemberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBucketsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBucketsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBucketsError> for Error {
    fn from(err: crate::error::DescribeBucketsError) -> Self {
        match err {
            crate::error::DescribeBucketsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBucketsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeBucketsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBucketsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeBucketsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeBucketsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBucketsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeBucketsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeClassificationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeClassificationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeClassificationJobError> for Error {
    fn from(err: crate::error::DescribeClassificationJobError) -> Self {
        match err {
            crate::error::DescribeClassificationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeClassificationJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeClassificationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeClassificationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeClassificationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DescribeClassificationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeClassificationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeClassificationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeOrganizationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrganizationConfigurationError> for Error {
    fn from(err: crate::error::DescribeOrganizationConfigurationError) -> Self {
        match err {
            crate::error::DescribeOrganizationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DescribeOrganizationConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeOrganizationConfigurationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::DescribeOrganizationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeOrganizationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableMacieError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisableMacieError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableMacieError> for Error {
    fn from(err: crate::error::DisableMacieError) -> Self {
        match err {
            crate::error::DisableMacieError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisableMacieError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisableMacieError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisableMacieError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisableMacieError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DisableMacieError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisableMacieError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisableMacieError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisableOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisableOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::DisableOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::DisableOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisableOrganizationAdminAccountError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::DisableOrganizationAdminAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisableOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateFromAdministratorAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateFromAdministratorAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFromAdministratorAccountError> for Error {
    fn from(err: crate::error::DisassociateFromAdministratorAccountError) -> Self {
        match err {
            crate::error::DisassociateFromAdministratorAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DisassociateFromAdministratorAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DisassociateFromAdministratorAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DisassociateFromAdministratorAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateFromMasterAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFromMasterAccountError> for Error {
    fn from(err: crate::error::DisassociateFromMasterAccountError) -> Self {
        match err {
            crate::error::DisassociateFromMasterAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::DisassociateFromMasterAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateFromMasterAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateMemberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateMemberError> for Error {
    fn from(err: crate::error::DisassociateMemberError) -> Self {
        match err {
            crate::error::DisassociateMemberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateMemberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateMemberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateMemberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateMemberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::DisassociateMemberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::EnableMacieError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::EnableMacieError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableMacieError> for Error {
    fn from(err: crate::error::EnableMacieError) -> Self {
        match err {
            crate::error::EnableMacieError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EnableMacieError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::EnableMacieError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::EnableMacieError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::EnableMacieError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::EnableMacieError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::EnableMacieError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::EnableMacieError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::EnableOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::EnableOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::EnableOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::EnableOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::EnableOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::EnableOrganizationAdminAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::EnableOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAdministratorAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAdministratorAccountError> for Error {
    fn from(err: crate::error::GetAdministratorAccountError) -> Self {
        match err {
            crate::error::GetAdministratorAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAdministratorAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetAdministratorAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAdministratorAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAdministratorAccountError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetAdministratorAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAdministratorAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAdministratorAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAllowListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAllowListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAllowListError> for Error {
    fn from(err: crate::error::GetAllowListError) -> Self {
        match err {
            crate::error::GetAllowListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAllowListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAllowListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAllowListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAllowListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAllowListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetAutomatedDiscoveryConfigurationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAutomatedDiscoveryConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAutomatedDiscoveryConfigurationError> for Error {
    fn from(err: crate::error::GetAutomatedDiscoveryConfigurationError) -> Self {
        match err {
            crate::error::GetAutomatedDiscoveryConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAutomatedDiscoveryConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::GetAutomatedDiscoveryConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetAutomatedDiscoveryConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAutomatedDiscoveryConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBucketStatisticsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBucketStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBucketStatisticsError> for Error {
    fn from(err: crate::error::GetBucketStatisticsError) -> Self {
        match err {
            crate::error::GetBucketStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetBucketStatisticsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetBucketStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetBucketStatisticsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBucketStatisticsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetBucketStatisticsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetBucketStatisticsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetBucketStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetClassificationExportConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetClassificationExportConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetClassificationExportConfigurationError> for Error {
    fn from(err: crate::error::GetClassificationExportConfigurationError) -> Self {
        match err {
            crate::error::GetClassificationExportConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetClassificationExportConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetClassificationExportConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetClassificationExportConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetClassificationExportConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetClassificationExportConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetClassificationExportConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetClassificationExportConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetClassificationScopeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetClassificationScopeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetClassificationScopeError> for Error {
    fn from(err: crate::error::GetClassificationScopeError) -> Self {
        match err {
            crate::error::GetClassificationScopeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetClassificationScopeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetClassificationScopeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetClassificationScopeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetClassificationScopeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetClassificationScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCustomDataIdentifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCustomDataIdentifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCustomDataIdentifierError> for Error {
    fn from(err: crate::error::GetCustomDataIdentifierError) -> Self {
        match err {
            crate::error::GetCustomDataIdentifierError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetCustomDataIdentifierError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetCustomDataIdentifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetCustomDataIdentifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCustomDataIdentifierError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetCustomDataIdentifierError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetCustomDataIdentifierError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCustomDataIdentifierError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingsError> for Error {
    fn from(err: crate::error::GetFindingsError) -> Self {
        match err {
            crate::error::GetFindingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFindingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetFindingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetFindingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFindingsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetFindingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFindingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingsFilterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFindingsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingsFilterError> for Error {
    fn from(err: crate::error::GetFindingsFilterError) -> Self {
        match err {
            crate::error::GetFindingsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFindingsFilterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetFindingsFilterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetFindingsFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFindingsFilterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetFindingsFilterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFindingsFilterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFindingsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetFindingsPublicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetFindingsPublicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingsPublicationConfigurationError> for Error {
    fn from(err: crate::error::GetFindingsPublicationConfigurationError) -> Self {
        match err {
            crate::error::GetFindingsPublicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetFindingsPublicationConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetFindingsPublicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetFindingsPublicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetFindingsPublicationConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetFindingsPublicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetFindingsPublicationConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::GetFindingsPublicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetFindingStatisticsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetFindingStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFindingStatisticsError> for Error {
    fn from(err: crate::error::GetFindingStatisticsError) -> Self {
        match err {
            crate::error::GetFindingStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetFindingStatisticsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetFindingStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetFindingStatisticsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetFindingStatisticsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetFindingStatisticsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetFindingStatisticsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetFindingStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInvitationsCountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInvitationsCountError> for Error {
    fn from(err: crate::error::GetInvitationsCountError) -> Self {
        match err {
            crate::error::GetInvitationsCountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInvitationsCountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetInvitationsCountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetInvitationsCountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetInvitationsCountError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetInvitationsCountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetInvitationsCountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetInvitationsCountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMacieSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMacieSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMacieSessionError> for Error {
    fn from(err: crate::error::GetMacieSessionError) -> Self {
        match err {
            crate::error::GetMacieSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetMacieSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetMacieSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetMacieSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMacieSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetMacieSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetMacieSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetMacieSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMasterAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMasterAccountError> for Error {
    fn from(err: crate::error::GetMasterAccountError) -> Self {
        match err {
            crate::error::GetMasterAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetMasterAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetMasterAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetMasterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMasterAccountError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetMasterAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetMasterAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetMasterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMemberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMemberError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMemberError> for Error {
    fn from(err: crate::error::GetMemberError) -> Self {
        match err {
            crate::error::GetMemberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetMemberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetMemberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetMemberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMemberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetMemberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetMemberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetMemberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceProfileError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetResourceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceProfileError> for Error {
    fn from(err: crate::error::GetResourceProfileError) -> Self {
        match err {
            crate::error::GetResourceProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetResourceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetResourceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResourceProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetResourceProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetResourceProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetResourceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRevealConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRevealConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRevealConfigurationError> for Error {
    fn from(err: crate::error::GetRevealConfigurationError) -> Self {
        match err {
            crate::error::GetRevealConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetRevealConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetRevealConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetRevealConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetRevealConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSensitiveDataOccurrencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSensitiveDataOccurrencesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSensitiveDataOccurrencesError> for Error {
    fn from(err: crate::error::GetSensitiveDataOccurrencesError) -> Self {
        match err {
            crate::error::GetSensitiveDataOccurrencesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSensitiveDataOccurrencesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSensitiveDataOccurrencesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSensitiveDataOccurrencesError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::GetSensitiveDataOccurrencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSensitiveDataOccurrencesError::UnprocessableEntityException(inner) => {
                Error::UnprocessableEntityException(inner)
            }
            crate::error::GetSensitiveDataOccurrencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetSensitiveDataOccurrencesAvailabilityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetSensitiveDataOccurrencesAvailabilityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSensitiveDataOccurrencesAvailabilityError> for Error {
    fn from(err: crate::error::GetSensitiveDataOccurrencesAvailabilityError) -> Self {
        match err {
            crate::error::GetSensitiveDataOccurrencesAvailabilityError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetSensitiveDataOccurrencesAvailabilityError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetSensitiveDataOccurrencesAvailabilityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetSensitiveDataOccurrencesAvailabilityError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetSensitiveDataOccurrencesAvailabilityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetSensitivityInspectionTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetSensitivityInspectionTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSensitivityInspectionTemplateError> for Error {
    fn from(err: crate::error::GetSensitivityInspectionTemplateError) -> Self {
        match err {
            crate::error::GetSensitivityInspectionTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSensitivityInspectionTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSensitivityInspectionTemplateError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetSensitivityInspectionTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetSensitivityInspectionTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetSensitivityInspectionTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsageStatisticsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUsageStatisticsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsageStatisticsError> for Error {
    fn from(err: crate::error::GetUsageStatisticsError) -> Self {
        match err {
            crate::error::GetUsageStatisticsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetUsageStatisticsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetUsageStatisticsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetUsageStatisticsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUsageStatisticsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetUsageStatisticsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetUsageStatisticsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUsageStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsageTotalsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsageTotalsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsageTotalsError> for Error {
    fn from(err: crate::error::GetUsageTotalsError) -> Self {
        match err {
            crate::error::GetUsageTotalsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetUsageTotalsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetUsageTotalsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetUsageTotalsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUsageTotalsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::GetUsageTotalsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetUsageTotalsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUsageTotalsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAllowListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAllowListsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAllowListsError> for Error {
    fn from(err: crate::error::ListAllowListsError) -> Self {
        match err {
            crate::error::ListAllowListsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAllowListsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAllowListsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListAllowListsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAllowListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClassificationJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListClassificationJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClassificationJobsError> for Error {
    fn from(err: crate::error::ListClassificationJobsError) -> Self {
        match err {
            crate::error::ListClassificationJobsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListClassificationJobsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListClassificationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListClassificationJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListClassificationJobsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListClassificationJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListClassificationJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListClassificationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListClassificationScopesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListClassificationScopesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListClassificationScopesError> for Error {
    fn from(err: crate::error::ListClassificationScopesError) -> Self {
        match err {
            crate::error::ListClassificationScopesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListClassificationScopesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListClassificationScopesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListClassificationScopesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListClassificationScopesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListCustomDataIdentifiersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListCustomDataIdentifiersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListCustomDataIdentifiersError> for Error {
    fn from(err: crate::error::ListCustomDataIdentifiersError) -> Self {
        match err {
            crate::error::ListCustomDataIdentifiersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListCustomDataIdentifiersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFindingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFindingsError> for Error {
    fn from(err: crate::error::ListFindingsError) -> Self {
        match err {
            crate::error::ListFindingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFindingsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListFindingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFindingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFindingsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListFindingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFindingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFindingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFindingsFiltersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFindingsFiltersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFindingsFiltersError> for Error {
    fn from(err: crate::error::ListFindingsFiltersError) -> Self {
        match err {
            crate::error::ListFindingsFiltersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListFindingsFiltersError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListFindingsFiltersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFindingsFiltersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFindingsFiltersError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListFindingsFiltersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFindingsFiltersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListFindingsFiltersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListInvitationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInvitationsError> for Error {
    fn from(err: crate::error::ListInvitationsError) -> Self {
        match err {
            crate::error::ListInvitationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListInvitationsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListInvitationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListInvitationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListInvitationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListInvitationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListInvitationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListInvitationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListManagedDataIdentifiersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListManagedDataIdentifiersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListManagedDataIdentifiersError> for Error {
    fn from(err: crate::error::ListManagedDataIdentifiersError) -> Self {
        match err {
            crate::error::ListManagedDataIdentifiersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListMembersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMembersError> for Error {
    fn from(err: crate::error::ListMembersError) -> Self {
        match err {
            crate::error::ListMembersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListMembersError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListMembersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListMembersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListMembersError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::ListMembersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListMembersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListMembersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListOrganizationAdminAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListOrganizationAdminAccountsError> for Error {
    fn from(err: crate::error::ListOrganizationAdminAccountsError) -> Self {
        match err {
            crate::error::ListOrganizationAdminAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListOrganizationAdminAccountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListOrganizationAdminAccountsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceProfileArtifactsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceProfileArtifactsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceProfileArtifactsError> for Error {
    fn from(err: crate::error::ListResourceProfileArtifactsError) -> Self {
        match err {
            crate::error::ListResourceProfileArtifactsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResourceProfileArtifactsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListResourceProfileArtifactsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListResourceProfileArtifactsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResourceProfileArtifactsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListResourceProfileArtifactsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceProfileDetectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceProfileDetectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceProfileDetectionsError> for Error {
    fn from(err: crate::error::ListResourceProfileDetectionsError) -> Self {
        match err {
            crate::error::ListResourceProfileDetectionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResourceProfileDetectionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListResourceProfileDetectionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListResourceProfileDetectionsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListResourceProfileDetectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListResourceProfileDetectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListResourceProfileDetectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListSensitivityInspectionTemplatesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListSensitivityInspectionTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSensitivityInspectionTemplatesError> for Error {
    fn from(err: crate::error::ListSensitivityInspectionTemplatesError) -> Self {
        match err {
            crate::error::ListSensitivityInspectionTemplatesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListSensitivityInspectionTemplatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListSensitivityInspectionTemplatesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::ListSensitivityInspectionTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::ListSensitivityInspectionTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListSensitivityInspectionTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutClassificationExportConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutClassificationExportConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutClassificationExportConfigurationError> for Error {
    fn from(err: crate::error::PutClassificationExportConfigurationError) -> Self {
        match err {
            crate::error::PutClassificationExportConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutClassificationExportConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::PutClassificationExportConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::PutClassificationExportConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::PutClassificationExportConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::PutClassificationExportConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::PutClassificationExportConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutClassificationExportConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PutFindingsPublicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutFindingsPublicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutFindingsPublicationConfigurationError> for Error {
    fn from(err: crate::error::PutFindingsPublicationConfigurationError) -> Self {
        match err {
            crate::error::PutFindingsPublicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::PutFindingsPublicationConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::PutFindingsPublicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::PutFindingsPublicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::PutFindingsPublicationConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::PutFindingsPublicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::PutFindingsPublicationConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PutFindingsPublicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchResourcesError> for Error {
    fn from(err: crate::error::SearchResourcesError) -> Self {
        match err {
            crate::error::SearchResourcesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SearchResourcesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SearchResourcesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SearchResourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SearchResourcesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::SearchResourcesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SearchResourcesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SearchResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestCustomDataIdentifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TestCustomDataIdentifierError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestCustomDataIdentifierError> for Error {
    fn from(err: crate::error::TestCustomDataIdentifierError) -> Self {
        match err {
            crate::error::TestCustomDataIdentifierError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TestCustomDataIdentifierError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TestCustomDataIdentifierError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TestCustomDataIdentifierError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TestCustomDataIdentifierError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TestCustomDataIdentifierError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TestCustomDataIdentifierError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TestCustomDataIdentifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAllowListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAllowListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAllowListError> for Error {
    fn from(err: crate::error::UpdateAllowListError) -> Self {
        match err {
            crate::error::UpdateAllowListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAllowListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAllowListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAllowListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateAllowListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAllowListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateAutomatedDiscoveryConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAutomatedDiscoveryConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAutomatedDiscoveryConfigurationError> for Error {
    fn from(err: crate::error::UpdateAutomatedDiscoveryConfigurationError) -> Self {
        match err {
            crate::error::UpdateAutomatedDiscoveryConfigurationError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::UpdateAutomatedDiscoveryConfigurationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::UpdateAutomatedDiscoveryConfigurationError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::error::UpdateAutomatedDiscoveryConfigurationError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::UpdateAutomatedDiscoveryConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClassificationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateClassificationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClassificationJobError> for Error {
    fn from(err: crate::error::UpdateClassificationJobError) -> Self {
        match err {
            crate::error::UpdateClassificationJobError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateClassificationJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateClassificationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateClassificationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateClassificationJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateClassificationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateClassificationJobError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateClassificationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClassificationScopeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateClassificationScopeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClassificationScopeError> for Error {
    fn from(err: crate::error::UpdateClassificationScopeError) -> Self {
        match err {
            crate::error::UpdateClassificationScopeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateClassificationScopeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateClassificationScopeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateClassificationScopeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateClassificationScopeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateClassificationScopeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFindingsFilterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFindingsFilterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFindingsFilterError> for Error {
    fn from(err: crate::error::UpdateFindingsFilterError) -> Self {
        match err {
            crate::error::UpdateFindingsFilterError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateFindingsFilterError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateFindingsFilterError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateFindingsFilterError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFindingsFilterError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateFindingsFilterError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateFindingsFilterError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateFindingsFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMacieSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMacieSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMacieSessionError> for Error {
    fn from(err: crate::error::UpdateMacieSessionError) -> Self {
        match err {
            crate::error::UpdateMacieSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateMacieSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMacieSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateMacieSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateMacieSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateMacieSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateMacieSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateMacieSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMemberSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMemberSessionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMemberSessionError> for Error {
    fn from(err: crate::error::UpdateMemberSessionError) -> Self {
        match err {
            crate::error::UpdateMemberSessionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateMemberSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMemberSessionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateMemberSessionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateMemberSessionError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateMemberSessionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateMemberSessionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateMemberSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateOrganizationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateOrganizationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateOrganizationConfigurationError> for Error {
    fn from(err: crate::error::UpdateOrganizationConfigurationError) -> Self {
        match err {
            crate::error::UpdateOrganizationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateOrganizationConfigurationError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateOrganizationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateOrganizationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceProfileError> for Error {
    fn from(err: crate::error::UpdateResourceProfileError) -> Self {
        match err {
            crate::error::UpdateResourceProfileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateResourceProfileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateResourceProfileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResourceProfileError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateResourceProfileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResourceProfileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateResourceProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceProfileDetectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateResourceProfileDetectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceProfileDetectionsError> for Error {
    fn from(err: crate::error::UpdateResourceProfileDetectionsError) -> Self {
        match err {
            crate::error::UpdateResourceProfileDetectionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateResourceProfileDetectionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateResourceProfileDetectionsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateResourceProfileDetectionsError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::UpdateResourceProfileDetectionsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateResourceProfileDetectionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateResourceProfileDetectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRevealConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRevealConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRevealConfigurationError> for Error {
    fn from(err: crate::error::UpdateRevealConfigurationError) -> Self {
        match err {
            crate::error::UpdateRevealConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateRevealConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateRevealConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRevealConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateRevealConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateSensitivityInspectionTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateSensitivityInspectionTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSensitivityInspectionTemplateError> for Error {
    fn from(err: crate::error::UpdateSensitivityInspectionTemplateError) -> Self {
        match err {
            crate::error::UpdateSensitivityInspectionTemplateError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::UpdateSensitivityInspectionTemplateError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::UpdateSensitivityInspectionTemplateError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateSensitivityInspectionTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSensitivityInspectionTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSensitivityInspectionTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnprocessableEntityException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
