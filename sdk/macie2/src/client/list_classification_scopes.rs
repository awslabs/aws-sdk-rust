// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListClassificationScopes`](crate::client::fluent_builders::ListClassificationScopes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListClassificationScopes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListClassificationScopes::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListClassificationScopes::set_name): <p>The name of the classification scope to retrieve the unique identifier for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListClassificationScopes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListClassificationScopes::set_next_token): <p>The nextToken string that specifies which page of results to return in a paginated response.</p>
    /// - On success, responds with [`ListClassificationScopesOutput`](crate::output::ListClassificationScopesOutput) with field(s):
    ///   - [`classification_scopes(Option<Vec<ClassificationScopeSummary>>)`](crate::output::ListClassificationScopesOutput::classification_scopes): <p>An array that specifies the unique identifier and name of the classification scope for the account.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListClassificationScopesOutput::next_token): <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    /// - On failure, responds with [`SdkError<ListClassificationScopesError>`](crate::error::ListClassificationScopesError)
    pub fn list_classification_scopes(
        &self,
    ) -> crate::client::fluent_builders::ListClassificationScopes {
        crate::client::fluent_builders::ListClassificationScopes::new(self.handle.clone())
    }
}
