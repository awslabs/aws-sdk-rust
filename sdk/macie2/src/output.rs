// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSensitivityInspectionTemplateOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateSensitivityInspectionTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateSensitivityInspectionTemplateOutput`](crate::output::UpdateSensitivityInspectionTemplateOutput).
pub mod update_sensitivity_inspection_template_output {

    /// A builder for [`UpdateSensitivityInspectionTemplateOutput`](crate::output::UpdateSensitivityInspectionTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSensitivityInspectionTemplateOutput`](crate::output::UpdateSensitivityInspectionTemplateOutput).
        pub fn build(self) -> crate::output::UpdateSensitivityInspectionTemplateOutput {
            crate::output::UpdateSensitivityInspectionTemplateOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateSensitivityInspectionTemplateOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSensitivityInspectionTemplateOutput`](crate::output::UpdateSensitivityInspectionTemplateOutput).
    pub fn builder() -> crate::output::update_sensitivity_inspection_template_output::Builder {
        crate::output::update_sensitivity_inspection_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateRevealConfigurationOutput {
    /// <p>The new configuration settings and the status of the configuration for the account.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::model::RevealConfiguration>,
    _request_id: Option<String>,
}
impl UpdateRevealConfigurationOutput {
    /// <p>The new configuration settings and the status of the configuration for the account.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::model::RevealConfiguration> {
        self.configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateRevealConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateRevealConfigurationOutput`](crate::output::UpdateRevealConfigurationOutput).
pub mod update_reveal_configuration_output {

    /// A builder for [`UpdateRevealConfigurationOutput`](crate::output::UpdateRevealConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configuration: std::option::Option<crate::model::RevealConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The new configuration settings and the status of the configuration for the account.</p>
        pub fn configuration(mut self, input: crate::model::RevealConfiguration) -> Self {
            self.configuration = Some(input);
            self
        }
        /// <p>The new configuration settings and the status of the configuration for the account.</p>
        pub fn set_configuration(
            mut self,
            input: std::option::Option<crate::model::RevealConfiguration>,
        ) -> Self {
            self.configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateRevealConfigurationOutput`](crate::output::UpdateRevealConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateRevealConfigurationOutput {
            crate::output::UpdateRevealConfigurationOutput {
                configuration: self.configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateRevealConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateRevealConfigurationOutput`](crate::output::UpdateRevealConfigurationOutput).
    pub fn builder() -> crate::output::update_reveal_configuration_output::Builder {
        crate::output::update_reveal_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateResourceProfileDetectionsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateResourceProfileDetectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateResourceProfileDetectionsOutput`](crate::output::UpdateResourceProfileDetectionsOutput).
pub mod update_resource_profile_detections_output {

    /// A builder for [`UpdateResourceProfileDetectionsOutput`](crate::output::UpdateResourceProfileDetectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateResourceProfileDetectionsOutput`](crate::output::UpdateResourceProfileDetectionsOutput).
        pub fn build(self) -> crate::output::UpdateResourceProfileDetectionsOutput {
            crate::output::UpdateResourceProfileDetectionsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateResourceProfileDetectionsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceProfileDetectionsOutput`](crate::output::UpdateResourceProfileDetectionsOutput).
    pub fn builder() -> crate::output::update_resource_profile_detections_output::Builder {
        crate::output::update_resource_profile_detections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateResourceProfileOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateResourceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateResourceProfileOutput`](crate::output::UpdateResourceProfileOutput).
pub mod update_resource_profile_output {

    /// A builder for [`UpdateResourceProfileOutput`](crate::output::UpdateResourceProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateResourceProfileOutput`](crate::output::UpdateResourceProfileOutput).
        pub fn build(self) -> crate::output::UpdateResourceProfileOutput {
            crate::output::UpdateResourceProfileOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateResourceProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateResourceProfileOutput`](crate::output::UpdateResourceProfileOutput).
    pub fn builder() -> crate::output::update_resource_profile_output::Builder {
        crate::output::update_resource_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateOrganizationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateOrganizationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
pub mod update_organization_configuration_output {

    /// A builder for [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateOrganizationConfigurationOutput {
            crate::output::UpdateOrganizationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateOrganizationConfigurationOutput`](crate::output::UpdateOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::update_organization_configuration_output::Builder {
        crate::output::update_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMemberSessionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateMemberSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMemberSessionOutput`](crate::output::UpdateMemberSessionOutput).
pub mod update_member_session_output {

    /// A builder for [`UpdateMemberSessionOutput`](crate::output::UpdateMemberSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMemberSessionOutput`](crate::output::UpdateMemberSessionOutput).
        pub fn build(self) -> crate::output::UpdateMemberSessionOutput {
            crate::output::UpdateMemberSessionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMemberSessionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMemberSessionOutput`](crate::output::UpdateMemberSessionOutput).
    pub fn builder() -> crate::output::update_member_session_output::Builder {
        crate::output::update_member_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMacieSessionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateMacieSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMacieSessionOutput`](crate::output::UpdateMacieSessionOutput).
pub mod update_macie_session_output {

    /// A builder for [`UpdateMacieSessionOutput`](crate::output::UpdateMacieSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMacieSessionOutput`](crate::output::UpdateMacieSessionOutput).
        pub fn build(self) -> crate::output::UpdateMacieSessionOutput {
            crate::output::UpdateMacieSessionOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMacieSessionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMacieSessionOutput`](crate::output::UpdateMacieSessionOutput).
    pub fn builder() -> crate::output::update_macie_session_output::Builder {
        crate::output::update_macie_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateFindingsFilterOutput {
    /// <p>The Amazon Resource Name (ARN) of the filter that was updated.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the filter that was updated.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateFindingsFilterOutput {
    /// <p>The Amazon Resource Name (ARN) of the filter that was updated.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the filter that was updated.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateFindingsFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateFindingsFilterOutput`](crate::output::UpdateFindingsFilterOutput).
pub mod update_findings_filter_output {

    /// A builder for [`UpdateFindingsFilterOutput`](crate::output::UpdateFindingsFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the filter that was updated.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the filter that was updated.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The unique identifier for the filter that was updated.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the filter that was updated.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateFindingsFilterOutput`](crate::output::UpdateFindingsFilterOutput).
        pub fn build(self) -> crate::output::UpdateFindingsFilterOutput {
            crate::output::UpdateFindingsFilterOutput {
                arn: self.arn,
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateFindingsFilterOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFindingsFilterOutput`](crate::output::UpdateFindingsFilterOutput).
    pub fn builder() -> crate::output::update_findings_filter_output::Builder {
        crate::output::update_findings_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateClassificationScopeOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateClassificationScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateClassificationScopeOutput`](crate::output::UpdateClassificationScopeOutput).
pub mod update_classification_scope_output {

    /// A builder for [`UpdateClassificationScopeOutput`](crate::output::UpdateClassificationScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClassificationScopeOutput`](crate::output::UpdateClassificationScopeOutput).
        pub fn build(self) -> crate::output::UpdateClassificationScopeOutput {
            crate::output::UpdateClassificationScopeOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateClassificationScopeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClassificationScopeOutput`](crate::output::UpdateClassificationScopeOutput).
    pub fn builder() -> crate::output::update_classification_scope_output::Builder {
        crate::output::update_classification_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateClassificationJobOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateClassificationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateClassificationJobOutput`](crate::output::UpdateClassificationJobOutput).
pub mod update_classification_job_output {

    /// A builder for [`UpdateClassificationJobOutput`](crate::output::UpdateClassificationJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClassificationJobOutput`](crate::output::UpdateClassificationJobOutput).
        pub fn build(self) -> crate::output::UpdateClassificationJobOutput {
            crate::output::UpdateClassificationJobOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateClassificationJobOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClassificationJobOutput`](crate::output::UpdateClassificationJobOutput).
    pub fn builder() -> crate::output::update_classification_job_output::Builder {
        crate::output::update_classification_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAutomatedDiscoveryConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateAutomatedDiscoveryConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateAutomatedDiscoveryConfigurationOutput`](crate::output::UpdateAutomatedDiscoveryConfigurationOutput).
pub mod update_automated_discovery_configuration_output {

    /// A builder for [`UpdateAutomatedDiscoveryConfigurationOutput`](crate::output::UpdateAutomatedDiscoveryConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAutomatedDiscoveryConfigurationOutput`](crate::output::UpdateAutomatedDiscoveryConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateAutomatedDiscoveryConfigurationOutput {
            crate::output::UpdateAutomatedDiscoveryConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateAutomatedDiscoveryConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAutomatedDiscoveryConfigurationOutput`](crate::output::UpdateAutomatedDiscoveryConfigurationOutput).
    pub fn builder() -> crate::output::update_automated_discovery_configuration_output::Builder {
        crate::output::update_automated_discovery_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the allow list.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the allow list.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateAllowListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateAllowListOutput`](crate::output::UpdateAllowListOutput).
pub mod update_allow_list_output {

    /// A builder for [`UpdateAllowListOutput`](crate::output::UpdateAllowListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAllowListOutput`](crate::output::UpdateAllowListOutput).
        pub fn build(self) -> crate::output::UpdateAllowListOutput {
            crate::output::UpdateAllowListOutput {
                arn: self.arn,
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateAllowListOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAllowListOutput`](crate::output::UpdateAllowListOutput).
    pub fn builder() -> crate::output::update_allow_list_output::Builder {
        crate::output::update_allow_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestCustomDataIdentifierOutput {
    /// <p>The number of occurrences of sample text that matched the criteria specified by the custom data identifier.</p>
    #[doc(hidden)]
    pub match_count: i32,
    _request_id: Option<String>,
}
impl TestCustomDataIdentifierOutput {
    /// <p>The number of occurrences of sample text that matched the criteria specified by the custom data identifier.</p>
    pub fn match_count(&self) -> i32 {
        self.match_count
    }
}
impl aws_http::request_id::RequestId for TestCustomDataIdentifierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TestCustomDataIdentifierOutput`](crate::output::TestCustomDataIdentifierOutput).
pub mod test_custom_data_identifier_output {

    /// A builder for [`TestCustomDataIdentifierOutput`](crate::output::TestCustomDataIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) match_count: std::option::Option<i32>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The number of occurrences of sample text that matched the criteria specified by the custom data identifier.</p>
        pub fn match_count(mut self, input: i32) -> Self {
            self.match_count = Some(input);
            self
        }
        /// <p>The number of occurrences of sample text that matched the criteria specified by the custom data identifier.</p>
        pub fn set_match_count(mut self, input: std::option::Option<i32>) -> Self {
            self.match_count = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TestCustomDataIdentifierOutput`](crate::output::TestCustomDataIdentifierOutput).
        pub fn build(self) -> crate::output::TestCustomDataIdentifierOutput {
            crate::output::TestCustomDataIdentifierOutput {
                match_count: self.match_count.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl TestCustomDataIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`TestCustomDataIdentifierOutput`](crate::output::TestCustomDataIdentifierOutput).
    pub fn builder() -> crate::output::test_custom_data_identifier_output::Builder {
        crate::output::test_custom_data_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchResourcesOutput {
    /// <p>An array of objects, one for each resource that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub matching_resources: std::option::Option<std::vec::Vec<crate::model::MatchingResource>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SearchResourcesOutput {
    /// <p>An array of objects, one for each resource that matches the filter criteria specified in the request.</p>
    pub fn matching_resources(&self) -> std::option::Option<&[crate::model::MatchingResource]> {
        self.matching_resources.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchResourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`SearchResourcesOutput`](crate::output::SearchResourcesOutput).
pub mod search_resources_output {

    /// A builder for [`SearchResourcesOutput`](crate::output::SearchResourcesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) matching_resources:
            std::option::Option<std::vec::Vec<crate::model::MatchingResource>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `matching_resources`.
        ///
        /// To override the contents of this collection use [`set_matching_resources`](Self::set_matching_resources).
        ///
        /// <p>An array of objects, one for each resource that matches the filter criteria specified in the request.</p>
        pub fn matching_resources(mut self, input: crate::model::MatchingResource) -> Self {
            let mut v = self.matching_resources.unwrap_or_default();
            v.push(input);
            self.matching_resources = Some(v);
            self
        }
        /// <p>An array of objects, one for each resource that matches the filter criteria specified in the request.</p>
        pub fn set_matching_resources(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MatchingResource>>,
        ) -> Self {
            self.matching_resources = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`SearchResourcesOutput`](crate::output::SearchResourcesOutput).
        pub fn build(self) -> crate::output::SearchResourcesOutput {
            crate::output::SearchResourcesOutput {
                matching_resources: self.matching_resources,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl SearchResourcesOutput {
    /// Creates a new builder-style object to manufacture [`SearchResourcesOutput`](crate::output::SearchResourcesOutput).
    pub fn builder() -> crate::output::search_resources_output::Builder {
        crate::output::search_resources_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutFindingsPublicationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutFindingsPublicationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutFindingsPublicationConfigurationOutput`](crate::output::PutFindingsPublicationConfigurationOutput).
pub mod put_findings_publication_configuration_output {

    /// A builder for [`PutFindingsPublicationConfigurationOutput`](crate::output::PutFindingsPublicationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutFindingsPublicationConfigurationOutput`](crate::output::PutFindingsPublicationConfigurationOutput).
        pub fn build(self) -> crate::output::PutFindingsPublicationConfigurationOutput {
            crate::output::PutFindingsPublicationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl PutFindingsPublicationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutFindingsPublicationConfigurationOutput`](crate::output::PutFindingsPublicationConfigurationOutput).
    pub fn builder() -> crate::output::put_findings_publication_configuration_output::Builder {
        crate::output::put_findings_publication_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutClassificationExportConfigurationOutput {
    /// <p>The location where the data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::model::ClassificationExportConfiguration>,
    _request_id: Option<String>,
}
impl PutClassificationExportConfigurationOutput {
    /// <p>The location where the data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
    pub fn configuration(
        &self,
    ) -> std::option::Option<&crate::model::ClassificationExportConfiguration> {
        self.configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for PutClassificationExportConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`PutClassificationExportConfigurationOutput`](crate::output::PutClassificationExportConfigurationOutput).
pub mod put_classification_export_configuration_output {

    /// A builder for [`PutClassificationExportConfigurationOutput`](crate::output::PutClassificationExportConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configuration:
            std::option::Option<crate::model::ClassificationExportConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The location where the data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
        pub fn configuration(
            mut self,
            input: crate::model::ClassificationExportConfiguration,
        ) -> Self {
            self.configuration = Some(input);
            self
        }
        /// <p>The location where the data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
        pub fn set_configuration(
            mut self,
            input: std::option::Option<crate::model::ClassificationExportConfiguration>,
        ) -> Self {
            self.configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutClassificationExportConfigurationOutput`](crate::output::PutClassificationExportConfigurationOutput).
        pub fn build(self) -> crate::output::PutClassificationExportConfigurationOutput {
            crate::output::PutClassificationExportConfigurationOutput {
                configuration: self.configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl PutClassificationExportConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`PutClassificationExportConfigurationOutput`](crate::output::PutClassificationExportConfigurationOutput).
    pub fn builder() -> crate::output::put_classification_export_configuration_output::Builder {
        crate::output::put_classification_export_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSensitivityInspectionTemplatesOutput {
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array that specifies the unique identifier and name of the sensitivity inspection template for the account.</p>
    #[doc(hidden)]
    pub sensitivity_inspection_templates:
        std::option::Option<std::vec::Vec<crate::model::SensitivityInspectionTemplatesEntry>>,
    _request_id: Option<String>,
}
impl ListSensitivityInspectionTemplatesOutput {
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array that specifies the unique identifier and name of the sensitivity inspection template for the account.</p>
    pub fn sensitivity_inspection_templates(
        &self,
    ) -> std::option::Option<&[crate::model::SensitivityInspectionTemplatesEntry]> {
        self.sensitivity_inspection_templates.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSensitivityInspectionTemplatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListSensitivityInspectionTemplatesOutput`](crate::output::ListSensitivityInspectionTemplatesOutput).
pub mod list_sensitivity_inspection_templates_output {

    /// A builder for [`ListSensitivityInspectionTemplatesOutput`](crate::output::ListSensitivityInspectionTemplatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) sensitivity_inspection_templates:
            std::option::Option<std::vec::Vec<crate::model::SensitivityInspectionTemplatesEntry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `sensitivity_inspection_templates`.
        ///
        /// To override the contents of this collection use [`set_sensitivity_inspection_templates`](Self::set_sensitivity_inspection_templates).
        ///
        /// <p>An array that specifies the unique identifier and name of the sensitivity inspection template for the account.</p>
        pub fn sensitivity_inspection_templates(
            mut self,
            input: crate::model::SensitivityInspectionTemplatesEntry,
        ) -> Self {
            let mut v = self.sensitivity_inspection_templates.unwrap_or_default();
            v.push(input);
            self.sensitivity_inspection_templates = Some(v);
            self
        }
        /// <p>An array that specifies the unique identifier and name of the sensitivity inspection template for the account.</p>
        pub fn set_sensitivity_inspection_templates(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::SensitivityInspectionTemplatesEntry>,
            >,
        ) -> Self {
            self.sensitivity_inspection_templates = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSensitivityInspectionTemplatesOutput`](crate::output::ListSensitivityInspectionTemplatesOutput).
        pub fn build(self) -> crate::output::ListSensitivityInspectionTemplatesOutput {
            crate::output::ListSensitivityInspectionTemplatesOutput {
                next_token: self.next_token,
                sensitivity_inspection_templates: self.sensitivity_inspection_templates,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListSensitivityInspectionTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListSensitivityInspectionTemplatesOutput`](crate::output::ListSensitivityInspectionTemplatesOutput).
    pub fn builder() -> crate::output::list_sensitivity_inspection_templates_output::Builder {
        crate::output::list_sensitivity_inspection_templates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListResourceProfileDetectionsOutput {
    /// <p>An array of objects, one for each type of sensitive data that Amazon Macie found in the bucket. Each object reports the number of occurrences of the specified type and provides information about the custom data identifier or managed data identifier that detected the data.</p>
    #[doc(hidden)]
    pub detections: std::option::Option<std::vec::Vec<crate::model::Detection>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListResourceProfileDetectionsOutput {
    /// <p>An array of objects, one for each type of sensitive data that Amazon Macie found in the bucket. Each object reports the number of occurrences of the specified type and provides information about the custom data identifier or managed data identifier that detected the data.</p>
    pub fn detections(&self) -> std::option::Option<&[crate::model::Detection]> {
        self.detections.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListResourceProfileDetectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListResourceProfileDetectionsOutput`](crate::output::ListResourceProfileDetectionsOutput).
pub mod list_resource_profile_detections_output {

    /// A builder for [`ListResourceProfileDetectionsOutput`](crate::output::ListResourceProfileDetectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) detections: std::option::Option<std::vec::Vec<crate::model::Detection>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `detections`.
        ///
        /// To override the contents of this collection use [`set_detections`](Self::set_detections).
        ///
        /// <p>An array of objects, one for each type of sensitive data that Amazon Macie found in the bucket. Each object reports the number of occurrences of the specified type and provides information about the custom data identifier or managed data identifier that detected the data.</p>
        pub fn detections(mut self, input: crate::model::Detection) -> Self {
            let mut v = self.detections.unwrap_or_default();
            v.push(input);
            self.detections = Some(v);
            self
        }
        /// <p>An array of objects, one for each type of sensitive data that Amazon Macie found in the bucket. Each object reports the number of occurrences of the specified type and provides information about the custom data identifier or managed data identifier that detected the data.</p>
        pub fn set_detections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Detection>>,
        ) -> Self {
            self.detections = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListResourceProfileDetectionsOutput`](crate::output::ListResourceProfileDetectionsOutput).
        pub fn build(self) -> crate::output::ListResourceProfileDetectionsOutput {
            crate::output::ListResourceProfileDetectionsOutput {
                detections: self.detections,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListResourceProfileDetectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListResourceProfileDetectionsOutput`](crate::output::ListResourceProfileDetectionsOutput).
    pub fn builder() -> crate::output::list_resource_profile_detections_output::Builder {
        crate::output::list_resource_profile_detections_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListResourceProfileArtifactsOutput {
    /// <p>An array of objects, one for each S3 object that Amazon Macie selected for analysis.</p>
    #[doc(hidden)]
    pub artifacts: std::option::Option<std::vec::Vec<crate::model::ResourceProfileArtifact>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListResourceProfileArtifactsOutput {
    /// <p>An array of objects, one for each S3 object that Amazon Macie selected for analysis.</p>
    pub fn artifacts(&self) -> std::option::Option<&[crate::model::ResourceProfileArtifact]> {
        self.artifacts.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListResourceProfileArtifactsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListResourceProfileArtifactsOutput`](crate::output::ListResourceProfileArtifactsOutput).
pub mod list_resource_profile_artifacts_output {

    /// A builder for [`ListResourceProfileArtifactsOutput`](crate::output::ListResourceProfileArtifactsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) artifacts:
            std::option::Option<std::vec::Vec<crate::model::ResourceProfileArtifact>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `artifacts`.
        ///
        /// To override the contents of this collection use [`set_artifacts`](Self::set_artifacts).
        ///
        /// <p>An array of objects, one for each S3 object that Amazon Macie selected for analysis.</p>
        pub fn artifacts(mut self, input: crate::model::ResourceProfileArtifact) -> Self {
            let mut v = self.artifacts.unwrap_or_default();
            v.push(input);
            self.artifacts = Some(v);
            self
        }
        /// <p>An array of objects, one for each S3 object that Amazon Macie selected for analysis.</p>
        pub fn set_artifacts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceProfileArtifact>>,
        ) -> Self {
            self.artifacts = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListResourceProfileArtifactsOutput`](crate::output::ListResourceProfileArtifactsOutput).
        pub fn build(self) -> crate::output::ListResourceProfileArtifactsOutput {
            crate::output::ListResourceProfileArtifactsOutput {
                artifacts: self.artifacts,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListResourceProfileArtifactsOutput {
    /// Creates a new builder-style object to manufacture [`ListResourceProfileArtifactsOutput`](crate::output::ListResourceProfileArtifactsOutput).
    pub fn builder() -> crate::output::list_resource_profile_artifacts_output::Builder {
        crate::output::list_resource_profile_artifacts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOrganizationAdminAccountsOutput {
    /// <p>An array of objects, one for each delegated Amazon Macie administrator account for the organization. Only one of these accounts can have a status of ENABLED.</p>
    #[doc(hidden)]
    pub admin_accounts: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOrganizationAdminAccountsOutput {
    /// <p>An array of objects, one for each delegated Amazon Macie administrator account for the organization. Only one of these accounts can have a status of ENABLED.</p>
    pub fn admin_accounts(&self) -> std::option::Option<&[crate::model::AdminAccount]> {
        self.admin_accounts.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOrganizationAdminAccountsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
pub mod list_organization_admin_accounts_output {

    /// A builder for [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_accounts: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `admin_accounts`.
        ///
        /// To override the contents of this collection use [`set_admin_accounts`](Self::set_admin_accounts).
        ///
        /// <p>An array of objects, one for each delegated Amazon Macie administrator account for the organization. Only one of these accounts can have a status of ENABLED.</p>
        pub fn admin_accounts(mut self, input: crate::model::AdminAccount) -> Self {
            let mut v = self.admin_accounts.unwrap_or_default();
            v.push(input);
            self.admin_accounts = Some(v);
            self
        }
        /// <p>An array of objects, one for each delegated Amazon Macie administrator account for the organization. Only one of these accounts can have a status of ENABLED.</p>
        pub fn set_admin_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AdminAccount>>,
        ) -> Self {
            self.admin_accounts = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
        pub fn build(self) -> crate::output::ListOrganizationAdminAccountsOutput {
            crate::output::ListOrganizationAdminAccountsOutput {
                admin_accounts: self.admin_accounts,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListOrganizationAdminAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListOrganizationAdminAccountsOutput`](crate::output::ListOrganizationAdminAccountsOutput).
    pub fn builder() -> crate::output::list_organization_admin_accounts_output::Builder {
        crate::output::list_organization_admin_accounts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListMembersOutput {
    /// <p>An array of objects, one for each account that's associated with the administrator account and matches the criteria specified in the request.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::Member>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListMembersOutput {
    /// <p>An array of objects, one for each account that's associated with the administrator account and matches the criteria specified in the request.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::Member]> {
        self.members.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListMembersOutput`](crate::output::ListMembersOutput).
pub mod list_members_output {

    /// A builder for [`ListMembersOutput`](crate::output::ListMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::Member>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>An array of objects, one for each account that's associated with the administrator account and matches the criteria specified in the request.</p>
        pub fn members(mut self, input: crate::model::Member) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>An array of objects, one for each account that's associated with the administrator account and matches the criteria specified in the request.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Member>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListMembersOutput`](crate::output::ListMembersOutput).
        pub fn build(self) -> crate::output::ListMembersOutput {
            crate::output::ListMembersOutput {
                members: self.members,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListMembersOutput`](crate::output::ListMembersOutput).
    pub fn builder() -> crate::output::list_members_output::Builder {
        crate::output::list_members_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListManagedDataIdentifiersOutput {
    /// <p>An array of objects, one for each managed data identifier.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::ManagedDataIdentifierSummary>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListManagedDataIdentifiersOutput {
    /// <p>An array of objects, one for each managed data identifier.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::ManagedDataIdentifierSummary]> {
        self.items.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListManagedDataIdentifiersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListManagedDataIdentifiersOutput`](crate::output::ListManagedDataIdentifiersOutput).
pub mod list_managed_data_identifiers_output {

    /// A builder for [`ListManagedDataIdentifiersOutput`](crate::output::ListManagedDataIdentifiersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items:
            std::option::Option<std::vec::Vec<crate::model::ManagedDataIdentifierSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>An array of objects, one for each managed data identifier.</p>
        pub fn items(mut self, input: crate::model::ManagedDataIdentifierSummary) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>An array of objects, one for each managed data identifier.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ManagedDataIdentifierSummary>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListManagedDataIdentifiersOutput`](crate::output::ListManagedDataIdentifiersOutput).
        pub fn build(self) -> crate::output::ListManagedDataIdentifiersOutput {
            crate::output::ListManagedDataIdentifiersOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListManagedDataIdentifiersOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedDataIdentifiersOutput`](crate::output::ListManagedDataIdentifiersOutput).
    pub fn builder() -> crate::output::list_managed_data_identifiers_output::Builder {
        crate::output::list_managed_data_identifiers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListInvitationsOutput {
    /// <p>An array of objects, one for each invitation that was received by the account.</p>
    #[doc(hidden)]
    pub invitations: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListInvitationsOutput {
    /// <p>An array of objects, one for each invitation that was received by the account.</p>
    pub fn invitations(&self) -> std::option::Option<&[crate::model::Invitation]> {
        self.invitations.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
pub mod list_invitations_output {

    /// A builder for [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invitations: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `invitations`.
        ///
        /// To override the contents of this collection use [`set_invitations`](Self::set_invitations).
        ///
        /// <p>An array of objects, one for each invitation that was received by the account.</p>
        pub fn invitations(mut self, input: crate::model::Invitation) -> Self {
            let mut v = self.invitations.unwrap_or_default();
            v.push(input);
            self.invitations = Some(v);
            self
        }
        /// <p>An array of objects, one for each invitation that was received by the account.</p>
        pub fn set_invitations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Invitation>>,
        ) -> Self {
            self.invitations = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
        pub fn build(self) -> crate::output::ListInvitationsOutput {
            crate::output::ListInvitationsOutput {
                invitations: self.invitations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`ListInvitationsOutput`](crate::output::ListInvitationsOutput).
    pub fn builder() -> crate::output::list_invitations_output::Builder {
        crate::output::list_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFindingsFiltersOutput {
    /// <p>An array of objects, one for each filter that's associated with the account.</p>
    #[doc(hidden)]
    pub findings_filter_list_items:
        std::option::Option<std::vec::Vec<crate::model::FindingsFilterListItem>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFindingsFiltersOutput {
    /// <p>An array of objects, one for each filter that's associated with the account.</p>
    pub fn findings_filter_list_items(
        &self,
    ) -> std::option::Option<&[crate::model::FindingsFilterListItem]> {
        self.findings_filter_list_items.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFindingsFiltersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFindingsFiltersOutput`](crate::output::ListFindingsFiltersOutput).
pub mod list_findings_filters_output {

    /// A builder for [`ListFindingsFiltersOutput`](crate::output::ListFindingsFiltersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings_filter_list_items:
            std::option::Option<std::vec::Vec<crate::model::FindingsFilterListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings_filter_list_items`.
        ///
        /// To override the contents of this collection use [`set_findings_filter_list_items`](Self::set_findings_filter_list_items).
        ///
        /// <p>An array of objects, one for each filter that's associated with the account.</p>
        pub fn findings_filter_list_items(
            mut self,
            input: crate::model::FindingsFilterListItem,
        ) -> Self {
            let mut v = self.findings_filter_list_items.unwrap_or_default();
            v.push(input);
            self.findings_filter_list_items = Some(v);
            self
        }
        /// <p>An array of objects, one for each filter that's associated with the account.</p>
        pub fn set_findings_filter_list_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::FindingsFilterListItem>>,
        ) -> Self {
            self.findings_filter_list_items = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFindingsFiltersOutput`](crate::output::ListFindingsFiltersOutput).
        pub fn build(self) -> crate::output::ListFindingsFiltersOutput {
            crate::output::ListFindingsFiltersOutput {
                findings_filter_list_items: self.findings_filter_list_items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFindingsFiltersOutput {
    /// Creates a new builder-style object to manufacture [`ListFindingsFiltersOutput`](crate::output::ListFindingsFiltersOutput).
    pub fn builder() -> crate::output::list_findings_filters_output::Builder {
        crate::output::list_findings_filters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListFindingsOutput {
    /// <p>An array of strings, where each string is the unique identifier for a finding that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub finding_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListFindingsOutput {
    /// <p>An array of strings, where each string is the unique identifier for a finding that matches the filter criteria specified in the request.</p>
    pub fn finding_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.finding_ids.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListFindingsOutput`](crate::output::ListFindingsOutput).
pub mod list_findings_output {

    /// A builder for [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) finding_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `finding_ids`.
        ///
        /// To override the contents of this collection use [`set_finding_ids`](Self::set_finding_ids).
        ///
        /// <p>An array of strings, where each string is the unique identifier for a finding that matches the filter criteria specified in the request.</p>
        pub fn finding_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.finding_ids.unwrap_or_default();
            v.push(input.into());
            self.finding_ids = Some(v);
            self
        }
        /// <p>An array of strings, where each string is the unique identifier for a finding that matches the filter criteria specified in the request.</p>
        pub fn set_finding_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.finding_ids = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListFindingsOutput`](crate::output::ListFindingsOutput).
        pub fn build(self) -> crate::output::ListFindingsOutput {
            crate::output::ListFindingsOutput {
                finding_ids: self.finding_ids,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListFindingsOutput {
    /// Creates a new builder-style object to manufacture [`ListFindingsOutput`](crate::output::ListFindingsOutput).
    pub fn builder() -> crate::output::list_findings_output::Builder {
        crate::output::list_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListCustomDataIdentifiersOutput {
    /// <p>An array of objects, one for each custom data identifier.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::CustomDataIdentifierSummary>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListCustomDataIdentifiersOutput {
    /// <p>An array of objects, one for each custom data identifier.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::CustomDataIdentifierSummary]> {
        self.items.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListCustomDataIdentifiersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListCustomDataIdentifiersOutput`](crate::output::ListCustomDataIdentifiersOutput).
pub mod list_custom_data_identifiers_output {

    /// A builder for [`ListCustomDataIdentifiersOutput`](crate::output::ListCustomDataIdentifiersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items:
            std::option::Option<std::vec::Vec<crate::model::CustomDataIdentifierSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>An array of objects, one for each custom data identifier.</p>
        pub fn items(mut self, input: crate::model::CustomDataIdentifierSummary) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>An array of objects, one for each custom data identifier.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomDataIdentifierSummary>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListCustomDataIdentifiersOutput`](crate::output::ListCustomDataIdentifiersOutput).
        pub fn build(self) -> crate::output::ListCustomDataIdentifiersOutput {
            crate::output::ListCustomDataIdentifiersOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListCustomDataIdentifiersOutput {
    /// Creates a new builder-style object to manufacture [`ListCustomDataIdentifiersOutput`](crate::output::ListCustomDataIdentifiersOutput).
    pub fn builder() -> crate::output::list_custom_data_identifiers_output::Builder {
        crate::output::list_custom_data_identifiers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClassificationScopesOutput {
    /// <p>An array that specifies the unique identifier and name of the classification scope for the account.</p>
    #[doc(hidden)]
    pub classification_scopes:
        std::option::Option<std::vec::Vec<crate::model::ClassificationScopeSummary>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListClassificationScopesOutput {
    /// <p>An array that specifies the unique identifier and name of the classification scope for the account.</p>
    pub fn classification_scopes(
        &self,
    ) -> std::option::Option<&[crate::model::ClassificationScopeSummary]> {
        self.classification_scopes.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListClassificationScopesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListClassificationScopesOutput`](crate::output::ListClassificationScopesOutput).
pub mod list_classification_scopes_output {

    /// A builder for [`ListClassificationScopesOutput`](crate::output::ListClassificationScopesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) classification_scopes:
            std::option::Option<std::vec::Vec<crate::model::ClassificationScopeSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `classification_scopes`.
        ///
        /// To override the contents of this collection use [`set_classification_scopes`](Self::set_classification_scopes).
        ///
        /// <p>An array that specifies the unique identifier and name of the classification scope for the account.</p>
        pub fn classification_scopes(
            mut self,
            input: crate::model::ClassificationScopeSummary,
        ) -> Self {
            let mut v = self.classification_scopes.unwrap_or_default();
            v.push(input);
            self.classification_scopes = Some(v);
            self
        }
        /// <p>An array that specifies the unique identifier and name of the classification scope for the account.</p>
        pub fn set_classification_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClassificationScopeSummary>>,
        ) -> Self {
            self.classification_scopes = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListClassificationScopesOutput`](crate::output::ListClassificationScopesOutput).
        pub fn build(self) -> crate::output::ListClassificationScopesOutput {
            crate::output::ListClassificationScopesOutput {
                classification_scopes: self.classification_scopes,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListClassificationScopesOutput {
    /// Creates a new builder-style object to manufacture [`ListClassificationScopesOutput`](crate::output::ListClassificationScopesOutput).
    pub fn builder() -> crate::output::list_classification_scopes_output::Builder {
        crate::output::list_classification_scopes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClassificationJobsOutput {
    /// <p>An array of objects, one for each job that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub items: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListClassificationJobsOutput {
    /// <p>An array of objects, one for each job that matches the filter criteria specified in the request.</p>
    pub fn items(&self) -> std::option::Option<&[crate::model::JobSummary]> {
        self.items.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListClassificationJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListClassificationJobsOutput`](crate::output::ListClassificationJobsOutput).
pub mod list_classification_jobs_output {

    /// A builder for [`ListClassificationJobsOutput`](crate::output::ListClassificationJobsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) items: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `items`.
        ///
        /// To override the contents of this collection use [`set_items`](Self::set_items).
        ///
        /// <p>An array of objects, one for each job that matches the filter criteria specified in the request.</p>
        pub fn items(mut self, input: crate::model::JobSummary) -> Self {
            let mut v = self.items.unwrap_or_default();
            v.push(input);
            self.items = Some(v);
            self
        }
        /// <p>An array of objects, one for each job that matches the filter criteria specified in the request.</p>
        pub fn set_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobSummary>>,
        ) -> Self {
            self.items = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListClassificationJobsOutput`](crate::output::ListClassificationJobsOutput).
        pub fn build(self) -> crate::output::ListClassificationJobsOutput {
            crate::output::ListClassificationJobsOutput {
                items: self.items,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListClassificationJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListClassificationJobsOutput`](crate::output::ListClassificationJobsOutput).
    pub fn builder() -> crate::output::list_classification_jobs_output::Builder {
        crate::output::list_classification_jobs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAllowListsOutput {
    /// <p>An array of objects, one for each allow list.</p>
    #[doc(hidden)]
    pub allow_lists: std::option::Option<std::vec::Vec<crate::model::AllowListSummary>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAllowListsOutput {
    /// <p>An array of objects, one for each allow list.</p>
    pub fn allow_lists(&self) -> std::option::Option<&[crate::model::AllowListSummary]> {
        self.allow_lists.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAllowListsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListAllowListsOutput`](crate::output::ListAllowListsOutput).
pub mod list_allow_lists_output {

    /// A builder for [`ListAllowListsOutput`](crate::output::ListAllowListsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allow_lists: std::option::Option<std::vec::Vec<crate::model::AllowListSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `allow_lists`.
        ///
        /// To override the contents of this collection use [`set_allow_lists`](Self::set_allow_lists).
        ///
        /// <p>An array of objects, one for each allow list.</p>
        pub fn allow_lists(mut self, input: crate::model::AllowListSummary) -> Self {
            let mut v = self.allow_lists.unwrap_or_default();
            v.push(input);
            self.allow_lists = Some(v);
            self
        }
        /// <p>An array of objects, one for each allow list.</p>
        pub fn set_allow_lists(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AllowListSummary>>,
        ) -> Self {
            self.allow_lists = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAllowListsOutput`](crate::output::ListAllowListsOutput).
        pub fn build(self) -> crate::output::ListAllowListsOutput {
            crate::output::ListAllowListsOutput {
                allow_lists: self.allow_lists,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListAllowListsOutput {
    /// Creates a new builder-style object to manufacture [`ListAllowListsOutput`](crate::output::ListAllowListsOutput).
    pub fn builder() -> crate::output::list_allow_lists_output::Builder {
        crate::output::list_allow_lists_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUsageTotalsOutput {
    /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
    #[doc(hidden)]
    pub time_range: std::option::Option<crate::model::TimeRange>,
    /// <p>An array of objects that contains the results of the query. Each object contains the data for a specific usage metric.</p>
    #[doc(hidden)]
    pub usage_totals: std::option::Option<std::vec::Vec<crate::model::UsageTotal>>,
    _request_id: Option<String>,
}
impl GetUsageTotalsOutput {
    /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
    pub fn time_range(&self) -> std::option::Option<&crate::model::TimeRange> {
        self.time_range.as_ref()
    }
    /// <p>An array of objects that contains the results of the query. Each object contains the data for a specific usage metric.</p>
    pub fn usage_totals(&self) -> std::option::Option<&[crate::model::UsageTotal]> {
        self.usage_totals.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetUsageTotalsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetUsageTotalsOutput`](crate::output::GetUsageTotalsOutput).
pub mod get_usage_totals_output {

    /// A builder for [`GetUsageTotalsOutput`](crate::output::GetUsageTotalsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) time_range: std::option::Option<crate::model::TimeRange>,
        pub(crate) usage_totals: std::option::Option<std::vec::Vec<crate::model::UsageTotal>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
        pub fn time_range(mut self, input: crate::model::TimeRange) -> Self {
            self.time_range = Some(input);
            self
        }
        /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
        pub fn set_time_range(
            mut self,
            input: std::option::Option<crate::model::TimeRange>,
        ) -> Self {
            self.time_range = input;
            self
        }
        /// Appends an item to `usage_totals`.
        ///
        /// To override the contents of this collection use [`set_usage_totals`](Self::set_usage_totals).
        ///
        /// <p>An array of objects that contains the results of the query. Each object contains the data for a specific usage metric.</p>
        pub fn usage_totals(mut self, input: crate::model::UsageTotal) -> Self {
            let mut v = self.usage_totals.unwrap_or_default();
            v.push(input);
            self.usage_totals = Some(v);
            self
        }
        /// <p>An array of objects that contains the results of the query. Each object contains the data for a specific usage metric.</p>
        pub fn set_usage_totals(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UsageTotal>>,
        ) -> Self {
            self.usage_totals = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetUsageTotalsOutput`](crate::output::GetUsageTotalsOutput).
        pub fn build(self) -> crate::output::GetUsageTotalsOutput {
            crate::output::GetUsageTotalsOutput {
                time_range: self.time_range,
                usage_totals: self.usage_totals,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetUsageTotalsOutput {
    /// Creates a new builder-style object to manufacture [`GetUsageTotalsOutput`](crate::output::GetUsageTotalsOutput).
    pub fn builder() -> crate::output::get_usage_totals_output::Builder {
        crate::output::get_usage_totals_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUsageStatisticsOutput {
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array of objects that contains the results of the query. Each object contains the data for an account that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub records: std::option::Option<std::vec::Vec<crate::model::UsageRecord>>,
    /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
    #[doc(hidden)]
    pub time_range: std::option::Option<crate::model::TimeRange>,
    _request_id: Option<String>,
}
impl GetUsageStatisticsOutput {
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of objects that contains the results of the query. Each object contains the data for an account that matches the filter criteria specified in the request.</p>
    pub fn records(&self) -> std::option::Option<&[crate::model::UsageRecord]> {
        self.records.as_deref()
    }
    /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
    pub fn time_range(&self) -> std::option::Option<&crate::model::TimeRange> {
        self.time_range.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetUsageStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
pub mod get_usage_statistics_output {

    /// A builder for [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) records: std::option::Option<std::vec::Vec<crate::model::UsageRecord>>,
        pub(crate) time_range: std::option::Option<crate::model::TimeRange>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `records`.
        ///
        /// To override the contents of this collection use [`set_records`](Self::set_records).
        ///
        /// <p>An array of objects that contains the results of the query. Each object contains the data for an account that matches the filter criteria specified in the request.</p>
        pub fn records(mut self, input: crate::model::UsageRecord) -> Self {
            let mut v = self.records.unwrap_or_default();
            v.push(input);
            self.records = Some(v);
            self
        }
        /// <p>An array of objects that contains the results of the query. Each object contains the data for an account that matches the filter criteria specified in the request.</p>
        pub fn set_records(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UsageRecord>>,
        ) -> Self {
            self.records = input;
            self
        }
        /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
        pub fn time_range(mut self, input: crate::model::TimeRange) -> Self {
            self.time_range = Some(input);
            self
        }
        /// <p>The inclusive time period that the usage data applies to. Possible values are: MONTH_TO_DATE, for the current calendar month to date; and, PAST_30_DAYS, for the preceding 30 days.</p>
        pub fn set_time_range(
            mut self,
            input: std::option::Option<crate::model::TimeRange>,
        ) -> Self {
            self.time_range = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
        pub fn build(self) -> crate::output::GetUsageStatisticsOutput {
            crate::output::GetUsageStatisticsOutput {
                next_token: self.next_token,
                records: self.records,
                time_range: self.time_range,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetUsageStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetUsageStatisticsOutput`](crate::output::GetUsageStatisticsOutput).
    pub fn builder() -> crate::output::get_usage_statistics_output::Builder {
        crate::output::get_usage_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSensitivityInspectionTemplateOutput {
    /// <p>The custom description of the template.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The managed data identifiers that are explicitly excluded (not used) when analyzing data.</p>
    #[doc(hidden)]
    pub excludes: std::option::Option<crate::model::SensitivityInspectionTemplateExcludes>,
    /// <p>The allow lists, custom data identifiers, and managed data identifiers that are included (used) when analyzing data.</p>
    #[doc(hidden)]
    pub includes: std::option::Option<crate::model::SensitivityInspectionTemplateIncludes>,
    /// <p>The name of the template.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the template.</p>
    #[doc(hidden)]
    pub sensitivity_inspection_template_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetSensitivityInspectionTemplateOutput {
    /// <p>The custom description of the template.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The managed data identifiers that are explicitly excluded (not used) when analyzing data.</p>
    pub fn excludes(
        &self,
    ) -> std::option::Option<&crate::model::SensitivityInspectionTemplateExcludes> {
        self.excludes.as_ref()
    }
    /// <p>The allow lists, custom data identifiers, and managed data identifiers that are included (used) when analyzing data.</p>
    pub fn includes(
        &self,
    ) -> std::option::Option<&crate::model::SensitivityInspectionTemplateIncludes> {
        self.includes.as_ref()
    }
    /// <p>The name of the template.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier for the template.</p>
    pub fn sensitivity_inspection_template_id(&self) -> std::option::Option<&str> {
        self.sensitivity_inspection_template_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSensitivityInspectionTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSensitivityInspectionTemplateOutput`](crate::output::GetSensitivityInspectionTemplateOutput).
pub mod get_sensitivity_inspection_template_output {

    /// A builder for [`GetSensitivityInspectionTemplateOutput`](crate::output::GetSensitivityInspectionTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) excludes:
            std::option::Option<crate::model::SensitivityInspectionTemplateExcludes>,
        pub(crate) includes:
            std::option::Option<crate::model::SensitivityInspectionTemplateIncludes>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) sensitivity_inspection_template_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The custom description of the template.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The custom description of the template.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The managed data identifiers that are explicitly excluded (not used) when analyzing data.</p>
        pub fn excludes(
            mut self,
            input: crate::model::SensitivityInspectionTemplateExcludes,
        ) -> Self {
            self.excludes = Some(input);
            self
        }
        /// <p>The managed data identifiers that are explicitly excluded (not used) when analyzing data.</p>
        pub fn set_excludes(
            mut self,
            input: std::option::Option<crate::model::SensitivityInspectionTemplateExcludes>,
        ) -> Self {
            self.excludes = input;
            self
        }
        /// <p>The allow lists, custom data identifiers, and managed data identifiers that are included (used) when analyzing data.</p>
        pub fn includes(
            mut self,
            input: crate::model::SensitivityInspectionTemplateIncludes,
        ) -> Self {
            self.includes = Some(input);
            self
        }
        /// <p>The allow lists, custom data identifiers, and managed data identifiers that are included (used) when analyzing data.</p>
        pub fn set_includes(
            mut self,
            input: std::option::Option<crate::model::SensitivityInspectionTemplateIncludes>,
        ) -> Self {
            self.includes = input;
            self
        }
        /// <p>The name of the template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the template.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The unique identifier for the template.</p>
        pub fn sensitivity_inspection_template_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.sensitivity_inspection_template_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the template.</p>
        pub fn set_sensitivity_inspection_template_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sensitivity_inspection_template_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSensitivityInspectionTemplateOutput`](crate::output::GetSensitivityInspectionTemplateOutput).
        pub fn build(self) -> crate::output::GetSensitivityInspectionTemplateOutput {
            crate::output::GetSensitivityInspectionTemplateOutput {
                description: self.description,
                excludes: self.excludes,
                includes: self.includes,
                name: self.name,
                sensitivity_inspection_template_id: self.sensitivity_inspection_template_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSensitivityInspectionTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetSensitivityInspectionTemplateOutput`](crate::output::GetSensitivityInspectionTemplateOutput).
    pub fn builder() -> crate::output::get_sensitivity_inspection_template_output::Builder {
        crate::output::get_sensitivity_inspection_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrencesAvailabilityOutput {
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    #[doc(hidden)]
    pub code: std::option::Option<crate::model::AvailabilityCode>,
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    #[doc(hidden)]
    pub reasons: std::option::Option<std::vec::Vec<crate::model::UnavailabilityReasonCode>>,
    _request_id: Option<String>,
}
impl GetSensitiveDataOccurrencesAvailabilityOutput {
    /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
    pub fn code(&self) -> std::option::Option<&crate::model::AvailabilityCode> {
        self.code.as_ref()
    }
    /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
    /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
    /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
    /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
    /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
    /// </ul>
    /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
    pub fn reasons(&self) -> std::option::Option<&[crate::model::UnavailabilityReasonCode]> {
        self.reasons.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSensitiveDataOccurrencesAvailabilityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::output::GetSensitiveDataOccurrencesAvailabilityOutput).
pub mod get_sensitive_data_occurrences_availability_output {

    /// A builder for [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::output::GetSensitiveDataOccurrencesAvailabilityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<crate::model::AvailabilityCode>,
        pub(crate) reasons:
            std::option::Option<std::vec::Vec<crate::model::UnavailabilityReasonCode>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
        pub fn code(mut self, input: crate::model::AvailabilityCode) -> Self {
            self.code = Some(input);
            self
        }
        /// <p>Specifies whether occurrences of sensitive data can be retrieved for the finding. Possible values are: AVAILABLE, the sensitive data can be retrieved; and, UNAVAILABLE, the sensitive data can't be retrieved. If this value is UNAVAILABLE, the reasons array indicates why the data can't be retrieved.</p>
        pub fn set_code(
            mut self,
            input: std::option::Option<crate::model::AvailabilityCode>,
        ) -> Self {
            self.code = input;
            self
        }
        /// Appends an item to `reasons`.
        ///
        /// To override the contents of this collection use [`set_reasons`](Self::set_reasons).
        ///
        /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
        /// <ul>
        /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
        /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
        /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
        /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
        /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
        /// </ul>
        /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
        pub fn reasons(mut self, input: crate::model::UnavailabilityReasonCode) -> Self {
            let mut v = self.reasons.unwrap_or_default();
            v.push(input);
            self.reasons = Some(v);
            self
        }
        /// <p>Specifies why occurrences of sensitive data can't be retrieved for the finding. Possible values are:</p>
        /// <ul>
        /// <li><p>INVALID_CLASSIFICATION_RESULT - Amazon Macie can't verify the location of the sensitive data to retrieve. There isn't a corresponding sensitive data discovery result for the finding. Or the sensitive data discovery result specified by the ClassificationDetails.detailedResultsLocation field of the finding isn't available, is malformed or corrupted, or uses an unsupported storage format.</p></li>
        /// <li><p>OBJECT_EXCEEDS_SIZE_QUOTA - The storage size of the affected S3 object exceeds the size quota for retrieving occurrences of sensitive data.</p></li>
        /// <li><p>OBJECT_UNAVAILABLE - The affected S3 object isn't available. The object might have been renamed, moved, or deleted. Or the object was changed after Macie created the finding.</p></li>
        /// <li><p>UNSUPPORTED_FINDING_TYPE - The specified finding isn't a sensitive data finding.</p></li>
        /// <li><p>UNSUPPORTED_OBJECT_TYPE - The affected S3 object uses a file or storage format that Macie doesn't support for retrieving occurrences of sensitive data.</p></li>
        /// </ul>
        /// <p>This value is null if sensitive data can be retrieved for the finding.</p>
        pub fn set_reasons(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnavailabilityReasonCode>>,
        ) -> Self {
            self.reasons = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::output::GetSensitiveDataOccurrencesAvailabilityOutput).
        pub fn build(self) -> crate::output::GetSensitiveDataOccurrencesAvailabilityOutput {
            crate::output::GetSensitiveDataOccurrencesAvailabilityOutput {
                code: self.code,
                reasons: self.reasons,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSensitiveDataOccurrencesAvailabilityOutput {
    /// Creates a new builder-style object to manufacture [`GetSensitiveDataOccurrencesAvailabilityOutput`](crate::output::GetSensitiveDataOccurrencesAvailabilityOutput).
    pub fn builder() -> crate::output::get_sensitive_data_occurrences_availability_output::Builder {
        crate::output::get_sensitive_data_occurrences_availability_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSensitiveDataOccurrencesOutput {
    /// <p>If an error occurred when Amazon Macie attempted to retrieve occurrences of sensitive data reported by the finding, a description of the error that occurred. This value is null if the status (status) of the request is PROCESSING or SUCCESS.</p>
    #[doc(hidden)]
    pub error: std::option::Option<std::string::String>,
    /// <p>A map that specifies 1-100 types of sensitive data reported by the finding and, for each type, 1-10 occurrences of sensitive data.</p>
    #[doc(hidden)]
    pub sensitive_data_occurrences: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::model::DetectedDataDetails>,
        >,
    >,
    /// <p>The status of the request to retrieve occurrences of sensitive data reported by the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>ERROR - An error occurred when Amazon Macie attempted to locate, retrieve, or encrypt the sensitive data. The error value indicates the nature of the error that occurred.</p></li>
    /// <li><p>PROCESSING - Macie is processing the request.</p></li>
    /// <li><p>SUCCESS - Macie successfully located, retrieved, and encrypted the sensitive data.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::RevealRequestStatus>,
    _request_id: Option<String>,
}
impl GetSensitiveDataOccurrencesOutput {
    /// <p>If an error occurred when Amazon Macie attempted to retrieve occurrences of sensitive data reported by the finding, a description of the error that occurred. This value is null if the status (status) of the request is PROCESSING or SUCCESS.</p>
    pub fn error(&self) -> std::option::Option<&str> {
        self.error.as_deref()
    }
    /// <p>A map that specifies 1-100 types of sensitive data reported by the finding and, for each type, 1-10 occurrences of sensitive data.</p>
    pub fn sensitive_data_occurrences(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::model::DetectedDataDetails>,
        >,
    > {
        self.sensitive_data_occurrences.as_ref()
    }
    /// <p>The status of the request to retrieve occurrences of sensitive data reported by the finding. Possible values are:</p>
    /// <ul>
    /// <li><p>ERROR - An error occurred when Amazon Macie attempted to locate, retrieve, or encrypt the sensitive data. The error value indicates the nature of the error that occurred.</p></li>
    /// <li><p>PROCESSING - Macie is processing the request.</p></li>
    /// <li><p>SUCCESS - Macie successfully located, retrieved, and encrypted the sensitive data.</p></li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::model::RevealRequestStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSensitiveDataOccurrencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetSensitiveDataOccurrencesOutput`](crate::output::GetSensitiveDataOccurrencesOutput).
pub mod get_sensitive_data_occurrences_output {

    /// A builder for [`GetSensitiveDataOccurrencesOutput`](crate::output::GetSensitiveDataOccurrencesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) error: std::option::Option<std::string::String>,
        pub(crate) sensitive_data_occurrences: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::model::DetectedDataDetails>,
            >,
        >,
        pub(crate) status: std::option::Option<crate::model::RevealRequestStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If an error occurred when Amazon Macie attempted to retrieve occurrences of sensitive data reported by the finding, a description of the error that occurred. This value is null if the status (status) of the request is PROCESSING or SUCCESS.</p>
        pub fn error(mut self, input: impl Into<std::string::String>) -> Self {
            self.error = Some(input.into());
            self
        }
        /// <p>If an error occurred when Amazon Macie attempted to retrieve occurrences of sensitive data reported by the finding, a description of the error that occurred. This value is null if the status (status) of the request is PROCESSING or SUCCESS.</p>
        pub fn set_error(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.error = input;
            self
        }
        /// Adds a key-value pair to `sensitive_data_occurrences`.
        ///
        /// To override the contents of this collection use [`set_sensitive_data_occurrences`](Self::set_sensitive_data_occurrences).
        ///
        /// <p>A map that specifies 1-100 types of sensitive data reported by the finding and, for each type, 1-10 occurrences of sensitive data.</p>
        pub fn sensitive_data_occurrences(
            mut self,
            k: impl Into<std::string::String>,
            v: std::vec::Vec<crate::model::DetectedDataDetails>,
        ) -> Self {
            let mut hash_map = self.sensitive_data_occurrences.unwrap_or_default();
            hash_map.insert(k.into(), v);
            self.sensitive_data_occurrences = Some(hash_map);
            self
        }
        /// <p>A map that specifies 1-100 types of sensitive data reported by the finding and, for each type, 1-10 occurrences of sensitive data.</p>
        pub fn set_sensitive_data_occurrences(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    std::string::String,
                    std::vec::Vec<crate::model::DetectedDataDetails>,
                >,
            >,
        ) -> Self {
            self.sensitive_data_occurrences = input;
            self
        }
        /// <p>The status of the request to retrieve occurrences of sensitive data reported by the finding. Possible values are:</p>
        /// <ul>
        /// <li><p>ERROR - An error occurred when Amazon Macie attempted to locate, retrieve, or encrypt the sensitive data. The error value indicates the nature of the error that occurred.</p></li>
        /// <li><p>PROCESSING - Macie is processing the request.</p></li>
        /// <li><p>SUCCESS - Macie successfully located, retrieved, and encrypted the sensitive data.</p></li>
        /// </ul>
        pub fn status(mut self, input: crate::model::RevealRequestStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The status of the request to retrieve occurrences of sensitive data reported by the finding. Possible values are:</p>
        /// <ul>
        /// <li><p>ERROR - An error occurred when Amazon Macie attempted to locate, retrieve, or encrypt the sensitive data. The error value indicates the nature of the error that occurred.</p></li>
        /// <li><p>PROCESSING - Macie is processing the request.</p></li>
        /// <li><p>SUCCESS - Macie successfully located, retrieved, and encrypted the sensitive data.</p></li>
        /// </ul>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::RevealRequestStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSensitiveDataOccurrencesOutput`](crate::output::GetSensitiveDataOccurrencesOutput).
        pub fn build(self) -> crate::output::GetSensitiveDataOccurrencesOutput {
            crate::output::GetSensitiveDataOccurrencesOutput {
                error: self.error,
                sensitive_data_occurrences: self.sensitive_data_occurrences,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetSensitiveDataOccurrencesOutput {
    /// Creates a new builder-style object to manufacture [`GetSensitiveDataOccurrencesOutput`](crate::output::GetSensitiveDataOccurrencesOutput).
    pub fn builder() -> crate::output::get_sensitive_data_occurrences_output::Builder {
        crate::output::get_sensitive_data_occurrences_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRevealConfigurationOutput {
    /// <p>The current configuration settings and the status of the configuration for the account.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::model::RevealConfiguration>,
    _request_id: Option<String>,
}
impl GetRevealConfigurationOutput {
    /// <p>The current configuration settings and the status of the configuration for the account.</p>
    pub fn configuration(&self) -> std::option::Option<&crate::model::RevealConfiguration> {
        self.configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRevealConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetRevealConfigurationOutput`](crate::output::GetRevealConfigurationOutput).
pub mod get_reveal_configuration_output {

    /// A builder for [`GetRevealConfigurationOutput`](crate::output::GetRevealConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configuration: std::option::Option<crate::model::RevealConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The current configuration settings and the status of the configuration for the account.</p>
        pub fn configuration(mut self, input: crate::model::RevealConfiguration) -> Self {
            self.configuration = Some(input);
            self
        }
        /// <p>The current configuration settings and the status of the configuration for the account.</p>
        pub fn set_configuration(
            mut self,
            input: std::option::Option<crate::model::RevealConfiguration>,
        ) -> Self {
            self.configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetRevealConfigurationOutput`](crate::output::GetRevealConfigurationOutput).
        pub fn build(self) -> crate::output::GetRevealConfigurationOutput {
            crate::output::GetRevealConfigurationOutput {
                configuration: self.configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetRevealConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetRevealConfigurationOutput`](crate::output::GetRevealConfigurationOutput).
    pub fn builder() -> crate::output::get_reveal_configuration_output::Builder {
        crate::output::get_reveal_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetResourceProfileOutput {
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently recalculated sensitive data discovery statistics and details for the bucket. If the bucket's sensitivity score is calculated automatically, this includes the score.</p>
    #[doc(hidden)]
    pub profile_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). By default, this score is calculated automatically based on the amount of data that Amazon Macie has analyzed in the bucket and the amount of sensitive data that Macie has found in the bucket.</p>
    #[doc(hidden)]
    pub sensitivity_score: i32,
    /// <p>Specifies whether the bucket's current sensitivity score was set manually. If this value is true, the score was manually changed to 100. If this value is false, the score was calculated automatically by Amazon Macie.</p>
    #[doc(hidden)]
    pub sensitivity_score_overridden: bool,
    /// <p>The sensitive data discovery statistics for the bucket. The statistics capture the results of automated sensitive data discovery activities that Amazon Macie has performed for the bucket.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::model::ResourceStatistics>,
    _request_id: Option<String>,
}
impl GetResourceProfileOutput {
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently recalculated sensitive data discovery statistics and details for the bucket. If the bucket's sensitivity score is calculated automatically, this includes the score.</p>
    pub fn profile_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.profile_updated_at.as_ref()
    }
    /// <p>The current sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). By default, this score is calculated automatically based on the amount of data that Amazon Macie has analyzed in the bucket and the amount of sensitive data that Macie has found in the bucket.</p>
    pub fn sensitivity_score(&self) -> i32 {
        self.sensitivity_score
    }
    /// <p>Specifies whether the bucket's current sensitivity score was set manually. If this value is true, the score was manually changed to 100. If this value is false, the score was calculated automatically by Amazon Macie.</p>
    pub fn sensitivity_score_overridden(&self) -> bool {
        self.sensitivity_score_overridden
    }
    /// <p>The sensitive data discovery statistics for the bucket. The statistics capture the results of automated sensitive data discovery activities that Amazon Macie has performed for the bucket.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::model::ResourceStatistics> {
        self.statistics.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetResourceProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetResourceProfileOutput`](crate::output::GetResourceProfileOutput).
pub mod get_resource_profile_output {

    /// A builder for [`GetResourceProfileOutput`](crate::output::GetResourceProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) profile_updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sensitivity_score: std::option::Option<i32>,
        pub(crate) sensitivity_score_overridden: std::option::Option<bool>,
        pub(crate) statistics: std::option::Option<crate::model::ResourceStatistics>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently recalculated sensitive data discovery statistics and details for the bucket. If the bucket's sensitivity score is calculated automatically, this includes the score.</p>
        pub fn profile_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.profile_updated_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently recalculated sensitive data discovery statistics and details for the bucket. If the bucket's sensitivity score is calculated automatically, this includes the score.</p>
        pub fn set_profile_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.profile_updated_at = input;
            self
        }
        /// <p>The current sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). By default, this score is calculated automatically based on the amount of data that Amazon Macie has analyzed in the bucket and the amount of sensitive data that Macie has found in the bucket.</p>
        pub fn sensitivity_score(mut self, input: i32) -> Self {
            self.sensitivity_score = Some(input);
            self
        }
        /// <p>The current sensitivity score for the bucket, ranging from&nbsp;-1&nbsp;(no analysis due to an error) to&nbsp;100 (sensitive). By default, this score is calculated automatically based on the amount of data that Amazon Macie has analyzed in the bucket and the amount of sensitive data that Macie has found in the bucket.</p>
        pub fn set_sensitivity_score(mut self, input: std::option::Option<i32>) -> Self {
            self.sensitivity_score = input;
            self
        }
        /// <p>Specifies whether the bucket's current sensitivity score was set manually. If this value is true, the score was manually changed to 100. If this value is false, the score was calculated automatically by Amazon Macie.</p>
        pub fn sensitivity_score_overridden(mut self, input: bool) -> Self {
            self.sensitivity_score_overridden = Some(input);
            self
        }
        /// <p>Specifies whether the bucket's current sensitivity score was set manually. If this value is true, the score was manually changed to 100. If this value is false, the score was calculated automatically by Amazon Macie.</p>
        pub fn set_sensitivity_score_overridden(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.sensitivity_score_overridden = input;
            self
        }
        /// <p>The sensitive data discovery statistics for the bucket. The statistics capture the results of automated sensitive data discovery activities that Amazon Macie has performed for the bucket.</p>
        pub fn statistics(mut self, input: crate::model::ResourceStatistics) -> Self {
            self.statistics = Some(input);
            self
        }
        /// <p>The sensitive data discovery statistics for the bucket. The statistics capture the results of automated sensitive data discovery activities that Amazon Macie has performed for the bucket.</p>
        pub fn set_statistics(
            mut self,
            input: std::option::Option<crate::model::ResourceStatistics>,
        ) -> Self {
            self.statistics = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetResourceProfileOutput`](crate::output::GetResourceProfileOutput).
        pub fn build(self) -> crate::output::GetResourceProfileOutput {
            crate::output::GetResourceProfileOutput {
                profile_updated_at: self.profile_updated_at,
                sensitivity_score: self.sensitivity_score.unwrap_or_default(),
                sensitivity_score_overridden: self.sensitivity_score_overridden.unwrap_or_default(),
                statistics: self.statistics,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetResourceProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceProfileOutput`](crate::output::GetResourceProfileOutput).
    pub fn builder() -> crate::output::get_resource_profile_output::Builder {
        crate::output::get_resource_profile_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMemberOutput {
    /// <p>The Amazon Web Services account ID for the account.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services account ID for the administrator account.</p>
    #[doc(hidden)]
    pub administrator_account_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the account.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The email address for the account.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if an invitation hasn't been sent to the account.</p>
    #[doc(hidden)]
    pub invited_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.</p>
    #[doc(hidden)]
    pub master_account_id: std::option::Option<std::string::String>,
    /// <p>The current status of the relationship between the account and the administrator account.</p>
    #[doc(hidden)]
    pub relationship_status: std::option::Option<crate::model::RelationshipStatus>,
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMemberOutput {
    /// <p>The Amazon Web Services account ID for the account.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Amazon Web Services account ID for the administrator account.</p>
    pub fn administrator_account_id(&self) -> std::option::Option<&str> {
        self.administrator_account_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the account.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The email address for the account.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if an invitation hasn't been sent to the account.</p>
    pub fn invited_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.invited_at.as_ref()
    }
    /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.</p>
    pub fn master_account_id(&self) -> std::option::Option<&str> {
        self.master_account_id.as_deref()
    }
    /// <p>The current status of the relationship between the account and the administrator account.</p>
    pub fn relationship_status(&self) -> std::option::Option<&crate::model::RelationshipStatus> {
        self.relationship_status.as_ref()
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMemberOutput`](crate::output::GetMemberOutput).
pub mod get_member_output {

    /// A builder for [`GetMemberOutput`](crate::output::GetMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_id: std::option::Option<std::string::String>,
        pub(crate) administrator_account_id: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) email: std::option::Option<std::string::String>,
        pub(crate) invited_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) master_account_id: std::option::Option<std::string::String>,
        pub(crate) relationship_status: std::option::Option<crate::model::RelationshipStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Web Services account ID for the account.</p>
        pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.account_id = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services account ID for the account.</p>
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.account_id = input;
            self
        }
        /// <p>The Amazon Web Services account ID for the administrator account.</p>
        pub fn administrator_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.administrator_account_id = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services account ID for the administrator account.</p>
        pub fn set_administrator_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.administrator_account_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the account.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the account.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The email address for the account.</p>
        pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
            self.email = Some(input.into());
            self
        }
        /// <p>The email address for the account.</p>
        pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.email = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if an invitation hasn't been sent to the account.</p>
        pub fn invited_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.invited_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when an Amazon Macie membership invitation was last sent to the account. This value is null if an invitation hasn't been sent to the account.</p>
        pub fn set_invited_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.invited_at = input;
            self
        }
        /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.</p>
        pub fn master_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_account_id = Some(input.into());
            self
        }
        /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. This property has been replaced by the administratorAccountId property and is retained only for backward compatibility.</p>
        pub fn set_master_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_account_id = input;
            self
        }
        /// <p>The current status of the relationship between the account and the administrator account.</p>
        pub fn relationship_status(mut self, input: crate::model::RelationshipStatus) -> Self {
            self.relationship_status = Some(input);
            self
        }
        /// <p>The current status of the relationship between the account and the administrator account.</p>
        pub fn set_relationship_status(
            mut self,
            input: std::option::Option<crate::model::RelationshipStatus>,
        ) -> Self {
            self.relationship_status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the account in Amazon Macie.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.</p>
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the relationship between the account and the administrator account.</p>
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMemberOutput`](crate::output::GetMemberOutput).
        pub fn build(self) -> crate::output::GetMemberOutput {
            crate::output::GetMemberOutput {
                account_id: self.account_id,
                administrator_account_id: self.administrator_account_id,
                arn: self.arn,
                email: self.email,
                invited_at: self.invited_at,
                master_account_id: self.master_account_id,
                relationship_status: self.relationship_status,
                tags: self.tags,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMemberOutput {
    /// Creates a new builder-style object to manufacture [`GetMemberOutput`](crate::output::GetMemberOutput).
    pub fn builder() -> crate::output::get_member_output::Builder {
        crate::output::get_member_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMasterAccountOutput {
    /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. If the accounts are associated by a Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
    #[doc(hidden)]
    pub master: std::option::Option<crate::model::Invitation>,
    _request_id: Option<String>,
}
impl GetMasterAccountOutput {
    /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. If the accounts are associated by a Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
    pub fn master(&self) -> std::option::Option<&crate::model::Invitation> {
        self.master.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMasterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
pub mod get_master_account_output {

    /// A builder for [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) master: std::option::Option<crate::model::Invitation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. If the accounts are associated by a Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
        pub fn master(mut self, input: crate::model::Invitation) -> Self {
            self.master = Some(input);
            self
        }
        /// <p>(Deprecated) The Amazon Web Services account ID for the administrator account. If the accounts are associated by a Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
        pub fn set_master(mut self, input: std::option::Option<crate::model::Invitation>) -> Self {
            self.master = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
        pub fn build(self) -> crate::output::GetMasterAccountOutput {
            crate::output::GetMasterAccountOutput {
                master: self.master,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMasterAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetMasterAccountOutput`](crate::output::GetMasterAccountOutput).
    pub fn builder() -> crate::output::get_master_account_output::Builder {
        crate::output::get_master_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMacieSessionOutput {
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie account was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The frequency with which Amazon Macie publishes updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).</p>
    #[doc(hidden)]
    pub finding_publishing_frequency: std::option::Option<crate::model::FindingPublishingFrequency>,
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that allows Amazon Macie to monitor and analyze data in Amazon Web Services resources for the account.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>The current status of the Amazon Macie account. Possible values are: PAUSED, the account is enabled but all Macie activities are suspended (paused) for the account; and, ENABLED, the account is enabled and all Macie activities are enabled for the account.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::MacieStatus>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the Amazon Macie account.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetMacieSessionOutput {
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie account was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The frequency with which Amazon Macie publishes updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).</p>
    pub fn finding_publishing_frequency(
        &self,
    ) -> std::option::Option<&crate::model::FindingPublishingFrequency> {
        self.finding_publishing_frequency.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the service-linked role that allows Amazon Macie to monitor and analyze data in Amazon Web Services resources for the account.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The current status of the Amazon Macie account. Possible values are: PAUSED, the account is enabled but all Macie activities are suspended (paused) for the account; and, ENABLED, the account is enabled and all Macie activities are enabled for the account.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::MacieStatus> {
        self.status.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the Amazon Macie account.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetMacieSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetMacieSessionOutput`](crate::output::GetMacieSessionOutput).
pub mod get_macie_session_output {

    /// A builder for [`GetMacieSessionOutput`](crate::output::GetMacieSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) finding_publishing_frequency:
            std::option::Option<crate::model::FindingPublishingFrequency>,
        pub(crate) service_role: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::MacieStatus>,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie account was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the Amazon Macie account was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The frequency with which Amazon Macie publishes updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).</p>
        pub fn finding_publishing_frequency(
            mut self,
            input: crate::model::FindingPublishingFrequency,
        ) -> Self {
            self.finding_publishing_frequency = Some(input);
            self
        }
        /// <p>The frequency with which Amazon Macie publishes updates to policy findings for the account. This includes publishing updates to Security Hub and Amazon EventBridge (formerly Amazon CloudWatch Events).</p>
        pub fn set_finding_publishing_frequency(
            mut self,
            input: std::option::Option<crate::model::FindingPublishingFrequency>,
        ) -> Self {
            self.finding_publishing_frequency = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service-linked role that allows Amazon Macie to monitor and analyze data in Amazon Web Services resources for the account.</p>
        pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_role = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the service-linked role that allows Amazon Macie to monitor and analyze data in Amazon Web Services resources for the account.</p>
        pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_role = input;
            self
        }
        /// <p>The current status of the Amazon Macie account. Possible values are: PAUSED, the account is enabled but all Macie activities are suspended (paused) for the account; and, ENABLED, the account is enabled and all Macie activities are enabled for the account.</p>
        pub fn status(mut self, input: crate::model::MacieStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the Amazon Macie account. Possible values are: PAUSED, the account is enabled but all Macie activities are suspended (paused) for the account; and, ENABLED, the account is enabled and all Macie activities are enabled for the account.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::MacieStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the Amazon Macie account.</p>
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, of the most recent change to the status of the Amazon Macie account.</p>
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetMacieSessionOutput`](crate::output::GetMacieSessionOutput).
        pub fn build(self) -> crate::output::GetMacieSessionOutput {
            crate::output::GetMacieSessionOutput {
                created_at: self.created_at,
                finding_publishing_frequency: self.finding_publishing_frequency,
                service_role: self.service_role,
                status: self.status,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetMacieSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetMacieSessionOutput`](crate::output::GetMacieSessionOutput).
    pub fn builder() -> crate::output::get_macie_session_output::Builder {
        crate::output::get_macie_session_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInvitationsCountOutput {
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    #[doc(hidden)]
    pub invitations_count: i64,
    _request_id: Option<String>,
}
impl GetInvitationsCountOutput {
    /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
    pub fn invitations_count(&self) -> i64 {
        self.invitations_count
    }
}
impl aws_http::request_id::RequestId for GetInvitationsCountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
pub mod get_invitations_count_output {

    /// A builder for [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) invitations_count: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
        pub fn invitations_count(mut self, input: i64) -> Self {
            self.invitations_count = Some(input);
            self
        }
        /// <p>The total number of invitations that were received by the account, not including the currently accepted invitation.</p>
        pub fn set_invitations_count(mut self, input: std::option::Option<i64>) -> Self {
            self.invitations_count = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
        pub fn build(self) -> crate::output::GetInvitationsCountOutput {
            crate::output::GetInvitationsCountOutput {
                invitations_count: self.invitations_count.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl GetInvitationsCountOutput {
    /// Creates a new builder-style object to manufacture [`GetInvitationsCountOutput`](crate::output::GetInvitationsCountOutput).
    pub fn builder() -> crate::output::get_invitations_count_output::Builder {
        crate::output::get_invitations_count_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingStatisticsOutput {
    /// <p>An array of objects, one for each group of findings that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub counts_by_group: std::option::Option<std::vec::Vec<crate::model::GroupCount>>,
    _request_id: Option<String>,
}
impl GetFindingStatisticsOutput {
    /// <p>An array of objects, one for each group of findings that matches the filter criteria specified in the request.</p>
    pub fn counts_by_group(&self) -> std::option::Option<&[crate::model::GroupCount]> {
        self.counts_by_group.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetFindingStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingStatisticsOutput`](crate::output::GetFindingStatisticsOutput).
pub mod get_finding_statistics_output {

    /// A builder for [`GetFindingStatisticsOutput`](crate::output::GetFindingStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) counts_by_group: std::option::Option<std::vec::Vec<crate::model::GroupCount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `counts_by_group`.
        ///
        /// To override the contents of this collection use [`set_counts_by_group`](Self::set_counts_by_group).
        ///
        /// <p>An array of objects, one for each group of findings that matches the filter criteria specified in the request.</p>
        pub fn counts_by_group(mut self, input: crate::model::GroupCount) -> Self {
            let mut v = self.counts_by_group.unwrap_or_default();
            v.push(input);
            self.counts_by_group = Some(v);
            self
        }
        /// <p>An array of objects, one for each group of findings that matches the filter criteria specified in the request.</p>
        pub fn set_counts_by_group(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GroupCount>>,
        ) -> Self {
            self.counts_by_group = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingStatisticsOutput`](crate::output::GetFindingStatisticsOutput).
        pub fn build(self) -> crate::output::GetFindingStatisticsOutput {
            crate::output::GetFindingStatisticsOutput {
                counts_by_group: self.counts_by_group,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingStatisticsOutput`](crate::output::GetFindingStatisticsOutput).
    pub fn builder() -> crate::output::get_finding_statistics_output::Builder {
        crate::output::get_finding_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsPublicationConfigurationOutput {
    /// <p>The configuration settings that determine which findings are published to Security Hub.</p>
    #[doc(hidden)]
    pub security_hub_configuration: std::option::Option<crate::model::SecurityHubConfiguration>,
    _request_id: Option<String>,
}
impl GetFindingsPublicationConfigurationOutput {
    /// <p>The configuration settings that determine which findings are published to Security Hub.</p>
    pub fn security_hub_configuration(
        &self,
    ) -> std::option::Option<&crate::model::SecurityHubConfiguration> {
        self.security_hub_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFindingsPublicationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingsPublicationConfigurationOutput`](crate::output::GetFindingsPublicationConfigurationOutput).
pub mod get_findings_publication_configuration_output {

    /// A builder for [`GetFindingsPublicationConfigurationOutput`](crate::output::GetFindingsPublicationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) security_hub_configuration:
            std::option::Option<crate::model::SecurityHubConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The configuration settings that determine which findings are published to Security Hub.</p>
        pub fn security_hub_configuration(
            mut self,
            input: crate::model::SecurityHubConfiguration,
        ) -> Self {
            self.security_hub_configuration = Some(input);
            self
        }
        /// <p>The configuration settings that determine which findings are published to Security Hub.</p>
        pub fn set_security_hub_configuration(
            mut self,
            input: std::option::Option<crate::model::SecurityHubConfiguration>,
        ) -> Self {
            self.security_hub_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingsPublicationConfigurationOutput`](crate::output::GetFindingsPublicationConfigurationOutput).
        pub fn build(self) -> crate::output::GetFindingsPublicationConfigurationOutput {
            crate::output::GetFindingsPublicationConfigurationOutput {
                security_hub_configuration: self.security_hub_configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingsPublicationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingsPublicationConfigurationOutput`](crate::output::GetFindingsPublicationConfigurationOutput).
    pub fn builder() -> crate::output::get_findings_publication_configuration_output::Builder {
        crate::output::get_findings_publication_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsFilterOutput {
    /// <p>The action that's performed on findings that match the filter criteria (findingCriteria). Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::model::FindingsFilterAction>,
    /// <p>The Amazon Resource Name (ARN) of the filter.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The custom description of the filter.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The criteria that's used to filter findings.</p>
    #[doc(hidden)]
    pub finding_criteria: std::option::Option<crate::model::FindingCriteria>,
    /// <p>The unique identifier for the filter.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The custom name of the filter.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
    #[doc(hidden)]
    pub position: i32,
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetFindingsFilterOutput {
    /// <p>The action that's performed on findings that match the filter criteria (findingCriteria). Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
    pub fn action(&self) -> std::option::Option<&crate::model::FindingsFilterAction> {
        self.action.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the filter.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The custom description of the filter.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The criteria that's used to filter findings.</p>
    pub fn finding_criteria(&self) -> std::option::Option<&crate::model::FindingCriteria> {
        self.finding_criteria.as_ref()
    }
    /// <p>The unique identifier for the filter.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The custom name of the filter.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
    pub fn position(&self) -> i32 {
        self.position
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetFindingsFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingsFilterOutput`](crate::output::GetFindingsFilterOutput).
pub mod get_findings_filter_output {

    /// A builder for [`GetFindingsFilterOutput`](crate::output::GetFindingsFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) action: std::option::Option<crate::model::FindingsFilterAction>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) finding_criteria: std::option::Option<crate::model::FindingCriteria>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) position: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The action that's performed on findings that match the filter criteria (findingCriteria). Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
        pub fn action(mut self, input: crate::model::FindingsFilterAction) -> Self {
            self.action = Some(input);
            self
        }
        /// <p>The action that's performed on findings that match the filter criteria (findingCriteria). Possible values are: ARCHIVE, suppress (automatically archive) the findings; and, NOOP, don't perform any action on the findings.</p>
        pub fn set_action(
            mut self,
            input: std::option::Option<crate::model::FindingsFilterAction>,
        ) -> Self {
            self.action = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the filter.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the filter.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The custom description of the filter.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The custom description of the filter.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The criteria that's used to filter findings.</p>
        pub fn finding_criteria(mut self, input: crate::model::FindingCriteria) -> Self {
            self.finding_criteria = Some(input);
            self
        }
        /// <p>The criteria that's used to filter findings.</p>
        pub fn set_finding_criteria(
            mut self,
            input: std::option::Option<crate::model::FindingCriteria>,
        ) -> Self {
            self.finding_criteria = input;
            self
        }
        /// <p>The unique identifier for the filter.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the filter.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The custom name of the filter.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The custom name of the filter.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
        pub fn position(mut self, input: i32) -> Self {
            self.position = Some(input);
            self
        }
        /// <p>The position of the filter in the list of saved filters on the Amazon Macie console. This value also determines the order in which the filter is applied to findings, relative to other filters that are also applied to the findings.</p>
        pub fn set_position(mut self, input: std::option::Option<i32>) -> Self {
            self.position = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the filter.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingsFilterOutput`](crate::output::GetFindingsFilterOutput).
        pub fn build(self) -> crate::output::GetFindingsFilterOutput {
            crate::output::GetFindingsFilterOutput {
                action: self.action,
                arn: self.arn,
                description: self.description,
                finding_criteria: self.finding_criteria,
                id: self.id,
                name: self.name,
                position: self.position.unwrap_or_default(),
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingsFilterOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingsFilterOutput`](crate::output::GetFindingsFilterOutput).
    pub fn builder() -> crate::output::get_findings_filter_output::Builder {
        crate::output::get_findings_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFindingsOutput {
    /// <p>An array of objects, one for each finding that matches the criteria specified in the request.</p>
    #[doc(hidden)]
    pub findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
    _request_id: Option<String>,
}
impl GetFindingsOutput {
    /// <p>An array of objects, one for each finding that matches the criteria specified in the request.</p>
    pub fn findings(&self) -> std::option::Option<&[crate::model::Finding]> {
        self.findings.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetFindingsOutput`](crate::output::GetFindingsOutput).
pub mod get_findings_output {

    /// A builder for [`GetFindingsOutput`](crate::output::GetFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) findings: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `findings`.
        ///
        /// To override the contents of this collection use [`set_findings`](Self::set_findings).
        ///
        /// <p>An array of objects, one for each finding that matches the criteria specified in the request.</p>
        pub fn findings(mut self, input: crate::model::Finding) -> Self {
            let mut v = self.findings.unwrap_or_default();
            v.push(input);
            self.findings = Some(v);
            self
        }
        /// <p>An array of objects, one for each finding that matches the criteria specified in the request.</p>
        pub fn set_findings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Finding>>,
        ) -> Self {
            self.findings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetFindingsOutput`](crate::output::GetFindingsOutput).
        pub fn build(self) -> crate::output::GetFindingsOutput {
            crate::output::GetFindingsOutput {
                findings: self.findings,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetFindingsOutput {
    /// Creates a new builder-style object to manufacture [`GetFindingsOutput`](crate::output::GetFindingsOutput).
    pub fn builder() -> crate::output::get_findings_output::Builder {
        crate::output::get_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCustomDataIdentifierOutput {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.</p>
    #[doc(hidden)]
    pub deleted: bool,
    /// <p>The custom description of the custom data identifier.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the custom data identifier.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.</p>
    #[doc(hidden)]
    pub ignore_words: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.</p>
    #[doc(hidden)]
    pub keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. Otherwise, Macie excludes the result.</p>
    #[doc(hidden)]
    pub maximum_match_distance: i32,
    /// <p>The custom name of the custom data identifier.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match.</p>
    #[doc(hidden)]
    pub regex: std::option::Option<std::string::String>,
    /// <p>Specifies the severity that's assigned to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. By default, Amazon Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.</p>
    #[doc(hidden)]
    pub severity_levels: std::option::Option<std::vec::Vec<crate::model::SeverityLevel>>,
    /// <p>A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetCustomDataIdentifierOutput {
    /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.</p>
    pub fn deleted(&self) -> bool {
        self.deleted
    }
    /// <p>The custom description of the custom data identifier.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the custom data identifier.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.</p>
    pub fn ignore_words(&self) -> std::option::Option<&[std::string::String]> {
        self.ignore_words.as_deref()
    }
    /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.</p>
    pub fn keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.keywords.as_deref()
    }
    /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. Otherwise, Macie excludes the result.</p>
    pub fn maximum_match_distance(&self) -> i32 {
        self.maximum_match_distance
    }
    /// <p>The custom name of the custom data identifier.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The regular expression (<i>regex</i>) that defines the pattern to match.</p>
    pub fn regex(&self) -> std::option::Option<&str> {
        self.regex.as_deref()
    }
    /// <p>Specifies the severity that's assigned to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. By default, Amazon Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.</p>
    pub fn severity_levels(&self) -> std::option::Option<&[crate::model::SeverityLevel]> {
        self.severity_levels.as_deref()
    }
    /// <p>A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetCustomDataIdentifierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCustomDataIdentifierOutput`](crate::output::GetCustomDataIdentifierOutput).
pub mod get_custom_data_identifier_output {

    /// A builder for [`GetCustomDataIdentifierOutput`](crate::output::GetCustomDataIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) deleted: std::option::Option<bool>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) ignore_words: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) keywords: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) maximum_match_distance: std::option::Option<i32>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) regex: std::option::Option<std::string::String>,
        pub(crate) severity_levels: std::option::Option<std::vec::Vec<crate::model::SeverityLevel>>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the custom data identifier.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the custom data identifier was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// <p>Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.</p>
        pub fn deleted(mut self, input: bool) -> Self {
            self.deleted = Some(input);
            self
        }
        /// <p>Specifies whether the custom data identifier was deleted. If you delete a custom data identifier, Amazon Macie doesn't delete it permanently. Instead, it soft deletes the identifier.</p>
        pub fn set_deleted(mut self, input: std::option::Option<bool>) -> Self {
            self.deleted = input;
            self
        }
        /// <p>The custom description of the custom data identifier.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The custom description of the custom data identifier.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The unique identifier for the custom data identifier.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the custom data identifier.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Appends an item to `ignore_words`.
        ///
        /// To override the contents of this collection use [`set_ignore_words`](Self::set_ignore_words).
        ///
        /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.</p>
        pub fn ignore_words(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.ignore_words.unwrap_or_default();
            v.push(input.into());
            self.ignore_words = Some(v);
            self
        }
        /// <p>An array that lists specific character sequences (<i>ignore words</i>) to exclude from the results. If the text matched by the regular expression contains any string in this array, Amazon Macie ignores it. Ignore words are case sensitive.</p>
        pub fn set_ignore_words(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.ignore_words = input;
            self
        }
        /// Appends an item to `keywords`.
        ///
        /// To override the contents of this collection use [`set_keywords`](Self::set_keywords).
        ///
        /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.</p>
        pub fn keywords(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.keywords.unwrap_or_default();
            v.push(input.into());
            self.keywords = Some(v);
            self
        }
        /// <p>An array that lists specific character sequences (<i>keywords</i>), one of which must precede and be within proximity (maximumMatchDistance) of the regular expression to match. Keywords aren't case sensitive.</p>
        pub fn set_keywords(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.keywords = input;
            self
        }
        /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. Otherwise, Macie excludes the result.</p>
        pub fn maximum_match_distance(mut self, input: i32) -> Self {
            self.maximum_match_distance = Some(input);
            self
        }
        /// <p>The maximum number of characters that can exist between the end of at least one complete character sequence specified by the keywords array and the end of the text that matches the regex pattern. If a complete keyword precedes all the text that matches the pattern and the keyword is within the specified distance, Amazon Macie includes the result. Otherwise, Macie excludes the result.</p>
        pub fn set_maximum_match_distance(mut self, input: std::option::Option<i32>) -> Self {
            self.maximum_match_distance = input;
            self
        }
        /// <p>The custom name of the custom data identifier.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The custom name of the custom data identifier.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The regular expression (<i>regex</i>) that defines the pattern to match.</p>
        pub fn regex(mut self, input: impl Into<std::string::String>) -> Self {
            self.regex = Some(input.into());
            self
        }
        /// <p>The regular expression (<i>regex</i>) that defines the pattern to match.</p>
        pub fn set_regex(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.regex = input;
            self
        }
        /// Appends an item to `severity_levels`.
        ///
        /// To override the contents of this collection use [`set_severity_levels`](Self::set_severity_levels).
        ///
        /// <p>Specifies the severity that's assigned to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. By default, Amazon Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.</p>
        pub fn severity_levels(mut self, input: crate::model::SeverityLevel) -> Self {
            let mut v = self.severity_levels.unwrap_or_default();
            v.push(input);
            self.severity_levels = Some(v);
            self
        }
        /// <p>Specifies the severity that's assigned to findings that the custom data identifier produces, based on the number of occurrences of text that matches the custom data identifier's detection criteria. By default, Amazon Macie creates findings for S3 objects that contain at least one occurrence of text that matches the detection criteria, and Macie assigns the MEDIUM severity to those findings.</p>
        pub fn set_severity_levels(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SeverityLevel>>,
        ) -> Self {
            self.severity_levels = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that identifies the tags (keys and values) that are associated with the custom data identifier.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCustomDataIdentifierOutput`](crate::output::GetCustomDataIdentifierOutput).
        pub fn build(self) -> crate::output::GetCustomDataIdentifierOutput {
            crate::output::GetCustomDataIdentifierOutput {
                arn: self.arn,
                created_at: self.created_at,
                deleted: self.deleted.unwrap_or_default(),
                description: self.description,
                id: self.id,
                ignore_words: self.ignore_words,
                keywords: self.keywords,
                maximum_match_distance: self.maximum_match_distance.unwrap_or_default(),
                name: self.name,
                regex: self.regex,
                severity_levels: self.severity_levels,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCustomDataIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`GetCustomDataIdentifierOutput`](crate::output::GetCustomDataIdentifierOutput).
    pub fn builder() -> crate::output::get_custom_data_identifier_output::Builder {
        crate::output::get_custom_data_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetClassificationScopeOutput {
    /// <p>The unique identifier for the classification scope.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the classification scope.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The S3 buckets that are excluded from automated sensitive data discovery.</p>
    #[doc(hidden)]
    pub s3: std::option::Option<crate::model::S3ClassificationScope>,
    _request_id: Option<String>,
}
impl GetClassificationScopeOutput {
    /// <p>The unique identifier for the classification scope.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the classification scope.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The S3 buckets that are excluded from automated sensitive data discovery.</p>
    pub fn s3(&self) -> std::option::Option<&crate::model::S3ClassificationScope> {
        self.s3.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetClassificationScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetClassificationScopeOutput`](crate::output::GetClassificationScopeOutput).
pub mod get_classification_scope_output {

    /// A builder for [`GetClassificationScopeOutput`](crate::output::GetClassificationScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) s3: std::option::Option<crate::model::S3ClassificationScope>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the classification scope.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the classification scope.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The name of the classification scope.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the classification scope.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The S3 buckets that are excluded from automated sensitive data discovery.</p>
        pub fn s3(mut self, input: crate::model::S3ClassificationScope) -> Self {
            self.s3 = Some(input);
            self
        }
        /// <p>The S3 buckets that are excluded from automated sensitive data discovery.</p>
        pub fn set_s3(
            mut self,
            input: std::option::Option<crate::model::S3ClassificationScope>,
        ) -> Self {
            self.s3 = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetClassificationScopeOutput`](crate::output::GetClassificationScopeOutput).
        pub fn build(self) -> crate::output::GetClassificationScopeOutput {
            crate::output::GetClassificationScopeOutput {
                id: self.id,
                name: self.name,
                s3: self.s3,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetClassificationScopeOutput {
    /// Creates a new builder-style object to manufacture [`GetClassificationScopeOutput`](crate::output::GetClassificationScopeOutput).
    pub fn builder() -> crate::output::get_classification_scope_output::Builder {
        crate::output::get_classification_scope_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetClassificationExportConfigurationOutput {
    /// <p>The location where data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<crate::model::ClassificationExportConfiguration>,
    _request_id: Option<String>,
}
impl GetClassificationExportConfigurationOutput {
    /// <p>The location where data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
    pub fn configuration(
        &self,
    ) -> std::option::Option<&crate::model::ClassificationExportConfiguration> {
        self.configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetClassificationExportConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetClassificationExportConfigurationOutput`](crate::output::GetClassificationExportConfigurationOutput).
pub mod get_classification_export_configuration_output {

    /// A builder for [`GetClassificationExportConfigurationOutput`](crate::output::GetClassificationExportConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configuration:
            std::option::Option<crate::model::ClassificationExportConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The location where data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
        pub fn configuration(
            mut self,
            input: crate::model::ClassificationExportConfiguration,
        ) -> Self {
            self.configuration = Some(input);
            self
        }
        /// <p>The location where data classification results are stored, and the encryption settings that are used when storing results in that location.</p>
        pub fn set_configuration(
            mut self,
            input: std::option::Option<crate::model::ClassificationExportConfiguration>,
        ) -> Self {
            self.configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetClassificationExportConfigurationOutput`](crate::output::GetClassificationExportConfigurationOutput).
        pub fn build(self) -> crate::output::GetClassificationExportConfigurationOutput {
            crate::output::GetClassificationExportConfigurationOutput {
                configuration: self.configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetClassificationExportConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetClassificationExportConfigurationOutput`](crate::output::GetClassificationExportConfigurationOutput).
    pub fn builder() -> crate::output::get_classification_export_configuration_output::Builder {
        crate::output::get_classification_export_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBucketStatisticsOutput {
    /// <p>The total number of buckets.</p>
    #[doc(hidden)]
    pub bucket_count: i64,
    /// <p>The total number of buckets that are publicly accessible based on a combination of permissions settings for each bucket.</p>
    #[doc(hidden)]
    pub bucket_count_by_effective_permission:
        std::option::Option<crate::model::BucketCountByEffectivePermission>,
    /// <p>The total number of buckets that use certain types of server-side encryption to encrypt new objects by default. This object also reports the total number of buckets that don't encrypt new objects by default.</p>
    #[doc(hidden)]
    pub bucket_count_by_encryption_type:
        std::option::Option<crate::model::BucketCountByEncryptionType>,
    /// <p>The total number of buckets whose bucket policies do or don't require server-side encryption of objects when objects are uploaded to the buckets.</p>
    #[doc(hidden)]
    pub bucket_count_by_object_encryption_requirement:
        std::option::Option<crate::model::BucketCountPolicyAllowsUnencryptedObjectUploads>,
    /// <p>The total number of buckets that are or aren't shared with another Amazon Web Services account.</p>
    #[doc(hidden)]
    pub bucket_count_by_shared_access_type:
        std::option::Option<crate::model::BucketCountBySharedAccessType>,
    /// <p>The aggregated sensitive data discovery statistics for the buckets. If automated sensitive data discovery is currently disabled for your account, the value for each statistic is 0.</p>
    #[doc(hidden)]
    pub bucket_statistics_by_sensitivity:
        std::option::Option<crate::model::BucketStatisticsBySensitivity>,
    /// <p>The total number of objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub classifiable_object_count: i64,
    /// <p>The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.</p>
    #[doc(hidden)]
    pub classifiable_size_in_bytes: i64,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the buckets.</p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The total number of objects in the buckets.</p>
    #[doc(hidden)]
    pub object_count: i64,
    /// <p>The total storage size, in bytes, of the buckets.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.</p>
    #[doc(hidden)]
    pub size_in_bytes: i64,
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the buckets.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of the applicable objects in the buckets.</p>
    #[doc(hidden)]
    pub size_in_bytes_compressed: i64,
    /// <p>The total number of objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub unclassifiable_object_count: std::option::Option<crate::model::ObjectLevelStatistics>,
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    #[doc(hidden)]
    pub unclassifiable_object_size_in_bytes:
        std::option::Option<crate::model::ObjectLevelStatistics>,
    _request_id: Option<String>,
}
impl GetBucketStatisticsOutput {
    /// <p>The total number of buckets.</p>
    pub fn bucket_count(&self) -> i64 {
        self.bucket_count
    }
    /// <p>The total number of buckets that are publicly accessible based on a combination of permissions settings for each bucket.</p>
    pub fn bucket_count_by_effective_permission(
        &self,
    ) -> std::option::Option<&crate::model::BucketCountByEffectivePermission> {
        self.bucket_count_by_effective_permission.as_ref()
    }
    /// <p>The total number of buckets that use certain types of server-side encryption to encrypt new objects by default. This object also reports the total number of buckets that don't encrypt new objects by default.</p>
    pub fn bucket_count_by_encryption_type(
        &self,
    ) -> std::option::Option<&crate::model::BucketCountByEncryptionType> {
        self.bucket_count_by_encryption_type.as_ref()
    }
    /// <p>The total number of buckets whose bucket policies do or don't require server-side encryption of objects when objects are uploaded to the buckets.</p>
    pub fn bucket_count_by_object_encryption_requirement(
        &self,
    ) -> std::option::Option<&crate::model::BucketCountPolicyAllowsUnencryptedObjectUploads> {
        self.bucket_count_by_object_encryption_requirement.as_ref()
    }
    /// <p>The total number of buckets that are or aren't shared with another Amazon Web Services account.</p>
    pub fn bucket_count_by_shared_access_type(
        &self,
    ) -> std::option::Option<&crate::model::BucketCountBySharedAccessType> {
        self.bucket_count_by_shared_access_type.as_ref()
    }
    /// <p>The aggregated sensitive data discovery statistics for the buckets. If automated sensitive data discovery is currently disabled for your account, the value for each statistic is 0.</p>
    pub fn bucket_statistics_by_sensitivity(
        &self,
    ) -> std::option::Option<&crate::model::BucketStatisticsBySensitivity> {
        self.bucket_statistics_by_sensitivity.as_ref()
    }
    /// <p>The total number of objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    pub fn classifiable_object_count(&self) -> i64 {
        self.classifiable_object_count
    }
    /// <p>The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.</p>
    pub fn classifiable_size_in_bytes(&self) -> i64 {
        self.classifiable_size_in_bytes
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the buckets.</p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>The total number of objects in the buckets.</p>
    pub fn object_count(&self) -> i64 {
        self.object_count
    }
    /// <p>The total storage size, in bytes, of the buckets.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.</p>
    pub fn size_in_bytes(&self) -> i64 {
        self.size_in_bytes
    }
    /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the buckets.</p>
    /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of the applicable objects in the buckets.</p>
    pub fn size_in_bytes_compressed(&self) -> i64 {
        self.size_in_bytes_compressed
    }
    /// <p>The total number of objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_count(
        &self,
    ) -> std::option::Option<&crate::model::ObjectLevelStatistics> {
        self.unclassifiable_object_count.as_ref()
    }
    /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
    pub fn unclassifiable_object_size_in_bytes(
        &self,
    ) -> std::option::Option<&crate::model::ObjectLevelStatistics> {
        self.unclassifiable_object_size_in_bytes.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetBucketStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetBucketStatisticsOutput`](crate::output::GetBucketStatisticsOutput).
pub mod get_bucket_statistics_output {

    /// A builder for [`GetBucketStatisticsOutput`](crate::output::GetBucketStatisticsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket_count: std::option::Option<i64>,
        pub(crate) bucket_count_by_effective_permission:
            std::option::Option<crate::model::BucketCountByEffectivePermission>,
        pub(crate) bucket_count_by_encryption_type:
            std::option::Option<crate::model::BucketCountByEncryptionType>,
        pub(crate) bucket_count_by_object_encryption_requirement:
            std::option::Option<crate::model::BucketCountPolicyAllowsUnencryptedObjectUploads>,
        pub(crate) bucket_count_by_shared_access_type:
            std::option::Option<crate::model::BucketCountBySharedAccessType>,
        pub(crate) bucket_statistics_by_sensitivity:
            std::option::Option<crate::model::BucketStatisticsBySensitivity>,
        pub(crate) classifiable_object_count: std::option::Option<i64>,
        pub(crate) classifiable_size_in_bytes: std::option::Option<i64>,
        pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) object_count: std::option::Option<i64>,
        pub(crate) size_in_bytes: std::option::Option<i64>,
        pub(crate) size_in_bytes_compressed: std::option::Option<i64>,
        pub(crate) unclassifiable_object_count:
            std::option::Option<crate::model::ObjectLevelStatistics>,
        pub(crate) unclassifiable_object_size_in_bytes:
            std::option::Option<crate::model::ObjectLevelStatistics>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The total number of buckets.</p>
        pub fn bucket_count(mut self, input: i64) -> Self {
            self.bucket_count = Some(input);
            self
        }
        /// <p>The total number of buckets.</p>
        pub fn set_bucket_count(mut self, input: std::option::Option<i64>) -> Self {
            self.bucket_count = input;
            self
        }
        /// <p>The total number of buckets that are publicly accessible based on a combination of permissions settings for each bucket.</p>
        pub fn bucket_count_by_effective_permission(
            mut self,
            input: crate::model::BucketCountByEffectivePermission,
        ) -> Self {
            self.bucket_count_by_effective_permission = Some(input);
            self
        }
        /// <p>The total number of buckets that are publicly accessible based on a combination of permissions settings for each bucket.</p>
        pub fn set_bucket_count_by_effective_permission(
            mut self,
            input: std::option::Option<crate::model::BucketCountByEffectivePermission>,
        ) -> Self {
            self.bucket_count_by_effective_permission = input;
            self
        }
        /// <p>The total number of buckets that use certain types of server-side encryption to encrypt new objects by default. This object also reports the total number of buckets that don't encrypt new objects by default.</p>
        pub fn bucket_count_by_encryption_type(
            mut self,
            input: crate::model::BucketCountByEncryptionType,
        ) -> Self {
            self.bucket_count_by_encryption_type = Some(input);
            self
        }
        /// <p>The total number of buckets that use certain types of server-side encryption to encrypt new objects by default. This object also reports the total number of buckets that don't encrypt new objects by default.</p>
        pub fn set_bucket_count_by_encryption_type(
            mut self,
            input: std::option::Option<crate::model::BucketCountByEncryptionType>,
        ) -> Self {
            self.bucket_count_by_encryption_type = input;
            self
        }
        /// <p>The total number of buckets whose bucket policies do or don't require server-side encryption of objects when objects are uploaded to the buckets.</p>
        pub fn bucket_count_by_object_encryption_requirement(
            mut self,
            input: crate::model::BucketCountPolicyAllowsUnencryptedObjectUploads,
        ) -> Self {
            self.bucket_count_by_object_encryption_requirement = Some(input);
            self
        }
        /// <p>The total number of buckets whose bucket policies do or don't require server-side encryption of objects when objects are uploaded to the buckets.</p>
        pub fn set_bucket_count_by_object_encryption_requirement(
            mut self,
            input: std::option::Option<
                crate::model::BucketCountPolicyAllowsUnencryptedObjectUploads,
            >,
        ) -> Self {
            self.bucket_count_by_object_encryption_requirement = input;
            self
        }
        /// <p>The total number of buckets that are or aren't shared with another Amazon Web Services account.</p>
        pub fn bucket_count_by_shared_access_type(
            mut self,
            input: crate::model::BucketCountBySharedAccessType,
        ) -> Self {
            self.bucket_count_by_shared_access_type = Some(input);
            self
        }
        /// <p>The total number of buckets that are or aren't shared with another Amazon Web Services account.</p>
        pub fn set_bucket_count_by_shared_access_type(
            mut self,
            input: std::option::Option<crate::model::BucketCountBySharedAccessType>,
        ) -> Self {
            self.bucket_count_by_shared_access_type = input;
            self
        }
        /// <p>The aggregated sensitive data discovery statistics for the buckets. If automated sensitive data discovery is currently disabled for your account, the value for each statistic is 0.</p>
        pub fn bucket_statistics_by_sensitivity(
            mut self,
            input: crate::model::BucketStatisticsBySensitivity,
        ) -> Self {
            self.bucket_statistics_by_sensitivity = Some(input);
            self
        }
        /// <p>The aggregated sensitive data discovery statistics for the buckets. If automated sensitive data discovery is currently disabled for your account, the value for each statistic is 0.</p>
        pub fn set_bucket_statistics_by_sensitivity(
            mut self,
            input: std::option::Option<crate::model::BucketStatisticsBySensitivity>,
        ) -> Self {
            self.bucket_statistics_by_sensitivity = input;
            self
        }
        /// <p>The total number of objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
        pub fn classifiable_object_count(mut self, input: i64) -> Self {
            self.classifiable_object_count = Some(input);
            self
        }
        /// <p>The total number of objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
        pub fn set_classifiable_object_count(mut self, input: std::option::Option<i64>) -> Self {
            self.classifiable_object_count = input;
            self
        }
        /// <p>The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.</p>
        pub fn classifiable_size_in_bytes(mut self, input: i64) -> Self {
            self.classifiable_size_in_bytes = Some(input);
            self
        }
        /// <p>The total storage size, in bytes, of all the objects that Amazon Macie can analyze in the buckets. These objects use a supported storage class and have a file name extension for a supported file or storage format.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of all applicable objects in the buckets.</p>
        pub fn set_classifiable_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.classifiable_size_in_bytes = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the buckets.</p>
        pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when Amazon Macie most recently retrieved both bucket and object metadata from Amazon S3 for the buckets.</p>
        pub fn set_last_updated(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated = input;
            self
        }
        /// <p>The total number of objects in the buckets.</p>
        pub fn object_count(mut self, input: i64) -> Self {
            self.object_count = Some(input);
            self
        }
        /// <p>The total number of objects in the buckets.</p>
        pub fn set_object_count(mut self, input: std::option::Option<i64>) -> Self {
            self.object_count = input;
            self
        }
        /// <p>The total storage size, in bytes, of the buckets.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.</p>
        pub fn size_in_bytes(mut self, input: i64) -> Self {
            self.size_in_bytes = Some(input);
            self
        }
        /// <p>The total storage size, in bytes, of the buckets.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each object in the buckets. This value doesn't reflect the storage size of all versions of the objects in the buckets.</p>
        pub fn set_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
            self.size_in_bytes = input;
            self
        }
        /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the buckets.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of the applicable objects in the buckets.</p>
        pub fn size_in_bytes_compressed(mut self, input: i64) -> Self {
            self.size_in_bytes_compressed = Some(input);
            self
        }
        /// <p>The total storage size, in bytes, of the objects that are compressed (.gz, .gzip, .zip) files in the buckets.</p>
        /// <p>If versioning is enabled for any of the buckets, this value is based on the size of the latest version of each applicable object in the buckets. This value doesn't reflect the storage size of all versions of the applicable objects in the buckets.</p>
        pub fn set_size_in_bytes_compressed(mut self, input: std::option::Option<i64>) -> Self {
            self.size_in_bytes_compressed = input;
            self
        }
        /// <p>The total number of objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
        pub fn unclassifiable_object_count(
            mut self,
            input: crate::model::ObjectLevelStatistics,
        ) -> Self {
            self.unclassifiable_object_count = Some(input);
            self
        }
        /// <p>The total number of objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
        pub fn set_unclassifiable_object_count(
            mut self,
            input: std::option::Option<crate::model::ObjectLevelStatistics>,
        ) -> Self {
            self.unclassifiable_object_count = input;
            self
        }
        /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
        pub fn unclassifiable_object_size_in_bytes(
            mut self,
            input: crate::model::ObjectLevelStatistics,
        ) -> Self {
            self.unclassifiable_object_size_in_bytes = Some(input);
            self
        }
        /// <p>The total storage size, in bytes, of the objects that Amazon Macie can't analyze in the buckets. These objects don't use a supported storage class or don't have a file name extension for a supported file or storage format.</p>
        pub fn set_unclassifiable_object_size_in_bytes(
            mut self,
            input: std::option::Option<crate::model::ObjectLevelStatistics>,
        ) -> Self {
            self.unclassifiable_object_size_in_bytes = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetBucketStatisticsOutput`](crate::output::GetBucketStatisticsOutput).
        pub fn build(self) -> crate::output::GetBucketStatisticsOutput {
            crate::output::GetBucketStatisticsOutput {
                bucket_count: self.bucket_count.unwrap_or_default(),
                bucket_count_by_effective_permission: self.bucket_count_by_effective_permission,
                bucket_count_by_encryption_type: self.bucket_count_by_encryption_type,
                bucket_count_by_object_encryption_requirement: self
                    .bucket_count_by_object_encryption_requirement,
                bucket_count_by_shared_access_type: self.bucket_count_by_shared_access_type,
                bucket_statistics_by_sensitivity: self.bucket_statistics_by_sensitivity,
                classifiable_object_count: self.classifiable_object_count.unwrap_or_default(),
                classifiable_size_in_bytes: self.classifiable_size_in_bytes.unwrap_or_default(),
                last_updated: self.last_updated,
                object_count: self.object_count.unwrap_or_default(),
                size_in_bytes: self.size_in_bytes.unwrap_or_default(),
                size_in_bytes_compressed: self.size_in_bytes_compressed.unwrap_or_default(),
                unclassifiable_object_count: self.unclassifiable_object_count,
                unclassifiable_object_size_in_bytes: self.unclassifiable_object_size_in_bytes,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetBucketStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetBucketStatisticsOutput`](crate::output::GetBucketStatisticsOutput).
    pub fn builder() -> crate::output::get_bucket_statistics_output::Builder {
        crate::output::get_bucket_statistics_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAutomatedDiscoveryConfigurationOutput {
    /// <p>The unique identifier for the classification scope that's used when performing automated sensitive data discovery for the account. The classification scope specifies S3 buckets to exclude from automated sensitive data discovery.</p>
    #[doc(hidden)]
    pub classification_scope_id: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently disabled for the account. This value is null if automated sensitive data discovery wasn't enabled and subsequently disabled for the account.</p>
    #[doc(hidden)]
    pub disabled_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was initially enabled for the account. This value is null if automated sensitive data discovery has never been enabled for the account.</p>
    #[doc(hidden)]
    pub first_enabled_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently enabled or disabled for the account.</p>
    #[doc(hidden)]
    pub last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The unique identifier for the sensitivity inspection template that's used when performing automated sensitive data discovery for the account. The template specifies which allow lists, custom data identifiers, and managed data identifiers to use when analyzing data.</p>
    #[doc(hidden)]
    pub sensitivity_inspection_template_id: std::option::Option<std::string::String>,
    /// <p>The current status of the automated sensitive data discovery configuration for the account. Possible values are: ENABLED, use the specified settings to perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AutomatedDiscoveryStatus>,
    _request_id: Option<String>,
}
impl GetAutomatedDiscoveryConfigurationOutput {
    /// <p>The unique identifier for the classification scope that's used when performing automated sensitive data discovery for the account. The classification scope specifies S3 buckets to exclude from automated sensitive data discovery.</p>
    pub fn classification_scope_id(&self) -> std::option::Option<&str> {
        self.classification_scope_id.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently disabled for the account. This value is null if automated sensitive data discovery wasn't enabled and subsequently disabled for the account.</p>
    pub fn disabled_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.disabled_at.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was initially enabled for the account. This value is null if automated sensitive data discovery has never been enabled for the account.</p>
    pub fn first_enabled_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.first_enabled_at.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently enabled or disabled for the account.</p>
    pub fn last_updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The unique identifier for the sensitivity inspection template that's used when performing automated sensitive data discovery for the account. The template specifies which allow lists, custom data identifiers, and managed data identifiers to use when analyzing data.</p>
    pub fn sensitivity_inspection_template_id(&self) -> std::option::Option<&str> {
        self.sensitivity_inspection_template_id.as_deref()
    }
    /// <p>The current status of the automated sensitive data discovery configuration for the account. Possible values are: ENABLED, use the specified settings to perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::AutomatedDiscoveryStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAutomatedDiscoveryConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAutomatedDiscoveryConfigurationOutput`](crate::output::GetAutomatedDiscoveryConfigurationOutput).
pub mod get_automated_discovery_configuration_output {

    /// A builder for [`GetAutomatedDiscoveryConfigurationOutput`](crate::output::GetAutomatedDiscoveryConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) classification_scope_id: std::option::Option<std::string::String>,
        pub(crate) disabled_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) first_enabled_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sensitivity_inspection_template_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AutomatedDiscoveryStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the classification scope that's used when performing automated sensitive data discovery for the account. The classification scope specifies S3 buckets to exclude from automated sensitive data discovery.</p>
        pub fn classification_scope_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.classification_scope_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the classification scope that's used when performing automated sensitive data discovery for the account. The classification scope specifies S3 buckets to exclude from automated sensitive data discovery.</p>
        pub fn set_classification_scope_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.classification_scope_id = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently disabled for the account. This value is null if automated sensitive data discovery wasn't enabled and subsequently disabled for the account.</p>
        pub fn disabled_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.disabled_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently disabled for the account. This value is null if automated sensitive data discovery wasn't enabled and subsequently disabled for the account.</p>
        pub fn set_disabled_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.disabled_at = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was initially enabled for the account. This value is null if automated sensitive data discovery has never been enabled for the account.</p>
        pub fn first_enabled_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.first_enabled_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was initially enabled for the account. This value is null if automated sensitive data discovery has never been enabled for the account.</p>
        pub fn set_first_enabled_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.first_enabled_at = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently enabled or disabled for the account.</p>
        pub fn last_updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when automated sensitive data discovery was most recently enabled or disabled for the account.</p>
        pub fn set_last_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_at = input;
            self
        }
        /// <p>The unique identifier for the sensitivity inspection template that's used when performing automated sensitive data discovery for the account. The template specifies which allow lists, custom data identifiers, and managed data identifiers to use when analyzing data.</p>
        pub fn sensitivity_inspection_template_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.sensitivity_inspection_template_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the sensitivity inspection template that's used when performing automated sensitive data discovery for the account. The template specifies which allow lists, custom data identifiers, and managed data identifiers to use when analyzing data.</p>
        pub fn set_sensitivity_inspection_template_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sensitivity_inspection_template_id = input;
            self
        }
        /// <p>The current status of the automated sensitive data discovery configuration for the account. Possible values are: ENABLED, use the specified settings to perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.</p>
        pub fn status(mut self, input: crate::model::AutomatedDiscoveryStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the automated sensitive data discovery configuration for the account. Possible values are: ENABLED, use the specified settings to perform automated sensitive data discovery activities for the account; and, DISABLED, don't perform automated sensitive data discovery activities for the account.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AutomatedDiscoveryStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAutomatedDiscoveryConfigurationOutput`](crate::output::GetAutomatedDiscoveryConfigurationOutput).
        pub fn build(self) -> crate::output::GetAutomatedDiscoveryConfigurationOutput {
            crate::output::GetAutomatedDiscoveryConfigurationOutput {
                classification_scope_id: self.classification_scope_id,
                disabled_at: self.disabled_at,
                first_enabled_at: self.first_enabled_at,
                last_updated_at: self.last_updated_at,
                sensitivity_inspection_template_id: self.sensitivity_inspection_template_id,
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAutomatedDiscoveryConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetAutomatedDiscoveryConfigurationOutput`](crate::output::GetAutomatedDiscoveryConfigurationOutput).
    pub fn builder() -> crate::output::get_automated_discovery_configuration_output::Builder {
        crate::output::get_automated_discovery_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.</p>
    #[doc(hidden)]
    pub criteria: std::option::Option<crate::model::AllowListCriteria>,
    /// <p>The custom description of the allow list.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the allow list.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The custom name of the allow list.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The current status of the allow list, which indicates whether Amazon Macie can access and use the list's criteria.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AllowListStatus>,
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the allow list.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.</p>
    pub fn criteria(&self) -> std::option::Option<&crate::model::AllowListCriteria> {
        self.criteria.as_ref()
    }
    /// <p>The custom description of the allow list.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier for the allow list.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The custom name of the allow list.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The current status of the allow list, which indicates whether Amazon Macie can access and use the list's criteria.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::AllowListStatus> {
        self.status.as_ref()
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the allow list.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAllowListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAllowListOutput`](crate::output::GetAllowListOutput).
pub mod get_allow_list_output {

    /// A builder for [`GetAllowListOutput`](crate::output::GetAllowListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) criteria: std::option::Option<crate::model::AllowListCriteria>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::AllowListStatus>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list was created in Amazon Macie.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.</p>
        pub fn criteria(mut self, input: crate::model::AllowListCriteria) -> Self {
            self.criteria = Some(input);
            self
        }
        /// <p>The criteria that specify the text or text pattern to ignore. The criteria can be the location and name of an S3 object that lists specific text to ignore (s3WordsList), or a regular expression (regex) that defines a text pattern to ignore.</p>
        pub fn set_criteria(
            mut self,
            input: std::option::Option<crate::model::AllowListCriteria>,
        ) -> Self {
            self.criteria = input;
            self
        }
        /// <p>The custom description of the allow list.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The custom description of the allow list.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The custom name of the allow list.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The custom name of the allow list.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The current status of the allow list, which indicates whether Amazon Macie can access and use the list's criteria.</p>
        pub fn status(mut self, input: crate::model::AllowListStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the allow list, which indicates whether Amazon Macie can access and use the list's criteria.</p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AllowListStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the allow list.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the allow list.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.</p>
        pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.updated_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the allow list's settings were most recently changed in Amazon Macie.</p>
        pub fn set_updated_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.updated_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAllowListOutput`](crate::output::GetAllowListOutput).
        pub fn build(self) -> crate::output::GetAllowListOutput {
            crate::output::GetAllowListOutput {
                arn: self.arn,
                created_at: self.created_at,
                criteria: self.criteria,
                description: self.description,
                id: self.id,
                name: self.name,
                status: self.status,
                tags: self.tags,
                updated_at: self.updated_at,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAllowListOutput {
    /// Creates a new builder-style object to manufacture [`GetAllowListOutput`](crate::output::GetAllowListOutput).
    pub fn builder() -> crate::output::get_allow_list_output::Builder {
        crate::output::get_allow_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAdministratorAccountOutput {
    /// <p>The Amazon Web Services account ID for the administrator account. If the accounts are associated by an Amazon Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
    #[doc(hidden)]
    pub administrator: std::option::Option<crate::model::Invitation>,
    _request_id: Option<String>,
}
impl GetAdministratorAccountOutput {
    /// <p>The Amazon Web Services account ID for the administrator account. If the accounts are associated by an Amazon Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
    pub fn administrator(&self) -> std::option::Option<&crate::model::Invitation> {
        self.administrator.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAdministratorAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
pub mod get_administrator_account_output {

    /// A builder for [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) administrator: std::option::Option<crate::model::Invitation>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Web Services account ID for the administrator account. If the accounts are associated by an Amazon Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
        pub fn administrator(mut self, input: crate::model::Invitation) -> Self {
            self.administrator = Some(input);
            self
        }
        /// <p>The Amazon Web Services account ID for the administrator account. If the accounts are associated by an Amazon Macie membership invitation, this object also provides details about the invitation that was sent to establish the relationship between the accounts.</p>
        pub fn set_administrator(
            mut self,
            input: std::option::Option<crate::model::Invitation>,
        ) -> Self {
            self.administrator = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
        pub fn build(self) -> crate::output::GetAdministratorAccountOutput {
            crate::output::GetAdministratorAccountOutput {
                administrator: self.administrator,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetAdministratorAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetAdministratorAccountOutput`](crate::output::GetAdministratorAccountOutput).
    pub fn builder() -> crate::output::get_administrator_account_output::Builder {
        crate::output::get_administrator_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableOrganizationAdminAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
pub mod enable_organization_admin_account_output {

    /// A builder for [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::EnableOrganizationAdminAccountOutput {
            crate::output::EnableOrganizationAdminAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`EnableOrganizationAdminAccountOutput`](crate::output::EnableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::enable_organization_admin_account_output::Builder {
        crate::output::enable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnableMacieOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for EnableMacieOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`EnableMacieOutput`](crate::output::EnableMacieOutput).
pub mod enable_macie_output {

    /// A builder for [`EnableMacieOutput`](crate::output::EnableMacieOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`EnableMacieOutput`](crate::output::EnableMacieOutput).
        pub fn build(self) -> crate::output::EnableMacieOutput {
            crate::output::EnableMacieOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl EnableMacieOutput {
    /// Creates a new builder-style object to manufacture [`EnableMacieOutput`](crate::output::EnableMacieOutput).
    pub fn builder() -> crate::output::enable_macie_output::Builder {
        crate::output::enable_macie_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateMemberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateMemberOutput`](crate::output::DisassociateMemberOutput).
pub mod disassociate_member_output {

    /// A builder for [`DisassociateMemberOutput`](crate::output::DisassociateMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateMemberOutput`](crate::output::DisassociateMemberOutput).
        pub fn build(self) -> crate::output::DisassociateMemberOutput {
            crate::output::DisassociateMemberOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateMemberOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateMemberOutput`](crate::output::DisassociateMemberOutput).
    pub fn builder() -> crate::output::disassociate_member_output::Builder {
        crate::output::disassociate_member_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateFromMasterAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateFromMasterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
pub mod disassociate_from_master_account_output {

    /// A builder for [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
        pub fn build(self) -> crate::output::DisassociateFromMasterAccountOutput {
            crate::output::DisassociateFromMasterAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateFromMasterAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateFromMasterAccountOutput`](crate::output::DisassociateFromMasterAccountOutput).
    pub fn builder() -> crate::output::disassociate_from_master_account_output::Builder {
        crate::output::disassociate_from_master_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateFromAdministratorAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateFromAdministratorAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
pub mod disassociate_from_administrator_account_output {

    /// A builder for [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
        pub fn build(self) -> crate::output::DisassociateFromAdministratorAccountOutput {
            crate::output::DisassociateFromAdministratorAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateFromAdministratorAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateFromAdministratorAccountOutput`](crate::output::DisassociateFromAdministratorAccountOutput).
    pub fn builder() -> crate::output::disassociate_from_administrator_account_output::Builder {
        crate::output::disassociate_from_administrator_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableOrganizationAdminAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisableOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
pub mod disable_organization_admin_account_output {

    /// A builder for [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::DisableOrganizationAdminAccountOutput {
            crate::output::DisableOrganizationAdminAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisableOrganizationAdminAccountOutput`](crate::output::DisableOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::disable_organization_admin_account_output::Builder {
        crate::output::disable_organization_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisableMacieOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisableMacieOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisableMacieOutput`](crate::output::DisableMacieOutput).
pub mod disable_macie_output {

    /// A builder for [`DisableMacieOutput`](crate::output::DisableMacieOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisableMacieOutput`](crate::output::DisableMacieOutput).
        pub fn build(self) -> crate::output::DisableMacieOutput {
            crate::output::DisableMacieOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DisableMacieOutput {
    /// Creates a new builder-style object to manufacture [`DisableMacieOutput`](crate::output::DisableMacieOutput).
    pub fn builder() -> crate::output::disable_macie_output::Builder {
        crate::output::disable_macie_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOrganizationConfigurationOutput {
    /// <p>Specifies whether Amazon Macie is enabled automatically for accounts that are added to the organization.</p>
    #[doc(hidden)]
    pub auto_enable: bool,
    /// <p>Specifies whether the maximum number of Amazon Macie member accounts are part of the organization.</p>
    #[doc(hidden)]
    pub max_account_limit_reached: bool,
    _request_id: Option<String>,
}
impl DescribeOrganizationConfigurationOutput {
    /// <p>Specifies whether Amazon Macie is enabled automatically for accounts that are added to the organization.</p>
    pub fn auto_enable(&self) -> bool {
        self.auto_enable
    }
    /// <p>Specifies whether the maximum number of Amazon Macie member accounts are part of the organization.</p>
    pub fn max_account_limit_reached(&self) -> bool {
        self.max_account_limit_reached
    }
}
impl aws_http::request_id::RequestId for DescribeOrganizationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
pub mod describe_organization_configuration_output {

    /// A builder for [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_enable: std::option::Option<bool>,
        pub(crate) max_account_limit_reached: std::option::Option<bool>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Specifies whether Amazon Macie is enabled automatically for accounts that are added to the organization.</p>
        pub fn auto_enable(mut self, input: bool) -> Self {
            self.auto_enable = Some(input);
            self
        }
        /// <p>Specifies whether Amazon Macie is enabled automatically for accounts that are added to the organization.</p>
        pub fn set_auto_enable(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_enable = input;
            self
        }
        /// <p>Specifies whether the maximum number of Amazon Macie member accounts are part of the organization.</p>
        pub fn max_account_limit_reached(mut self, input: bool) -> Self {
            self.max_account_limit_reached = Some(input);
            self
        }
        /// <p>Specifies whether the maximum number of Amazon Macie member accounts are part of the organization.</p>
        pub fn set_max_account_limit_reached(mut self, input: std::option::Option<bool>) -> Self {
            self.max_account_limit_reached = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeOrganizationConfigurationOutput {
            crate::output::DescribeOrganizationConfigurationOutput {
                auto_enable: self.auto_enable.unwrap_or_default(),
                max_account_limit_reached: self.max_account_limit_reached.unwrap_or_default(),
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeOrganizationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrganizationConfigurationOutput`](crate::output::DescribeOrganizationConfigurationOutput).
    pub fn builder() -> crate::output::describe_organization_configuration_output::Builder {
        crate::output::describe_organization_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClassificationJobOutput {
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    #[doc(hidden)]
    pub allow_list_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    #[doc(hidden)]
    pub custom_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The custom description of the job.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    #[doc(hidden)]
    pub initial_run: bool,
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::model::JobStatus>,
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    #[doc(hidden)]
    pub job_type: std::option::Option<crate::model::JobType>,
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    #[doc(hidden)]
    pub last_run_error_status: std::option::Option<crate::model::LastRunErrorStatus>,
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    #[doc(hidden)]
    pub last_run_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    #[doc(hidden)]
    pub managed_data_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    #[doc(hidden)]
    pub managed_data_identifier_selector:
        std::option::Option<crate::model::ManagedDataIdentifierSelector>,
    /// <p>The custom name of the job.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    #[doc(hidden)]
    pub s3_job_definition: std::option::Option<crate::model::S3JobDefinition>,
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    #[doc(hidden)]
    pub sampling_percentage: i32,
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    #[doc(hidden)]
    pub schedule_frequency: std::option::Option<crate::model::JobScheduleFrequency>,
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    #[doc(hidden)]
    pub statistics: std::option::Option<crate::model::Statistics>,
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    #[doc(hidden)]
    pub user_paused_details: std::option::Option<crate::model::UserPausedDetails>,
    _request_id: Option<String>,
}
impl DescribeClassificationJobOutput {
    /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
    pub fn allow_list_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.allow_list_ids.as_deref()
    }
    /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
    pub fn custom_data_identifier_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.custom_data_identifier_ids.as_deref()
    }
    /// <p>The custom description of the job.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
    pub fn initial_run(&self) -> bool {
        self.initial_run
    }
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The unique identifier for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The current status of the job. Possible values are:</p>
    /// <ul>
    /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
    /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
    /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
    /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
    /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
    /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
    /// </ul>
    pub fn job_status(&self) -> std::option::Option<&crate::model::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>The schedule for running the job. Possible values are:</p>
    /// <ul>
    /// <li><p>ONE_TIME - The job runs only once.</p></li>
    /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
    /// </ul>
    pub fn job_type(&self) -> std::option::Option<&crate::model::JobType> {
        self.job_type.as_ref()
    }
    /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
    pub fn last_run_error_status(&self) -> std::option::Option<&crate::model::LastRunErrorStatus> {
        self.last_run_error_status.as_ref()
    }
    /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
    pub fn last_run_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_run_time.as_ref()
    }
    /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
    pub fn managed_data_identifier_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.managed_data_identifier_ids.as_deref()
    }
    /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
    /// <ul>
    /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
    /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
    /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
    /// </ul>
    /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
    pub fn managed_data_identifier_selector(
        &self,
    ) -> std::option::Option<&crate::model::ManagedDataIdentifierSelector> {
        self.managed_data_identifier_selector.as_ref()
    }
    /// <p>The custom name of the job.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
    pub fn s3_job_definition(&self) -> std::option::Option<&crate::model::S3JobDefinition> {
        self.s3_job_definition.as_ref()
    }
    /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
    pub fn sampling_percentage(&self) -> i32 {
        self.sampling_percentage
    }
    /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
    pub fn schedule_frequency(&self) -> std::option::Option<&crate::model::JobScheduleFrequency> {
        self.schedule_frequency.as_ref()
    }
    /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
    pub fn statistics(&self) -> std::option::Option<&crate::model::Statistics> {
        self.statistics.as_ref()
    }
    /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
    pub fn user_paused_details(&self) -> std::option::Option<&crate::model::UserPausedDetails> {
        self.user_paused_details.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeClassificationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClassificationJobOutput`](crate::output::DescribeClassificationJobOutput).
pub mod describe_classification_job_output {

    /// A builder for [`DescribeClassificationJobOutput`](crate::output::DescribeClassificationJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) allow_list_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) client_token: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) custom_data_identifier_ids:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) initial_run: std::option::Option<bool>,
        pub(crate) job_arn: std::option::Option<std::string::String>,
        pub(crate) job_id: std::option::Option<std::string::String>,
        pub(crate) job_status: std::option::Option<crate::model::JobStatus>,
        pub(crate) job_type: std::option::Option<crate::model::JobType>,
        pub(crate) last_run_error_status: std::option::Option<crate::model::LastRunErrorStatus>,
        pub(crate) last_run_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) managed_data_identifier_ids:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) managed_data_identifier_selector:
            std::option::Option<crate::model::ManagedDataIdentifierSelector>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) s3_job_definition: std::option::Option<crate::model::S3JobDefinition>,
        pub(crate) sampling_percentage: std::option::Option<i32>,
        pub(crate) schedule_frequency: std::option::Option<crate::model::JobScheduleFrequency>,
        pub(crate) statistics: std::option::Option<crate::model::Statistics>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) user_paused_details: std::option::Option<crate::model::UserPausedDetails>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `allow_list_ids`.
        ///
        /// To override the contents of this collection use [`set_allow_list_ids`](Self::set_allow_list_ids).
        ///
        /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
        pub fn allow_list_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.allow_list_ids.unwrap_or_default();
            v.push(input.into());
            self.allow_list_ids = Some(v);
            self
        }
        /// <p>An array of unique identifiers, one for each allow list that the job uses when it analyzes data.</p>
        pub fn set_allow_list_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.allow_list_ids = input;
            self
        }
        /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
        pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.client_token = Some(input.into());
            self
        }
        /// <p>The token that was provided to ensure the idempotency of the request to create the job.</p>
        pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.client_token = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the job was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        /// Appends an item to `custom_data_identifier_ids`.
        ///
        /// To override the contents of this collection use [`set_custom_data_identifier_ids`](Self::set_custom_data_identifier_ids).
        ///
        /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
        pub fn custom_data_identifier_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.custom_data_identifier_ids.unwrap_or_default();
            v.push(input.into());
            self.custom_data_identifier_ids = Some(v);
            self
        }
        /// <p>An array of unique identifiers, one for each custom data identifier that the job uses when it analyzes data. This value is null if the job uses only managed data identifiers to analyze data.</p>
        pub fn set_custom_data_identifier_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.custom_data_identifier_ids = input;
            self
        }
        /// <p>The custom description of the job.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The custom description of the job.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
        pub fn initial_run(mut self, input: bool) -> Self {
            self.initial_run = Some(input);
            self
        }
        /// <p>For a recurring job, specifies whether you configured the job to analyze all existing, eligible objects immediately after the job was created (true). If you configured the job to analyze only those objects that were created or changed after the job was created and before the job's first scheduled run, this value is false. This value is also false for a one-time job.</p>
        pub fn set_initial_run(mut self, input: std::option::Option<bool>) -> Self {
            self.initial_run = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        /// <p>The current status of the job. Possible values are:</p>
        /// <ul>
        /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
        /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
        /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
        /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
        /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
        /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
        /// </ul>
        pub fn job_status(mut self, input: crate::model::JobStatus) -> Self {
            self.job_status = Some(input);
            self
        }
        /// <p>The current status of the job. Possible values are:</p>
        /// <ul>
        /// <li><p>CANCELLED - You cancelled the job or, if it's a one-time job, you paused the job and didn't resume it within 30 days.</p></li>
        /// <li><p>COMPLETE - For a one-time job, Amazon Macie finished processing the data specified for the job. This value doesn't apply to recurring jobs.</p></li>
        /// <li><p>IDLE - For a recurring job, the previous scheduled run is complete and the next scheduled run is pending. This value doesn't apply to one-time jobs.</p></li>
        /// <li><p>PAUSED - Macie started running the job but additional processing would exceed the monthly sensitive data discovery quota for your account or one or more member accounts that the job analyzes data for.</p></li>
        /// <li><p>RUNNING - For a one-time job, the job is in progress. For a recurring job, a scheduled run is in progress.</p></li>
        /// <li><p>USER_PAUSED - You paused the job. If you paused the job while it had a status of RUNNING and you don't resume it within 30 days of pausing it, the job or job run will expire and be cancelled, depending on the job's type. To check the expiration date, refer to the UserPausedDetails.jobExpiresAt property.</p></li>
        /// </ul>
        pub fn set_job_status(
            mut self,
            input: std::option::Option<crate::model::JobStatus>,
        ) -> Self {
            self.job_status = input;
            self
        }
        /// <p>The schedule for running the job. Possible values are:</p>
        /// <ul>
        /// <li><p>ONE_TIME - The job runs only once.</p></li>
        /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
        /// </ul>
        pub fn job_type(mut self, input: crate::model::JobType) -> Self {
            self.job_type = Some(input);
            self
        }
        /// <p>The schedule for running the job. Possible values are:</p>
        /// <ul>
        /// <li><p>ONE_TIME - The job runs only once.</p></li>
        /// <li><p>SCHEDULED - The job runs on a daily, weekly, or monthly basis. The scheduleFrequency property indicates the recurrence pattern for the job.</p></li>
        /// </ul>
        pub fn set_job_type(mut self, input: std::option::Option<crate::model::JobType>) -> Self {
            self.job_type = input;
            self
        }
        /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
        pub fn last_run_error_status(mut self, input: crate::model::LastRunErrorStatus) -> Self {
            self.last_run_error_status = Some(input);
            self
        }
        /// <p>Specifies whether any account- or bucket-level access errors occurred when the job ran. For a recurring job, this value indicates the error status of the job's most recent run.</p>
        pub fn set_last_run_error_status(
            mut self,
            input: std::option::Option<crate::model::LastRunErrorStatus>,
        ) -> Self {
            self.last_run_error_status = input;
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
        pub fn last_run_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_run_time = Some(input);
            self
        }
        /// <p>The date and time, in UTC and extended ISO 8601 format, when the job started. If the job is a recurring job, this value indicates when the most recent run started or, if the job hasn't run yet, when the job was created.</p>
        pub fn set_last_run_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_run_time = input;
            self
        }
        /// Appends an item to `managed_data_identifier_ids`.
        ///
        /// To override the contents of this collection use [`set_managed_data_identifier_ids`](Self::set_managed_data_identifier_ids).
        ///
        /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
        pub fn managed_data_identifier_ids(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.managed_data_identifier_ids.unwrap_or_default();
            v.push(input.into());
            self.managed_data_identifier_ids = Some(v);
            self
        }
        /// <p>An array of unique identifiers, one for each managed data identifier that the job is explicitly configured to include (use) or exclude (not use) when it analyzes data. Inclusion or exclusion depends on the managed data identifier selection type specified for the job (managedDataIdentifierSelector). This value is null if the job's managed data identifier selection type is ALL or the job uses only custom data identifiers (customDataIdentifierIds) to analyze data.</p>
        pub fn set_managed_data_identifier_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.managed_data_identifier_ids = input;
            self
        }
        /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
        /// <ul>
        /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
        /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
        /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
        /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
        /// </ul>
        /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
        pub fn managed_data_identifier_selector(
            mut self,
            input: crate::model::ManagedDataIdentifierSelector,
        ) -> Self {
            self.managed_data_identifier_selector = Some(input);
            self
        }
        /// <p>The selection type that determines which managed data identifiers the job uses to analyze data. Possible values are:</p>
        /// <ul>
        /// <li><p>ALL - Use all the managed data identifiers that Amazon Macie provides.</p></li>
        /// <li><p>EXCLUDE - Use all the managed data identifiers that Macie provides except the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
        /// <li><p>INCLUDE - Use only the managed data identifiers specified by the managedDataIdentifierIds property.</p></li>
        /// <li><p>NONE - Don't use any managed data identifiers.</p></li>
        /// </ul>
        /// <p>If this value is null, the job uses all managed data identifiers. If this value is null, ALL, or EXCLUDE for a recurring job, the job also uses new managed data identifiers as they are released.</p>
        pub fn set_managed_data_identifier_selector(
            mut self,
            input: std::option::Option<crate::model::ManagedDataIdentifierSelector>,
        ) -> Self {
            self.managed_data_identifier_selector = input;
            self
        }
        /// <p>The custom name of the job.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The custom name of the job.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
        pub fn s3_job_definition(mut self, input: crate::model::S3JobDefinition) -> Self {
            self.s3_job_definition = Some(input);
            self
        }
        /// <p>The S3 buckets that contain the objects to analyze, and the scope of that analysis.</p>
        pub fn set_s3_job_definition(
            mut self,
            input: std::option::Option<crate::model::S3JobDefinition>,
        ) -> Self {
            self.s3_job_definition = input;
            self
        }
        /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
        pub fn sampling_percentage(mut self, input: i32) -> Self {
            self.sampling_percentage = Some(input);
            self
        }
        /// <p>The sampling depth, as a percentage, that determines the percentage of eligible objects that the job analyzes.</p>
        pub fn set_sampling_percentage(mut self, input: std::option::Option<i32>) -> Self {
            self.sampling_percentage = input;
            self
        }
        /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
        pub fn schedule_frequency(mut self, input: crate::model::JobScheduleFrequency) -> Self {
            self.schedule_frequency = Some(input);
            self
        }
        /// <p>The recurrence pattern for running the job. This value is null if the job is configured to run only once.</p>
        pub fn set_schedule_frequency(
            mut self,
            input: std::option::Option<crate::model::JobScheduleFrequency>,
        ) -> Self {
            self.schedule_frequency = input;
            self
        }
        /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
        pub fn statistics(mut self, input: crate::model::Statistics) -> Self {
            self.statistics = Some(input);
            self
        }
        /// <p>The number of times that the job has run and processing statistics for the job's current run.</p>
        pub fn set_statistics(
            mut self,
            input: std::option::Option<crate::model::Statistics>,
        ) -> Self {
            self.statistics = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of key-value pairs that specifies which tags (keys and values) are associated with the classification job.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
        pub fn user_paused_details(mut self, input: crate::model::UserPausedDetails) -> Self {
            self.user_paused_details = Some(input);
            self
        }
        /// <p>If the current status of the job is USER_PAUSED, specifies when the job was paused and when the job or job run will expire and be cancelled if it isn't resumed. This value is present only if the value for jobStatus is USER_PAUSED.</p>
        pub fn set_user_paused_details(
            mut self,
            input: std::option::Option<crate::model::UserPausedDetails>,
        ) -> Self {
            self.user_paused_details = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClassificationJobOutput`](crate::output::DescribeClassificationJobOutput).
        pub fn build(self) -> crate::output::DescribeClassificationJobOutput {
            crate::output::DescribeClassificationJobOutput {
                allow_list_ids: self.allow_list_ids,
                client_token: self.client_token,
                created_at: self.created_at,
                custom_data_identifier_ids: self.custom_data_identifier_ids,
                description: self.description,
                initial_run: self.initial_run.unwrap_or_default(),
                job_arn: self.job_arn,
                job_id: self.job_id,
                job_status: self.job_status,
                job_type: self.job_type,
                last_run_error_status: self.last_run_error_status,
                last_run_time: self.last_run_time,
                managed_data_identifier_ids: self.managed_data_identifier_ids,
                managed_data_identifier_selector: self.managed_data_identifier_selector,
                name: self.name,
                s3_job_definition: self.s3_job_definition,
                sampling_percentage: self.sampling_percentage.unwrap_or_default(),
                schedule_frequency: self.schedule_frequency,
                statistics: self.statistics,
                tags: self.tags,
                user_paused_details: self.user_paused_details,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClassificationJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClassificationJobOutput`](crate::output::DescribeClassificationJobOutput).
    pub fn builder() -> crate::output::describe_classification_job_output::Builder {
        crate::output::describe_classification_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeBucketsOutput {
    /// <p>An array of objects, one for each bucket that matches the filter criteria specified in the request.</p>
    #[doc(hidden)]
    pub buckets: std::option::Option<std::vec::Vec<crate::model::BucketMetadata>>,
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeBucketsOutput {
    /// <p>An array of objects, one for each bucket that matches the filter criteria specified in the request.</p>
    pub fn buckets(&self) -> std::option::Option<&[crate::model::BucketMetadata]> {
        self.buckets.as_deref()
    }
    /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeBucketsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeBucketsOutput`](crate::output::DescribeBucketsOutput).
pub mod describe_buckets_output {

    /// A builder for [`DescribeBucketsOutput`](crate::output::DescribeBucketsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) buckets: std::option::Option<std::vec::Vec<crate::model::BucketMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `buckets`.
        ///
        /// To override the contents of this collection use [`set_buckets`](Self::set_buckets).
        ///
        /// <p>An array of objects, one for each bucket that matches the filter criteria specified in the request.</p>
        pub fn buckets(mut self, input: crate::model::BucketMetadata) -> Self {
            let mut v = self.buckets.unwrap_or_default();
            v.push(input);
            self.buckets = Some(v);
            self
        }
        /// <p>An array of objects, one for each bucket that matches the filter criteria specified in the request.</p>
        pub fn set_buckets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BucketMetadata>>,
        ) -> Self {
            self.buckets = input;
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The string to use in a subsequent request to get the next page of results in a paginated response. This value is null if there are no additional pages.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeBucketsOutput`](crate::output::DescribeBucketsOutput).
        pub fn build(self) -> crate::output::DescribeBucketsOutput {
            crate::output::DescribeBucketsOutput {
                buckets: self.buckets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeBucketsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBucketsOutput`](crate::output::DescribeBucketsOutput).
    pub fn builder() -> crate::output::describe_buckets_output::Builder {
        crate::output::describe_buckets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteMemberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
pub mod delete_member_output {

    /// A builder for [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
        pub fn build(self) -> crate::output::DeleteMemberOutput {
            crate::output::DeleteMemberOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteMemberOutput {
    /// Creates a new builder-style object to manufacture [`DeleteMemberOutput`](crate::output::DeleteMemberOutput).
    pub fn builder() -> crate::output::delete_member_output::Builder {
        crate::output::delete_member_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been deleted. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DeleteInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been deleted. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
pub mod delete_invitations_output {

    /// A builder for [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>An array of objects, one for each account whose invitation hasn't been deleted. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>An array of objects, one for each account whose invitation hasn't been deleted. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
        pub fn build(self) -> crate::output::DeleteInvitationsOutput {
            crate::output::DeleteInvitationsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInvitationsOutput`](crate::output::DeleteInvitationsOutput).
    pub fn builder() -> crate::output::delete_invitations_output::Builder {
        crate::output::delete_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteFindingsFilterOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteFindingsFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteFindingsFilterOutput`](crate::output::DeleteFindingsFilterOutput).
pub mod delete_findings_filter_output {

    /// A builder for [`DeleteFindingsFilterOutput`](crate::output::DeleteFindingsFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteFindingsFilterOutput`](crate::output::DeleteFindingsFilterOutput).
        pub fn build(self) -> crate::output::DeleteFindingsFilterOutput {
            crate::output::DeleteFindingsFilterOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteFindingsFilterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteFindingsFilterOutput`](crate::output::DeleteFindingsFilterOutput).
    pub fn builder() -> crate::output::delete_findings_filter_output::Builder {
        crate::output::delete_findings_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteCustomDataIdentifierOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteCustomDataIdentifierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteCustomDataIdentifierOutput`](crate::output::DeleteCustomDataIdentifierOutput).
pub mod delete_custom_data_identifier_output {

    /// A builder for [`DeleteCustomDataIdentifierOutput`](crate::output::DeleteCustomDataIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCustomDataIdentifierOutput`](crate::output::DeleteCustomDataIdentifierOutput).
        pub fn build(self) -> crate::output::DeleteCustomDataIdentifierOutput {
            crate::output::DeleteCustomDataIdentifierOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteCustomDataIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomDataIdentifierOutput`](crate::output::DeleteCustomDataIdentifierOutput).
    pub fn builder() -> crate::output::delete_custom_data_identifier_output::Builder {
        crate::output::delete_custom_data_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAllowListOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAllowListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteAllowListOutput`](crate::output::DeleteAllowListOutput).
pub mod delete_allow_list_output {

    /// A builder for [`DeleteAllowListOutput`](crate::output::DeleteAllowListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAllowListOutput`](crate::output::DeleteAllowListOutput).
        pub fn build(self) -> crate::output::DeleteAllowListOutput {
            crate::output::DeleteAllowListOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteAllowListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAllowListOutput`](crate::output::DeleteAllowListOutput).
    pub fn builder() -> crate::output::delete_allow_list_output::Builder {
        crate::output::delete_allow_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeclineInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been declined. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl DeclineInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been declined. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeclineInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
pub mod decline_invitations_output {

    /// A builder for [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>An array of objects, one for each account whose invitation hasn't been declined. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>An array of objects, one for each account whose invitation hasn't been declined. Each object identifies the account and explains why the request hasn't been processed for that account.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
        pub fn build(self) -> crate::output::DeclineInvitationsOutput {
            crate::output::DeclineInvitationsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeclineInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`DeclineInvitationsOutput`](crate::output::DeclineInvitationsOutput).
    pub fn builder() -> crate::output::decline_invitations_output::Builder {
        crate::output::decline_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSampleFindingsOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateSampleFindingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
pub mod create_sample_findings_output {

    /// A builder for [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
        pub fn build(self) -> crate::output::CreateSampleFindingsOutput {
            crate::output::CreateSampleFindingsOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateSampleFindingsOutput {
    /// Creates a new builder-style object to manufacture [`CreateSampleFindingsOutput`](crate::output::CreateSampleFindingsOutput).
    pub fn builder() -> crate::output::create_sample_findings_output::Builder {
        crate::output::create_sample_findings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateMemberOutput {
    /// <p>The Amazon Resource Name (ARN) of the account that was associated with the administrator account.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateMemberOutput {
    /// <p>The Amazon Resource Name (ARN) of the account that was associated with the administrator account.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateMemberOutput`](crate::output::CreateMemberOutput).
pub mod create_member_output {

    /// A builder for [`CreateMemberOutput`](crate::output::CreateMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the account that was associated with the administrator account.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the account that was associated with the administrator account.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateMemberOutput`](crate::output::CreateMemberOutput).
        pub fn build(self) -> crate::output::CreateMemberOutput {
            crate::output::CreateMemberOutput {
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateMemberOutput {
    /// Creates a new builder-style object to manufacture [`CreateMemberOutput`](crate::output::CreateMemberOutput).
    pub fn builder() -> crate::output::create_member_output::Builder {
        crate::output::create_member_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been processed. Each object identifies the account and explains why the invitation hasn't been processed for the account.</p>
    #[doc(hidden)]
    pub unprocessed_accounts: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
    _request_id: Option<String>,
}
impl CreateInvitationsOutput {
    /// <p>An array of objects, one for each account whose invitation hasn't been processed. Each object identifies the account and explains why the invitation hasn't been processed for the account.</p>
    pub fn unprocessed_accounts(&self) -> std::option::Option<&[crate::model::UnprocessedAccount]> {
        self.unprocessed_accounts.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateInvitationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateInvitationsOutput`](crate::output::CreateInvitationsOutput).
pub mod create_invitations_output {

    /// A builder for [`CreateInvitationsOutput`](crate::output::CreateInvitationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) unprocessed_accounts:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `unprocessed_accounts`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_accounts`](Self::set_unprocessed_accounts).
        ///
        /// <p>An array of objects, one for each account whose invitation hasn't been processed. Each object identifies the account and explains why the invitation hasn't been processed for the account.</p>
        pub fn unprocessed_accounts(mut self, input: crate::model::UnprocessedAccount) -> Self {
            let mut v = self.unprocessed_accounts.unwrap_or_default();
            v.push(input);
            self.unprocessed_accounts = Some(v);
            self
        }
        /// <p>An array of objects, one for each account whose invitation hasn't been processed. Each object identifies the account and explains why the invitation hasn't been processed for the account.</p>
        pub fn set_unprocessed_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedAccount>>,
        ) -> Self {
            self.unprocessed_accounts = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateInvitationsOutput`](crate::output::CreateInvitationsOutput).
        pub fn build(self) -> crate::output::CreateInvitationsOutput {
            crate::output::CreateInvitationsOutput {
                unprocessed_accounts: self.unprocessed_accounts,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateInvitationsOutput {
    /// Creates a new builder-style object to manufacture [`CreateInvitationsOutput`](crate::output::CreateInvitationsOutput).
    pub fn builder() -> crate::output::create_invitations_output::Builder {
        crate::output::create_invitations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateFindingsFilterOutput {
    /// <p>The Amazon Resource Name (ARN) of the filter that was created.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the filter that was created.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateFindingsFilterOutput {
    /// <p>The Amazon Resource Name (ARN) of the filter that was created.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the filter that was created.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateFindingsFilterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateFindingsFilterOutput`](crate::output::CreateFindingsFilterOutput).
pub mod create_findings_filter_output {

    /// A builder for [`CreateFindingsFilterOutput`](crate::output::CreateFindingsFilterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the filter that was created.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the filter that was created.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The unique identifier for the filter that was created.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the filter that was created.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateFindingsFilterOutput`](crate::output::CreateFindingsFilterOutput).
        pub fn build(self) -> crate::output::CreateFindingsFilterOutput {
            crate::output::CreateFindingsFilterOutput {
                arn: self.arn,
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateFindingsFilterOutput {
    /// Creates a new builder-style object to manufacture [`CreateFindingsFilterOutput`](crate::output::CreateFindingsFilterOutput).
    pub fn builder() -> crate::output::create_findings_filter_output::Builder {
        crate::output::create_findings_filter_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomDataIdentifierOutput {
    /// <p>The unique identifier for the custom data identifier that was created.</p>
    #[doc(hidden)]
    pub custom_data_identifier_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCustomDataIdentifierOutput {
    /// <p>The unique identifier for the custom data identifier that was created.</p>
    pub fn custom_data_identifier_id(&self) -> std::option::Option<&str> {
        self.custom_data_identifier_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateCustomDataIdentifierOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateCustomDataIdentifierOutput`](crate::output::CreateCustomDataIdentifierOutput).
pub mod create_custom_data_identifier_output {

    /// A builder for [`CreateCustomDataIdentifierOutput`](crate::output::CreateCustomDataIdentifierOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_data_identifier_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier for the custom data identifier that was created.</p>
        pub fn custom_data_identifier_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.custom_data_identifier_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the custom data identifier that was created.</p>
        pub fn set_custom_data_identifier_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_data_identifier_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomDataIdentifierOutput`](crate::output::CreateCustomDataIdentifierOutput).
        pub fn build(self) -> crate::output::CreateCustomDataIdentifierOutput {
            crate::output::CreateCustomDataIdentifierOutput {
                custom_data_identifier_id: self.custom_data_identifier_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateCustomDataIdentifierOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomDataIdentifierOutput`](crate::output::CreateCustomDataIdentifierOutput).
    pub fn builder() -> crate::output::create_custom_data_identifier_output::Builder {
        crate::output::create_custom_data_identifier_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClassificationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    #[doc(hidden)]
    pub job_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateClassificationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the job.</p>
    pub fn job_arn(&self) -> std::option::Option<&str> {
        self.job_arn.as_deref()
    }
    /// <p>The unique identifier for the job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateClassificationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateClassificationJobOutput`](crate::output::CreateClassificationJobOutput).
pub mod create_classification_job_output {

    /// A builder for [`CreateClassificationJobOutput`](crate::output::CreateClassificationJobOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_arn: std::option::Option<std::string::String>,
        pub(crate) job_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        pub fn job_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the job.</p>
        pub fn set_job_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_arn = input;
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.job_id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the job.</p>
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.job_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateClassificationJobOutput`](crate::output::CreateClassificationJobOutput).
        pub fn build(self) -> crate::output::CreateClassificationJobOutput {
            crate::output::CreateClassificationJobOutput {
                job_arn: self.job_arn,
                job_id: self.job_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateClassificationJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateClassificationJobOutput`](crate::output::CreateClassificationJobOutput).
    pub fn builder() -> crate::output::create_classification_job_output::Builder {
        crate::output::create_classification_job_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the allow list.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAllowListOutput {
    /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The unique identifier for the allow list.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAllowListOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateAllowListOutput`](crate::output::CreateAllowListOutput).
pub mod create_allow_list_output {

    /// A builder for [`CreateAllowListOutput`](crate::output::CreateAllowListOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the allow list.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The unique identifier for the allow list.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAllowListOutput`](crate::output::CreateAllowListOutput).
        pub fn build(self) -> crate::output::CreateAllowListOutput {
            crate::output::CreateAllowListOutput {
                arn: self.arn,
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateAllowListOutput {
    /// Creates a new builder-style object to manufacture [`CreateAllowListOutput`](crate::output::CreateAllowListOutput).
    pub fn builder() -> crate::output::create_allow_list_output::Builder {
        crate::output::create_allow_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetCustomDataIdentifiersOutput {
    /// <p>An array of objects, one for each custom data identifier that matches the criteria specified in the request.</p>
    #[doc(hidden)]
    pub custom_data_identifiers:
        std::option::Option<std::vec::Vec<crate::model::BatchGetCustomDataIdentifierSummary>>,
    /// <p>An array of custom data identifier IDs, one for each custom data identifier that was specified in the request but doesn't correlate to an existing custom data identifier.</p>
    #[doc(hidden)]
    pub not_found_identifier_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchGetCustomDataIdentifiersOutput {
    /// <p>An array of objects, one for each custom data identifier that matches the criteria specified in the request.</p>
    pub fn custom_data_identifiers(
        &self,
    ) -> std::option::Option<&[crate::model::BatchGetCustomDataIdentifierSummary]> {
        self.custom_data_identifiers.as_deref()
    }
    /// <p>An array of custom data identifier IDs, one for each custom data identifier that was specified in the request but doesn't correlate to an existing custom data identifier.</p>
    pub fn not_found_identifier_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.not_found_identifier_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetCustomDataIdentifiersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchGetCustomDataIdentifiersOutput`](crate::output::BatchGetCustomDataIdentifiersOutput).
pub mod batch_get_custom_data_identifiers_output {

    /// A builder for [`BatchGetCustomDataIdentifiersOutput`](crate::output::BatchGetCustomDataIdentifiersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_data_identifiers:
            std::option::Option<std::vec::Vec<crate::model::BatchGetCustomDataIdentifierSummary>>,
        pub(crate) not_found_identifier_ids:
            std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `custom_data_identifiers`.
        ///
        /// To override the contents of this collection use [`set_custom_data_identifiers`](Self::set_custom_data_identifiers).
        ///
        /// <p>An array of objects, one for each custom data identifier that matches the criteria specified in the request.</p>
        pub fn custom_data_identifiers(
            mut self,
            input: crate::model::BatchGetCustomDataIdentifierSummary,
        ) -> Self {
            let mut v = self.custom_data_identifiers.unwrap_or_default();
            v.push(input);
            self.custom_data_identifiers = Some(v);
            self
        }
        /// <p>An array of objects, one for each custom data identifier that matches the criteria specified in the request.</p>
        pub fn set_custom_data_identifiers(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchGetCustomDataIdentifierSummary>,
            >,
        ) -> Self {
            self.custom_data_identifiers = input;
            self
        }
        /// Appends an item to `not_found_identifier_ids`.
        ///
        /// To override the contents of this collection use [`set_not_found_identifier_ids`](Self::set_not_found_identifier_ids).
        ///
        /// <p>An array of custom data identifier IDs, one for each custom data identifier that was specified in the request but doesn't correlate to an existing custom data identifier.</p>
        pub fn not_found_identifier_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.not_found_identifier_ids.unwrap_or_default();
            v.push(input.into());
            self.not_found_identifier_ids = Some(v);
            self
        }
        /// <p>An array of custom data identifier IDs, one for each custom data identifier that was specified in the request but doesn't correlate to an existing custom data identifier.</p>
        pub fn set_not_found_identifier_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.not_found_identifier_ids = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchGetCustomDataIdentifiersOutput`](crate::output::BatchGetCustomDataIdentifiersOutput).
        pub fn build(self) -> crate::output::BatchGetCustomDataIdentifiersOutput {
            crate::output::BatchGetCustomDataIdentifiersOutput {
                custom_data_identifiers: self.custom_data_identifiers,
                not_found_identifier_ids: self.not_found_identifier_ids,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchGetCustomDataIdentifiersOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetCustomDataIdentifiersOutput`](crate::output::BatchGetCustomDataIdentifiersOutput).
    pub fn builder() -> crate::output::batch_get_custom_data_identifiers_output::Builder {
        crate::output::batch_get_custom_data_identifiers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptInvitationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AcceptInvitationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
pub mod accept_invitation_output {

    /// A builder for [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
        pub fn build(self) -> crate::output::AcceptInvitationOutput {
            crate::output::AcceptInvitationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl AcceptInvitationOutput {
    /// Creates a new builder-style object to manufacture [`AcceptInvitationOutput`](crate::output::AcceptInvitationOutput).
    pub fn builder() -> crate::output::accept_invitation_output::Builder {
        crate::output::accept_invitation_output::Builder::default()
    }
}
