// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file.</p>
/// <p> <code>OutputConfig</code> is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With <code>OutputConfig</code> enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the <code>KMSKeyID</code> parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3.</p>
/// <p>Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html"> Managing AI services opt-out policy. </a> </p>
/// <p>For more information on data privacy, see the <a href="https://aws.amazon.com/compliance/data-privacy-faq/">Data Privacy FAQ</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputConfig {
    /// <p>The name of the bucket your output will go to.</p>
    #[doc(hidden)]
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".</p>
    #[doc(hidden)]
    pub s3_prefix: std::option::Option<std::string::String>,
}
impl OutputConfig {
    /// <p>The name of the bucket your output will go to.</p>
    pub fn s3_bucket(&self) -> std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".</p>
    pub fn s3_prefix(&self) -> std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
}
impl OutputConfig {
    /// Creates a new builder-style object to manufacture [`OutputConfig`](crate::model::OutputConfig).
    pub fn builder() -> crate::model::output_config::Builder {
        crate::model::output_config::Builder::default()
    }
}

/// See [`OutputConfig`](crate::model::OutputConfig).
pub mod output_config {

    /// A builder for [`OutputConfig`](crate::model::OutputConfig).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_bucket: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the bucket your output will go to.</p>
        pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket = Some(input.into());
            self
        }
        /// <p>The name of the bucket your output will go to.</p>
        pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_bucket = input;
            self
        }
        /// <p>The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        /// <p>The prefix of the object key that the output will be saved to. When not enabled, the prefix will be “textract_output".</p>
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// Consumes the builder and constructs a [`OutputConfig`](crate::model::OutputConfig).
        pub fn build(self) -> crate::model::OutputConfig {
            crate::model::OutputConfig {
                s3_bucket: self.s3_bucket,
                s3_prefix: self.s3_prefix,
            }
        }
    }
}

/// <p>The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NotificationChannel {
    /// <p>The Amazon SNS topic that Amazon Textract posts the completion status to.</p>
    #[doc(hidden)]
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. </p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl NotificationChannel {
    /// <p>The Amazon SNS topic that Amazon Textract posts the completion status to.</p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. </p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl NotificationChannel {
    /// Creates a new builder-style object to manufacture [`NotificationChannel`](crate::model::NotificationChannel).
    pub fn builder() -> crate::model::notification_channel::Builder {
        crate::model::notification_channel::Builder::default()
    }
}

/// See [`NotificationChannel`](crate::model::NotificationChannel).
pub mod notification_channel {

    /// A builder for [`NotificationChannel`](crate::model::NotificationChannel).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon SNS topic that Amazon Textract posts the completion status to.</p>
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_topic_arn = Some(input.into());
            self
        }
        /// <p>The Amazon SNS topic that Amazon Textract posts the completion status to.</p>
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_topic_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. </p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of an IAM role that gives Amazon Textract publishing permissions to the Amazon SNS topic. </p>
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`NotificationChannel`](crate::model::NotificationChannel).
        pub fn build(self) -> crate::model::NotificationChannel {
            crate::model::NotificationChannel {
                sns_topic_arn: self.sns_topic_arn,
                role_arn: self.role_arn,
            }
        }
    }
}

/// <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations.</p>
/// <p>The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentLocation {
    /// <p>The Amazon S3 bucket that contains the input document.</p>
    #[doc(hidden)]
    pub s3_object: std::option::Option<crate::model::S3Object>,
}
impl DocumentLocation {
    /// <p>The Amazon S3 bucket that contains the input document.</p>
    pub fn s3_object(&self) -> std::option::Option<&crate::model::S3Object> {
        self.s3_object.as_ref()
    }
}
impl DocumentLocation {
    /// Creates a new builder-style object to manufacture [`DocumentLocation`](crate::model::DocumentLocation).
    pub fn builder() -> crate::model::document_location::Builder {
        crate::model::document_location::Builder::default()
    }
}

/// See [`DocumentLocation`](crate::model::DocumentLocation).
pub mod document_location {

    /// A builder for [`DocumentLocation`](crate::model::DocumentLocation).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_object: std::option::Option<crate::model::S3Object>,
    }
    impl Builder {
        /// <p>The Amazon S3 bucket that contains the input document.</p>
        pub fn s3_object(mut self, input: crate::model::S3Object) -> Self {
            self.s3_object = Some(input);
            self
        }
        /// <p>The Amazon S3 bucket that contains the input document.</p>
        pub fn set_s3_object(mut self, input: std::option::Option<crate::model::S3Object>) -> Self {
            self.s3_object = input;
            self
        }
        /// Consumes the builder and constructs a [`DocumentLocation`](crate::model::DocumentLocation).
        pub fn build(self) -> crate::model::DocumentLocation {
            crate::model::DocumentLocation {
                s3_object: self.s3_object,
            }
        }
    }
}

/// <p>The S3 bucket name and file name that identifies the document.</p>
/// <p>The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations.</p>
/// <p>For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Object {
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl S3Object {
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl S3Object {
    /// Creates a new builder-style object to manufacture [`S3Object`](crate::model::S3Object).
    pub fn builder() -> crate::model::s3_object::Builder {
        crate::model::s3_object::Builder::default()
    }
}

/// See [`S3Object`](crate::model::S3Object).
pub mod s3_object {

    /// A builder for [`S3Object`](crate::model::S3Object).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bucket: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
        pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.bucket = Some(input.into());
            self
        }
        /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
        pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.bucket = input;
            self
        }
        /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`S3Object`](crate::model::S3Object).
        pub fn build(self) -> crate::model::S3Object {
            crate::model::S3Object {
                bucket: self.bucket,
                name: self.name,
                version: self.version,
            }
        }
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueriesConfig {
    /// <p></p>
    #[doc(hidden)]
    pub queries: std::option::Option<std::vec::Vec<crate::model::Query>>,
}
impl QueriesConfig {
    /// <p></p>
    pub fn queries(&self) -> std::option::Option<&[crate::model::Query]> {
        self.queries.as_deref()
    }
}
impl QueriesConfig {
    /// Creates a new builder-style object to manufacture [`QueriesConfig`](crate::model::QueriesConfig).
    pub fn builder() -> crate::model::queries_config::Builder {
        crate::model::queries_config::Builder::default()
    }
}

/// See [`QueriesConfig`](crate::model::QueriesConfig).
pub mod queries_config {

    /// A builder for [`QueriesConfig`](crate::model::QueriesConfig).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) queries: std::option::Option<std::vec::Vec<crate::model::Query>>,
    }
    impl Builder {
        /// Appends an item to `queries`.
        ///
        /// To override the contents of this collection use [`set_queries`](Self::set_queries).
        ///
        /// <p></p>
        pub fn queries(mut self, input: crate::model::Query) -> Self {
            let mut v = self.queries.unwrap_or_default();
            v.push(input);
            self.queries = Some(v);
            self
        }
        /// <p></p>
        pub fn set_queries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Query>>,
        ) -> Self {
            self.queries = input;
            self
        }
        /// Consumes the builder and constructs a [`QueriesConfig`](crate::model::QueriesConfig).
        pub fn build(self) -> crate::model::QueriesConfig {
            crate::model::QueriesConfig {
                queries: self.queries,
            }
        }
    }
}

/// <p>Each query contains the question you want to ask in the Text and the alias you want to associate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Query {
    /// <p>Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>Alias attached to the query, for ease of location.</p>
    #[doc(hidden)]
    pub alias: std::option::Option<std::string::String>,
    /// <p>Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.</p>
    /// <ul>
    /// <li> <p>If a page is not specified, it is set to <code>["1"]</code> by default.</p> </li>
    /// <li> <p>The following characters are allowed in the parameter's string: <code>0 1 2 3 4 5 6 7 8 9 - *</code>. No whitespace is allowed.</p> </li>
    /// <li> <p>When using * to indicate all pages, it must be the only element in the list.</p> </li>
    /// <li> <p>You can use page intervals, such as <code>[“1-3”, “1-1”, “4-*”]</code>. Where <code>*</code> indicates last page of document.</p> </li>
    /// <li> <p>Specified pages must be greater than 0 and less than or equal to the number of pages in the document.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub pages: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Query {
    /// <p>Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Alias attached to the query, for ease of location.</p>
    pub fn alias(&self) -> std::option::Option<&str> {
        self.alias.as_deref()
    }
    /// <p>Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.</p>
    /// <ul>
    /// <li> <p>If a page is not specified, it is set to <code>["1"]</code> by default.</p> </li>
    /// <li> <p>The following characters are allowed in the parameter's string: <code>0 1 2 3 4 5 6 7 8 9 - *</code>. No whitespace is allowed.</p> </li>
    /// <li> <p>When using * to indicate all pages, it must be the only element in the list.</p> </li>
    /// <li> <p>You can use page intervals, such as <code>[“1-3”, “1-1”, “4-*”]</code>. Where <code>*</code> indicates last page of document.</p> </li>
    /// <li> <p>Specified pages must be greater than 0 and less than or equal to the number of pages in the document.</p> </li>
    /// </ul>
    pub fn pages(&self) -> std::option::Option<&[std::string::String]> {
        self.pages.as_deref()
    }
}
impl Query {
    /// Creates a new builder-style object to manufacture [`Query`](crate::model::Query).
    pub fn builder() -> crate::model::query::Builder {
        crate::model::query::Builder::default()
    }
}

/// See [`Query`](crate::model::Query).
pub mod query {

    /// A builder for [`Query`](crate::model::Query).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) alias: std::option::Option<std::string::String>,
        pub(crate) pages: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"</p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>Question that Amazon Textract will apply to the document. An example would be "What is the customer's SSN?"</p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>Alias attached to the query, for ease of location.</p>
        pub fn alias(mut self, input: impl Into<std::string::String>) -> Self {
            self.alias = Some(input.into());
            self
        }
        /// <p>Alias attached to the query, for ease of location.</p>
        pub fn set_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.alias = input;
            self
        }
        /// Appends an item to `pages`.
        ///
        /// To override the contents of this collection use [`set_pages`](Self::set_pages).
        ///
        /// <p>Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.</p>
        /// <ul>
        /// <li> <p>If a page is not specified, it is set to <code>["1"]</code> by default.</p> </li>
        /// <li> <p>The following characters are allowed in the parameter's string: <code>0 1 2 3 4 5 6 7 8 9 - *</code>. No whitespace is allowed.</p> </li>
        /// <li> <p>When using * to indicate all pages, it must be the only element in the list.</p> </li>
        /// <li> <p>You can use page intervals, such as <code>[“1-3”, “1-1”, “4-*”]</code>. Where <code>*</code> indicates last page of document.</p> </li>
        /// <li> <p>Specified pages must be greater than 0 and less than or equal to the number of pages in the document.</p> </li>
        /// </ul>
        pub fn pages(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.pages.unwrap_or_default();
            v.push(input.into());
            self.pages = Some(v);
            self
        }
        /// <p>Pages is a parameter that the user inputs to specify which pages to apply a query to. The following is a list of rules for using this parameter.</p>
        /// <ul>
        /// <li> <p>If a page is not specified, it is set to <code>["1"]</code> by default.</p> </li>
        /// <li> <p>The following characters are allowed in the parameter's string: <code>0 1 2 3 4 5 6 7 8 9 - *</code>. No whitespace is allowed.</p> </li>
        /// <li> <p>When using * to indicate all pages, it must be the only element in the list.</p> </li>
        /// <li> <p>You can use page intervals, such as <code>[“1-3”, “1-1”, “4-*”]</code>. Where <code>*</code> indicates last page of document.</p> </li>
        /// <li> <p>Specified pages must be greater than 0 and less than or equal to the number of pages in the document.</p> </li>
        /// </ul>
        pub fn set_pages(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.pages = input;
            self
        }
        /// Consumes the builder and constructs a [`Query`](crate::model::Query).
        pub fn build(self) -> crate::model::Query {
            crate::model::Query {
                text: self.text,
                alias: self.alias,
                pages: self.pages,
            }
        }
    }
}

/// When writing a match expression against `FeatureType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let featuretype = unimplemented!();
/// match featuretype {
///     FeatureType::Forms => { /* ... */ },
///     FeatureType::Queries => { /* ... */ },
///     FeatureType::Signatures => { /* ... */ },
///     FeatureType::Tables => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `featuretype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FeatureType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FeatureType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FeatureType::NewFeature` is defined.
/// Specifically, when `featuretype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FeatureType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum FeatureType {
    #[allow(missing_docs)] // documentation missing in model
    Forms,
    #[allow(missing_docs)] // documentation missing in model
    Queries,
    #[allow(missing_docs)] // documentation missing in model
    Signatures,
    #[allow(missing_docs)] // documentation missing in model
    Tables,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for FeatureType {
    fn from(s: &str) -> Self {
        match s {
            "FORMS" => FeatureType::Forms,
            "QUERIES" => FeatureType::Queries,
            "SIGNATURES" => FeatureType::Signatures,
            "TABLES" => FeatureType::Tables,
            other => FeatureType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for FeatureType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(FeatureType::from(s))
    }
}
impl FeatureType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FeatureType::Forms => "FORMS",
            FeatureType::Queries => "QUERIES",
            FeatureType::Signatures => "SIGNATURES",
            FeatureType::Tables => "TABLES",
            FeatureType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FORMS", "QUERIES", "SIGNATURES", "TABLES"]
    }
}
impl AsRef<str> for FeatureType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>A warning about an issue that occurred during asynchronous text analysis (<code>StartDocumentAnalysis</code>) or asynchronous document text detection (<code>StartDocumentTextDetection</code>). </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Warning {
    /// <p>The error code for the warning.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>A list of the pages that the warning applies to.</p>
    #[doc(hidden)]
    pub pages: std::option::Option<std::vec::Vec<i32>>,
}
impl Warning {
    /// <p>The error code for the warning.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>A list of the pages that the warning applies to.</p>
    pub fn pages(&self) -> std::option::Option<&[i32]> {
        self.pages.as_deref()
    }
}
impl Warning {
    /// Creates a new builder-style object to manufacture [`Warning`](crate::model::Warning).
    pub fn builder() -> crate::model::warning::Builder {
        crate::model::warning::Builder::default()
    }
}

/// See [`Warning`](crate::model::Warning).
pub mod warning {

    /// A builder for [`Warning`](crate::model::Warning).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) error_code: std::option::Option<std::string::String>,
        pub(crate) pages: std::option::Option<std::vec::Vec<i32>>,
    }
    impl Builder {
        /// <p>The error code for the warning.</p>
        pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.error_code = Some(input.into());
            self
        }
        /// <p>The error code for the warning.</p>
        pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.error_code = input;
            self
        }
        /// Appends an item to `pages`.
        ///
        /// To override the contents of this collection use [`set_pages`](Self::set_pages).
        ///
        /// <p>A list of the pages that the warning applies to.</p>
        pub fn pages(mut self, input: i32) -> Self {
            let mut v = self.pages.unwrap_or_default();
            v.push(input);
            self.pages = Some(v);
            self
        }
        /// <p>A list of the pages that the warning applies to.</p>
        pub fn set_pages(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
            self.pages = input;
            self
        }
        /// Consumes the builder and constructs a [`Warning`](crate::model::Warning).
        pub fn build(self) -> crate::model::Warning {
            crate::model::Warning {
                error_code: self.error_code,
                pages: self.pages,
            }
        }
    }
}

/// <p>Contains information regarding DocumentGroups and UndetectedDocumentTypes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingSummary {
    /// <p>Contains an array of all DocumentGroup objects.</p>
    #[doc(hidden)]
    pub document_groups: std::option::Option<std::vec::Vec<crate::model::DocumentGroup>>,
    /// <p>UndetectedDocumentTypes.</p>
    #[doc(hidden)]
    pub undetected_document_types: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl LendingSummary {
    /// <p>Contains an array of all DocumentGroup objects.</p>
    pub fn document_groups(&self) -> std::option::Option<&[crate::model::DocumentGroup]> {
        self.document_groups.as_deref()
    }
    /// <p>UndetectedDocumentTypes.</p>
    pub fn undetected_document_types(&self) -> std::option::Option<&[std::string::String]> {
        self.undetected_document_types.as_deref()
    }
}
impl LendingSummary {
    /// Creates a new builder-style object to manufacture [`LendingSummary`](crate::model::LendingSummary).
    pub fn builder() -> crate::model::lending_summary::Builder {
        crate::model::lending_summary::Builder::default()
    }
}

/// See [`LendingSummary`](crate::model::LendingSummary).
pub mod lending_summary {

    /// A builder for [`LendingSummary`](crate::model::LendingSummary).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) document_groups: std::option::Option<std::vec::Vec<crate::model::DocumentGroup>>,
        pub(crate) undetected_document_types:
            std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// Appends an item to `document_groups`.
        ///
        /// To override the contents of this collection use [`set_document_groups`](Self::set_document_groups).
        ///
        /// <p>Contains an array of all DocumentGroup objects.</p>
        pub fn document_groups(mut self, input: crate::model::DocumentGroup) -> Self {
            let mut v = self.document_groups.unwrap_or_default();
            v.push(input);
            self.document_groups = Some(v);
            self
        }
        /// <p>Contains an array of all DocumentGroup objects.</p>
        pub fn set_document_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DocumentGroup>>,
        ) -> Self {
            self.document_groups = input;
            self
        }
        /// Appends an item to `undetected_document_types`.
        ///
        /// To override the contents of this collection use [`set_undetected_document_types`](Self::set_undetected_document_types).
        ///
        /// <p>UndetectedDocumentTypes.</p>
        pub fn undetected_document_types(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.undetected_document_types.unwrap_or_default();
            v.push(input.into());
            self.undetected_document_types = Some(v);
            self
        }
        /// <p>UndetectedDocumentTypes.</p>
        pub fn set_undetected_document_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.undetected_document_types = input;
            self
        }
        /// Consumes the builder and constructs a [`LendingSummary`](crate::model::LendingSummary).
        pub fn build(self) -> crate::model::LendingSummary {
            crate::model::LendingSummary {
                document_groups: self.document_groups,
                undetected_document_types: self.undetected_document_types,
            }
        }
    }
}

/// <p>Summary information about documents grouped by the same document type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentGroup {
    /// <p>The type of document that Amazon Textract has detected. See LINK for a list of all types returned by Textract.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>An array that contains information about the pages of a document, defined by logical boundary.</p>
    #[doc(hidden)]
    pub split_documents: std::option::Option<std::vec::Vec<crate::model::SplitDocument>>,
    /// <p>A list of the detected signatures found in a document group.</p>
    #[doc(hidden)]
    pub detected_signatures: std::option::Option<std::vec::Vec<crate::model::DetectedSignature>>,
    /// <p>A list of any expected signatures not found in a document group.</p>
    #[doc(hidden)]
    pub undetected_signatures:
        std::option::Option<std::vec::Vec<crate::model::UndetectedSignature>>,
}
impl DocumentGroup {
    /// <p>The type of document that Amazon Textract has detected. See LINK for a list of all types returned by Textract.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>An array that contains information about the pages of a document, defined by logical boundary.</p>
    pub fn split_documents(&self) -> std::option::Option<&[crate::model::SplitDocument]> {
        self.split_documents.as_deref()
    }
    /// <p>A list of the detected signatures found in a document group.</p>
    pub fn detected_signatures(&self) -> std::option::Option<&[crate::model::DetectedSignature]> {
        self.detected_signatures.as_deref()
    }
    /// <p>A list of any expected signatures not found in a document group.</p>
    pub fn undetected_signatures(
        &self,
    ) -> std::option::Option<&[crate::model::UndetectedSignature]> {
        self.undetected_signatures.as_deref()
    }
}
impl DocumentGroup {
    /// Creates a new builder-style object to manufacture [`DocumentGroup`](crate::model::DocumentGroup).
    pub fn builder() -> crate::model::document_group::Builder {
        crate::model::document_group::Builder::default()
    }
}

/// See [`DocumentGroup`](crate::model::DocumentGroup).
pub mod document_group {

    /// A builder for [`DocumentGroup`](crate::model::DocumentGroup).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<std::string::String>,
        pub(crate) split_documents: std::option::Option<std::vec::Vec<crate::model::SplitDocument>>,
        pub(crate) detected_signatures:
            std::option::Option<std::vec::Vec<crate::model::DetectedSignature>>,
        pub(crate) undetected_signatures:
            std::option::Option<std::vec::Vec<crate::model::UndetectedSignature>>,
    }
    impl Builder {
        /// <p>The type of document that Amazon Textract has detected. See LINK for a list of all types returned by Textract.</p>
        pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
            self.r#type = Some(input.into());
            self
        }
        /// <p>The type of document that Amazon Textract has detected. See LINK for a list of all types returned by Textract.</p>
        pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.r#type = input;
            self
        }
        /// Appends an item to `split_documents`.
        ///
        /// To override the contents of this collection use [`set_split_documents`](Self::set_split_documents).
        ///
        /// <p>An array that contains information about the pages of a document, defined by logical boundary.</p>
        pub fn split_documents(mut self, input: crate::model::SplitDocument) -> Self {
            let mut v = self.split_documents.unwrap_or_default();
            v.push(input);
            self.split_documents = Some(v);
            self
        }
        /// <p>An array that contains information about the pages of a document, defined by logical boundary.</p>
        pub fn set_split_documents(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SplitDocument>>,
        ) -> Self {
            self.split_documents = input;
            self
        }
        /// Appends an item to `detected_signatures`.
        ///
        /// To override the contents of this collection use [`set_detected_signatures`](Self::set_detected_signatures).
        ///
        /// <p>A list of the detected signatures found in a document group.</p>
        pub fn detected_signatures(mut self, input: crate::model::DetectedSignature) -> Self {
            let mut v = self.detected_signatures.unwrap_or_default();
            v.push(input);
            self.detected_signatures = Some(v);
            self
        }
        /// <p>A list of the detected signatures found in a document group.</p>
        pub fn set_detected_signatures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DetectedSignature>>,
        ) -> Self {
            self.detected_signatures = input;
            self
        }
        /// Appends an item to `undetected_signatures`.
        ///
        /// To override the contents of this collection use [`set_undetected_signatures`](Self::set_undetected_signatures).
        ///
        /// <p>A list of any expected signatures not found in a document group.</p>
        pub fn undetected_signatures(mut self, input: crate::model::UndetectedSignature) -> Self {
            let mut v = self.undetected_signatures.unwrap_or_default();
            v.push(input);
            self.undetected_signatures = Some(v);
            self
        }
        /// <p>A list of any expected signatures not found in a document group.</p>
        pub fn set_undetected_signatures(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UndetectedSignature>>,
        ) -> Self {
            self.undetected_signatures = input;
            self
        }
        /// Consumes the builder and constructs a [`DocumentGroup`](crate::model::DocumentGroup).
        pub fn build(self) -> crate::model::DocumentGroup {
            crate::model::DocumentGroup {
                r#type: self.r#type,
                split_documents: self.split_documents,
                detected_signatures: self.detected_signatures,
                undetected_signatures: self.undetected_signatures,
            }
        }
    }
}

/// <p>A structure containing information about an undetected signature on a page where it was expected but not found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UndetectedSignature {
    /// <p>The page where a signature was expected but not found.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
}
impl UndetectedSignature {
    /// <p>The page where a signature was expected but not found.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
}
impl UndetectedSignature {
    /// Creates a new builder-style object to manufacture [`UndetectedSignature`](crate::model::UndetectedSignature).
    pub fn builder() -> crate::model::undetected_signature::Builder {
        crate::model::undetected_signature::Builder::default()
    }
}

/// See [`UndetectedSignature`](crate::model::UndetectedSignature).
pub mod undetected_signature {

    /// A builder for [`UndetectedSignature`](crate::model::UndetectedSignature).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) page: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The page where a signature was expected but not found.</p>
        pub fn page(mut self, input: i32) -> Self {
            self.page = Some(input);
            self
        }
        /// <p>The page where a signature was expected but not found.</p>
        pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
            self.page = input;
            self
        }
        /// Consumes the builder and constructs a [`UndetectedSignature`](crate::model::UndetectedSignature).
        pub fn build(self) -> crate::model::UndetectedSignature {
            crate::model::UndetectedSignature { page: self.page }
        }
    }
}

/// <p>A structure that holds information regarding a detected signature on a page.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectedSignature {
    /// <p>The page a detected signature was found on.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
}
impl DetectedSignature {
    /// <p>The page a detected signature was found on.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
}
impl DetectedSignature {
    /// Creates a new builder-style object to manufacture [`DetectedSignature`](crate::model::DetectedSignature).
    pub fn builder() -> crate::model::detected_signature::Builder {
        crate::model::detected_signature::Builder::default()
    }
}

/// See [`DetectedSignature`](crate::model::DetectedSignature).
pub mod detected_signature {

    /// A builder for [`DetectedSignature`](crate::model::DetectedSignature).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) page: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The page a detected signature was found on.</p>
        pub fn page(mut self, input: i32) -> Self {
            self.page = Some(input);
            self
        }
        /// <p>The page a detected signature was found on.</p>
        pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
            self.page = input;
            self
        }
        /// Consumes the builder and constructs a [`DetectedSignature`](crate::model::DetectedSignature).
        pub fn build(self) -> crate::model::DetectedSignature {
            crate::model::DetectedSignature { page: self.page }
        }
    }
}

/// <p>Contains information about the pages of a document, defined by logical boundary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SplitDocument {
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    #[doc(hidden)]
    pub index: std::option::Option<i32>,
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    #[doc(hidden)]
    pub pages: std::option::Option<std::vec::Vec<i32>>,
}
impl SplitDocument {
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    pub fn index(&self) -> std::option::Option<i32> {
        self.index
    }
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    pub fn pages(&self) -> std::option::Option<&[i32]> {
        self.pages.as_deref()
    }
}
impl SplitDocument {
    /// Creates a new builder-style object to manufacture [`SplitDocument`](crate::model::SplitDocument).
    pub fn builder() -> crate::model::split_document::Builder {
        crate::model::split_document::Builder::default()
    }
}

/// See [`SplitDocument`](crate::model::SplitDocument).
pub mod split_document {

    /// A builder for [`SplitDocument`](crate::model::SplitDocument).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) index: std::option::Option<i32>,
        pub(crate) pages: std::option::Option<std::vec::Vec<i32>>,
    }
    impl Builder {
        /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
        pub fn index(mut self, input: i32) -> Self {
            self.index = Some(input);
            self
        }
        /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
        pub fn set_index(mut self, input: std::option::Option<i32>) -> Self {
            self.index = input;
            self
        }
        /// Appends an item to `pages`.
        ///
        /// To override the contents of this collection use [`set_pages`](Self::set_pages).
        ///
        /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
        pub fn pages(mut self, input: i32) -> Self {
            let mut v = self.pages.unwrap_or_default();
            v.push(input);
            self.pages = Some(v);
            self
        }
        /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
        pub fn set_pages(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
            self.pages = input;
            self
        }
        /// Consumes the builder and constructs a [`SplitDocument`](crate::model::SplitDocument).
        pub fn build(self) -> crate::model::SplitDocument {
            crate::model::SplitDocument {
                index: self.index,
                pages: self.pages,
            }
        }
    }
}

/// When writing a match expression against `JobStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let jobstatus = unimplemented!();
/// match jobstatus {
///     JobStatus::Failed => { /* ... */ },
///     JobStatus::InProgress => { /* ... */ },
///     JobStatus::PartialSuccess => { /* ... */ },
///     JobStatus::Succeeded => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `jobstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `JobStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `JobStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `JobStatus::NewFeature` is defined.
/// Specifically, when `jobstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `JobStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum JobStatus {
    #[allow(missing_docs)] // documentation missing in model
    Failed,
    #[allow(missing_docs)] // documentation missing in model
    InProgress,
    #[allow(missing_docs)] // documentation missing in model
    PartialSuccess,
    #[allow(missing_docs)] // documentation missing in model
    Succeeded,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for JobStatus {
    fn from(s: &str) -> Self {
        match s {
            "FAILED" => JobStatus::Failed,
            "IN_PROGRESS" => JobStatus::InProgress,
            "PARTIAL_SUCCESS" => JobStatus::PartialSuccess,
            "SUCCEEDED" => JobStatus::Succeeded,
            other => JobStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for JobStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(JobStatus::from(s))
    }
}
impl JobStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            JobStatus::Failed => "FAILED",
            JobStatus::InProgress => "IN_PROGRESS",
            JobStatus::PartialSuccess => "PARTIAL_SUCCESS",
            JobStatus::Succeeded => "SUCCEEDED",
            JobStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["FAILED", "IN_PROGRESS", "PARTIAL_SUCCESS", "SUCCEEDED"]
    }
}
impl AsRef<str> for JobStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Information about the input document.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DocumentMetadata {
    /// <p>The number of pages that are detected in the document.</p>
    #[doc(hidden)]
    pub pages: std::option::Option<i32>,
}
impl DocumentMetadata {
    /// <p>The number of pages that are detected in the document.</p>
    pub fn pages(&self) -> std::option::Option<i32> {
        self.pages
    }
}
impl DocumentMetadata {
    /// Creates a new builder-style object to manufacture [`DocumentMetadata`](crate::model::DocumentMetadata).
    pub fn builder() -> crate::model::document_metadata::Builder {
        crate::model::document_metadata::Builder::default()
    }
}

/// See [`DocumentMetadata`](crate::model::DocumentMetadata).
pub mod document_metadata {

    /// A builder for [`DocumentMetadata`](crate::model::DocumentMetadata).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pages: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The number of pages that are detected in the document.</p>
        pub fn pages(mut self, input: i32) -> Self {
            self.pages = Some(input);
            self
        }
        /// <p>The number of pages that are detected in the document.</p>
        pub fn set_pages(mut self, input: std::option::Option<i32>) -> Self {
            self.pages = input;
            self
        }
        /// Consumes the builder and constructs a [`DocumentMetadata`](crate::model::DocumentMetadata).
        pub fn build(self) -> crate::model::DocumentMetadata {
            crate::model::DocumentMetadata { pages: self.pages }
        }
    }
}

/// <p>Contains the detections for each page analyzed through the Analyze Lending API.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
    /// <p>The classifier result for a given page.</p>
    #[doc(hidden)]
    pub page_classification: std::option::Option<crate::model::PageClassification>,
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    #[doc(hidden)]
    pub extractions: std::option::Option<std::vec::Vec<crate::model::Extraction>>,
}
impl LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
    /// <p>The classifier result for a given page.</p>
    pub fn page_classification(&self) -> std::option::Option<&crate::model::PageClassification> {
        self.page_classification.as_ref()
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn extractions(&self) -> std::option::Option<&[crate::model::Extraction]> {
        self.extractions.as_deref()
    }
}
impl LendingResult {
    /// Creates a new builder-style object to manufacture [`LendingResult`](crate::model::LendingResult).
    pub fn builder() -> crate::model::lending_result::Builder {
        crate::model::lending_result::Builder::default()
    }
}

/// See [`LendingResult`](crate::model::LendingResult).
pub mod lending_result {

    /// A builder for [`LendingResult`](crate::model::LendingResult).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) page: std::option::Option<i32>,
        pub(crate) page_classification: std::option::Option<crate::model::PageClassification>,
        pub(crate) extractions: std::option::Option<std::vec::Vec<crate::model::Extraction>>,
    }
    impl Builder {
        /// <p>The page number for a page, with regard to whole submission.</p>
        pub fn page(mut self, input: i32) -> Self {
            self.page = Some(input);
            self
        }
        /// <p>The page number for a page, with regard to whole submission.</p>
        pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
            self.page = input;
            self
        }
        /// <p>The classifier result for a given page.</p>
        pub fn page_classification(mut self, input: crate::model::PageClassification) -> Self {
            self.page_classification = Some(input);
            self
        }
        /// <p>The classifier result for a given page.</p>
        pub fn set_page_classification(
            mut self,
            input: std::option::Option<crate::model::PageClassification>,
        ) -> Self {
            self.page_classification = input;
            self
        }
        /// Appends an item to `extractions`.
        ///
        /// To override the contents of this collection use [`set_extractions`](Self::set_extractions).
        ///
        /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
        pub fn extractions(mut self, input: crate::model::Extraction) -> Self {
            let mut v = self.extractions.unwrap_or_default();
            v.push(input);
            self.extractions = Some(v);
            self
        }
        /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
        pub fn set_extractions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Extraction>>,
        ) -> Self {
            self.extractions = input;
            self
        }
        /// Consumes the builder and constructs a [`LendingResult`](crate::model::LendingResult).
        pub fn build(self) -> crate::model::LendingResult {
            crate::model::LendingResult {
                page: self.page,
                page_classification: self.page_classification,
                extractions: self.extractions,
            }
        }
    }
}

/// <p>Contains information extracted by an analysis operation after using StartLendingAnalysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Extraction {
    /// <p>Holds the structured data returned by AnalyzeDocument for lending documents.</p>
    #[doc(hidden)]
    pub lending_document: std::option::Option<crate::model::LendingDocument>,
    /// <p>The structure holding all the information returned by AnalyzeExpense</p>
    #[doc(hidden)]
    pub expense_document: std::option::Option<crate::model::ExpenseDocument>,
    /// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
    #[doc(hidden)]
    pub identity_document: std::option::Option<crate::model::IdentityDocument>,
}
impl Extraction {
    /// <p>Holds the structured data returned by AnalyzeDocument for lending documents.</p>
    pub fn lending_document(&self) -> std::option::Option<&crate::model::LendingDocument> {
        self.lending_document.as_ref()
    }
    /// <p>The structure holding all the information returned by AnalyzeExpense</p>
    pub fn expense_document(&self) -> std::option::Option<&crate::model::ExpenseDocument> {
        self.expense_document.as_ref()
    }
    /// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
    pub fn identity_document(&self) -> std::option::Option<&crate::model::IdentityDocument> {
        self.identity_document.as_ref()
    }
}
impl Extraction {
    /// Creates a new builder-style object to manufacture [`Extraction`](crate::model::Extraction).
    pub fn builder() -> crate::model::extraction::Builder {
        crate::model::extraction::Builder::default()
    }
}

/// See [`Extraction`](crate::model::Extraction).
pub mod extraction {

    /// A builder for [`Extraction`](crate::model::Extraction).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lending_document: std::option::Option<crate::model::LendingDocument>,
        pub(crate) expense_document: std::option::Option<crate::model::ExpenseDocument>,
        pub(crate) identity_document: std::option::Option<crate::model::IdentityDocument>,
    }
    impl Builder {
        /// <p>Holds the structured data returned by AnalyzeDocument for lending documents.</p>
        pub fn lending_document(mut self, input: crate::model::LendingDocument) -> Self {
            self.lending_document = Some(input);
            self
        }
        /// <p>Holds the structured data returned by AnalyzeDocument for lending documents.</p>
        pub fn set_lending_document(
            mut self,
            input: std::option::Option<crate::model::LendingDocument>,
        ) -> Self {
            self.lending_document = input;
            self
        }
        /// <p>The structure holding all the information returned by AnalyzeExpense</p>
        pub fn expense_document(mut self, input: crate::model::ExpenseDocument) -> Self {
            self.expense_document = Some(input);
            self
        }
        /// <p>The structure holding all the information returned by AnalyzeExpense</p>
        pub fn set_expense_document(
            mut self,
            input: std::option::Option<crate::model::ExpenseDocument>,
        ) -> Self {
            self.expense_document = input;
            self
        }
        /// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
        pub fn identity_document(mut self, input: crate::model::IdentityDocument) -> Self {
            self.identity_document = Some(input);
            self
        }
        /// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
        pub fn set_identity_document(
            mut self,
            input: std::option::Option<crate::model::IdentityDocument>,
        ) -> Self {
            self.identity_document = input;
            self
        }
        /// Consumes the builder and constructs a [`Extraction`](crate::model::Extraction).
        pub fn build(self) -> crate::model::Extraction {
            crate::model::Extraction {
                lending_document: self.lending_document,
                expense_document: self.expense_document,
                identity_document: self.identity_document,
            }
        }
    }
}

/// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IdentityDocument {
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    #[doc(hidden)]
    pub document_index: std::option::Option<i32>,
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    #[doc(hidden)]
    pub identity_document_fields:
        std::option::Option<std::vec::Vec<crate::model::IdentityDocumentField>>,
    /// <p>Individual word recognition, as returned by document detection.</p>
    #[doc(hidden)]
    pub blocks: std::option::Option<std::vec::Vec<crate::model::Block>>,
}
impl IdentityDocument {
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    pub fn document_index(&self) -> std::option::Option<i32> {
        self.document_index
    }
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    pub fn identity_document_fields(
        &self,
    ) -> std::option::Option<&[crate::model::IdentityDocumentField]> {
        self.identity_document_fields.as_deref()
    }
    /// <p>Individual word recognition, as returned by document detection.</p>
    pub fn blocks(&self) -> std::option::Option<&[crate::model::Block]> {
        self.blocks.as_deref()
    }
}
impl IdentityDocument {
    /// Creates a new builder-style object to manufacture [`IdentityDocument`](crate::model::IdentityDocument).
    pub fn builder() -> crate::model::identity_document::Builder {
        crate::model::identity_document::Builder::default()
    }
}

/// See [`IdentityDocument`](crate::model::IdentityDocument).
pub mod identity_document {

    /// A builder for [`IdentityDocument`](crate::model::IdentityDocument).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) document_index: std::option::Option<i32>,
        pub(crate) identity_document_fields:
            std::option::Option<std::vec::Vec<crate::model::IdentityDocumentField>>,
        pub(crate) blocks: std::option::Option<std::vec::Vec<crate::model::Block>>,
    }
    impl Builder {
        /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
        pub fn document_index(mut self, input: i32) -> Self {
            self.document_index = Some(input);
            self
        }
        /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
        pub fn set_document_index(mut self, input: std::option::Option<i32>) -> Self {
            self.document_index = input;
            self
        }
        /// Appends an item to `identity_document_fields`.
        ///
        /// To override the contents of this collection use [`set_identity_document_fields`](Self::set_identity_document_fields).
        ///
        /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
        pub fn identity_document_fields(
            mut self,
            input: crate::model::IdentityDocumentField,
        ) -> Self {
            let mut v = self.identity_document_fields.unwrap_or_default();
            v.push(input);
            self.identity_document_fields = Some(v);
            self
        }
        /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
        pub fn set_identity_document_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IdentityDocumentField>>,
        ) -> Self {
            self.identity_document_fields = input;
            self
        }
        /// Appends an item to `blocks`.
        ///
        /// To override the contents of this collection use [`set_blocks`](Self::set_blocks).
        ///
        /// <p>Individual word recognition, as returned by document detection.</p>
        pub fn blocks(mut self, input: crate::model::Block) -> Self {
            let mut v = self.blocks.unwrap_or_default();
            v.push(input);
            self.blocks = Some(v);
            self
        }
        /// <p>Individual word recognition, as returned by document detection.</p>
        pub fn set_blocks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Block>>,
        ) -> Self {
            self.blocks = input;
            self
        }
        /// Consumes the builder and constructs a [`IdentityDocument`](crate::model::IdentityDocument).
        pub fn build(self) -> crate::model::IdentityDocument {
            crate::model::IdentityDocument {
                document_index: self.document_index,
                identity_document_fields: self.identity_document_fields,
                blocks: self.blocks,
            }
        }
    }
}

/// <p>A <code>Block</code> represents items that are recognized in a document within a group of pixels close to each other. The information returned in a <code>Block</code> object depends on the type of operation. In text detection for documents (for example <code>DetectDocumentText</code>), you get information about the detected words and lines of text. In text analysis (for example <code>AnalyzeDocument</code>), you can also get information about the fields, tables, and selection elements that are detected in the document.</p>
/// <p>An array of <code>Block</code> objects is returned by both synchronous and asynchronous operations. In synchronous operations, such as <code>DetectDocumentText</code>, the array of <code>Block</code> objects is the entire set of results. In asynchronous operations, such as <code>GetDocumentAnalysis</code>, the array is returned over one or more responses.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/how-it-works.html">How Amazon Textract Works</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Block {
    /// <p>The type of text item that's recognized. In operations for text detection, the following types are returned:</p>
    /// <ul>
    /// <li> <p> <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects that are detected on a document page.</p> </li>
    /// <li> <p> <i>WORD</i> - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
    /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
    /// </ul>
    /// <p>In text analysis operations, the following types are returned:</p>
    /// <ul>
    /// <li> <p> <i>PAGE</i> - Contains a list of child <code>Block</code> objects that are detected on a document page.</p> </li>
    /// <li> <p> <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code> objects for linked text that's detected on a document page. Use the <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY <code>Block</code> object or a VALUE <code>Block</code> object. </p> </li>
    /// <li> <p> <i>WORD</i> - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
    /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
    /// <li> <p> <i>TABLE</i> - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each. </p> </li>
    /// <li> <p> <i>CELL</i> - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.</p> </li>
    /// <li> <p> <i>SELECTION_ELEMENT</i> - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of <code>SelectionStatus</code> to determine the status of the selection element.</p> </li>
    /// <li> <p> <i>SIGNATURE</i> - The location and confidene score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.</p> </li>
    /// <li> <p> <i>QUERY</i> - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.</p> </li>
    /// <li> <p> <i>QUERY_RESULT</i> - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub block_type: std::option::Option<crate::model::BlockType>,
    /// <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
    /// <p>The word or line of text that's recognized by Amazon Textract. </p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>
    #[doc(hidden)]
    pub text_type: std::option::Option<crate::model::TextType>,
    /// <p>The row in which a table cell is located. The first row position is 1. <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    #[doc(hidden)]
    pub row_index: std::option::Option<i32>,
    /// <p>The column in which a table cell appears. The first column position is 1. <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    #[doc(hidden)]
    pub column_index: std::option::Option<i32>,
    /// <p>The number of rows that a table cell spans. Currently this value is always 1, even if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    #[doc(hidden)]
    pub row_span: std::option::Option<i32>,
    /// <p>The number of columns that a table cell spans. Currently this value is always 1, even if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>
    #[doc(hidden)]
    pub column_span: std::option::Option<i32>,
    /// <p>The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information. </p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::model::Geometry>,
    /// <p>The identifier for the recognized text. The identifier is only unique for a single operation. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks. The list size can be the following:</p>
    /// <ul>
    /// <li> <p>0 - The block has no child blocks.</p> </li>
    /// <li> <p>1 - The block has child blocks.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub relationships: std::option::Option<std::vec::Vec<crate::model::Relationship>>,
    /// <p>The type of entity. The following can be returned:</p>
    /// <ul>
    /// <li> <p> <i>KEY</i> - An identifier for a field on the document.</p> </li>
    /// <li> <p> <i>VALUE</i> - The field text.</p> </li>
    /// </ul>
    /// <p> <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    #[doc(hidden)]
    pub entity_types: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
    /// <p>The selection status of a selection element, such as an option button or check box. </p>
    #[doc(hidden)]
    pub selection_status: std::option::Option<crate::model::SelectionStatus>,
    /// <p>The page on which a block was detected. <code>Page</code> is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of <code>Page</code> is always 1. Synchronous operations operations will also return a <code>Page</code> value of 1 because every input document is considered to be a single-page document.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
    /// <p></p>
    #[doc(hidden)]
    pub query: std::option::Option<crate::model::Query>,
}
impl Block {
    /// <p>The type of text item that's recognized. In operations for text detection, the following types are returned:</p>
    /// <ul>
    /// <li> <p> <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects that are detected on a document page.</p> </li>
    /// <li> <p> <i>WORD</i> - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
    /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
    /// </ul>
    /// <p>In text analysis operations, the following types are returned:</p>
    /// <ul>
    /// <li> <p> <i>PAGE</i> - Contains a list of child <code>Block</code> objects that are detected on a document page.</p> </li>
    /// <li> <p> <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code> objects for linked text that's detected on a document page. Use the <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY <code>Block</code> object or a VALUE <code>Block</code> object. </p> </li>
    /// <li> <p> <i>WORD</i> - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
    /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
    /// <li> <p> <i>TABLE</i> - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each. </p> </li>
    /// <li> <p> <i>CELL</i> - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.</p> </li>
    /// <li> <p> <i>SELECTION_ELEMENT</i> - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of <code>SelectionStatus</code> to determine the status of the selection element.</p> </li>
    /// <li> <p> <i>SIGNATURE</i> - The location and confidene score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.</p> </li>
    /// <li> <p> <i>QUERY</i> - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.</p> </li>
    /// <li> <p> <i>QUERY_RESULT</i> - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.</p> </li>
    /// </ul>
    pub fn block_type(&self) -> std::option::Option<&crate::model::BlockType> {
        self.block_type.as_ref()
    }
    /// <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
    /// <p>The word or line of text that's recognized by Amazon Textract. </p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>
    pub fn text_type(&self) -> std::option::Option<&crate::model::TextType> {
        self.text_type.as_ref()
    }
    /// <p>The row in which a table cell is located. The first row position is 1. <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    pub fn row_index(&self) -> std::option::Option<i32> {
        self.row_index
    }
    /// <p>The column in which a table cell appears. The first column position is 1. <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    pub fn column_index(&self) -> std::option::Option<i32> {
        self.column_index
    }
    /// <p>The number of rows that a table cell spans. Currently this value is always 1, even if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    pub fn row_span(&self) -> std::option::Option<i32> {
        self.row_span
    }
    /// <p>The number of columns that a table cell spans. Currently this value is always 1, even if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>
    pub fn column_span(&self) -> std::option::Option<i32> {
        self.column_span
    }
    /// <p>The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information. </p>
    pub fn geometry(&self) -> std::option::Option<&crate::model::Geometry> {
        self.geometry.as_ref()
    }
    /// <p>The identifier for the recognized text. The identifier is only unique for a single operation. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks. The list size can be the following:</p>
    /// <ul>
    /// <li> <p>0 - The block has no child blocks.</p> </li>
    /// <li> <p>1 - The block has child blocks.</p> </li>
    /// </ul>
    pub fn relationships(&self) -> std::option::Option<&[crate::model::Relationship]> {
        self.relationships.as_deref()
    }
    /// <p>The type of entity. The following can be returned:</p>
    /// <ul>
    /// <li> <p> <i>KEY</i> - An identifier for a field on the document.</p> </li>
    /// <li> <p> <i>VALUE</i> - The field text.</p> </li>
    /// </ul>
    /// <p> <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
    pub fn entity_types(&self) -> std::option::Option<&[crate::model::EntityType]> {
        self.entity_types.as_deref()
    }
    /// <p>The selection status of a selection element, such as an option button or check box. </p>
    pub fn selection_status(&self) -> std::option::Option<&crate::model::SelectionStatus> {
        self.selection_status.as_ref()
    }
    /// <p>The page on which a block was detected. <code>Page</code> is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of <code>Page</code> is always 1. Synchronous operations operations will also return a <code>Page</code> value of 1 because every input document is considered to be a single-page document.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
    /// <p></p>
    pub fn query(&self) -> std::option::Option<&crate::model::Query> {
        self.query.as_ref()
    }
}
impl Block {
    /// Creates a new builder-style object to manufacture [`Block`](crate::model::Block).
    pub fn builder() -> crate::model::block::Builder {
        crate::model::block::Builder::default()
    }
}

/// See [`Block`](crate::model::Block).
pub mod block {

    /// A builder for [`Block`](crate::model::Block).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) block_type: std::option::Option<crate::model::BlockType>,
        pub(crate) confidence: std::option::Option<f32>,
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) text_type: std::option::Option<crate::model::TextType>,
        pub(crate) row_index: std::option::Option<i32>,
        pub(crate) column_index: std::option::Option<i32>,
        pub(crate) row_span: std::option::Option<i32>,
        pub(crate) column_span: std::option::Option<i32>,
        pub(crate) geometry: std::option::Option<crate::model::Geometry>,
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) relationships: std::option::Option<std::vec::Vec<crate::model::Relationship>>,
        pub(crate) entity_types: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
        pub(crate) selection_status: std::option::Option<crate::model::SelectionStatus>,
        pub(crate) page: std::option::Option<i32>,
        pub(crate) query: std::option::Option<crate::model::Query>,
    }
    impl Builder {
        /// <p>The type of text item that's recognized. In operations for text detection, the following types are returned:</p>
        /// <ul>
        /// <li> <p> <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects that are detected on a document page.</p> </li>
        /// <li> <p> <i>WORD</i> - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
        /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
        /// </ul>
        /// <p>In text analysis operations, the following types are returned:</p>
        /// <ul>
        /// <li> <p> <i>PAGE</i> - Contains a list of child <code>Block</code> objects that are detected on a document page.</p> </li>
        /// <li> <p> <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code> objects for linked text that's detected on a document page. Use the <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY <code>Block</code> object or a VALUE <code>Block</code> object. </p> </li>
        /// <li> <p> <i>WORD</i> - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
        /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
        /// <li> <p> <i>TABLE</i> - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each. </p> </li>
        /// <li> <p> <i>CELL</i> - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.</p> </li>
        /// <li> <p> <i>SELECTION_ELEMENT</i> - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of <code>SelectionStatus</code> to determine the status of the selection element.</p> </li>
        /// <li> <p> <i>SIGNATURE</i> - The location and confidene score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.</p> </li>
        /// <li> <p> <i>QUERY</i> - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.</p> </li>
        /// <li> <p> <i>QUERY_RESULT</i> - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.</p> </li>
        /// </ul>
        pub fn block_type(mut self, input: crate::model::BlockType) -> Self {
            self.block_type = Some(input);
            self
        }
        /// <p>The type of text item that's recognized. In operations for text detection, the following types are returned:</p>
        /// <ul>
        /// <li> <p> <i>PAGE</i> - Contains a list of the LINE <code>Block</code> objects that are detected on a document page.</p> </li>
        /// <li> <p> <i>WORD</i> - A word detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
        /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
        /// </ul>
        /// <p>In text analysis operations, the following types are returned:</p>
        /// <ul>
        /// <li> <p> <i>PAGE</i> - Contains a list of child <code>Block</code> objects that are detected on a document page.</p> </li>
        /// <li> <p> <i>KEY_VALUE_SET</i> - Stores the KEY and VALUE <code>Block</code> objects for linked text that's detected on a document page. Use the <code>EntityType</code> field to determine if a KEY_VALUE_SET object is a KEY <code>Block</code> object or a VALUE <code>Block</code> object. </p> </li>
        /// <li> <p> <i>WORD</i> - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.</p> </li>
        /// <li> <p> <i>LINE</i> - A string of tab-delimited, contiguous words that are detected on a document page.</p> </li>
        /// <li> <p> <i>TABLE</i> - A table that's detected on a document page. A table is grid-based information with two or more rows or columns, with a cell span of one row and one column each. </p> </li>
        /// <li> <p> <i>CELL</i> - A cell within a detected table. The cell is the parent of the block that contains the text in the cell.</p> </li>
        /// <li> <p> <i>SELECTION_ELEMENT</i> - A selection element such as an option button (radio button) or a check box that's detected on a document page. Use the value of <code>SelectionStatus</code> to determine the status of the selection element.</p> </li>
        /// <li> <p> <i>SIGNATURE</i> - The location and confidene score of a signature detected on a document page. Can be returned as part of a Key-Value pair or a detected cell.</p> </li>
        /// <li> <p> <i>QUERY</i> - A question asked during the call of AnalyzeDocument. Contains an alias and an ID that attaches it to its answer.</p> </li>
        /// <li> <p> <i>QUERY_RESULT</i> - A response to a question asked during the call of analyze document. Comes with an alias and ID for ease of locating in a response. Also contains location and confidence score.</p> </li>
        /// </ul>
        pub fn set_block_type(
            mut self,
            input: std::option::Option<crate::model::BlockType>,
        ) -> Self {
            self.block_type = input;
            self
        }
        /// <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence score that Amazon Textract has in the accuracy of the recognized text and the accuracy of the geometry points around the recognized text.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// <p>The word or line of text that's recognized by Amazon Textract. </p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>The word or line of text that's recognized by Amazon Textract. </p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>
        pub fn text_type(mut self, input: crate::model::TextType) -> Self {
            self.text_type = Some(input);
            self
        }
        /// <p>The kind of text that Amazon Textract has detected. Can check for handwritten text and printed text.</p>
        pub fn set_text_type(mut self, input: std::option::Option<crate::model::TextType>) -> Self {
            self.text_type = input;
            self
        }
        /// <p>The row in which a table cell is located. The first row position is 1. <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn row_index(mut self, input: i32) -> Self {
            self.row_index = Some(input);
            self
        }
        /// <p>The row in which a table cell is located. The first row position is 1. <code>RowIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn set_row_index(mut self, input: std::option::Option<i32>) -> Self {
            self.row_index = input;
            self
        }
        /// <p>The column in which a table cell appears. The first column position is 1. <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn column_index(mut self, input: i32) -> Self {
            self.column_index = Some(input);
            self
        }
        /// <p>The column in which a table cell appears. The first column position is 1. <code>ColumnIndex</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn set_column_index(mut self, input: std::option::Option<i32>) -> Self {
            self.column_index = input;
            self
        }
        /// <p>The number of rows that a table cell spans. Currently this value is always 1, even if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn row_span(mut self, input: i32) -> Self {
            self.row_span = Some(input);
            self
        }
        /// <p>The number of rows that a table cell spans. Currently this value is always 1, even if the number of rows spanned is greater than 1. <code>RowSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn set_row_span(mut self, input: std::option::Option<i32>) -> Self {
            self.row_span = input;
            self
        }
        /// <p>The number of columns that a table cell spans. Currently this value is always 1, even if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>
        pub fn column_span(mut self, input: i32) -> Self {
            self.column_span = Some(input);
            self
        }
        /// <p>The number of columns that a table cell spans. Currently this value is always 1, even if the number of columns spanned is greater than 1. <code>ColumnSpan</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>. </p>
        pub fn set_column_span(mut self, input: std::option::Option<i32>) -> Self {
            self.column_span = input;
            self
        }
        /// <p>The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information. </p>
        pub fn geometry(mut self, input: crate::model::Geometry) -> Self {
            self.geometry = Some(input);
            self
        }
        /// <p>The location of the recognized text on the image. It includes an axis-aligned, coarse bounding box that surrounds the text, and a finer-grain polygon for more accurate spatial information. </p>
        pub fn set_geometry(mut self, input: std::option::Option<crate::model::Geometry>) -> Self {
            self.geometry = input;
            self
        }
        /// <p>The identifier for the recognized text. The identifier is only unique for a single operation. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The identifier for the recognized text. The identifier is only unique for a single operation. </p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Appends an item to `relationships`.
        ///
        /// To override the contents of this collection use [`set_relationships`](Self::set_relationships).
        ///
        /// <p>A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks. The list size can be the following:</p>
        /// <ul>
        /// <li> <p>0 - The block has no child blocks.</p> </li>
        /// <li> <p>1 - The block has child blocks.</p> </li>
        /// </ul>
        pub fn relationships(mut self, input: crate::model::Relationship) -> Self {
            let mut v = self.relationships.unwrap_or_default();
            v.push(input);
            self.relationships = Some(v);
            self
        }
        /// <p>A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text. There aren't Relationship objects in the list for relationships that don't exist, such as when the current block has no child blocks. The list size can be the following:</p>
        /// <ul>
        /// <li> <p>0 - The block has no child blocks.</p> </li>
        /// <li> <p>1 - The block has child blocks.</p> </li>
        /// </ul>
        pub fn set_relationships(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Relationship>>,
        ) -> Self {
            self.relationships = input;
            self
        }
        /// Appends an item to `entity_types`.
        ///
        /// To override the contents of this collection use [`set_entity_types`](Self::set_entity_types).
        ///
        /// <p>The type of entity. The following can be returned:</p>
        /// <ul>
        /// <li> <p> <i>KEY</i> - An identifier for a field on the document.</p> </li>
        /// <li> <p> <i>VALUE</i> - The field text.</p> </li>
        /// </ul>
        /// <p> <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn entity_types(mut self, input: crate::model::EntityType) -> Self {
            let mut v = self.entity_types.unwrap_or_default();
            v.push(input);
            self.entity_types = Some(v);
            self
        }
        /// <p>The type of entity. The following can be returned:</p>
        /// <ul>
        /// <li> <p> <i>KEY</i> - An identifier for a field on the document.</p> </li>
        /// <li> <p> <i>VALUE</i> - The field text.</p> </li>
        /// </ul>
        /// <p> <code>EntityTypes</code> isn't returned by <code>DetectDocumentText</code> and <code>GetDocumentTextDetection</code>.</p>
        pub fn set_entity_types(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EntityType>>,
        ) -> Self {
            self.entity_types = input;
            self
        }
        /// <p>The selection status of a selection element, such as an option button or check box. </p>
        pub fn selection_status(mut self, input: crate::model::SelectionStatus) -> Self {
            self.selection_status = Some(input);
            self
        }
        /// <p>The selection status of a selection element, such as an option button or check box. </p>
        pub fn set_selection_status(
            mut self,
            input: std::option::Option<crate::model::SelectionStatus>,
        ) -> Self {
            self.selection_status = input;
            self
        }
        /// <p>The page on which a block was detected. <code>Page</code> is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of <code>Page</code> is always 1. Synchronous operations operations will also return a <code>Page</code> value of 1 because every input document is considered to be a single-page document.</p>
        pub fn page(mut self, input: i32) -> Self {
            self.page = Some(input);
            self
        }
        /// <p>The page on which a block was detected. <code>Page</code> is returned by synchronous and asynchronous operations. Page values greater than 1 are only returned for multipage documents that are in PDF or TIFF format. A scanned image (JPEG/PNG) provided to an asynchronous operation, even if it contains multiple document pages, is considered a single-page document. This means that for scanned images the value of <code>Page</code> is always 1. Synchronous operations operations will also return a <code>Page</code> value of 1 because every input document is considered to be a single-page document.</p>
        pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
            self.page = input;
            self
        }
        /// <p></p>
        pub fn query(mut self, input: crate::model::Query) -> Self {
            self.query = Some(input);
            self
        }
        /// <p></p>
        pub fn set_query(mut self, input: std::option::Option<crate::model::Query>) -> Self {
            self.query = input;
            self
        }
        /// Consumes the builder and constructs a [`Block`](crate::model::Block).
        pub fn build(self) -> crate::model::Block {
            crate::model::Block {
                block_type: self.block_type,
                confidence: self.confidence,
                text: self.text,
                text_type: self.text_type,
                row_index: self.row_index,
                column_index: self.column_index,
                row_span: self.row_span,
                column_span: self.column_span,
                geometry: self.geometry,
                id: self.id,
                relationships: self.relationships,
                entity_types: self.entity_types,
                selection_status: self.selection_status,
                page: self.page,
                query: self.query,
            }
        }
    }
}

/// When writing a match expression against `SelectionStatus`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let selectionstatus = unimplemented!();
/// match selectionstatus {
///     SelectionStatus::NotSelected => { /* ... */ },
///     SelectionStatus::Selected => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `selectionstatus` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SelectionStatus::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SelectionStatus::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SelectionStatus::NewFeature` is defined.
/// Specifically, when `selectionstatus` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SelectionStatus::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SelectionStatus {
    #[allow(missing_docs)] // documentation missing in model
    NotSelected,
    #[allow(missing_docs)] // documentation missing in model
    Selected,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for SelectionStatus {
    fn from(s: &str) -> Self {
        match s {
            "NOT_SELECTED" => SelectionStatus::NotSelected,
            "SELECTED" => SelectionStatus::Selected,
            other => SelectionStatus::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for SelectionStatus {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SelectionStatus::from(s))
    }
}
impl SelectionStatus {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SelectionStatus::NotSelected => "NOT_SELECTED",
            SelectionStatus::Selected => "SELECTED",
            SelectionStatus::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["NOT_SELECTED", "SELECTED"]
    }
}
impl AsRef<str> for SelectionStatus {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `EntityType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let entitytype = unimplemented!();
/// match entitytype {
///     EntityType::ColumnHeader => { /* ... */ },
///     EntityType::Key => { /* ... */ },
///     EntityType::Value => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `entitytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `EntityType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `EntityType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `EntityType::NewFeature` is defined.
/// Specifically, when `entitytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `EntityType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum EntityType {
    #[allow(missing_docs)] // documentation missing in model
    ColumnHeader,
    #[allow(missing_docs)] // documentation missing in model
    Key,
    #[allow(missing_docs)] // documentation missing in model
    Value,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for EntityType {
    fn from(s: &str) -> Self {
        match s {
            "COLUMN_HEADER" => EntityType::ColumnHeader,
            "KEY" => EntityType::Key,
            "VALUE" => EntityType::Value,
            other => EntityType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for EntityType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(EntityType::from(s))
    }
}
impl EntityType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            EntityType::ColumnHeader => "COLUMN_HEADER",
            EntityType::Key => "KEY",
            EntityType::Value => "VALUE",
            EntityType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["COLUMN_HEADER", "KEY", "VALUE"]
    }
}
impl AsRef<str> for EntityType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Information about how blocks are related to each other. A <code>Block</code> object contains 0 or more <code>Relation</code> objects in a list, <code>Relationships</code>. For more information, see <code>Block</code>.</p>
/// <p>The <code>Type</code> element provides the type of the relationship for all blocks in the <code>IDs</code> array. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Relationship {
    /// <p>The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>. A relationship of type VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair. A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::RelationshipType>,
    /// <p>An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.</p>
    #[doc(hidden)]
    pub ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Relationship {
    /// <p>The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>. A relationship of type VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair. A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::RelationshipType> {
        self.r#type.as_ref()
    }
    /// <p>An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.</p>
    pub fn ids(&self) -> std::option::Option<&[std::string::String]> {
        self.ids.as_deref()
    }
}
impl Relationship {
    /// Creates a new builder-style object to manufacture [`Relationship`](crate::model::Relationship).
    pub fn builder() -> crate::model::relationship::Builder {
        crate::model::relationship::Builder::default()
    }
}

/// See [`Relationship`](crate::model::Relationship).
pub mod relationship {

    /// A builder for [`Relationship`](crate::model::Relationship).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::RelationshipType>,
        pub(crate) ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>. A relationship of type VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair. A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.</p>
        pub fn r#type(mut self, input: crate::model::RelationshipType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The type of relationship that the blocks in the IDs array have with the current block. The relationship can be <code>VALUE</code> or <code>CHILD</code>. A relationship of type VALUE is a list that contains the ID of the VALUE block that's associated with the KEY of a key-value pair. A relationship of type CHILD is a list of IDs that identify WORD blocks in the case of lines Cell blocks in the case of Tables, and WORD blocks in the case of Selection Elements.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::RelationshipType>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// Appends an item to `ids`.
        ///
        /// To override the contents of this collection use [`set_ids`](Self::set_ids).
        ///
        /// <p>An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.</p>
        pub fn ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.ids.unwrap_or_default();
            v.push(input.into());
            self.ids = Some(v);
            self
        }
        /// <p>An array of IDs for related blocks. You can get the type of the relationship from the <code>Type</code> element.</p>
        pub fn set_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.ids = input;
            self
        }
        /// Consumes the builder and constructs a [`Relationship`](crate::model::Relationship).
        pub fn build(self) -> crate::model::Relationship {
            crate::model::Relationship {
                r#type: self.r#type,
                ids: self.ids,
            }
        }
    }
}

/// When writing a match expression against `RelationshipType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let relationshiptype = unimplemented!();
/// match relationshiptype {
///     RelationshipType::Answer => { /* ... */ },
///     RelationshipType::Child => { /* ... */ },
///     RelationshipType::ComplexFeatures => { /* ... */ },
///     RelationshipType::MergedCell => { /* ... */ },
///     RelationshipType::Title => { /* ... */ },
///     RelationshipType::Value => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `relationshiptype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `RelationshipType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `RelationshipType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `RelationshipType::NewFeature` is defined.
/// Specifically, when `relationshiptype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `RelationshipType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum RelationshipType {
    #[allow(missing_docs)] // documentation missing in model
    Answer,
    #[allow(missing_docs)] // documentation missing in model
    Child,
    #[allow(missing_docs)] // documentation missing in model
    ComplexFeatures,
    #[allow(missing_docs)] // documentation missing in model
    MergedCell,
    #[allow(missing_docs)] // documentation missing in model
    Title,
    #[allow(missing_docs)] // documentation missing in model
    Value,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for RelationshipType {
    fn from(s: &str) -> Self {
        match s {
            "ANSWER" => RelationshipType::Answer,
            "CHILD" => RelationshipType::Child,
            "COMPLEX_FEATURES" => RelationshipType::ComplexFeatures,
            "MERGED_CELL" => RelationshipType::MergedCell,
            "TITLE" => RelationshipType::Title,
            "VALUE" => RelationshipType::Value,
            other => RelationshipType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for RelationshipType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(RelationshipType::from(s))
    }
}
impl RelationshipType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            RelationshipType::Answer => "ANSWER",
            RelationshipType::Child => "CHILD",
            RelationshipType::ComplexFeatures => "COMPLEX_FEATURES",
            RelationshipType::MergedCell => "MERGED_CELL",
            RelationshipType::Title => "TITLE",
            RelationshipType::Value => "VALUE",
            RelationshipType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ANSWER",
            "CHILD",
            "COMPLEX_FEATURES",
            "MERGED_CELL",
            "TITLE",
            "VALUE",
        ]
    }
}
impl AsRef<str> for RelationshipType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Geometry {
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    #[doc(hidden)]
    pub bounding_box: std::option::Option<crate::model::BoundingBox>,
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    #[doc(hidden)]
    pub polygon: std::option::Option<std::vec::Vec<crate::model::Point>>,
}
impl Geometry {
    /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
    pub fn bounding_box(&self) -> std::option::Option<&crate::model::BoundingBox> {
        self.bounding_box.as_ref()
    }
    /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
    pub fn polygon(&self) -> std::option::Option<&[crate::model::Point]> {
        self.polygon.as_deref()
    }
}
impl Geometry {
    /// Creates a new builder-style object to manufacture [`Geometry`](crate::model::Geometry).
    pub fn builder() -> crate::model::geometry::Builder {
        crate::model::geometry::Builder::default()
    }
}

/// See [`Geometry`](crate::model::Geometry).
pub mod geometry {

    /// A builder for [`Geometry`](crate::model::Geometry).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bounding_box: std::option::Option<crate::model::BoundingBox>,
        pub(crate) polygon: std::option::Option<std::vec::Vec<crate::model::Point>>,
    }
    impl Builder {
        /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
        pub fn bounding_box(mut self, input: crate::model::BoundingBox) -> Self {
            self.bounding_box = Some(input);
            self
        }
        /// <p>An axis-aligned coarse representation of the location of the recognized item on the document page.</p>
        pub fn set_bounding_box(
            mut self,
            input: std::option::Option<crate::model::BoundingBox>,
        ) -> Self {
            self.bounding_box = input;
            self
        }
        /// Appends an item to `polygon`.
        ///
        /// To override the contents of this collection use [`set_polygon`](Self::set_polygon).
        ///
        /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
        pub fn polygon(mut self, input: crate::model::Point) -> Self {
            let mut v = self.polygon.unwrap_or_default();
            v.push(input);
            self.polygon = Some(v);
            self
        }
        /// <p>Within the bounding box, a fine-grained polygon around the recognized item.</p>
        pub fn set_polygon(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Point>>,
        ) -> Self {
            self.polygon = input;
            self
        }
        /// Consumes the builder and constructs a [`Geometry`](crate::model::Geometry).
        pub fn build(self) -> crate::model::Geometry {
            crate::model::Geometry {
                bounding_box: self.bounding_box,
                polygon: self.polygon,
            }
        }
    }
}

/// <p>The X and Y coordinates of a point on a document page. The X and Y values that are returned are ratios of the overall document page size. For example, if the input document is 700 x 200 and the operation returns X=0.5 and Y=0.25, then the point is at the (350,50) pixel coordinate on the document page.</p>
/// <p>An array of <code>Point</code> objects, <code>Polygon</code>, is returned by <code>DetectDocumentText</code>. <code>Polygon</code> represents a fine-grained polygon around detected text. For more information, see Geometry in the Amazon Textract Developer Guide. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Point {
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    #[doc(hidden)]
    pub x: f32,
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    #[doc(hidden)]
    pub y: f32,
}
impl Point {
    /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
    pub fn x(&self) -> f32 {
        self.x
    }
    /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
    pub fn y(&self) -> f32 {
        self.y
    }
}
impl Point {
    /// Creates a new builder-style object to manufacture [`Point`](crate::model::Point).
    pub fn builder() -> crate::model::point::Builder {
        crate::model::point::Builder::default()
    }
}

/// See [`Point`](crate::model::Point).
pub mod point {

    /// A builder for [`Point`](crate::model::Point).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) x: std::option::Option<f32>,
        pub(crate) y: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
        pub fn x(mut self, input: f32) -> Self {
            self.x = Some(input);
            self
        }
        /// <p>The value of the X coordinate for a point on a <code>Polygon</code>.</p>
        pub fn set_x(mut self, input: std::option::Option<f32>) -> Self {
            self.x = input;
            self
        }
        /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
        pub fn y(mut self, input: f32) -> Self {
            self.y = Some(input);
            self
        }
        /// <p>The value of the Y coordinate for a point on a <code>Polygon</code>.</p>
        pub fn set_y(mut self, input: std::option::Option<f32>) -> Self {
            self.y = input;
            self
        }
        /// Consumes the builder and constructs a [`Point`](crate::model::Point).
        pub fn build(self) -> crate::model::Point {
            crate::model::Point {
                x: self.x.unwrap_or_default(),
                y: self.y.unwrap_or_default(),
            }
        }
    }
}

/// <p>The bounding box around the detected page, text, key-value pair, table, table cell, or selection element on a document page. The <code>left</code> (x-coordinate) and <code>top</code> (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p>
/// <p>The <code>top</code> and <code>left</code> values returned are ratios of the overall document page size. For example, if the input image is 700 x 200 pixels, and the top-left coordinate of the bounding box is 350 x 50 pixels, the API returns a <code>left</code> value of 0.5 (350/700) and a <code>top</code> value of 0.25 (50/200).</p>
/// <p>The <code>width</code> and <code>height</code> values represent the dimensions of the bounding box as a ratio of the overall document page dimension. For example, if the document page size is 700 x 200 pixels, and the bounding box width is 70 pixels, the width returned is 0.1. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BoundingBox {
    /// <p>The width of the bounding box as a ratio of the overall document page width.</p>
    #[doc(hidden)]
    pub width: f32,
    /// <p>The height of the bounding box as a ratio of the overall document page height.</p>
    #[doc(hidden)]
    pub height: f32,
    /// <p>The left coordinate of the bounding box as a ratio of overall document page width.</p>
    #[doc(hidden)]
    pub left: f32,
    /// <p>The top coordinate of the bounding box as a ratio of overall document page height.</p>
    #[doc(hidden)]
    pub top: f32,
}
impl BoundingBox {
    /// <p>The width of the bounding box as a ratio of the overall document page width.</p>
    pub fn width(&self) -> f32 {
        self.width
    }
    /// <p>The height of the bounding box as a ratio of the overall document page height.</p>
    pub fn height(&self) -> f32 {
        self.height
    }
    /// <p>The left coordinate of the bounding box as a ratio of overall document page width.</p>
    pub fn left(&self) -> f32 {
        self.left
    }
    /// <p>The top coordinate of the bounding box as a ratio of overall document page height.</p>
    pub fn top(&self) -> f32 {
        self.top
    }
}
impl BoundingBox {
    /// Creates a new builder-style object to manufacture [`BoundingBox`](crate::model::BoundingBox).
    pub fn builder() -> crate::model::bounding_box::Builder {
        crate::model::bounding_box::Builder::default()
    }
}

/// See [`BoundingBox`](crate::model::BoundingBox).
pub mod bounding_box {

    /// A builder for [`BoundingBox`](crate::model::BoundingBox).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) width: std::option::Option<f32>,
        pub(crate) height: std::option::Option<f32>,
        pub(crate) left: std::option::Option<f32>,
        pub(crate) top: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The width of the bounding box as a ratio of the overall document page width.</p>
        pub fn width(mut self, input: f32) -> Self {
            self.width = Some(input);
            self
        }
        /// <p>The width of the bounding box as a ratio of the overall document page width.</p>
        pub fn set_width(mut self, input: std::option::Option<f32>) -> Self {
            self.width = input;
            self
        }
        /// <p>The height of the bounding box as a ratio of the overall document page height.</p>
        pub fn height(mut self, input: f32) -> Self {
            self.height = Some(input);
            self
        }
        /// <p>The height of the bounding box as a ratio of the overall document page height.</p>
        pub fn set_height(mut self, input: std::option::Option<f32>) -> Self {
            self.height = input;
            self
        }
        /// <p>The left coordinate of the bounding box as a ratio of overall document page width.</p>
        pub fn left(mut self, input: f32) -> Self {
            self.left = Some(input);
            self
        }
        /// <p>The left coordinate of the bounding box as a ratio of overall document page width.</p>
        pub fn set_left(mut self, input: std::option::Option<f32>) -> Self {
            self.left = input;
            self
        }
        /// <p>The top coordinate of the bounding box as a ratio of overall document page height.</p>
        pub fn top(mut self, input: f32) -> Self {
            self.top = Some(input);
            self
        }
        /// <p>The top coordinate of the bounding box as a ratio of overall document page height.</p>
        pub fn set_top(mut self, input: std::option::Option<f32>) -> Self {
            self.top = input;
            self
        }
        /// Consumes the builder and constructs a [`BoundingBox`](crate::model::BoundingBox).
        pub fn build(self) -> crate::model::BoundingBox {
            crate::model::BoundingBox {
                width: self.width.unwrap_or_default(),
                height: self.height.unwrap_or_default(),
                left: self.left.unwrap_or_default(),
                top: self.top.unwrap_or_default(),
            }
        }
    }
}

/// When writing a match expression against `TextType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let texttype = unimplemented!();
/// match texttype {
///     TextType::Handwriting => { /* ... */ },
///     TextType::Printed => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `texttype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `TextType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `TextType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `TextType::NewFeature` is defined.
/// Specifically, when `texttype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `TextType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum TextType {
    #[allow(missing_docs)] // documentation missing in model
    Handwriting,
    #[allow(missing_docs)] // documentation missing in model
    Printed,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for TextType {
    fn from(s: &str) -> Self {
        match s {
            "HANDWRITING" => TextType::Handwriting,
            "PRINTED" => TextType::Printed,
            other => TextType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for TextType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(TextType::from(s))
    }
}
impl TextType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            TextType::Handwriting => "HANDWRITING",
            TextType::Printed => "PRINTED",
            TextType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["HANDWRITING", "PRINTED"]
    }
}
impl AsRef<str> for TextType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// When writing a match expression against `BlockType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let blocktype = unimplemented!();
/// match blocktype {
///     BlockType::Cell => { /* ... */ },
///     BlockType::KeyValueSet => { /* ... */ },
///     BlockType::Line => { /* ... */ },
///     BlockType::MergedCell => { /* ... */ },
///     BlockType::Page => { /* ... */ },
///     BlockType::Query => { /* ... */ },
///     BlockType::QueryResult => { /* ... */ },
///     BlockType::SelectionElement => { /* ... */ },
///     BlockType::Signature => { /* ... */ },
///     BlockType::Table => { /* ... */ },
///     BlockType::Title => { /* ... */ },
///     BlockType::Word => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `blocktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BlockType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BlockType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BlockType::NewFeature` is defined.
/// Specifically, when `blocktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BlockType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BlockType {
    #[allow(missing_docs)] // documentation missing in model
    Cell,
    #[allow(missing_docs)] // documentation missing in model
    KeyValueSet,
    #[allow(missing_docs)] // documentation missing in model
    Line,
    #[allow(missing_docs)] // documentation missing in model
    MergedCell,
    #[allow(missing_docs)] // documentation missing in model
    Page,
    #[allow(missing_docs)] // documentation missing in model
    Query,
    #[allow(missing_docs)] // documentation missing in model
    QueryResult,
    #[allow(missing_docs)] // documentation missing in model
    SelectionElement,
    #[allow(missing_docs)] // documentation missing in model
    Signature,
    #[allow(missing_docs)] // documentation missing in model
    Table,
    #[allow(missing_docs)] // documentation missing in model
    Title,
    #[allow(missing_docs)] // documentation missing in model
    Word,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for BlockType {
    fn from(s: &str) -> Self {
        match s {
            "CELL" => BlockType::Cell,
            "KEY_VALUE_SET" => BlockType::KeyValueSet,
            "LINE" => BlockType::Line,
            "MERGED_CELL" => BlockType::MergedCell,
            "PAGE" => BlockType::Page,
            "QUERY" => BlockType::Query,
            "QUERY_RESULT" => BlockType::QueryResult,
            "SELECTION_ELEMENT" => BlockType::SelectionElement,
            "SIGNATURE" => BlockType::Signature,
            "TABLE" => BlockType::Table,
            "TITLE" => BlockType::Title,
            "WORD" => BlockType::Word,
            other => BlockType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for BlockType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BlockType::from(s))
    }
}
impl BlockType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BlockType::Cell => "CELL",
            BlockType::KeyValueSet => "KEY_VALUE_SET",
            BlockType::Line => "LINE",
            BlockType::MergedCell => "MERGED_CELL",
            BlockType::Page => "PAGE",
            BlockType::Query => "QUERY",
            BlockType::QueryResult => "QUERY_RESULT",
            BlockType::SelectionElement => "SELECTION_ELEMENT",
            BlockType::Signature => "SIGNATURE",
            BlockType::Table => "TABLE",
            BlockType::Title => "TITLE",
            BlockType::Word => "WORD",
            BlockType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CELL",
            "KEY_VALUE_SET",
            "LINE",
            "MERGED_CELL",
            "PAGE",
            "QUERY",
            "QUERY_RESULT",
            "SELECTION_ELEMENT",
            "SIGNATURE",
            "TABLE",
            "TITLE",
            "WORD",
        ]
    }
}
impl AsRef<str> for BlockType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>Structure containing both the normalized type of the extracted information and the text associated with it. These are extracted as Type and Value respectively.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IdentityDocumentField {
    /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::AnalyzeIdDetections>,
    /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
    #[doc(hidden)]
    pub value_detection: std::option::Option<crate::model::AnalyzeIdDetections>,
}
impl IdentityDocumentField {
    /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::AnalyzeIdDetections> {
        self.r#type.as_ref()
    }
    /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
    pub fn value_detection(&self) -> std::option::Option<&crate::model::AnalyzeIdDetections> {
        self.value_detection.as_ref()
    }
}
impl IdentityDocumentField {
    /// Creates a new builder-style object to manufacture [`IdentityDocumentField`](crate::model::IdentityDocumentField).
    pub fn builder() -> crate::model::identity_document_field::Builder {
        crate::model::identity_document_field::Builder::default()
    }
}

/// See [`IdentityDocumentField`](crate::model::IdentityDocumentField).
pub mod identity_document_field {

    /// A builder for [`IdentityDocumentField`](crate::model::IdentityDocumentField).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::AnalyzeIdDetections>,
        pub(crate) value_detection: std::option::Option<crate::model::AnalyzeIdDetections>,
    }
    impl Builder {
        /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
        pub fn r#type(mut self, input: crate::model::AnalyzeIdDetections) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
        pub fn set_type(
            mut self,
            input: std::option::Option<crate::model::AnalyzeIdDetections>,
        ) -> Self {
            self.r#type = input;
            self
        }
        /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
        pub fn value_detection(mut self, input: crate::model::AnalyzeIdDetections) -> Self {
            self.value_detection = Some(input);
            self
        }
        /// <p>Used to contain the information detected by an AnalyzeID operation.</p>
        pub fn set_value_detection(
            mut self,
            input: std::option::Option<crate::model::AnalyzeIdDetections>,
        ) -> Self {
            self.value_detection = input;
            self
        }
        /// Consumes the builder and constructs a [`IdentityDocumentField`](crate::model::IdentityDocumentField).
        pub fn build(self) -> crate::model::IdentityDocumentField {
            crate::model::IdentityDocumentField {
                r#type: self.r#type,
                value_detection: self.value_detection,
            }
        }
    }
}

/// <p>Used to contain the information detected by an AnalyzeID operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalyzeIdDetections {
    /// <p>Text of either the normalized field or value associated with it.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    #[doc(hidden)]
    pub normalized_value: std::option::Option<crate::model::NormalizedValue>,
    /// <p>The confidence score of the detected text.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl AnalyzeIdDetections {
    /// <p>Text of either the normalized field or value associated with it.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    pub fn normalized_value(&self) -> std::option::Option<&crate::model::NormalizedValue> {
        self.normalized_value.as_ref()
    }
    /// <p>The confidence score of the detected text.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl AnalyzeIdDetections {
    /// Creates a new builder-style object to manufacture [`AnalyzeIdDetections`](crate::model::AnalyzeIdDetections).
    pub fn builder() -> crate::model::analyze_id_detections::Builder {
        crate::model::analyze_id_detections::Builder::default()
    }
}

/// See [`AnalyzeIdDetections`](crate::model::AnalyzeIdDetections).
pub mod analyze_id_detections {

    /// A builder for [`AnalyzeIdDetections`](crate::model::AnalyzeIdDetections).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) normalized_value: std::option::Option<crate::model::NormalizedValue>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>Text of either the normalized field or value associated with it.</p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>Text of either the normalized field or value associated with it.</p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
        pub fn normalized_value(mut self, input: crate::model::NormalizedValue) -> Self {
            self.normalized_value = Some(input);
            self
        }
        /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
        pub fn set_normalized_value(
            mut self,
            input: std::option::Option<crate::model::NormalizedValue>,
        ) -> Self {
            self.normalized_value = input;
            self
        }
        /// <p>The confidence score of the detected text.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence score of the detected text.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`AnalyzeIdDetections`](crate::model::AnalyzeIdDetections).
        pub fn build(self) -> crate::model::AnalyzeIdDetections {
            crate::model::AnalyzeIdDetections {
                text: self.text,
                normalized_value: self.normalized_value,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>Contains information relating to dates in a document, including the type of value, and the value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NormalizedValue {
    /// <p>The value of the date, written as Year-Month-DayTHour:Minute:Second.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The normalized type of the value detected. In this case, DATE.</p>
    #[doc(hidden)]
    pub value_type: std::option::Option<crate::model::ValueType>,
}
impl NormalizedValue {
    /// <p>The value of the date, written as Year-Month-DayTHour:Minute:Second.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The normalized type of the value detected. In this case, DATE.</p>
    pub fn value_type(&self) -> std::option::Option<&crate::model::ValueType> {
        self.value_type.as_ref()
    }
}
impl NormalizedValue {
    /// Creates a new builder-style object to manufacture [`NormalizedValue`](crate::model::NormalizedValue).
    pub fn builder() -> crate::model::normalized_value::Builder {
        crate::model::normalized_value::Builder::default()
    }
}

/// See [`NormalizedValue`](crate::model::NormalizedValue).
pub mod normalized_value {

    /// A builder for [`NormalizedValue`](crate::model::NormalizedValue).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) value: std::option::Option<std::string::String>,
        pub(crate) value_type: std::option::Option<crate::model::ValueType>,
    }
    impl Builder {
        /// <p>The value of the date, written as Year-Month-DayTHour:Minute:Second.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The value of the date, written as Year-Month-DayTHour:Minute:Second.</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// <p>The normalized type of the value detected. In this case, DATE.</p>
        pub fn value_type(mut self, input: crate::model::ValueType) -> Self {
            self.value_type = Some(input);
            self
        }
        /// <p>The normalized type of the value detected. In this case, DATE.</p>
        pub fn set_value_type(
            mut self,
            input: std::option::Option<crate::model::ValueType>,
        ) -> Self {
            self.value_type = input;
            self
        }
        /// Consumes the builder and constructs a [`NormalizedValue`](crate::model::NormalizedValue).
        pub fn build(self) -> crate::model::NormalizedValue {
            crate::model::NormalizedValue {
                value: self.value,
                value_type: self.value_type,
            }
        }
    }
}

/// When writing a match expression against `ValueType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let valuetype = unimplemented!();
/// match valuetype {
///     ValueType::Date => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `valuetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ValueType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ValueType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ValueType::NewFeature` is defined.
/// Specifically, when `valuetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ValueType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ValueType {
    #[allow(missing_docs)] // documentation missing in model
    Date,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ValueType {
    fn from(s: &str) -> Self {
        match s {
            "DATE" => ValueType::Date,
            other => ValueType::Unknown(crate::types::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ValueType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ValueType::from(s))
    }
}
impl ValueType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ValueType::Date => "DATE",
            ValueType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["DATE"]
    }
}
impl AsRef<str> for ValueType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}

/// <p>The structure holding all the information returned by AnalyzeExpense</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseDocument {
    /// <p>Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.</p>
    #[doc(hidden)]
    pub expense_index: std::option::Option<i32>,
    /// <p>Any information found outside of a table by Amazon Textract.</p>
    #[doc(hidden)]
    pub summary_fields: std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
    /// <p>Information detected on each table of a document, seperated into <code>LineItems</code>.</p>
    #[doc(hidden)]
    pub line_item_groups: std::option::Option<std::vec::Vec<crate::model::LineItemGroup>>,
    /// <p>This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.</p>
    #[doc(hidden)]
    pub blocks: std::option::Option<std::vec::Vec<crate::model::Block>>,
}
impl ExpenseDocument {
    /// <p>Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.</p>
    pub fn expense_index(&self) -> std::option::Option<i32> {
        self.expense_index
    }
    /// <p>Any information found outside of a table by Amazon Textract.</p>
    pub fn summary_fields(&self) -> std::option::Option<&[crate::model::ExpenseField]> {
        self.summary_fields.as_deref()
    }
    /// <p>Information detected on each table of a document, seperated into <code>LineItems</code>.</p>
    pub fn line_item_groups(&self) -> std::option::Option<&[crate::model::LineItemGroup]> {
        self.line_item_groups.as_deref()
    }
    /// <p>This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.</p>
    pub fn blocks(&self) -> std::option::Option<&[crate::model::Block]> {
        self.blocks.as_deref()
    }
}
impl ExpenseDocument {
    /// Creates a new builder-style object to manufacture [`ExpenseDocument`](crate::model::ExpenseDocument).
    pub fn builder() -> crate::model::expense_document::Builder {
        crate::model::expense_document::Builder::default()
    }
}

/// See [`ExpenseDocument`](crate::model::ExpenseDocument).
pub mod expense_document {

    /// A builder for [`ExpenseDocument`](crate::model::ExpenseDocument).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) expense_index: std::option::Option<i32>,
        pub(crate) summary_fields: std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
        pub(crate) line_item_groups:
            std::option::Option<std::vec::Vec<crate::model::LineItemGroup>>,
        pub(crate) blocks: std::option::Option<std::vec::Vec<crate::model::Block>>,
    }
    impl Builder {
        /// <p>Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.</p>
        pub fn expense_index(mut self, input: i32) -> Self {
            self.expense_index = Some(input);
            self
        }
        /// <p>Denotes which invoice or receipt in the document the information is coming from. First document will be 1, the second 2, and so on.</p>
        pub fn set_expense_index(mut self, input: std::option::Option<i32>) -> Self {
            self.expense_index = input;
            self
        }
        /// Appends an item to `summary_fields`.
        ///
        /// To override the contents of this collection use [`set_summary_fields`](Self::set_summary_fields).
        ///
        /// <p>Any information found outside of a table by Amazon Textract.</p>
        pub fn summary_fields(mut self, input: crate::model::ExpenseField) -> Self {
            let mut v = self.summary_fields.unwrap_or_default();
            v.push(input);
            self.summary_fields = Some(v);
            self
        }
        /// <p>Any information found outside of a table by Amazon Textract.</p>
        pub fn set_summary_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
        ) -> Self {
            self.summary_fields = input;
            self
        }
        /// Appends an item to `line_item_groups`.
        ///
        /// To override the contents of this collection use [`set_line_item_groups`](Self::set_line_item_groups).
        ///
        /// <p>Information detected on each table of a document, seperated into <code>LineItems</code>.</p>
        pub fn line_item_groups(mut self, input: crate::model::LineItemGroup) -> Self {
            let mut v = self.line_item_groups.unwrap_or_default();
            v.push(input);
            self.line_item_groups = Some(v);
            self
        }
        /// <p>Information detected on each table of a document, seperated into <code>LineItems</code>.</p>
        pub fn set_line_item_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LineItemGroup>>,
        ) -> Self {
            self.line_item_groups = input;
            self
        }
        /// Appends an item to `blocks`.
        ///
        /// To override the contents of this collection use [`set_blocks`](Self::set_blocks).
        ///
        /// <p>This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.</p>
        pub fn blocks(mut self, input: crate::model::Block) -> Self {
            let mut v = self.blocks.unwrap_or_default();
            v.push(input);
            self.blocks = Some(v);
            self
        }
        /// <p>This is a block object, the same as reported when DetectDocumentText is run on a document. It provides word level recognition of text.</p>
        pub fn set_blocks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Block>>,
        ) -> Self {
            self.blocks = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseDocument`](crate::model::ExpenseDocument).
        pub fn build(self) -> crate::model::ExpenseDocument {
            crate::model::ExpenseDocument {
                expense_index: self.expense_index,
                summary_fields: self.summary_fields,
                line_item_groups: self.line_item_groups,
                blocks: self.blocks,
            }
        }
    }
}

/// <p>A grouping of tables which contain LineItems, with each table identified by the table's <code>LineItemGroupIndex</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LineItemGroup {
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    #[doc(hidden)]
    pub line_item_group_index: std::option::Option<i32>,
    /// <p>The breakdown of information on a particular line of a table. </p>
    #[doc(hidden)]
    pub line_items: std::option::Option<std::vec::Vec<crate::model::LineItemFields>>,
}
impl LineItemGroup {
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    pub fn line_item_group_index(&self) -> std::option::Option<i32> {
        self.line_item_group_index
    }
    /// <p>The breakdown of information on a particular line of a table. </p>
    pub fn line_items(&self) -> std::option::Option<&[crate::model::LineItemFields]> {
        self.line_items.as_deref()
    }
}
impl LineItemGroup {
    /// Creates a new builder-style object to manufacture [`LineItemGroup`](crate::model::LineItemGroup).
    pub fn builder() -> crate::model::line_item_group::Builder {
        crate::model::line_item_group::Builder::default()
    }
}

/// See [`LineItemGroup`](crate::model::LineItemGroup).
pub mod line_item_group {

    /// A builder for [`LineItemGroup`](crate::model::LineItemGroup).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) line_item_group_index: std::option::Option<i32>,
        pub(crate) line_items: std::option::Option<std::vec::Vec<crate::model::LineItemFields>>,
    }
    impl Builder {
        /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
        pub fn line_item_group_index(mut self, input: i32) -> Self {
            self.line_item_group_index = Some(input);
            self
        }
        /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
        pub fn set_line_item_group_index(mut self, input: std::option::Option<i32>) -> Self {
            self.line_item_group_index = input;
            self
        }
        /// Appends an item to `line_items`.
        ///
        /// To override the contents of this collection use [`set_line_items`](Self::set_line_items).
        ///
        /// <p>The breakdown of information on a particular line of a table. </p>
        pub fn line_items(mut self, input: crate::model::LineItemFields) -> Self {
            let mut v = self.line_items.unwrap_or_default();
            v.push(input);
            self.line_items = Some(v);
            self
        }
        /// <p>The breakdown of information on a particular line of a table. </p>
        pub fn set_line_items(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LineItemFields>>,
        ) -> Self {
            self.line_items = input;
            self
        }
        /// Consumes the builder and constructs a [`LineItemGroup`](crate::model::LineItemGroup).
        pub fn build(self) -> crate::model::LineItemGroup {
            crate::model::LineItemGroup {
                line_item_group_index: self.line_item_group_index,
                line_items: self.line_items,
            }
        }
    }
}

/// <p>A structure that holds information about the different lines found in a document's tables.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LineItemFields {
    /// <p>ExpenseFields used to show information from detected lines on a table.</p>
    #[doc(hidden)]
    pub line_item_expense_fields: std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
}
impl LineItemFields {
    /// <p>ExpenseFields used to show information from detected lines on a table.</p>
    pub fn line_item_expense_fields(&self) -> std::option::Option<&[crate::model::ExpenseField]> {
        self.line_item_expense_fields.as_deref()
    }
}
impl LineItemFields {
    /// Creates a new builder-style object to manufacture [`LineItemFields`](crate::model::LineItemFields).
    pub fn builder() -> crate::model::line_item_fields::Builder {
        crate::model::line_item_fields::Builder::default()
    }
}

/// See [`LineItemFields`](crate::model::LineItemFields).
pub mod line_item_fields {

    /// A builder for [`LineItemFields`](crate::model::LineItemFields).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) line_item_expense_fields:
            std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
    }
    impl Builder {
        /// Appends an item to `line_item_expense_fields`.
        ///
        /// To override the contents of this collection use [`set_line_item_expense_fields`](Self::set_line_item_expense_fields).
        ///
        /// <p>ExpenseFields used to show information from detected lines on a table.</p>
        pub fn line_item_expense_fields(mut self, input: crate::model::ExpenseField) -> Self {
            let mut v = self.line_item_expense_fields.unwrap_or_default();
            v.push(input);
            self.line_item_expense_fields = Some(v);
            self
        }
        /// <p>ExpenseFields used to show information from detected lines on a table.</p>
        pub fn set_line_item_expense_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExpenseField>>,
        ) -> Self {
            self.line_item_expense_fields = input;
            self
        }
        /// Consumes the builder and constructs a [`LineItemFields`](crate::model::LineItemFields).
        pub fn build(self) -> crate::model::LineItemFields {
            crate::model::LineItemFields {
                line_item_expense_fields: self.line_item_expense_fields,
            }
        }
    }
}

/// <p>Breakdown of detected information, seperated into the catagories Type, LabelDetection, and ValueDetection</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseField {
    /// <p>The implied label of a detected element. Present alongside LabelDetection for explicit elements.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::model::ExpenseType>,
    /// <p>The explicitly stated label of a detected element.</p>
    #[doc(hidden)]
    pub label_detection: std::option::Option<crate::model::ExpenseDetection>,
    /// <p>The value of a detected element. Present in explicit and implicit elements.</p>
    #[doc(hidden)]
    pub value_detection: std::option::Option<crate::model::ExpenseDetection>,
    /// <p>The page number the value was detected on.</p>
    #[doc(hidden)]
    pub page_number: std::option::Option<i32>,
    /// <p>Shows the kind of currency, both the code and confidence associated with any monatary value detected.</p>
    #[doc(hidden)]
    pub currency: std::option::Option<crate::model::ExpenseCurrency>,
    /// <p>Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.</p>
    #[doc(hidden)]
    pub group_properties: std::option::Option<std::vec::Vec<crate::model::ExpenseGroupProperty>>,
}
impl ExpenseField {
    /// <p>The implied label of a detected element. Present alongside LabelDetection for explicit elements.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::model::ExpenseType> {
        self.r#type.as_ref()
    }
    /// <p>The explicitly stated label of a detected element.</p>
    pub fn label_detection(&self) -> std::option::Option<&crate::model::ExpenseDetection> {
        self.label_detection.as_ref()
    }
    /// <p>The value of a detected element. Present in explicit and implicit elements.</p>
    pub fn value_detection(&self) -> std::option::Option<&crate::model::ExpenseDetection> {
        self.value_detection.as_ref()
    }
    /// <p>The page number the value was detected on.</p>
    pub fn page_number(&self) -> std::option::Option<i32> {
        self.page_number
    }
    /// <p>Shows the kind of currency, both the code and confidence associated with any monatary value detected.</p>
    pub fn currency(&self) -> std::option::Option<&crate::model::ExpenseCurrency> {
        self.currency.as_ref()
    }
    /// <p>Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.</p>
    pub fn group_properties(&self) -> std::option::Option<&[crate::model::ExpenseGroupProperty]> {
        self.group_properties.as_deref()
    }
}
impl ExpenseField {
    /// Creates a new builder-style object to manufacture [`ExpenseField`](crate::model::ExpenseField).
    pub fn builder() -> crate::model::expense_field::Builder {
        crate::model::expense_field::Builder::default()
    }
}

/// See [`ExpenseField`](crate::model::ExpenseField).
pub mod expense_field {

    /// A builder for [`ExpenseField`](crate::model::ExpenseField).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<crate::model::ExpenseType>,
        pub(crate) label_detection: std::option::Option<crate::model::ExpenseDetection>,
        pub(crate) value_detection: std::option::Option<crate::model::ExpenseDetection>,
        pub(crate) page_number: std::option::Option<i32>,
        pub(crate) currency: std::option::Option<crate::model::ExpenseCurrency>,
        pub(crate) group_properties:
            std::option::Option<std::vec::Vec<crate::model::ExpenseGroupProperty>>,
    }
    impl Builder {
        /// <p>The implied label of a detected element. Present alongside LabelDetection for explicit elements.</p>
        pub fn r#type(mut self, input: crate::model::ExpenseType) -> Self {
            self.r#type = Some(input);
            self
        }
        /// <p>The implied label of a detected element. Present alongside LabelDetection for explicit elements.</p>
        pub fn set_type(mut self, input: std::option::Option<crate::model::ExpenseType>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The explicitly stated label of a detected element.</p>
        pub fn label_detection(mut self, input: crate::model::ExpenseDetection) -> Self {
            self.label_detection = Some(input);
            self
        }
        /// <p>The explicitly stated label of a detected element.</p>
        pub fn set_label_detection(
            mut self,
            input: std::option::Option<crate::model::ExpenseDetection>,
        ) -> Self {
            self.label_detection = input;
            self
        }
        /// <p>The value of a detected element. Present in explicit and implicit elements.</p>
        pub fn value_detection(mut self, input: crate::model::ExpenseDetection) -> Self {
            self.value_detection = Some(input);
            self
        }
        /// <p>The value of a detected element. Present in explicit and implicit elements.</p>
        pub fn set_value_detection(
            mut self,
            input: std::option::Option<crate::model::ExpenseDetection>,
        ) -> Self {
            self.value_detection = input;
            self
        }
        /// <p>The page number the value was detected on.</p>
        pub fn page_number(mut self, input: i32) -> Self {
            self.page_number = Some(input);
            self
        }
        /// <p>The page number the value was detected on.</p>
        pub fn set_page_number(mut self, input: std::option::Option<i32>) -> Self {
            self.page_number = input;
            self
        }
        /// <p>Shows the kind of currency, both the code and confidence associated with any monatary value detected.</p>
        pub fn currency(mut self, input: crate::model::ExpenseCurrency) -> Self {
            self.currency = Some(input);
            self
        }
        /// <p>Shows the kind of currency, both the code and confidence associated with any monatary value detected.</p>
        pub fn set_currency(
            mut self,
            input: std::option::Option<crate::model::ExpenseCurrency>,
        ) -> Self {
            self.currency = input;
            self
        }
        /// Appends an item to `group_properties`.
        ///
        /// To override the contents of this collection use [`set_group_properties`](Self::set_group_properties).
        ///
        /// <p>Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.</p>
        pub fn group_properties(mut self, input: crate::model::ExpenseGroupProperty) -> Self {
            let mut v = self.group_properties.unwrap_or_default();
            v.push(input);
            self.group_properties = Some(v);
            self
        }
        /// <p>Shows which group a response object belongs to, such as whether an address line belongs to the vendor's address or the recipent's address.</p>
        pub fn set_group_properties(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExpenseGroupProperty>>,
        ) -> Self {
            self.group_properties = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseField`](crate::model::ExpenseField).
        pub fn build(self) -> crate::model::ExpenseField {
            crate::model::ExpenseField {
                r#type: self.r#type,
                label_detection: self.label_detection,
                value_detection: self.value_detection,
                page_number: self.page_number,
                currency: self.currency,
                group_properties: self.group_properties,
            }
        }
    }
}

/// <p>Shows the group that a certain key belongs to. This helps differentiate between names and addresses for different organizations, that can be hard to determine via JSON response.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseGroupProperty {
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    #[doc(hidden)]
    pub types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl ExpenseGroupProperty {
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    pub fn types(&self) -> std::option::Option<&[std::string::String]> {
        self.types.as_deref()
    }
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl ExpenseGroupProperty {
    /// Creates a new builder-style object to manufacture [`ExpenseGroupProperty`](crate::model::ExpenseGroupProperty).
    pub fn builder() -> crate::model::expense_group_property::Builder {
        crate::model::expense_group_property::Builder::default()
    }
}

/// See [`ExpenseGroupProperty`](crate::model::ExpenseGroupProperty).
pub mod expense_group_property {

    /// A builder for [`ExpenseGroupProperty`](crate::model::ExpenseGroupProperty).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) types: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `types`.
        ///
        /// To override the contents of this collection use [`set_types`](Self::set_types).
        ///
        /// <p>Informs you on whether the expense group is a name or an address.</p>
        pub fn types(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.types.unwrap_or_default();
            v.push(input.into());
            self.types = Some(v);
            self
        }
        /// <p>Informs you on whether the expense group is a name or an address.</p>
        pub fn set_types(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.types = input;
            self
        }
        /// <p>Provides a group Id number, which will be the same for each in the group.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>Provides a group Id number, which will be the same for each in the group.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseGroupProperty`](crate::model::ExpenseGroupProperty).
        pub fn build(self) -> crate::model::ExpenseGroupProperty {
            crate::model::ExpenseGroupProperty {
                types: self.types,
                id: self.id,
            }
        }
    }
}

/// <p>Returns the kind of currency detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseCurrency {
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>Percentage confideence in the detected currency.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl ExpenseCurrency {
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>Percentage confideence in the detected currency.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl ExpenseCurrency {
    /// Creates a new builder-style object to manufacture [`ExpenseCurrency`](crate::model::ExpenseCurrency).
    pub fn builder() -> crate::model::expense_currency::Builder {
        crate::model::expense_currency::Builder::default()
    }
}

/// See [`ExpenseCurrency`](crate::model::ExpenseCurrency).
pub mod expense_currency {

    /// A builder for [`ExpenseCurrency`](crate::model::ExpenseCurrency).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) code: std::option::Option<std::string::String>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>Currency code for detected currency. the current supported codes are:</p>
        /// <ul>
        /// <li> <p>USD</p> </li>
        /// <li> <p>EUR</p> </li>
        /// <li> <p>GBP</p> </li>
        /// <li> <p>CAD</p> </li>
        /// <li> <p>INR</p> </li>
        /// <li> <p>JPY</p> </li>
        /// <li> <p>CHF</p> </li>
        /// <li> <p>AUD</p> </li>
        /// <li> <p>CNY</p> </li>
        /// <li> <p>BZR</p> </li>
        /// <li> <p>SEK</p> </li>
        /// <li> <p>HKD</p> </li>
        /// </ul>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.code = Some(input.into());
            self
        }
        /// <p>Currency code for detected currency. the current supported codes are:</p>
        /// <ul>
        /// <li> <p>USD</p> </li>
        /// <li> <p>EUR</p> </li>
        /// <li> <p>GBP</p> </li>
        /// <li> <p>CAD</p> </li>
        /// <li> <p>INR</p> </li>
        /// <li> <p>JPY</p> </li>
        /// <li> <p>CHF</p> </li>
        /// <li> <p>AUD</p> </li>
        /// <li> <p>CNY</p> </li>
        /// <li> <p>BZR</p> </li>
        /// <li> <p>SEK</p> </li>
        /// <li> <p>HKD</p> </li>
        /// </ul>
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.code = input;
            self
        }
        /// <p>Percentage confideence in the detected currency.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>Percentage confideence in the detected currency.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseCurrency`](crate::model::ExpenseCurrency).
        pub fn build(self) -> crate::model::ExpenseCurrency {
            crate::model::ExpenseCurrency {
                code: self.code,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>An object used to store information about the Value or Label detected by Amazon Textract.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseDetection {
    /// <p>The word or line of text recognized by Amazon Textract</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::model::Geometry>,
    /// <p>The confidence in detection, as a percentage</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl ExpenseDetection {
    /// <p>The word or line of text recognized by Amazon Textract</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    pub fn geometry(&self) -> std::option::Option<&crate::model::Geometry> {
        self.geometry.as_ref()
    }
    /// <p>The confidence in detection, as a percentage</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl ExpenseDetection {
    /// Creates a new builder-style object to manufacture [`ExpenseDetection`](crate::model::ExpenseDetection).
    pub fn builder() -> crate::model::expense_detection::Builder {
        crate::model::expense_detection::Builder::default()
    }
}

/// See [`ExpenseDetection`](crate::model::ExpenseDetection).
pub mod expense_detection {

    /// A builder for [`ExpenseDetection`](crate::model::ExpenseDetection).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) geometry: std::option::Option<crate::model::Geometry>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The word or line of text recognized by Amazon Textract</p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>The word or line of text recognized by Amazon Textract</p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn geometry(mut self, input: crate::model::Geometry) -> Self {
            self.geometry = Some(input);
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn set_geometry(mut self, input: std::option::Option<crate::model::Geometry>) -> Self {
            self.geometry = input;
            self
        }
        /// <p>The confidence in detection, as a percentage</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence in detection, as a percentage</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseDetection`](crate::model::ExpenseDetection).
        pub fn build(self) -> crate::model::ExpenseDetection {
            crate::model::ExpenseDetection {
                text: self.text,
                geometry: self.geometry,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>An object used to store information about the Type detected by Amazon Textract.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseType {
    /// <p>The word or line of text detected by Amazon Textract.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The confidence of accuracy, as a percentage.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl ExpenseType {
    /// <p>The word or line of text detected by Amazon Textract.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The confidence of accuracy, as a percentage.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl ExpenseType {
    /// Creates a new builder-style object to manufacture [`ExpenseType`](crate::model::ExpenseType).
    pub fn builder() -> crate::model::expense_type::Builder {
        crate::model::expense_type::Builder::default()
    }
}

/// See [`ExpenseType`](crate::model::ExpenseType).
pub mod expense_type {

    /// A builder for [`ExpenseType`](crate::model::ExpenseType).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The word or line of text detected by Amazon Textract.</p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>The word or line of text detected by Amazon Textract.</p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>The confidence of accuracy, as a percentage.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence of accuracy, as a percentage.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`ExpenseType`](crate::model::ExpenseType).
        pub fn build(self) -> crate::model::ExpenseType {
            crate::model::ExpenseType {
                text: self.text,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>Holds the structured data returned by AnalyzeDocument for lending documents.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingDocument {
    /// <p>An array of LendingField objects.</p>
    #[doc(hidden)]
    pub lending_fields: std::option::Option<std::vec::Vec<crate::model::LendingField>>,
    /// <p>A list of signatures detected in a lending document.</p>
    #[doc(hidden)]
    pub signature_detections: std::option::Option<std::vec::Vec<crate::model::SignatureDetection>>,
}
impl LendingDocument {
    /// <p>An array of LendingField objects.</p>
    pub fn lending_fields(&self) -> std::option::Option<&[crate::model::LendingField]> {
        self.lending_fields.as_deref()
    }
    /// <p>A list of signatures detected in a lending document.</p>
    pub fn signature_detections(&self) -> std::option::Option<&[crate::model::SignatureDetection]> {
        self.signature_detections.as_deref()
    }
}
impl LendingDocument {
    /// Creates a new builder-style object to manufacture [`LendingDocument`](crate::model::LendingDocument).
    pub fn builder() -> crate::model::lending_document::Builder {
        crate::model::lending_document::Builder::default()
    }
}

/// See [`LendingDocument`](crate::model::LendingDocument).
pub mod lending_document {

    /// A builder for [`LendingDocument`](crate::model::LendingDocument).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) lending_fields: std::option::Option<std::vec::Vec<crate::model::LendingField>>,
        pub(crate) signature_detections:
            std::option::Option<std::vec::Vec<crate::model::SignatureDetection>>,
    }
    impl Builder {
        /// Appends an item to `lending_fields`.
        ///
        /// To override the contents of this collection use [`set_lending_fields`](Self::set_lending_fields).
        ///
        /// <p>An array of LendingField objects.</p>
        pub fn lending_fields(mut self, input: crate::model::LendingField) -> Self {
            let mut v = self.lending_fields.unwrap_or_default();
            v.push(input);
            self.lending_fields = Some(v);
            self
        }
        /// <p>An array of LendingField objects.</p>
        pub fn set_lending_fields(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LendingField>>,
        ) -> Self {
            self.lending_fields = input;
            self
        }
        /// Appends an item to `signature_detections`.
        ///
        /// To override the contents of this collection use [`set_signature_detections`](Self::set_signature_detections).
        ///
        /// <p>A list of signatures detected in a lending document.</p>
        pub fn signature_detections(mut self, input: crate::model::SignatureDetection) -> Self {
            let mut v = self.signature_detections.unwrap_or_default();
            v.push(input);
            self.signature_detections = Some(v);
            self
        }
        /// <p>A list of signatures detected in a lending document.</p>
        pub fn set_signature_detections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SignatureDetection>>,
        ) -> Self {
            self.signature_detections = input;
            self
        }
        /// Consumes the builder and constructs a [`LendingDocument`](crate::model::LendingDocument).
        pub fn build(self) -> crate::model::LendingDocument {
            crate::model::LendingDocument {
                lending_fields: self.lending_fields,
                signature_detections: self.signature_detections,
            }
        }
    }
}

/// <p>Information regarding a detected signature on a page.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SignatureDetection {
    /// <p>The confidence, from 0 to 100, in the predicted values for a detected signature.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::model::Geometry>,
}
impl SignatureDetection {
    /// <p>The confidence, from 0 to 100, in the predicted values for a detected signature.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    pub fn geometry(&self) -> std::option::Option<&crate::model::Geometry> {
        self.geometry.as_ref()
    }
}
impl SignatureDetection {
    /// Creates a new builder-style object to manufacture [`SignatureDetection`](crate::model::SignatureDetection).
    pub fn builder() -> crate::model::signature_detection::Builder {
        crate::model::signature_detection::Builder::default()
    }
}

/// See [`SignatureDetection`](crate::model::SignatureDetection).
pub mod signature_detection {

    /// A builder for [`SignatureDetection`](crate::model::SignatureDetection).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) confidence: std::option::Option<f32>,
        pub(crate) geometry: std::option::Option<crate::model::Geometry>,
    }
    impl Builder {
        /// <p>The confidence, from 0 to 100, in the predicted values for a detected signature.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence, from 0 to 100, in the predicted values for a detected signature.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn geometry(mut self, input: crate::model::Geometry) -> Self {
            self.geometry = Some(input);
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn set_geometry(mut self, input: std::option::Option<crate::model::Geometry>) -> Self {
            self.geometry = input;
            self
        }
        /// Consumes the builder and constructs a [`SignatureDetection`](crate::model::SignatureDetection).
        pub fn build(self) -> crate::model::SignatureDetection {
            crate::model::SignatureDetection {
                confidence: self.confidence,
                geometry: self.geometry,
            }
        }
    }
}

/// <p>Holds the normalized key-value pairs returned by AnalyzeDocument, including the document type, detected text, and geometry.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingField {
    /// <p>The type of the lending document.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The results extracted for a lending document.</p>
    #[doc(hidden)]
    pub key_detection: std::option::Option<crate::model::LendingDetection>,
    /// <p>An array of LendingDetection objects.</p>
    #[doc(hidden)]
    pub value_detections: std::option::Option<std::vec::Vec<crate::model::LendingDetection>>,
}
impl LendingField {
    /// <p>The type of the lending document.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The results extracted for a lending document.</p>
    pub fn key_detection(&self) -> std::option::Option<&crate::model::LendingDetection> {
        self.key_detection.as_ref()
    }
    /// <p>An array of LendingDetection objects.</p>
    pub fn value_detections(&self) -> std::option::Option<&[crate::model::LendingDetection]> {
        self.value_detections.as_deref()
    }
}
impl LendingField {
    /// Creates a new builder-style object to manufacture [`LendingField`](crate::model::LendingField).
    pub fn builder() -> crate::model::lending_field::Builder {
        crate::model::lending_field::Builder::default()
    }
}

/// See [`LendingField`](crate::model::LendingField).
pub mod lending_field {

    /// A builder for [`LendingField`](crate::model::LendingField).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) r#type: std::option::Option<std::string::String>,
        pub(crate) key_detection: std::option::Option<crate::model::LendingDetection>,
        pub(crate) value_detections:
            std::option::Option<std::vec::Vec<crate::model::LendingDetection>>,
    }
    impl Builder {
        /// <p>The type of the lending document.</p>
        pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
            self.r#type = Some(input.into());
            self
        }
        /// <p>The type of the lending document.</p>
        pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.r#type = input;
            self
        }
        /// <p>The results extracted for a lending document.</p>
        pub fn key_detection(mut self, input: crate::model::LendingDetection) -> Self {
            self.key_detection = Some(input);
            self
        }
        /// <p>The results extracted for a lending document.</p>
        pub fn set_key_detection(
            mut self,
            input: std::option::Option<crate::model::LendingDetection>,
        ) -> Self {
            self.key_detection = input;
            self
        }
        /// Appends an item to `value_detections`.
        ///
        /// To override the contents of this collection use [`set_value_detections`](Self::set_value_detections).
        ///
        /// <p>An array of LendingDetection objects.</p>
        pub fn value_detections(mut self, input: crate::model::LendingDetection) -> Self {
            let mut v = self.value_detections.unwrap_or_default();
            v.push(input);
            self.value_detections = Some(v);
            self
        }
        /// <p>An array of LendingDetection objects.</p>
        pub fn set_value_detections(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LendingDetection>>,
        ) -> Self {
            self.value_detections = input;
            self
        }
        /// Consumes the builder and constructs a [`LendingField`](crate::model::LendingField).
        pub fn build(self) -> crate::model::LendingField {
            crate::model::LendingField {
                r#type: self.r#type,
                key_detection: self.key_detection,
                value_detections: self.value_detections,
            }
        }
    }
}

/// <p>The results extracted for a lending document.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingDetection {
    /// <p>The text extracted for a detected value in a lending document.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>The selection status of a selection element, such as an option button or check box.</p>
    #[doc(hidden)]
    pub selection_status: std::option::Option<crate::model::SelectionStatus>,
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::model::Geometry>,
    /// <p>The confidence level for the text of a detected value in a lending document.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl LendingDetection {
    /// <p>The text extracted for a detected value in a lending document.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>The selection status of a selection element, such as an option button or check box.</p>
    pub fn selection_status(&self) -> std::option::Option<&crate::model::SelectionStatus> {
        self.selection_status.as_ref()
    }
    /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
    pub fn geometry(&self) -> std::option::Option<&crate::model::Geometry> {
        self.geometry.as_ref()
    }
    /// <p>The confidence level for the text of a detected value in a lending document.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl LendingDetection {
    /// Creates a new builder-style object to manufacture [`LendingDetection`](crate::model::LendingDetection).
    pub fn builder() -> crate::model::lending_detection::Builder {
        crate::model::lending_detection::Builder::default()
    }
}

/// See [`LendingDetection`](crate::model::LendingDetection).
pub mod lending_detection {

    /// A builder for [`LendingDetection`](crate::model::LendingDetection).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) text: std::option::Option<std::string::String>,
        pub(crate) selection_status: std::option::Option<crate::model::SelectionStatus>,
        pub(crate) geometry: std::option::Option<crate::model::Geometry>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The text extracted for a detected value in a lending document.</p>
        pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
            self.text = Some(input.into());
            self
        }
        /// <p>The text extracted for a detected value in a lending document.</p>
        pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.text = input;
            self
        }
        /// <p>The selection status of a selection element, such as an option button or check box.</p>
        pub fn selection_status(mut self, input: crate::model::SelectionStatus) -> Self {
            self.selection_status = Some(input);
            self
        }
        /// <p>The selection status of a selection element, such as an option button or check box.</p>
        pub fn set_selection_status(
            mut self,
            input: std::option::Option<crate::model::SelectionStatus>,
        ) -> Self {
            self.selection_status = input;
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn geometry(mut self, input: crate::model::Geometry) -> Self {
            self.geometry = Some(input);
            self
        }
        /// <p>Information about where the following items are located on a document page: detected page, text, key-value pairs, tables, table cells, and selection elements.</p>
        pub fn set_geometry(mut self, input: std::option::Option<crate::model::Geometry>) -> Self {
            self.geometry = input;
            self
        }
        /// <p>The confidence level for the text of a detected value in a lending document.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>The confidence level for the text of a detected value in a lending document.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`LendingDetection`](crate::model::LendingDetection).
        pub fn build(self) -> crate::model::LendingDetection {
            crate::model::LendingDetection {
                text: self.text,
                selection_status: self.selection_status,
                geometry: self.geometry,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>The class assigned to a Page object detected in an input document. Contains information regarding the predicted type/class of a document's page and the page number that the Page object was detected on.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PageClassification {
    /// <p>The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.</p>
    #[doc(hidden)]
    pub page_type: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
    /// <p> The page number the value was detected on, relative to Amazon Textract's starting position.</p>
    #[doc(hidden)]
    pub page_number: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
}
impl PageClassification {
    /// <p>The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.</p>
    pub fn page_type(&self) -> std::option::Option<&[crate::model::Prediction]> {
        self.page_type.as_deref()
    }
    /// <p> The page number the value was detected on, relative to Amazon Textract's starting position.</p>
    pub fn page_number(&self) -> std::option::Option<&[crate::model::Prediction]> {
        self.page_number.as_deref()
    }
}
impl PageClassification {
    /// Creates a new builder-style object to manufacture [`PageClassification`](crate::model::PageClassification).
    pub fn builder() -> crate::model::page_classification::Builder {
        crate::model::page_classification::Builder::default()
    }
}

/// See [`PageClassification`](crate::model::PageClassification).
pub mod page_classification {

    /// A builder for [`PageClassification`](crate::model::PageClassification).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) page_type: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
        pub(crate) page_number: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
    }
    impl Builder {
        /// Appends an item to `page_type`.
        ///
        /// To override the contents of this collection use [`set_page_type`](Self::set_page_type).
        ///
        /// <p>The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.</p>
        pub fn page_type(mut self, input: crate::model::Prediction) -> Self {
            let mut v = self.page_type.unwrap_or_default();
            v.push(input);
            self.page_type = Some(v);
            self
        }
        /// <p>The class, or document type, assigned to a detected Page object. The class, or document type, assigned to a detected Page object.</p>
        pub fn set_page_type(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
        ) -> Self {
            self.page_type = input;
            self
        }
        /// Appends an item to `page_number`.
        ///
        /// To override the contents of this collection use [`set_page_number`](Self::set_page_number).
        ///
        /// <p> The page number the value was detected on, relative to Amazon Textract's starting position.</p>
        pub fn page_number(mut self, input: crate::model::Prediction) -> Self {
            let mut v = self.page_number.unwrap_or_default();
            v.push(input);
            self.page_number = Some(v);
            self
        }
        /// <p> The page number the value was detected on, relative to Amazon Textract's starting position.</p>
        pub fn set_page_number(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Prediction>>,
        ) -> Self {
            self.page_number = input;
            self
        }
        /// Consumes the builder and constructs a [`PageClassification`](crate::model::PageClassification).
        pub fn build(self) -> crate::model::PageClassification {
            crate::model::PageClassification {
                page_type: self.page_type,
                page_number: self.page_number,
            }
        }
    }
}

/// <p>Contains information regarding predicted values returned by Amazon Textract operations, including the predicted value and the confidence in the predicted value.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Prediction {
    /// <p>The predicted value of a detected object.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Amazon Textract's confidence in its predicted value.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl Prediction {
    /// <p>The predicted value of a detected object.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Amazon Textract's confidence in its predicted value.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl Prediction {
    /// Creates a new builder-style object to manufacture [`Prediction`](crate::model::Prediction).
    pub fn builder() -> crate::model::prediction::Builder {
        crate::model::prediction::Builder::default()
    }
}

/// See [`Prediction`](crate::model::Prediction).
pub mod prediction {

    /// A builder for [`Prediction`](crate::model::Prediction).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) value: std::option::Option<std::string::String>,
        pub(crate) confidence: std::option::Option<f32>,
    }
    impl Builder {
        /// <p>The predicted value of a detected object.</p>
        pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
            self.value = Some(input.into());
            self
        }
        /// <p>The predicted value of a detected object.</p>
        pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.value = input;
            self
        }
        /// <p>Amazon Textract's confidence in its predicted value.</p>
        pub fn confidence(mut self, input: f32) -> Self {
            self.confidence = Some(input);
            self
        }
        /// <p>Amazon Textract's confidence in its predicted value.</p>
        pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
            self.confidence = input;
            self
        }
        /// Consumes the builder and constructs a [`Prediction`](crate::model::Prediction).
        pub fn build(self) -> crate::model::Prediction {
            crate::model::Prediction {
                value: self.value,
                confidence: self.confidence,
            }
        }
    }
}

/// <p>The input document, either as bytes or as an S3 object.</p>
/// <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass a document loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. </p>
/// <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the <code>S3Object</code> property. Documents stored in an S3 bucket don't need to be base64 encoded.</p>
/// <p>The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations.</p>
/// <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property.</p>
/// <p>For Amazon Textract to process an S3 object, the user must have permission to access the S3 object. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Document {
    /// <p>A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. </p>
    #[doc(hidden)]
    pub bytes: std::option::Option<aws_smithy_types::Blob>,
    /// <p>Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.</p>
    #[doc(hidden)]
    pub s3_object: std::option::Option<crate::model::S3Object>,
}
impl Document {
    /// <p>A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. </p>
    pub fn bytes(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.bytes.as_ref()
    }
    /// <p>Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.</p>
    pub fn s3_object(&self) -> std::option::Option<&crate::model::S3Object> {
        self.s3_object.as_ref()
    }
}
impl Document {
    /// Creates a new builder-style object to manufacture [`Document`](crate::model::Document).
    pub fn builder() -> crate::model::document::Builder {
        crate::model::document::Builder::default()
    }
}

/// See [`Document`](crate::model::Document).
pub mod document {

    /// A builder for [`Document`](crate::model::Document).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bytes: std::option::Option<aws_smithy_types::Blob>,
        pub(crate) s3_object: std::option::Option<crate::model::S3Object>,
    }
    impl Builder {
        /// <p>A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</p>
        /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. </p>
        pub fn bytes(mut self, input: aws_smithy_types::Blob) -> Self {
            self.bytes = Some(input);
            self
        }
        /// <p>A blob of base64-encoded document bytes. The maximum size of a document that's provided in a blob of bytes is 5 MB. The document bytes must be in PNG or JPEG format.</p>
        /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes passed using the <code>Bytes</code> field. </p>
        pub fn set_bytes(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
            self.bytes = input;
            self
        }
        /// <p>Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.</p>
        pub fn s3_object(mut self, input: crate::model::S3Object) -> Self {
            self.s3_object = Some(input);
            self
        }
        /// <p>Identifies an S3 object as the document source. The maximum size of a document that's stored in an S3 bucket is 5 MB.</p>
        pub fn set_s3_object(mut self, input: std::option::Option<crate::model::S3Object>) -> Self {
            self.s3_object = input;
            self
        }
        /// Consumes the builder and constructs a [`Document`](crate::model::Document).
        pub fn build(self) -> crate::model::Document {
            crate::model::Document {
                bytes: self.bytes,
                s3_object: self.s3_object,
            }
        }
    }
}

/// <p>Shows the results of the human in the loop evaluation. If there is no HumanLoopArn, the input did not trigger human review.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HumanLoopActivationOutput {
    /// <p>The Amazon Resource Name (ARN) of the HumanLoop created.</p>
    #[doc(hidden)]
    pub human_loop_arn: std::option::Option<std::string::String>,
    /// <p>Shows if and why human review was needed.</p>
    #[doc(hidden)]
    pub human_loop_activation_reasons: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Shows the result of condition evaluations, including those conditions which activated a human review.</p>
    #[doc(hidden)]
    pub human_loop_activation_conditions_evaluation_results:
        std::option::Option<std::string::String>,
}
impl HumanLoopActivationOutput {
    /// <p>The Amazon Resource Name (ARN) of the HumanLoop created.</p>
    pub fn human_loop_arn(&self) -> std::option::Option<&str> {
        self.human_loop_arn.as_deref()
    }
    /// <p>Shows if and why human review was needed.</p>
    pub fn human_loop_activation_reasons(&self) -> std::option::Option<&[std::string::String]> {
        self.human_loop_activation_reasons.as_deref()
    }
    /// <p>Shows the result of condition evaluations, including those conditions which activated a human review.</p>
    pub fn human_loop_activation_conditions_evaluation_results(&self) -> std::option::Option<&str> {
        self.human_loop_activation_conditions_evaluation_results
            .as_deref()
    }
}
impl HumanLoopActivationOutput {
    /// Creates a new builder-style object to manufacture [`HumanLoopActivationOutput`](crate::model::HumanLoopActivationOutput).
    pub fn builder() -> crate::model::human_loop_activation_output::Builder {
        crate::model::human_loop_activation_output::Builder::default()
    }
}

/// See [`HumanLoopActivationOutput`](crate::model::HumanLoopActivationOutput).
pub mod human_loop_activation_output {

    /// A builder for [`HumanLoopActivationOutput`](crate::model::HumanLoopActivationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) human_loop_arn: std::option::Option<std::string::String>,
        pub(crate) human_loop_activation_reasons:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) human_loop_activation_conditions_evaluation_results:
            std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the HumanLoop created.</p>
        pub fn human_loop_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.human_loop_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the HumanLoop created.</p>
        pub fn set_human_loop_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.human_loop_arn = input;
            self
        }
        /// Appends an item to `human_loop_activation_reasons`.
        ///
        /// To override the contents of this collection use [`set_human_loop_activation_reasons`](Self::set_human_loop_activation_reasons).
        ///
        /// <p>Shows if and why human review was needed.</p>
        pub fn human_loop_activation_reasons(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.human_loop_activation_reasons.unwrap_or_default();
            v.push(input.into());
            self.human_loop_activation_reasons = Some(v);
            self
        }
        /// <p>Shows if and why human review was needed.</p>
        pub fn set_human_loop_activation_reasons(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.human_loop_activation_reasons = input;
            self
        }
        /// <p>Shows the result of condition evaluations, including those conditions which activated a human review.</p>
        pub fn human_loop_activation_conditions_evaluation_results(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.human_loop_activation_conditions_evaluation_results = Some(input.into());
            self
        }
        /// <p>Shows the result of condition evaluations, including those conditions which activated a human review.</p>
        pub fn set_human_loop_activation_conditions_evaluation_results(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.human_loop_activation_conditions_evaluation_results = input;
            self
        }
        /// Consumes the builder and constructs a [`HumanLoopActivationOutput`](crate::model::HumanLoopActivationOutput).
        pub fn build(self) -> crate::model::HumanLoopActivationOutput {
            crate::model::HumanLoopActivationOutput {
                human_loop_arn: self.human_loop_arn,
                human_loop_activation_reasons: self.human_loop_activation_reasons,
                human_loop_activation_conditions_evaluation_results: self
                    .human_loop_activation_conditions_evaluation_results,
            }
        }
    }
}

/// <p>Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes of the image before review. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HumanLoopConfig {
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    #[doc(hidden)]
    pub human_loop_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    #[doc(hidden)]
    pub flow_definition_arn: std::option::Option<std::string::String>,
    /// <p>Sets attributes of the input data.</p>
    #[doc(hidden)]
    pub data_attributes: std::option::Option<crate::model::HumanLoopDataAttributes>,
}
impl HumanLoopConfig {
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    pub fn human_loop_name(&self) -> std::option::Option<&str> {
        self.human_loop_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    pub fn flow_definition_arn(&self) -> std::option::Option<&str> {
        self.flow_definition_arn.as_deref()
    }
    /// <p>Sets attributes of the input data.</p>
    pub fn data_attributes(&self) -> std::option::Option<&crate::model::HumanLoopDataAttributes> {
        self.data_attributes.as_ref()
    }
}
impl HumanLoopConfig {
    /// Creates a new builder-style object to manufacture [`HumanLoopConfig`](crate::model::HumanLoopConfig).
    pub fn builder() -> crate::model::human_loop_config::Builder {
        crate::model::human_loop_config::Builder::default()
    }
}

/// See [`HumanLoopConfig`](crate::model::HumanLoopConfig).
pub mod human_loop_config {

    /// A builder for [`HumanLoopConfig`](crate::model::HumanLoopConfig).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) human_loop_name: std::option::Option<std::string::String>,
        pub(crate) flow_definition_arn: std::option::Option<std::string::String>,
        pub(crate) data_attributes: std::option::Option<crate::model::HumanLoopDataAttributes>,
    }
    impl Builder {
        /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
        pub fn human_loop_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.human_loop_name = Some(input.into());
            self
        }
        /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
        pub fn set_human_loop_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.human_loop_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
        pub fn flow_definition_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.flow_definition_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
        pub fn set_flow_definition_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.flow_definition_arn = input;
            self
        }
        /// <p>Sets attributes of the input data.</p>
        pub fn data_attributes(mut self, input: crate::model::HumanLoopDataAttributes) -> Self {
            self.data_attributes = Some(input);
            self
        }
        /// <p>Sets attributes of the input data.</p>
        pub fn set_data_attributes(
            mut self,
            input: std::option::Option<crate::model::HumanLoopDataAttributes>,
        ) -> Self {
            self.data_attributes = input;
            self
        }
        /// Consumes the builder and constructs a [`HumanLoopConfig`](crate::model::HumanLoopConfig).
        pub fn build(self) -> crate::model::HumanLoopConfig {
            crate::model::HumanLoopConfig {
                human_loop_name: self.human_loop_name,
                flow_definition_arn: self.flow_definition_arn,
                data_attributes: self.data_attributes,
            }
        }
    }
}

/// <p>Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information and adult content. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HumanLoopDataAttributes {
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    #[doc(hidden)]
    pub content_classifiers: std::option::Option<std::vec::Vec<crate::model::ContentClassifier>>,
}
impl HumanLoopDataAttributes {
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    pub fn content_classifiers(&self) -> std::option::Option<&[crate::model::ContentClassifier]> {
        self.content_classifiers.as_deref()
    }
}
impl HumanLoopDataAttributes {
    /// Creates a new builder-style object to manufacture [`HumanLoopDataAttributes`](crate::model::HumanLoopDataAttributes).
    pub fn builder() -> crate::model::human_loop_data_attributes::Builder {
        crate::model::human_loop_data_attributes::Builder::default()
    }
}

/// See [`HumanLoopDataAttributes`](crate::model::HumanLoopDataAttributes).
pub mod human_loop_data_attributes {

    /// A builder for [`HumanLoopDataAttributes`](crate::model::HumanLoopDataAttributes).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) content_classifiers:
            std::option::Option<std::vec::Vec<crate::model::ContentClassifier>>,
    }
    impl Builder {
        /// Appends an item to `content_classifiers`.
        ///
        /// To override the contents of this collection use [`set_content_classifiers`](Self::set_content_classifiers).
        ///
        /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
        pub fn content_classifiers(mut self, input: crate::model::ContentClassifier) -> Self {
            let mut v = self.content_classifiers.unwrap_or_default();
            v.push(input);
            self.content_classifiers = Some(v);
            self
        }
        /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
        pub fn set_content_classifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ContentClassifier>>,
        ) -> Self {
            self.content_classifiers = input;
            self
        }
        /// Consumes the builder and constructs a [`HumanLoopDataAttributes`](crate::model::HumanLoopDataAttributes).
        pub fn build(self) -> crate::model::HumanLoopDataAttributes {
            crate::model::HumanLoopDataAttributes {
                content_classifiers: self.content_classifiers,
            }
        }
    }
}

/// When writing a match expression against `ContentClassifier`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let contentclassifier = unimplemented!();
/// match contentclassifier {
///     ContentClassifier::FreeOfAdultContent => { /* ... */ },
///     ContentClassifier::FreeOfPersonallyIdentifiableInformation => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `contentclassifier` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ContentClassifier::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ContentClassifier::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ContentClassifier::NewFeature` is defined.
/// Specifically, when `contentclassifier` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ContentClassifier::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ContentClassifier {
    #[allow(missing_docs)] // documentation missing in model
    FreeOfAdultContent,
    #[allow(missing_docs)] // documentation missing in model
    FreeOfPersonallyIdentifiableInformation,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::types::UnknownVariantValue),
}
impl std::convert::From<&str> for ContentClassifier {
    fn from(s: &str) -> Self {
        match s {
            "FreeOfAdultContent" => ContentClassifier::FreeOfAdultContent,
            "FreeOfPersonallyIdentifiableInformation" => {
                ContentClassifier::FreeOfPersonallyIdentifiableInformation
            }
            other => {
                ContentClassifier::Unknown(crate::types::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ContentClassifier {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ContentClassifier::from(s))
    }
}
impl ContentClassifier {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ContentClassifier::FreeOfAdultContent => "FreeOfAdultContent",
            ContentClassifier::FreeOfPersonallyIdentifiableInformation => {
                "FreeOfPersonallyIdentifiableInformation"
            }
            ContentClassifier::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "FreeOfAdultContent",
            "FreeOfPersonallyIdentifiableInformation",
        ]
    }
}
impl AsRef<str> for ContentClassifier {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
