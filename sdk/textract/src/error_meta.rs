// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You aren't authorized to perform the action. Use the Amazon Resource Name (ARN) of an authorized user or IAM role to perform the operation.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Amazon Textract isn't able to read the document. For more information on the document limits in Amazon Textract, see <code>limits</code>.</p>
    BadDocumentException(crate::error::BadDocumentException),
    /// <p>The document can't be processed because it's too large. The maximum document size for synchronous operations 10 MB. The maximum document size for asynchronous operations is 500 MB for PDF files.</p>
    DocumentTooLargeException(crate::error::DocumentTooLargeException),
    /// <p>Indicates you have exceeded the maximum number of active human in the loop workflows available</p>
    HumanLoopQuotaExceededException(crate::error::HumanLoopQuotaExceededException),
    /// <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation. </p>
    IdempotentParameterMismatchException(crate::error::IdempotentParameterMismatchException),
    /// <p>Amazon Textract experienced a service issue. Try your call again.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>An invalid job identifier was passed to an asynchronous analysis operation.</p>
    InvalidJobIdException(crate::error::InvalidJobIdException),
    /// <p> Indicates you do not have decrypt permissions with the KMS key entered, or the KMS key was entered incorrectly. </p>
    InvalidKmsKeyException(crate::error::InvalidKmsKeyException),
    /// <p>An input parameter violated a constraint. For example, in synchronous operations, an <code>InvalidParameterException</code> exception occurs when neither of the <code>S3Object</code> or <code>Bytes</code> values are supplied in the <code>Document</code> request parameter. Validate your parameter before calling the API operation again.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>Amazon Textract is unable to access the S3 object that's specified in the request. for more information, <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Configure Access to Amazon S3</a> For troubleshooting information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html">Troubleshooting Amazon S3</a> </p>
    InvalidS3ObjectException(crate::error::InvalidS3ObjectException),
    /// <p>An Amazon Textract service limit was exceeded. For example, if you start too many asynchronous jobs concurrently, calls to start operations (<code>StartDocumentTextDetection</code>, for example) raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Textract service limit. </p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Textract.</p>
    ProvisionedThroughputExceededException(crate::error::ProvisionedThroughputExceededException),
    /// <p>Amazon Textract is temporarily unable to process the request. Try your call again.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The format of the input document isn't supported. Documents for operations can be in PNG, JPEG, PDF, or TIFF format.</p>
    UnsupportedDocumentException(crate::error::UnsupportedDocumentException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadDocumentException(inner) => inner.fmt(f),
            Error::DocumentTooLargeException(inner) => inner.fmt(f),
            Error::HumanLoopQuotaExceededException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidJobIdException(inner) => inner.fmt(f),
            Error::InvalidKmsKeyException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidS3ObjectException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ProvisionedThroughputExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnsupportedDocumentException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AnalyzeDocumentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AnalyzeDocumentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AnalyzeDocumentError> for Error {
    fn from(err: crate::error::AnalyzeDocumentError) -> Self {
        match err {
            crate::error::AnalyzeDocumentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AnalyzeDocumentError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::AnalyzeDocumentError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::AnalyzeDocumentError::HumanLoopQuotaExceededException(inner) => {
                Error::HumanLoopQuotaExceededException(inner)
            }
            crate::error::AnalyzeDocumentError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AnalyzeDocumentError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AnalyzeDocumentError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::AnalyzeDocumentError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::AnalyzeDocumentError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AnalyzeDocumentError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::AnalyzeDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AnalyzeExpenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AnalyzeExpenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AnalyzeExpenseError> for Error {
    fn from(err: crate::error::AnalyzeExpenseError) -> Self {
        match err {
            crate::error::AnalyzeExpenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AnalyzeExpenseError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::AnalyzeExpenseError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::AnalyzeExpenseError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AnalyzeExpenseError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AnalyzeExpenseError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::AnalyzeExpenseError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::AnalyzeExpenseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AnalyzeExpenseError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::AnalyzeExpenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AnalyzeIDError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AnalyzeIDError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AnalyzeIDError> for Error {
    fn from(err: crate::error::AnalyzeIDError) -> Self {
        match err {
            crate::error::AnalyzeIDError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AnalyzeIDError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::AnalyzeIDError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::AnalyzeIDError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AnalyzeIDError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AnalyzeIDError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::AnalyzeIDError::ProvisionedThroughputExceededException(inner) => {
                Error::ProvisionedThroughputExceededException(inner)
            }
            crate::error::AnalyzeIDError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AnalyzeIDError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::AnalyzeIDError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetectDocumentTextError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DetectDocumentTextError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetectDocumentTextError> for Error {
    fn from(err: crate::error::DetectDocumentTextError) -> Self {
        match err {
            crate::error::DetectDocumentTextError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DetectDocumentTextError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::DetectDocumentTextError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::DetectDocumentTextError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DetectDocumentTextError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DetectDocumentTextError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::DetectDocumentTextError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::DetectDocumentTextError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DetectDocumentTextError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::DetectDocumentTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentAnalysisError> for Error {
    fn from(err: crate::error::GetDocumentAnalysisError) -> Self {
        match err {
            crate::error::GetDocumentAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDocumentAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetDocumentAnalysisError::InvalidJobIdException(inner) => {
                Error::InvalidJobIdException(inner)
            }
            crate::error::GetDocumentAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::GetDocumentAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetDocumentAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::GetDocumentAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::GetDocumentAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDocumentAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentTextDetectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentTextDetectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentTextDetectionError> for Error {
    fn from(err: crate::error::GetDocumentTextDetectionError) -> Self {
        match err {
            crate::error::GetDocumentTextDetectionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDocumentTextDetectionError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetDocumentTextDetectionError::InvalidJobIdException(inner) => {
                Error::InvalidJobIdException(inner)
            }
            crate::error::GetDocumentTextDetectionError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::GetDocumentTextDetectionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetDocumentTextDetectionError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::GetDocumentTextDetectionError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::GetDocumentTextDetectionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetDocumentTextDetectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExpenseAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetExpenseAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExpenseAnalysisError> for Error {
    fn from(err: crate::error::GetExpenseAnalysisError) -> Self {
        match err {
            crate::error::GetExpenseAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetExpenseAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetExpenseAnalysisError::InvalidJobIdException(inner) => {
                Error::InvalidJobIdException(inner)
            }
            crate::error::GetExpenseAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::GetExpenseAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetExpenseAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::GetExpenseAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::GetExpenseAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetExpenseAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLendingAnalysisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLendingAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLendingAnalysisError> for Error {
    fn from(err: crate::error::GetLendingAnalysisError) -> Self {
        match err {
            crate::error::GetLendingAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLendingAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::GetLendingAnalysisError::InvalidJobIdException(inner) => {
                Error::InvalidJobIdException(inner)
            }
            crate::error::GetLendingAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::GetLendingAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetLendingAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::GetLendingAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::GetLendingAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLendingAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLendingAnalysisSummaryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLendingAnalysisSummaryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLendingAnalysisSummaryError> for Error {
    fn from(err: crate::error::GetLendingAnalysisSummaryError) -> Self {
        match err {
            crate::error::GetLendingAnalysisSummaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::GetLendingAnalysisSummaryError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::GetLendingAnalysisSummaryError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::error::GetLendingAnalysisSummaryError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::error::GetLendingAnalysisSummaryError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::GetLendingAnalysisSummaryError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::error::GetLendingAnalysisSummaryError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::GetLendingAnalysisSummaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetLendingAnalysisSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDocumentAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartDocumentAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDocumentAnalysisError> for Error {
    fn from(err: crate::error::StartDocumentAnalysisError) -> Self {
        match err {
            crate::error::StartDocumentAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartDocumentAnalysisError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::StartDocumentAnalysisError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::StartDocumentAnalysisError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartDocumentAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartDocumentAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::StartDocumentAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartDocumentAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::StartDocumentAnalysisError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartDocumentAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::StartDocumentAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartDocumentAnalysisError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::StartDocumentAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDocumentTextDetectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartDocumentTextDetectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDocumentTextDetectionError> for Error {
    fn from(err: crate::error::StartDocumentTextDetectionError) -> Self {
        match err {
            crate::error::StartDocumentTextDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::StartDocumentTextDetectionError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::error::StartDocumentTextDetectionError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::error::StartDocumentTextDetectionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartDocumentTextDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::StartDocumentTextDetectionError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::error::StartDocumentTextDetectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::StartDocumentTextDetectionError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::error::StartDocumentTextDetectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::StartDocumentTextDetectionError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::StartDocumentTextDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::StartDocumentTextDetectionError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::error::StartDocumentTextDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartExpenseAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartExpenseAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartExpenseAnalysisError> for Error {
    fn from(err: crate::error::StartExpenseAnalysisError) -> Self {
        match err {
            crate::error::StartExpenseAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartExpenseAnalysisError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::StartExpenseAnalysisError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::StartExpenseAnalysisError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartExpenseAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartExpenseAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::StartExpenseAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartExpenseAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::StartExpenseAnalysisError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartExpenseAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::StartExpenseAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartExpenseAnalysisError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::StartExpenseAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartLendingAnalysisError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartLendingAnalysisError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartLendingAnalysisError> for Error {
    fn from(err: crate::error::StartLendingAnalysisError) -> Self {
        match err {
            crate::error::StartLendingAnalysisError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartLendingAnalysisError::BadDocumentException(inner) => {
                Error::BadDocumentException(inner)
            }
            crate::error::StartLendingAnalysisError::DocumentTooLargeException(inner) => {
                Error::DocumentTooLargeException(inner)
            }
            crate::error::StartLendingAnalysisError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartLendingAnalysisError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartLendingAnalysisError::InvalidKmsKeyException(inner) => {
                Error::InvalidKmsKeyException(inner)
            }
            crate::error::StartLendingAnalysisError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartLendingAnalysisError::InvalidS3ObjectException(inner) => {
                Error::InvalidS3ObjectException(inner)
            }
            crate::error::StartLendingAnalysisError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartLendingAnalysisError::ProvisionedThroughputExceededException(
                inner,
            ) => Error::ProvisionedThroughputExceededException(inner),
            crate::error::StartLendingAnalysisError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartLendingAnalysisError::UnsupportedDocumentException(inner) => {
                Error::UnsupportedDocumentException(inner)
            }
            crate::error::StartLendingAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadDocumentException(e) => e.request_id(),
            Self::DocumentTooLargeException(e) => e.request_id(),
            Self::HumanLoopQuotaExceededException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidJobIdException(e) => e.request_id(),
            Self::InvalidKmsKeyException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidS3ObjectException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ProvisionedThroughputExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnsupportedDocumentException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
