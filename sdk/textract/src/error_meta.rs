// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You aren't authorized to perform the action. Use the Amazon Resource Name (ARN) of an authorized user or IAM role to perform the operation.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Amazon Textract isn't able to read the document. For more information on the document limits in Amazon Textract, see <code>limits</code>.</p>
    BadDocumentException(crate::types::error::BadDocumentException),
    /// <p>The document can't be processed because it's too large. The maximum document size for synchronous operations 10 MB. The maximum document size for asynchronous operations is 500 MB for PDF files.</p>
    DocumentTooLargeException(crate::types::error::DocumentTooLargeException),
    /// <p>Indicates you have exceeded the maximum number of active human in the loop workflows available</p>
    HumanLoopQuotaExceededException(crate::types::error::HumanLoopQuotaExceededException),
    /// <p>A <code>ClientRequestToken</code> input parameter was reused with an operation, but at least one of the other input parameters is different from the previous call to the operation. </p>
    IdempotentParameterMismatchException(crate::types::error::IdempotentParameterMismatchException),
    /// <p>Amazon Textract experienced a service issue. Try your call again.</p>
    InternalServerError(crate::types::error::InternalServerError),
    /// <p>An invalid job identifier was passed to an asynchronous analysis operation.</p>
    InvalidJobIdException(crate::types::error::InvalidJobIdException),
    /// <p> Indicates you do not have decrypt permissions with the KMS key entered, or the KMS key was entered incorrectly. </p>
    InvalidKmsKeyException(crate::types::error::InvalidKmsKeyException),
    /// <p>An input parameter violated a constraint. For example, in synchronous operations, an <code>InvalidParameterException</code> exception occurs when neither of the <code>S3Object</code> or <code>Bytes</code> values are supplied in the <code>Document</code> request parameter. Validate your parameter before calling the API operation again.</p>
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// <p>Amazon Textract is unable to access the S3 object that's specified in the request. for more information, <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Configure Access to Amazon S3</a> For troubleshooting information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/troubleshooting.html">Troubleshooting Amazon S3</a> </p>
    InvalidS3ObjectException(crate::types::error::InvalidS3ObjectException),
    /// <p>An Amazon Textract service limit was exceeded. For example, if you start too many asynchronous jobs concurrently, calls to start operations (<code>StartDocumentTextDetection</code>, for example) raise a LimitExceededException exception (HTTP status code: 400) until the number of concurrently running jobs is below the Amazon Textract service limit. </p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The number of requests exceeded your throughput limit. If you want to increase this limit, contact Amazon Textract.</p>
    ProvisionedThroughputExceededException(
        crate::types::error::ProvisionedThroughputExceededException,
    ),
    /// <p>Amazon Textract is temporarily unable to process the request. Try your call again.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The format of the input document isn't supported. Documents for operations can be in PNG, JPEG, PDF, or TIFF format.</p>
    UnsupportedDocumentException(crate::types::error::UnsupportedDocumentException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadDocumentException(inner) => inner.fmt(f),
            Error::DocumentTooLargeException(inner) => inner.fmt(f),
            Error::HumanLoopQuotaExceededException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidJobIdException(inner) => inner.fmt(f),
            Error::InvalidKmsKeyException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidS3ObjectException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ProvisionedThroughputExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UnsupportedDocumentException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::analyze_document::AnalyzeDocumentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::analyze_document::AnalyzeDocumentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::analyze_document::AnalyzeDocumentError> for Error {
    fn from(err: crate::operation::analyze_document::AnalyzeDocumentError) -> Self {
        match err {
            crate::operation::analyze_document::AnalyzeDocumentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::HumanLoopQuotaExceededException(inner) => Error::HumanLoopQuotaExceededException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::analyze_document::AnalyzeDocumentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::analyze_expense::AnalyzeExpenseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::analyze_expense::AnalyzeExpenseError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::analyze_expense::AnalyzeExpenseError> for Error {
    fn from(err: crate::operation::analyze_expense::AnalyzeExpenseError) -> Self {
        match err {
            crate::operation::analyze_expense::AnalyzeExpenseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::analyze_expense::AnalyzeExpenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::analyze_id::AnalyzeIDError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::analyze_id::AnalyzeIDError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::analyze_id::AnalyzeIDError> for Error {
    fn from(err: crate::operation::analyze_id::AnalyzeIDError) -> Self {
        match err {
            crate::operation::analyze_id::AnalyzeIDError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::analyze_id::AnalyzeIDError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::analyze_id::AnalyzeIDError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::analyze_id::AnalyzeIDError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::analyze_id::AnalyzeIDError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::analyze_id::AnalyzeIDError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::analyze_id::AnalyzeIDError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::analyze_id::AnalyzeIDError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::analyze_id::AnalyzeIDError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::analyze_id::AnalyzeIDError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::detect_document_text::DetectDocumentTextError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::detect_document_text::DetectDocumentTextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::detect_document_text::DetectDocumentTextError> for Error {
    fn from(err: crate::operation::detect_document_text::DetectDocumentTextError) -> Self {
        match err {
            crate::operation::detect_document_text::DetectDocumentTextError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::detect_document_text::DetectDocumentTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_document_analysis::GetDocumentAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_document_analysis::GetDocumentAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_document_analysis::GetDocumentAnalysisError> for Error {
    fn from(err: crate::operation::get_document_analysis::GetDocumentAnalysisError) -> Self {
        match err {
            crate::operation::get_document_analysis::GetDocumentAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_document_analysis::GetDocumentAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_document_text_detection::GetDocumentTextDetectionError> for Error {
    fn from(
        err: crate::operation::get_document_text_detection::GetDocumentTextDetectionError,
    ) -> Self {
        match err {
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_document_text_detection::GetDocumentTextDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_expense_analysis::GetExpenseAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_expense_analysis::GetExpenseAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_expense_analysis::GetExpenseAnalysisError> for Error {
    fn from(err: crate::operation::get_expense_analysis::GetExpenseAnalysisError) -> Self {
        match err {
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_expense_analysis::GetExpenseAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_lending_analysis::GetLendingAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_lending_analysis::GetLendingAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_lending_analysis::GetLendingAnalysisError> for Error {
    fn from(err: crate::operation::get_lending_analysis::GetLendingAnalysisError) -> Self {
        match err {
            crate::operation::get_lending_analysis::GetLendingAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lending_analysis::GetLendingAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError>
    for Error
{
    fn from(
        err: crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError,
    ) -> Self {
        match err {
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::InvalidJobIdException(inner) => Error::InvalidJobIdException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_document_analysis::StartDocumentAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_document_analysis::StartDocumentAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_document_analysis::StartDocumentAnalysisError> for Error {
    fn from(err: crate::operation::start_document_analysis::StartDocumentAnalysisError) -> Self {
        match err {
            crate::operation::start_document_analysis::StartDocumentAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::start_document_analysis::StartDocumentAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_document_text_detection::StartDocumentTextDetectionError>
    for Error
{
    fn from(
        err: crate::operation::start_document_text_detection::StartDocumentTextDetectionError,
    ) -> Self {
        match err {
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::start_document_text_detection::StartDocumentTextDetectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_expense_analysis::StartExpenseAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_expense_analysis::StartExpenseAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_expense_analysis::StartExpenseAnalysisError> for Error {
    fn from(err: crate::operation::start_expense_analysis::StartExpenseAnalysisError) -> Self {
        match err {
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::start_expense_analysis::StartExpenseAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_lending_analysis::StartLendingAnalysisError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_lending_analysis::StartLendingAnalysisError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_lending_analysis::StartLendingAnalysisError> for Error {
    fn from(err: crate::operation::start_lending_analysis::StartLendingAnalysisError) -> Self {
        match err {
            crate::operation::start_lending_analysis::StartLendingAnalysisError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::BadDocumentException(inner) => Error::BadDocumentException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::DocumentTooLargeException(inner) => Error::DocumentTooLargeException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::InvalidKmsKeyException(inner) => Error::InvalidKmsKeyException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::InvalidS3ObjectException(inner) => Error::InvalidS3ObjectException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::ProvisionedThroughputExceededException(inner) => Error::ProvisionedThroughputExceededException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::UnsupportedDocumentException(inner) => Error::UnsupportedDocumentException(inner),
            crate::operation::start_lending_analysis::StartLendingAnalysisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadDocumentException(e) => e.request_id(),
            Self::DocumentTooLargeException(e) => e.request_id(),
            Self::HumanLoopQuotaExceededException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidJobIdException(e) => e.request_id(),
            Self::InvalidKmsKeyException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidS3ObjectException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ProvisionedThroughputExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UnsupportedDocumentException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
