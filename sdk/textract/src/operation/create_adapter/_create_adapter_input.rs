// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAdapterInput {
    /// <p>The name to be assigned to the adapter being created.</p>
    pub adapter_name: ::std::option::Option<::std::string::String>,
    /// <p>Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The description to be assigned to the adapter being created.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The type of feature that the adapter is being trained on. Currrenly, supported feature types are: <code>QUERIES</code> </p>
    pub feature_types: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>,
    /// <p>Controls whether or not the adapter should automatically update.</p>
    pub auto_update: ::std::option::Option<crate::types::AutoUpdate>,
    /// <p>A list of tags to be added to the adapter.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateAdapterInput {
    /// <p>The name to be assigned to the adapter being created.</p>
    pub fn adapter_name(&self) -> ::std::option::Option<&str> {
        self.adapter_name.as_deref()
    }
    /// <p>Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The description to be assigned to the adapter being created.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of feature that the adapter is being trained on. Currrenly, supported feature types are: <code>QUERIES</code> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.feature_types.is_none()`.
    pub fn feature_types(&self) -> &[crate::types::FeatureType] {
        self.feature_types.as_deref().unwrap_or_default()
    }
    /// <p>Controls whether or not the adapter should automatically update.</p>
    pub fn auto_update(&self) -> ::std::option::Option<&crate::types::AutoUpdate> {
        self.auto_update.as_ref()
    }
    /// <p>A list of tags to be added to the adapter.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateAdapterInput {
    /// Creates a new builder-style object to manufacture [`CreateAdapterInput`](crate::operation::create_adapter::CreateAdapterInput).
    pub fn builder() -> crate::operation::create_adapter::builders::CreateAdapterInputBuilder {
        crate::operation::create_adapter::builders::CreateAdapterInputBuilder::default()
    }
}

/// A builder for [`CreateAdapterInput`](crate::operation::create_adapter::CreateAdapterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateAdapterInputBuilder {
    pub(crate) adapter_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) feature_types: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>,
    pub(crate) auto_update: ::std::option::Option<crate::types::AutoUpdate>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateAdapterInputBuilder {
    /// <p>The name to be assigned to the adapter being created.</p>
    /// This field is required.
    pub fn adapter_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.adapter_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to be assigned to the adapter being created.</p>
    pub fn set_adapter_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.adapter_name = input;
        self
    }
    /// <p>The name to be assigned to the adapter being created.</p>
    pub fn get_adapter_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.adapter_name
    }
    /// <p>Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>Idempotent token is used to recognize the request. If the same token is used with multiple CreateAdapter requests, the same session is returned. This token is employed to avoid unintentionally creating the same session multiple times.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>The description to be assigned to the adapter being created.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description to be assigned to the adapter being created.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description to be assigned to the adapter being created.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `feature_types`.
    ///
    /// To override the contents of this collection use [`set_feature_types`](Self::set_feature_types).
    ///
    /// <p>The type of feature that the adapter is being trained on. Currrenly, supported feature types are: <code>QUERIES</code> </p>
    pub fn feature_types(mut self, input: crate::types::FeatureType) -> Self {
        let mut v = self.feature_types.unwrap_or_default();
        v.push(input);
        self.feature_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of feature that the adapter is being trained on. Currrenly, supported feature types are: <code>QUERIES</code> </p>
    pub fn set_feature_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FeatureType>>) -> Self {
        self.feature_types = input;
        self
    }
    /// <p>The type of feature that the adapter is being trained on. Currrenly, supported feature types are: <code>QUERIES</code> </p>
    pub fn get_feature_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FeatureType>> {
        &self.feature_types
    }
    /// <p>Controls whether or not the adapter should automatically update.</p>
    pub fn auto_update(mut self, input: crate::types::AutoUpdate) -> Self {
        self.auto_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls whether or not the adapter should automatically update.</p>
    pub fn set_auto_update(mut self, input: ::std::option::Option<crate::types::AutoUpdate>) -> Self {
        self.auto_update = input;
        self
    }
    /// <p>Controls whether or not the adapter should automatically update.</p>
    pub fn get_auto_update(&self) -> &::std::option::Option<crate::types::AutoUpdate> {
        &self.auto_update
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to be added to the adapter.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A list of tags to be added to the adapter.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags to be added to the adapter.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateAdapterInput`](crate::operation::create_adapter::CreateAdapterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_adapter::CreateAdapterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_adapter::CreateAdapterInput {
            adapter_name: self.adapter_name,
            client_request_token: self.client_request_token,
            description: self.description,
            feature_types: self.feature_types,
            auto_update: self.auto_update,
            tags: self.tags,
        })
    }
}
