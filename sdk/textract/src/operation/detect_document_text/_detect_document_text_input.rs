// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DetectDocumentTextInput {
    /// <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    #[doc(hidden)]
    pub document: std::option::Option<crate::types::Document>,
}
impl DetectDocumentTextInput {
    /// <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    pub fn document(&self) -> std::option::Option<&crate::types::Document> {
        self.document.as_ref()
    }
}
impl DetectDocumentTextInput {
    /// Creates a new builder-style object to manufacture [`DetectDocumentTextInput`](crate::operation::detect_document_text::DetectDocumentTextInput).
    pub fn builder(
    ) -> crate::operation::detect_document_text::builders::DetectDocumentTextInputBuilder {
        crate::operation::detect_document_text::builders::DetectDocumentTextInputBuilder::default()
    }
}

/// A builder for [`DetectDocumentTextInput`](crate::operation::detect_document_text::DetectDocumentTextInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DetectDocumentTextInputBuilder {
    pub(crate) document: std::option::Option<crate::types::Document>,
}
impl DetectDocumentTextInputBuilder {
    /// <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    pub fn document(mut self, input: crate::types::Document) -> Self {
        self.document = Some(input);
        self
    }
    /// <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format.</p>
    /// <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    pub fn set_document(mut self, input: std::option::Option<crate::types::Document>) -> Self {
        self.document = input;
        self
    }
    /// Consumes the builder and constructs a [`DetectDocumentTextInput`](crate::operation::detect_document_text::DetectDocumentTextInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::detect_document_text::DetectDocumentTextInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::detect_document_text::DetectDocumentTextInput {
                document: self.document,
            },
        )
    }
}
