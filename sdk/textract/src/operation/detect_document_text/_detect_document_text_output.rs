// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DetectDocumentTextOutput {
    /// <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    pub document_metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    /// <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    pub blocks: ::std::option::Option<::std::vec::Vec<crate::types::Block>>,
    /// <p></p>
    pub detect_document_text_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectDocumentTextOutput {
    /// <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    pub fn document_metadata(&self) -> ::std::option::Option<&crate::types::DocumentMetadata> {
        self.document_metadata.as_ref()
    }
    /// <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blocks.is_none()`.
    pub fn blocks(&self) -> &[crate::types::Block] {
        self.blocks.as_deref().unwrap_or_default()
    }
    /// <p></p>
    pub fn detect_document_text_model_version(&self) -> ::std::option::Option<&str> {
        self.detect_document_text_model_version.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DetectDocumentTextOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DetectDocumentTextOutput {
    /// Creates a new builder-style object to manufacture [`DetectDocumentTextOutput`](crate::operation::detect_document_text::DetectDocumentTextOutput).
    pub fn builder() -> crate::operation::detect_document_text::builders::DetectDocumentTextOutputBuilder {
        crate::operation::detect_document_text::builders::DetectDocumentTextOutputBuilder::default()
    }
}

/// A builder for [`DetectDocumentTextOutput`](crate::operation::detect_document_text::DetectDocumentTextOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DetectDocumentTextOutputBuilder {
    pub(crate) document_metadata: ::std::option::Option<crate::types::DocumentMetadata>,
    pub(crate) blocks: ::std::option::Option<::std::vec::Vec<crate::types::Block>>,
    pub(crate) detect_document_text_model_version: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DetectDocumentTextOutputBuilder {
    /// <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    pub fn document_metadata(mut self, input: crate::types::DocumentMetadata) -> Self {
        self.document_metadata = ::std::option::Option::Some(input);
        self
    }
    /// <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    pub fn set_document_metadata(mut self, input: ::std::option::Option<crate::types::DocumentMetadata>) -> Self {
        self.document_metadata = input;
        self
    }
    /// <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    pub fn get_document_metadata(&self) -> &::std::option::Option<crate::types::DocumentMetadata> {
        &self.document_metadata
    }
    /// Appends an item to `blocks`.
    ///
    /// To override the contents of this collection use [`set_blocks`](Self::set_blocks).
    ///
    /// <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    pub fn blocks(mut self, input: crate::types::Block) -> Self {
        let mut v = self.blocks.unwrap_or_default();
        v.push(input);
        self.blocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    pub fn set_blocks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Block>>) -> Self {
        self.blocks = input;
        self
    }
    /// <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    pub fn get_blocks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Block>> {
        &self.blocks
    }
    /// <p></p>
    pub fn detect_document_text_model_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.detect_document_text_model_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_detect_document_text_model_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.detect_document_text_model_version = input;
        self
    }
    /// <p></p>
    pub fn get_detect_document_text_model_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.detect_document_text_model_version
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DetectDocumentTextOutput`](crate::operation::detect_document_text::DetectDocumentTextOutput).
    pub fn build(self) -> crate::operation::detect_document_text::DetectDocumentTextOutput {
        crate::operation::detect_document_text::DetectDocumentTextOutput {
            document_metadata: self.document_metadata,
            blocks: self.blocks,
            detect_document_text_model_version: self.detect_document_text_model_version,
            _request_id: self._request_id,
        }
    }
}
