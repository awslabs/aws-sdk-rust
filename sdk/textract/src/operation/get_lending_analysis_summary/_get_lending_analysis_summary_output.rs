// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLendingAnalysisSummaryOutput {
    /// <p>Information about the input document.</p>
    #[doc(hidden)]
    pub document_metadata: std::option::Option<crate::types::DocumentMetadata>,
    /// <p> The current status of the lending analysis job. </p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p> Contains summary information for documents grouped by type.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<crate::types::LendingSummary>,
    /// <p>A list of warnings that occurred during the lending analysis operation.</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    /// <p>Returns if the lending analysis could not be completed. Contains explanation for what error occurred.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The current model version of the Analyze Lending API.</p>
    #[doc(hidden)]
    pub analyze_lending_model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetLendingAnalysisSummaryOutput {
    /// <p>Information about the input document.</p>
    pub fn document_metadata(&self) -> std::option::Option<&crate::types::DocumentMetadata> {
        self.document_metadata.as_ref()
    }
    /// <p> The current status of the lending analysis job. </p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p> Contains summary information for documents grouped by type.</p>
    pub fn summary(&self) -> std::option::Option<&crate::types::LendingSummary> {
        self.summary.as_ref()
    }
    /// <p>A list of warnings that occurred during the lending analysis operation.</p>
    pub fn warnings(&self) -> std::option::Option<&[crate::types::Warning]> {
        self.warnings.as_deref()
    }
    /// <p>Returns if the lending analysis could not be completed. Contains explanation for what error occurred.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The current model version of the Analyze Lending API.</p>
    pub fn analyze_lending_model_version(&self) -> std::option::Option<&str> {
        self.analyze_lending_model_version.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetLendingAnalysisSummaryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLendingAnalysisSummaryOutput {
    /// Creates a new builder-style object to manufacture [`GetLendingAnalysisSummaryOutput`](crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryOutput).
    pub fn builder() -> crate::operation::get_lending_analysis_summary::builders::GetLendingAnalysisSummaryOutputBuilder{
        crate::operation::get_lending_analysis_summary::builders::GetLendingAnalysisSummaryOutputBuilder::default()
    }
}

/// A builder for [`GetLendingAnalysisSummaryOutput`](crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetLendingAnalysisSummaryOutputBuilder {
    pub(crate) document_metadata: std::option::Option<crate::types::DocumentMetadata>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) summary: std::option::Option<crate::types::LendingSummary>,
    pub(crate) warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) analyze_lending_model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetLendingAnalysisSummaryOutputBuilder {
    /// <p>Information about the input document.</p>
    pub fn document_metadata(mut self, input: crate::types::DocumentMetadata) -> Self {
        self.document_metadata = Some(input);
        self
    }
    /// <p>Information about the input document.</p>
    pub fn set_document_metadata(
        mut self,
        input: std::option::Option<crate::types::DocumentMetadata>,
    ) -> Self {
        self.document_metadata = input;
        self
    }
    /// <p> The current status of the lending analysis job. </p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p> The current status of the lending analysis job. </p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p> Contains summary information for documents grouped by type.</p>
    pub fn summary(mut self, input: crate::types::LendingSummary) -> Self {
        self.summary = Some(input);
        self
    }
    /// <p> Contains summary information for documents grouped by type.</p>
    pub fn set_summary(mut self, input: std::option::Option<crate::types::LendingSummary>) -> Self {
        self.summary = input;
        self
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>A list of warnings that occurred during the lending analysis operation.</p>
    pub fn warnings(mut self, input: crate::types::Warning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = Some(v);
        self
    }
    /// <p>A list of warnings that occurred during the lending analysis operation.</p>
    pub fn set_warnings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    ) -> Self {
        self.warnings = input;
        self
    }
    /// <p>Returns if the lending analysis could not be completed. Contains explanation for what error occurred.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Returns if the lending analysis could not be completed. Contains explanation for what error occurred.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The current model version of the Analyze Lending API.</p>
    pub fn analyze_lending_model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.analyze_lending_model_version = Some(input.into());
        self
    }
    /// <p>The current model version of the Analyze Lending API.</p>
    pub fn set_analyze_lending_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.analyze_lending_model_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetLendingAnalysisSummaryOutput`](crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryOutput {
        crate::operation::get_lending_analysis_summary::GetLendingAnalysisSummaryOutput {
            document_metadata: self.document_metadata,
            job_status: self.job_status,
            summary: self.summary,
            warnings: self.warnings,
            status_message: self.status_message,
            analyze_lending_model_version: self.analyze_lending_model_version,
            _request_id: self._request_id,
        }
    }
}
