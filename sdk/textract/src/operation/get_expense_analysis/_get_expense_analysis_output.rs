// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExpenseAnalysisOutput {
    /// <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    #[doc(hidden)]
    pub document_metadata: std::option::Option<crate::types::DocumentMetadata>,
    /// <p>The current status of the text detection job.</p>
    #[doc(hidden)]
    pub job_status: std::option::Option<crate::types::JobStatus>,
    /// <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The expenses detected by Amazon Textract.</p>
    #[doc(hidden)]
    pub expense_documents: std::option::Option<std::vec::Vec<crate::types::ExpenseDocument>>,
    /// <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    #[doc(hidden)]
    pub warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    /// <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The current model version of AnalyzeExpense.</p>
    #[doc(hidden)]
    pub analyze_expense_model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetExpenseAnalysisOutput {
    /// <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    pub fn document_metadata(&self) -> std::option::Option<&crate::types::DocumentMetadata> {
        self.document_metadata.as_ref()
    }
    /// <p>The current status of the text detection job.</p>
    pub fn job_status(&self) -> std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The expenses detected by Amazon Textract.</p>
    pub fn expense_documents(&self) -> std::option::Option<&[crate::types::ExpenseDocument]> {
        self.expense_documents.as_deref()
    }
    /// <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    pub fn warnings(&self) -> std::option::Option<&[crate::types::Warning]> {
        self.warnings.as_deref()
    }
    /// <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The current model version of AnalyzeExpense.</p>
    pub fn analyze_expense_model_version(&self) -> std::option::Option<&str> {
        self.analyze_expense_model_version.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetExpenseAnalysisOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetExpenseAnalysisOutput {
    /// Creates a new builder-style object to manufacture [`GetExpenseAnalysisOutput`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput).
    pub fn builder(
    ) -> crate::operation::get_expense_analysis::builders::GetExpenseAnalysisOutputBuilder {
        crate::operation::get_expense_analysis::builders::GetExpenseAnalysisOutputBuilder::default()
    }
}

/// A builder for [`GetExpenseAnalysisOutput`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetExpenseAnalysisOutputBuilder {
    pub(crate) document_metadata: std::option::Option<crate::types::DocumentMetadata>,
    pub(crate) job_status: std::option::Option<crate::types::JobStatus>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) expense_documents: std::option::Option<std::vec::Vec<crate::types::ExpenseDocument>>,
    pub(crate) warnings: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) analyze_expense_model_version: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetExpenseAnalysisOutputBuilder {
    /// <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    pub fn document_metadata(mut self, input: crate::types::DocumentMetadata) -> Self {
        self.document_metadata = Some(input);
        self
    }
    /// <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    pub fn set_document_metadata(
        mut self,
        input: std::option::Option<crate::types::DocumentMetadata>,
    ) -> Self {
        self.document_metadata = input;
        self
    }
    /// <p>The current status of the text detection job.</p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = Some(input);
        self
    }
    /// <p>The current status of the text detection job.</p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `expense_documents`.
    ///
    /// To override the contents of this collection use [`set_expense_documents`](Self::set_expense_documents).
    ///
    /// <p>The expenses detected by Amazon Textract.</p>
    pub fn expense_documents(mut self, input: crate::types::ExpenseDocument) -> Self {
        let mut v = self.expense_documents.unwrap_or_default();
        v.push(input);
        self.expense_documents = Some(v);
        self
    }
    /// <p>The expenses detected by Amazon Textract.</p>
    pub fn set_expense_documents(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ExpenseDocument>>,
    ) -> Self {
        self.expense_documents = input;
        self
    }
    /// Appends an item to `warnings`.
    ///
    /// To override the contents of this collection use [`set_warnings`](Self::set_warnings).
    ///
    /// <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    pub fn warnings(mut self, input: crate::types::Warning) -> Self {
        let mut v = self.warnings.unwrap_or_default();
        v.push(input);
        self.warnings = Some(v);
        self
    }
    /// <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    pub fn set_warnings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Warning>>,
    ) -> Self {
        self.warnings = input;
        self
    }
    /// <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The current model version of AnalyzeExpense.</p>
    pub fn analyze_expense_model_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.analyze_expense_model_version = Some(input.into());
        self
    }
    /// <p>The current model version of AnalyzeExpense.</p>
    pub fn set_analyze_expense_model_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.analyze_expense_model_version = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetExpenseAnalysisOutput`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput).
    pub fn build(self) -> crate::operation::get_expense_analysis::GetExpenseAnalysisOutput {
        crate::operation::get_expense_analysis::GetExpenseAnalysisOutput {
            document_metadata: self.document_metadata,
            job_status: self.job_status,
            next_token: self.next_token,
            expense_documents: self.expense_documents,
            warnings: self.warnings,
            status_message: self.status_message,
            analyze_expense_model_version: self.analyze_expense_model_version,
            _request_id: self._request_id,
        }
    }
}
