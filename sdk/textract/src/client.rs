// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Textract
///
/// Client for invoking operations on Amazon Textract. Each operation on Amazon Textract is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_textract::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_textract::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_textract::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AnalyzeDocument`](crate::client::fluent_builders::AnalyzeDocument) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document(Document)`](crate::client::fluent_builders::AnalyzeDocument::document) / [`set_document(Option<Document>)`](crate::client::fluent_builders::AnalyzeDocument::set_document): <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG, PNG, PDF, or TIFF format.</p>  <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    ///   - [`feature_types(Vec<FeatureType>)`](crate::client::fluent_builders::AnalyzeDocument::feature_types) / [`set_feature_types(Option<Vec<FeatureType>>)`](crate::client::fluent_builders::AnalyzeDocument::set_feature_types): <p>A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. Add SIGNATURES to return the locations of detected signatures. To perform both forms and table analysis, add TABLES and FORMS to <code>FeatureTypes</code>. To detect signatures within form data and table data, add SIGNATURES to either TABLES or FORMS. All lines and words detected in the document are included in the response (including text that isn't related to the value of <code>FeatureTypes</code>). </p>
    ///   - [`human_loop_config(HumanLoopConfig)`](crate::client::fluent_builders::AnalyzeDocument::human_loop_config) / [`set_human_loop_config(Option<HumanLoopConfig>)`](crate::client::fluent_builders::AnalyzeDocument::set_human_loop_config): <p>Sets the configuration for the human in the loop workflow for analyzing documents.</p>
    ///   - [`queries_config(QueriesConfig)`](crate::client::fluent_builders::AnalyzeDocument::queries_config) / [`set_queries_config(Option<QueriesConfig>)`](crate::client::fluent_builders::AnalyzeDocument::set_queries_config): <p>Contains Queries and the alias for those Queries, as determined by the input. </p>
    /// - On success, responds with [`AnalyzeDocumentOutput`](crate::output::AnalyzeDocumentOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::AnalyzeDocumentOutput::document_metadata): <p>Metadata about the analyzed document. An example is the number of pages.</p>
    ///   - [`blocks(Option<Vec<Block>>)`](crate::output::AnalyzeDocumentOutput::blocks): <p>The items that are detected and analyzed by <code>AnalyzeDocument</code>.</p>
    ///   - [`human_loop_activation_output(Option<HumanLoopActivationOutput>)`](crate::output::AnalyzeDocumentOutput::human_loop_activation_output): <p>Shows the results of the human in the loop evaluation.</p>
    ///   - [`analyze_document_model_version(Option<String>)`](crate::output::AnalyzeDocumentOutput::analyze_document_model_version): <p>The version of the model used to analyze the document.</p>
    /// - On failure, responds with [`SdkError<AnalyzeDocumentError>`](crate::error::AnalyzeDocumentError)
    pub fn analyze_document(&self) -> crate::client::fluent_builders::AnalyzeDocument {
        crate::client::fluent_builders::AnalyzeDocument::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AnalyzeExpense`](crate::client::fluent_builders::AnalyzeExpense) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document(Document)`](crate::client::fluent_builders::AnalyzeExpense::document) / [`set_document(Option<Document>)`](crate::client::fluent_builders::AnalyzeExpense::set_document): <p>The input document, either as bytes or as an S3 object.</p>  <p>You pass image bytes to an Amazon Textract API operation by using the <code>Bytes</code> property. For example, you would use the <code>Bytes</code> property to pass a document loaded from a local file system. Image bytes passed by using the <code>Bytes</code> property must be base64 encoded. Your code might not need to encode document file bytes if you're using an AWS SDK to call Amazon Textract API operations. </p>  <p>You pass images stored in an S3 bucket to an Amazon Textract API operation by using the <code>S3Object</code> property. Documents stored in an S3 bucket don't need to be base64 encoded.</p>  <p>The AWS Region for the S3 bucket that contains the S3 object must match the AWS Region that you use for Amazon Textract operations.</p>  <p>If you use the AWS CLI to call Amazon Textract operations, passing image bytes using the Bytes property isn't supported. You must first upload the document to an Amazon S3 bucket, and then call the operation using the S3Object property.</p>  <p>For Amazon Textract to process an S3 object, the user must have permission to access the S3 object. </p>
    /// - On success, responds with [`AnalyzeExpenseOutput`](crate::output::AnalyzeExpenseOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::AnalyzeExpenseOutput::document_metadata): <p>Information about the input document.</p>
    ///   - [`expense_documents(Option<Vec<ExpenseDocument>>)`](crate::output::AnalyzeExpenseOutput::expense_documents): <p>The expenses detected by Amazon Textract.</p>
    /// - On failure, responds with [`SdkError<AnalyzeExpenseError>`](crate::error::AnalyzeExpenseError)
    pub fn analyze_expense(&self) -> crate::client::fluent_builders::AnalyzeExpense {
        crate::client::fluent_builders::AnalyzeExpense::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AnalyzeID`](crate::client::fluent_builders::AnalyzeID) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document_pages(Vec<Document>)`](crate::client::fluent_builders::AnalyzeID::document_pages) / [`set_document_pages(Option<Vec<Document>>)`](crate::client::fluent_builders::AnalyzeID::set_document_pages): <p>The document being passed to AnalyzeID.</p>
    /// - On success, responds with [`AnalyzeIdOutput`](crate::output::AnalyzeIdOutput) with field(s):
    ///   - [`identity_documents(Option<Vec<IdentityDocument>>)`](crate::output::AnalyzeIdOutput::identity_documents): <p>The list of documents processed by AnalyzeID. Includes a number denoting their place in the list and the response structure for the document.</p>
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::AnalyzeIdOutput::document_metadata): <p>Information about the input document.</p>
    ///   - [`analyze_id_model_version(Option<String>)`](crate::output::AnalyzeIdOutput::analyze_id_model_version): <p>The version of the AnalyzeIdentity API being used to process documents.</p>
    /// - On failure, responds with [`SdkError<AnalyzeIDError>`](crate::error::AnalyzeIDError)
    pub fn analyze_id(&self) -> crate::client::fluent_builders::AnalyzeID {
        crate::client::fluent_builders::AnalyzeID::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DetectDocumentText`](crate::client::fluent_builders::DetectDocumentText) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document(Document)`](crate::client::fluent_builders::DetectDocumentText::document) / [`set_document(Option<Document>)`](crate::client::fluent_builders::DetectDocumentText::set_document): <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG or PNG format.</p>  <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    /// - On success, responds with [`DetectDocumentTextOutput`](crate::output::DetectDocumentTextOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::DetectDocumentTextOutput::document_metadata): <p>Metadata about the document. It contains the number of pages that are detected in the document.</p>
    ///   - [`blocks(Option<Vec<Block>>)`](crate::output::DetectDocumentTextOutput::blocks): <p>An array of <code>Block</code> objects that contain the text that's detected in the document.</p>
    ///   - [`detect_document_text_model_version(Option<String>)`](crate::output::DetectDocumentTextOutput::detect_document_text_model_version): <p></p>
    /// - On failure, responds with [`SdkError<DetectDocumentTextError>`](crate::error::DetectDocumentTextError)
    pub fn detect_document_text(&self) -> crate::client::fluent_builders::DetectDocumentText {
        crate::client::fluent_builders::DetectDocumentText::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDocumentAnalysis`](crate::client::fluent_builders::GetDocumentAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetDocumentAnalysis::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetDocumentAnalysis::set_job_id): <p>A unique identifier for the text-detection job. The <code>JobId</code> is returned from <code>StartDocumentAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetDocumentAnalysis::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetDocumentAnalysis::set_max_results): <p>The maximum number of results to return per paginated call. The largest value that you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetDocumentAnalysis::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetDocumentAnalysis::set_next_token): <p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.</p>
    /// - On success, responds with [`GetDocumentAnalysisOutput`](crate::output::GetDocumentAnalysisOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::GetDocumentAnalysisOutput::document_metadata): <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract video operation.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::output::GetDocumentAnalysisOutput::job_status): <p>The current status of the text detection job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetDocumentAnalysisOutput::next_token): <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text detection results.</p>
    ///   - [`blocks(Option<Vec<Block>>)`](crate::output::GetDocumentAnalysisOutput::blocks): <p>The results of the text-analysis operation.</p>
    ///   - [`warnings(Option<Vec<Warning>>)`](crate::output::GetDocumentAnalysisOutput::warnings): <p>A list of warnings that occurred during the document-analysis operation.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetDocumentAnalysisOutput::status_message): <p>Returns if the detection job could not be completed. Contains explanation for what error occured.</p>
    ///   - [`analyze_document_model_version(Option<String>)`](crate::output::GetDocumentAnalysisOutput::analyze_document_model_version): <p></p>
    /// - On failure, responds with [`SdkError<GetDocumentAnalysisError>`](crate::error::GetDocumentAnalysisError)
    pub fn get_document_analysis(&self) -> crate::client::fluent_builders::GetDocumentAnalysis {
        crate::client::fluent_builders::GetDocumentAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDocumentTextDetection`](crate::client::fluent_builders::GetDocumentTextDetection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetDocumentTextDetection::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetDocumentTextDetection::set_job_id): <p>A unique identifier for the text detection job. The <code>JobId</code> is returned from <code>StartDocumentTextDetection</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetDocumentTextDetection::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetDocumentTextDetection::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 1,000. If you specify a value greater than 1,000, a maximum of 1,000 results is returned. The default value is 1,000.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetDocumentTextDetection::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetDocumentTextDetection::set_next_token): <p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.</p>
    /// - On success, responds with [`GetDocumentTextDetectionOutput`](crate::output::GetDocumentTextDetectionOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::GetDocumentTextDetectionOutput::document_metadata): <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract video operation.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::output::GetDocumentTextDetectionOutput::job_status): <p>The current status of the text detection job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetDocumentTextDetectionOutput::next_token): <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    ///   - [`blocks(Option<Vec<Block>>)`](crate::output::GetDocumentTextDetectionOutput::blocks): <p>The results of the text-detection operation.</p>
    ///   - [`warnings(Option<Vec<Warning>>)`](crate::output::GetDocumentTextDetectionOutput::warnings): <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetDocumentTextDetectionOutput::status_message): <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    ///   - [`detect_document_text_model_version(Option<String>)`](crate::output::GetDocumentTextDetectionOutput::detect_document_text_model_version): <p></p>
    /// - On failure, responds with [`SdkError<GetDocumentTextDetectionError>`](crate::error::GetDocumentTextDetectionError)
    pub fn get_document_text_detection(
        &self,
    ) -> crate::client::fluent_builders::GetDocumentTextDetection {
        crate::client::fluent_builders::GetDocumentTextDetection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetExpenseAnalysis`](crate::client::fluent_builders::GetExpenseAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetExpenseAnalysis::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetExpenseAnalysis::set_job_id): <p>A unique identifier for the text detection job. The <code>JobId</code> is returned from <code>StartExpenseAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetExpenseAnalysis::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetExpenseAnalysis::set_max_results): <p>The maximum number of results to return per paginated call. The largest value you can specify is 20. If you specify a value greater than 20, a maximum of 20 results is returned. The default value is 20.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetExpenseAnalysis::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetExpenseAnalysis::set_next_token): <p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.</p>
    /// - On success, responds with [`GetExpenseAnalysisOutput`](crate::output::GetExpenseAnalysisOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::GetExpenseAnalysisOutput::document_metadata): <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::output::GetExpenseAnalysisOutput::job_status): <p>The current status of the text detection job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetExpenseAnalysisOutput::next_token): <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    ///   - [`expense_documents(Option<Vec<ExpenseDocument>>)`](crate::output::GetExpenseAnalysisOutput::expense_documents): <p>The expenses detected by Amazon Textract.</p>
    ///   - [`warnings(Option<Vec<Warning>>)`](crate::output::GetExpenseAnalysisOutput::warnings): <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetExpenseAnalysisOutput::status_message): <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    ///   - [`analyze_expense_model_version(Option<String>)`](crate::output::GetExpenseAnalysisOutput::analyze_expense_model_version): <p>The current model version of AnalyzeExpense.</p>
    /// - On failure, responds with [`SdkError<GetExpenseAnalysisError>`](crate::error::GetExpenseAnalysisError)
    pub fn get_expense_analysis(&self) -> crate::client::fluent_builders::GetExpenseAnalysis {
        crate::client::fluent_builders::GetExpenseAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLendingAnalysis`](crate::client::fluent_builders::GetLendingAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetLendingAnalysis::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetLendingAnalysis::set_job_id): <p>A unique identifier for the lending or text-detection job. The <code>JobId</code> is returned from <code>StartLendingAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetLendingAnalysis::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::GetLendingAnalysis::set_max_results): <p>The maximum number of results to return per paginated call. The largest value that you can specify is 30. If you specify a value greater than 30, a maximum of 30 results is returned. The default value is 30.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetLendingAnalysis::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetLendingAnalysis::set_next_token): <p>If the previous response was incomplete, Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of lending results.</p>
    /// - On success, responds with [`GetLendingAnalysisOutput`](crate::output::GetLendingAnalysisOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::GetLendingAnalysisOutput::document_metadata): <p>Information about the input document.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::output::GetLendingAnalysisOutput::job_status): <p> The current status of the lending analysis job.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetLendingAnalysisOutput::next_token): <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of lending results.</p>
    ///   - [`results(Option<Vec<LendingResult>>)`](crate::output::GetLendingAnalysisOutput::results): <p> Holds the information returned by one of AmazonTextract's document analysis operations for the pinstripe.</p>
    ///   - [`warnings(Option<Vec<Warning>>)`](crate::output::GetLendingAnalysisOutput::warnings): <p> A list of warnings that occurred during the lending analysis operation. </p>
    ///   - [`status_message(Option<String>)`](crate::output::GetLendingAnalysisOutput::status_message): <p> Returns if the lending analysis job could not be completed. Contains explanation for what error occurred. </p>
    ///   - [`analyze_lending_model_version(Option<String>)`](crate::output::GetLendingAnalysisOutput::analyze_lending_model_version): <p> The current model version of the Analyze Lending API.</p>
    /// - On failure, responds with [`SdkError<GetLendingAnalysisError>`](crate::error::GetLendingAnalysisError)
    pub fn get_lending_analysis(&self) -> crate::client::fluent_builders::GetLendingAnalysis {
        crate::client::fluent_builders::GetLendingAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetLendingAnalysisSummary`](crate::client::fluent_builders::GetLendingAnalysisSummary) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::client::fluent_builders::GetLendingAnalysisSummary::job_id) / [`set_job_id(Option<String>)`](crate::client::fluent_builders::GetLendingAnalysisSummary::set_job_id): <p> A unique identifier for the lending or text-detection job. The <code>JobId</code> is returned from StartLendingAnalysis. A <code>JobId</code> value is only valid for 7 days.</p>
    /// - On success, responds with [`GetLendingAnalysisSummaryOutput`](crate::output::GetLendingAnalysisSummaryOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::output::GetLendingAnalysisSummaryOutput::document_metadata): <p>Information about the input document.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::output::GetLendingAnalysisSummaryOutput::job_status): <p> The current status of the lending analysis job. </p>
    ///   - [`summary(Option<LendingSummary>)`](crate::output::GetLendingAnalysisSummaryOutput::summary): <p> Contains summary information for documents grouped by type.</p>
    ///   - [`warnings(Option<Vec<Warning>>)`](crate::output::GetLendingAnalysisSummaryOutput::warnings): <p>A list of warnings that occurred during the lending analysis operation.</p>
    ///   - [`status_message(Option<String>)`](crate::output::GetLendingAnalysisSummaryOutput::status_message): <p>Returns if the lending analysis could not be completed. Contains explanation for what error occurred.</p>
    ///   - [`analyze_lending_model_version(Option<String>)`](crate::output::GetLendingAnalysisSummaryOutput::analyze_lending_model_version): <p>The current model version of the Analyze Lending API.</p>
    /// - On failure, responds with [`SdkError<GetLendingAnalysisSummaryError>`](crate::error::GetLendingAnalysisSummaryError)
    pub fn get_lending_analysis_summary(
        &self,
    ) -> crate::client::fluent_builders::GetLendingAnalysisSummary {
        crate::client::fluent_builders::GetLendingAnalysisSummary::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartDocumentAnalysis`](crate::client::fluent_builders::StartDocumentAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document_location(DocumentLocation)`](crate::client::fluent_builders::StartDocumentAnalysis::document_location) / [`set_document_location(Option<DocumentLocation>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_document_location): <p>The location of the document to be processed.</p>
    ///   - [`feature_types(Vec<FeatureType>)`](crate::client::fluent_builders::StartDocumentAnalysis::feature_types) / [`set_feature_types(Option<Vec<FeatureType>>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_feature_types): <p>A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. To perform both types of analysis, add TABLES and FORMS to <code>FeatureTypes</code>. All lines and words detected in the document are included in the response (including text that isn't related to the value of <code>FeatureTypes</code>). </p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_client_request_token): <p>The idempotent token that you use to identify the start request. If you use the same token with multiple <code>StartDocumentAnalysis</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-async.html">Calling Amazon Textract Asynchronous Operations</a>.</p>
    ///   - [`job_tag(impl Into<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::job_tag) / [`set_job_tag(Option<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_job_tag): <p>An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).</p>
    ///   - [`notification_channel(NotificationChannel)`](crate::client::fluent_builders::StartDocumentAnalysis::notification_channel) / [`set_notification_channel(Option<NotificationChannel>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_notification_channel): <p>The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to. </p>
    ///   - [`output_config(OutputConfig)`](crate::client::fluent_builders::StartDocumentAnalysis::output_config) / [`set_output_config(Option<OutputConfig>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_output_config): <p>Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the GetDocumentAnalysis operation.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_kms_key_id): <p>The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.</p>
    ///   - [`queries_config(QueriesConfig)`](crate::client::fluent_builders::StartDocumentAnalysis::queries_config) / [`set_queries_config(Option<QueriesConfig>)`](crate::client::fluent_builders::StartDocumentAnalysis::set_queries_config): <p></p>
    /// - On success, responds with [`StartDocumentAnalysisOutput`](crate::output::StartDocumentAnalysisOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartDocumentAnalysisOutput::job_id): <p>The identifier for the document text detection job. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetDocumentAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    /// - On failure, responds with [`SdkError<StartDocumentAnalysisError>`](crate::error::StartDocumentAnalysisError)
    pub fn start_document_analysis(&self) -> crate::client::fluent_builders::StartDocumentAnalysis {
        crate::client::fluent_builders::StartDocumentAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartDocumentTextDetection`](crate::client::fluent_builders::StartDocumentTextDetection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document_location(DocumentLocation)`](crate::client::fluent_builders::StartDocumentTextDetection::document_location) / [`set_document_location(Option<DocumentLocation>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_document_location): <p>The location of the document to be processed.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_client_request_token): <p>The idempotent token that's used to identify the start request. If you use the same token with multiple <code>StartDocumentTextDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-async.html">Calling Amazon Textract Asynchronous Operations</a>.</p>
    ///   - [`job_tag(impl Into<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::job_tag) / [`set_job_tag(Option<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_job_tag): <p>An identifier that you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).</p>
    ///   - [`notification_channel(NotificationChannel)`](crate::client::fluent_builders::StartDocumentTextDetection::notification_channel) / [`set_notification_channel(Option<NotificationChannel>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_notification_channel): <p>The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to. </p>
    ///   - [`output_config(OutputConfig)`](crate::client::fluent_builders::StartDocumentTextDetection::output_config) / [`set_output_config(Option<OutputConfig>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_output_config): <p>Sets if the output will go to a customer defined bucket. By default Amazon Textract will save the results internally to be accessed with the GetDocumentTextDetection operation.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartDocumentTextDetection::set_kms_key_id): <p>The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.</p>
    /// - On success, responds with [`StartDocumentTextDetectionOutput`](crate::output::StartDocumentTextDetectionOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartDocumentTextDetectionOutput::job_id): <p>The identifier of the text detection job for the document. Use <code>JobId</code> to identify the job in a subsequent call to <code>GetDocumentTextDetection</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    /// - On failure, responds with [`SdkError<StartDocumentTextDetectionError>`](crate::error::StartDocumentTextDetectionError)
    pub fn start_document_text_detection(
        &self,
    ) -> crate::client::fluent_builders::StartDocumentTextDetection {
        crate::client::fluent_builders::StartDocumentTextDetection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartExpenseAnalysis`](crate::client::fluent_builders::StartExpenseAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document_location(DocumentLocation)`](crate::client::fluent_builders::StartExpenseAnalysis::document_location) / [`set_document_location(Option<DocumentLocation>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_document_location): <p>The location of the document to be processed.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_client_request_token): <p>The idempotent token that's used to identify the start request. If you use the same token with multiple <code>StartDocumentTextDetection</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-async.html">Calling Amazon Textract Asynchronous Operations</a> </p>
    ///   - [`job_tag(impl Into<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::job_tag) / [`set_job_tag(Option<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_job_tag): <p>An identifier you specify that's included in the completion notification published to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).</p>
    ///   - [`notification_channel(NotificationChannel)`](crate::client::fluent_builders::StartExpenseAnalysis::notification_channel) / [`set_notification_channel(Option<NotificationChannel>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_notification_channel): <p>The Amazon SNS topic ARN that you want Amazon Textract to publish the completion status of the operation to. </p>
    ///   - [`output_config(OutputConfig)`](crate::client::fluent_builders::StartExpenseAnalysis::output_config) / [`set_output_config(Option<OutputConfig>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_output_config): <p>Sets if the output will go to a customer defined bucket. By default, Amazon Textract will save the results internally to be accessed by the <code>GetExpenseAnalysis</code> operation.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartExpenseAnalysis::set_kms_key_id): <p>The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side,using SSE-S3.</p>
    /// - On success, responds with [`StartExpenseAnalysisOutput`](crate::output::StartExpenseAnalysisOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartExpenseAnalysisOutput::job_id): <p>A unique identifier for the text detection job. The <code>JobId</code> is returned from <code>StartExpenseAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    /// - On failure, responds with [`SdkError<StartExpenseAnalysisError>`](crate::error::StartExpenseAnalysisError)
    pub fn start_expense_analysis(&self) -> crate::client::fluent_builders::StartExpenseAnalysis {
        crate::client::fluent_builders::StartExpenseAnalysis::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartLendingAnalysis`](crate::client::fluent_builders::StartLendingAnalysis) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document_location(DocumentLocation)`](crate::client::fluent_builders::StartLendingAnalysis::document_location) / [`set_document_location(Option<DocumentLocation>)`](crate::client::fluent_builders::StartLendingAnalysis::set_document_location): <p>The Amazon S3 bucket that contains the document to be processed. It's used by asynchronous operations.</p>  <p>The input document can be an image file in JPEG or PNG format. It can also be a file in PDF format.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::StartLendingAnalysis::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::StartLendingAnalysis::set_client_request_token): <p>The idempotent token that you use to identify the start request. If you use the same token with multiple <code>StartLendingAnalysis</code> requests, the same <code>JobId</code> is returned. Use <code>ClientRequestToken</code> to prevent the same job from being accidentally started more than once. For more information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/api-sync.html">Calling Amazon Textract Asynchronous Operations</a>.</p>
    ///   - [`job_tag(impl Into<String>)`](crate::client::fluent_builders::StartLendingAnalysis::job_tag) / [`set_job_tag(Option<String>)`](crate::client::fluent_builders::StartLendingAnalysis::set_job_tag): <p>An identifier that you specify to be included in the completion notification published to the Amazon SNS topic. For example, you can use <code>JobTag</code> to identify the type of document that the completion notification corresponds to (such as a tax form or a receipt).</p>
    ///   - [`notification_channel(NotificationChannel)`](crate::client::fluent_builders::StartLendingAnalysis::notification_channel) / [`set_notification_channel(Option<NotificationChannel>)`](crate::client::fluent_builders::StartLendingAnalysis::set_notification_channel): <p>The Amazon Simple Notification Service (Amazon SNS) topic to which Amazon Textract publishes the completion status of an asynchronous document operation. </p>
    ///   - [`output_config(OutputConfig)`](crate::client::fluent_builders::StartLendingAnalysis::output_config) / [`set_output_config(Option<OutputConfig>)`](crate::client::fluent_builders::StartLendingAnalysis::set_output_config): <p>Sets whether or not your output will go to a user created bucket. Used to set the name of the bucket, and the prefix on the output file.</p>  <p> <code>OutputConfig</code> is an optional parameter which lets you adjust where your output will be placed. By default, Amazon Textract will store the results internally and can only be accessed by the Get API operations. With <code>OutputConfig</code> enabled, you can set the name of the bucket the output will be sent to the file prefix of the results where you can download your results. Additionally, you can set the <code>KMSKeyID</code> parameter to a customer master key (CMK) to encrypt your output. Without this parameter set Amazon Textract will encrypt server-side using the AWS managed CMK for Amazon S3.</p>  <p>Decryption of Customer Content is necessary for processing of the documents by Amazon Textract. If your account is opted out under an AI services opt out policy then all unencrypted Customer Content is immediately and permanently deleted after the Customer Content has been processed by the service. No copy of of the output is retained by Amazon Textract. For information about how to opt out, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_manage_policies_ai-opt-out.html"> Managing AI services opt-out policy. </a> </p>  <p>For more information on data privacy, see the <a href="https://aws.amazon.com/compliance/data-privacy-faq/">Data Privacy FAQ</a>.</p>
    ///   - [`kms_key_id(impl Into<String>)`](crate::client::fluent_builders::StartLendingAnalysis::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::client::fluent_builders::StartLendingAnalysis::set_kms_key_id): <p>The KMS key used to encrypt the inference results. This can be in either Key ID or Key Alias format. When a KMS key is provided, the KMS key will be used for server-side encryption of the objects in the customer bucket. When this parameter is not enabled, the result will be encrypted server side, using SSE-S3. </p>
    /// - On success, responds with [`StartLendingAnalysisOutput`](crate::output::StartLendingAnalysisOutput) with field(s):
    ///   - [`job_id(Option<String>)`](crate::output::StartLendingAnalysisOutput::job_id): <p>A unique identifier for the lending or text-detection job. The <code>JobId</code> is returned from <code>StartLendingAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p>
    /// - On failure, responds with [`SdkError<StartLendingAnalysisError>`](crate::error::StartLendingAnalysisError)
    pub fn start_lending_analysis(&self) -> crate::client::fluent_builders::StartLendingAnalysis {
        crate::client::fluent_builders::StartLendingAnalysis::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
