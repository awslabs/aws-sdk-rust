// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetExpenseAnalysis`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job_id(impl Into<String>)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::job_id) / [`set_job_id(Option<String>)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::set_job_id):<br>required: **true**<br><p>A unique identifier for the text detection job. The <code>JobId</code> is returned from <code>StartExpenseAnalysis</code>. A <code>JobId</code> value is only valid for 7 days.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return per paginated call. The largest value you can specify is 20. If you specify a value greater than 20, a maximum of 20 results is returned. The default value is 20.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::set_next_token):<br>required: **false**<br><p>If the previous response was incomplete (because there are more blocks to retrieve), Amazon Textract returns a pagination token in the response. You can use this pagination token to retrieve the next set of blocks.</p><br>
    /// - On success, responds with [`GetExpenseAnalysisOutput`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::document_metadata): <p>Information about a document that Amazon Textract processed. <code>DocumentMetadata</code> is returned in every page of paginated responses from an Amazon Textract operation.</p>
    ///   - [`job_status(Option<JobStatus>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::job_status): <p>The current status of the text detection job.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::next_token): <p>If the response is truncated, Amazon Textract returns this token. You can use this token in the subsequent request to retrieve the next set of text-detection results.</p>
    ///   - [`expense_documents(Option<Vec::<ExpenseDocument>>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::expense_documents): <p>The expenses detected by Amazon Textract.</p>
    ///   - [`warnings(Option<Vec::<Warning>>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::warnings): <p>A list of warnings that occurred during the text-detection operation for the document.</p>
    ///   - [`status_message(Option<String>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::status_message): <p>Returns if the detection job could not be completed. Contains explanation for what error occured. </p>
    ///   - [`analyze_expense_model_version(Option<String>)`](crate::operation::get_expense_analysis::GetExpenseAnalysisOutput::analyze_expense_model_version): <p>The current model version of AnalyzeExpense.</p>
    /// - On failure, responds with [`SdkError<GetExpenseAnalysisError>`](crate::operation::get_expense_analysis::GetExpenseAnalysisError)
    pub fn get_expense_analysis(&self) -> crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder {
        crate::operation::get_expense_analysis::builders::GetExpenseAnalysisFluentBuilder::new(self.handle.clone())
    }
}
