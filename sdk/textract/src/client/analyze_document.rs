// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AnalyzeDocument`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`document(Document)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::document) / [`set_document(Option<Document>)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::set_document): <p>The input document as base64-encoded bytes or an Amazon S3 object. If you use the AWS CLI to call Amazon Textract operations, you can't pass image bytes. The document must be an image in JPEG, PNG, PDF, or TIFF format.</p>  <p>If you're using an AWS SDK to call Amazon Textract, you might not need to base64-encode image bytes that are passed using the <code>Bytes</code> field. </p>
    ///   - [`feature_types(Vec<FeatureType>)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::feature_types) / [`set_feature_types(Option<Vec<FeatureType>>)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::set_feature_types): <p>A list of the types of analysis to perform. Add TABLES to the list to return information about the tables that are detected in the input document. Add FORMS to return detected form data. Add SIGNATURES to return the locations of detected signatures. To perform both forms and table analysis, add TABLES and FORMS to <code>FeatureTypes</code>. To detect signatures within form data and table data, add SIGNATURES to either TABLES or FORMS. All lines and words detected in the document are included in the response (including text that isn't related to the value of <code>FeatureTypes</code>). </p>
    ///   - [`human_loop_config(HumanLoopConfig)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::human_loop_config) / [`set_human_loop_config(Option<HumanLoopConfig>)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::set_human_loop_config): <p>Sets the configuration for the human in the loop workflow for analyzing documents.</p>
    ///   - [`queries_config(QueriesConfig)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::queries_config) / [`set_queries_config(Option<QueriesConfig>)`](crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::set_queries_config): <p>Contains Queries and the alias for those Queries, as determined by the input. </p>
    /// - On success, responds with [`AnalyzeDocumentOutput`](crate::operation::analyze_document::AnalyzeDocumentOutput) with field(s):
    ///   - [`document_metadata(Option<DocumentMetadata>)`](crate::operation::analyze_document::AnalyzeDocumentOutput::document_metadata): <p>Metadata about the analyzed document. An example is the number of pages.</p>
    ///   - [`blocks(Option<Vec<Block>>)`](crate::operation::analyze_document::AnalyzeDocumentOutput::blocks): <p>The items that are detected and analyzed by <code>AnalyzeDocument</code>.</p>
    ///   - [`human_loop_activation_output(Option<HumanLoopActivationOutput>)`](crate::operation::analyze_document::AnalyzeDocumentOutput::human_loop_activation_output): <p>Shows the results of the human in the loop evaluation.</p>
    ///   - [`analyze_document_model_version(Option<String>)`](crate::operation::analyze_document::AnalyzeDocumentOutput::analyze_document_model_version): <p>The version of the model used to analyze the document.</p>
    /// - On failure, responds with [`SdkError<AnalyzeDocumentError>`](crate::operation::analyze_document::AnalyzeDocumentError)
    pub fn analyze_document(
        &self,
    ) -> crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder {
        crate::operation::analyze_document::builders::AnalyzeDocumentFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
