// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_start_document_analysis_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::start_document_analysis::StartDocumentAnalysisInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.document_location {
        #[allow(unused_mut)]
        let mut object_2 = object.key("DocumentLocation").start_object();
        crate::protocol_serde::shape_document_location::ser_document_location(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.feature_types {
        let mut array_4 = object.key("FeatureTypes").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.job_tag {
        object.key("JobTag").string(var_7.as_str());
    }
    if let Some(var_8) = &input.notification_channel {
        #[allow(unused_mut)]
        let mut object_9 = object.key("NotificationChannel").start_object();
        crate::protocol_serde::shape_notification_channel::ser_notification_channel(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_output_config::ser_output_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.kms_key_id {
        object.key("KMSKeyId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.queries_config {
        #[allow(unused_mut)]
        let mut object_14 = object.key("QueriesConfig").start_object();
        crate::protocol_serde::shape_queries_config::ser_queries_config(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.adapters_config {
        #[allow(unused_mut)]
        let mut object_16 = object.key("AdaptersConfig").start_object();
        crate::protocol_serde::shape_adapters_config::ser_adapters_config(&mut object_16, var_15)?;
        object_16.finish();
    }
    Ok(())
}
