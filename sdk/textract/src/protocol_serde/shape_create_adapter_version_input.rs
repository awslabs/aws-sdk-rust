// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_adapter_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_adapter_version::CreateAdapterVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.adapter_id {
        object.key("AdapterId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.dataset_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DatasetConfig").start_object();
        crate::protocol_serde::shape_adapter_version_dataset_config::ser_adapter_version_dataset_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.kms_key_id {
        object.key("KMSKeyId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.output_config {
        #[allow(unused_mut)]
        let mut object_7 = object.key("OutputConfig").start_object();
        crate::protocol_serde::shape_output_config::ser_output_config(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    Ok(())
}
