// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure that lists each document processed in an AnalyzeID operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IdentityDocument {
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    #[doc(hidden)]
    pub document_index: std::option::Option<i32>,
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    #[doc(hidden)]
    pub identity_document_fields:
        std::option::Option<std::vec::Vec<crate::types::IdentityDocumentField>>,
    /// <p>Individual word recognition, as returned by document detection.</p>
    #[doc(hidden)]
    pub blocks: std::option::Option<std::vec::Vec<crate::types::Block>>,
}
impl IdentityDocument {
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    pub fn document_index(&self) -> std::option::Option<i32> {
        self.document_index
    }
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    pub fn identity_document_fields(
        &self,
    ) -> std::option::Option<&[crate::types::IdentityDocumentField]> {
        self.identity_document_fields.as_deref()
    }
    /// <p>Individual word recognition, as returned by document detection.</p>
    pub fn blocks(&self) -> std::option::Option<&[crate::types::Block]> {
        self.blocks.as_deref()
    }
}
impl IdentityDocument {
    /// Creates a new builder-style object to manufacture [`IdentityDocument`](crate::types::IdentityDocument).
    pub fn builder() -> crate::types::builders::IdentityDocumentBuilder {
        crate::types::builders::IdentityDocumentBuilder::default()
    }
}

/// A builder for [`IdentityDocument`](crate::types::IdentityDocument).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IdentityDocumentBuilder {
    pub(crate) document_index: std::option::Option<i32>,
    pub(crate) identity_document_fields:
        std::option::Option<std::vec::Vec<crate::types::IdentityDocumentField>>,
    pub(crate) blocks: std::option::Option<std::vec::Vec<crate::types::Block>>,
}
impl IdentityDocumentBuilder {
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    pub fn document_index(mut self, input: i32) -> Self {
        self.document_index = Some(input);
        self
    }
    /// <p>Denotes the placement of a document in the IdentityDocument list. The first document is marked 1, the second 2 and so on.</p>
    pub fn set_document_index(mut self, input: std::option::Option<i32>) -> Self {
        self.document_index = input;
        self
    }
    /// Appends an item to `identity_document_fields`.
    ///
    /// To override the contents of this collection use [`set_identity_document_fields`](Self::set_identity_document_fields).
    ///
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    pub fn identity_document_fields(mut self, input: crate::types::IdentityDocumentField) -> Self {
        let mut v = self.identity_document_fields.unwrap_or_default();
        v.push(input);
        self.identity_document_fields = Some(v);
        self
    }
    /// <p>The structure used to record information extracted from identity documents. Contains both normalized field and value of the extracted text.</p>
    pub fn set_identity_document_fields(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::IdentityDocumentField>>,
    ) -> Self {
        self.identity_document_fields = input;
        self
    }
    /// Appends an item to `blocks`.
    ///
    /// To override the contents of this collection use [`set_blocks`](Self::set_blocks).
    ///
    /// <p>Individual word recognition, as returned by document detection.</p>
    pub fn blocks(mut self, input: crate::types::Block) -> Self {
        let mut v = self.blocks.unwrap_or_default();
        v.push(input);
        self.blocks = Some(v);
        self
    }
    /// <p>Individual word recognition, as returned by document detection.</p>
    pub fn set_blocks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Block>>,
    ) -> Self {
        self.blocks = input;
        self
    }
    /// Consumes the builder and constructs a [`IdentityDocument`](crate::types::IdentityDocument).
    pub fn build(self) -> crate::types::IdentityDocument {
        crate::types::IdentityDocument {
            document_index: self.document_index,
            identity_document_fields: self.identity_document_fields,
            blocks: self.blocks,
        }
    }
}
