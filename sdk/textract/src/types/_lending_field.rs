// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Holds the normalized key-value pairs returned by AnalyzeDocument, including the document type, detected text, and geometry.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LendingField {
    /// <p>The type of the lending document.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The results extracted for a lending document.</p>
    pub key_detection: ::std::option::Option<crate::types::LendingDetection>,
    /// <p>An array of LendingDetection objects.</p>
    pub value_detections: ::std::option::Option<::std::vec::Vec<crate::types::LendingDetection>>,
}
impl LendingField {
    /// <p>The type of the lending document.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The results extracted for a lending document.</p>
    pub fn key_detection(&self) -> ::std::option::Option<&crate::types::LendingDetection> {
        self.key_detection.as_ref()
    }
    /// <p>An array of LendingDetection objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.value_detections.is_none()`.
    pub fn value_detections(&self) -> &[crate::types::LendingDetection] {
        self.value_detections.as_deref().unwrap_or_default()
    }
}
impl LendingField {
    /// Creates a new builder-style object to manufacture [`LendingField`](crate::types::LendingField).
    pub fn builder() -> crate::types::builders::LendingFieldBuilder {
        crate::types::builders::LendingFieldBuilder::default()
    }
}

/// A builder for [`LendingField`](crate::types::LendingField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LendingFieldBuilder {
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) key_detection: ::std::option::Option<crate::types::LendingDetection>,
    pub(crate) value_detections: ::std::option::Option<::std::vec::Vec<crate::types::LendingDetection>>,
}
impl LendingFieldBuilder {
    /// <p>The type of the lending document.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of the lending document.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the lending document.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The results extracted for a lending document.</p>
    pub fn key_detection(mut self, input: crate::types::LendingDetection) -> Self {
        self.key_detection = ::std::option::Option::Some(input);
        self
    }
    /// <p>The results extracted for a lending document.</p>
    pub fn set_key_detection(mut self, input: ::std::option::Option<crate::types::LendingDetection>) -> Self {
        self.key_detection = input;
        self
    }
    /// <p>The results extracted for a lending document.</p>
    pub fn get_key_detection(&self) -> &::std::option::Option<crate::types::LendingDetection> {
        &self.key_detection
    }
    /// Appends an item to `value_detections`.
    ///
    /// To override the contents of this collection use [`set_value_detections`](Self::set_value_detections).
    ///
    /// <p>An array of LendingDetection objects.</p>
    pub fn value_detections(mut self, input: crate::types::LendingDetection) -> Self {
        let mut v = self.value_detections.unwrap_or_default();
        v.push(input);
        self.value_detections = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of LendingDetection objects.</p>
    pub fn set_value_detections(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LendingDetection>>) -> Self {
        self.value_detections = input;
        self
    }
    /// <p>An array of LendingDetection objects.</p>
    pub fn get_value_detections(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LendingDetection>> {
        &self.value_detections
    }
    /// Consumes the builder and constructs a [`LendingField`](crate::types::LendingField).
    pub fn build(self) -> crate::types::LendingField {
        crate::types::LendingField {
            r#type: self.r#type,
            key_detection: self.key_detection,
            value_detections: self.value_detections,
        }
    }
}
