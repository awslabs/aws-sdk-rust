// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the pages of a document, defined by logical boundary.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SplitDocument {
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    #[doc(hidden)]
    pub index: std::option::Option<i32>,
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    #[doc(hidden)]
    pub pages: std::option::Option<std::vec::Vec<i32>>,
}
impl SplitDocument {
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    pub fn index(&self) -> std::option::Option<i32> {
        self.index
    }
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    pub fn pages(&self) -> std::option::Option<&[i32]> {
        self.pages.as_deref()
    }
}
impl SplitDocument {
    /// Creates a new builder-style object to manufacture [`SplitDocument`](crate::types::SplitDocument).
    pub fn builder() -> crate::types::builders::SplitDocumentBuilder {
        crate::types::builders::SplitDocumentBuilder::default()
    }
}

/// A builder for [`SplitDocument`](crate::types::SplitDocument).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SplitDocumentBuilder {
    pub(crate) index: std::option::Option<i32>,
    pub(crate) pages: std::option::Option<std::vec::Vec<i32>>,
}
impl SplitDocumentBuilder {
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    pub fn index(mut self, input: i32) -> Self {
        self.index = Some(input);
        self
    }
    /// <p>The index for a given document in a DocumentGroup of a specific Type.</p>
    pub fn set_index(mut self, input: std::option::Option<i32>) -> Self {
        self.index = input;
        self
    }
    /// Appends an item to `pages`.
    ///
    /// To override the contents of this collection use [`set_pages`](Self::set_pages).
    ///
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    pub fn pages(mut self, input: i32) -> Self {
        let mut v = self.pages.unwrap_or_default();
        v.push(input);
        self.pages = Some(v);
        self
    }
    /// <p>An array of page numbers for a for a given document, ordered by logical boundary.</p>
    pub fn set_pages(mut self, input: std::option::Option<std::vec::Vec<i32>>) -> Self {
        self.pages = input;
        self
    }
    /// Consumes the builder and constructs a [`SplitDocument`](crate::types::SplitDocument).
    pub fn build(self) -> crate::types::SplitDocument {
        crate::types::SplitDocument {
            index: self.index,
            pages: self.pages,
        }
    }
}
