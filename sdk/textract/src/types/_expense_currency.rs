// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns the kind of currency detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExpenseCurrency {
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>Percentage confideence in the detected currency.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl ExpenseCurrency {
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>Percentage confideence in the detected currency.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl ExpenseCurrency {
    /// Creates a new builder-style object to manufacture [`ExpenseCurrency`](crate::types::ExpenseCurrency).
    pub fn builder() -> crate::types::builders::ExpenseCurrencyBuilder {
        crate::types::builders::ExpenseCurrencyBuilder::default()
    }
}

/// A builder for [`ExpenseCurrency`](crate::types::ExpenseCurrency).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExpenseCurrencyBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) confidence: std::option::Option<f32>,
}
impl ExpenseCurrencyBuilder {
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>Currency code for detected currency. the current supported codes are:</p>
    /// <ul>
    /// <li> <p>USD</p> </li>
    /// <li> <p>EUR</p> </li>
    /// <li> <p>GBP</p> </li>
    /// <li> <p>CAD</p> </li>
    /// <li> <p>INR</p> </li>
    /// <li> <p>JPY</p> </li>
    /// <li> <p>CHF</p> </li>
    /// <li> <p>AUD</p> </li>
    /// <li> <p>CNY</p> </li>
    /// <li> <p>BZR</p> </li>
    /// <li> <p>SEK</p> </li>
    /// <li> <p>HKD</p> </li>
    /// </ul>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>Percentage confideence in the detected currency.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>Percentage confideence in the detected currency.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// Consumes the builder and constructs a [`ExpenseCurrency`](crate::types::ExpenseCurrency).
    pub fn build(self) -> crate::types::ExpenseCurrency {
        crate::types::ExpenseCurrency {
            code: self.code,
            confidence: self.confidence,
        }
    }
}
