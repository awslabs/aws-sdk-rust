// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Allows you to set attributes of the image. Currently, you can declare an image as free of personally identifiable information and adult content. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HumanLoopDataAttributes {
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    pub content_classifiers: ::std::option::Option<::std::vec::Vec<crate::types::ContentClassifier>>,
}
impl HumanLoopDataAttributes {
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.content_classifiers.is_none()`.
    pub fn content_classifiers(&self) -> &[crate::types::ContentClassifier] {
        self.content_classifiers.as_deref().unwrap_or_default()
    }
}
impl HumanLoopDataAttributes {
    /// Creates a new builder-style object to manufacture [`HumanLoopDataAttributes`](crate::types::HumanLoopDataAttributes).
    pub fn builder() -> crate::types::builders::HumanLoopDataAttributesBuilder {
        crate::types::builders::HumanLoopDataAttributesBuilder::default()
    }
}

/// A builder for [`HumanLoopDataAttributes`](crate::types::HumanLoopDataAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HumanLoopDataAttributesBuilder {
    pub(crate) content_classifiers: ::std::option::Option<::std::vec::Vec<crate::types::ContentClassifier>>,
}
impl HumanLoopDataAttributesBuilder {
    /// Appends an item to `content_classifiers`.
    ///
    /// To override the contents of this collection use [`set_content_classifiers`](Self::set_content_classifiers).
    ///
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    pub fn content_classifiers(mut self, input: crate::types::ContentClassifier) -> Self {
        let mut v = self.content_classifiers.unwrap_or_default();
        v.push(input);
        self.content_classifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    pub fn set_content_classifiers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContentClassifier>>) -> Self {
        self.content_classifiers = input;
        self
    }
    /// <p>Sets whether the input image is free of personally identifiable information or adult content.</p>
    pub fn get_content_classifiers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContentClassifier>> {
        &self.content_classifiers
    }
    /// Consumes the builder and constructs a [`HumanLoopDataAttributes`](crate::types::HumanLoopDataAttributes).
    pub fn build(self) -> crate::types::HumanLoopDataAttributes {
        crate::types::HumanLoopDataAttributes {
            content_classifiers: self.content_classifiers,
        }
    }
}
