// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to contain the information detected by an AnalyzeID operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalyzeIdDetections {
    /// <p>Text of either the normalized field or value associated with it.</p>
    #[doc(hidden)]
    pub text: std::option::Option<std::string::String>,
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    #[doc(hidden)]
    pub normalized_value: std::option::Option<crate::types::NormalizedValue>,
    /// <p>The confidence score of the detected text.</p>
    #[doc(hidden)]
    pub confidence: std::option::Option<f32>,
}
impl AnalyzeIdDetections {
    /// <p>Text of either the normalized field or value associated with it.</p>
    pub fn text(&self) -> std::option::Option<&str> {
        self.text.as_deref()
    }
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    pub fn normalized_value(&self) -> std::option::Option<&crate::types::NormalizedValue> {
        self.normalized_value.as_ref()
    }
    /// <p>The confidence score of the detected text.</p>
    pub fn confidence(&self) -> std::option::Option<f32> {
        self.confidence
    }
}
impl AnalyzeIdDetections {
    /// Creates a new builder-style object to manufacture [`AnalyzeIdDetections`](crate::types::AnalyzeIdDetections).
    pub fn builder() -> crate::types::builders::AnalyzeIdDetectionsBuilder {
        crate::types::builders::AnalyzeIdDetectionsBuilder::default()
    }
}

/// A builder for [`AnalyzeIdDetections`](crate::types::AnalyzeIdDetections).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalyzeIdDetectionsBuilder {
    pub(crate) text: std::option::Option<std::string::String>,
    pub(crate) normalized_value: std::option::Option<crate::types::NormalizedValue>,
    pub(crate) confidence: std::option::Option<f32>,
}
impl AnalyzeIdDetectionsBuilder {
    /// <p>Text of either the normalized field or value associated with it.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.text = Some(input.into());
        self
    }
    /// <p>Text of either the normalized field or value associated with it.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    pub fn normalized_value(mut self, input: crate::types::NormalizedValue) -> Self {
        self.normalized_value = Some(input);
        self
    }
    /// <p>Only returned for dates, returns the type of value detected and the date written in a more machine readable way.</p>
    pub fn set_normalized_value(
        mut self,
        input: std::option::Option<crate::types::NormalizedValue>,
    ) -> Self {
        self.normalized_value = input;
        self
    }
    /// <p>The confidence score of the detected text.</p>
    pub fn confidence(mut self, input: f32) -> Self {
        self.confidence = Some(input);
        self
    }
    /// <p>The confidence score of the detected text.</p>
    pub fn set_confidence(mut self, input: std::option::Option<f32>) -> Self {
        self.confidence = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalyzeIdDetections`](crate::types::AnalyzeIdDetections).
    pub fn build(self) -> crate::types::AnalyzeIdDetections {
        crate::types::AnalyzeIdDetections {
            text: self.text,
            normalized_value: self.normalized_value,
            confidence: self.confidence,
        }
    }
}
