// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueriesConfig {
    /// <p></p>
    #[doc(hidden)]
    pub queries: std::option::Option<std::vec::Vec<crate::types::Query>>,
}
impl QueriesConfig {
    /// <p></p>
    pub fn queries(&self) -> std::option::Option<&[crate::types::Query]> {
        self.queries.as_deref()
    }
}
impl QueriesConfig {
    /// Creates a new builder-style object to manufacture [`QueriesConfig`](crate::types::QueriesConfig).
    pub fn builder() -> crate::types::builders::QueriesConfigBuilder {
        crate::types::builders::QueriesConfigBuilder::default()
    }
}

/// A builder for [`QueriesConfig`](crate::types::QueriesConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueriesConfigBuilder {
    pub(crate) queries: std::option::Option<std::vec::Vec<crate::types::Query>>,
}
impl QueriesConfigBuilder {
    /// Appends an item to `queries`.
    ///
    /// To override the contents of this collection use [`set_queries`](Self::set_queries).
    ///
    /// <p></p>
    pub fn queries(mut self, input: crate::types::Query) -> Self {
        let mut v = self.queries.unwrap_or_default();
        v.push(input);
        self.queries = Some(v);
        self
    }
    /// <p></p>
    pub fn set_queries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Query>>,
    ) -> Self {
        self.queries = input;
        self
    }
    /// Consumes the builder and constructs a [`QueriesConfig`](crate::types::QueriesConfig).
    pub fn build(self) -> crate::types::QueriesConfig {
        crate::types::QueriesConfig {
            queries: self.queries,
        }
    }
}
