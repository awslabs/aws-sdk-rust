// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The S3 bucket name and file name that identifies the document.</p>
/// <p>The AWS Region for the S3 bucket that contains the document must match the Region that you use for Amazon Textract operations.</p>
/// <p>For Amazon Textract to process a file in an S3 bucket, the user must have permission to access the S3 bucket and file. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Object {
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
}
impl S3Object {
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
}
impl S3Object {
    /// Creates a new builder-style object to manufacture [`S3Object`](crate::types::S3Object).
    pub fn builder() -> crate::types::builders::S3ObjectBuilder {
        crate::types::builders::S3ObjectBuilder::default()
    }
}

/// A builder for [`S3Object`](crate::types::S3Object).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ObjectBuilder {
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
}
impl S3ObjectBuilder {
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket. Note that the # character is not valid in the file name.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The file name of the input document. Synchronous operations can use image files that are in JPEG or PNG format. Asynchronous operations also support PDF and TIFF format files.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>If the bucket has versioning enabled, you can specify the object version. </p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Object`](crate::types::S3Object).
    pub fn build(self) -> crate::types::S3Object {
        crate::types::S3Object {
            bucket: self.bucket,
            name: self.name,
            version: self.version,
        }
    }
}
