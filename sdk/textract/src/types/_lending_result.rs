// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the detections for each page analyzed through the Analyze Lending API.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub page: ::std::option::Option<i32>,
    /// <p>The classifier result for a given page.</p>
    pub page_classification: ::std::option::Option<crate::types::PageClassification>,
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub extractions: ::std::option::Option<::std::vec::Vec<crate::types::Extraction>>,
}
impl LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn page(&self) -> ::std::option::Option<i32> {
        self.page
    }
    /// <p>The classifier result for a given page.</p>
    pub fn page_classification(&self) -> ::std::option::Option<&crate::types::PageClassification> {
        self.page_classification.as_ref()
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.extractions.is_none()`.
    pub fn extractions(&self) -> &[crate::types::Extraction] {
        self.extractions.as_deref().unwrap_or_default()
    }
}
impl LendingResult {
    /// Creates a new builder-style object to manufacture [`LendingResult`](crate::types::LendingResult).
    pub fn builder() -> crate::types::builders::LendingResultBuilder {
        crate::types::builders::LendingResultBuilder::default()
    }
}

/// A builder for [`LendingResult`](crate::types::LendingResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LendingResultBuilder {
    pub(crate) page: ::std::option::Option<i32>,
    pub(crate) page_classification: ::std::option::Option<crate::types::PageClassification>,
    pub(crate) extractions: ::std::option::Option<::std::vec::Vec<crate::types::Extraction>>,
}
impl LendingResultBuilder {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn page(mut self, input: i32) -> Self {
        self.page = ::std::option::Option::Some(input);
        self
    }
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn set_page(mut self, input: ::std::option::Option<i32>) -> Self {
        self.page = input;
        self
    }
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn get_page(&self) -> &::std::option::Option<i32> {
        &self.page
    }
    /// <p>The classifier result for a given page.</p>
    pub fn page_classification(mut self, input: crate::types::PageClassification) -> Self {
        self.page_classification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The classifier result for a given page.</p>
    pub fn set_page_classification(mut self, input: ::std::option::Option<crate::types::PageClassification>) -> Self {
        self.page_classification = input;
        self
    }
    /// <p>The classifier result for a given page.</p>
    pub fn get_page_classification(&self) -> &::std::option::Option<crate::types::PageClassification> {
        &self.page_classification
    }
    /// Appends an item to `extractions`.
    ///
    /// To override the contents of this collection use [`set_extractions`](Self::set_extractions).
    ///
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn extractions(mut self, input: crate::types::Extraction) -> Self {
        let mut v = self.extractions.unwrap_or_default();
        v.push(input);
        self.extractions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn set_extractions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Extraction>>) -> Self {
        self.extractions = input;
        self
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn get_extractions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Extraction>> {
        &self.extractions
    }
    /// Consumes the builder and constructs a [`LendingResult`](crate::types::LendingResult).
    pub fn build(self) -> crate::types::LendingResult {
        crate::types::LendingResult {
            page: self.page,
            page_classification: self.page_classification,
            extractions: self.extractions,
        }
    }
}
