// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the detections for each page analyzed through the Analyze Lending API.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    #[doc(hidden)]
    pub page: std::option::Option<i32>,
    /// <p>The classifier result for a given page.</p>
    #[doc(hidden)]
    pub page_classification: std::option::Option<crate::types::PageClassification>,
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    #[doc(hidden)]
    pub extractions: std::option::Option<std::vec::Vec<crate::types::Extraction>>,
}
impl LendingResult {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn page(&self) -> std::option::Option<i32> {
        self.page
    }
    /// <p>The classifier result for a given page.</p>
    pub fn page_classification(&self) -> std::option::Option<&crate::types::PageClassification> {
        self.page_classification.as_ref()
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn extractions(&self) -> std::option::Option<&[crate::types::Extraction]> {
        self.extractions.as_deref()
    }
}
impl LendingResult {
    /// Creates a new builder-style object to manufacture [`LendingResult`](crate::types::LendingResult).
    pub fn builder() -> crate::types::builders::LendingResultBuilder {
        crate::types::builders::LendingResultBuilder::default()
    }
}

/// A builder for [`LendingResult`](crate::types::LendingResult).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LendingResultBuilder {
    pub(crate) page: std::option::Option<i32>,
    pub(crate) page_classification: std::option::Option<crate::types::PageClassification>,
    pub(crate) extractions: std::option::Option<std::vec::Vec<crate::types::Extraction>>,
}
impl LendingResultBuilder {
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn page(mut self, input: i32) -> Self {
        self.page = Some(input);
        self
    }
    /// <p>The page number for a page, with regard to whole submission.</p>
    pub fn set_page(mut self, input: std::option::Option<i32>) -> Self {
        self.page = input;
        self
    }
    /// <p>The classifier result for a given page.</p>
    pub fn page_classification(mut self, input: crate::types::PageClassification) -> Self {
        self.page_classification = Some(input);
        self
    }
    /// <p>The classifier result for a given page.</p>
    pub fn set_page_classification(
        mut self,
        input: std::option::Option<crate::types::PageClassification>,
    ) -> Self {
        self.page_classification = input;
        self
    }
    /// Appends an item to `extractions`.
    ///
    /// To override the contents of this collection use [`set_extractions`](Self::set_extractions).
    ///
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn extractions(mut self, input: crate::types::Extraction) -> Self {
        let mut v = self.extractions.unwrap_or_default();
        v.push(input);
        self.extractions = Some(v);
        self
    }
    /// <p>An array of Extraction to hold structured data. e.g. normalized key value pairs instead of raw OCR detections .</p>
    pub fn set_extractions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Extraction>>,
    ) -> Self {
        self.extractions = input;
        self
    }
    /// Consumes the builder and constructs a [`LendingResult`](crate::types::LendingResult).
    pub fn build(self) -> crate::types::LendingResult {
        crate::types::LendingResult {
            page: self.page,
            page_classification: self.page_classification,
            extractions: self.extractions,
        }
    }
}
