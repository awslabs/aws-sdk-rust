// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information regarding DocumentGroups and UndetectedDocumentTypes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LendingSummary {
    /// <p>Contains an array of all DocumentGroup objects.</p>
    pub document_groups: ::std::option::Option<::std::vec::Vec<crate::types::DocumentGroup>>,
    /// <p>UndetectedDocumentTypes.</p>
    pub undetected_document_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LendingSummary {
    /// <p>Contains an array of all DocumentGroup objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.document_groups.is_none()`.
    pub fn document_groups(&self) -> &[crate::types::DocumentGroup] {
        self.document_groups.as_deref().unwrap_or_default()
    }
    /// <p>UndetectedDocumentTypes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.undetected_document_types.is_none()`.
    pub fn undetected_document_types(&self) -> &[::std::string::String] {
        self.undetected_document_types.as_deref().unwrap_or_default()
    }
}
impl LendingSummary {
    /// Creates a new builder-style object to manufacture [`LendingSummary`](crate::types::LendingSummary).
    pub fn builder() -> crate::types::builders::LendingSummaryBuilder {
        crate::types::builders::LendingSummaryBuilder::default()
    }
}

/// A builder for [`LendingSummary`](crate::types::LendingSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LendingSummaryBuilder {
    pub(crate) document_groups: ::std::option::Option<::std::vec::Vec<crate::types::DocumentGroup>>,
    pub(crate) undetected_document_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LendingSummaryBuilder {
    /// Appends an item to `document_groups`.
    ///
    /// To override the contents of this collection use [`set_document_groups`](Self::set_document_groups).
    ///
    /// <p>Contains an array of all DocumentGroup objects.</p>
    pub fn document_groups(mut self, input: crate::types::DocumentGroup) -> Self {
        let mut v = self.document_groups.unwrap_or_default();
        v.push(input);
        self.document_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains an array of all DocumentGroup objects.</p>
    pub fn set_document_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DocumentGroup>>) -> Self {
        self.document_groups = input;
        self
    }
    /// <p>Contains an array of all DocumentGroup objects.</p>
    pub fn get_document_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DocumentGroup>> {
        &self.document_groups
    }
    /// Appends an item to `undetected_document_types`.
    ///
    /// To override the contents of this collection use [`set_undetected_document_types`](Self::set_undetected_document_types).
    ///
    /// <p>UndetectedDocumentTypes.</p>
    pub fn undetected_document_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.undetected_document_types.unwrap_or_default();
        v.push(input.into());
        self.undetected_document_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>UndetectedDocumentTypes.</p>
    pub fn set_undetected_document_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.undetected_document_types = input;
        self
    }
    /// <p>UndetectedDocumentTypes.</p>
    pub fn get_undetected_document_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.undetected_document_types
    }
    /// Consumes the builder and constructs a [`LendingSummary`](crate::types::LendingSummary).
    pub fn build(self) -> crate::types::LendingSummary {
        crate::types::LendingSummary {
            document_groups: self.document_groups,
            undetected_document_types: self.undetected_document_types,
        }
    }
}
