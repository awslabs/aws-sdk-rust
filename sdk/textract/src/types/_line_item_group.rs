// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A grouping of tables which contain LineItems, with each table identified by the table's <code>LineItemGroupIndex</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LineItemGroup {
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    #[doc(hidden)]
    pub line_item_group_index: std::option::Option<i32>,
    /// <p>The breakdown of information on a particular line of a table. </p>
    #[doc(hidden)]
    pub line_items: std::option::Option<std::vec::Vec<crate::types::LineItemFields>>,
}
impl LineItemGroup {
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    pub fn line_item_group_index(&self) -> std::option::Option<i32> {
        self.line_item_group_index
    }
    /// <p>The breakdown of information on a particular line of a table. </p>
    pub fn line_items(&self) -> std::option::Option<&[crate::types::LineItemFields]> {
        self.line_items.as_deref()
    }
}
impl LineItemGroup {
    /// Creates a new builder-style object to manufacture [`LineItemGroup`](crate::types::LineItemGroup).
    pub fn builder() -> crate::types::builders::LineItemGroupBuilder {
        crate::types::builders::LineItemGroupBuilder::default()
    }
}

/// A builder for [`LineItemGroup`](crate::types::LineItemGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LineItemGroupBuilder {
    pub(crate) line_item_group_index: std::option::Option<i32>,
    pub(crate) line_items: std::option::Option<std::vec::Vec<crate::types::LineItemFields>>,
}
impl LineItemGroupBuilder {
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    pub fn line_item_group_index(mut self, input: i32) -> Self {
        self.line_item_group_index = Some(input);
        self
    }
    /// <p>The number used to identify a specific table in a document. The first table encountered will have a LineItemGroupIndex of 1, the second 2, etc.</p>
    pub fn set_line_item_group_index(mut self, input: std::option::Option<i32>) -> Self {
        self.line_item_group_index = input;
        self
    }
    /// Appends an item to `line_items`.
    ///
    /// To override the contents of this collection use [`set_line_items`](Self::set_line_items).
    ///
    /// <p>The breakdown of information on a particular line of a table. </p>
    pub fn line_items(mut self, input: crate::types::LineItemFields) -> Self {
        let mut v = self.line_items.unwrap_or_default();
        v.push(input);
        self.line_items = Some(v);
        self
    }
    /// <p>The breakdown of information on a particular line of a table. </p>
    pub fn set_line_items(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LineItemFields>>,
    ) -> Self {
        self.line_items = input;
        self
    }
    /// Consumes the builder and constructs a [`LineItemGroup`](crate::types::LineItemGroup).
    pub fn build(self) -> crate::types::LineItemGroup {
        crate::types::LineItemGroup {
            line_item_group_index: self.line_item_group_index,
            line_items: self.line_items,
        }
    }
}
