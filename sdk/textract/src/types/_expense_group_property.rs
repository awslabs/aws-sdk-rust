// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Shows the group that a certain key belongs to. This helps differentiate between names and addresses for different organizations, that can be hard to determine via JSON response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExpenseGroupProperty {
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    pub types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub id: ::std::option::Option<::std::string::String>,
}
impl ExpenseGroupProperty {
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.types.is_none()`.
    pub fn types(&self) -> &[::std::string::String] {
        self.types.as_deref().unwrap_or_default()
    }
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl ExpenseGroupProperty {
    /// Creates a new builder-style object to manufacture [`ExpenseGroupProperty`](crate::types::ExpenseGroupProperty).
    pub fn builder() -> crate::types::builders::ExpenseGroupPropertyBuilder {
        crate::types::builders::ExpenseGroupPropertyBuilder::default()
    }
}

/// A builder for [`ExpenseGroupProperty`](crate::types::ExpenseGroupProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExpenseGroupPropertyBuilder {
    pub(crate) types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
}
impl ExpenseGroupPropertyBuilder {
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    pub fn types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = ::std::option::Option::Some(v);
        self
    }
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    pub fn set_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.types = input;
        self
    }
    /// <p>Informs you on whether the expense group is a name or an address.</p>
    pub fn get_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.types
    }
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>Provides a group Id number, which will be the same for each in the group.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// Consumes the builder and constructs a [`ExpenseGroupProperty`](crate::types::ExpenseGroupProperty).
    pub fn build(self) -> crate::types::ExpenseGroupProperty {
        crate::types::ExpenseGroupProperty {
            types: self.types,
            id: self.id,
        }
    }
}
