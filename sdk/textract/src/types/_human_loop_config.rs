// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Sets up the human review workflow the document will be sent to if one of the conditions is met. You can also set certain attributes of the image before review. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HumanLoopConfig {
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    pub human_loop_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    pub flow_definition_arn: ::std::string::String,
    /// <p>Sets attributes of the input data.</p>
    pub data_attributes: ::std::option::Option<crate::types::HumanLoopDataAttributes>,
}
impl HumanLoopConfig {
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    pub fn human_loop_name(&self) -> &str {
        use std::ops::Deref;
        self.human_loop_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    pub fn flow_definition_arn(&self) -> &str {
        use std::ops::Deref;
        self.flow_definition_arn.deref()
    }
    /// <p>Sets attributes of the input data.</p>
    pub fn data_attributes(&self) -> ::std::option::Option<&crate::types::HumanLoopDataAttributes> {
        self.data_attributes.as_ref()
    }
}
impl HumanLoopConfig {
    /// Creates a new builder-style object to manufacture [`HumanLoopConfig`](crate::types::HumanLoopConfig).
    pub fn builder() -> crate::types::builders::HumanLoopConfigBuilder {
        crate::types::builders::HumanLoopConfigBuilder::default()
    }
}

/// A builder for [`HumanLoopConfig`](crate::types::HumanLoopConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HumanLoopConfigBuilder {
    pub(crate) human_loop_name: ::std::option::Option<::std::string::String>,
    pub(crate) flow_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) data_attributes: ::std::option::Option<crate::types::HumanLoopDataAttributes>,
}
impl HumanLoopConfigBuilder {
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    /// This field is required.
    pub fn human_loop_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.human_loop_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    pub fn set_human_loop_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.human_loop_name = input;
        self
    }
    /// <p>The name of the human workflow used for this image. This should be kept unique within a region.</p>
    pub fn get_human_loop_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.human_loop_name
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    /// This field is required.
    pub fn flow_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.flow_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    pub fn set_flow_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.flow_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the flow definition.</p>
    pub fn get_flow_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.flow_definition_arn
    }
    /// <p>Sets attributes of the input data.</p>
    pub fn data_attributes(mut self, input: crate::types::HumanLoopDataAttributes) -> Self {
        self.data_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets attributes of the input data.</p>
    pub fn set_data_attributes(mut self, input: ::std::option::Option<crate::types::HumanLoopDataAttributes>) -> Self {
        self.data_attributes = input;
        self
    }
    /// <p>Sets attributes of the input data.</p>
    pub fn get_data_attributes(&self) -> &::std::option::Option<crate::types::HumanLoopDataAttributes> {
        &self.data_attributes
    }
    /// Consumes the builder and constructs a [`HumanLoopConfig`](crate::types::HumanLoopConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`human_loop_name`](crate::types::builders::HumanLoopConfigBuilder::human_loop_name)
    /// - [`flow_definition_arn`](crate::types::builders::HumanLoopConfigBuilder::flow_definition_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::HumanLoopConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HumanLoopConfig {
            human_loop_name: self.human_loop_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "human_loop_name",
                    "human_loop_name was not specified but it is required when building HumanLoopConfig",
                )
            })?,
            flow_definition_arn: self.flow_definition_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "flow_definition_arn",
                    "flow_definition_arn was not specified but it is required when building HumanLoopConfig",
                )
            })?,
            data_attributes: self.data_attributes,
        })
    }
}
