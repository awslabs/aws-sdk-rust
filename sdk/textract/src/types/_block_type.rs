// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BlockType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let blocktype = unimplemented!();
/// match blocktype {
///     BlockType::Cell => { /* ... */ },
///     BlockType::KeyValueSet => { /* ... */ },
///     BlockType::LayoutFigure => { /* ... */ },
///     BlockType::LayoutFooter => { /* ... */ },
///     BlockType::LayoutHeader => { /* ... */ },
///     BlockType::LayoutKeyValue => { /* ... */ },
///     BlockType::LayoutList => { /* ... */ },
///     BlockType::LayoutPageNumber => { /* ... */ },
///     BlockType::LayoutSectionHeader => { /* ... */ },
///     BlockType::LayoutTable => { /* ... */ },
///     BlockType::LayoutText => { /* ... */ },
///     BlockType::LayoutTitle => { /* ... */ },
///     BlockType::Line => { /* ... */ },
///     BlockType::MergedCell => { /* ... */ },
///     BlockType::Page => { /* ... */ },
///     BlockType::Query => { /* ... */ },
///     BlockType::QueryResult => { /* ... */ },
///     BlockType::SelectionElement => { /* ... */ },
///     BlockType::Signature => { /* ... */ },
///     BlockType::Table => { /* ... */ },
///     BlockType::TableFooter => { /* ... */ },
///     BlockType::TableTitle => { /* ... */ },
///     BlockType::Title => { /* ... */ },
///     BlockType::Word => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `blocktype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BlockType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BlockType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BlockType::NewFeature` is defined.
/// Specifically, when `blocktype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BlockType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum BlockType {
    #[allow(missing_docs)] // documentation missing in model
    Cell,
    #[allow(missing_docs)] // documentation missing in model
    KeyValueSet,
    #[allow(missing_docs)] // documentation missing in model
    LayoutFigure,
    #[allow(missing_docs)] // documentation missing in model
    LayoutFooter,
    #[allow(missing_docs)] // documentation missing in model
    LayoutHeader,
    #[allow(missing_docs)] // documentation missing in model
    LayoutKeyValue,
    #[allow(missing_docs)] // documentation missing in model
    LayoutList,
    #[allow(missing_docs)] // documentation missing in model
    LayoutPageNumber,
    #[allow(missing_docs)] // documentation missing in model
    LayoutSectionHeader,
    #[allow(missing_docs)] // documentation missing in model
    LayoutTable,
    #[allow(missing_docs)] // documentation missing in model
    LayoutText,
    #[allow(missing_docs)] // documentation missing in model
    LayoutTitle,
    #[allow(missing_docs)] // documentation missing in model
    Line,
    #[allow(missing_docs)] // documentation missing in model
    MergedCell,
    #[allow(missing_docs)] // documentation missing in model
    Page,
    #[allow(missing_docs)] // documentation missing in model
    Query,
    #[allow(missing_docs)] // documentation missing in model
    QueryResult,
    #[allow(missing_docs)] // documentation missing in model
    SelectionElement,
    #[allow(missing_docs)] // documentation missing in model
    Signature,
    #[allow(missing_docs)] // documentation missing in model
    Table,
    #[allow(missing_docs)] // documentation missing in model
    TableFooter,
    #[allow(missing_docs)] // documentation missing in model
    TableTitle,
    #[allow(missing_docs)] // documentation missing in model
    Title,
    #[allow(missing_docs)] // documentation missing in model
    Word,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for BlockType {
    fn from(s: &str) -> Self {
        match s {
            "CELL" => BlockType::Cell,
            "KEY_VALUE_SET" => BlockType::KeyValueSet,
            "LAYOUT_FIGURE" => BlockType::LayoutFigure,
            "LAYOUT_FOOTER" => BlockType::LayoutFooter,
            "LAYOUT_HEADER" => BlockType::LayoutHeader,
            "LAYOUT_KEY_VALUE" => BlockType::LayoutKeyValue,
            "LAYOUT_LIST" => BlockType::LayoutList,
            "LAYOUT_PAGE_NUMBER" => BlockType::LayoutPageNumber,
            "LAYOUT_SECTION_HEADER" => BlockType::LayoutSectionHeader,
            "LAYOUT_TABLE" => BlockType::LayoutTable,
            "LAYOUT_TEXT" => BlockType::LayoutText,
            "LAYOUT_TITLE" => BlockType::LayoutTitle,
            "LINE" => BlockType::Line,
            "MERGED_CELL" => BlockType::MergedCell,
            "PAGE" => BlockType::Page,
            "QUERY" => BlockType::Query,
            "QUERY_RESULT" => BlockType::QueryResult,
            "SELECTION_ELEMENT" => BlockType::SelectionElement,
            "SIGNATURE" => BlockType::Signature,
            "TABLE" => BlockType::Table,
            "TABLE_FOOTER" => BlockType::TableFooter,
            "TABLE_TITLE" => BlockType::TableTitle,
            "TITLE" => BlockType::Title,
            "WORD" => BlockType::Word,
            other => BlockType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for BlockType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(BlockType::from(s))
    }
}
impl BlockType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BlockType::Cell => "CELL",
            BlockType::KeyValueSet => "KEY_VALUE_SET",
            BlockType::LayoutFigure => "LAYOUT_FIGURE",
            BlockType::LayoutFooter => "LAYOUT_FOOTER",
            BlockType::LayoutHeader => "LAYOUT_HEADER",
            BlockType::LayoutKeyValue => "LAYOUT_KEY_VALUE",
            BlockType::LayoutList => "LAYOUT_LIST",
            BlockType::LayoutPageNumber => "LAYOUT_PAGE_NUMBER",
            BlockType::LayoutSectionHeader => "LAYOUT_SECTION_HEADER",
            BlockType::LayoutTable => "LAYOUT_TABLE",
            BlockType::LayoutText => "LAYOUT_TEXT",
            BlockType::LayoutTitle => "LAYOUT_TITLE",
            BlockType::Line => "LINE",
            BlockType::MergedCell => "MERGED_CELL",
            BlockType::Page => "PAGE",
            BlockType::Query => "QUERY",
            BlockType::QueryResult => "QUERY_RESULT",
            BlockType::SelectionElement => "SELECTION_ELEMENT",
            BlockType::Signature => "SIGNATURE",
            BlockType::Table => "TABLE",
            BlockType::TableFooter => "TABLE_FOOTER",
            BlockType::TableTitle => "TABLE_TITLE",
            BlockType::Title => "TITLE",
            BlockType::Word => "WORD",
            BlockType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CELL",
            "KEY_VALUE_SET",
            "LAYOUT_FIGURE",
            "LAYOUT_FOOTER",
            "LAYOUT_HEADER",
            "LAYOUT_KEY_VALUE",
            "LAYOUT_LIST",
            "LAYOUT_PAGE_NUMBER",
            "LAYOUT_SECTION_HEADER",
            "LAYOUT_TABLE",
            "LAYOUT_TEXT",
            "LAYOUT_TITLE",
            "LINE",
            "MERGED_CELL",
            "PAGE",
            "QUERY",
            "QUERY_RESULT",
            "SELECTION_ELEMENT",
            "SIGNATURE",
            "TABLE",
            "TABLE_FOOTER",
            "TABLE_TITLE",
            "TITLE",
            "WORD",
        ]
    }
}
impl ::std::convert::AsRef<str> for BlockType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl BlockType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for BlockType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            BlockType::Cell => write!(f, "CELL"),
            BlockType::KeyValueSet => write!(f, "KEY_VALUE_SET"),
            BlockType::LayoutFigure => write!(f, "LAYOUT_FIGURE"),
            BlockType::LayoutFooter => write!(f, "LAYOUT_FOOTER"),
            BlockType::LayoutHeader => write!(f, "LAYOUT_HEADER"),
            BlockType::LayoutKeyValue => write!(f, "LAYOUT_KEY_VALUE"),
            BlockType::LayoutList => write!(f, "LAYOUT_LIST"),
            BlockType::LayoutPageNumber => write!(f, "LAYOUT_PAGE_NUMBER"),
            BlockType::LayoutSectionHeader => write!(f, "LAYOUT_SECTION_HEADER"),
            BlockType::LayoutTable => write!(f, "LAYOUT_TABLE"),
            BlockType::LayoutText => write!(f, "LAYOUT_TEXT"),
            BlockType::LayoutTitle => write!(f, "LAYOUT_TITLE"),
            BlockType::Line => write!(f, "LINE"),
            BlockType::MergedCell => write!(f, "MERGED_CELL"),
            BlockType::Page => write!(f, "PAGE"),
            BlockType::Query => write!(f, "QUERY"),
            BlockType::QueryResult => write!(f, "QUERY_RESULT"),
            BlockType::SelectionElement => write!(f, "SELECTION_ELEMENT"),
            BlockType::Signature => write!(f, "SIGNATURE"),
            BlockType::Table => write!(f, "TABLE"),
            BlockType::TableFooter => write!(f, "TABLE_FOOTER"),
            BlockType::TableTitle => write!(f, "TABLE_TITLE"),
            BlockType::Title => write!(f, "TITLE"),
            BlockType::Word => write!(f, "WORD"),
            BlockType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
