// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Parameters requried to encrypt plaintext data using symmetric keys.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SymmetricEncryptionAttributes {
    /// <p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p>
    pub mode: crate::types::EncryptionMode,
    /// <p>An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value.</p>
    pub initialization_vector: ::std::option::Option<::std::string::String>,
    /// <p>The padding to be included with the data.</p>
    pub padding_type: ::std::option::Option<crate::types::PaddingType>,
}
impl SymmetricEncryptionAttributes {
    /// <p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p>
    pub fn mode(&self) -> &crate::types::EncryptionMode {
        &self.mode
    }
    /// <p>An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value.</p>
    pub fn initialization_vector(&self) -> ::std::option::Option<&str> {
        self.initialization_vector.as_deref()
    }
    /// <p>The padding to be included with the data.</p>
    pub fn padding_type(&self) -> ::std::option::Option<&crate::types::PaddingType> {
        self.padding_type.as_ref()
    }
}
impl ::std::fmt::Debug for SymmetricEncryptionAttributes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SymmetricEncryptionAttributes");
        formatter.field("mode", &self.mode);
        formatter.field("initialization_vector", &"*** Sensitive Data Redacted ***");
        formatter.field("padding_type", &self.padding_type);
        formatter.finish()
    }
}
impl SymmetricEncryptionAttributes {
    /// Creates a new builder-style object to manufacture [`SymmetricEncryptionAttributes`](crate::types::SymmetricEncryptionAttributes).
    pub fn builder() -> crate::types::builders::SymmetricEncryptionAttributesBuilder {
        crate::types::builders::SymmetricEncryptionAttributesBuilder::default()
    }
}

/// A builder for [`SymmetricEncryptionAttributes`](crate::types::SymmetricEncryptionAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SymmetricEncryptionAttributesBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::EncryptionMode>,
    pub(crate) initialization_vector: ::std::option::Option<::std::string::String>,
    pub(crate) padding_type: ::std::option::Option<crate::types::PaddingType>,
}
impl SymmetricEncryptionAttributesBuilder {
    /// <p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::EncryptionMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::EncryptionMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The block cipher mode of operation. Block ciphers are designed to encrypt a block of data of fixed size (for example, 128 bits). The size of the input block is usually same as the size of the encrypted output block, while the key length can be different. A mode of operation describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::EncryptionMode> {
        &self.mode
    }
    /// <p>An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value.</p>
    pub fn initialization_vector(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initialization_vector = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value.</p>
    pub fn set_initialization_vector(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initialization_vector = input;
        self
    }
    /// <p>An input to cryptographic primitive used to provide the intial state. The <code>InitializationVector</code> is typically required have a random or psuedo-random value, but sometimes it only needs to be unpredictable or unique. If a value is not provided, Amazon Web Services Payment Cryptography generates a random value.</p>
    pub fn get_initialization_vector(&self) -> &::std::option::Option<::std::string::String> {
        &self.initialization_vector
    }
    /// <p>The padding to be included with the data.</p>
    pub fn padding_type(mut self, input: crate::types::PaddingType) -> Self {
        self.padding_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The padding to be included with the data.</p>
    pub fn set_padding_type(mut self, input: ::std::option::Option<crate::types::PaddingType>) -> Self {
        self.padding_type = input;
        self
    }
    /// <p>The padding to be included with the data.</p>
    pub fn get_padding_type(&self) -> &::std::option::Option<crate::types::PaddingType> {
        &self.padding_type
    }
    /// Consumes the builder and constructs a [`SymmetricEncryptionAttributes`](crate::types::SymmetricEncryptionAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::SymmetricEncryptionAttributesBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::SymmetricEncryptionAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SymmetricEncryptionAttributes {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building SymmetricEncryptionAttributes",
                )
            })?,
            initialization_vector: self.initialization_vector,
            padding_type: self.padding_type,
        })
    }
}
impl ::std::fmt::Debug for SymmetricEncryptionAttributesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SymmetricEncryptionAttributesBuilder");
        formatter.field("mode", &self.mode);
        formatter.field("initialization_vector", &"*** Sensitive Data Redacted ***");
        formatter.field("padding_type", &self.padding_type);
        formatter.finish()
    }
}
