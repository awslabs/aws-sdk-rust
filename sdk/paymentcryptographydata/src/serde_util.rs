// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn decrypt_data_output_correct_errors(
    mut builder: crate::operation::decrypt_data::builders::DecryptDataOutputBuilder,
) -> crate::operation::decrypt_data::builders::DecryptDataOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    if builder.plain_text.is_none() {
        builder.plain_text = Some(Default::default())
    }
    builder
}

pub(crate) fn encrypt_data_output_correct_errors(
    mut builder: crate::operation::encrypt_data::builders::EncryptDataOutputBuilder,
) -> crate::operation::encrypt_data::builders::EncryptDataOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.cipher_text.is_none() {
        builder.cipher_text = Some(Default::default())
    }
    builder
}

pub(crate) fn generate_card_validation_data_output_correct_errors(
    mut builder: crate::operation::generate_card_validation_data::builders::GenerateCardValidationDataOutputBuilder,
) -> crate::operation::generate_card_validation_data::builders::GenerateCardValidationDataOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    if builder.validation_data.is_none() {
        builder.validation_data = Some(Default::default())
    }
    builder
}

pub(crate) fn generate_mac_output_correct_errors(
    mut builder: crate::operation::generate_mac::builders::GenerateMacOutputBuilder,
) -> crate::operation::generate_mac::builders::GenerateMacOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    if builder.mac.is_none() {
        builder.mac = Some(Default::default())
    }
    builder
}

pub(crate) fn generate_pin_data_output_correct_errors(
    mut builder: crate::operation::generate_pin_data::builders::GeneratePinDataOutputBuilder,
) -> crate::operation::generate_pin_data::builders::GeneratePinDataOutputBuilder {
    if builder.generation_key_arn.is_none() {
        builder.generation_key_arn = Some(Default::default())
    }
    if builder.generation_key_check_value.is_none() {
        builder.generation_key_check_value = Some(Default::default())
    }
    if builder.encryption_key_arn.is_none() {
        builder.encryption_key_arn = Some(Default::default())
    }
    if builder.encryption_key_check_value.is_none() {
        builder.encryption_key_check_value = Some(Default::default())
    }
    if builder.encrypted_pin_block.is_none() {
        builder.encrypted_pin_block = Some(Default::default())
    }
    if builder.pin_data.is_none() {
        builder.pin_data = Some(crate::types::PinData::Unknown)
    }
    builder
}

pub(crate) fn re_encrypt_data_output_correct_errors(
    mut builder: crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder,
) -> crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    if builder.cipher_text.is_none() {
        builder.cipher_text = Some(Default::default())
    }
    builder
}

pub(crate) fn translate_pin_data_output_correct_errors(
    mut builder: crate::operation::translate_pin_data::builders::TranslatePinDataOutputBuilder,
) -> crate::operation::translate_pin_data::builders::TranslatePinDataOutputBuilder {
    if builder.pin_block.is_none() {
        builder.pin_block = Some(Default::default())
    }
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    builder
}

pub(crate) fn verification_failed_exception_correct_errors(
    mut builder: crate::types::error::builders::VerificationFailedExceptionBuilder,
) -> crate::types::error::builders::VerificationFailedExceptionBuilder {
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::VerificationFailedReason>().ok()
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_auth_request_cryptogram_output_correct_errors(
    mut builder: crate::operation::verify_auth_request_cryptogram::builders::VerifyAuthRequestCryptogramOutputBuilder,
) -> crate::operation::verify_auth_request_cryptogram::builders::VerifyAuthRequestCryptogramOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_card_validation_data_output_correct_errors(
    mut builder: crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataOutputBuilder,
) -> crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_mac_output_correct_errors(
    mut builder: crate::operation::verify_mac::builders::VerifyMacOutputBuilder,
) -> crate::operation::verify_mac::builders::VerifyMacOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_check_value.is_none() {
        builder.key_check_value = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_pin_data_output_correct_errors(
    mut builder: crate::operation::verify_pin_data::builders::VerifyPinDataOutputBuilder,
) -> crate::operation::verify_pin_data::builders::VerifyPinDataOutputBuilder {
    if builder.verification_key_arn.is_none() {
        builder.verification_key_arn = Some(Default::default())
    }
    if builder.verification_key_check_value.is_none() {
        builder.verification_key_check_value = Some(Default::default())
    }
    if builder.encryption_key_arn.is_none() {
        builder.encryption_key_arn = Some(Default::default())
    }
    if builder.encryption_key_check_value.is_none() {
        builder.encryption_key_check_value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
