// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::verify_pin_data::_verify_pin_data_output::VerifyPinDataOutputBuilder;

pub use crate::operation::verify_pin_data::_verify_pin_data_input::VerifyPinDataInputBuilder;

impl VerifyPinDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::verify_pin_data::VerifyPinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_pin_data::VerifyPinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.verify_pin_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `VerifyPinData`.
///
/// <p>Verifies pin-related data such as PIN and PIN Offset using algorithms including VISA PVV and IBM3624. For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/verify-pin-data.html">Verify PIN data</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p>This operation verifies PIN data for user payment card. A card holder PIN data is never transmitted in clear to or from Amazon Web Services Payment Cryptography. This operation uses PIN Verification Key (PVK) for PIN or PIN Offset generation and then encrypts it using PIN Encryption Key (PEK) to create an <code>EncryptedPinBlock</code> for transmission from Amazon Web Services Payment Cryptography. </p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>. </p>
/// <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p> <b>Related operations:</b> </p>
/// <ul>
/// <li> <p> <code>GeneratePinData</code> </p> </li>
/// <li> <p> <code>TranslatePinData</code> </p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct VerifyPinDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::verify_pin_data::builders::VerifyPinDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::verify_pin_data::VerifyPinDataOutput,
        crate::operation::verify_pin_data::VerifyPinDataError,
    > for VerifyPinDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::verify_pin_data::VerifyPinDataOutput,
            crate::operation::verify_pin_data::VerifyPinDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl VerifyPinDataFluentBuilder {
    /// Creates a new `VerifyPinData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the VerifyPinData as a reference.
    pub fn as_input(&self) -> &crate::operation::verify_pin_data::builders::VerifyPinDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::verify_pin_data::VerifyPinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_pin_data::VerifyPinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::verify_pin_data::VerifyPinData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::verify_pin_data::VerifyPinData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::verify_pin_data::VerifyPinDataOutput,
        crate::operation::verify_pin_data::VerifyPinDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn verification_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.verification_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn set_verification_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_verification_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn get_verification_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_verification_key_identifier()
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn encryption_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.encryption_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn set_encryption_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_encryption_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn get_encryption_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_encryption_key_identifier()
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn verification_attributes(mut self, input: crate::types::PinVerificationAttributes) -> Self {
        self.inner = self.inner.verification_attributes(input);
        self
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn set_verification_attributes(mut self, input: ::std::option::Option<crate::types::PinVerificationAttributes>) -> Self {
        self.inner = self.inner.set_verification_attributes(input);
        self
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn get_verification_attributes(&self) -> &::std::option::Option<crate::types::PinVerificationAttributes> {
        self.inner.get_verification_attributes()
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.encrypted_pin_block(input.into());
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn set_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_encrypted_pin_block(input);
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn get_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_encrypted_pin_block()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_account_number(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_account_number(input);
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_account_number()
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn pin_block_format(mut self, input: crate::types::PinBlockFormatForPinData) -> Self {
        self.inner = self.inner.pin_block_format(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn set_pin_block_format(mut self, input: ::std::option::Option<crate::types::PinBlockFormatForPinData>) -> Self {
        self.inner = self.inner.set_pin_block_format(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn get_pin_block_format(&self) -> &::std::option::Option<crate::types::PinBlockFormatForPinData> {
        self.inner.get_pin_block_format()
    }
    /// <p>The length of PIN being verified.</p>
    pub fn pin_data_length(mut self, input: i32) -> Self {
        self.inner = self.inner.pin_data_length(input);
        self
    }
    /// <p>The length of PIN being verified.</p>
    pub fn set_pin_data_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_pin_data_length(input);
        self
    }
    /// <p>The length of PIN being verified.</p>
    pub fn get_pin_data_length(&self) -> &::std::option::Option<i32> {
        self.inner.get_pin_data_length()
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn dukpt_attributes(mut self, input: crate::types::DukptAttributes) -> Self {
        self.inner = self.inner.dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn set_dukpt_attributes(mut self, input: ::std::option::Option<crate::types::DukptAttributes>) -> Self {
        self.inner = self.inner.set_dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn get_dukpt_attributes(&self) -> &::std::option::Option<crate::types::DukptAttributes> {
        self.inner.get_dukpt_attributes()
    }
}
