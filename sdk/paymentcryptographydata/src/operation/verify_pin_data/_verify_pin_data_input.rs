// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifyPinDataInput {
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub verification_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub encryption_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The attributes and values for PIN data verification.</p>
    pub verification_attributes: ::std::option::Option<crate::types::PinVerificationAttributes>,
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub encrypted_pin_block: ::std::option::Option<::std::string::String>,
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub primary_account_number: ::std::option::Option<::std::string::String>,
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForPinData>,
    /// <p>The length of PIN being verified.</p>
    pub pin_data_length: ::std::option::Option<i32>,
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub dukpt_attributes: ::std::option::Option<crate::types::DukptAttributes>,
}
impl VerifyPinDataInput {
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn verification_key_identifier(&self) -> ::std::option::Option<&str> {
        self.verification_key_identifier.as_deref()
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn encryption_key_identifier(&self) -> ::std::option::Option<&str> {
        self.encryption_key_identifier.as_deref()
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn verification_attributes(&self) -> ::std::option::Option<&crate::types::PinVerificationAttributes> {
        self.verification_attributes.as_ref()
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn encrypted_pin_block(&self) -> ::std::option::Option<&str> {
        self.encrypted_pin_block.as_deref()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(&self) -> ::std::option::Option<&str> {
        self.primary_account_number.as_deref()
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn pin_block_format(&self) -> ::std::option::Option<&crate::types::PinBlockFormatForPinData> {
        self.pin_block_format.as_ref()
    }
    /// <p>The length of PIN being verified.</p>
    pub fn pin_data_length(&self) -> ::std::option::Option<i32> {
        self.pin_data_length
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn dukpt_attributes(&self) -> ::std::option::Option<&crate::types::DukptAttributes> {
        self.dukpt_attributes.as_ref()
    }
}
impl ::std::fmt::Debug for VerifyPinDataInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyPinDataInput");
        formatter.field("verification_key_identifier", &self.verification_key_identifier);
        formatter.field("encryption_key_identifier", &self.encryption_key_identifier);
        formatter.field("verification_attributes", &self.verification_attributes);
        formatter.field("encrypted_pin_block", &self.encrypted_pin_block);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.field("pin_data_length", &self.pin_data_length);
        formatter.field("dukpt_attributes", &self.dukpt_attributes);
        formatter.finish()
    }
}
impl VerifyPinDataInput {
    /// Creates a new builder-style object to manufacture [`VerifyPinDataInput`](crate::operation::verify_pin_data::VerifyPinDataInput).
    pub fn builder() -> crate::operation::verify_pin_data::builders::VerifyPinDataInputBuilder {
        crate::operation::verify_pin_data::builders::VerifyPinDataInputBuilder::default()
    }
}

/// A builder for [`VerifyPinDataInput`](crate::operation::verify_pin_data::VerifyPinDataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct VerifyPinDataInputBuilder {
    pub(crate) verification_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) verification_attributes: ::std::option::Option<crate::types::PinVerificationAttributes>,
    pub(crate) encrypted_pin_block: ::std::option::Option<::std::string::String>,
    pub(crate) primary_account_number: ::std::option::Option<::std::string::String>,
    pub(crate) pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForPinData>,
    pub(crate) pin_data_length: ::std::option::Option<i32>,
    pub(crate) dukpt_attributes: ::std::option::Option<crate::types::DukptAttributes>,
}
impl VerifyPinDataInputBuilder {
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    /// This field is required.
    pub fn verification_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verification_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn set_verification_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verification_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the PIN verification key.</p>
    pub fn get_verification_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.verification_key_identifier
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    /// This field is required.
    pub fn encryption_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn set_encryption_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which the PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn get_encryption_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_identifier
    }
    /// <p>The attributes and values for PIN data verification.</p>
    /// This field is required.
    pub fn verification_attributes(mut self, input: crate::types::PinVerificationAttributes) -> Self {
        self.verification_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn set_verification_attributes(mut self, input: ::std::option::Option<crate::types::PinVerificationAttributes>) -> Self {
        self.verification_attributes = input;
        self
    }
    /// <p>The attributes and values for PIN data verification.</p>
    pub fn get_verification_attributes(&self) -> &::std::option::Option<crate::types::PinVerificationAttributes> {
        &self.verification_attributes
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    /// This field is required.
    pub fn encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encrypted_pin_block = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn set_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encrypted_pin_block = input;
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography verifies.</p>
    pub fn get_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        &self.encrypted_pin_block
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    /// This field is required.
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_account_number = input;
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_account_number
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    /// This field is required.
    pub fn pin_block_format(mut self, input: crate::types::PinBlockFormatForPinData) -> Self {
        self.pin_block_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn set_pin_block_format(mut self, input: ::std::option::Option<crate::types::PinBlockFormatForPinData>) -> Self {
        self.pin_block_format = input;
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn get_pin_block_format(&self) -> &::std::option::Option<crate::types::PinBlockFormatForPinData> {
        &self.pin_block_format
    }
    /// <p>The length of PIN being verified.</p>
    pub fn pin_data_length(mut self, input: i32) -> Self {
        self.pin_data_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of PIN being verified.</p>
    pub fn set_pin_data_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pin_data_length = input;
        self
    }
    /// <p>The length of PIN being verified.</p>
    pub fn get_pin_data_length(&self) -> &::std::option::Option<i32> {
        &self.pin_data_length
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn dukpt_attributes(mut self, input: crate::types::DukptAttributes) -> Self {
        self.dukpt_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn set_dukpt_attributes(mut self, input: ::std::option::Option<crate::types::DukptAttributes>) -> Self {
        self.dukpt_attributes = input;
        self
    }
    /// <p>The attributes and values for the DUKPT encrypted PIN block data.</p>
    pub fn get_dukpt_attributes(&self) -> &::std::option::Option<crate::types::DukptAttributes> {
        &self.dukpt_attributes
    }
    /// Consumes the builder and constructs a [`VerifyPinDataInput`](crate::operation::verify_pin_data::VerifyPinDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::verify_pin_data::VerifyPinDataInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::verify_pin_data::VerifyPinDataInput {
            verification_key_identifier: self.verification_key_identifier,
            encryption_key_identifier: self.encryption_key_identifier,
            verification_attributes: self.verification_attributes,
            encrypted_pin_block: self.encrypted_pin_block,
            primary_account_number: self.primary_account_number,
            pin_block_format: self.pin_block_format,
            pin_data_length: self.pin_data_length,
            dukpt_attributes: self.dukpt_attributes,
        })
    }
}
impl ::std::fmt::Debug for VerifyPinDataInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyPinDataInputBuilder");
        formatter.field("verification_key_identifier", &self.verification_key_identifier);
        formatter.field("encryption_key_identifier", &self.encryption_key_identifier);
        formatter.field("verification_attributes", &self.verification_attributes);
        formatter.field("encrypted_pin_block", &self.encrypted_pin_block);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.field("pin_data_length", &self.pin_data_length);
        formatter.field("dukpt_attributes", &self.dukpt_attributes);
        formatter.finish()
    }
}
