// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::generate_pin_data::_generate_pin_data_output::GeneratePinDataOutputBuilder;

pub use crate::operation::generate_pin_data::_generate_pin_data_input::GeneratePinDataInputBuilder;

impl crate::operation::generate_pin_data::builders::GeneratePinDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::generate_pin_data::GeneratePinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_pin_data::GeneratePinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.generate_pin_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GeneratePinData`.
///
/// <p>Generates pin-related data such as PIN, PIN Verification Value (PVV), PIN Block, and PIN Offset during new card issuance or reissuance. For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/generate-pin-data.html">Generate PIN data</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p>PIN data is never transmitted in clear to or from Amazon Web Services Payment Cryptography. This operation generates PIN, PVV, or PIN Offset and then encrypts it using Pin Encryption Key (PEK) to create an <code>EncryptedPinBlock</code> for transmission from Amazon Web Services Payment Cryptography. This operation uses a separate Pin Verification Key (PVK) for VISA PVV generation.</p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p><b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p><b>Related operations:</b></p>
/// <ul>
/// <li>
/// <p><code>GenerateCardValidationData</code></p></li>
/// <li>
/// <p><code>TranslatePinData</code></p></li>
/// <li>
/// <p><code>VerifyPinData</code></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GeneratePinDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::generate_pin_data::builders::GeneratePinDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::generate_pin_data::GeneratePinDataOutput,
        crate::operation::generate_pin_data::GeneratePinDataError,
    > for GeneratePinDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::generate_pin_data::GeneratePinDataOutput,
            crate::operation::generate_pin_data::GeneratePinDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GeneratePinDataFluentBuilder {
    /// Creates a new `GeneratePinData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GeneratePinData as a reference.
    pub fn as_input(&self) -> &crate::operation::generate_pin_data::builders::GeneratePinDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_pin_data::GeneratePinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_pin_data::GeneratePinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::generate_pin_data::GeneratePinData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::generate_pin_data::GeneratePinData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::generate_pin_data::GeneratePinDataOutput,
        crate::operation::generate_pin_data::GeneratePinDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn generation_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.generation_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn set_generation_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_generation_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn get_generation_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_generation_key_identifier()
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn encryption_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.encryption_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn set_encryption_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_encryption_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn get_encryption_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_encryption_key_identifier()
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn generation_attributes(mut self, input: crate::types::PinGenerationAttributes) -> Self {
        self.inner = self.inner.generation_attributes(input);
        self
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn set_generation_attributes(mut self, input: ::std::option::Option<crate::types::PinGenerationAttributes>) -> Self {
        self.inner = self.inner.set_generation_attributes(input);
        self
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn get_generation_attributes(&self) -> &::std::option::Option<crate::types::PinGenerationAttributes> {
        self.inner.get_generation_attributes()
    }
    /// <p>The length of PIN under generation.</p>
    pub fn pin_data_length(mut self, input: i32) -> Self {
        self.inner = self.inner.pin_data_length(input);
        self
    }
    /// <p>The length of PIN under generation.</p>
    pub fn set_pin_data_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_pin_data_length(input);
        self
    }
    /// <p>The length of PIN under generation.</p>
    pub fn get_pin_data_length(&self) -> &::std::option::Option<i32> {
        self.inner.get_pin_data_length()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_account_number(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_account_number(input);
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_account_number()
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn pin_block_format(mut self, input: crate::types::PinBlockFormatForPinData) -> Self {
        self.inner = self.inner.pin_block_format(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn set_pin_block_format(mut self, input: ::std::option::Option<crate::types::PinBlockFormatForPinData>) -> Self {
        self.inner = self.inner.set_pin_block_format(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn get_pin_block_format(&self) -> &::std::option::Option<crate::types::PinBlockFormatForPinData> {
        self.inner.get_pin_block_format()
    }
}
