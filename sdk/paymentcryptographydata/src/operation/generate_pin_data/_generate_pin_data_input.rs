// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeneratePinDataInput {
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub generation_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub encryption_key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub generation_attributes: ::std::option::Option<crate::types::PinGenerationAttributes>,
    /// <p>The length of PIN under generation.</p>
    pub pin_data_length: ::std::option::Option<i32>,
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub primary_account_number: ::std::option::Option<::std::string::String>,
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForPinData>,
}
impl GeneratePinDataInput {
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn generation_key_identifier(&self) -> ::std::option::Option<&str> {
        self.generation_key_identifier.as_deref()
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn encryption_key_identifier(&self) -> ::std::option::Option<&str> {
        self.encryption_key_identifier.as_deref()
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn generation_attributes(&self) -> ::std::option::Option<&crate::types::PinGenerationAttributes> {
        self.generation_attributes.as_ref()
    }
    /// <p>The length of PIN under generation.</p>
    pub fn pin_data_length(&self) -> ::std::option::Option<i32> {
        self.pin_data_length
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(&self) -> ::std::option::Option<&str> {
        self.primary_account_number.as_deref()
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn pin_block_format(&self) -> ::std::option::Option<&crate::types::PinBlockFormatForPinData> {
        self.pin_block_format.as_ref()
    }
}
impl ::std::fmt::Debug for GeneratePinDataInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratePinDataInput");
        formatter.field("generation_key_identifier", &self.generation_key_identifier);
        formatter.field("encryption_key_identifier", &self.encryption_key_identifier);
        formatter.field("generation_attributes", &self.generation_attributes);
        formatter.field("pin_data_length", &self.pin_data_length);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.finish()
    }
}
impl GeneratePinDataInput {
    /// Creates a new builder-style object to manufacture [`GeneratePinDataInput`](crate::operation::generate_pin_data::GeneratePinDataInput).
    pub fn builder() -> crate::operation::generate_pin_data::builders::GeneratePinDataInputBuilder {
        crate::operation::generate_pin_data::builders::GeneratePinDataInputBuilder::default()
    }
}

/// A builder for [`GeneratePinDataInput`](crate::operation::generate_pin_data::GeneratePinDataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GeneratePinDataInputBuilder {
    pub(crate) generation_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) generation_attributes: ::std::option::Option<crate::types::PinGenerationAttributes>,
    pub(crate) pin_data_length: ::std::option::Option<i32>,
    pub(crate) primary_account_number: ::std::option::Option<::std::string::String>,
    pub(crate) pin_block_format: ::std::option::Option<crate::types::PinBlockFormatForPinData>,
}
impl GeneratePinDataInputBuilder {
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    /// This field is required.
    pub fn generation_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generation_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn set_generation_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generation_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses for pin data generation.</p>
    pub fn get_generation_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.generation_key_identifier
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    /// This field is required.
    pub fn encryption_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn set_encryption_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the PEK that Amazon Web Services Payment Cryptography uses to encrypt the PIN Block.</p>
    pub fn get_encryption_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_key_identifier
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    /// This field is required.
    pub fn generation_attributes(mut self, input: crate::types::PinGenerationAttributes) -> Self {
        self.generation_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn set_generation_attributes(mut self, input: ::std::option::Option<crate::types::PinGenerationAttributes>) -> Self {
        self.generation_attributes = input;
        self
    }
    /// <p>The attributes and values to use for PIN, PVV, or PIN Offset generation.</p>
    pub fn get_generation_attributes(&self) -> &::std::option::Option<crate::types::PinGenerationAttributes> {
        &self.generation_attributes
    }
    /// <p>The length of PIN under generation.</p>
    pub fn pin_data_length(mut self, input: i32) -> Self {
        self.pin_data_length = ::std::option::Option::Some(input);
        self
    }
    /// <p>The length of PIN under generation.</p>
    pub fn set_pin_data_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pin_data_length = input;
        self
    }
    /// <p>The length of PIN under generation.</p>
    pub fn get_pin_data_length(&self) -> &::std::option::Option<i32> {
        &self.pin_data_length
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    /// This field is required.
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_account_number = input;
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_account_number
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    /// This field is required.
    pub fn pin_block_format(mut self, input: crate::types::PinBlockFormatForPinData) -> Self {
        self.pin_block_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn set_pin_block_format(mut self, input: ::std::option::Option<crate::types::PinBlockFormatForPinData>) -> Self {
        self.pin_block_format = input;
        self
    }
    /// <p>The PIN encoding format for pin data generation as specified in ISO 9564. Amazon Web Services Payment Cryptography supports <code>ISO_Format_0</code> and <code>ISO_Format_3</code>.</p>
    /// <p>The <code>ISO_Format_0</code> PIN block format is equivalent to the ANSI X9.8, VISA-1, and ECI-1 PIN block formats. It is similar to a VISA-4 PIN block format. It supports a PIN from 4 to 12 digits in length.</p>
    /// <p>The <code>ISO_Format_3</code> PIN block format is the same as <code>ISO_Format_0</code> except that the fill digits are random values from 10 to 15.</p>
    pub fn get_pin_block_format(&self) -> &::std::option::Option<crate::types::PinBlockFormatForPinData> {
        &self.pin_block_format
    }
    /// Consumes the builder and constructs a [`GeneratePinDataInput`](crate::operation::generate_pin_data::GeneratePinDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::generate_pin_data::GeneratePinDataInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::generate_pin_data::GeneratePinDataInput {
            generation_key_identifier: self.generation_key_identifier,
            encryption_key_identifier: self.encryption_key_identifier,
            generation_attributes: self.generation_attributes,
            pin_data_length: self.pin_data_length,
            primary_account_number: self.primary_account_number,
            pin_block_format: self.pin_block_format,
        })
    }
}
impl ::std::fmt::Debug for GeneratePinDataInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeneratePinDataInputBuilder");
        formatter.field("generation_key_identifier", &self.generation_key_identifier);
        formatter.field("encryption_key_identifier", &self.encryption_key_identifier);
        formatter.field("generation_attributes", &self.generation_attributes);
        formatter.field("pin_data_length", &self.pin_data_length);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("pin_block_format", &self.pin_block_format);
        formatter.finish()
    }
}
