// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReEncryptDataOutput {
    /// <p>The keyARN (Amazon Resource Name) of the encryption key that Amazon Web Services Payment Cryptography uses for plaintext encryption.</p>
    pub key_arn: ::std::string::String,
    /// <p>The key check value (KCV) of the encryption key. The KCV is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub key_check_value: ::std::string::String,
    /// <p>The encrypted ciphertext.</p>
    pub cipher_text: ::std::string::String,
    _request_id: Option<String>,
}
impl ReEncryptDataOutput {
    /// <p>The keyARN (Amazon Resource Name) of the encryption key that Amazon Web Services Payment Cryptography uses for plaintext encryption.</p>
    pub fn key_arn(&self) -> &str {
        use std::ops::Deref;
        self.key_arn.deref()
    }
    /// <p>The key check value (KCV) of the encryption key. The KCV is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn key_check_value(&self) -> &str {
        use std::ops::Deref;
        self.key_check_value.deref()
    }
    /// <p>The encrypted ciphertext.</p>
    pub fn cipher_text(&self) -> &str {
        use std::ops::Deref;
        self.cipher_text.deref()
    }
}
impl ::std::fmt::Debug for ReEncryptDataOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReEncryptDataOutput");
        formatter.field("key_arn", &self.key_arn);
        formatter.field("key_check_value", &self.key_check_value);
        formatter.field("cipher_text", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for ReEncryptDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ReEncryptDataOutput {
    /// Creates a new builder-style object to manufacture [`ReEncryptDataOutput`](crate::operation::re_encrypt_data::ReEncryptDataOutput).
    pub fn builder() -> crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder {
        crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder::default()
    }
}

/// A builder for [`ReEncryptDataOutput`](crate::operation::re_encrypt_data::ReEncryptDataOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ReEncryptDataOutputBuilder {
    pub(crate) key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) key_check_value: ::std::option::Option<::std::string::String>,
    pub(crate) cipher_text: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ReEncryptDataOutputBuilder {
    /// <p>The keyARN (Amazon Resource Name) of the encryption key that Amazon Web Services Payment Cryptography uses for plaintext encryption.</p>
    /// This field is required.
    pub fn key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The keyARN (Amazon Resource Name) of the encryption key that Amazon Web Services Payment Cryptography uses for plaintext encryption.</p>
    pub fn set_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_arn = input;
        self
    }
    /// <p>The keyARN (Amazon Resource Name) of the encryption key that Amazon Web Services Payment Cryptography uses for plaintext encryption.</p>
    pub fn get_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_arn
    }
    /// <p>The key check value (KCV) of the encryption key. The KCV is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    /// This field is required.
    pub fn key_check_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_check_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key check value (KCV) of the encryption key. The KCV is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn set_key_check_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_check_value = input;
        self
    }
    /// <p>The key check value (KCV) of the encryption key. The KCV is used to check if all parties holding a given key have the same key or to detect that a key has changed. Amazon Web Services Payment Cryptography calculates the KCV by using standard algorithms, typically by encrypting 8 or 16 bytes or "00" or "01" and then truncating the result to the first 3 bytes, or 6 hex digits, of the resulting cryptogram.</p>
    pub fn get_key_check_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_check_value
    }
    /// <p>The encrypted ciphertext.</p>
    /// This field is required.
    pub fn cipher_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cipher_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The encrypted ciphertext.</p>
    pub fn set_cipher_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cipher_text = input;
        self
    }
    /// <p>The encrypted ciphertext.</p>
    pub fn get_cipher_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.cipher_text
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ReEncryptDataOutput`](crate::operation::re_encrypt_data::ReEncryptDataOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_arn`](crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder::key_arn)
    /// - [`key_check_value`](crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder::key_check_value)
    /// - [`cipher_text`](crate::operation::re_encrypt_data::builders::ReEncryptDataOutputBuilder::cipher_text)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::re_encrypt_data::ReEncryptDataOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::re_encrypt_data::ReEncryptDataOutput {
            key_arn: self.key_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_arn",
                    "key_arn was not specified but it is required when building ReEncryptDataOutput",
                )
            })?,
            key_check_value: self.key_check_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_check_value",
                    "key_check_value was not specified but it is required when building ReEncryptDataOutput",
                )
            })?,
            cipher_text: self.cipher_text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "cipher_text",
                    "cipher_text was not specified but it is required when building ReEncryptDataOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for ReEncryptDataOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReEncryptDataOutputBuilder");
        formatter.field("key_arn", &self.key_arn);
        formatter.field("key_check_value", &self.key_check_value);
        formatter.field("cipher_text", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
