// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::verify_card_validation_data::_verify_card_validation_data_output::VerifyCardValidationDataOutputBuilder;

pub use crate::operation::verify_card_validation_data::_verify_card_validation_data_input::VerifyCardValidationDataInputBuilder;

impl VerifyCardValidationDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::verify_card_validation_data::VerifyCardValidationDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_card_validation_data::VerifyCardValidationDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.verify_card_validation_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `VerifyCardValidationData`.
///
/// <p>Verifies card-related validation data using algorithms such as Card Verification Values (CVV/CVV2), Dynamic Card Verification Values (dCVV/dCVV2) and Card Security Codes (CSC). For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/verify-card-data.html">Verify card data</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p>This operation validates the CVV or CSC codes that is printed on a payment credit or debit card during card payment transaction. The input values are typically provided as part of an inbound transaction to an issuer or supporting platform partner. Amazon Web Services Payment Cryptography uses CVV or CSC, PAN (Primary Account Number) and expiration date of the card to check its validity during transaction processing. In this operation, the CVK (Card Verification Key) encryption key for use with card data verification is same as the one in used for <code>GenerateCardValidationData</code>. </p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>. </p>
/// <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p> <b>Related operations:</b> </p>
/// <ul>
/// <li> <p> <code>GenerateCardValidationData</code> </p> </li>
/// <li> <p> <code>VerifyAuthRequestCryptogram</code> </p> </li>
/// <li> <p> <code>VerifyPinData</code> </p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct VerifyCardValidationDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::verify_card_validation_data::VerifyCardValidationDataOutput,
        crate::operation::verify_card_validation_data::VerifyCardValidationDataError,
    > for VerifyCardValidationDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::verify_card_validation_data::VerifyCardValidationDataOutput,
            crate::operation::verify_card_validation_data::VerifyCardValidationDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl VerifyCardValidationDataFluentBuilder {
    /// Creates a new `VerifyCardValidationData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the VerifyCardValidationData as a reference.
    pub fn as_input(&self) -> &crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::verify_card_validation_data::VerifyCardValidationDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_card_validation_data::VerifyCardValidationDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::verify_card_validation_data::VerifyCardValidationData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::verify_card_validation_data::VerifyCardValidationData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::verify_card_validation_data::VerifyCardValidationDataOutput,
        crate::operation::verify_card_validation_data::VerifyCardValidationDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_identifier()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_account_number(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_account_number(input);
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_account_number()
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn verification_attributes(mut self, input: crate::types::CardVerificationAttributes) -> Self {
        self.inner = self.inner.verification_attributes(input);
        self
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn set_verification_attributes(mut self, input: ::std::option::Option<crate::types::CardVerificationAttributes>) -> Self {
        self.inner = self.inner.set_verification_attributes(input);
        self
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn get_verification_attributes(&self) -> &::std::option::Option<crate::types::CardVerificationAttributes> {
        self.inner.get_verification_attributes()
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn validation_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.validation_data(input.into());
        self
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn set_validation_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_validation_data(input);
        self
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn get_validation_data(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_validation_data()
    }
}
