// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct VerifyCardValidationDataInput {
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub key_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub primary_account_number: ::std::option::Option<::std::string::String>,
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub verification_attributes: ::std::option::Option<crate::types::CardVerificationAttributes>,
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub validation_data: ::std::option::Option<::std::string::String>,
}
impl VerifyCardValidationDataInput {
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn key_identifier(&self) -> ::std::option::Option<&str> {
        self.key_identifier.as_deref()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(&self) -> ::std::option::Option<&str> {
        self.primary_account_number.as_deref()
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn verification_attributes(&self) -> ::std::option::Option<&crate::types::CardVerificationAttributes> {
        self.verification_attributes.as_ref()
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn validation_data(&self) -> ::std::option::Option<&str> {
        self.validation_data.as_deref()
    }
}
impl ::std::fmt::Debug for VerifyCardValidationDataInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyCardValidationDataInput");
        formatter.field("key_identifier", &self.key_identifier);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("verification_attributes", &self.verification_attributes);
        formatter.field("validation_data", &self.validation_data);
        formatter.finish()
    }
}
impl VerifyCardValidationDataInput {
    /// Creates a new builder-style object to manufacture [`VerifyCardValidationDataInput`](crate::operation::verify_card_validation_data::VerifyCardValidationDataInput).
    pub fn builder() -> crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataInputBuilder {
        crate::operation::verify_card_validation_data::builders::VerifyCardValidationDataInputBuilder::default()
    }
}

/// A builder for [`VerifyCardValidationDataInput`](crate::operation::verify_card_validation_data::VerifyCardValidationDataInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct VerifyCardValidationDataInputBuilder {
    pub(crate) key_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) primary_account_number: ::std::option::Option<::std::string::String>,
    pub(crate) verification_attributes: ::std::option::Option<crate::types::CardVerificationAttributes>,
    pub(crate) validation_data: ::std::option::Option<::std::string::String>,
}
impl VerifyCardValidationDataInputBuilder {
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    /// This field is required.
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_identifier = input;
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to verify card data.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_identifier
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    /// This field is required.
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.primary_account_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.primary_account_number = input;
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.primary_account_number
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    /// This field is required.
    pub fn verification_attributes(mut self, input: crate::types::CardVerificationAttributes) -> Self {
        self.verification_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn set_verification_attributes(mut self, input: ::std::option::Option<crate::types::CardVerificationAttributes>) -> Self {
        self.verification_attributes = input;
        self
    }
    /// <p>The algorithm to use for verification of card data within Amazon Web Services Payment Cryptography.</p>
    pub fn get_verification_attributes(&self) -> &::std::option::Option<crate::types::CardVerificationAttributes> {
        &self.verification_attributes
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    /// This field is required.
    pub fn validation_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.validation_data = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn set_validation_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.validation_data = input;
        self
    }
    /// <p>The CVV or CSC value for use for card data verification within Amazon Web Services Payment Cryptography.</p>
    pub fn get_validation_data(&self) -> &::std::option::Option<::std::string::String> {
        &self.validation_data
    }
    /// Consumes the builder and constructs a [`VerifyCardValidationDataInput`](crate::operation::verify_card_validation_data::VerifyCardValidationDataInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::verify_card_validation_data::VerifyCardValidationDataInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::verify_card_validation_data::VerifyCardValidationDataInput {
            key_identifier: self.key_identifier,
            primary_account_number: self.primary_account_number,
            verification_attributes: self.verification_attributes,
            validation_data: self.validation_data,
        })
    }
}
impl ::std::fmt::Debug for VerifyCardValidationDataInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("VerifyCardValidationDataInputBuilder");
        formatter.field("key_identifier", &self.key_identifier);
        formatter.field("primary_account_number", &"*** Sensitive Data Redacted ***");
        formatter.field("verification_attributes", &self.verification_attributes);
        formatter.field("validation_data", &self.validation_data);
        formatter.finish()
    }
}
