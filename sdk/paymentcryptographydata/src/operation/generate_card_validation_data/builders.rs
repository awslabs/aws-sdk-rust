// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::generate_card_validation_data::_generate_card_validation_data_output::GenerateCardValidationDataOutputBuilder;

pub use crate::operation::generate_card_validation_data::_generate_card_validation_data_input::GenerateCardValidationDataInputBuilder;

impl crate::operation::generate_card_validation_data::builders::GenerateCardValidationDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::generate_card_validation_data::GenerateCardValidationDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_card_validation_data::GenerateCardValidationDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.generate_card_validation_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GenerateCardValidationData`.
///
/// <p>Generates card-related validation data using algorithms such as Card Verification Values (CVV/CVV2), Dynamic Card Verification Values (dCVV/dCVV2), or Card Security Codes (CSC). For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/generate-card-data.html">Generate card data</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p>This operation generates a CVV or CSC value that is printed on a payment credit or debit card during card production. The CVV or CSC, PAN (Primary Account Number) and expiration date of the card are required to check its validity during transaction processing. To begin this operation, a CVK (Card Verification Key) encryption key is required. You can use <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_CreateKey.html">CreateKey</a> or <a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a> to establish a CVK within Amazon Web Services Payment Cryptography. The <code>KeyModesOfUse</code> should be set to <code>Generate</code> and <code>Verify</code> for a CVK encryption key.</p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p><b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p><b>Related operations:</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/payment-cryptography/latest/APIReference/API_ImportKey.html">ImportKey</a></p></li>
/// <li>
/// <p><code>VerifyCardValidationData</code></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GenerateCardValidationDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::generate_card_validation_data::builders::GenerateCardValidationDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::generate_card_validation_data::GenerateCardValidationDataOutput,
        crate::operation::generate_card_validation_data::GenerateCardValidationDataError,
    > for GenerateCardValidationDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::generate_card_validation_data::GenerateCardValidationDataOutput,
            crate::operation::generate_card_validation_data::GenerateCardValidationDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GenerateCardValidationDataFluentBuilder {
    /// Creates a new `GenerateCardValidationData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GenerateCardValidationData as a reference.
    pub fn as_input(&self) -> &crate::operation::generate_card_validation_data::builders::GenerateCardValidationDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_card_validation_data::GenerateCardValidationDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_card_validation_data::GenerateCardValidationDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::generate_card_validation_data::GenerateCardValidationData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::generate_card_validation_data::GenerateCardValidationData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::generate_card_validation_data::GenerateCardValidationDataOutput,
        crate::operation::generate_card_validation_data::GenerateCardValidationDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to generate card data.</p>
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to generate card data.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the CVK encryption key that Amazon Web Services Payment Cryptography uses to generate card data.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_identifier()
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn primary_account_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.primary_account_number(input.into());
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn set_primary_account_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_primary_account_number(input);
        self
    }
    /// <p>The Primary Account Number (PAN), a unique identifier for a payment credit or debit card that associates the card with a specific account holder.</p>
    pub fn get_primary_account_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_primary_account_number()
    }
    /// <p>The algorithm for generating CVV or CSC values for the card within Amazon Web Services Payment Cryptography.</p>
    pub fn generation_attributes(mut self, input: crate::types::CardGenerationAttributes) -> Self {
        self.inner = self.inner.generation_attributes(input);
        self
    }
    /// <p>The algorithm for generating CVV or CSC values for the card within Amazon Web Services Payment Cryptography.</p>
    pub fn set_generation_attributes(mut self, input: ::std::option::Option<crate::types::CardGenerationAttributes>) -> Self {
        self.inner = self.inner.set_generation_attributes(input);
        self
    }
    /// <p>The algorithm for generating CVV or CSC values for the card within Amazon Web Services Payment Cryptography.</p>
    pub fn get_generation_attributes(&self) -> &::std::option::Option<crate::types::CardGenerationAttributes> {
        self.inner.get_generation_attributes()
    }
    /// <p>The length of the CVV or CSC to be generated. The default value is 3.</p>
    pub fn validation_data_length(mut self, input: i32) -> Self {
        self.inner = self.inner.validation_data_length(input);
        self
    }
    /// <p>The length of the CVV or CSC to be generated. The default value is 3.</p>
    pub fn set_validation_data_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_validation_data_length(input);
        self
    }
    /// <p>The length of the CVV or CSC to be generated. The default value is 3.</p>
    pub fn get_validation_data_length(&self) -> &::std::option::Option<i32> {
        self.inner.get_validation_data_length()
    }
}
