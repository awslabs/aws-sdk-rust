// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::verify_mac::_verify_mac_output::VerifyMacOutputBuilder;

pub use crate::operation::verify_mac::_verify_mac_input::VerifyMacInputBuilder;

impl VerifyMacInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::verify_mac::VerifyMacOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_mac::VerifyMacError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.verify_mac();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `VerifyMac`.
///
/// <p>Verifies a Message Authentication Code (MAC). </p>
/// <p>You can use this operation when keys won't be shared but mutual data is present on both ends for validation. In this case, known data values are used to generate a MAC on both ends for verification without sending or receiving data in ciphertext or plaintext. You can use this operation to verify a DUPKT, HMAC or EMV MAC by setting generation attributes and algorithm to the associated values. Use the same encryption key for MAC verification as you use for <code>GenerateMac</code>. </p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>. </p>
/// <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p> <b>Related operations:</b> </p>
/// <ul>
/// <li> <p> <code>GenerateMac</code> </p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct VerifyMacFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::verify_mac::builders::VerifyMacInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::verify_mac::VerifyMacOutput, crate::operation::verify_mac::VerifyMacError>
    for VerifyMacFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::verify_mac::VerifyMacOutput, crate::operation::verify_mac::VerifyMacError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl VerifyMacFluentBuilder {
    /// Creates a new `VerifyMac`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the VerifyMac as a reference.
    pub fn as_input(&self) -> &crate::operation::verify_mac::builders::VerifyMacInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::verify_mac::VerifyMacOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::verify_mac::VerifyMacError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::verify_mac::VerifyMac::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::verify_mac::VerifyMac::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::verify_mac::VerifyMacOutput,
        crate::operation::verify_mac::VerifyMacError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key that Amazon Web Services Payment Cryptography uses to verify MAC data.</p>
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key that Amazon Web Services Payment Cryptography uses to verify MAC data.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key that Amazon Web Services Payment Cryptography uses to verify MAC data.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_identifier()
    }
    /// <p>The data on for which MAC is under verification.</p>
    pub fn message_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message_data(input.into());
        self
    }
    /// <p>The data on for which MAC is under verification.</p>
    pub fn set_message_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message_data(input);
        self
    }
    /// <p>The data on for which MAC is under verification.</p>
    pub fn get_message_data(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message_data()
    }
    /// <p>The MAC being verified.</p>
    pub fn mac(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.mac(input.into());
        self
    }
    /// <p>The MAC being verified.</p>
    pub fn set_mac(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_mac(input);
        self
    }
    /// <p>The MAC being verified.</p>
    pub fn get_mac(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_mac()
    }
    /// <p>The attributes and data values to use for MAC verification within Amazon Web Services Payment Cryptography.</p>
    pub fn verification_attributes(mut self, input: crate::types::MacAttributes) -> Self {
        self.inner = self.inner.verification_attributes(input);
        self
    }
    /// <p>The attributes and data values to use for MAC verification within Amazon Web Services Payment Cryptography.</p>
    pub fn set_verification_attributes(mut self, input: ::std::option::Option<crate::types::MacAttributes>) -> Self {
        self.inner = self.inner.set_verification_attributes(input);
        self
    }
    /// <p>The attributes and data values to use for MAC verification within Amazon Web Services Payment Cryptography.</p>
    pub fn get_verification_attributes(&self) -> &::std::option::Option<crate::types::MacAttributes> {
        self.inner.get_verification_attributes()
    }
    /// <p>The length of the MAC.</p>
    pub fn mac_length(mut self, input: i32) -> Self {
        self.inner = self.inner.mac_length(input);
        self
    }
    /// <p>The length of the MAC.</p>
    pub fn set_mac_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_mac_length(input);
        self
    }
    /// <p>The length of the MAC.</p>
    pub fn get_mac_length(&self) -> &::std::option::Option<i32> {
        self.inner.get_mac_length()
    }
}
