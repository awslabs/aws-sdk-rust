// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::generate_mac::_generate_mac_output::GenerateMacOutputBuilder;

pub use crate::operation::generate_mac::_generate_mac_input::GenerateMacInputBuilder;

impl crate::operation::generate_mac::builders::GenerateMacInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::generate_mac::GenerateMacOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_mac::GenerateMacError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.generate_mac();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GenerateMac`.
///
/// <p>Generates a Message Authentication Code (MAC) cryptogram within Amazon Web Services Payment Cryptography.</p>
/// <p>You can use this operation to authenticate card-related data by using known data values to generate MAC for data validation between the sending and receiving parties. This operation uses message data, a secret encryption key and MAC algorithm to generate a unique MAC value for transmission. The receiving party of the MAC must use the same message data, secret encryption key and MAC algorithm to reproduce another MAC value for comparision.</p>
/// <p>You can use this operation to generate a DUPKT, CMAC, HMAC or EMV MAC by setting generation attributes and algorithm to the associated values. The MAC generation encryption key must have valid values for <code>KeyUsage</code> such as <code>TR31_M7_HMAC_KEY</code> for HMAC generation, and they key must have <code>KeyModesOfUse</code> set to <code>Generate</code> and <code>Verify</code>.</p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p><b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p><b>Related operations:</b></p>
/// <ul>
/// <li>
/// <p><code>VerifyMac</code></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GenerateMacFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::generate_mac::builders::GenerateMacInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::generate_mac::GenerateMacOutput,
        crate::operation::generate_mac::GenerateMacError,
    > for GenerateMacFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::generate_mac::GenerateMacOutput,
            crate::operation::generate_mac::GenerateMacError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GenerateMacFluentBuilder {
    /// Creates a new `GenerateMac`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GenerateMac as a reference.
    pub fn as_input(&self) -> &crate::operation::generate_mac::builders::GenerateMacInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::generate_mac::GenerateMacOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::generate_mac::GenerateMacError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::generate_mac::GenerateMac::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::generate_mac::GenerateMac::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::generate_mac::GenerateMacOutput,
        crate::operation::generate_mac::GenerateMacError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the MAC generation encryption key.</p>
    pub fn key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the MAC generation encryption key.</p>
    pub fn set_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the MAC generation encryption key.</p>
    pub fn get_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key_identifier()
    }
    /// <p>The data for which a MAC is under generation. This value must be hexBinary.</p>
    pub fn message_data(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.message_data(input.into());
        self
    }
    /// <p>The data for which a MAC is under generation. This value must be hexBinary.</p>
    pub fn set_message_data(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_message_data(input);
        self
    }
    /// <p>The data for which a MAC is under generation. This value must be hexBinary.</p>
    pub fn get_message_data(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_message_data()
    }
    /// <p>The attributes and data values to use for MAC generation within Amazon Web Services Payment Cryptography.</p>
    pub fn generation_attributes(mut self, input: crate::types::MacAttributes) -> Self {
        self.inner = self.inner.generation_attributes(input);
        self
    }
    /// <p>The attributes and data values to use for MAC generation within Amazon Web Services Payment Cryptography.</p>
    pub fn set_generation_attributes(mut self, input: ::std::option::Option<crate::types::MacAttributes>) -> Self {
        self.inner = self.inner.set_generation_attributes(input);
        self
    }
    /// <p>The attributes and data values to use for MAC generation within Amazon Web Services Payment Cryptography.</p>
    pub fn get_generation_attributes(&self) -> &::std::option::Option<crate::types::MacAttributes> {
        self.inner.get_generation_attributes()
    }
    /// <p>The length of a MAC under generation.</p>
    pub fn mac_length(mut self, input: i32) -> Self {
        self.inner = self.inner.mac_length(input);
        self
    }
    /// <p>The length of a MAC under generation.</p>
    pub fn set_mac_length(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_mac_length(input);
        self
    }
    /// <p>The length of a MAC under generation.</p>
    pub fn get_mac_length(&self) -> &::std::option::Option<i32> {
        self.inner.get_mac_length()
    }
}
