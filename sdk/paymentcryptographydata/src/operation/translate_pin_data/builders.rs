// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::translate_pin_data::_translate_pin_data_output::TranslatePinDataOutputBuilder;

pub use crate::operation::translate_pin_data::_translate_pin_data_input::TranslatePinDataInputBuilder;

impl TranslatePinDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::translate_pin_data::TranslatePinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::translate_pin_data::TranslatePinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.translate_pin_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `TranslatePinData`.
///
/// <p>Translates encrypted PIN block from and to ISO 9564 formats 0,1,3,4. For more information, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/translate-pin-data.html">Translate PIN data</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p>
/// <p>PIN block translation involves changing the encrytion of PIN block from one encryption key to another encryption key and changing PIN block format from one to another without PIN block data leaving Amazon Web Services Payment Cryptography. The encryption key transformation can be from PEK (Pin Encryption Key) to BDK (Base Derivation Key) for DUKPT or from BDK for DUKPT to PEK. Amazon Web Services Payment Cryptography supports <code>TDES</code> and <code>AES</code> key derivation type for DUKPT tranlations. You can use this operation for P2PE (Point to Point Encryption) use cases where the encryption keys should change but the processing system either does not need to, or is not permitted to, decrypt the data.</p>
/// <p>The allowed combinations of PIN block format translations are guided by PCI. It is important to note that not all encrypted PIN block formats (example, format 1) require PAN (Primary Account Number) as input. And as such, PIN block format that requires PAN (example, formats 0,3,4) cannot be translated to a format (format 1) that does not require a PAN for generation. </p>
/// <p>For information about valid keys for this operation, see <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/keys-validattributes.html">Understanding key attributes</a> and <a href="https://docs.aws.amazon.com/payment-cryptography/latest/userguide/crypto-ops-validkeys-ops.html">Key types for specific data operations</a> in the <i>Amazon Web Services Payment Cryptography User Guide</i>.</p> <note>
/// <p>At this time, Amazon Web Services Payment Cryptography does not support translations to PIN format 4.</p>
/// </note>
/// <p> <b>Cross-account use</b>: This operation can't be used across different Amazon Web Services accounts.</p>
/// <p> <b>Related operations:</b> </p>
/// <ul>
/// <li> <p> <code>GeneratePinData</code> </p> </li>
/// <li> <p> <code>VerifyPinData</code> </p> </li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct TranslatePinDataFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::translate_pin_data::builders::TranslatePinDataInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::translate_pin_data::TranslatePinDataOutput,
        crate::operation::translate_pin_data::TranslatePinDataError,
    > for TranslatePinDataFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::translate_pin_data::TranslatePinDataOutput,
            crate::operation::translate_pin_data::TranslatePinDataError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl TranslatePinDataFluentBuilder {
    /// Creates a new `TranslatePinData`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the TranslatePinData as a reference.
    pub fn as_input(&self) -> &crate::operation::translate_pin_data::builders::TranslatePinDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::translate_pin_data::TranslatePinDataOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::translate_pin_data::TranslatePinDataError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::translate_pin_data::TranslatePinData::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::translate_pin_data::TranslatePinData::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::translate_pin_data::TranslatePinDataOutput,
        crate::operation::translate_pin_data::TranslatePinDataError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which incoming PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn incoming_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.incoming_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which incoming PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn set_incoming_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_incoming_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key under which incoming PIN block data is encrypted. This key type can be PEK or BDK.</p>
    pub fn get_incoming_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_incoming_key_identifier()
    }
    /// <p>The <code>keyARN</code> of the encryption key for encrypting outgoing PIN block data. This key type can be PEK or BDK.</p>
    pub fn outgoing_key_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.outgoing_key_identifier(input.into());
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key for encrypting outgoing PIN block data. This key type can be PEK or BDK.</p>
    pub fn set_outgoing_key_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_outgoing_key_identifier(input);
        self
    }
    /// <p>The <code>keyARN</code> of the encryption key for encrypting outgoing PIN block data. This key type can be PEK or BDK.</p>
    pub fn get_outgoing_key_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_outgoing_key_identifier()
    }
    /// <p>The format of the incoming PIN block data for tranlation within Amazon Web Services Payment Cryptography.</p>
    pub fn incoming_translation_attributes(mut self, input: crate::types::TranslationIsoFormats) -> Self {
        self.inner = self.inner.incoming_translation_attributes(input);
        self
    }
    /// <p>The format of the incoming PIN block data for tranlation within Amazon Web Services Payment Cryptography.</p>
    pub fn set_incoming_translation_attributes(mut self, input: ::std::option::Option<crate::types::TranslationIsoFormats>) -> Self {
        self.inner = self.inner.set_incoming_translation_attributes(input);
        self
    }
    /// <p>The format of the incoming PIN block data for tranlation within Amazon Web Services Payment Cryptography.</p>
    pub fn get_incoming_translation_attributes(&self) -> &::std::option::Option<crate::types::TranslationIsoFormats> {
        self.inner.get_incoming_translation_attributes()
    }
    /// <p>The format of the outgoing PIN block data after tranlation by Amazon Web Services Payment Cryptography.</p>
    pub fn outgoing_translation_attributes(mut self, input: crate::types::TranslationIsoFormats) -> Self {
        self.inner = self.inner.outgoing_translation_attributes(input);
        self
    }
    /// <p>The format of the outgoing PIN block data after tranlation by Amazon Web Services Payment Cryptography.</p>
    pub fn set_outgoing_translation_attributes(mut self, input: ::std::option::Option<crate::types::TranslationIsoFormats>) -> Self {
        self.inner = self.inner.set_outgoing_translation_attributes(input);
        self
    }
    /// <p>The format of the outgoing PIN block data after tranlation by Amazon Web Services Payment Cryptography.</p>
    pub fn get_outgoing_translation_attributes(&self) -> &::std::option::Option<crate::types::TranslationIsoFormats> {
        self.inner.get_outgoing_translation_attributes()
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography translates.</p>
    pub fn encrypted_pin_block(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.encrypted_pin_block(input.into());
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography translates.</p>
    pub fn set_encrypted_pin_block(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_encrypted_pin_block(input);
        self
    }
    /// <p>The encrypted PIN block data that Amazon Web Services Payment Cryptography translates.</p>
    pub fn get_encrypted_pin_block(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_encrypted_pin_block()
    }
    /// <p>The attributes and values to use for incoming DUKPT encryption key for PIN block tranlation.</p>
    pub fn incoming_dukpt_attributes(mut self, input: crate::types::DukptDerivationAttributes) -> Self {
        self.inner = self.inner.incoming_dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values to use for incoming DUKPT encryption key for PIN block tranlation.</p>
    pub fn set_incoming_dukpt_attributes(mut self, input: ::std::option::Option<crate::types::DukptDerivationAttributes>) -> Self {
        self.inner = self.inner.set_incoming_dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values to use for incoming DUKPT encryption key for PIN block tranlation.</p>
    pub fn get_incoming_dukpt_attributes(&self) -> &::std::option::Option<crate::types::DukptDerivationAttributes> {
        self.inner.get_incoming_dukpt_attributes()
    }
    /// <p>The attributes and values to use for outgoing DUKPT encryption key after PIN block translation.</p>
    pub fn outgoing_dukpt_attributes(mut self, input: crate::types::DukptDerivationAttributes) -> Self {
        self.inner = self.inner.outgoing_dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values to use for outgoing DUKPT encryption key after PIN block translation.</p>
    pub fn set_outgoing_dukpt_attributes(mut self, input: ::std::option::Option<crate::types::DukptDerivationAttributes>) -> Self {
        self.inner = self.inner.set_outgoing_dukpt_attributes(input);
        self
    }
    /// <p>The attributes and values to use for outgoing DUKPT encryption key after PIN block translation.</p>
    pub fn get_outgoing_dukpt_attributes(&self) -> &::std::option::Option<crate::types::DukptDerivationAttributes> {
        self.inner.get_outgoing_dukpt_attributes()
    }
}
