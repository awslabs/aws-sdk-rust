// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_verify_auth_request_cryptogram_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::verify_auth_request_cryptogram::VerifyAuthRequestCryptogramInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auth_request_cryptogram {
        object.key("AuthRequestCryptogram").string(var_1.as_str());
    }
    if let Some(var_2) = &input.auth_response_attributes {
        #[allow(unused_mut)]
        let mut object_3 = object.key("AuthResponseAttributes").start_object();
        crate::protocol_serde::shape_cryptogram_auth_response::ser_cryptogram_auth_response(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.key_identifier {
        object.key("KeyIdentifier").string(var_4.as_str());
    }
    if let Some(var_5) = &input.major_key_derivation_mode {
        object.key("MajorKeyDerivationMode").string(var_5.as_str());
    }
    if let Some(var_6) = &input.session_key_derivation_attributes {
        #[allow(unused_mut)]
        let mut object_7 = object.key("SessionKeyDerivationAttributes").start_object();
        crate::protocol_serde::shape_session_key_derivation::ser_session_key_derivation(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.transaction_data {
        object.key("TransactionData").string(var_8.as_str());
    }
    Ok(())
}
