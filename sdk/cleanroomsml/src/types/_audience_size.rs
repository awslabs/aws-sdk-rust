// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The size of the generated audience. Must match one of the sizes in the configured audience model.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AudienceSize {
    /// <p>Whether the audience size is defined in absolute terms or as a percentage. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
    pub r#type: crate::types::AudienceSizeType,
    /// <p>Specify an audience size value.</p>
    pub value: i32,
}
impl AudienceSize {
    /// <p>Whether the audience size is defined in absolute terms or as a percentage. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
    pub fn r#type(&self) -> &crate::types::AudienceSizeType {
        &self.r#type
    }
    /// <p>Specify an audience size value.</p>
    pub fn value(&self) -> i32 {
        self.value
    }
}
impl AudienceSize {
    /// Creates a new builder-style object to manufacture [`AudienceSize`](crate::types::AudienceSize).
    pub fn builder() -> crate::types::builders::AudienceSizeBuilder {
        crate::types::builders::AudienceSizeBuilder::default()
    }
}

/// A builder for [`AudienceSize`](crate::types::AudienceSize).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AudienceSizeBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::AudienceSizeType>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl AudienceSizeBuilder {
    /// <p>Whether the audience size is defined in absolute terms or as a percentage. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AudienceSizeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the audience size is defined in absolute terms or as a percentage. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AudienceSizeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Whether the audience size is defined in absolute terms or as a percentage. You can use the <code>ABSOLUTE</code> <code>AudienceSize</code> to configure out audience sizes using the count of identifiers in the output. You can use the <code>Percentage</code> <code>AudienceSize</code> to configure sizes in the range 1-100 percent.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AudienceSizeType> {
        &self.r#type
    }
    /// <p>Specify an audience size value.</p>
    /// This field is required.
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify an audience size value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>Specify an audience size value.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AudienceSize`](crate::types::AudienceSize).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::AudienceSizeBuilder::type)
    /// - [`value`](crate::types::builders::AudienceSizeBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::AudienceSize, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AudienceSize {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building AudienceSize",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building AudienceSize",
                )
            })?,
        })
    }
}
