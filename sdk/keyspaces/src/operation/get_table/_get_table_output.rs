// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTableOutput {
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    pub keyspace_name: ::std::string::String,
    /// <p>The name of the specified table.</p>
    pub table_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    pub resource_arn: ::std::string::String,
    /// <p>The creation timestamp of the specified table.</p>
    pub creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current status of the specified table.</p>
    pub status: ::std::option::Option<crate::types::TableStatus>,
    /// <p>The schema definition of the specified table.</p>
    pub schema_definition: ::std::option::Option<crate::types::SchemaDefinition>,
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li> <p> <code>throughputMode:PAY_PER_REQUEST</code> </p> </li>
    /// <li> <p> <code>throughputMode:PROVISIONED</code> </p> </li>
    /// </ul>
    pub capacity_specification: ::std::option::Option<crate::types::CapacitySpecificationSummary>,
    /// <p>The encryption settings of the specified table.</p>
    pub encryption_specification: ::std::option::Option<crate::types::EncryptionSpecification>,
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub point_in_time_recovery: ::std::option::Option<crate::types::PointInTimeRecoverySummary>,
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub ttl: ::std::option::Option<crate::types::TimeToLive>,
    /// <p>The default Time to Live settings in seconds of the specified table.</p>
    pub default_time_to_live: ::std::option::Option<i32>,
    /// <p>The the description of the specified table.</p>
    pub comment: ::std::option::Option<crate::types::Comment>,
    /// <p> The client-side timestamps setting of the table.</p>
    pub client_side_timestamps: ::std::option::Option<crate::types::ClientSideTimestamps>,
    _request_id: Option<String>,
}
impl GetTableOutput {
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    pub fn keyspace_name(&self) -> &str {
        use std::ops::Deref;
        self.keyspace_name.deref()
    }
    /// <p>The name of the specified table.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    pub fn resource_arn(&self) -> &str {
        use std::ops::Deref;
        self.resource_arn.deref()
    }
    /// <p>The creation timestamp of the specified table.</p>
    pub fn creation_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The current status of the specified table.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TableStatus> {
        self.status.as_ref()
    }
    /// <p>The schema definition of the specified table.</p>
    pub fn schema_definition(&self) -> ::std::option::Option<&crate::types::SchemaDefinition> {
        self.schema_definition.as_ref()
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li> <p> <code>throughputMode:PAY_PER_REQUEST</code> </p> </li>
    /// <li> <p> <code>throughputMode:PROVISIONED</code> </p> </li>
    /// </ul>
    pub fn capacity_specification(&self) -> ::std::option::Option<&crate::types::CapacitySpecificationSummary> {
        self.capacity_specification.as_ref()
    }
    /// <p>The encryption settings of the specified table.</p>
    pub fn encryption_specification(&self) -> ::std::option::Option<&crate::types::EncryptionSpecification> {
        self.encryption_specification.as_ref()
    }
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub fn point_in_time_recovery(&self) -> ::std::option::Option<&crate::types::PointInTimeRecoverySummary> {
        self.point_in_time_recovery.as_ref()
    }
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub fn ttl(&self) -> ::std::option::Option<&crate::types::TimeToLive> {
        self.ttl.as_ref()
    }
    /// <p>The default Time to Live settings in seconds of the specified table.</p>
    pub fn default_time_to_live(&self) -> ::std::option::Option<i32> {
        self.default_time_to_live
    }
    /// <p>The the description of the specified table.</p>
    pub fn comment(&self) -> ::std::option::Option<&crate::types::Comment> {
        self.comment.as_ref()
    }
    /// <p> The client-side timestamps setting of the table.</p>
    pub fn client_side_timestamps(&self) -> ::std::option::Option<&crate::types::ClientSideTimestamps> {
        self.client_side_timestamps.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTableOutput {
    /// Creates a new builder-style object to manufacture [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
    pub fn builder() -> crate::operation::get_table::builders::GetTableOutputBuilder {
        crate::operation::get_table::builders::GetTableOutputBuilder::default()
    }
}

/// A builder for [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTableOutputBuilder {
    pub(crate) keyspace_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::TableStatus>,
    pub(crate) schema_definition: ::std::option::Option<crate::types::SchemaDefinition>,
    pub(crate) capacity_specification: ::std::option::Option<crate::types::CapacitySpecificationSummary>,
    pub(crate) encryption_specification: ::std::option::Option<crate::types::EncryptionSpecification>,
    pub(crate) point_in_time_recovery: ::std::option::Option<crate::types::PointInTimeRecoverySummary>,
    pub(crate) ttl: ::std::option::Option<crate::types::TimeToLive>,
    pub(crate) default_time_to_live: ::std::option::Option<i32>,
    pub(crate) comment: ::std::option::Option<crate::types::Comment>,
    pub(crate) client_side_timestamps: ::std::option::Option<crate::types::ClientSideTimestamps>,
    _request_id: Option<String>,
}
impl GetTableOutputBuilder {
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    /// This field is required.
    pub fn keyspace_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyspace_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    pub fn set_keyspace_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    pub fn get_keyspace_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyspace_name
    }
    /// <p>The name of the specified table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the specified table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the specified table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The creation timestamp of the specified table.</p>
    pub fn creation_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation timestamp of the specified table.</p>
    pub fn set_creation_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_timestamp = input;
        self
    }
    /// <p>The creation timestamp of the specified table.</p>
    pub fn get_creation_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_timestamp
    }
    /// <p>The current status of the specified table.</p>
    pub fn status(mut self, input: crate::types::TableStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the specified table.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TableStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the specified table.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TableStatus> {
        &self.status
    }
    /// <p>The schema definition of the specified table.</p>
    pub fn schema_definition(mut self, input: crate::types::SchemaDefinition) -> Self {
        self.schema_definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>The schema definition of the specified table.</p>
    pub fn set_schema_definition(mut self, input: ::std::option::Option<crate::types::SchemaDefinition>) -> Self {
        self.schema_definition = input;
        self
    }
    /// <p>The schema definition of the specified table.</p>
    pub fn get_schema_definition(&self) -> &::std::option::Option<crate::types::SchemaDefinition> {
        &self.schema_definition
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li> <p> <code>throughputMode:PAY_PER_REQUEST</code> </p> </li>
    /// <li> <p> <code>throughputMode:PROVISIONED</code> </p> </li>
    /// </ul>
    pub fn capacity_specification(mut self, input: crate::types::CapacitySpecificationSummary) -> Self {
        self.capacity_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li> <p> <code>throughputMode:PAY_PER_REQUEST</code> </p> </li>
    /// <li> <p> <code>throughputMode:PROVISIONED</code> </p> </li>
    /// </ul>
    pub fn set_capacity_specification(mut self, input: ::std::option::Option<crate::types::CapacitySpecificationSummary>) -> Self {
        self.capacity_specification = input;
        self
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <ul>
    /// <li> <p> <code>throughputMode:PAY_PER_REQUEST</code> </p> </li>
    /// <li> <p> <code>throughputMode:PROVISIONED</code> </p> </li>
    /// </ul>
    pub fn get_capacity_specification(&self) -> &::std::option::Option<crate::types::CapacitySpecificationSummary> {
        &self.capacity_specification
    }
    /// <p>The encryption settings of the specified table.</p>
    pub fn encryption_specification(mut self, input: crate::types::EncryptionSpecification) -> Self {
        self.encryption_specification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The encryption settings of the specified table.</p>
    pub fn set_encryption_specification(mut self, input: ::std::option::Option<crate::types::EncryptionSpecification>) -> Self {
        self.encryption_specification = input;
        self
    }
    /// <p>The encryption settings of the specified table.</p>
    pub fn get_encryption_specification(&self) -> &::std::option::Option<crate::types::EncryptionSpecification> {
        &self.encryption_specification
    }
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub fn point_in_time_recovery(mut self, input: crate::types::PointInTimeRecoverySummary) -> Self {
        self.point_in_time_recovery = ::std::option::Option::Some(input);
        self
    }
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub fn set_point_in_time_recovery(mut self, input: ::std::option::Option<crate::types::PointInTimeRecoverySummary>) -> Self {
        self.point_in_time_recovery = input;
        self
    }
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub fn get_point_in_time_recovery(&self) -> &::std::option::Option<crate::types::PointInTimeRecoverySummary> {
        &self.point_in_time_recovery
    }
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub fn ttl(mut self, input: crate::types::TimeToLive) -> Self {
        self.ttl = ::std::option::Option::Some(input);
        self
    }
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub fn set_ttl(mut self, input: ::std::option::Option<crate::types::TimeToLive>) -> Self {
        self.ttl = input;
        self
    }
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub fn get_ttl(&self) -> &::std::option::Option<crate::types::TimeToLive> {
        &self.ttl
    }
    /// <p>The default Time to Live settings in seconds of the specified table.</p>
    pub fn default_time_to_live(mut self, input: i32) -> Self {
        self.default_time_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>The default Time to Live settings in seconds of the specified table.</p>
    pub fn set_default_time_to_live(mut self, input: ::std::option::Option<i32>) -> Self {
        self.default_time_to_live = input;
        self
    }
    /// <p>The default Time to Live settings in seconds of the specified table.</p>
    pub fn get_default_time_to_live(&self) -> &::std::option::Option<i32> {
        &self.default_time_to_live
    }
    /// <p>The the description of the specified table.</p>
    pub fn comment(mut self, input: crate::types::Comment) -> Self {
        self.comment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The the description of the specified table.</p>
    pub fn set_comment(mut self, input: ::std::option::Option<crate::types::Comment>) -> Self {
        self.comment = input;
        self
    }
    /// <p>The the description of the specified table.</p>
    pub fn get_comment(&self) -> &::std::option::Option<crate::types::Comment> {
        &self.comment
    }
    /// <p> The client-side timestamps setting of the table.</p>
    pub fn client_side_timestamps(mut self, input: crate::types::ClientSideTimestamps) -> Self {
        self.client_side_timestamps = ::std::option::Option::Some(input);
        self
    }
    /// <p> The client-side timestamps setting of the table.</p>
    pub fn set_client_side_timestamps(mut self, input: ::std::option::Option<crate::types::ClientSideTimestamps>) -> Self {
        self.client_side_timestamps = input;
        self
    }
    /// <p> The client-side timestamps setting of the table.</p>
    pub fn get_client_side_timestamps(&self) -> &::std::option::Option<crate::types::ClientSideTimestamps> {
        &self.client_side_timestamps
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTableOutput`](crate::operation::get_table::GetTableOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`keyspace_name`](crate::operation::get_table::builders::GetTableOutputBuilder::keyspace_name)
    /// - [`table_name`](crate::operation::get_table::builders::GetTableOutputBuilder::table_name)
    /// - [`resource_arn`](crate::operation::get_table::builders::GetTableOutputBuilder::resource_arn)
    pub fn build(self) -> ::std::result::Result<crate::operation::get_table::GetTableOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_table::GetTableOutput {
            keyspace_name: self.keyspace_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyspace_name",
                    "keyspace_name was not specified but it is required when building GetTableOutput",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building GetTableOutput",
                )
            })?,
            resource_arn: self.resource_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "resource_arn",
                    "resource_arn was not specified but it is required when building GetTableOutput",
                )
            })?,
            creation_timestamp: self.creation_timestamp,
            status: self.status,
            schema_definition: self.schema_definition,
            capacity_specification: self.capacity_specification,
            encryption_specification: self.encryption_specification,
            point_in_time_recovery: self.point_in_time_recovery,
            ttl: self.ttl,
            default_time_to_live: self.default_time_to_live,
            comment: self.comment,
            client_side_timestamps: self.client_side_timestamps,
            _request_id: self._request_id,
        })
    }
}
