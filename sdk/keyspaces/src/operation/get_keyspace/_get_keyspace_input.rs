// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetKeyspaceInput {
    /// <p>The name of the keyspace.</p>
    #[doc(hidden)]
    pub keyspace_name: std::option::Option<std::string::String>,
}
impl GetKeyspaceInput {
    /// <p>The name of the keyspace.</p>
    pub fn keyspace_name(&self) -> std::option::Option<&str> {
        self.keyspace_name.as_deref()
    }
}
impl GetKeyspaceInput {
    /// Creates a new builder-style object to manufacture [`GetKeyspaceInput`](crate::operation::get_keyspace::GetKeyspaceInput).
    pub fn builder() -> crate::operation::get_keyspace::builders::GetKeyspaceInputBuilder {
        crate::operation::get_keyspace::builders::GetKeyspaceInputBuilder::default()
    }
}

/// A builder for [`GetKeyspaceInput`](crate::operation::get_keyspace::GetKeyspaceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetKeyspaceInputBuilder {
    pub(crate) keyspace_name: std::option::Option<std::string::String>,
}
impl GetKeyspaceInputBuilder {
    /// <p>The name of the keyspace.</p>
    pub fn keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.keyspace_name = Some(input.into());
        self
    }
    /// <p>The name of the keyspace.</p>
    pub fn set_keyspace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetKeyspaceInput`](crate::operation::get_keyspace::GetKeyspaceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_keyspace::GetKeyspaceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_keyspace::GetKeyspaceInput {
            keyspace_name: self.keyspace_name,
        })
    }
}
