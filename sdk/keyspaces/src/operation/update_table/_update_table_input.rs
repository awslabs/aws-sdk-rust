// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateTableInput {
    /// <p>The name of the keyspace the specified table is stored in.</p>
    #[doc(hidden)]
    pub keyspace_name: std::option::Option<std::string::String>,
    /// <p>The name of the table.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>For each column to be added to the specified table:</p>
    /// <p>• <code>name</code> - The name of the column.</p>
    /// <p>• <code>type</code> - An Amazon Keyspaces data type. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types">Data types</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub add_columns: std::option::Option<std::vec::Vec<crate::types::ColumnDefinition>>,
    /// <p>Modifies the read/write throughput capacity mode for the table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> and </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub capacity_specification: std::option::Option<crate::types::CapacitySpecification>,
    /// <p>Modifies the encryption settings of the table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub encryption_specification: std::option::Option<crate::types::EncryptionSpecification>,
    /// <p>Modifies the <code>pointInTimeRecovery</code> settings of the table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub point_in_time_recovery: std::option::Option<crate::types::PointInTimeRecovery>,
    /// <p>Modifies Time to Live custom settings for the table. The options are:</p>
    /// <p>• <code>status:enabled</code> </p>
    /// <p>• <code>status:disabled</code> </p>
    /// <p>The default is <code>status:disabled</code>. After <code>ttl</code> is enabled, you can't disable it for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html">Expiring data by using Amazon Keyspaces Time to Live (TTL)</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub ttl: std::option::Option<crate::types::TimeToLive>,
    /// <p>The default Time to Live setting in seconds for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl">Setting the default TTL value for a table</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub default_time_to_live: std::option::Option<i32>,
}
impl UpdateTableInput {
    /// <p>The name of the keyspace the specified table is stored in.</p>
    pub fn keyspace_name(&self) -> std::option::Option<&str> {
        self.keyspace_name.as_deref()
    }
    /// <p>The name of the table.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>For each column to be added to the specified table:</p>
    /// <p>• <code>name</code> - The name of the column.</p>
    /// <p>• <code>type</code> - An Amazon Keyspaces data type. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types">Data types</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn add_columns(&self) -> std::option::Option<&[crate::types::ColumnDefinition]> {
        self.add_columns.as_deref()
    }
    /// <p>Modifies the read/write throughput capacity mode for the table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> and </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification(
        &self,
    ) -> std::option::Option<&crate::types::CapacitySpecification> {
        self.capacity_specification.as_ref()
    }
    /// <p>Modifies the encryption settings of the table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn encryption_specification(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionSpecification> {
        self.encryption_specification.as_ref()
    }
    /// <p>Modifies the <code>pointInTimeRecovery</code> settings of the table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn point_in_time_recovery(
        &self,
    ) -> std::option::Option<&crate::types::PointInTimeRecovery> {
        self.point_in_time_recovery.as_ref()
    }
    /// <p>Modifies Time to Live custom settings for the table. The options are:</p>
    /// <p>• <code>status:enabled</code> </p>
    /// <p>• <code>status:disabled</code> </p>
    /// <p>The default is <code>status:disabled</code>. After <code>ttl</code> is enabled, you can't disable it for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html">Expiring data by using Amazon Keyspaces Time to Live (TTL)</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn ttl(&self) -> std::option::Option<&crate::types::TimeToLive> {
        self.ttl.as_ref()
    }
    /// <p>The default Time to Live setting in seconds for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl">Setting the default TTL value for a table</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn default_time_to_live(&self) -> std::option::Option<i32> {
        self.default_time_to_live
    }
}
impl UpdateTableInput {
    /// Creates a new builder-style object to manufacture [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
    pub fn builder() -> crate::operation::update_table::builders::UpdateTableInputBuilder {
        crate::operation::update_table::builders::UpdateTableInputBuilder::default()
    }
}

/// A builder for [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateTableInputBuilder {
    pub(crate) keyspace_name: std::option::Option<std::string::String>,
    pub(crate) table_name: std::option::Option<std::string::String>,
    pub(crate) add_columns: std::option::Option<std::vec::Vec<crate::types::ColumnDefinition>>,
    pub(crate) capacity_specification: std::option::Option<crate::types::CapacitySpecification>,
    pub(crate) encryption_specification: std::option::Option<crate::types::EncryptionSpecification>,
    pub(crate) point_in_time_recovery: std::option::Option<crate::types::PointInTimeRecovery>,
    pub(crate) ttl: std::option::Option<crate::types::TimeToLive>,
    pub(crate) default_time_to_live: std::option::Option<i32>,
}
impl UpdateTableInputBuilder {
    /// <p>The name of the keyspace the specified table is stored in.</p>
    pub fn keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.keyspace_name = Some(input.into());
        self
    }
    /// <p>The name of the keyspace the specified table is stored in.</p>
    pub fn set_keyspace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.keyspace_name = input;
        self
    }
    /// <p>The name of the table.</p>
    pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.table_name = Some(input.into());
        self
    }
    /// <p>The name of the table.</p>
    pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// Appends an item to `add_columns`.
    ///
    /// To override the contents of this collection use [`set_add_columns`](Self::set_add_columns).
    ///
    /// <p>For each column to be added to the specified table:</p>
    /// <p>• <code>name</code> - The name of the column.</p>
    /// <p>• <code>type</code> - An Amazon Keyspaces data type. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types">Data types</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn add_columns(mut self, input: crate::types::ColumnDefinition) -> Self {
        let mut v = self.add_columns.unwrap_or_default();
        v.push(input);
        self.add_columns = Some(v);
        self
    }
    /// <p>For each column to be added to the specified table:</p>
    /// <p>• <code>name</code> - The name of the column.</p>
    /// <p>• <code>type</code> - An Amazon Keyspaces data type. For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types">Data types</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_add_columns(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ColumnDefinition>>,
    ) -> Self {
        self.add_columns = input;
        self
    }
    /// <p>Modifies the read/write throughput capacity mode for the table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> and </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification(mut self, input: crate::types::CapacitySpecification) -> Self {
        self.capacity_specification = Some(input);
        self
    }
    /// <p>Modifies the read/write throughput capacity mode for the table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> and </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_capacity_specification(
        mut self,
        input: std::option::Option<crate::types::CapacitySpecification>,
    ) -> Self {
        self.capacity_specification = input;
        self
    }
    /// <p>Modifies the encryption settings of the table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn encryption_specification(
        mut self,
        input: crate::types::EncryptionSpecification,
    ) -> Self {
        self.encryption_specification = Some(input);
        self
    }
    /// <p>Modifies the encryption settings of the table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_encryption_specification(
        mut self,
        input: std::option::Option<crate::types::EncryptionSpecification>,
    ) -> Self {
        self.encryption_specification = input;
        self
    }
    /// <p>Modifies the <code>pointInTimeRecovery</code> settings of the table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn point_in_time_recovery(mut self, input: crate::types::PointInTimeRecovery) -> Self {
        self.point_in_time_recovery = Some(input);
        self
    }
    /// <p>Modifies the <code>pointInTimeRecovery</code> settings of the table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_point_in_time_recovery(
        mut self,
        input: std::option::Option<crate::types::PointInTimeRecovery>,
    ) -> Self {
        self.point_in_time_recovery = input;
        self
    }
    /// <p>Modifies Time to Live custom settings for the table. The options are:</p>
    /// <p>• <code>status:enabled</code> </p>
    /// <p>• <code>status:disabled</code> </p>
    /// <p>The default is <code>status:disabled</code>. After <code>ttl</code> is enabled, you can't disable it for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html">Expiring data by using Amazon Keyspaces Time to Live (TTL)</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn ttl(mut self, input: crate::types::TimeToLive) -> Self {
        self.ttl = Some(input);
        self
    }
    /// <p>Modifies Time to Live custom settings for the table. The options are:</p>
    /// <p>• <code>status:enabled</code> </p>
    /// <p>• <code>status:disabled</code> </p>
    /// <p>The default is <code>status:disabled</code>. After <code>ttl</code> is enabled, you can't disable it for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html">Expiring data by using Amazon Keyspaces Time to Live (TTL)</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_ttl(mut self, input: std::option::Option<crate::types::TimeToLive>) -> Self {
        self.ttl = input;
        self
    }
    /// <p>The default Time to Live setting in seconds for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl">Setting the default TTL value for a table</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn default_time_to_live(mut self, input: i32) -> Self {
        self.default_time_to_live = Some(input);
        self
    }
    /// <p>The default Time to Live setting in seconds for the table.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl">Setting the default TTL value for a table</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_default_time_to_live(mut self, input: std::option::Option<i32>) -> Self {
        self.default_time_to_live = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_table::UpdateTableInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_table::UpdateTableInput {
            keyspace_name: self.keyspace_name,
            table_name: self.table_name,
            add_columns: self.add_columns,
            capacity_specification: self.capacity_specification,
            encryption_specification: self.encryption_specification,
            point_in_time_recovery: self.point_in_time_recovery,
            ttl: self.ttl,
            default_time_to_live: self.default_time_to_live,
        })
    }
}
