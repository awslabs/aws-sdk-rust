// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreTableInput {
    /// <p>The keyspace name of the source table.</p>
    #[doc(hidden)]
    pub source_keyspace_name: std::option::Option<std::string::String>,
    /// <p>The name of the source table.</p>
    #[doc(hidden)]
    pub source_table_name: std::option::Option<std::string::String>,
    /// <p>The name of the target keyspace.</p>
    #[doc(hidden)]
    pub target_keyspace_name: std::option::Option<std::string::String>,
    /// <p>The name of the target table.</p>
    #[doc(hidden)]
    pub target_table_name: std::option::Option<std::string::String>,
    /// <p>The restore timestamp in ISO 8601 format.</p>
    #[doc(hidden)]
    pub restore_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the read/write throughput capacity mode for the target table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub capacity_specification_override: std::option::Option<crate::types::CapacitySpecification>,
    /// <p>Specifies the encryption settings for the target table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>type:AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub encryption_specification_override:
        std::option::Option<crate::types::EncryptionSpecification>,
    /// <p>Specifies the <code>pointInTimeRecovery</code> settings for the target table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub point_in_time_recovery_override: std::option::Option<crate::types::PointInTimeRecovery>,
    /// <p>A list of key-value pair tags to be attached to the restored table. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html">Adding tags and labels to Amazon Keyspaces resources</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    #[doc(hidden)]
    pub tags_override: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl RestoreTableInput {
    /// <p>The keyspace name of the source table.</p>
    pub fn source_keyspace_name(&self) -> std::option::Option<&str> {
        self.source_keyspace_name.as_deref()
    }
    /// <p>The name of the source table.</p>
    pub fn source_table_name(&self) -> std::option::Option<&str> {
        self.source_table_name.as_deref()
    }
    /// <p>The name of the target keyspace.</p>
    pub fn target_keyspace_name(&self) -> std::option::Option<&str> {
        self.target_keyspace_name.as_deref()
    }
    /// <p>The name of the target table.</p>
    pub fn target_table_name(&self) -> std::option::Option<&str> {
        self.target_table_name.as_deref()
    }
    /// <p>The restore timestamp in ISO 8601 format.</p>
    pub fn restore_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.restore_timestamp.as_ref()
    }
    /// <p>Specifies the read/write throughput capacity mode for the target table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification_override(
        &self,
    ) -> std::option::Option<&crate::types::CapacitySpecification> {
        self.capacity_specification_override.as_ref()
    }
    /// <p>Specifies the encryption settings for the target table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>type:AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn encryption_specification_override(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionSpecification> {
        self.encryption_specification_override.as_ref()
    }
    /// <p>Specifies the <code>pointInTimeRecovery</code> settings for the target table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn point_in_time_recovery_override(
        &self,
    ) -> std::option::Option<&crate::types::PointInTimeRecovery> {
        self.point_in_time_recovery_override.as_ref()
    }
    /// <p>A list of key-value pair tags to be attached to the restored table. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html">Adding tags and labels to Amazon Keyspaces resources</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn tags_override(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags_override.as_deref()
    }
}
impl RestoreTableInput {
    /// Creates a new builder-style object to manufacture [`RestoreTableInput`](crate::operation::restore_table::RestoreTableInput).
    pub fn builder() -> crate::operation::restore_table::builders::RestoreTableInputBuilder {
        crate::operation::restore_table::builders::RestoreTableInputBuilder::default()
    }
}

/// A builder for [`RestoreTableInput`](crate::operation::restore_table::RestoreTableInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RestoreTableInputBuilder {
    pub(crate) source_keyspace_name: std::option::Option<std::string::String>,
    pub(crate) source_table_name: std::option::Option<std::string::String>,
    pub(crate) target_keyspace_name: std::option::Option<std::string::String>,
    pub(crate) target_table_name: std::option::Option<std::string::String>,
    pub(crate) restore_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) capacity_specification_override:
        std::option::Option<crate::types::CapacitySpecification>,
    pub(crate) encryption_specification_override:
        std::option::Option<crate::types::EncryptionSpecification>,
    pub(crate) point_in_time_recovery_override:
        std::option::Option<crate::types::PointInTimeRecovery>,
    pub(crate) tags_override: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl RestoreTableInputBuilder {
    /// <p>The keyspace name of the source table.</p>
    pub fn source_keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_keyspace_name = Some(input.into());
        self
    }
    /// <p>The keyspace name of the source table.</p>
    pub fn set_source_keyspace_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_keyspace_name = input;
        self
    }
    /// <p>The name of the source table.</p>
    pub fn source_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_table_name = Some(input.into());
        self
    }
    /// <p>The name of the source table.</p>
    pub fn set_source_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_table_name = input;
        self
    }
    /// <p>The name of the target keyspace.</p>
    pub fn target_keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_keyspace_name = Some(input.into());
        self
    }
    /// <p>The name of the target keyspace.</p>
    pub fn set_target_keyspace_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_keyspace_name = input;
        self
    }
    /// <p>The name of the target table.</p>
    pub fn target_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_table_name = Some(input.into());
        self
    }
    /// <p>The name of the target table.</p>
    pub fn set_target_table_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_table_name = input;
        self
    }
    /// <p>The restore timestamp in ISO 8601 format.</p>
    pub fn restore_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.restore_timestamp = Some(input);
        self
    }
    /// <p>The restore timestamp in ISO 8601 format.</p>
    pub fn set_restore_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.restore_timestamp = input;
        self
    }
    /// <p>Specifies the read/write throughput capacity mode for the target table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn capacity_specification_override(
        mut self,
        input: crate::types::CapacitySpecification,
    ) -> Self {
        self.capacity_specification_override = Some(input);
        self
    }
    /// <p>Specifies the read/write throughput capacity mode for the target table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> - Provisioned capacity mode requires <code>readCapacityUnits</code> and <code>writeCapacityUnits</code> as input.</p>
    /// <p>The default is <code>throughput_mode:PAY_PER_REQUEST</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/ReadWriteCapacityMode.html">Read/write capacity modes</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_capacity_specification_override(
        mut self,
        input: std::option::Option<crate::types::CapacitySpecification>,
    ) -> Self {
        self.capacity_specification_override = input;
        self
    }
    /// <p>Specifies the encryption settings for the target table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>type:AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn encryption_specification_override(
        mut self,
        input: crate::types::EncryptionSpecification,
    ) -> Self {
        self.encryption_specification_override = Some(input);
        self
    }
    /// <p>Specifies the encryption settings for the target table. You can choose one of the following KMS key (KMS key):</p>
    /// <p>• <code>type:AWS_OWNED_KMS_KEY</code> - This key is owned by Amazon Keyspaces. </p>
    /// <p>• <code>type:CUSTOMER_MANAGED_KMS_KEY</code> - This key is stored in your account and is created, owned, and managed by you. This option requires the <code>kms_key_identifier</code> of the KMS key in Amazon Resource Name (ARN) format as input. </p>
    /// <p>The default is <code>type:AWS_OWNED_KMS_KEY</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html">Encryption at rest</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_encryption_specification_override(
        mut self,
        input: std::option::Option<crate::types::EncryptionSpecification>,
    ) -> Self {
        self.encryption_specification_override = input;
        self
    }
    /// <p>Specifies the <code>pointInTimeRecovery</code> settings for the target table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn point_in_time_recovery_override(
        mut self,
        input: crate::types::PointInTimeRecovery,
    ) -> Self {
        self.point_in_time_recovery_override = Some(input);
        self
    }
    /// <p>Specifies the <code>pointInTimeRecovery</code> settings for the target table. The options are:</p>
    /// <p>• <code>ENABLED</code> </p>
    /// <p>• <code>DISABLED</code> </p>
    /// <p>If it's not specified, the default is <code>DISABLED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html">Point-in-time recovery</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_point_in_time_recovery_override(
        mut self,
        input: std::option::Option<crate::types::PointInTimeRecovery>,
    ) -> Self {
        self.point_in_time_recovery_override = input;
        self
    }
    /// Appends an item to `tags_override`.
    ///
    /// To override the contents of this collection use [`set_tags_override`](Self::set_tags_override).
    ///
    /// <p>A list of key-value pair tags to be attached to the restored table. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html">Adding tags and labels to Amazon Keyspaces resources</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn tags_override(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags_override.unwrap_or_default();
        v.push(input);
        self.tags_override = Some(v);
        self
    }
    /// <p>A list of key-value pair tags to be attached to the restored table. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/keyspaces/latest/devguide/tagging-keyspaces.html">Adding tags and labels to Amazon Keyspaces resources</a> in the <i>Amazon Keyspaces Developer Guide</i>.</p>
    pub fn set_tags_override(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags_override = input;
        self
    }
    /// Consumes the builder and constructs a [`RestoreTableInput`](crate::operation::restore_table::RestoreTableInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::restore_table::RestoreTableInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::restore_table::RestoreTableInput {
            source_keyspace_name: self.source_keyspace_name,
            source_table_name: self.source_table_name,
            target_keyspace_name: self.target_keyspace_name,
            target_table_name: self.target_table_name,
            restore_timestamp: self.restore_timestamp,
            capacity_specification_override: self.capacity_specification_override,
            encryption_specification_override: self.encryption_specification_override,
            point_in_time_recovery_override: self.point_in_time_recovery_override,
            tags_override: self.tags_override,
        })
    }
}
