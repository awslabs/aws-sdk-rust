// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_keyspace_output_correct_errors(
    mut builder: crate::operation::create_keyspace::builders::CreateKeyspaceOutputBuilder,
) -> crate::operation::create_keyspace::builders::CreateKeyspaceOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_table_output_correct_errors(
    mut builder: crate::operation::create_table::builders::CreateTableOutputBuilder,
) -> crate::operation::create_table::builders::CreateTableOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_keyspace_output_correct_errors(
    mut builder: crate::operation::get_keyspace::builders::GetKeyspaceOutputBuilder,
) -> crate::operation::get_keyspace::builders::GetKeyspaceOutputBuilder {
    if builder.keyspace_name.is_none() {
        builder.keyspace_name = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.replication_strategy.is_none() {
        builder.replication_strategy = "no value was set".parse::<crate::types::Rs>().ok()
    }
    builder
}

pub(crate) fn get_table_output_correct_errors(
    mut builder: crate::operation::get_table::builders::GetTableOutputBuilder,
) -> crate::operation::get_table::builders::GetTableOutputBuilder {
    if builder.keyspace_name.is_none() {
        builder.keyspace_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_keyspaces_output_correct_errors(
    mut builder: crate::operation::list_keyspaces::builders::ListKeyspacesOutputBuilder,
) -> crate::operation::list_keyspaces::builders::ListKeyspacesOutputBuilder {
    if builder.keyspaces.is_none() {
        builder.keyspaces = Some(Default::default())
    }
    builder
}

pub(crate) fn restore_table_output_correct_errors(
    mut builder: crate::operation::restore_table::builders::RestoreTableOutputBuilder,
) -> crate::operation::restore_table::builders::RestoreTableOutputBuilder {
    if builder.restored_table_arn.is_none() {
        builder.restored_table_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn update_table_output_correct_errors(
    mut builder: crate::operation::update_table::builders::UpdateTableOutputBuilder,
) -> crate::operation::update_table::builders::UpdateTableOutputBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn capacity_specification_summary_correct_errors(
    mut builder: crate::types::builders::CapacitySpecificationSummaryBuilder,
) -> crate::types::builders::CapacitySpecificationSummaryBuilder {
    if builder.throughput_mode.is_none() {
        builder.throughput_mode = "no value was set".parse::<crate::types::ThroughputMode>().ok()
    }
    builder
}

pub(crate) fn client_side_timestamps_correct_errors(
    mut builder: crate::types::builders::ClientSideTimestampsBuilder,
) -> crate::types::builders::ClientSideTimestampsBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ClientSideTimestampsStatus>().ok()
    }
    builder
}

pub(crate) fn comment_correct_errors(mut builder: crate::types::builders::CommentBuilder) -> crate::types::builders::CommentBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_specification_correct_errors(
    mut builder: crate::types::builders::EncryptionSpecificationBuilder,
) -> crate::types::builders::EncryptionSpecificationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::EncryptionType>().ok()
    }
    builder
}

pub(crate) fn point_in_time_recovery_summary_correct_errors(
    mut builder: crate::types::builders::PointInTimeRecoverySummaryBuilder,
) -> crate::types::builders::PointInTimeRecoverySummaryBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PointInTimeRecoveryStatus>().ok()
    }
    builder
}

pub(crate) fn schema_definition_correct_errors(
    mut builder: crate::types::builders::SchemaDefinitionBuilder,
) -> crate::types::builders::SchemaDefinitionBuilder {
    if builder.all_columns.is_none() {
        builder.all_columns = Some(Default::default())
    }
    if builder.partition_keys.is_none() {
        builder.partition_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn time_to_live_correct_errors(mut builder: crate::types::builders::TimeToLiveBuilder) -> crate::types::builders::TimeToLiveBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::TimeToLiveStatus>().ok()
    }
    builder
}

pub(crate) fn keyspace_summary_correct_errors(
    mut builder: crate::types::builders::KeyspaceSummaryBuilder,
) -> crate::types::builders::KeyspaceSummaryBuilder {
    if builder.keyspace_name.is_none() {
        builder.keyspace_name = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.replication_strategy.is_none() {
        builder.replication_strategy = "no value was set".parse::<crate::types::Rs>().ok()
    }
    builder
}

pub(crate) fn table_summary_correct_errors(mut builder: crate::types::builders::TableSummaryBuilder) -> crate::types::builders::TableSummaryBuilder {
    if builder.keyspace_name.is_none() {
        builder.keyspace_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn clustering_key_correct_errors(
    mut builder: crate::types::builders::ClusteringKeyBuilder,
) -> crate::types::builders::ClusteringKeyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.order_by.is_none() {
        builder.order_by = "no value was set".parse::<crate::types::SortOrder>().ok()
    }
    builder
}

pub(crate) fn column_definition_correct_errors(
    mut builder: crate::types::builders::ColumnDefinitionBuilder,
) -> crate::types::builders::ColumnDefinitionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn partition_key_correct_errors(mut builder: crate::types::builders::PartitionKeyBuilder) -> crate::types::builders::PartitionKeyBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn static_column_correct_errors(mut builder: crate::types::builders::StaticColumnBuilder) -> crate::types::builders::StaticColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
