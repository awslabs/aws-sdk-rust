// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The optional clustering column portion of your primary key determines how the data is clustered and sorted within each partition.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ClusteringKey {
    /// <p>The name(s) of the clustering column(s).</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    #[doc(hidden)]
    pub order_by: std::option::Option<crate::types::SortOrder>,
}
impl ClusteringKey {
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn order_by(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.order_by.as_ref()
    }
}
impl ClusteringKey {
    /// Creates a new builder-style object to manufacture [`ClusteringKey`](crate::types::ClusteringKey).
    pub fn builder() -> crate::types::builders::ClusteringKeyBuilder {
        crate::types::builders::ClusteringKeyBuilder::default()
    }
}

/// A builder for [`ClusteringKey`](crate::types::ClusteringKey).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ClusteringKeyBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) order_by: std::option::Option<crate::types::SortOrder>,
}
impl ClusteringKeyBuilder {
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn order_by(mut self, input: crate::types::SortOrder) -> Self {
        self.order_by = Some(input);
        self
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn set_order_by(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.order_by = input;
        self
    }
    /// Consumes the builder and constructs a [`ClusteringKey`](crate::types::ClusteringKey).
    pub fn build(self) -> crate::types::ClusteringKey {
        crate::types::ClusteringKey {
            name: self.name,
            order_by: self.order_by,
        }
    }
}
