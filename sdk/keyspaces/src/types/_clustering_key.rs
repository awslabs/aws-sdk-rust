// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The optional clustering column portion of your primary key determines how the data is clustered and sorted within each partition.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusteringKey {
    /// <p>The name(s) of the clustering column(s).</p>
    pub name: ::std::string::String,
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub order_by: crate::types::SortOrder,
}
impl ClusteringKey {
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn order_by(&self) -> &crate::types::SortOrder {
        &self.order_by
    }
}
impl ClusteringKey {
    /// Creates a new builder-style object to manufacture [`ClusteringKey`](crate::types::ClusteringKey).
    pub fn builder() -> crate::types::builders::ClusteringKeyBuilder {
        crate::types::builders::ClusteringKeyBuilder::default()
    }
}

/// A builder for [`ClusteringKey`](crate::types::ClusteringKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusteringKeyBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) order_by: ::std::option::Option<crate::types::SortOrder>,
}
impl ClusteringKeyBuilder {
    /// <p>The name(s) of the clustering column(s).</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name(s) of the clustering column(s).</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    /// This field is required.
    pub fn order_by(mut self, input: crate::types::SortOrder) -> Self {
        self.order_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn set_order_by(mut self, input: ::std::option::Option<crate::types::SortOrder>) -> Self {
        self.order_by = input;
        self
    }
    /// <p>Sets the ascendant (<code>ASC</code>) or descendant (<code>DESC</code>) order modifier.</p>
    pub fn get_order_by(&self) -> &::std::option::Option<crate::types::SortOrder> {
        &self.order_by
    }
    /// Consumes the builder and constructs a [`ClusteringKey`](crate::types::ClusteringKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ClusteringKeyBuilder::name)
    /// - [`order_by`](crate::types::builders::ClusteringKeyBuilder::order_by)
    pub fn build(self) -> ::std::result::Result<crate::types::ClusteringKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ClusteringKey {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ClusteringKey",
                )
            })?,
            order_by: self.order_by.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "order_by",
                    "order_by was not specified but it is required when building ClusteringKey",
                )
            })?,
        })
    }
}
