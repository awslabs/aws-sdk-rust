// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateTableOutput {
    /// <p>The Amazon Resource Name (ARN) of the modified table.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateTableOutput {
    /// <p>The Amazon Resource Name (ARN) of the modified table.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateTableOutput {
    /// Creates a new builder-style object to manufacture [`UpdateTableOutput`](crate::output::UpdateTableOutput).
    pub fn builder() -> crate::output::update_table_output::Builder {
        crate::output::update_table_output::Builder::default()
    }
}

/// See [`UpdateTableOutput`](crate::output::UpdateTableOutput).
pub mod update_table_output {

    /// A builder for [`UpdateTableOutput`](crate::output::UpdateTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the modified table.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the modified table.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateTableOutput`](crate::output::UpdateTableOutput).
        pub fn build(self) -> crate::output::UpdateTableOutput {
            crate::output::UpdateTableOutput {
                resource_arn: self.resource_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RestoreTableOutput {
    /// <p>The Amazon Resource Name (ARN) of the restored table.</p>
    #[doc(hidden)]
    pub restored_table_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RestoreTableOutput {
    /// <p>The Amazon Resource Name (ARN) of the restored table.</p>
    pub fn restored_table_arn(&self) -> std::option::Option<&str> {
        self.restored_table_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for RestoreTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RestoreTableOutput {
    /// Creates a new builder-style object to manufacture [`RestoreTableOutput`](crate::output::RestoreTableOutput).
    pub fn builder() -> crate::output::restore_table_output::Builder {
        crate::output::restore_table_output::Builder::default()
    }
}

/// See [`RestoreTableOutput`](crate::output::RestoreTableOutput).
pub mod restore_table_output {

    /// A builder for [`RestoreTableOutput`](crate::output::RestoreTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) restored_table_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the restored table.</p>
        pub fn restored_table_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.restored_table_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the restored table.</p>
        pub fn set_restored_table_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.restored_table_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RestoreTableOutput`](crate::output::RestoreTableOutput).
        pub fn build(self) -> crate::output::RestoreTableOutput {
            crate::output::RestoreTableOutput {
                restored_table_arn: self.restored_table_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of tags.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of tags.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of tags.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTablesOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of tables.</p>
    #[doc(hidden)]
    pub tables: std::option::Option<std::vec::Vec<crate::model::TableSummary>>,
    _request_id: Option<String>,
}
impl ListTablesOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of tables.</p>
    pub fn tables(&self) -> std::option::Option<&[crate::model::TableSummary]> {
        self.tables.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTablesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTablesOutput {
    /// Creates a new builder-style object to manufacture [`ListTablesOutput`](crate::output::ListTablesOutput).
    pub fn builder() -> crate::output::list_tables_output::Builder {
        crate::output::list_tables_output::Builder::default()
    }
}

/// See [`ListTablesOutput`](crate::output::ListTablesOutput).
pub mod list_tables_output {

    /// A builder for [`ListTablesOutput`](crate::output::ListTablesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tables: std::option::Option<std::vec::Vec<crate::model::TableSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `tables`.
        ///
        /// To override the contents of this collection use [`set_tables`](Self::set_tables).
        ///
        /// <p>A list of tables.</p>
        pub fn tables(mut self, input: crate::model::TableSummary) -> Self {
            let mut v = self.tables.unwrap_or_default();
            v.push(input);
            self.tables = Some(v);
            self
        }
        /// <p>A list of tables.</p>
        pub fn set_tables(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TableSummary>>,
        ) -> Self {
            self.tables = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTablesOutput`](crate::output::ListTablesOutput).
        pub fn build(self) -> crate::output::ListTablesOutput {
            crate::output::ListTablesOutput {
                next_token: self.next_token,
                tables: self.tables,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListKeyspacesOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A list of keyspaces.</p>
    #[doc(hidden)]
    pub keyspaces: std::option::Option<std::vec::Vec<crate::model::KeyspaceSummary>>,
    _request_id: Option<String>,
}
impl ListKeyspacesOutput {
    /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A list of keyspaces.</p>
    pub fn keyspaces(&self) -> std::option::Option<&[crate::model::KeyspaceSummary]> {
        self.keyspaces.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListKeyspacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListKeyspacesOutput {
    /// Creates a new builder-style object to manufacture [`ListKeyspacesOutput`](crate::output::ListKeyspacesOutput).
    pub fn builder() -> crate::output::list_keyspaces_output::Builder {
        crate::output::list_keyspaces_output::Builder::default()
    }
}

/// See [`ListKeyspacesOutput`](crate::output::ListKeyspacesOutput).
pub mod list_keyspaces_output {

    /// A builder for [`ListKeyspacesOutput`](crate::output::ListKeyspacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) keyspaces: std::option::Option<std::vec::Vec<crate::model::KeyspaceSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>A token to specify where to start paginating. This is the <code>NextToken</code> from a previously truncated response.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `keyspaces`.
        ///
        /// To override the contents of this collection use [`set_keyspaces`](Self::set_keyspaces).
        ///
        /// <p>A list of keyspaces.</p>
        pub fn keyspaces(mut self, input: crate::model::KeyspaceSummary) -> Self {
            let mut v = self.keyspaces.unwrap_or_default();
            v.push(input);
            self.keyspaces = Some(v);
            self
        }
        /// <p>A list of keyspaces.</p>
        pub fn set_keyspaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::KeyspaceSummary>>,
        ) -> Self {
            self.keyspaces = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListKeyspacesOutput`](crate::output::ListKeyspacesOutput).
        pub fn build(self) -> crate::output::ListKeyspacesOutput {
            crate::output::ListKeyspacesOutput {
                next_token: self.next_token,
                keyspaces: self.keyspaces,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTableOutput {
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    #[doc(hidden)]
    pub keyspace_name: std::option::Option<std::string::String>,
    /// <p>The name of the specified table.</p>
    #[doc(hidden)]
    pub table_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>The creation timestamp of the specified table.</p>
    #[doc(hidden)]
    pub creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current status of the specified table.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::TableStatus>,
    /// <p>The schema definition of the specified table.</p>
    #[doc(hidden)]
    pub schema_definition: std::option::Option<crate::model::SchemaDefinition>,
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> </p>
    #[doc(hidden)]
    pub capacity_specification: std::option::Option<crate::model::CapacitySpecificationSummary>,
    /// <p>The encryption settings of the specified table.</p>
    #[doc(hidden)]
    pub encryption_specification: std::option::Option<crate::model::EncryptionSpecification>,
    /// <p>The point-in-time recovery status of the specified table.</p>
    #[doc(hidden)]
    pub point_in_time_recovery: std::option::Option<crate::model::PointInTimeRecoverySummary>,
    /// <p>The custom Time to Live settings of the specified table.</p>
    #[doc(hidden)]
    pub ttl: std::option::Option<crate::model::TimeToLive>,
    /// <p>The default Time to Live settings of the specified table.</p>
    #[doc(hidden)]
    pub default_time_to_live: std::option::Option<i32>,
    /// <p>The the description of the specified table.</p>
    #[doc(hidden)]
    pub comment: std::option::Option<crate::model::Comment>,
    _request_id: Option<String>,
}
impl GetTableOutput {
    /// <p>The name of the keyspace that the specified table is stored in.</p>
    pub fn keyspace_name(&self) -> std::option::Option<&str> {
        self.keyspace_name.as_deref()
    }
    /// <p>The name of the specified table.</p>
    pub fn table_name(&self) -> std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The creation timestamp of the specified table.</p>
    pub fn creation_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_timestamp.as_ref()
    }
    /// <p>The current status of the specified table.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::TableStatus> {
        self.status.as_ref()
    }
    /// <p>The schema definition of the specified table.</p>
    pub fn schema_definition(&self) -> std::option::Option<&crate::model::SchemaDefinition> {
        self.schema_definition.as_ref()
    }
    /// <p>The read/write throughput capacity mode for a table. The options are:</p>
    /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
    /// <p>• <code>throughputMode:PROVISIONED</code> </p>
    pub fn capacity_specification(
        &self,
    ) -> std::option::Option<&crate::model::CapacitySpecificationSummary> {
        self.capacity_specification.as_ref()
    }
    /// <p>The encryption settings of the specified table.</p>
    pub fn encryption_specification(
        &self,
    ) -> std::option::Option<&crate::model::EncryptionSpecification> {
        self.encryption_specification.as_ref()
    }
    /// <p>The point-in-time recovery status of the specified table.</p>
    pub fn point_in_time_recovery(
        &self,
    ) -> std::option::Option<&crate::model::PointInTimeRecoverySummary> {
        self.point_in_time_recovery.as_ref()
    }
    /// <p>The custom Time to Live settings of the specified table.</p>
    pub fn ttl(&self) -> std::option::Option<&crate::model::TimeToLive> {
        self.ttl.as_ref()
    }
    /// <p>The default Time to Live settings of the specified table.</p>
    pub fn default_time_to_live(&self) -> std::option::Option<i32> {
        self.default_time_to_live
    }
    /// <p>The the description of the specified table.</p>
    pub fn comment(&self) -> std::option::Option<&crate::model::Comment> {
        self.comment.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTableOutput {
    /// Creates a new builder-style object to manufacture [`GetTableOutput`](crate::output::GetTableOutput).
    pub fn builder() -> crate::output::get_table_output::Builder {
        crate::output::get_table_output::Builder::default()
    }
}

/// See [`GetTableOutput`](crate::output::GetTableOutput).
pub mod get_table_output {

    /// A builder for [`GetTableOutput`](crate::output::GetTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) keyspace_name: std::option::Option<std::string::String>,
        pub(crate) table_name: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) creation_timestamp: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) status: std::option::Option<crate::model::TableStatus>,
        pub(crate) schema_definition: std::option::Option<crate::model::SchemaDefinition>,
        pub(crate) capacity_specification:
            std::option::Option<crate::model::CapacitySpecificationSummary>,
        pub(crate) encryption_specification:
            std::option::Option<crate::model::EncryptionSpecification>,
        pub(crate) point_in_time_recovery:
            std::option::Option<crate::model::PointInTimeRecoverySummary>,
        pub(crate) ttl: std::option::Option<crate::model::TimeToLive>,
        pub(crate) default_time_to_live: std::option::Option<i32>,
        pub(crate) comment: std::option::Option<crate::model::Comment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the keyspace that the specified table is stored in.</p>
        pub fn keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.keyspace_name = Some(input.into());
            self
        }
        /// <p>The name of the keyspace that the specified table is stored in.</p>
        pub fn set_keyspace_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.keyspace_name = input;
            self
        }
        /// <p>The name of the specified table.</p>
        pub fn table_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.table_name = Some(input.into());
            self
        }
        /// <p>The name of the specified table.</p>
        pub fn set_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.table_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified table.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>The creation timestamp of the specified table.</p>
        pub fn creation_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_timestamp = Some(input);
            self
        }
        /// <p>The creation timestamp of the specified table.</p>
        pub fn set_creation_timestamp(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_timestamp = input;
            self
        }
        /// <p>The current status of the specified table.</p>
        pub fn status(mut self, input: crate::model::TableStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>The current status of the specified table.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::TableStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>The schema definition of the specified table.</p>
        pub fn schema_definition(mut self, input: crate::model::SchemaDefinition) -> Self {
            self.schema_definition = Some(input);
            self
        }
        /// <p>The schema definition of the specified table.</p>
        pub fn set_schema_definition(
            mut self,
            input: std::option::Option<crate::model::SchemaDefinition>,
        ) -> Self {
            self.schema_definition = input;
            self
        }
        /// <p>The read/write throughput capacity mode for a table. The options are:</p>
        /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
        /// <p>• <code>throughputMode:PROVISIONED</code> </p>
        pub fn capacity_specification(
            mut self,
            input: crate::model::CapacitySpecificationSummary,
        ) -> Self {
            self.capacity_specification = Some(input);
            self
        }
        /// <p>The read/write throughput capacity mode for a table. The options are:</p>
        /// <p>• <code>throughputMode:PAY_PER_REQUEST</code> </p>
        /// <p>• <code>throughputMode:PROVISIONED</code> </p>
        pub fn set_capacity_specification(
            mut self,
            input: std::option::Option<crate::model::CapacitySpecificationSummary>,
        ) -> Self {
            self.capacity_specification = input;
            self
        }
        /// <p>The encryption settings of the specified table.</p>
        pub fn encryption_specification(
            mut self,
            input: crate::model::EncryptionSpecification,
        ) -> Self {
            self.encryption_specification = Some(input);
            self
        }
        /// <p>The encryption settings of the specified table.</p>
        pub fn set_encryption_specification(
            mut self,
            input: std::option::Option<crate::model::EncryptionSpecification>,
        ) -> Self {
            self.encryption_specification = input;
            self
        }
        /// <p>The point-in-time recovery status of the specified table.</p>
        pub fn point_in_time_recovery(
            mut self,
            input: crate::model::PointInTimeRecoverySummary,
        ) -> Self {
            self.point_in_time_recovery = Some(input);
            self
        }
        /// <p>The point-in-time recovery status of the specified table.</p>
        pub fn set_point_in_time_recovery(
            mut self,
            input: std::option::Option<crate::model::PointInTimeRecoverySummary>,
        ) -> Self {
            self.point_in_time_recovery = input;
            self
        }
        /// <p>The custom Time to Live settings of the specified table.</p>
        pub fn ttl(mut self, input: crate::model::TimeToLive) -> Self {
            self.ttl = Some(input);
            self
        }
        /// <p>The custom Time to Live settings of the specified table.</p>
        pub fn set_ttl(mut self, input: std::option::Option<crate::model::TimeToLive>) -> Self {
            self.ttl = input;
            self
        }
        /// <p>The default Time to Live settings of the specified table.</p>
        pub fn default_time_to_live(mut self, input: i32) -> Self {
            self.default_time_to_live = Some(input);
            self
        }
        /// <p>The default Time to Live settings of the specified table.</p>
        pub fn set_default_time_to_live(mut self, input: std::option::Option<i32>) -> Self {
            self.default_time_to_live = input;
            self
        }
        /// <p>The the description of the specified table.</p>
        pub fn comment(mut self, input: crate::model::Comment) -> Self {
            self.comment = Some(input);
            self
        }
        /// <p>The the description of the specified table.</p>
        pub fn set_comment(mut self, input: std::option::Option<crate::model::Comment>) -> Self {
            self.comment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetTableOutput`](crate::output::GetTableOutput).
        pub fn build(self) -> crate::output::GetTableOutput {
            crate::output::GetTableOutput {
                keyspace_name: self.keyspace_name,
                table_name: self.table_name,
                resource_arn: self.resource_arn,
                creation_timestamp: self.creation_timestamp,
                status: self.status,
                schema_definition: self.schema_definition,
                capacity_specification: self.capacity_specification,
                encryption_specification: self.encryption_specification,
                point_in_time_recovery: self.point_in_time_recovery,
                ttl: self.ttl,
                default_time_to_live: self.default_time_to_live,
                comment: self.comment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetKeyspaceOutput {
    /// <p>The name of the keyspace.</p>
    #[doc(hidden)]
    pub keyspace_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the keyspace.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetKeyspaceOutput {
    /// <p>The name of the keyspace.</p>
    pub fn keyspace_name(&self) -> std::option::Option<&str> {
        self.keyspace_name.as_deref()
    }
    /// <p>The ARN of the keyspace.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetKeyspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKeyspaceOutput {
    /// Creates a new builder-style object to manufacture [`GetKeyspaceOutput`](crate::output::GetKeyspaceOutput).
    pub fn builder() -> crate::output::get_keyspace_output::Builder {
        crate::output::get_keyspace_output::Builder::default()
    }
}

/// See [`GetKeyspaceOutput`](crate::output::GetKeyspaceOutput).
pub mod get_keyspace_output {

    /// A builder for [`GetKeyspaceOutput`](crate::output::GetKeyspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) keyspace_name: std::option::Option<std::string::String>,
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the keyspace.</p>
        pub fn keyspace_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.keyspace_name = Some(input.into());
            self
        }
        /// <p>The name of the keyspace.</p>
        pub fn set_keyspace_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.keyspace_name = input;
            self
        }
        /// <p>The ARN of the keyspace.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the keyspace.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetKeyspaceOutput`](crate::output::GetKeyspaceOutput).
        pub fn build(self) -> crate::output::GetKeyspaceOutput {
            crate::output::GetKeyspaceOutput {
                keyspace_name: self.keyspace_name,
                resource_arn: self.resource_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTableOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteTableOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTableOutput`](crate::output::DeleteTableOutput).
    pub fn builder() -> crate::output::delete_table_output::Builder {
        crate::output::delete_table_output::Builder::default()
    }
}

/// See [`DeleteTableOutput`](crate::output::DeleteTableOutput).
pub mod delete_table_output {

    /// A builder for [`DeleteTableOutput`](crate::output::DeleteTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteTableOutput`](crate::output::DeleteTableOutput).
        pub fn build(self) -> crate::output::DeleteTableOutput {
            crate::output::DeleteTableOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteKeyspaceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteKeyspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteKeyspaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteKeyspaceOutput`](crate::output::DeleteKeyspaceOutput).
    pub fn builder() -> crate::output::delete_keyspace_output::Builder {
        crate::output::delete_keyspace_output::Builder::default()
    }
}

/// See [`DeleteKeyspaceOutput`](crate::output::DeleteKeyspaceOutput).
pub mod delete_keyspace_output {

    /// A builder for [`DeleteKeyspaceOutput`](crate::output::DeleteKeyspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteKeyspaceOutput`](crate::output::DeleteKeyspaceOutput).
        pub fn build(self) -> crate::output::DeleteKeyspaceOutput {
            crate::output::DeleteKeyspaceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTableOutput {
    /// <p>The unique identifier of the table in the format of an Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateTableOutput {
    /// <p>The unique identifier of the table in the format of an Amazon Resource Name (ARN).</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateTableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateTableOutput {
    /// Creates a new builder-style object to manufacture [`CreateTableOutput`](crate::output::CreateTableOutput).
    pub fn builder() -> crate::output::create_table_output::Builder {
        crate::output::create_table_output::Builder::default()
    }
}

/// See [`CreateTableOutput`](crate::output::CreateTableOutput).
pub mod create_table_output {

    /// A builder for [`CreateTableOutput`](crate::output::CreateTableOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier of the table in the format of an Amazon Resource Name (ARN).</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The unique identifier of the table in the format of an Amazon Resource Name (ARN).</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateTableOutput`](crate::output::CreateTableOutput).
        pub fn build(self) -> crate::output::CreateTableOutput {
            crate::output::CreateTableOutput {
                resource_arn: self.resource_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateKeyspaceOutput {
    /// <p>The unique identifier of the keyspace in the format of an Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateKeyspaceOutput {
    /// <p>The unique identifier of the keyspace in the format of an Amazon Resource Name (ARN).</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateKeyspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateKeyspaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateKeyspaceOutput`](crate::output::CreateKeyspaceOutput).
    pub fn builder() -> crate::output::create_keyspace_output::Builder {
        crate::output::create_keyspace_output::Builder::default()
    }
}

/// See [`CreateKeyspaceOutput`](crate::output::CreateKeyspaceOutput).
pub mod create_keyspace_output {

    /// A builder for [`CreateKeyspaceOutput`](crate::output::CreateKeyspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique identifier of the keyspace in the format of an Amazon Resource Name (ARN).</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        /// <p>The unique identifier of the keyspace in the format of an Amazon Resource Name (ARN).</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateKeyspaceOutput`](crate::output::CreateKeyspaceOutput).
        pub fn build(self) -> crate::output::CreateKeyspaceOutput {
            crate::output::CreateKeyspaceOutput {
                resource_arn: self.resource_arn,
                _request_id: self._request_id,
            }
        }
    }
}
