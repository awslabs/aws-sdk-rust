// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_accepted_term<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AcceptedTerm>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "legalTerm" => Some(crate::types::AcceptedTerm::LegalTerm(
                            crate::protocol_serde::shape_legal_term::de_legal_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'legalTerm' cannot be null")
                            })?,
                        )),
                        "supportTerm" => Some(crate::types::AcceptedTerm::SupportTerm(
                            crate::protocol_serde::shape_support_term::de_support_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'supportTerm' cannot be null")
                            })?,
                        )),
                        "renewalTerm" => Some(crate::types::AcceptedTerm::RenewalTerm(
                            crate::protocol_serde::shape_renewal_term::de_renewal_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'renewalTerm' cannot be null")
                            })?,
                        )),
                        "usageBasedPricingTerm" => Some(crate::types::AcceptedTerm::UsageBasedPricingTerm(
                            crate::protocol_serde::shape_usage_based_pricing_term::de_usage_based_pricing_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'usageBasedPricingTerm' cannot be null")
                            })?,
                        )),
                        "configurableUpfrontPricingTerm" => Some(crate::types::AcceptedTerm::ConfigurableUpfrontPricingTerm(
                            crate::protocol_serde::shape_configurable_upfront_pricing_term::de_configurable_upfront_pricing_term(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom(
                                        "value for 'configurableUpfrontPricingTerm' cannot be null",
                                    )
                                })?,
                        )),
                        "byolPricingTerm" => Some(crate::types::AcceptedTerm::ByolPricingTerm(
                            crate::protocol_serde::shape_byol_pricing_term::de_byol_pricing_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'byolPricingTerm' cannot be null")
                            })?,
                        )),
                        "recurringPaymentTerm" => Some(crate::types::AcceptedTerm::RecurringPaymentTerm(
                            crate::protocol_serde::shape_recurring_payment_term::de_recurring_payment_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'recurringPaymentTerm' cannot be null")
                            })?,
                        )),
                        "validityTerm" => Some(crate::types::AcceptedTerm::ValidityTerm(
                            crate::protocol_serde::shape_validity_term::de_validity_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'validityTerm' cannot be null")
                            })?,
                        )),
                        "paymentScheduleTerm" => Some(crate::types::AcceptedTerm::PaymentScheduleTerm(
                            crate::protocol_serde::shape_payment_schedule_term::de_payment_schedule_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'paymentScheduleTerm' cannot be null")
                            })?,
                        )),
                        "freeTrialPricingTerm" => Some(crate::types::AcceptedTerm::FreeTrialPricingTerm(
                            crate::protocol_serde::shape_free_trial_pricing_term::de_free_trial_pricing_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'freeTrialPricingTerm' cannot be null")
                            })?,
                        )),
                        "fixedUpfrontPricingTerm" => Some(crate::types::AcceptedTerm::FixedUpfrontPricingTerm(
                            crate::protocol_serde::shape_fixed_upfront_pricing_term::de_fixed_upfront_pricing_term(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'fixedUpfrontPricingTerm' cannot be null")
                            })?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::AcceptedTerm::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
