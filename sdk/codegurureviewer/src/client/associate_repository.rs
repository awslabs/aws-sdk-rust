// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateRepository`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository(Repository)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::repository) / [`set_repository(Option<Repository>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::set_repository): <p>The repository to associate.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::set_client_request_token): <p>Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::set_tags): <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>  <ul>   <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>   <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>  </ul>
    ///   - [`kms_key_details(KmsKeyDetails)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::kms_key_details) / [`set_kms_key_details(Option<KmsKeyDetails>)`](crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::set_kms_key_details): <p>A <code>KMSKeyDetails</code> object that contains:</p>  <ul>   <li> <p>The encryption option for this repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (<code>AWS_OWNED_CMK</code>) or customer managed (<code>CUSTOMER_MANAGED_CMK</code>).</p> </li>   <li> <p>The ID of the Amazon Web Services KMS key that is associated with this repository association.</p> </li>  </ul>
    /// - On success, responds with [`AssociateRepositoryOutput`](crate::operation::associate_repository::AssociateRepositoryOutput) with field(s):
    ///   - [`repository_association(Option<RepositoryAssociation>)`](crate::operation::associate_repository::AssociateRepositoryOutput::repository_association): <p>Information about the repository association.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::operation::associate_repository::AssociateRepositoryOutput::tags): <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>  <ul>   <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>   <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<AssociateRepositoryError>`](crate::operation::associate_repository::AssociateRepositoryError)
    pub fn associate_repository(
        &self,
    ) -> crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder {
        crate::operation::associate_repository::builders::AssociateRepositoryFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
