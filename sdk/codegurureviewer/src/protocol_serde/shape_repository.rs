// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_repository(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Repository,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.code_commit {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CodeCommit").start_object();
        crate::protocol_serde::shape_code_commit_repository::ser_code_commit_repository(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.bitbucket {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Bitbucket").start_object();
        crate::protocol_serde::shape_third_party_source_repository::ser_third_party_source_repository(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.git_hub_enterprise_server {
        #[allow(unused_mut)]
        let mut object_6 = object.key("GitHubEnterpriseServer").start_object();
        crate::protocol_serde::shape_third_party_source_repository::ser_third_party_source_repository(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.s3_bucket {
        #[allow(unused_mut)]
        let mut object_8 = object.key("S3Bucket").start_object();
        crate::protocol_serde::shape_s3_repository::ser_s3_repository(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
