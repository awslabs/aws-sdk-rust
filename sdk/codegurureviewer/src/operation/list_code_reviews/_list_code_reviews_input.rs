// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListCodeReviewsInput {
    /// <p>List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub.</p>
    pub provider_types: ::std::option::Option<::std::vec::Vec<crate::types::ProviderType>>,
    /// <p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p>
    /// <p>The valid code review states are:</p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The code review is complete.</p> </li>
    /// <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li>
    /// <li> <p> <code>Failed</code>: The code review failed.</p> </li>
    /// <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li>
    /// </ul>
    pub states: ::std::option::Option<::std::vec::Vec<crate::types::JobState>>,
    /// <p>List of repository names for filtering that needs to be applied before displaying the result.</p>
    pub repository_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type of code reviews to list in the response.</p>
    pub r#type: ::std::option::Option<crate::types::Type>,
    /// <p>The maximum number of results that are returned per call. The default is 100.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListCodeReviewsInput {
    /// <p>List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.provider_types.is_none()`.
    pub fn provider_types(&self) -> &[crate::types::ProviderType] {
        self.provider_types.as_deref().unwrap_or_default()
    }
    /// <p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p>
    /// <p>The valid code review states are:</p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The code review is complete.</p> </li>
    /// <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li>
    /// <li> <p> <code>Failed</code>: The code review failed.</p> </li>
    /// <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.states.is_none()`.
    pub fn states(&self) -> &[crate::types::JobState] {
        self.states.as_deref().unwrap_or_default()
    }
    /// <p>List of repository names for filtering that needs to be applied before displaying the result.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.repository_names.is_none()`.
    pub fn repository_names(&self) -> &[::std::string::String] {
        self.repository_names.as_deref().unwrap_or_default()
    }
    /// <p>The type of code reviews to list in the response.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
    /// <p>The maximum number of results that are returned per call. The default is 100.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListCodeReviewsInput {
    /// Creates a new builder-style object to manufacture [`ListCodeReviewsInput`](crate::operation::list_code_reviews::ListCodeReviewsInput).
    pub fn builder() -> crate::operation::list_code_reviews::builders::ListCodeReviewsInputBuilder {
        crate::operation::list_code_reviews::builders::ListCodeReviewsInputBuilder::default()
    }
}

/// A builder for [`ListCodeReviewsInput`](crate::operation::list_code_reviews::ListCodeReviewsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListCodeReviewsInputBuilder {
    pub(crate) provider_types: ::std::option::Option<::std::vec::Vec<crate::types::ProviderType>>,
    pub(crate) states: ::std::option::Option<::std::vec::Vec<crate::types::JobState>>,
    pub(crate) repository_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListCodeReviewsInputBuilder {
    /// Appends an item to `provider_types`.
    ///
    /// To override the contents of this collection use [`set_provider_types`](Self::set_provider_types).
    ///
    /// <p>List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub.</p>
    pub fn provider_types(mut self, input: crate::types::ProviderType) -> Self {
        let mut v = self.provider_types.unwrap_or_default();
        v.push(input);
        self.provider_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub.</p>
    pub fn set_provider_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProviderType>>) -> Self {
        self.provider_types = input;
        self
    }
    /// <p>List of provider types for filtering that needs to be applied before displaying the result. For example, <code>providerTypes=[GitHub]</code> lists code reviews from GitHub.</p>
    pub fn get_provider_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProviderType>> {
        &self.provider_types
    }
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p>
    /// <p>The valid code review states are:</p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The code review is complete.</p> </li>
    /// <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li>
    /// <li> <p> <code>Failed</code>: The code review failed.</p> </li>
    /// <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li>
    /// </ul>
    pub fn states(mut self, input: crate::types::JobState) -> Self {
        let mut v = self.states.unwrap_or_default();
        v.push(input);
        self.states = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p>
    /// <p>The valid code review states are:</p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The code review is complete.</p> </li>
    /// <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li>
    /// <li> <p> <code>Failed</code>: The code review failed.</p> </li>
    /// <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li>
    /// </ul>
    pub fn set_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JobState>>) -> Self {
        self.states = input;
        self
    }
    /// <p>List of states for filtering that needs to be applied before displaying the result. For example, <code>states=[Pending]</code> lists code reviews in the Pending state.</p>
    /// <p>The valid code review states are:</p>
    /// <ul>
    /// <li> <p> <code>Completed</code>: The code review is complete.</p> </li>
    /// <li> <p> <code>Pending</code>: The code review started and has not completed or failed.</p> </li>
    /// <li> <p> <code>Failed</code>: The code review failed.</p> </li>
    /// <li> <p> <code>Deleting</code>: The code review is being deleted.</p> </li>
    /// </ul>
    pub fn get_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JobState>> {
        &self.states
    }
    /// Appends an item to `repository_names`.
    ///
    /// To override the contents of this collection use [`set_repository_names`](Self::set_repository_names).
    ///
    /// <p>List of repository names for filtering that needs to be applied before displaying the result.</p>
    pub fn repository_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.repository_names.unwrap_or_default();
        v.push(input.into());
        self.repository_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of repository names for filtering that needs to be applied before displaying the result.</p>
    pub fn set_repository_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.repository_names = input;
        self
    }
    /// <p>List of repository names for filtering that needs to be applied before displaying the result.</p>
    pub fn get_repository_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.repository_names
    }
    /// <p>The type of code reviews to list in the response.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of code reviews to list in the response.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of code reviews to list in the response.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// <p>The maximum number of results that are returned per call. The default is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results that are returned per call. The default is 100.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results that are returned per call. The default is 100.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListCodeReviewsInput`](crate::operation::list_code_reviews::ListCodeReviewsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_code_reviews::ListCodeReviewsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_code_reviews::ListCodeReviewsInput {
            provider_types: self.provider_types,
            states: self.states,
            repository_names: self.repository_names,
            r#type: self.r#type,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
