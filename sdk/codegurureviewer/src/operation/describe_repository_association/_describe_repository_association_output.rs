// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeRepositoryAssociationOutput {
    /// <p>Information about the repository association.</p>
    #[doc(hidden)]
    pub repository_association: std::option::Option<crate::types::RepositoryAssociation>,
    /// <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>
    /// <ul>
    /// <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>
    /// <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeRepositoryAssociationOutput {
    /// <p>Information about the repository association.</p>
    pub fn repository_association(
        &self,
    ) -> std::option::Option<&crate::types::RepositoryAssociation> {
        self.repository_association.as_ref()
    }
    /// <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>
    /// <ul>
    /// <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>
    /// <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>
    /// </ul>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeRepositoryAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeRepositoryAssociationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeRepositoryAssociationOutput`](crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput).
    pub fn builder() -> crate::operation::describe_repository_association::builders::DescribeRepositoryAssociationOutputBuilder{
        crate::operation::describe_repository_association::builders::DescribeRepositoryAssociationOutputBuilder::default()
    }
}

/// A builder for [`DescribeRepositoryAssociationOutput`](crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeRepositoryAssociationOutputBuilder {
    pub(crate) repository_association: std::option::Option<crate::types::RepositoryAssociation>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeRepositoryAssociationOutputBuilder {
    /// <p>Information about the repository association.</p>
    pub fn repository_association(mut self, input: crate::types::RepositoryAssociation) -> Self {
        self.repository_association = Some(input);
        self
    }
    /// <p>Information about the repository association.</p>
    pub fn set_repository_association(
        mut self,
        input: std::option::Option<crate::types::RepositoryAssociation>,
    ) -> Self {
        self.repository_association = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>
    /// <ul>
    /// <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>
    /// <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>
    /// </ul>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p>
    /// <ul>
    /// <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li>
    /// <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li>
    /// </ul>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeRepositoryAssociationOutput`](crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput
    {
        crate::operation::describe_repository_association::DescribeRepositoryAssociationOutput {
            repository_association: self.repository_association,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
