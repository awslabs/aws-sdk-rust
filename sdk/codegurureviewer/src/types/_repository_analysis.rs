// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A code review type that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN when you call <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RepositoryAnalysis {
    /// <p>A <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType">SourceCodeType</a> that specifies the tip of a branch in an associated repository.</p>
    #[doc(hidden)]
    pub repository_head: std::option::Option<crate::types::RepositoryHeadSourceCodeType>,
    /// <p>Specifies the source code that is analyzed in a code review.</p>
    #[doc(hidden)]
    pub source_code_type: std::option::Option<crate::types::SourceCodeType>,
}
impl RepositoryAnalysis {
    /// <p>A <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType">SourceCodeType</a> that specifies the tip of a branch in an associated repository.</p>
    pub fn repository_head(
        &self,
    ) -> std::option::Option<&crate::types::RepositoryHeadSourceCodeType> {
        self.repository_head.as_ref()
    }
    /// <p>Specifies the source code that is analyzed in a code review.</p>
    pub fn source_code_type(&self) -> std::option::Option<&crate::types::SourceCodeType> {
        self.source_code_type.as_ref()
    }
}
impl RepositoryAnalysis {
    /// Creates a new builder-style object to manufacture [`RepositoryAnalysis`](crate::types::RepositoryAnalysis).
    pub fn builder() -> crate::types::builders::RepositoryAnalysisBuilder {
        crate::types::builders::RepositoryAnalysisBuilder::default()
    }
}

/// A builder for [`RepositoryAnalysis`](crate::types::RepositoryAnalysis).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RepositoryAnalysisBuilder {
    pub(crate) repository_head: std::option::Option<crate::types::RepositoryHeadSourceCodeType>,
    pub(crate) source_code_type: std::option::Option<crate::types::SourceCodeType>,
}
impl RepositoryAnalysisBuilder {
    /// <p>A <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType">SourceCodeType</a> that specifies the tip of a branch in an associated repository.</p>
    pub fn repository_head(mut self, input: crate::types::RepositoryHeadSourceCodeType) -> Self {
        self.repository_head = Some(input);
        self
    }
    /// <p>A <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_SourceCodeType">SourceCodeType</a> that specifies the tip of a branch in an associated repository.</p>
    pub fn set_repository_head(
        mut self,
        input: std::option::Option<crate::types::RepositoryHeadSourceCodeType>,
    ) -> Self {
        self.repository_head = input;
        self
    }
    /// <p>Specifies the source code that is analyzed in a code review.</p>
    pub fn source_code_type(mut self, input: crate::types::SourceCodeType) -> Self {
        self.source_code_type = Some(input);
        self
    }
    /// <p>Specifies the source code that is analyzed in a code review.</p>
    pub fn set_source_code_type(
        mut self,
        input: std::option::Option<crate::types::SourceCodeType>,
    ) -> Self {
        self.source_code_type = input;
        self
    }
    /// Consumes the builder and constructs a [`RepositoryAnalysis`](crate::types::RepositoryAnalysis).
    pub fn build(self) -> crate::types::RepositoryAnalysis {
        crate::types::RepositoryAnalysis {
            repository_head: self.repository_head,
            source_code_type: self.source_code_type,
        }
    }
}
