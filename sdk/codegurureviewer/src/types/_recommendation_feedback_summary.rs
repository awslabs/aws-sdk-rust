// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about recommendation feedback summaries.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationFeedbackSummary {
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub recommendation_id: ::std::option::Option<::std::string::String>,
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis.</p>
    pub reactions: ::std::option::Option<::std::vec::Vec<crate::types::Reaction>>,
    /// <p>The ID of the user that gave the feedback.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl RecommendationFeedbackSummary {
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(&self) -> ::std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.reactions.is_none()`.
    pub fn reactions(&self) -> &[crate::types::Reaction] {
        self.reactions.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the user that gave the feedback.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl RecommendationFeedbackSummary {
    /// Creates a new builder-style object to manufacture [`RecommendationFeedbackSummary`](crate::types::RecommendationFeedbackSummary).
    pub fn builder() -> crate::types::builders::RecommendationFeedbackSummaryBuilder {
        crate::types::builders::RecommendationFeedbackSummaryBuilder::default()
    }
}

/// A builder for [`RecommendationFeedbackSummary`](crate::types::RecommendationFeedbackSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationFeedbackSummaryBuilder {
    pub(crate) recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) reactions: ::std::option::Option<::std::vec::Vec<crate::types::Reaction>>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl RecommendationFeedbackSummaryBuilder {
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn set_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn get_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation_id
    }
    /// Appends an item to `reactions`.
    ///
    /// To override the contents of this collection use [`set_reactions`](Self::set_reactions).
    ///
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis.</p>
    pub fn reactions(mut self, input: crate::types::Reaction) -> Self {
        let mut v = self.reactions.unwrap_or_default();
        v.push(input);
        self.reactions = ::std::option::Option::Some(v);
        self
    }
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis.</p>
    pub fn set_reactions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Reaction>>) -> Self {
        self.reactions = input;
        self
    }
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis.</p>
    pub fn get_reactions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Reaction>> {
        &self.reactions
    }
    /// <p>The ID of the user that gave the feedback.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user that gave the feedback.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The ID of the user that gave the feedback.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`RecommendationFeedbackSummary`](crate::types::RecommendationFeedbackSummary).
    pub fn build(self) -> crate::types::RecommendationFeedbackSummary {
        crate::types::RecommendationFeedbackSummary {
            recommendation_id: self.recommendation_id,
            reactions: self.reactions,
            user_id: self.user_id,
        }
    }
}
