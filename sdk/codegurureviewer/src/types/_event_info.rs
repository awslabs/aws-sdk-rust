// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an event. The event might be a push, pull request, scheduled request, or another type of event.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EventInfo {
    /// <p>The name of the event. The possible names are <code>pull_request</code>, <code>workflow_dispatch</code>, <code>schedule</code>, and <code>push</code> </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of an event. The state might be open, closed, or another state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
}
impl EventInfo {
    /// <p>The name of the event. The possible names are <code>pull_request</code>, <code>workflow_dispatch</code>, <code>schedule</code>, and <code>push</code> </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The state of an event. The state might be open, closed, or another state.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
}
impl EventInfo {
    /// Creates a new builder-style object to manufacture [`EventInfo`](crate::types::EventInfo).
    pub fn builder() -> crate::types::builders::EventInfoBuilder {
        crate::types::builders::EventInfoBuilder::default()
    }
}

/// A builder for [`EventInfo`](crate::types::EventInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EventInfoBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<std::string::String>,
}
impl EventInfoBuilder {
    /// <p>The name of the event. The possible names are <code>pull_request</code>, <code>workflow_dispatch</code>, <code>schedule</code>, and <code>push</code> </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the event. The possible names are <code>pull_request</code>, <code>workflow_dispatch</code>, <code>schedule</code>, and <code>push</code> </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The state of an event. The state might be open, closed, or another state.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of an event. The state might be open, closed, or another state.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Consumes the builder and constructs a [`EventInfo`](crate::types::EventInfo).
    pub fn build(self) -> crate::types::EventInfo {
        crate::types::EventInfo {
            name: self.name,
            state: self.state,
        }
    }
}
