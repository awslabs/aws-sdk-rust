// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type of a code review. There are two code review types:</p>
/// <ul>
/// <li> <p> <code>PullRequest</code> - A code review that is automatically triggered by a pull request on an associated repository.</p> </li>
/// <li> <p> <code>RepositoryAnalysis</code> - A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeReviewType {
    /// <p>A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p>
    #[doc(hidden)]
    pub repository_analysis: std::option::Option<crate::types::RepositoryAnalysis>,
    /// <p>They types of analysis performed during a repository analysis or a pull request review. You can specify either <code>Security</code>, <code>CodeQuality</code>, or both.</p>
    #[doc(hidden)]
    pub analysis_types: std::option::Option<std::vec::Vec<crate::types::AnalysisType>>,
}
impl CodeReviewType {
    /// <p>A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p>
    pub fn repository_analysis(&self) -> std::option::Option<&crate::types::RepositoryAnalysis> {
        self.repository_analysis.as_ref()
    }
    /// <p>They types of analysis performed during a repository analysis or a pull request review. You can specify either <code>Security</code>, <code>CodeQuality</code>, or both.</p>
    pub fn analysis_types(&self) -> std::option::Option<&[crate::types::AnalysisType]> {
        self.analysis_types.as_deref()
    }
}
impl CodeReviewType {
    /// Creates a new builder-style object to manufacture [`CodeReviewType`](crate::types::CodeReviewType).
    pub fn builder() -> crate::types::builders::CodeReviewTypeBuilder {
        crate::types::builders::CodeReviewTypeBuilder::default()
    }
}

/// A builder for [`CodeReviewType`](crate::types::CodeReviewType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeReviewTypeBuilder {
    pub(crate) repository_analysis: std::option::Option<crate::types::RepositoryAnalysis>,
    pub(crate) analysis_types: std::option::Option<std::vec::Vec<crate::types::AnalysisType>>,
}
impl CodeReviewTypeBuilder {
    /// <p>A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p>
    pub fn repository_analysis(mut self, input: crate::types::RepositoryAnalysis) -> Self {
        self.repository_analysis = Some(input);
        self
    }
    /// <p>A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p>
    pub fn set_repository_analysis(
        mut self,
        input: std::option::Option<crate::types::RepositoryAnalysis>,
    ) -> Self {
        self.repository_analysis = input;
        self
    }
    /// Appends an item to `analysis_types`.
    ///
    /// To override the contents of this collection use [`set_analysis_types`](Self::set_analysis_types).
    ///
    /// <p>They types of analysis performed during a repository analysis or a pull request review. You can specify either <code>Security</code>, <code>CodeQuality</code>, or both.</p>
    pub fn analysis_types(mut self, input: crate::types::AnalysisType) -> Self {
        let mut v = self.analysis_types.unwrap_or_default();
        v.push(input);
        self.analysis_types = Some(v);
        self
    }
    /// <p>They types of analysis performed during a repository analysis or a pull request review. You can specify either <code>Security</code>, <code>CodeQuality</code>, or both.</p>
    pub fn set_analysis_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AnalysisType>>,
    ) -> Self {
        self.analysis_types = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeReviewType`](crate::types::CodeReviewType).
    pub fn build(self) -> crate::types::CodeReviewType {
        crate::types::CodeReviewType {
            repository_analysis: self.repository_analysis,
            analysis_types: self.analysis_types,
        }
    }
}
