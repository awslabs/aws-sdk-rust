// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about recommendations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationSummary {
    /// <p>Name of the file on which a recommendation is provided.</p>
    #[doc(hidden)]
    pub file_path: std::option::Option<std::string::String>,
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>Start line from where the recommendation is applicable in the source commit or source branch.</p>
    #[doc(hidden)]
    pub start_line: std::option::Option<i32>,
    /// <p>Last line where the recommendation is applicable in the source commit or source branch. For a single line comment the start line and end line values are the same.</p>
    #[doc(hidden)]
    pub end_line: std::option::Option<i32>,
    /// <p>A description of the recommendation generated by CodeGuru Reviewer for the lines of code between the start line and the end line.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The type of a recommendation.</p>
    #[doc(hidden)]
    pub recommendation_category: std::option::Option<crate::types::RecommendationCategory>,
    /// <p>Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.</p>
    #[doc(hidden)]
    pub rule_metadata: std::option::Option<crate::types::RuleMetadata>,
    /// <p>The severity of the issue in the code that generated this recommendation.</p>
    #[doc(hidden)]
    pub severity: std::option::Option<crate::types::Severity>,
}
impl RecommendationSummary {
    /// <p>Name of the file on which a recommendation is provided.</p>
    pub fn file_path(&self) -> std::option::Option<&str> {
        self.file_path.as_deref()
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>Start line from where the recommendation is applicable in the source commit or source branch.</p>
    pub fn start_line(&self) -> std::option::Option<i32> {
        self.start_line
    }
    /// <p>Last line where the recommendation is applicable in the source commit or source branch. For a single line comment the start line and end line values are the same.</p>
    pub fn end_line(&self) -> std::option::Option<i32> {
        self.end_line
    }
    /// <p>A description of the recommendation generated by CodeGuru Reviewer for the lines of code between the start line and the end line.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The type of a recommendation.</p>
    pub fn recommendation_category(
        &self,
    ) -> std::option::Option<&crate::types::RecommendationCategory> {
        self.recommendation_category.as_ref()
    }
    /// <p>Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.</p>
    pub fn rule_metadata(&self) -> std::option::Option<&crate::types::RuleMetadata> {
        self.rule_metadata.as_ref()
    }
    /// <p>The severity of the issue in the code that generated this recommendation.</p>
    pub fn severity(&self) -> std::option::Option<&crate::types::Severity> {
        self.severity.as_ref()
    }
}
impl RecommendationSummary {
    /// Creates a new builder-style object to manufacture [`RecommendationSummary`](crate::types::RecommendationSummary).
    pub fn builder() -> crate::types::builders::RecommendationSummaryBuilder {
        crate::types::builders::RecommendationSummaryBuilder::default()
    }
}

/// A builder for [`RecommendationSummary`](crate::types::RecommendationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationSummaryBuilder {
    pub(crate) file_path: std::option::Option<std::string::String>,
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) start_line: std::option::Option<i32>,
    pub(crate) end_line: std::option::Option<i32>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) recommendation_category: std::option::Option<crate::types::RecommendationCategory>,
    pub(crate) rule_metadata: std::option::Option<crate::types::RuleMetadata>,
    pub(crate) severity: std::option::Option<crate::types::Severity>,
}
impl RecommendationSummaryBuilder {
    /// <p>Name of the file on which a recommendation is provided.</p>
    pub fn file_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_path = Some(input.into());
        self
    }
    /// <p>Name of the file on which a recommendation is provided.</p>
    pub fn set_file_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_path = input;
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>Start line from where the recommendation is applicable in the source commit or source branch.</p>
    pub fn start_line(mut self, input: i32) -> Self {
        self.start_line = Some(input);
        self
    }
    /// <p>Start line from where the recommendation is applicable in the source commit or source branch.</p>
    pub fn set_start_line(mut self, input: std::option::Option<i32>) -> Self {
        self.start_line = input;
        self
    }
    /// <p>Last line where the recommendation is applicable in the source commit or source branch. For a single line comment the start line and end line values are the same.</p>
    pub fn end_line(mut self, input: i32) -> Self {
        self.end_line = Some(input);
        self
    }
    /// <p>Last line where the recommendation is applicable in the source commit or source branch. For a single line comment the start line and end line values are the same.</p>
    pub fn set_end_line(mut self, input: std::option::Option<i32>) -> Self {
        self.end_line = input;
        self
    }
    /// <p>A description of the recommendation generated by CodeGuru Reviewer for the lines of code between the start line and the end line.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the recommendation generated by CodeGuru Reviewer for the lines of code between the start line and the end line.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The type of a recommendation.</p>
    pub fn recommendation_category(mut self, input: crate::types::RecommendationCategory) -> Self {
        self.recommendation_category = Some(input);
        self
    }
    /// <p>The type of a recommendation.</p>
    pub fn set_recommendation_category(
        mut self,
        input: std::option::Option<crate::types::RecommendationCategory>,
    ) -> Self {
        self.recommendation_category = input;
        self
    }
    /// <p>Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.</p>
    pub fn rule_metadata(mut self, input: crate::types::RuleMetadata) -> Self {
        self.rule_metadata = Some(input);
        self
    }
    /// <p>Metadata about a rule. Rule metadata includes an ID, a name, a list of tags, and a short and long description. CodeGuru Reviewer uses rules to analyze code. A rule's recommendation is included in analysis results if code is detected that violates the rule.</p>
    pub fn set_rule_metadata(
        mut self,
        input: std::option::Option<crate::types::RuleMetadata>,
    ) -> Self {
        self.rule_metadata = input;
        self
    }
    /// <p>The severity of the issue in the code that generated this recommendation.</p>
    pub fn severity(mut self, input: crate::types::Severity) -> Self {
        self.severity = Some(input);
        self
    }
    /// <p>The severity of the issue in the code that generated this recommendation.</p>
    pub fn set_severity(mut self, input: std::option::Option<crate::types::Severity>) -> Self {
        self.severity = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationSummary`](crate::types::RecommendationSummary).
    pub fn build(self) -> crate::types::RecommendationSummary {
        crate::types::RecommendationSummary {
            file_path: self.file_path,
            recommendation_id: self.recommendation_id,
            start_line: self.start_line,
            end_line: self.end_line,
            description: self.description,
            recommendation_category: self.recommendation_category,
            rule_metadata: self.rule_metadata,
            severity: self.severity,
        }
    }
}
