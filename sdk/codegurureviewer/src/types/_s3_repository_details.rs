// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object that contains the S3 object keys for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3RepositoryDetails {
    /// <p>The name of the S3 bucket used for associating a new S3 repository. It must begin with <code>codeguru-reviewer-</code>. </p>
    #[doc(hidden)]
    pub bucket_name: std::option::Option<std::string::String>,
    /// <p>A <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object key for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.</p>
    #[doc(hidden)]
    pub code_artifacts: std::option::Option<crate::types::CodeArtifacts>,
}
impl S3RepositoryDetails {
    /// <p>The name of the S3 bucket used for associating a new S3 repository. It must begin with <code>codeguru-reviewer-</code>. </p>
    pub fn bucket_name(&self) -> std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>A <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object key for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.</p>
    pub fn code_artifacts(&self) -> std::option::Option<&crate::types::CodeArtifacts> {
        self.code_artifacts.as_ref()
    }
}
impl S3RepositoryDetails {
    /// Creates a new builder-style object to manufacture [`S3RepositoryDetails`](crate::types::S3RepositoryDetails).
    pub fn builder() -> crate::types::builders::S3RepositoryDetailsBuilder {
        crate::types::builders::S3RepositoryDetailsBuilder::default()
    }
}

/// A builder for [`S3RepositoryDetails`](crate::types::S3RepositoryDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3RepositoryDetailsBuilder {
    pub(crate) bucket_name: std::option::Option<std::string::String>,
    pub(crate) code_artifacts: std::option::Option<crate::types::CodeArtifacts>,
}
impl S3RepositoryDetailsBuilder {
    /// <p>The name of the S3 bucket used for associating a new S3 repository. It must begin with <code>codeguru-reviewer-</code>. </p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_name = Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket used for associating a new S3 repository. It must begin with <code>codeguru-reviewer-</code>. </p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>A <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object key for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.</p>
    pub fn code_artifacts(mut self, input: crate::types::CodeArtifacts) -> Self {
        self.code_artifacts = Some(input);
        self
    }
    /// <p>A <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object key for a source code .zip file and for a build artifacts .zip file that contains .jar or .class files.</p>
    pub fn set_code_artifacts(
        mut self,
        input: std::option::Option<crate::types::CodeArtifacts>,
    ) -> Self {
        self.code_artifacts = input;
        self
    }
    /// Consumes the builder and constructs a [`S3RepositoryDetails`](crate::types::S3RepositoryDetails).
    pub fn build(self) -> crate::types::S3RepositoryDetails {
        crate::types::S3RepositoryDetails {
            bucket_name: self.bucket_name,
            code_artifacts: self.code_artifacts,
        }
    }
}
