// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata that is associated with a code review. This applies to both pull request and repository analysis code reviews.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequestMetadata {
    /// <p>The ID of the request. This is required for a pull request code review.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
    /// <p>An identifier, such as a name or account ID, that is associated with the requester. The <code>Requester</code> is used to capture the <code>author/actor</code> name of the event request.</p>
    #[doc(hidden)]
    pub requester: std::option::Option<std::string::String>,
    /// <p>Information about the event associated with a code review.</p>
    #[doc(hidden)]
    pub event_info: std::option::Option<crate::types::EventInfo>,
    /// <p>The name of the repository vendor used to upload code to an S3 bucket for a CI/CD code review. For example, if code and artifacts are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts from a GitHub repository, then the repository association's <code>ProviderType</code> is <code>S3Bucket</code> and the CI/CD repository vendor name is GitHub. For more information, see the definition for <code>ProviderType</code> in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">RepositoryAssociation</a>.</p>
    #[doc(hidden)]
    pub vendor_name: std::option::Option<crate::types::VendorName>,
}
impl RequestMetadata {
    /// <p>The ID of the request. This is required for a pull request code review.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
    /// <p>An identifier, such as a name or account ID, that is associated with the requester. The <code>Requester</code> is used to capture the <code>author/actor</code> name of the event request.</p>
    pub fn requester(&self) -> std::option::Option<&str> {
        self.requester.as_deref()
    }
    /// <p>Information about the event associated with a code review.</p>
    pub fn event_info(&self) -> std::option::Option<&crate::types::EventInfo> {
        self.event_info.as_ref()
    }
    /// <p>The name of the repository vendor used to upload code to an S3 bucket for a CI/CD code review. For example, if code and artifacts are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts from a GitHub repository, then the repository association's <code>ProviderType</code> is <code>S3Bucket</code> and the CI/CD repository vendor name is GitHub. For more information, see the definition for <code>ProviderType</code> in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">RepositoryAssociation</a>.</p>
    pub fn vendor_name(&self) -> std::option::Option<&crate::types::VendorName> {
        self.vendor_name.as_ref()
    }
}
impl RequestMetadata {
    /// Creates a new builder-style object to manufacture [`RequestMetadata`](crate::types::RequestMetadata).
    pub fn builder() -> crate::types::builders::RequestMetadataBuilder {
        crate::types::builders::RequestMetadataBuilder::default()
    }
}

/// A builder for [`RequestMetadata`](crate::types::RequestMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RequestMetadataBuilder {
    pub(crate) request_id: std::option::Option<std::string::String>,
    pub(crate) requester: std::option::Option<std::string::String>,
    pub(crate) event_info: std::option::Option<crate::types::EventInfo>,
    pub(crate) vendor_name: std::option::Option<crate::types::VendorName>,
}
impl RequestMetadataBuilder {
    /// <p>The ID of the request. This is required for a pull request code review.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The ID of the request. This is required for a pull request code review.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// <p>An identifier, such as a name or account ID, that is associated with the requester. The <code>Requester</code> is used to capture the <code>author/actor</code> name of the event request.</p>
    pub fn requester(mut self, input: impl Into<std::string::String>) -> Self {
        self.requester = Some(input.into());
        self
    }
    /// <p>An identifier, such as a name or account ID, that is associated with the requester. The <code>Requester</code> is used to capture the <code>author/actor</code> name of the event request.</p>
    pub fn set_requester(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.requester = input;
        self
    }
    /// <p>Information about the event associated with a code review.</p>
    pub fn event_info(mut self, input: crate::types::EventInfo) -> Self {
        self.event_info = Some(input);
        self
    }
    /// <p>Information about the event associated with a code review.</p>
    pub fn set_event_info(mut self, input: std::option::Option<crate::types::EventInfo>) -> Self {
        self.event_info = input;
        self
    }
    /// <p>The name of the repository vendor used to upload code to an S3 bucket for a CI/CD code review. For example, if code and artifacts are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts from a GitHub repository, then the repository association's <code>ProviderType</code> is <code>S3Bucket</code> and the CI/CD repository vendor name is GitHub. For more information, see the definition for <code>ProviderType</code> in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">RepositoryAssociation</a>.</p>
    pub fn vendor_name(mut self, input: crate::types::VendorName) -> Self {
        self.vendor_name = Some(input);
        self
    }
    /// <p>The name of the repository vendor used to upload code to an S3 bucket for a CI/CD code review. For example, if code and artifacts are uploaded to an S3 bucket for a CI/CD code review by GitHub scripts from a GitHub repository, then the repository association's <code>ProviderType</code> is <code>S3Bucket</code> and the CI/CD repository vendor name is GitHub. For more information, see the definition for <code>ProviderType</code> in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">RepositoryAssociation</a>.</p>
    pub fn set_vendor_name(mut self, input: std::option::Option<crate::types::VendorName>) -> Self {
        self.vendor_name = input;
        self
    }
    /// Consumes the builder and constructs a [`RequestMetadata`](crate::types::RequestMetadata).
    pub fn build(self) -> crate::types::RequestMetadata {
        crate::types::RequestMetadata {
            request_id: self.request_id,
            requester: self.requester,
            event_info: self.event_info,
            vendor_name: self.vendor_name,
        }
    }
}
