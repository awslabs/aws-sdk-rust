// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the recommendation feedback.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecommendationFeedback {
    /// <p>The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html">CodeReview</a> object. </p>
    #[doc(hidden)]
    pub code_review_arn: std::option::Option<std::string::String>,
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    #[doc(hidden)]
    pub recommendation_id: std::option::Option<std::string::String>,
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis. You can send an empty list to clear off all your feedback.</p>
    #[doc(hidden)]
    pub reactions: std::option::Option<std::vec::Vec<crate::types::Reaction>>,
    /// <p>The ID of the user that made the API call.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>The time at which the feedback was created.</p>
    #[doc(hidden)]
    pub created_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which the feedback was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl RecommendationFeedback {
    /// <p>The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html">CodeReview</a> object. </p>
    pub fn code_review_arn(&self) -> std::option::Option<&str> {
        self.code_review_arn.as_deref()
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(&self) -> std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis. You can send an empty list to clear off all your feedback.</p>
    pub fn reactions(&self) -> std::option::Option<&[crate::types::Reaction]> {
        self.reactions.as_deref()
    }
    /// <p>The ID of the user that made the API call.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>The time at which the feedback was created.</p>
    pub fn created_time_stamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time_stamp.as_ref()
    }
    /// <p>The time at which the feedback was last updated.</p>
    pub fn last_updated_time_stamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time_stamp.as_ref()
    }
}
impl RecommendationFeedback {
    /// Creates a new builder-style object to manufacture [`RecommendationFeedback`](crate::types::RecommendationFeedback).
    pub fn builder() -> crate::types::builders::RecommendationFeedbackBuilder {
        crate::types::builders::RecommendationFeedbackBuilder::default()
    }
}

/// A builder for [`RecommendationFeedback`](crate::types::RecommendationFeedback).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecommendationFeedbackBuilder {
    pub(crate) code_review_arn: std::option::Option<std::string::String>,
    pub(crate) recommendation_id: std::option::Option<std::string::String>,
    pub(crate) reactions: std::option::Option<std::vec::Vec<crate::types::Reaction>>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) created_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl RecommendationFeedbackBuilder {
    /// <p>The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html">CodeReview</a> object. </p>
    pub fn code_review_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.code_review_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html">CodeReview</a> object. </p>
    pub fn set_code_review_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code_review_arn = input;
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn recommendation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recommendation_id = Some(input.into());
        self
    }
    /// <p>The recommendation ID that can be used to track the provided recommendations. Later on it can be used to collect the feedback.</p>
    pub fn set_recommendation_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recommendation_id = input;
        self
    }
    /// Appends an item to `reactions`.
    ///
    /// To override the contents of this collection use [`set_reactions`](Self::set_reactions).
    ///
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis. You can send an empty list to clear off all your feedback.</p>
    pub fn reactions(mut self, input: crate::types::Reaction) -> Self {
        let mut v = self.reactions.unwrap_or_default();
        v.push(input);
        self.reactions = Some(v);
        self
    }
    /// <p>List for storing reactions. Reactions are utf-8 text code for emojis. You can send an empty list to clear off all your feedback.</p>
    pub fn set_reactions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Reaction>>,
    ) -> Self {
        self.reactions = input;
        self
    }
    /// <p>The ID of the user that made the API call.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The ID of the user that made the API call.</p>
    /// <p> The <code>UserId</code> is an IAM principal that can be specified as an Amazon Web Services account ID or an Amazon Resource Name (ARN). For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#Principal_specifying"> Specifying a Principal</a> in the <i>Amazon Web Services Identity and Access Management User Guide</i>.</p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The time at which the feedback was created.</p>
    pub fn created_time_stamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time_stamp = Some(input);
        self
    }
    /// <p>The time at which the feedback was created.</p>
    pub fn set_created_time_stamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time_stamp = input;
        self
    }
    /// <p>The time at which the feedback was last updated.</p>
    pub fn last_updated_time_stamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time_stamp = Some(input);
        self
    }
    /// <p>The time at which the feedback was last updated.</p>
    pub fn set_last_updated_time_stamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time_stamp = input;
        self
    }
    /// Consumes the builder and constructs a [`RecommendationFeedback`](crate::types::RecommendationFeedback).
    pub fn build(self) -> crate::types::RecommendationFeedback {
        crate::types::RecommendationFeedback {
            code_review_arn: self.code_review_arn,
            recommendation_id: self.recommendation_id,
            reactions: self.reactions,
            user_id: self.user_id,
            created_time_stamp: self.created_time_stamp,
            last_updated_time_stamp: self.last_updated_time_stamp,
        }
    }
}
