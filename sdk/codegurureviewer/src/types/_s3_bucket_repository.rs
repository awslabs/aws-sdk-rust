// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an associated repository in an S3 bucket. The associated repository contains a source code .zip file and a build artifacts .zip file that contains .jar or .class files.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3BucketRepository {
    /// <p>The name of the repository when the <code>ProviderType</code> is <code>S3Bucket</code>.</p>
    pub name: ::std::string::String,
    /// <p>An <code>S3RepositoryDetails</code> object that specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.</p>
    pub details: ::std::option::Option<crate::types::S3RepositoryDetails>,
}
impl S3BucketRepository {
    /// <p>The name of the repository when the <code>ProviderType</code> is <code>S3Bucket</code>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An <code>S3RepositoryDetails</code> object that specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::S3RepositoryDetails> {
        self.details.as_ref()
    }
}
impl S3BucketRepository {
    /// Creates a new builder-style object to manufacture [`S3BucketRepository`](crate::types::S3BucketRepository).
    pub fn builder() -> crate::types::builders::S3BucketRepositoryBuilder {
        crate::types::builders::S3BucketRepositoryBuilder::default()
    }
}

/// A builder for [`S3BucketRepository`](crate::types::S3BucketRepository).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3BucketRepositoryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<crate::types::S3RepositoryDetails>,
}
impl S3BucketRepositoryBuilder {
    /// <p>The name of the repository when the <code>ProviderType</code> is <code>S3Bucket</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository when the <code>ProviderType</code> is <code>S3Bucket</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the repository when the <code>ProviderType</code> is <code>S3Bucket</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An <code>S3RepositoryDetails</code> object that specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.</p>
    pub fn details(mut self, input: crate::types::S3RepositoryDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>S3RepositoryDetails</code> object that specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::S3RepositoryDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>An <code>S3RepositoryDetails</code> object that specifies the name of an S3 bucket and a <code>CodeArtifacts</code> object. The <code>CodeArtifacts</code> object includes the S3 object keys for a source code .zip file and for a build artifacts .zip file.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::S3RepositoryDetails> {
        &self.details
    }
    /// Consumes the builder and constructs a [`S3BucketRepository`](crate::types::S3BucketRepository).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::S3BucketRepositoryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::S3BucketRepository, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3BucketRepository {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building S3BucketRepository",
                )
            })?,
            details: self.details,
        })
    }
}
