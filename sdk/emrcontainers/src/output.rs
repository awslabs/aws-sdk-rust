// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartJobRunOutput {
    /// <p>This output displays the started job run ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>This output displays the name of the started job run.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>This output lists the ARN of job run.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartJobRunOutput {
    /// <p>This output displays the started job run ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>This output displays the name of the started job run.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>This output lists the ARN of job run.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartJobRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`StartJobRunOutput`](crate::output::StartJobRunOutput).
pub mod start_job_run_output {

    /// A builder for [`StartJobRunOutput`](crate::output::StartJobRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output displays the started job run ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>This output displays the started job run ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>This output displays the name of the started job run.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>This output displays the name of the started job run.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This output lists the ARN of job run.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>This output lists the ARN of job run.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartJobRunOutput`](crate::output::StartJobRunOutput).
        pub fn build(self) -> crate::output::StartJobRunOutput {
            crate::output::StartJobRunOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                virtual_cluster_id: self.virtual_cluster_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl StartJobRunOutput {
    /// Creates a new builder-style object to manufacture [`StartJobRunOutput`](crate::output::StartJobRunOutput).
    pub fn builder() -> crate::output::start_job_run_output::Builder {
        crate::output::start_job_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVirtualClustersOutput {
    /// <p>This output lists the specified virtual clusters.</p>
    #[doc(hidden)]
    pub virtual_clusters: std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
    /// <p>This output displays the token for the next set of virtual clusters.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVirtualClustersOutput {
    /// <p>This output lists the specified virtual clusters.</p>
    pub fn virtual_clusters(&self) -> std::option::Option<&[crate::model::VirtualCluster]> {
        self.virtual_clusters.as_deref()
    }
    /// <p>This output displays the token for the next set of virtual clusters.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVirtualClustersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput).
pub mod list_virtual_clusters_output {

    /// A builder for [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) virtual_clusters:
            std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `virtual_clusters`.
        ///
        /// To override the contents of this collection use [`set_virtual_clusters`](Self::set_virtual_clusters).
        ///
        /// <p>This output lists the specified virtual clusters.</p>
        pub fn virtual_clusters(mut self, input: crate::model::VirtualCluster) -> Self {
            let mut v = self.virtual_clusters.unwrap_or_default();
            v.push(input);
            self.virtual_clusters = Some(v);
            self
        }
        /// <p>This output lists the specified virtual clusters.</p>
        pub fn set_virtual_clusters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
        ) -> Self {
            self.virtual_clusters = input;
            self
        }
        /// <p>This output displays the token for the next set of virtual clusters.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>This output displays the token for the next set of virtual clusters.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput).
        pub fn build(self) -> crate::output::ListVirtualClustersOutput {
            crate::output::ListVirtualClustersOutput {
                virtual_clusters: self.virtual_clusters,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListVirtualClustersOutput {
    /// Creates a new builder-style object to manufacture [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput).
    pub fn builder() -> crate::output::list_virtual_clusters_output::Builder {
        crate::output::list_virtual_clusters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags assigned to resources.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags assigned to resources.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags assigned to resources.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The tags assigned to resources.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListManagedEndpointsOutput {
    /// <p>The managed endpoints to be listed.</p>
    #[doc(hidden)]
    pub endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
    /// <p> The token for the next set of endpoints to return. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListManagedEndpointsOutput {
    /// <p>The managed endpoints to be listed.</p>
    pub fn endpoints(&self) -> std::option::Option<&[crate::model::Endpoint]> {
        self.endpoints.as_deref()
    }
    /// <p> The token for the next set of endpoints to return. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListManagedEndpointsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput).
pub mod list_managed_endpoints_output {

    /// A builder for [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `endpoints`.
        ///
        /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
        ///
        /// <p>The managed endpoints to be listed.</p>
        pub fn endpoints(mut self, input: crate::model::Endpoint) -> Self {
            let mut v = self.endpoints.unwrap_or_default();
            v.push(input);
            self.endpoints = Some(v);
            self
        }
        /// <p>The managed endpoints to be listed.</p>
        pub fn set_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        ) -> Self {
            self.endpoints = input;
            self
        }
        /// <p> The token for the next set of endpoints to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The token for the next set of endpoints to return. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput).
        pub fn build(self) -> crate::output::ListManagedEndpointsOutput {
            crate::output::ListManagedEndpointsOutput {
                endpoints: self.endpoints,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListManagedEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput).
    pub fn builder() -> crate::output::list_managed_endpoints_output::Builder {
        crate::output::list_managed_endpoints_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListJobTemplatesOutput {
    /// <p>This output lists information about the specified job templates.</p>
    #[doc(hidden)]
    pub templates: std::option::Option<std::vec::Vec<crate::model::JobTemplate>>,
    /// <p> This output displays the token for the next set of job templates.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJobTemplatesOutput {
    /// <p>This output lists information about the specified job templates.</p>
    pub fn templates(&self) -> std::option::Option<&[crate::model::JobTemplate]> {
        self.templates.as_deref()
    }
    /// <p> This output displays the token for the next set of job templates.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListJobTemplatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput).
pub mod list_job_templates_output {

    /// A builder for [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) templates: std::option::Option<std::vec::Vec<crate::model::JobTemplate>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `templates`.
        ///
        /// To override the contents of this collection use [`set_templates`](Self::set_templates).
        ///
        /// <p>This output lists information about the specified job templates.</p>
        pub fn templates(mut self, input: crate::model::JobTemplate) -> Self {
            let mut v = self.templates.unwrap_or_default();
            v.push(input);
            self.templates = Some(v);
            self
        }
        /// <p>This output lists information about the specified job templates.</p>
        pub fn set_templates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobTemplate>>,
        ) -> Self {
            self.templates = input;
            self
        }
        /// <p> This output displays the token for the next set of job templates.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> This output displays the token for the next set of job templates.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput).
        pub fn build(self) -> crate::output::ListJobTemplatesOutput {
            crate::output::ListJobTemplatesOutput {
                templates: self.templates,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListJobTemplatesOutput {
    /// Creates a new builder-style object to manufacture [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput).
    pub fn builder() -> crate::output::list_job_templates_output::Builder {
        crate::output::list_job_templates_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListJobRunsOutput {
    /// <p>This output lists information about the specified job runs.</p>
    #[doc(hidden)]
    pub job_runs: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
    /// <p>This output displays the token for the next set of job runs.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJobRunsOutput {
    /// <p>This output lists information about the specified job runs.</p>
    pub fn job_runs(&self) -> std::option::Option<&[crate::model::JobRun]> {
        self.job_runs.as_deref()
    }
    /// <p>This output displays the token for the next set of job runs.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListJobRunsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListJobRunsOutput`](crate::output::ListJobRunsOutput).
pub mod list_job_runs_output {

    /// A builder for [`ListJobRunsOutput`](crate::output::ListJobRunsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_runs: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `job_runs`.
        ///
        /// To override the contents of this collection use [`set_job_runs`](Self::set_job_runs).
        ///
        /// <p>This output lists information about the specified job runs.</p>
        pub fn job_runs(mut self, input: crate::model::JobRun) -> Self {
            let mut v = self.job_runs.unwrap_or_default();
            v.push(input);
            self.job_runs = Some(v);
            self
        }
        /// <p>This output lists information about the specified job runs.</p>
        pub fn set_job_runs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
        ) -> Self {
            self.job_runs = input;
            self
        }
        /// <p>This output displays the token for the next set of job runs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>This output displays the token for the next set of job runs.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListJobRunsOutput`](crate::output::ListJobRunsOutput).
        pub fn build(self) -> crate::output::ListJobRunsOutput {
            crate::output::ListJobRunsOutput {
                job_runs: self.job_runs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListJobRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListJobRunsOutput`](crate::output::ListJobRunsOutput).
    pub fn builder() -> crate::output::list_job_runs_output::Builder {
        crate::output::list_job_runs_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVirtualClusterOutput {
    /// <p>This output displays information about the specified virtual cluster.</p>
    #[doc(hidden)]
    pub virtual_cluster: std::option::Option<crate::model::VirtualCluster>,
    _request_id: Option<String>,
}
impl DescribeVirtualClusterOutput {
    /// <p>This output displays information about the specified virtual cluster.</p>
    pub fn virtual_cluster(&self) -> std::option::Option<&crate::model::VirtualCluster> {
        self.virtual_cluster.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeVirtualClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput).
pub mod describe_virtual_cluster_output {

    /// A builder for [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) virtual_cluster: std::option::Option<crate::model::VirtualCluster>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output displays information about the specified virtual cluster.</p>
        pub fn virtual_cluster(mut self, input: crate::model::VirtualCluster) -> Self {
            self.virtual_cluster = Some(input);
            self
        }
        /// <p>This output displays information about the specified virtual cluster.</p>
        pub fn set_virtual_cluster(
            mut self,
            input: std::option::Option<crate::model::VirtualCluster>,
        ) -> Self {
            self.virtual_cluster = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput).
        pub fn build(self) -> crate::output::DescribeVirtualClusterOutput {
            crate::output::DescribeVirtualClusterOutput {
                virtual_cluster: self.virtual_cluster,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput).
    pub fn builder() -> crate::output::describe_virtual_cluster_output::Builder {
        crate::output::describe_virtual_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeManagedEndpointOutput {
    /// <p>This output displays information about a managed endpoint.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<crate::model::Endpoint>,
    _request_id: Option<String>,
}
impl DescribeManagedEndpointOutput {
    /// <p>This output displays information about a managed endpoint.</p>
    pub fn endpoint(&self) -> std::option::Option<&crate::model::Endpoint> {
        self.endpoint.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeManagedEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput).
pub mod describe_managed_endpoint_output {

    /// A builder for [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::Endpoint>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output displays information about a managed endpoint.</p>
        pub fn endpoint(mut self, input: crate::model::Endpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        /// <p>This output displays information about a managed endpoint.</p>
        pub fn set_endpoint(mut self, input: std::option::Option<crate::model::Endpoint>) -> Self {
            self.endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput).
        pub fn build(self) -> crate::output::DescribeManagedEndpointOutput {
            crate::output::DescribeManagedEndpointOutput {
                endpoint: self.endpoint,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput).
    pub fn builder() -> crate::output::describe_managed_endpoint_output::Builder {
        crate::output::describe_managed_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeJobTemplateOutput {
    /// <p>This output displays information about the specified job template.</p>
    #[doc(hidden)]
    pub job_template: std::option::Option<crate::model::JobTemplate>,
    _request_id: Option<String>,
}
impl DescribeJobTemplateOutput {
    /// <p>This output displays information about the specified job template.</p>
    pub fn job_template(&self) -> std::option::Option<&crate::model::JobTemplate> {
        self.job_template.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeJobTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeJobTemplateOutput`](crate::output::DescribeJobTemplateOutput).
pub mod describe_job_template_output {

    /// A builder for [`DescribeJobTemplateOutput`](crate::output::DescribeJobTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_template: std::option::Option<crate::model::JobTemplate>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output displays information about the specified job template.</p>
        pub fn job_template(mut self, input: crate::model::JobTemplate) -> Self {
            self.job_template = Some(input);
            self
        }
        /// <p>This output displays information about the specified job template.</p>
        pub fn set_job_template(
            mut self,
            input: std::option::Option<crate::model::JobTemplate>,
        ) -> Self {
            self.job_template = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobTemplateOutput`](crate::output::DescribeJobTemplateOutput).
        pub fn build(self) -> crate::output::DescribeJobTemplateOutput {
            crate::output::DescribeJobTemplateOutput {
                job_template: self.job_template,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeJobTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobTemplateOutput`](crate::output::DescribeJobTemplateOutput).
    pub fn builder() -> crate::output::describe_job_template_output::Builder {
        crate::output::describe_job_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeJobRunOutput {
    /// <p>The output displays information about a job run.</p>
    #[doc(hidden)]
    pub job_run: std::option::Option<crate::model::JobRun>,
    _request_id: Option<String>,
}
impl DescribeJobRunOutput {
    /// <p>The output displays information about a job run.</p>
    pub fn job_run(&self) -> std::option::Option<&crate::model::JobRun> {
        self.job_run.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeJobRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput).
pub mod describe_job_run_output {

    /// A builder for [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_run: std::option::Option<crate::model::JobRun>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The output displays information about a job run.</p>
        pub fn job_run(mut self, input: crate::model::JobRun) -> Self {
            self.job_run = Some(input);
            self
        }
        /// <p>The output displays information about a job run.</p>
        pub fn set_job_run(mut self, input: std::option::Option<crate::model::JobRun>) -> Self {
            self.job_run = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput).
        pub fn build(self) -> crate::output::DescribeJobRunOutput {
            crate::output::DescribeJobRunOutput {
                job_run: self.job_run,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeJobRunOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput).
    pub fn builder() -> crate::output::describe_job_run_output::Builder {
        crate::output::describe_job_run_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVirtualClusterOutput {
    /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteVirtualClusterOutput {
    /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteVirtualClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput).
pub mod delete_virtual_cluster_output {

    /// A builder for [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput).
        pub fn build(self) -> crate::output::DeleteVirtualClusterOutput {
            crate::output::DeleteVirtualClusterOutput {
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput).
    pub fn builder() -> crate::output::delete_virtual_cluster_output::Builder {
        crate::output::delete_virtual_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteManagedEndpointOutput {
    /// <p>The output displays the ID of the managed endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteManagedEndpointOutput {
    /// <p>The output displays the ID of the managed endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteManagedEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput).
pub mod delete_managed_endpoint_output {

    /// A builder for [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The output displays the ID of the managed endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The output displays the ID of the managed endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput).
        pub fn build(self) -> crate::output::DeleteManagedEndpointOutput {
            crate::output::DeleteManagedEndpointOutput {
                id: self.id,
                virtual_cluster_id: self.virtual_cluster_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput).
    pub fn builder() -> crate::output::delete_managed_endpoint_output::Builder {
        crate::output::delete_managed_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteJobTemplateOutput {
    /// <p>This output contains the ID of the job template that was deleted.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteJobTemplateOutput {
    /// <p>This output contains the ID of the job template that was deleted.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteJobTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput).
pub mod delete_job_template_output {

    /// A builder for [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output contains the ID of the job template that was deleted.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>This output contains the ID of the job template that was deleted.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput).
        pub fn build(self) -> crate::output::DeleteJobTemplateOutput {
            crate::output::DeleteJobTemplateOutput {
                id: self.id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteJobTemplateOutput {
    /// Creates a new builder-style object to manufacture [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput).
    pub fn builder() -> crate::output::delete_job_template_output::Builder {
        crate::output::delete_job_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVirtualClusterOutput {
    /// <p>This output contains the virtual cluster ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>This output contains the name of the virtual cluster.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>This output contains the ARN of virtual cluster.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateVirtualClusterOutput {
    /// <p>This output contains the virtual cluster ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>This output contains the name of the virtual cluster.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>This output contains the ARN of virtual cluster.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateVirtualClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput).
pub mod create_virtual_cluster_output {

    /// A builder for [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output contains the virtual cluster ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>This output contains the virtual cluster ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>This output contains the name of the virtual cluster.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>This output contains the name of the virtual cluster.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This output contains the ARN of virtual cluster.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>This output contains the ARN of virtual cluster.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput).
        pub fn build(self) -> crate::output::CreateVirtualClusterOutput {
            crate::output::CreateVirtualClusterOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput).
    pub fn builder() -> crate::output::create_virtual_cluster_output::Builder {
        crate::output::create_virtual_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateManagedEndpointOutput {
    /// <p>The output contains the ID of the managed endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The output contains the name of the managed endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The output contains the ARN of the managed endpoint.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The output contains the ID of the virtual cluster.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateManagedEndpointOutput {
    /// <p>The output contains the ID of the managed endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The output contains the name of the managed endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The output contains the ARN of the managed endpoint.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The output contains the ID of the virtual cluster.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateManagedEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput).
pub mod create_managed_endpoint_output {

    /// A builder for [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The output contains the ID of the managed endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The output contains the ID of the managed endpoint.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output contains the name of the managed endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The output contains the name of the managed endpoint.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The output contains the ARN of the managed endpoint.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The output contains the ARN of the managed endpoint.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The output contains the ID of the virtual cluster.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        /// <p>The output contains the ID of the virtual cluster.</p>
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput).
        pub fn build(self) -> crate::output::CreateManagedEndpointOutput {
            crate::output::CreateManagedEndpointOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                virtual_cluster_id: self.virtual_cluster_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput).
    pub fn builder() -> crate::output::create_managed_endpoint_output::Builder {
        crate::output::create_managed_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateJobTemplateOutput {
    /// <p>This output display the created job template ID.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>This output displays the name of the created job template.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>This output display the ARN of the created job template.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>This output displays the date and time when the job template was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreateJobTemplateOutput {
    /// <p>This output display the created job template ID.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>This output displays the name of the created job template.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>This output display the ARN of the created job template.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>This output displays the date and time when the job template was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateJobTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput).
pub mod create_job_template_output {

    /// A builder for [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>This output display the created job template ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>This output display the created job template ID.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>This output displays the name of the created job template.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>This output displays the name of the created job template.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This output display the ARN of the created job template.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>This output display the ARN of the created job template.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>This output displays the date and time when the job template was created.</p>
        pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.created_at = Some(input);
            self
        }
        /// <p>This output displays the date and time when the job template was created.</p>
        pub fn set_created_at(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.created_at = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput).
        pub fn build(self) -> crate::output::CreateJobTemplateOutput {
            crate::output::CreateJobTemplateOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                created_at: self.created_at,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateJobTemplateOutput {
    /// Creates a new builder-style object to manufacture [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput).
    pub fn builder() -> crate::output::create_job_template_output::Builder {
        crate::output::create_job_template_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelJobRunOutput {
    /// <p>The output contains the ID of the cancelled job run.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CancelJobRunOutput {
    /// <p>The output contains the ID of the cancelled job run.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CancelJobRunOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CancelJobRunOutput`](crate::output::CancelJobRunOutput).
pub mod cancel_job_run_output {

    /// A builder for [`CancelJobRunOutput`](crate::output::CancelJobRunOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The output contains the ID of the cancelled job run.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        /// <p>The output contains the ID of the cancelled job run.</p>
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CancelJobRunOutput`](crate::output::CancelJobRunOutput).
        pub fn build(self) -> crate::output::CancelJobRunOutput {
            crate::output::CancelJobRunOutput {
                id: self.id,
                virtual_cluster_id: self.virtual_cluster_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl CancelJobRunOutput {
    /// Creates a new builder-style object to manufacture [`CancelJobRunOutput`](crate::output::CancelJobRunOutput).
    pub fn builder() -> crate::output::cancel_job_run_output::Builder {
        crate::output::cancel_job_run_output::Builder::default()
    }
}
