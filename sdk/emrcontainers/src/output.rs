// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartJobRunOutput {
    /// <p>This output displays the started job run ID.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>This output displays the name of the started job run.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>This output lists the ARN of job run.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
    pub virtual_cluster_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartJobRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartJobRunOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("virtual_cluster_id", &self.virtual_cluster_id);
        formatter.finish()
    }
}
/// See [`StartJobRunOutput`](crate::output::StartJobRunOutput)
pub mod start_job_run_output {
    /// A builder for [`StartJobRunOutput`](crate::output::StartJobRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>This output displays the started job run ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>This output displays the name of the started job run.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This output lists the ARN of job run.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        /// Consumes the builder and constructs a [`StartJobRunOutput`](crate::output::StartJobRunOutput)
        pub fn build(self) -> crate::output::StartJobRunOutput {
            crate::output::StartJobRunOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                virtual_cluster_id: self.virtual_cluster_id,
            }
        }
    }
}
impl StartJobRunOutput {
    /// Creates a new builder-style object to manufacture [`StartJobRunOutput`](crate::output::StartJobRunOutput)
    pub fn builder() -> crate::output::start_job_run_output::Builder {
        crate::output::start_job_run_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListVirtualClustersOutput {
    /// <p>This output lists the specified virtual clusters.</p>
    pub virtual_clusters: std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
    /// <p>This output displays the token for the next set of virtual clusters.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListVirtualClustersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListVirtualClustersOutput");
        formatter.field("virtual_clusters", &self.virtual_clusters);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput)
pub mod list_virtual_clusters_output {
    /// A builder for [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) virtual_clusters:
            std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn virtual_clusters(mut self, input: impl Into<crate::model::VirtualCluster>) -> Self {
            let mut v = self.virtual_clusters.unwrap_or_default();
            v.push(input.into());
            self.virtual_clusters = Some(v);
            self
        }
        pub fn set_virtual_clusters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VirtualCluster>>,
        ) -> Self {
            self.virtual_clusters = input;
            self
        }
        /// <p>This output displays the token for the next set of virtual clusters.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput)
        pub fn build(self) -> crate::output::ListVirtualClustersOutput {
            crate::output::ListVirtualClustersOutput {
                virtual_clusters: self.virtual_clusters,
                next_token: self.next_token,
            }
        }
    }
}
impl ListVirtualClustersOutput {
    /// Creates a new builder-style object to manufacture [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput)
    pub fn builder() -> crate::output::list_virtual_clusters_output::Builder {
        crate::output::list_virtual_clusters_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags assigned to resources.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListManagedEndpointsOutput {
    /// <p>The managed endpoints to be listed.</p>
    pub endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
    /// <p> The token for the next set of endpoints to return. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListManagedEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListManagedEndpointsOutput");
        formatter.field("endpoints", &self.endpoints);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput)
pub mod list_managed_endpoints_output {
    /// A builder for [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoints: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn endpoints(mut self, input: impl Into<crate::model::Endpoint>) -> Self {
            let mut v = self.endpoints.unwrap_or_default();
            v.push(input.into());
            self.endpoints = Some(v);
            self
        }
        pub fn set_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Endpoint>>,
        ) -> Self {
            self.endpoints = input;
            self
        }
        /// <p> The token for the next set of endpoints to return. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput)
        pub fn build(self) -> crate::output::ListManagedEndpointsOutput {
            crate::output::ListManagedEndpointsOutput {
                endpoints: self.endpoints,
                next_token: self.next_token,
            }
        }
    }
}
impl ListManagedEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput)
    pub fn builder() -> crate::output::list_managed_endpoints_output::Builder {
        crate::output::list_managed_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListJobRunsOutput {
    /// <p>This output lists information about the specified job runs.</p>
    pub job_runs: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
    /// <p>This output displays the token for the next set of job runs.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListJobRunsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListJobRunsOutput");
        formatter.field("job_runs", &self.job_runs);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListJobRunsOutput`](crate::output::ListJobRunsOutput)
pub mod list_job_runs_output {
    /// A builder for [`ListJobRunsOutput`](crate::output::ListJobRunsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_runs: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn job_runs(mut self, input: impl Into<crate::model::JobRun>) -> Self {
            let mut v = self.job_runs.unwrap_or_default();
            v.push(input.into());
            self.job_runs = Some(v);
            self
        }
        pub fn set_job_runs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::JobRun>>,
        ) -> Self {
            self.job_runs = input;
            self
        }
        /// <p>This output displays the token for the next set of job runs.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListJobRunsOutput`](crate::output::ListJobRunsOutput)
        pub fn build(self) -> crate::output::ListJobRunsOutput {
            crate::output::ListJobRunsOutput {
                job_runs: self.job_runs,
                next_token: self.next_token,
            }
        }
    }
}
impl ListJobRunsOutput {
    /// Creates a new builder-style object to manufacture [`ListJobRunsOutput`](crate::output::ListJobRunsOutput)
    pub fn builder() -> crate::output::list_job_runs_output::Builder {
        crate::output::list_job_runs_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeVirtualClusterOutput {
    /// <p>This output displays information about the specified virtual cluster.</p>
    pub virtual_cluster: std::option::Option<crate::model::VirtualCluster>,
}
impl std::fmt::Debug for DescribeVirtualClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeVirtualClusterOutput");
        formatter.field("virtual_cluster", &self.virtual_cluster);
        formatter.finish()
    }
}
/// See [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput)
pub mod describe_virtual_cluster_output {
    /// A builder for [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) virtual_cluster: std::option::Option<crate::model::VirtualCluster>,
    }
    impl Builder {
        /// <p>This output displays information about the specified virtual cluster.</p>
        pub fn virtual_cluster(mut self, input: crate::model::VirtualCluster) -> Self {
            self.virtual_cluster = Some(input);
            self
        }
        pub fn set_virtual_cluster(
            mut self,
            input: std::option::Option<crate::model::VirtualCluster>,
        ) -> Self {
            self.virtual_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput)
        pub fn build(self) -> crate::output::DescribeVirtualClusterOutput {
            crate::output::DescribeVirtualClusterOutput {
                virtual_cluster: self.virtual_cluster,
            }
        }
    }
}
impl DescribeVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput)
    pub fn builder() -> crate::output::describe_virtual_cluster_output::Builder {
        crate::output::describe_virtual_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeManagedEndpointOutput {
    /// <p>This output displays information about a managed endpoint.</p>
    pub endpoint: std::option::Option<crate::model::Endpoint>,
}
impl std::fmt::Debug for DescribeManagedEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeManagedEndpointOutput");
        formatter.field("endpoint", &self.endpoint);
        formatter.finish()
    }
}
/// See [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput)
pub mod describe_managed_endpoint_output {
    /// A builder for [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) endpoint: std::option::Option<crate::model::Endpoint>,
    }
    impl Builder {
        /// <p>This output displays information about a managed endpoint.</p>
        pub fn endpoint(mut self, input: crate::model::Endpoint) -> Self {
            self.endpoint = Some(input);
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<crate::model::Endpoint>) -> Self {
            self.endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput)
        pub fn build(self) -> crate::output::DescribeManagedEndpointOutput {
            crate::output::DescribeManagedEndpointOutput {
                endpoint: self.endpoint,
            }
        }
    }
}
impl DescribeManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput)
    pub fn builder() -> crate::output::describe_managed_endpoint_output::Builder {
        crate::output::describe_managed_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeJobRunOutput {
    /// <p>The output displays information about a job run.</p>
    pub job_run: std::option::Option<crate::model::JobRun>,
}
impl std::fmt::Debug for DescribeJobRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeJobRunOutput");
        formatter.field("job_run", &self.job_run);
        formatter.finish()
    }
}
/// See [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput)
pub mod describe_job_run_output {
    /// A builder for [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) job_run: std::option::Option<crate::model::JobRun>,
    }
    impl Builder {
        /// <p>The output displays information about a job run.</p>
        pub fn job_run(mut self, input: crate::model::JobRun) -> Self {
            self.job_run = Some(input);
            self
        }
        pub fn set_job_run(mut self, input: std::option::Option<crate::model::JobRun>) -> Self {
            self.job_run = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput)
        pub fn build(self) -> crate::output::DescribeJobRunOutput {
            crate::output::DescribeJobRunOutput {
                job_run: self.job_run,
            }
        }
    }
}
impl DescribeJobRunOutput {
    /// Creates a new builder-style object to manufacture [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput)
    pub fn builder() -> crate::output::describe_job_run_output::Builder {
        crate::output::describe_job_run_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteVirtualClusterOutput {
    /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
    pub id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteVirtualClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteVirtualClusterOutput");
        formatter.field("id", &self.id);
        formatter.finish()
    }
}
/// See [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput)
pub mod delete_virtual_cluster_output {
    /// A builder for [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>This output contains the ID of the virtual cluster that will be deleted. </p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput)
        pub fn build(self) -> crate::output::DeleteVirtualClusterOutput {
            crate::output::DeleteVirtualClusterOutput { id: self.id }
        }
    }
}
impl DeleteVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput)
    pub fn builder() -> crate::output::delete_virtual_cluster_output::Builder {
        crate::output::delete_virtual_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteManagedEndpointOutput {
    /// <p>The output displays the ID of the managed endpoint.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
    pub virtual_cluster_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteManagedEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteManagedEndpointOutput");
        formatter.field("id", &self.id);
        formatter.field("virtual_cluster_id", &self.virtual_cluster_id);
        formatter.finish()
    }
}
/// See [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput)
pub mod delete_managed_endpoint_output {
    /// A builder for [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The output displays the ID of the managed endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output displays the ID of the endpoint's virtual cluster.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput)
        pub fn build(self) -> crate::output::DeleteManagedEndpointOutput {
            crate::output::DeleteManagedEndpointOutput {
                id: self.id,
                virtual_cluster_id: self.virtual_cluster_id,
            }
        }
    }
}
impl DeleteManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput)
    pub fn builder() -> crate::output::delete_managed_endpoint_output::Builder {
        crate::output::delete_managed_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateVirtualClusterOutput {
    /// <p>This output contains the virtual cluster ID.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>This output contains the name of the virtual cluster.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>This output contains the ARN of virtual cluster.</p>
    pub arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateVirtualClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateVirtualClusterOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.finish()
    }
}
/// See [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput)
pub mod create_virtual_cluster_output {
    /// A builder for [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>This output contains the virtual cluster ID.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>This output contains the name of the virtual cluster.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>This output contains the ARN of virtual cluster.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput)
        pub fn build(self) -> crate::output::CreateVirtualClusterOutput {
            crate::output::CreateVirtualClusterOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
            }
        }
    }
}
impl CreateVirtualClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput)
    pub fn builder() -> crate::output::create_virtual_cluster_output::Builder {
        crate::output::create_virtual_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateManagedEndpointOutput {
    /// <p>The output contains the ID of the managed endpoint.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The output contains the name of the managed endpoint.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The output contains the ARN of the managed endpoint.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The output contains the ID of the virtual cluster.</p>
    pub virtual_cluster_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateManagedEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateManagedEndpointOutput");
        formatter.field("id", &self.id);
        formatter.field("name", &self.name);
        formatter.field("arn", &self.arn);
        formatter.field("virtual_cluster_id", &self.virtual_cluster_id);
        formatter.finish()
    }
}
/// See [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput)
pub mod create_managed_endpoint_output {
    /// A builder for [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The output contains the ID of the managed endpoint.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output contains the name of the managed endpoint.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The output contains the ARN of the managed endpoint.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The output contains the ID of the virtual cluster.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput)
        pub fn build(self) -> crate::output::CreateManagedEndpointOutput {
            crate::output::CreateManagedEndpointOutput {
                id: self.id,
                name: self.name,
                arn: self.arn,
                virtual_cluster_id: self.virtual_cluster_id,
            }
        }
    }
}
impl CreateManagedEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput)
    pub fn builder() -> crate::output::create_managed_endpoint_output::Builder {
        crate::output::create_managed_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelJobRunOutput {
    /// <p>The output contains the ID of the cancelled job run.</p>
    pub id: std::option::Option<std::string::String>,
    /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
    pub virtual_cluster_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CancelJobRunOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelJobRunOutput");
        formatter.field("id", &self.id);
        formatter.field("virtual_cluster_id", &self.virtual_cluster_id);
        formatter.finish()
    }
}
/// See [`CancelJobRunOutput`](crate::output::CancelJobRunOutput)
pub mod cancel_job_run_output {
    /// A builder for [`CancelJobRunOutput`](crate::output::CancelJobRunOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) id: std::option::Option<std::string::String>,
        pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The output contains the ID of the cancelled job run.</p>
        pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
            self.id = Some(input.into());
            self
        }
        pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.id = input;
            self
        }
        /// <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
        pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.virtual_cluster_id = Some(input.into());
            self
        }
        pub fn set_virtual_cluster_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.virtual_cluster_id = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelJobRunOutput`](crate::output::CancelJobRunOutput)
        pub fn build(self) -> crate::output::CancelJobRunOutput {
            crate::output::CancelJobRunOutput {
                id: self.id,
                virtual_cluster_id: self.virtual_cluster_id,
            }
        }
    }
}
impl CancelJobRunOutput {
    /// Creates a new builder-style object to manufacture [`CancelJobRunOutput`](crate::output::CancelJobRunOutput)
    pub fn builder() -> crate::output::cancel_job_run_output::Builder {
        crate::output::cancel_job_run_output::Builder::default()
    }
}
