// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_job_runs_output_next_token(
    input: &crate::output::ListJobRunsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_job_templates_output_next_token(
    input: &crate::output::ListJobTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_managed_endpoints_output_next_token(
    input: &crate::output::ListManagedEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_virtual_clusters_output_next_token(
    input: &crate::output::ListVirtualClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_runs_output_job_runs(
    input: crate::output::ListJobRunsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobRun>> {
    let input = match input.job_runs {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_job_templates_output_templates(
    input: crate::output::ListJobTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobTemplate>> {
    let input = match input.templates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_managed_endpoints_output_endpoints(
    input: crate::output::ListManagedEndpointsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Endpoint>> {
    let input = match input.endpoints {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_virtual_clusters_output_virtual_clusters(
    input: crate::output::ListVirtualClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VirtualCluster>> {
    let input = match input.virtual_clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
