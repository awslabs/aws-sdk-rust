// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn job_template_correct_errors(mut builder: crate::types::builders::JobTemplateBuilder) -> crate::types::builders::JobTemplateBuilder {
    if builder.job_template_data.is_none() {
        builder.job_template_data = {
            let builder = crate::types::builders::JobTemplateDataBuilder::default();
            crate::serde_util::job_template_data_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn container_provider_correct_errors(
    mut builder: crate::types::builders::ContainerProviderBuilder,
) -> crate::types::builders::ContainerProviderBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::ContainerProviderType>().ok()
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    builder
}

pub(crate) fn job_template_data_correct_errors(
    mut builder: crate::types::builders::JobTemplateDataBuilder,
) -> crate::types::builders::JobTemplateDataBuilder {
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.release_label.is_none() {
        builder.release_label = Some(Default::default())
    }
    if builder.job_driver.is_none() {
        builder.job_driver = {
            let builder = crate::types::builders::JobDriverBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn retry_policy_configuration_correct_errors(
    mut builder: crate::types::builders::RetryPolicyConfigurationBuilder,
) -> crate::types::builders::RetryPolicyConfigurationBuilder {
    if builder.max_attempts.is_none() {
        builder.max_attempts = Some(Default::default())
    }
    builder
}

pub(crate) fn retry_policy_execution_correct_errors(
    mut builder: crate::types::builders::RetryPolicyExecutionBuilder,
) -> crate::types::builders::RetryPolicyExecutionBuilder {
    if builder.current_attempt_count.is_none() {
        builder.current_attempt_count = Some(Default::default())
    }
    builder
}

pub(crate) fn spark_submit_job_driver_correct_errors(
    mut builder: crate::types::builders::SparkSubmitJobDriverBuilder,
) -> crate::types::builders::SparkSubmitJobDriverBuilder {
    if builder.entry_point.is_none() {
        builder.entry_point = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_monitoring_configuration_correct_errors(
    mut builder: crate::types::builders::CloudWatchMonitoringConfigurationBuilder,
) -> crate::types::builders::CloudWatchMonitoringConfigurationBuilder {
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_correct_errors(
    mut builder: crate::types::builders::ConfigurationBuilder,
) -> crate::types::builders::ConfigurationBuilder {
    if builder.classification.is_none() {
        builder.classification = Some(Default::default())
    }
    builder
}

pub(crate) fn container_log_rotation_configuration_correct_errors(
    mut builder: crate::types::builders::ContainerLogRotationConfigurationBuilder,
) -> crate::types::builders::ContainerLogRotationConfigurationBuilder {
    if builder.rotation_size.is_none() {
        builder.rotation_size = Some(Default::default())
    }
    if builder.max_files_to_keep.is_none() {
        builder.max_files_to_keep = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_monitoring_configuration_correct_errors(
    mut builder: crate::types::builders::S3MonitoringConfigurationBuilder,
) -> crate::types::builders::S3MonitoringConfigurationBuilder {
    if builder.log_uri.is_none() {
        builder.log_uri = Some(Default::default())
    }
    builder
}
