// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_monitoring_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MonitoringConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.managed_logs {
        #[allow(unused_mut)]
        let mut object_2 = object.key("managedLogs").start_object();
        crate::protocol_serde::shape_managed_logs::ser_managed_logs(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.persistent_app_ui {
        object.key("persistentAppUI").string(var_3.as_str());
    }
    if let Some(var_4) = &input.cloud_watch_monitoring_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("cloudWatchMonitoringConfiguration").start_object();
        crate::protocol_serde::shape_cloud_watch_monitoring_configuration::ser_cloud_watch_monitoring_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.s3_monitoring_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("s3MonitoringConfiguration").start_object();
        crate::protocol_serde::shape_s3_monitoring_configuration::ser_s3_monitoring_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.container_log_rotation_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("containerLogRotationConfiguration").start_object();
        crate::protocol_serde::shape_container_log_rotation_configuration::ser_container_log_rotation_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}

pub(crate) fn de_monitoring_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::MonitoringConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MonitoringConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "managedLogs" => {
                            builder = builder.set_managed_logs(crate::protocol_serde::shape_managed_logs::de_managed_logs(tokens)?);
                        }
                        "persistentAppUI" => {
                            builder = builder.set_persistent_app_ui(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PersistentAppUi::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "cloudWatchMonitoringConfiguration" => {
                            builder = builder.set_cloud_watch_monitoring_configuration(
                                crate::protocol_serde::shape_cloud_watch_monitoring_configuration::de_cloud_watch_monitoring_configuration(tokens)?,
                            );
                        }
                        "s3MonitoringConfiguration" => {
                            builder = builder.set_s3_monitoring_configuration(
                                crate::protocol_serde::shape_s3_monitoring_configuration::de_s3_monitoring_configuration(tokens)?,
                            );
                        }
                        "containerLogRotationConfiguration" => {
                            builder = builder.set_container_log_rotation_configuration(
                                crate::protocol_serde::shape_container_log_rotation_configuration::de_container_log_rotation_configuration(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
