// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The job driver for job type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SparkSqlJobDriver {
    /// <p>The SQL file to be executed.</p>
    #[doc(hidden)]
    pub entry_point: std::option::Option<std::string::String>,
    /// <p>The Spark parameters to be included in the Spark SQL command.</p>
    #[doc(hidden)]
    pub spark_sql_parameters: std::option::Option<std::string::String>,
}
impl SparkSqlJobDriver {
    /// <p>The SQL file to be executed.</p>
    pub fn entry_point(&self) -> std::option::Option<&str> {
        self.entry_point.as_deref()
    }
    /// <p>The Spark parameters to be included in the Spark SQL command.</p>
    pub fn spark_sql_parameters(&self) -> std::option::Option<&str> {
        self.spark_sql_parameters.as_deref()
    }
}
impl std::fmt::Debug for SparkSqlJobDriver {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SparkSqlJobDriver");
        formatter.field("entry_point", &"*** Sensitive Data Redacted ***");
        formatter.field("spark_sql_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SparkSqlJobDriver {
    /// Creates a new builder-style object to manufacture [`SparkSqlJobDriver`](crate::types::SparkSqlJobDriver).
    pub fn builder() -> crate::types::builders::SparkSqlJobDriverBuilder {
        crate::types::builders::SparkSqlJobDriverBuilder::default()
    }
}

/// A builder for [`SparkSqlJobDriver`](crate::types::SparkSqlJobDriver).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SparkSqlJobDriverBuilder {
    pub(crate) entry_point: std::option::Option<std::string::String>,
    pub(crate) spark_sql_parameters: std::option::Option<std::string::String>,
}
impl SparkSqlJobDriverBuilder {
    /// <p>The SQL file to be executed.</p>
    pub fn entry_point(mut self, input: impl Into<std::string::String>) -> Self {
        self.entry_point = Some(input.into());
        self
    }
    /// <p>The SQL file to be executed.</p>
    pub fn set_entry_point(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.entry_point = input;
        self
    }
    /// <p>The Spark parameters to be included in the Spark SQL command.</p>
    pub fn spark_sql_parameters(mut self, input: impl Into<std::string::String>) -> Self {
        self.spark_sql_parameters = Some(input.into());
        self
    }
    /// <p>The Spark parameters to be included in the Spark SQL command.</p>
    pub fn set_spark_sql_parameters(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.spark_sql_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`SparkSqlJobDriver`](crate::types::SparkSqlJobDriver).
    pub fn build(self) -> crate::types::SparkSqlJobDriver {
        crate::types::SparkSqlJobDriver {
            entry_point: self.entry_point,
            spark_sql_parameters: self.spark_sql_parameters,
        }
    }
}
impl std::fmt::Debug for SparkSqlJobDriverBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SparkSqlJobDriverBuilder");
        formatter.field("entry_point", &"*** Sensitive Data Redacted ***");
        formatter.field("spark_sql_parameters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
