// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information about the EKS cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EksInfo {
    /// <p>The namespaces of the EKS cluster.</p>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
}
impl EksInfo {
    /// <p>The namespaces of the EKS cluster.</p>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
}
impl EksInfo {
    /// Creates a new builder-style object to manufacture [`EksInfo`](crate::types::EksInfo).
    pub fn builder() -> crate::types::builders::EksInfoBuilder {
        crate::types::builders::EksInfoBuilder::default()
    }
}

/// A builder for [`EksInfo`](crate::types::EksInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EksInfoBuilder {
    pub(crate) namespace: std::option::Option<std::string::String>,
}
impl EksInfoBuilder {
    /// <p>The namespaces of the EKS cluster.</p>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespaces of the EKS cluster.</p>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// Consumes the builder and constructs a [`EksInfo`](crate::types::EksInfo).
    pub fn build(self) -> crate::types::EksInfo {
        crate::types::EksInfo {
            namespace: self.namespace,
        }
    }
}
