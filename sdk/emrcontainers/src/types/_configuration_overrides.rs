// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration specification to be used to override existing configurations.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigurationOverrides {
    /// <p>The configurations for the application running by the job run. </p>
    #[doc(hidden)]
    pub application_configuration: std::option::Option<std::vec::Vec<crate::types::Configuration>>,
    /// <p>The configurations for monitoring.</p>
    #[doc(hidden)]
    pub monitoring_configuration: std::option::Option<crate::types::MonitoringConfiguration>,
}
impl ConfigurationOverrides {
    /// <p>The configurations for the application running by the job run. </p>
    pub fn application_configuration(&self) -> std::option::Option<&[crate::types::Configuration]> {
        self.application_configuration.as_deref()
    }
    /// <p>The configurations for monitoring.</p>
    pub fn monitoring_configuration(
        &self,
    ) -> std::option::Option<&crate::types::MonitoringConfiguration> {
        self.monitoring_configuration.as_ref()
    }
}
impl ConfigurationOverrides {
    /// Creates a new builder-style object to manufacture [`ConfigurationOverrides`](crate::types::ConfigurationOverrides).
    pub fn builder() -> crate::types::builders::ConfigurationOverridesBuilder {
        crate::types::builders::ConfigurationOverridesBuilder::default()
    }
}

/// A builder for [`ConfigurationOverrides`](crate::types::ConfigurationOverrides).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigurationOverridesBuilder {
    pub(crate) application_configuration:
        std::option::Option<std::vec::Vec<crate::types::Configuration>>,
    pub(crate) monitoring_configuration: std::option::Option<crate::types::MonitoringConfiguration>,
}
impl ConfigurationOverridesBuilder {
    /// Appends an item to `application_configuration`.
    ///
    /// To override the contents of this collection use [`set_application_configuration`](Self::set_application_configuration).
    ///
    /// <p>The configurations for the application running by the job run. </p>
    pub fn application_configuration(mut self, input: crate::types::Configuration) -> Self {
        let mut v = self.application_configuration.unwrap_or_default();
        v.push(input);
        self.application_configuration = Some(v);
        self
    }
    /// <p>The configurations for the application running by the job run. </p>
    pub fn set_application_configuration(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Configuration>>,
    ) -> Self {
        self.application_configuration = input;
        self
    }
    /// <p>The configurations for monitoring.</p>
    pub fn monitoring_configuration(
        mut self,
        input: crate::types::MonitoringConfiguration,
    ) -> Self {
        self.monitoring_configuration = Some(input);
        self
    }
    /// <p>The configurations for monitoring.</p>
    pub fn set_monitoring_configuration(
        mut self,
        input: std::option::Option<crate::types::MonitoringConfiguration>,
    ) -> Self {
        self.monitoring_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigurationOverrides`](crate::types::ConfigurationOverrides).
    pub fn build(self) -> crate::types::ConfigurationOverrides {
        crate::types::ConfigurationOverrides {
            application_configuration: self.application_configuration,
            monitoring_configuration: self.monitoring_configuration,
        }
    }
}
