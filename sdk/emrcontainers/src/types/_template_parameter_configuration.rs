// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a job template parameter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateParameterConfiguration {
    /// <p>The type of the job template parameter. Allowed values are: ‘String’, ‘Number’.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TemplateParameterDataType>,
    /// <p>The default value for the job template parameter.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
}
impl TemplateParameterConfiguration {
    /// <p>The type of the job template parameter. Allowed values are: ‘String’, ‘Number’.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TemplateParameterDataType> {
        self.r#type.as_ref()
    }
    /// <p>The default value for the job template parameter.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl TemplateParameterConfiguration {
    /// Creates a new builder-style object to manufacture [`TemplateParameterConfiguration`](crate::types::TemplateParameterConfiguration).
    pub fn builder() -> crate::types::builders::TemplateParameterConfigurationBuilder {
        crate::types::builders::TemplateParameterConfigurationBuilder::default()
    }
}

/// A builder for [`TemplateParameterConfiguration`](crate::types::TemplateParameterConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateParameterConfigurationBuilder {
    pub(crate) r#type: std::option::Option<crate::types::TemplateParameterDataType>,
    pub(crate) default_value: std::option::Option<std::string::String>,
}
impl TemplateParameterConfigurationBuilder {
    /// <p>The type of the job template parameter. Allowed values are: ‘String’, ‘Number’.</p>
    pub fn r#type(mut self, input: crate::types::TemplateParameterDataType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the job template parameter. Allowed values are: ‘String’, ‘Number’.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::TemplateParameterDataType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The default value for the job template parameter.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value for the job template parameter.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateParameterConfiguration`](crate::types::TemplateParameterConfiguration).
    pub fn build(self) -> crate::types::TemplateParameterConfiguration {
        crate::types::TemplateParameterConfiguration {
            r#type: self.r#type,
            default_value: self.default_value,
        }
    }
}
