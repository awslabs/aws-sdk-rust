// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This entity represents the endpoint that is managed by Amazon EMR on EKS.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Endpoint {
    /// <p>The ID of the endpoint.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the endpoint.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of the endpoint.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ID of the endpoint's virtual cluster.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The state of the endpoint.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::EndpointState>,
    /// <p>The EMR release version to be used for the endpoint.</p>
    #[doc(hidden)]
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The execution role ARN of the endpoint.</p>
    #[doc(hidden)]
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>The certificate ARN of the endpoint. This field is under deprecation and will be removed in future.</p>
    #[deprecated(
        note = "Customer provided certificate-arn is deprecated and would be removed in future."
    )]
    #[doc(hidden)]
    pub certificate_arn: std::option::Option<std::string::String>,
    /// <p>The certificate generated by emr control plane on customer behalf to secure the managed endpoint.</p>
    #[doc(hidden)]
    pub certificate_authority: std::option::Option<crate::types::Certificate>,
    /// <p>The configuration settings that are used to override existing configurations for endpoints.</p>
    #[doc(hidden)]
    pub configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    /// <p>The server URL of the endpoint.</p>
    #[doc(hidden)]
    pub server_url: std::option::Option<std::string::String>,
    /// <p>The date and time when the endpoint was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The security group configuration of the endpoint. </p>
    #[doc(hidden)]
    pub security_group: std::option::Option<std::string::String>,
    /// <p>The subnet IDs of the endpoint. </p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> Additional details of the endpoint state. </p>
    #[doc(hidden)]
    pub state_details: std::option::Option<std::string::String>,
    /// <p> The reasons why the endpoint has failed. </p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<crate::types::FailureReason>,
    /// <p>The tags of the endpoint. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl Endpoint {
    /// <p>The ID of the endpoint.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ID of the endpoint's virtual cluster.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
    /// <p>The type of the endpoint.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The state of the endpoint.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::EndpointState> {
        self.state.as_ref()
    }
    /// <p>The EMR release version to be used for the endpoint.</p>
    pub fn release_label(&self) -> std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The execution role ARN of the endpoint.</p>
    pub fn execution_role_arn(&self) -> std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The certificate ARN of the endpoint. This field is under deprecation and will be removed in future.</p>
    #[deprecated(
        note = "Customer provided certificate-arn is deprecated and would be removed in future."
    )]
    pub fn certificate_arn(&self) -> std::option::Option<&str> {
        self.certificate_arn.as_deref()
    }
    /// <p>The certificate generated by emr control plane on customer behalf to secure the managed endpoint.</p>
    pub fn certificate_authority(&self) -> std::option::Option<&crate::types::Certificate> {
        self.certificate_authority.as_ref()
    }
    /// <p>The configuration settings that are used to override existing configurations for endpoints.</p>
    pub fn configuration_overrides(
        &self,
    ) -> std::option::Option<&crate::types::ConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
    /// <p>The server URL of the endpoint.</p>
    pub fn server_url(&self) -> std::option::Option<&str> {
        self.server_url.as_deref()
    }
    /// <p>The date and time when the endpoint was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The security group configuration of the endpoint. </p>
    pub fn security_group(&self) -> std::option::Option<&str> {
        self.security_group.as_deref()
    }
    /// <p>The subnet IDs of the endpoint. </p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p> Additional details of the endpoint state. </p>
    pub fn state_details(&self) -> std::option::Option<&str> {
        self.state_details.as_deref()
    }
    /// <p> The reasons why the endpoint has failed. </p>
    pub fn failure_reason(&self) -> std::option::Option<&crate::types::FailureReason> {
        self.failure_reason.as_ref()
    }
    /// <p>The tags of the endpoint. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl Endpoint {
    /// Creates a new builder-style object to manufacture [`Endpoint`](crate::types::Endpoint).
    pub fn builder() -> crate::types::builders::EndpointBuilder {
        crate::types::builders::EndpointBuilder::default()
    }
}

/// A builder for [`Endpoint`](crate::types::Endpoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EndpointBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::EndpointState>,
    pub(crate) release_label: std::option::Option<std::string::String>,
    pub(crate) execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_arn: std::option::Option<std::string::String>,
    pub(crate) certificate_authority: std::option::Option<crate::types::Certificate>,
    pub(crate) configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    pub(crate) server_url: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) security_group: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) state_details: std::option::Option<std::string::String>,
    pub(crate) failure_reason: std::option::Option<crate::types::FailureReason>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl EndpointBuilder {
    /// <p>The ID of the endpoint.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the endpoint.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the endpoint.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the endpoint.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ID of the endpoint's virtual cluster.</p>
    pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_cluster_id = Some(input.into());
        self
    }
    /// <p>The ID of the endpoint's virtual cluster.</p>
    pub fn set_virtual_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_cluster_id = input;
        self
    }
    /// <p>The type of the endpoint.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the endpoint.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The state of the endpoint.</p>
    pub fn state(mut self, input: crate::types::EndpointState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the endpoint.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::EndpointState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The EMR release version to be used for the endpoint.</p>
    pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_label = Some(input.into());
        self
    }
    /// <p>The EMR release version to be used for the endpoint.</p>
    pub fn set_release_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The execution role ARN of the endpoint.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role_arn = Some(input.into());
        self
    }
    /// <p>The execution role ARN of the endpoint.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The certificate ARN of the endpoint. This field is under deprecation and will be removed in future.</p>
    #[deprecated(
        note = "Customer provided certificate-arn is deprecated and would be removed in future."
    )]
    pub fn certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_arn = Some(input.into());
        self
    }
    /// <p>The certificate ARN of the endpoint. This field is under deprecation and will be removed in future.</p>
    #[deprecated(
        note = "Customer provided certificate-arn is deprecated and would be removed in future."
    )]
    pub fn set_certificate_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.certificate_arn = input;
        self
    }
    /// <p>The certificate generated by emr control plane on customer behalf to secure the managed endpoint.</p>
    pub fn certificate_authority(mut self, input: crate::types::Certificate) -> Self {
        self.certificate_authority = Some(input);
        self
    }
    /// <p>The certificate generated by emr control plane on customer behalf to secure the managed endpoint.</p>
    pub fn set_certificate_authority(
        mut self,
        input: std::option::Option<crate::types::Certificate>,
    ) -> Self {
        self.certificate_authority = input;
        self
    }
    /// <p>The configuration settings that are used to override existing configurations for endpoints.</p>
    pub fn configuration_overrides(mut self, input: crate::types::ConfigurationOverrides) -> Self {
        self.configuration_overrides = Some(input);
        self
    }
    /// <p>The configuration settings that are used to override existing configurations for endpoints.</p>
    pub fn set_configuration_overrides(
        mut self,
        input: std::option::Option<crate::types::ConfigurationOverrides>,
    ) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// <p>The server URL of the endpoint.</p>
    pub fn server_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_url = Some(input.into());
        self
    }
    /// <p>The server URL of the endpoint.</p>
    pub fn set_server_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.server_url = input;
        self
    }
    /// <p>The date and time when the endpoint was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The date and time when the endpoint was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The security group configuration of the endpoint. </p>
    pub fn security_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.security_group = Some(input.into());
        self
    }
    /// <p>The security group configuration of the endpoint. </p>
    pub fn set_security_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.security_group = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The subnet IDs of the endpoint. </p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The subnet IDs of the endpoint. </p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// <p> Additional details of the endpoint state. </p>
    pub fn state_details(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_details = Some(input.into());
        self
    }
    /// <p> Additional details of the endpoint state. </p>
    pub fn set_state_details(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state_details = input;
        self
    }
    /// <p> The reasons why the endpoint has failed. </p>
    pub fn failure_reason(mut self, input: crate::types::FailureReason) -> Self {
        self.failure_reason = Some(input);
        self
    }
    /// <p> The reasons why the endpoint has failed. </p>
    pub fn set_failure_reason(
        mut self,
        input: std::option::Option<crate::types::FailureReason>,
    ) -> Self {
        self.failure_reason = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags of the endpoint. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags of the endpoint. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Endpoint`](crate::types::Endpoint).
    pub fn build(self) -> crate::types::Endpoint {
        crate::types::Endpoint {
            id: self.id,
            name: self.name,
            arn: self.arn,
            virtual_cluster_id: self.virtual_cluster_id,
            r#type: self.r#type,
            state: self.state,
            release_label: self.release_label,
            execution_role_arn: self.execution_role_arn,
            certificate_arn: self.certificate_arn,
            certificate_authority: self.certificate_authority,
            configuration_overrides: self.configuration_overrides,
            server_url: self.server_url,
            created_at: self.created_at,
            security_group: self.security_group,
            subnet_ids: self.subnet_ids,
            state_details: self.state_details,
            failure_reason: self.failure_reason,
            tags: self.tags,
        }
    }
}
