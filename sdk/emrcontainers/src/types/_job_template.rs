// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This entity describes a job template. Job template stores values of StartJobRun API request in a template and can be used to start a job run. Job template allows two use cases: avoid repeating recurring StartJobRun API request values, enforcing certain values in StartJobRun API request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobTemplate {
    /// <p>The name of the job template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the job template.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the job template.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p> The date and time when the job template was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The user who created the job template.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the job template.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The job template data which holds values of StartJobRun API request.</p>
    pub job_template_data: ::std::option::Option<crate::types::JobTemplateData>,
    /// <p> The KMS key ARN used to encrypt the job template.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The error message in case the decryption of job template fails.</p>
    pub decryption_error: ::std::option::Option<::std::string::String>,
}
impl JobTemplate {
    /// <p>The name of the job template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the job template.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The ARN of the job template.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> The date and time when the job template was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p> The user who created the job template.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The tags assigned to the job template.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The job template data which holds values of StartJobRun API request.</p>
    pub fn job_template_data(&self) -> ::std::option::Option<&crate::types::JobTemplateData> {
        self.job_template_data.as_ref()
    }
    /// <p> The KMS key ARN used to encrypt the job template.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
    /// <p>The error message in case the decryption of job template fails.</p>
    pub fn decryption_error(&self) -> ::std::option::Option<&str> {
        self.decryption_error.as_deref()
    }
}
impl JobTemplate {
    /// Creates a new builder-style object to manufacture [`JobTemplate`](crate::types::JobTemplate).
    pub fn builder() -> crate::types::builders::JobTemplateBuilder {
        crate::types::builders::JobTemplateBuilder::default()
    }
}

/// A builder for [`JobTemplate`](crate::types::JobTemplate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobTemplateBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) job_template_data: ::std::option::Option<crate::types::JobTemplateData>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) decryption_error: ::std::option::Option<::std::string::String>,
}
impl JobTemplateBuilder {
    /// <p>The name of the job template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the job template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the job template.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the job template.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the job template.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the job template.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the job template.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the job template.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p> The date and time when the job template was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> The date and time when the job template was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p> The date and time when the job template was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p> The user who created the job template.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The user who created the job template.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p> The user who created the job template.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the job template.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The tags assigned to the job template.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the job template.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The job template data which holds values of StartJobRun API request.</p>
    /// This field is required.
    pub fn job_template_data(mut self, input: crate::types::JobTemplateData) -> Self {
        self.job_template_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The job template data which holds values of StartJobRun API request.</p>
    pub fn set_job_template_data(mut self, input: ::std::option::Option<crate::types::JobTemplateData>) -> Self {
        self.job_template_data = input;
        self
    }
    /// <p>The job template data which holds values of StartJobRun API request.</p>
    pub fn get_job_template_data(&self) -> &::std::option::Option<crate::types::JobTemplateData> {
        &self.job_template_data
    }
    /// <p> The KMS key ARN used to encrypt the job template.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The KMS key ARN used to encrypt the job template.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p> The KMS key ARN used to encrypt the job template.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    /// <p>The error message in case the decryption of job template fails.</p>
    pub fn decryption_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.decryption_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message in case the decryption of job template fails.</p>
    pub fn set_decryption_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.decryption_error = input;
        self
    }
    /// <p>The error message in case the decryption of job template fails.</p>
    pub fn get_decryption_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.decryption_error
    }
    /// Consumes the builder and constructs a [`JobTemplate`](crate::types::JobTemplate).
    pub fn build(self) -> crate::types::JobTemplate {
        crate::types::JobTemplate {
            name: self.name,
            id: self.id,
            arn: self.arn,
            created_at: self.created_at,
            created_by: self.created_by,
            tags: self.tags,
            job_template_data: self.job_template_data,
            kms_key_arn: self.kms_key_arn,
            decryption_error: self.decryption_error,
        }
    }
}
