// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A configuration specification to be used to override existing configurations. This data type allows job template parameters to be specified within.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParametricConfigurationOverrides {
    /// <p> The configurations for the application running by the job run.</p>
    pub application_configuration: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>,
    /// <p> The configurations for monitoring. </p>
    pub monitoring_configuration: ::std::option::Option<crate::types::ParametricMonitoringConfiguration>,
}
impl ParametricConfigurationOverrides {
    /// <p> The configurations for the application running by the job run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.application_configuration.is_none()`.
    pub fn application_configuration(&self) -> &[crate::types::Configuration] {
        self.application_configuration.as_deref().unwrap_or_default()
    }
    /// <p> The configurations for monitoring. </p>
    pub fn monitoring_configuration(&self) -> ::std::option::Option<&crate::types::ParametricMonitoringConfiguration> {
        self.monitoring_configuration.as_ref()
    }
}
impl ParametricConfigurationOverrides {
    /// Creates a new builder-style object to manufacture [`ParametricConfigurationOverrides`](crate::types::ParametricConfigurationOverrides).
    pub fn builder() -> crate::types::builders::ParametricConfigurationOverridesBuilder {
        crate::types::builders::ParametricConfigurationOverridesBuilder::default()
    }
}

/// A builder for [`ParametricConfigurationOverrides`](crate::types::ParametricConfigurationOverrides).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParametricConfigurationOverridesBuilder {
    pub(crate) application_configuration: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>,
    pub(crate) monitoring_configuration: ::std::option::Option<crate::types::ParametricMonitoringConfiguration>,
}
impl ParametricConfigurationOverridesBuilder {
    /// Appends an item to `application_configuration`.
    ///
    /// To override the contents of this collection use [`set_application_configuration`](Self::set_application_configuration).
    ///
    /// <p> The configurations for the application running by the job run.</p>
    pub fn application_configuration(mut self, input: crate::types::Configuration) -> Self {
        let mut v = self.application_configuration.unwrap_or_default();
        v.push(input);
        self.application_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p> The configurations for the application running by the job run.</p>
    pub fn set_application_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Configuration>>) -> Self {
        self.application_configuration = input;
        self
    }
    /// <p> The configurations for the application running by the job run.</p>
    pub fn get_application_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Configuration>> {
        &self.application_configuration
    }
    /// <p> The configurations for monitoring. </p>
    pub fn monitoring_configuration(mut self, input: crate::types::ParametricMonitoringConfiguration) -> Self {
        self.monitoring_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> The configurations for monitoring. </p>
    pub fn set_monitoring_configuration(mut self, input: ::std::option::Option<crate::types::ParametricMonitoringConfiguration>) -> Self {
        self.monitoring_configuration = input;
        self
    }
    /// <p> The configurations for monitoring. </p>
    pub fn get_monitoring_configuration(&self) -> &::std::option::Option<crate::types::ParametricMonitoringConfiguration> {
        &self.monitoring_configuration
    }
    /// Consumes the builder and constructs a [`ParametricConfigurationOverrides`](crate::types::ParametricConfigurationOverrides).
    pub fn build(self) -> crate::types::ParametricConfigurationOverrides {
        crate::types::ParametricConfigurationOverrides {
            application_configuration: self.application_configuration,
            monitoring_configuration: self.monitoring_configuration,
        }
    }
}
