// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartJobRunInput {
    /// <p>The name of the job run.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The virtual cluster ID for which the job run request is submitted.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    /// <p>The client idempotency token of the job run request. </p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>The execution role ARN for the job run.</p>
    #[doc(hidden)]
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon EMR release version to use for the job run.</p>
    #[doc(hidden)]
    pub release_label: std::option::Option<std::string::String>,
    /// <p>The job driver for the job run.</p>
    #[doc(hidden)]
    pub job_driver: std::option::Option<crate::types::JobDriver>,
    /// <p>The configuration overrides for the job run.</p>
    #[doc(hidden)]
    pub configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    /// <p>The tags assigned to job runs.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The job template ID to be used to start the job run.</p>
    #[doc(hidden)]
    pub job_template_id: std::option::Option<std::string::String>,
    /// <p>The values of job template parameters to start a job run.</p>
    #[doc(hidden)]
    pub job_template_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StartJobRunInput {
    /// <p>The name of the job run.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The virtual cluster ID for which the job run request is submitted.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
    /// <p>The client idempotency token of the job run request. </p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The execution role ARN for the job run.</p>
    pub fn execution_role_arn(&self) -> std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>The Amazon EMR release version to use for the job run.</p>
    pub fn release_label(&self) -> std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>The job driver for the job run.</p>
    pub fn job_driver(&self) -> std::option::Option<&crate::types::JobDriver> {
        self.job_driver.as_ref()
    }
    /// <p>The configuration overrides for the job run.</p>
    pub fn configuration_overrides(
        &self,
    ) -> std::option::Option<&crate::types::ConfigurationOverrides> {
        self.configuration_overrides.as_ref()
    }
    /// <p>The tags assigned to job runs.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>The job template ID to be used to start the job run.</p>
    pub fn job_template_id(&self) -> std::option::Option<&str> {
        self.job_template_id.as_deref()
    }
    /// <p>The values of job template parameters to start a job run.</p>
    pub fn job_template_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.job_template_parameters.as_ref()
    }
}
impl StartJobRunInput {
    /// Creates a new builder-style object to manufacture [`StartJobRunInput`](crate::operation::start_job_run::StartJobRunInput).
    pub fn builder() -> crate::operation::start_job_run::builders::StartJobRunInputBuilder {
        crate::operation::start_job_run::builders::StartJobRunInputBuilder::default()
    }
}

/// A builder for [`StartJobRunInput`](crate::operation::start_job_run::StartJobRunInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartJobRunInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) release_label: std::option::Option<std::string::String>,
    pub(crate) job_driver: std::option::Option<crate::types::JobDriver>,
    pub(crate) configuration_overrides: std::option::Option<crate::types::ConfigurationOverrides>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) job_template_id: std::option::Option<std::string::String>,
    pub(crate) job_template_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StartJobRunInputBuilder {
    /// <p>The name of the job run.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the job run.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The virtual cluster ID for which the job run request is submitted.</p>
    pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_cluster_id = Some(input.into());
        self
    }
    /// <p>The virtual cluster ID for which the job run request is submitted.</p>
    pub fn set_virtual_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_cluster_id = input;
        self
    }
    /// <p>The client idempotency token of the job run request. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>The client idempotency token of the job run request. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>The execution role ARN for the job run.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role_arn = Some(input.into());
        self
    }
    /// <p>The execution role ARN for the job run.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon EMR release version to use for the job run.</p>
    pub fn release_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.release_label = Some(input.into());
        self
    }
    /// <p>The Amazon EMR release version to use for the job run.</p>
    pub fn set_release_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn job_driver(mut self, input: crate::types::JobDriver) -> Self {
        self.job_driver = Some(input);
        self
    }
    /// <p>The job driver for the job run.</p>
    pub fn set_job_driver(mut self, input: std::option::Option<crate::types::JobDriver>) -> Self {
        self.job_driver = input;
        self
    }
    /// <p>The configuration overrides for the job run.</p>
    pub fn configuration_overrides(mut self, input: crate::types::ConfigurationOverrides) -> Self {
        self.configuration_overrides = Some(input);
        self
    }
    /// <p>The configuration overrides for the job run.</p>
    pub fn set_configuration_overrides(
        mut self,
        input: std::option::Option<crate::types::ConfigurationOverrides>,
    ) -> Self {
        self.configuration_overrides = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to job runs.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags assigned to job runs.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The job template ID to be used to start the job run.</p>
    pub fn job_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_template_id = Some(input.into());
        self
    }
    /// <p>The job template ID to be used to start the job run.</p>
    pub fn set_job_template_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_template_id = input;
        self
    }
    /// Adds a key-value pair to `job_template_parameters`.
    ///
    /// To override the contents of this collection use [`set_job_template_parameters`](Self::set_job_template_parameters).
    ///
    /// <p>The values of job template parameters to start a job run.</p>
    pub fn job_template_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.job_template_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.job_template_parameters = Some(hash_map);
        self
    }
    /// <p>The values of job template parameters to start a job run.</p>
    pub fn set_job_template_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.job_template_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`StartJobRunInput`](crate::operation::start_job_run::StartJobRunInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_job_run::StartJobRunInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_job_run::StartJobRunInput {
            name: self.name,
            virtual_cluster_id: self.virtual_cluster_id,
            client_token: self.client_token,
            execution_role_arn: self.execution_role_arn,
            release_label: self.release_label,
            job_driver: self.job_driver,
            configuration_overrides: self.configuration_overrides,
            tags: self.tags,
            job_template_id: self.job_template_id,
            job_template_parameters: self.job_template_parameters,
        })
    }
}
