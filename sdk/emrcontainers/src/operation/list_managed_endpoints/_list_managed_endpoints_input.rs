// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListManagedEndpointsInput {
    /// <p>The ID of the virtual cluster.</p>
    #[doc(hidden)]
    pub virtual_cluster_id: std::option::Option<std::string::String>,
    /// <p>The date and time before which the endpoints are created.</p>
    #[doc(hidden)]
    pub created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The date and time after which the endpoints are created.</p>
    #[doc(hidden)]
    pub created_after: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The types of the managed endpoints.</p>
    #[doc(hidden)]
    pub types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The states of the managed endpoints.</p>
    #[doc(hidden)]
    pub states: std::option::Option<std::vec::Vec<crate::types::EndpointState>>,
    /// <p>The maximum number of managed endpoints that can be listed.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p> The token for the next set of managed endpoints to return. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListManagedEndpointsInput {
    /// <p>The ID of the virtual cluster.</p>
    pub fn virtual_cluster_id(&self) -> std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
    /// <p>The date and time before which the endpoints are created.</p>
    pub fn created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p> The date and time after which the endpoints are created.</p>
    pub fn created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>The types of the managed endpoints.</p>
    pub fn types(&self) -> std::option::Option<&[std::string::String]> {
        self.types.as_deref()
    }
    /// <p>The states of the managed endpoints.</p>
    pub fn states(&self) -> std::option::Option<&[crate::types::EndpointState]> {
        self.states.as_deref()
    }
    /// <p>The maximum number of managed endpoints that can be listed.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p> The token for the next set of managed endpoints to return. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListManagedEndpointsInput {
    /// Creates a new builder-style object to manufacture [`ListManagedEndpointsInput`](crate::operation::list_managed_endpoints::ListManagedEndpointsInput).
    pub fn builder(
    ) -> crate::operation::list_managed_endpoints::builders::ListManagedEndpointsInputBuilder {
        crate::operation::list_managed_endpoints::builders::ListManagedEndpointsInputBuilder::default()
    }
}

/// A builder for [`ListManagedEndpointsInput`](crate::operation::list_managed_endpoints::ListManagedEndpointsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListManagedEndpointsInputBuilder {
    pub(crate) virtual_cluster_id: std::option::Option<std::string::String>,
    pub(crate) created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_after: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) states: std::option::Option<std::vec::Vec<crate::types::EndpointState>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListManagedEndpointsInputBuilder {
    /// <p>The ID of the virtual cluster.</p>
    pub fn virtual_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_cluster_id = Some(input.into());
        self
    }
    /// <p>The ID of the virtual cluster.</p>
    pub fn set_virtual_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_cluster_id = input;
        self
    }
    /// <p>The date and time before which the endpoints are created.</p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_before = Some(input);
        self
    }
    /// <p>The date and time before which the endpoints are created.</p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_before = input;
        self
    }
    /// <p> The date and time after which the endpoints are created.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_after = Some(input);
        self
    }
    /// <p> The date and time after which the endpoints are created.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_after = input;
        self
    }
    /// Appends an item to `types`.
    ///
    /// To override the contents of this collection use [`set_types`](Self::set_types).
    ///
    /// <p>The types of the managed endpoints.</p>
    pub fn types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.types.unwrap_or_default();
        v.push(input.into());
        self.types = Some(v);
        self
    }
    /// <p>The types of the managed endpoints.</p>
    pub fn set_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.types = input;
        self
    }
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>The states of the managed endpoints.</p>
    pub fn states(mut self, input: crate::types::EndpointState) -> Self {
        let mut v = self.states.unwrap_or_default();
        v.push(input);
        self.states = Some(v);
        self
    }
    /// <p>The states of the managed endpoints.</p>
    pub fn set_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EndpointState>>,
    ) -> Self {
        self.states = input;
        self
    }
    /// <p>The maximum number of managed endpoints that can be listed.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of managed endpoints that can be listed.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> The token for the next set of managed endpoints to return. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The token for the next set of managed endpoints to return. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListManagedEndpointsInput`](crate::operation::list_managed_endpoints::ListManagedEndpointsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_managed_endpoints::ListManagedEndpointsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_managed_endpoints::ListManagedEndpointsInput {
                virtual_cluster_id: self.virtual_cluster_id,
                created_before: self.created_before,
                created_after: self.created_after,
                types: self.types,
                states: self.states,
                max_results: self.max_results,
                next_token: self.next_token,
            },
        )
    }
}
