// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListJobRunsInput {
    /// <p>The ID of the virtual cluster for which to list the job run. </p>
    pub virtual_cluster_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time before which the job runs were submitted.</p>
    pub created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date and time after which the job runs were submitted.</p>
    pub created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The name of the job run.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The states of the job run.</p>
    pub states: ::std::option::Option<::std::vec::Vec<crate::types::JobRunState>>,
    /// <p>The maximum number of job runs that can be listed.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token for the next set of job runs to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListJobRunsInput {
    /// <p>The ID of the virtual cluster for which to list the job run. </p>
    pub fn virtual_cluster_id(&self) -> ::std::option::Option<&str> {
        self.virtual_cluster_id.as_deref()
    }
    /// <p>The date and time before which the job runs were submitted.</p>
    pub fn created_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>The date and time after which the job runs were submitted.</p>
    pub fn created_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
    /// <p>The name of the job run.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The states of the job run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.states.is_none()`.
    pub fn states(&self) -> &[crate::types::JobRunState] {
        self.states.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of job runs that can be listed.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token for the next set of job runs to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListJobRunsInput {
    /// Creates a new builder-style object to manufacture [`ListJobRunsInput`](crate::operation::list_job_runs::ListJobRunsInput).
    pub fn builder() -> crate::operation::list_job_runs::builders::ListJobRunsInputBuilder {
        crate::operation::list_job_runs::builders::ListJobRunsInputBuilder::default()
    }
}

/// A builder for [`ListJobRunsInput`](crate::operation::list_job_runs::ListJobRunsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListJobRunsInputBuilder {
    pub(crate) virtual_cluster_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) states: ::std::option::Option<::std::vec::Vec<crate::types::JobRunState>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListJobRunsInputBuilder {
    /// <p>The ID of the virtual cluster for which to list the job run. </p>
    /// This field is required.
    pub fn virtual_cluster_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_cluster_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual cluster for which to list the job run. </p>
    pub fn set_virtual_cluster_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_cluster_id = input;
        self
    }
    /// <p>The ID of the virtual cluster for which to list the job run. </p>
    pub fn get_virtual_cluster_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_cluster_id
    }
    /// <p>The date and time before which the job runs were submitted.</p>
    pub fn created_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time before which the job runs were submitted.</p>
    pub fn set_created_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_before = input;
        self
    }
    /// <p>The date and time before which the job runs were submitted.</p>
    pub fn get_created_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_before
    }
    /// <p>The date and time after which the job runs were submitted.</p>
    pub fn created_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time after which the job runs were submitted.</p>
    pub fn set_created_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_after = input;
        self
    }
    /// <p>The date and time after which the job runs were submitted.</p>
    pub fn get_created_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_after
    }
    /// <p>The name of the job run.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the job run.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the job run.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>The states of the job run.</p>
    pub fn states(mut self, input: crate::types::JobRunState) -> Self {
        let mut v = self.states.unwrap_or_default();
        v.push(input);
        self.states = ::std::option::Option::Some(v);
        self
    }
    /// <p>The states of the job run.</p>
    pub fn set_states(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::JobRunState>>) -> Self {
        self.states = input;
        self
    }
    /// <p>The states of the job run.</p>
    pub fn get_states(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::JobRunState>> {
        &self.states
    }
    /// <p>The maximum number of job runs that can be listed.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of job runs that can be listed.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of job runs that can be listed.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token for the next set of job runs to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token for the next set of job runs to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token for the next set of job runs to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListJobRunsInput`](crate::operation::list_job_runs::ListJobRunsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_job_runs::ListJobRunsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_job_runs::ListJobRunsInput {
            virtual_cluster_id: self.virtual_cluster_id,
            created_before: self.created_before,
            created_after: self.created_after,
            name: self.name,
            states: self.states,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
