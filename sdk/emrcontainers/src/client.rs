// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon EMR Containers
///
/// Client for invoking operations on Amazon EMR Containers. Each operation on Amazon EMR Containers is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_emrcontainers::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_emrcontainers::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_emrcontainers::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CancelJobRun`](crate::client::fluent_builders::CancelJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::CancelJobRun::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::CancelJobRun::set_id): <p>The ID of the job run to cancel.</p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::CancelJobRun::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::CancelJobRun::set_virtual_cluster_id): <p>The ID of the virtual cluster for which the job run will be canceled.</p>
    /// - On success, responds with [`CancelJobRunOutput`](crate::output::CancelJobRunOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CancelJobRunOutput::id): <p>The output contains the ID of the cancelled job run.</p>
    ///   - [`virtual_cluster_id(Option<String>)`](crate::output::CancelJobRunOutput::virtual_cluster_id): <p>The output contains the virtual cluster ID for which the job run is cancelled.</p>
    /// - On failure, responds with [`SdkError<CancelJobRunError>`](crate::error::CancelJobRunError)
    pub fn cancel_job_run(&self) -> crate::client::fluent_builders::CancelJobRun {
        crate::client::fluent_builders::CancelJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateJobTemplate`](crate::client::fluent_builders::CreateJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_name): <p>The specified name of the job template.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_client_token): <p>The client token of the job template.</p>
    ///   - [`job_template_data(JobTemplateData)`](crate::client::fluent_builders::CreateJobTemplate::job_template_data) / [`set_job_template_data(Option<JobTemplateData>)`](crate::client::fluent_builders::CreateJobTemplate::set_job_template_data): <p>The job template data which holds values of StartJobRun API request.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateJobTemplate::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateJobTemplate::set_tags): <p>The tags that are associated with the job template.</p>
    ///   - [`kms_key_arn(impl Into<String>)`](crate::client::fluent_builders::CreateJobTemplate::kms_key_arn) / [`set_kms_key_arn(Option<String>)`](crate::client::fluent_builders::CreateJobTemplate::set_kms_key_arn): <p>The KMS key ARN used to encrypt the job template.</p>
    /// - On success, responds with [`CreateJobTemplateOutput`](crate::output::CreateJobTemplateOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateJobTemplateOutput::id): <p>This output display the created job template ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateJobTemplateOutput::name): <p>This output displays the name of the created job template.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateJobTemplateOutput::arn): <p>This output display the ARN of the created job template.</p>
    ///   - [`created_at(Option<DateTime>)`](crate::output::CreateJobTemplateOutput::created_at): <p>This output displays the date and time when the job template was created.</p>
    /// - On failure, responds with [`SdkError<CreateJobTemplateError>`](crate::error::CreateJobTemplateError)
    pub fn create_job_template(&self) -> crate::client::fluent_builders::CreateJobTemplate {
        crate::client::fluent_builders::CreateJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateManagedEndpoint`](crate::client::fluent_builders::CreateManagedEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_name): <p>The name of the managed endpoint.</p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_virtual_cluster_id): <p>The ID of the virtual cluster for which a managed endpoint is created.</p>
    ///   - [`r#type(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::type) / [`set_type(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_type): <p>The type of the managed endpoint.</p>
    ///   - [`release_label(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::release_label) / [`set_release_label(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_release_label): <p>The Amazon EMR release version.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_execution_role_arn): <p>The ARN of the execution role.</p>
    ///   - [`certificate_arn(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::certificate_arn) / [`set_certificate_arn(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_certificate_arn): <p>The certificate ARN provided by users for the managed endpoint. This field is under deprecation and will be removed in future releases.</p>
    ///   - [`configuration_overrides(ConfigurationOverrides)`](crate::client::fluent_builders::CreateManagedEndpoint::configuration_overrides) / [`set_configuration_overrides(Option<ConfigurationOverrides>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_configuration_overrides): <p>The configuration settings that will be used to override existing configurations.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_client_token): <p>The client idempotency token for this create call.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateManagedEndpoint::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateManagedEndpoint::set_tags): <p>The tags of the managed endpoint. </p>
    /// - On success, responds with [`CreateManagedEndpointOutput`](crate::output::CreateManagedEndpointOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateManagedEndpointOutput::id): <p>The output contains the ID of the managed endpoint.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateManagedEndpointOutput::name): <p>The output contains the name of the managed endpoint.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateManagedEndpointOutput::arn): <p>The output contains the ARN of the managed endpoint.</p>
    ///   - [`virtual_cluster_id(Option<String>)`](crate::output::CreateManagedEndpointOutput::virtual_cluster_id): <p>The output contains the ID of the virtual cluster.</p>
    /// - On failure, responds with [`SdkError<CreateManagedEndpointError>`](crate::error::CreateManagedEndpointError)
    pub fn create_managed_endpoint(&self) -> crate::client::fluent_builders::CreateManagedEndpoint {
        crate::client::fluent_builders::CreateManagedEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVirtualCluster`](crate::client::fluent_builders::CreateVirtualCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateVirtualCluster::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateVirtualCluster::set_name): <p>The specified name of the virtual cluster.</p>
    ///   - [`container_provider(ContainerProvider)`](crate::client::fluent_builders::CreateVirtualCluster::container_provider) / [`set_container_provider(Option<ContainerProvider>)`](crate::client::fluent_builders::CreateVirtualCluster::set_container_provider): <p>The container provider of the virtual cluster.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateVirtualCluster::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateVirtualCluster::set_client_token): <p>The client token of the virtual cluster.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateVirtualCluster::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateVirtualCluster::set_tags): <p>The tags assigned to the virtual cluster.</p>
    /// - On success, responds with [`CreateVirtualClusterOutput`](crate::output::CreateVirtualClusterOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::CreateVirtualClusterOutput::id): <p>This output contains the virtual cluster ID.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateVirtualClusterOutput::name): <p>This output contains the name of the virtual cluster.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateVirtualClusterOutput::arn): <p>This output contains the ARN of virtual cluster.</p>
    /// - On failure, responds with [`SdkError<CreateVirtualClusterError>`](crate::error::CreateVirtualClusterError)
    pub fn create_virtual_cluster(&self) -> crate::client::fluent_builders::CreateVirtualCluster {
        crate::client::fluent_builders::CreateVirtualCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteJobTemplate`](crate::client::fluent_builders::DeleteJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteJobTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteJobTemplate::set_id): <p>The ID of the job template that will be deleted.</p>
    /// - On success, responds with [`DeleteJobTemplateOutput`](crate::output::DeleteJobTemplateOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::DeleteJobTemplateOutput::id): <p>This output contains the ID of the job template that was deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteJobTemplateError>`](crate::error::DeleteJobTemplateError)
    pub fn delete_job_template(&self) -> crate::client::fluent_builders::DeleteJobTemplate {
        crate::client::fluent_builders::DeleteJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteManagedEndpoint`](crate::client::fluent_builders::DeleteManagedEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteManagedEndpoint::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteManagedEndpoint::set_id): <p>The ID of the managed endpoint.</p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::DeleteManagedEndpoint::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::DeleteManagedEndpoint::set_virtual_cluster_id): <p>The ID of the endpoint's virtual cluster.</p>
    /// - On success, responds with [`DeleteManagedEndpointOutput`](crate::output::DeleteManagedEndpointOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::DeleteManagedEndpointOutput::id): <p>The output displays the ID of the managed endpoint.</p>
    ///   - [`virtual_cluster_id(Option<String>)`](crate::output::DeleteManagedEndpointOutput::virtual_cluster_id): <p>The output displays the ID of the endpoint's virtual cluster.</p>
    /// - On failure, responds with [`SdkError<DeleteManagedEndpointError>`](crate::error::DeleteManagedEndpointError)
    pub fn delete_managed_endpoint(&self) -> crate::client::fluent_builders::DeleteManagedEndpoint {
        crate::client::fluent_builders::DeleteManagedEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVirtualCluster`](crate::client::fluent_builders::DeleteVirtualCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DeleteVirtualCluster::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DeleteVirtualCluster::set_id): <p>The ID of the virtual cluster that will be deleted.</p>
    /// - On success, responds with [`DeleteVirtualClusterOutput`](crate::output::DeleteVirtualClusterOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::DeleteVirtualClusterOutput::id): <p>This output contains the ID of the virtual cluster that will be deleted. </p>
    /// - On failure, responds with [`SdkError<DeleteVirtualClusterError>`](crate::error::DeleteVirtualClusterError)
    pub fn delete_virtual_cluster(&self) -> crate::client::fluent_builders::DeleteVirtualCluster {
        crate::client::fluent_builders::DeleteVirtualCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeJobRun`](crate::client::fluent_builders::DescribeJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DescribeJobRun::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DescribeJobRun::set_id): <p>The ID of the job run request. </p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::DescribeJobRun::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::DescribeJobRun::set_virtual_cluster_id): <p>The ID of the virtual cluster for which the job run is submitted.</p>
    /// - On success, responds with [`DescribeJobRunOutput`](crate::output::DescribeJobRunOutput) with field(s):
    ///   - [`job_run(Option<JobRun>)`](crate::output::DescribeJobRunOutput::job_run): <p>The output displays information about a job run.</p>
    /// - On failure, responds with [`SdkError<DescribeJobRunError>`](crate::error::DescribeJobRunError)
    pub fn describe_job_run(&self) -> crate::client::fluent_builders::DescribeJobRun {
        crate::client::fluent_builders::DescribeJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeJobTemplate`](crate::client::fluent_builders::DescribeJobTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DescribeJobTemplate::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DescribeJobTemplate::set_id): <p>The ID of the job template that will be described.</p>
    /// - On success, responds with [`DescribeJobTemplateOutput`](crate::output::DescribeJobTemplateOutput) with field(s):
    ///   - [`job_template(Option<JobTemplate>)`](crate::output::DescribeJobTemplateOutput::job_template): <p>This output displays information about the specified job template.</p>
    /// - On failure, responds with [`SdkError<DescribeJobTemplateError>`](crate::error::DescribeJobTemplateError)
    pub fn describe_job_template(&self) -> crate::client::fluent_builders::DescribeJobTemplate {
        crate::client::fluent_builders::DescribeJobTemplate::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeManagedEndpoint`](crate::client::fluent_builders::DescribeManagedEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DescribeManagedEndpoint::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DescribeManagedEndpoint::set_id): <p>This output displays ID of the managed endpoint.</p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::DescribeManagedEndpoint::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::DescribeManagedEndpoint::set_virtual_cluster_id): <p>The ID of the endpoint's virtual cluster.</p>
    /// - On success, responds with [`DescribeManagedEndpointOutput`](crate::output::DescribeManagedEndpointOutput) with field(s):
    ///   - [`endpoint(Option<Endpoint>)`](crate::output::DescribeManagedEndpointOutput::endpoint): <p>This output displays information about a managed endpoint.</p>
    /// - On failure, responds with [`SdkError<DescribeManagedEndpointError>`](crate::error::DescribeManagedEndpointError)
    pub fn describe_managed_endpoint(
        &self,
    ) -> crate::client::fluent_builders::DescribeManagedEndpoint {
        crate::client::fluent_builders::DescribeManagedEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeVirtualCluster`](crate::client::fluent_builders::DescribeVirtualCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`id(impl Into<String>)`](crate::client::fluent_builders::DescribeVirtualCluster::id) / [`set_id(Option<String>)`](crate::client::fluent_builders::DescribeVirtualCluster::set_id): <p>The ID of the virtual cluster that will be described.</p>
    /// - On success, responds with [`DescribeVirtualClusterOutput`](crate::output::DescribeVirtualClusterOutput) with field(s):
    ///   - [`virtual_cluster(Option<VirtualCluster>)`](crate::output::DescribeVirtualClusterOutput::virtual_cluster): <p>This output displays information about the specified virtual cluster.</p>
    /// - On failure, responds with [`SdkError<DescribeVirtualClusterError>`](crate::error::DescribeVirtualClusterError)
    pub fn describe_virtual_cluster(
        &self,
    ) -> crate::client::fluent_builders::DescribeVirtualCluster {
        crate::client::fluent_builders::DescribeVirtualCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListJobRuns`](crate::client::fluent_builders::ListJobRuns) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListJobRuns::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::ListJobRuns::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::ListJobRuns::set_virtual_cluster_id): <p>The ID of the virtual cluster for which to list the job run. </p>
    ///   - [`created_before(DateTime)`](crate::client::fluent_builders::ListJobRuns::created_before) / [`set_created_before(Option<DateTime>)`](crate::client::fluent_builders::ListJobRuns::set_created_before): <p>The date and time before which the job runs were submitted.</p>
    ///   - [`created_after(DateTime)`](crate::client::fluent_builders::ListJobRuns::created_after) / [`set_created_after(Option<DateTime>)`](crate::client::fluent_builders::ListJobRuns::set_created_after): <p>The date and time after which the job runs were submitted.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ListJobRuns::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ListJobRuns::set_name): <p>The name of the job run.</p>
    ///   - [`states(Vec<JobRunState>)`](crate::client::fluent_builders::ListJobRuns::states) / [`set_states(Option<Vec<JobRunState>>)`](crate::client::fluent_builders::ListJobRuns::set_states): <p>The states of the job run.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListJobRuns::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListJobRuns::set_max_results): <p>The maximum number of job runs that can be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListJobRuns::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListJobRuns::set_next_token): <p>The token for the next set of job runs to return.</p>
    /// - On success, responds with [`ListJobRunsOutput`](crate::output::ListJobRunsOutput) with field(s):
    ///   - [`job_runs(Option<Vec<JobRun>>)`](crate::output::ListJobRunsOutput::job_runs): <p>This output lists information about the specified job runs.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListJobRunsOutput::next_token): <p>This output displays the token for the next set of job runs.</p>
    /// - On failure, responds with [`SdkError<ListJobRunsError>`](crate::error::ListJobRunsError)
    pub fn list_job_runs(&self) -> crate::client::fluent_builders::ListJobRuns {
        crate::client::fluent_builders::ListJobRuns::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListJobTemplates`](crate::client::fluent_builders::ListJobTemplates) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListJobTemplates::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`created_after(DateTime)`](crate::client::fluent_builders::ListJobTemplates::created_after) / [`set_created_after(Option<DateTime>)`](crate::client::fluent_builders::ListJobTemplates::set_created_after): <p>The date and time after which the job templates were created.</p>
    ///   - [`created_before(DateTime)`](crate::client::fluent_builders::ListJobTemplates::created_before) / [`set_created_before(Option<DateTime>)`](crate::client::fluent_builders::ListJobTemplates::set_created_before): <p> The date and time before which the job templates were created.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListJobTemplates::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListJobTemplates::set_max_results): <p> The maximum number of job templates that can be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListJobTemplates::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListJobTemplates::set_next_token): <p> The token for the next set of job templates to return.</p>
    /// - On success, responds with [`ListJobTemplatesOutput`](crate::output::ListJobTemplatesOutput) with field(s):
    ///   - [`templates(Option<Vec<JobTemplate>>)`](crate::output::ListJobTemplatesOutput::templates): <p>This output lists information about the specified job templates.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListJobTemplatesOutput::next_token): <p> This output displays the token for the next set of job templates.</p>
    /// - On failure, responds with [`SdkError<ListJobTemplatesError>`](crate::error::ListJobTemplatesError)
    pub fn list_job_templates(&self) -> crate::client::fluent_builders::ListJobTemplates {
        crate::client::fluent_builders::ListJobTemplates::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListManagedEndpoints`](crate::client::fluent_builders::ListManagedEndpoints) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListManagedEndpoints::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::ListManagedEndpoints::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::ListManagedEndpoints::set_virtual_cluster_id): <p>The ID of the virtual cluster.</p>
    ///   - [`created_before(DateTime)`](crate::client::fluent_builders::ListManagedEndpoints::created_before) / [`set_created_before(Option<DateTime>)`](crate::client::fluent_builders::ListManagedEndpoints::set_created_before): <p>The date and time before which the endpoints are created.</p>
    ///   - [`created_after(DateTime)`](crate::client::fluent_builders::ListManagedEndpoints::created_after) / [`set_created_after(Option<DateTime>)`](crate::client::fluent_builders::ListManagedEndpoints::set_created_after): <p> The date and time after which the endpoints are created.</p>
    ///   - [`types(Vec<String>)`](crate::client::fluent_builders::ListManagedEndpoints::types) / [`set_types(Option<Vec<String>>)`](crate::client::fluent_builders::ListManagedEndpoints::set_types): <p>The types of the managed endpoints.</p>
    ///   - [`states(Vec<EndpointState>)`](crate::client::fluent_builders::ListManagedEndpoints::states) / [`set_states(Option<Vec<EndpointState>>)`](crate::client::fluent_builders::ListManagedEndpoints::set_states): <p>The states of the managed endpoints.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListManagedEndpoints::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListManagedEndpoints::set_max_results): <p>The maximum number of managed endpoints that can be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListManagedEndpoints::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListManagedEndpoints::set_next_token): <p> The token for the next set of managed endpoints to return. </p>
    /// - On success, responds with [`ListManagedEndpointsOutput`](crate::output::ListManagedEndpointsOutput) with field(s):
    ///   - [`endpoints(Option<Vec<Endpoint>>)`](crate::output::ListManagedEndpointsOutput::endpoints): <p>The managed endpoints to be listed.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListManagedEndpointsOutput::next_token): <p> The token for the next set of endpoints to return. </p>
    /// - On failure, responds with [`SdkError<ListManagedEndpointsError>`](crate::error::ListManagedEndpointsError)
    pub fn list_managed_endpoints(&self) -> crate::client::fluent_builders::ListManagedEndpoints {
        crate::client::fluent_builders::ListManagedEndpoints::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of tagged resources.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The tags assigned to resources.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVirtualClusters`](crate::client::fluent_builders::ListVirtualClusters) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListVirtualClusters::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`container_provider_id(impl Into<String>)`](crate::client::fluent_builders::ListVirtualClusters::container_provider_id) / [`set_container_provider_id(Option<String>)`](crate::client::fluent_builders::ListVirtualClusters::set_container_provider_id): <p>The container provider ID of the virtual cluster.</p>
    ///   - [`container_provider_type(ContainerProviderType)`](crate::client::fluent_builders::ListVirtualClusters::container_provider_type) / [`set_container_provider_type(Option<ContainerProviderType>)`](crate::client::fluent_builders::ListVirtualClusters::set_container_provider_type): <p>The container provider type of the virtual cluster. EKS is the only supported type as of now.</p>
    ///   - [`created_after(DateTime)`](crate::client::fluent_builders::ListVirtualClusters::created_after) / [`set_created_after(Option<DateTime>)`](crate::client::fluent_builders::ListVirtualClusters::set_created_after): <p>The date and time after which the virtual clusters are created.</p>
    ///   - [`created_before(DateTime)`](crate::client::fluent_builders::ListVirtualClusters::created_before) / [`set_created_before(Option<DateTime>)`](crate::client::fluent_builders::ListVirtualClusters::set_created_before): <p>The date and time before which the virtual clusters are created.</p>
    ///   - [`states(Vec<VirtualClusterState>)`](crate::client::fluent_builders::ListVirtualClusters::states) / [`set_states(Option<Vec<VirtualClusterState>>)`](crate::client::fluent_builders::ListVirtualClusters::set_states): <p>The states of the requested virtual clusters.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListVirtualClusters::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListVirtualClusters::set_max_results): <p>The maximum number of virtual clusters that can be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVirtualClusters::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVirtualClusters::set_next_token): <p>The token for the next set of virtual clusters to return. </p>
    /// - On success, responds with [`ListVirtualClustersOutput`](crate::output::ListVirtualClustersOutput) with field(s):
    ///   - [`virtual_clusters(Option<Vec<VirtualCluster>>)`](crate::output::ListVirtualClustersOutput::virtual_clusters): <p>This output lists the specified virtual clusters.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVirtualClustersOutput::next_token): <p>This output displays the token for the next set of virtual clusters.</p>
    /// - On failure, responds with [`SdkError<ListVirtualClustersError>`](crate::error::ListVirtualClustersError)
    pub fn list_virtual_clusters(&self) -> crate::client::fluent_builders::ListVirtualClusters {
        crate::client::fluent_builders::ListVirtualClusters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartJobRun`](crate::client::fluent_builders::StartJobRun) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_name): <p>The name of the job run.</p>
    ///   - [`virtual_cluster_id(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::virtual_cluster_id) / [`set_virtual_cluster_id(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_virtual_cluster_id): <p>The virtual cluster ID for which the job run request is submitted.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_client_token): <p>The client idempotency token of the job run request. </p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_execution_role_arn): <p>The execution role ARN for the job run.</p>
    ///   - [`release_label(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::release_label) / [`set_release_label(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_release_label): <p>The Amazon EMR release version to use for the job run.</p>
    ///   - [`job_driver(JobDriver)`](crate::client::fluent_builders::StartJobRun::job_driver) / [`set_job_driver(Option<JobDriver>)`](crate::client::fluent_builders::StartJobRun::set_job_driver): <p>The job driver for the job run.</p>
    ///   - [`configuration_overrides(ConfigurationOverrides)`](crate::client::fluent_builders::StartJobRun::configuration_overrides) / [`set_configuration_overrides(Option<ConfigurationOverrides>)`](crate::client::fluent_builders::StartJobRun::set_configuration_overrides): <p>The configuration overrides for the job run.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::StartJobRun::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartJobRun::set_tags): <p>The tags assigned to job runs.</p>
    ///   - [`job_template_id(impl Into<String>)`](crate::client::fluent_builders::StartJobRun::job_template_id) / [`set_job_template_id(Option<String>)`](crate::client::fluent_builders::StartJobRun::set_job_template_id): <p>The job template ID to be used to start the job run.</p>
    ///   - [`job_template_parameters(HashMap<String, String>)`](crate::client::fluent_builders::StartJobRun::job_template_parameters) / [`set_job_template_parameters(Option<HashMap<String, String>>)`](crate::client::fluent_builders::StartJobRun::set_job_template_parameters): <p>The values of job template parameters to start a job run.</p>
    /// - On success, responds with [`StartJobRunOutput`](crate::output::StartJobRunOutput) with field(s):
    ///   - [`id(Option<String>)`](crate::output::StartJobRunOutput::id): <p>This output displays the started job run ID.</p>
    ///   - [`name(Option<String>)`](crate::output::StartJobRunOutput::name): <p>This output displays the name of the started job run.</p>
    ///   - [`arn(Option<String>)`](crate::output::StartJobRunOutput::arn): <p>This output lists the ARN of job run.</p>
    ///   - [`virtual_cluster_id(Option<String>)`](crate::output::StartJobRunOutput::virtual_cluster_id): <p>This output displays the virtual cluster ID for which the job run was submitted.</p>
    /// - On failure, responds with [`SdkError<StartJobRunError>`](crate::error::StartJobRunError)
    pub fn start_job_run(&self) -> crate::client::fluent_builders::StartJobRun {
        crate::client::fluent_builders::StartJobRun::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of resources.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags assigned to resources.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of resources.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag keys of the resources.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
