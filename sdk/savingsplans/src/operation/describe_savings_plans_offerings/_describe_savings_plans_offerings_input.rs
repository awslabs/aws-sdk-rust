// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSavingsPlansOfferingsInput {
    /// <p>The IDs of the offerings.</p>
    #[doc(hidden)]
    pub offering_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The payment options.</p>
    #[doc(hidden)]
    pub payment_options: std::option::Option<std::vec::Vec<crate::types::SavingsPlanPaymentOption>>,
    /// <p>The product type.</p>
    #[doc(hidden)]
    pub product_type: std::option::Option<crate::types::SavingsPlanProductType>,
    /// <p>The plan type.</p>
    #[doc(hidden)]
    pub plan_types: std::option::Option<std::vec::Vec<crate::types::SavingsPlanType>>,
    /// <p>The durations, in seconds.</p>
    #[doc(hidden)]
    pub durations: std::option::Option<std::vec::Vec<i64>>,
    /// <p>The currencies.</p>
    #[doc(hidden)]
    pub currencies: std::option::Option<std::vec::Vec<crate::types::CurrencyCode>>,
    /// <p>The descriptions.</p>
    #[doc(hidden)]
    pub descriptions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The services.</p>
    #[doc(hidden)]
    pub service_codes: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The usage details of the line item in the billing report.</p>
    #[doc(hidden)]
    pub usage_types: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    #[doc(hidden)]
    pub operations: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The filters.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingFilterElement>>,
    /// <p>The token for the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl DescribeSavingsPlansOfferingsInput {
    /// <p>The IDs of the offerings.</p>
    pub fn offering_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.offering_ids.as_deref()
    }
    /// <p>The payment options.</p>
    pub fn payment_options(
        &self,
    ) -> std::option::Option<&[crate::types::SavingsPlanPaymentOption]> {
        self.payment_options.as_deref()
    }
    /// <p>The product type.</p>
    pub fn product_type(&self) -> std::option::Option<&crate::types::SavingsPlanProductType> {
        self.product_type.as_ref()
    }
    /// <p>The plan type.</p>
    pub fn plan_types(&self) -> std::option::Option<&[crate::types::SavingsPlanType]> {
        self.plan_types.as_deref()
    }
    /// <p>The durations, in seconds.</p>
    pub fn durations(&self) -> std::option::Option<&[i64]> {
        self.durations.as_deref()
    }
    /// <p>The currencies.</p>
    pub fn currencies(&self) -> std::option::Option<&[crate::types::CurrencyCode]> {
        self.currencies.as_deref()
    }
    /// <p>The descriptions.</p>
    pub fn descriptions(&self) -> std::option::Option<&[std::string::String]> {
        self.descriptions.as_deref()
    }
    /// <p>The services.</p>
    pub fn service_codes(&self) -> std::option::Option<&[std::string::String]> {
        self.service_codes.as_deref()
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_types(&self) -> std::option::Option<&[std::string::String]> {
        self.usage_types.as_deref()
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operations(&self) -> std::option::Option<&[std::string::String]> {
        self.operations.as_deref()
    }
    /// <p>The filters.</p>
    pub fn filters(
        &self,
    ) -> std::option::Option<&[crate::types::SavingsPlanOfferingFilterElement]> {
        self.filters.as_deref()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl DescribeSavingsPlansOfferingsInput {
    /// Creates a new builder-style object to manufacture [`DescribeSavingsPlansOfferingsInput`](crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput).
    pub fn builder() -> crate::operation::describe_savings_plans_offerings::builders::DescribeSavingsPlansOfferingsInputBuilder{
        crate::operation::describe_savings_plans_offerings::builders::DescribeSavingsPlansOfferingsInputBuilder::default()
    }
}

/// A builder for [`DescribeSavingsPlansOfferingsInput`](crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeSavingsPlansOfferingsInputBuilder {
    pub(crate) offering_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) payment_options:
        std::option::Option<std::vec::Vec<crate::types::SavingsPlanPaymentOption>>,
    pub(crate) product_type: std::option::Option<crate::types::SavingsPlanProductType>,
    pub(crate) plan_types: std::option::Option<std::vec::Vec<crate::types::SavingsPlanType>>,
    pub(crate) durations: std::option::Option<std::vec::Vec<i64>>,
    pub(crate) currencies: std::option::Option<std::vec::Vec<crate::types::CurrencyCode>>,
    pub(crate) descriptions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) service_codes: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) usage_types: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) operations: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) filters:
        std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingFilterElement>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl DescribeSavingsPlansOfferingsInputBuilder {
    /// Appends an item to `offering_ids`.
    ///
    /// To override the contents of this collection use [`set_offering_ids`](Self::set_offering_ids).
    ///
    /// <p>The IDs of the offerings.</p>
    pub fn offering_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.offering_ids.unwrap_or_default();
        v.push(input.into());
        self.offering_ids = Some(v);
        self
    }
    /// <p>The IDs of the offerings.</p>
    pub fn set_offering_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.offering_ids = input;
        self
    }
    /// Appends an item to `payment_options`.
    ///
    /// To override the contents of this collection use [`set_payment_options`](Self::set_payment_options).
    ///
    /// <p>The payment options.</p>
    pub fn payment_options(mut self, input: crate::types::SavingsPlanPaymentOption) -> Self {
        let mut v = self.payment_options.unwrap_or_default();
        v.push(input);
        self.payment_options = Some(v);
        self
    }
    /// <p>The payment options.</p>
    pub fn set_payment_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SavingsPlanPaymentOption>>,
    ) -> Self {
        self.payment_options = input;
        self
    }
    /// <p>The product type.</p>
    pub fn product_type(mut self, input: crate::types::SavingsPlanProductType) -> Self {
        self.product_type = Some(input);
        self
    }
    /// <p>The product type.</p>
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::types::SavingsPlanProductType>,
    ) -> Self {
        self.product_type = input;
        self
    }
    /// Appends an item to `plan_types`.
    ///
    /// To override the contents of this collection use [`set_plan_types`](Self::set_plan_types).
    ///
    /// <p>The plan type.</p>
    pub fn plan_types(mut self, input: crate::types::SavingsPlanType) -> Self {
        let mut v = self.plan_types.unwrap_or_default();
        v.push(input);
        self.plan_types = Some(v);
        self
    }
    /// <p>The plan type.</p>
    pub fn set_plan_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SavingsPlanType>>,
    ) -> Self {
        self.plan_types = input;
        self
    }
    /// Appends an item to `durations`.
    ///
    /// To override the contents of this collection use [`set_durations`](Self::set_durations).
    ///
    /// <p>The durations, in seconds.</p>
    pub fn durations(mut self, input: i64) -> Self {
        let mut v = self.durations.unwrap_or_default();
        v.push(input);
        self.durations = Some(v);
        self
    }
    /// <p>The durations, in seconds.</p>
    pub fn set_durations(mut self, input: std::option::Option<std::vec::Vec<i64>>) -> Self {
        self.durations = input;
        self
    }
    /// Appends an item to `currencies`.
    ///
    /// To override the contents of this collection use [`set_currencies`](Self::set_currencies).
    ///
    /// <p>The currencies.</p>
    pub fn currencies(mut self, input: crate::types::CurrencyCode) -> Self {
        let mut v = self.currencies.unwrap_or_default();
        v.push(input);
        self.currencies = Some(v);
        self
    }
    /// <p>The currencies.</p>
    pub fn set_currencies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CurrencyCode>>,
    ) -> Self {
        self.currencies = input;
        self
    }
    /// Appends an item to `descriptions`.
    ///
    /// To override the contents of this collection use [`set_descriptions`](Self::set_descriptions).
    ///
    /// <p>The descriptions.</p>
    pub fn descriptions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.descriptions.unwrap_or_default();
        v.push(input.into());
        self.descriptions = Some(v);
        self
    }
    /// <p>The descriptions.</p>
    pub fn set_descriptions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.descriptions = input;
        self
    }
    /// Appends an item to `service_codes`.
    ///
    /// To override the contents of this collection use [`set_service_codes`](Self::set_service_codes).
    ///
    /// <p>The services.</p>
    pub fn service_codes(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.service_codes.unwrap_or_default();
        v.push(input.into());
        self.service_codes = Some(v);
        self
    }
    /// <p>The services.</p>
    pub fn set_service_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.service_codes = input;
        self
    }
    /// Appends an item to `usage_types`.
    ///
    /// To override the contents of this collection use [`set_usage_types`](Self::set_usage_types).
    ///
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_types(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.usage_types.unwrap_or_default();
        v.push(input.into());
        self.usage_types = Some(v);
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn set_usage_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.usage_types = input;
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operations(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input.into());
        self.operations = Some(v);
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.operations = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::types::SavingsPlanOfferingFilterElement) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingFilterElement>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSavingsPlansOfferingsInput`](crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput {
                offering_ids: self.offering_ids
                ,
                payment_options: self.payment_options
                ,
                product_type: self.product_type
                ,
                plan_types: self.plan_types
                ,
                durations: self.durations
                ,
                currencies: self.currencies
                ,
                descriptions: self.descriptions
                ,
                service_codes: self.service_codes
                ,
                usage_types: self.usage_types
                ,
                operations: self.operations
                ,
                filters: self.filters
                ,
                next_token: self.next_token
                ,
                max_results: self.max_results
                    .unwrap_or_default()
                ,
            }
        )
    }
}
