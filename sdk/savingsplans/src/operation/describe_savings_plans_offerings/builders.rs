// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_savings_plans_offerings::_describe_savings_plans_offerings_output::DescribeSavingsPlansOfferingsOutputBuilder;

pub use crate::operation::describe_savings_plans_offerings::_describe_savings_plans_offerings_input::DescribeSavingsPlansOfferingsInputBuilder;

impl DescribeSavingsPlansOfferingsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_savings_plans_offerings();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeSavingsPlansOfferings`.
///
/// <p>Describes the specified Savings Plans offerings.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeSavingsPlansOfferingsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_savings_plans_offerings::builders::DescribeSavingsPlansOfferingsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsOutput,
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsError,
    > for DescribeSavingsPlansOfferingsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsOutput,
            crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeSavingsPlansOfferingsFluentBuilder {
    /// Creates a new `DescribeSavingsPlansOfferings`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeSavingsPlansOfferings as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_savings_plans_offerings::builders::DescribeSavingsPlansOfferingsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferings::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferings::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsOutput,
        crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `offeringIds`.
    ///
    /// To override the contents of this collection use [`set_offering_ids`](Self::set_offering_ids).
    ///
    /// <p>The IDs of the offerings.</p>
    pub fn offering_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.offering_ids(input.into());
        self
    }
    /// <p>The IDs of the offerings.</p>
    pub fn set_offering_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_offering_ids(input);
        self
    }
    /// <p>The IDs of the offerings.</p>
    pub fn get_offering_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_offering_ids()
    }
    /// Appends an item to `paymentOptions`.
    ///
    /// To override the contents of this collection use [`set_payment_options`](Self::set_payment_options).
    ///
    /// <p>The payment options.</p>
    pub fn payment_options(mut self, input: crate::types::SavingsPlanPaymentOption) -> Self {
        self.inner = self.inner.payment_options(input);
        self
    }
    /// <p>The payment options.</p>
    pub fn set_payment_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanPaymentOption>>) -> Self {
        self.inner = self.inner.set_payment_options(input);
        self
    }
    /// <p>The payment options.</p>
    pub fn get_payment_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanPaymentOption>> {
        self.inner.get_payment_options()
    }
    /// <p>The product type.</p>
    pub fn product_type(mut self, input: crate::types::SavingsPlanProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    /// <p>The product type.</p>
    pub fn set_product_type(mut self, input: ::std::option::Option<crate::types::SavingsPlanProductType>) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
    /// <p>The product type.</p>
    pub fn get_product_type(&self) -> &::std::option::Option<crate::types::SavingsPlanProductType> {
        self.inner.get_product_type()
    }
    /// Appends an item to `planTypes`.
    ///
    /// To override the contents of this collection use [`set_plan_types`](Self::set_plan_types).
    ///
    /// <p>The plan type.</p>
    pub fn plan_types(mut self, input: crate::types::SavingsPlanType) -> Self {
        self.inner = self.inner.plan_types(input);
        self
    }
    /// <p>The plan type.</p>
    pub fn set_plan_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanType>>) -> Self {
        self.inner = self.inner.set_plan_types(input);
        self
    }
    /// <p>The plan type.</p>
    pub fn get_plan_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanType>> {
        self.inner.get_plan_types()
    }
    /// Appends an item to `durations`.
    ///
    /// To override the contents of this collection use [`set_durations`](Self::set_durations).
    ///
    /// <p>The durations, in seconds.</p>
    pub fn durations(mut self, input: i64) -> Self {
        self.inner = self.inner.durations(input);
        self
    }
    /// <p>The durations, in seconds.</p>
    pub fn set_durations(mut self, input: ::std::option::Option<::std::vec::Vec<i64>>) -> Self {
        self.inner = self.inner.set_durations(input);
        self
    }
    /// <p>The durations, in seconds.</p>
    pub fn get_durations(&self) -> &::std::option::Option<::std::vec::Vec<i64>> {
        self.inner.get_durations()
    }
    /// Appends an item to `currencies`.
    ///
    /// To override the contents of this collection use [`set_currencies`](Self::set_currencies).
    ///
    /// <p>The currencies.</p>
    pub fn currencies(mut self, input: crate::types::CurrencyCode) -> Self {
        self.inner = self.inner.currencies(input);
        self
    }
    /// <p>The currencies.</p>
    pub fn set_currencies(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CurrencyCode>>) -> Self {
        self.inner = self.inner.set_currencies(input);
        self
    }
    /// <p>The currencies.</p>
    pub fn get_currencies(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CurrencyCode>> {
        self.inner.get_currencies()
    }
    /// Appends an item to `descriptions`.
    ///
    /// To override the contents of this collection use [`set_descriptions`](Self::set_descriptions).
    ///
    /// <p>The descriptions.</p>
    pub fn descriptions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.descriptions(input.into());
        self
    }
    /// <p>The descriptions.</p>
    pub fn set_descriptions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_descriptions(input);
        self
    }
    /// <p>The descriptions.</p>
    pub fn get_descriptions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_descriptions()
    }
    /// Appends an item to `serviceCodes`.
    ///
    /// To override the contents of this collection use [`set_service_codes`](Self::set_service_codes).
    ///
    /// <p>The services.</p>
    pub fn service_codes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_codes(input.into());
        self
    }
    /// <p>The services.</p>
    pub fn set_service_codes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_service_codes(input);
        self
    }
    /// <p>The services.</p>
    pub fn get_service_codes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_service_codes()
    }
    /// Appends an item to `usageTypes`.
    ///
    /// To override the contents of this collection use [`set_usage_types`](Self::set_usage_types).
    ///
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.usage_types(input.into());
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn set_usage_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_usage_types(input);
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn get_usage_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_usage_types()
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.operations(input.into());
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn set_operations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_operations(input);
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn get_operations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_operations()
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::types::SavingsPlanOfferingFilterElement) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanOfferingFilterElement>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SavingsPlanOfferingFilterElement>> {
        self.inner.get_filters()
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
}
