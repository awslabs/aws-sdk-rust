// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_savings_plans_offerings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::describe_savings_plans_offerings::DescribeSavingsPlansOfferingsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.currencies {
        let mut array_2 = object.key("currencies").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.descriptions {
        let mut array_5 = object.key("descriptions").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.durations {
        let mut array_8 = object.key("durations").start_array();
        for item_9 in var_7 {
            {
                array_8.value().number(
                    #[allow(clippy::useless_conversion)]
                    aws_smithy_types::Number::NegInt((*item_9).into()),
                );
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.filters {
        let mut array_11 = object.key("filters").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_savings_plan_offering_filter_element::ser_savings_plan_offering_filter_element(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_14) = &input.next_token {
        object.key("nextToken").string(var_14.as_str());
    }
    if let Some(var_15) = &input.offering_ids {
        let mut array_16 = object.key("offeringIds").start_array();
        for item_17 in var_15 {
            {
                array_16.value().string(item_17.as_str());
            }
        }
        array_16.finish();
    }
    if let Some(var_18) = &input.operations {
        let mut array_19 = object.key("operations").start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.payment_options {
        let mut array_22 = object.key("paymentOptions").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.plan_types {
        let mut array_25 = object.key("planTypes").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.product_type {
        object.key("productType").string(var_27.as_str());
    }
    if let Some(var_28) = &input.service_codes {
        let mut array_29 = object.key("serviceCodes").start_array();
        for item_30 in var_28 {
            {
                array_29.value().string(item_30.as_str());
            }
        }
        array_29.finish();
    }
    if let Some(var_31) = &input.usage_types {
        let mut array_32 = object.key("usageTypes").start_array();
        for item_33 in var_31 {
            {
                array_32.value().string(item_33.as_str());
            }
        }
        array_32.finish();
    }
    Ok(())
}
