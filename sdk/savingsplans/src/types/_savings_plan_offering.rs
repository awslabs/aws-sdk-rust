// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Savings Plan offering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlanOffering {
    /// <p>The ID of the offering.</p>
    #[doc(hidden)]
    pub offering_id: std::option::Option<std::string::String>,
    /// <p>The product type.</p>
    #[doc(hidden)]
    pub product_types: std::option::Option<std::vec::Vec<crate::types::SavingsPlanProductType>>,
    /// <p>The plan type.</p>
    #[doc(hidden)]
    pub plan_type: std::option::Option<crate::types::SavingsPlanType>,
    /// <p>The description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The payment option.</p>
    #[doc(hidden)]
    pub payment_option: std::option::Option<crate::types::SavingsPlanPaymentOption>,
    /// <p>The duration, in seconds.</p>
    #[doc(hidden)]
    pub duration_seconds: i64,
    /// <p>The currency.</p>
    #[doc(hidden)]
    pub currency: std::option::Option<crate::types::CurrencyCode>,
    /// <p>The service.</p>
    #[doc(hidden)]
    pub service_code: std::option::Option<std::string::String>,
    /// <p>The usage details of the line item in the billing report.</p>
    #[doc(hidden)]
    pub usage_type: std::option::Option<std::string::String>,
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    #[doc(hidden)]
    pub operation: std::option::Option<std::string::String>,
    /// <p>The properties.</p>
    #[doc(hidden)]
    pub properties: std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingProperty>>,
}
impl SavingsPlanOffering {
    /// <p>The ID of the offering.</p>
    pub fn offering_id(&self) -> std::option::Option<&str> {
        self.offering_id.as_deref()
    }
    /// <p>The product type.</p>
    pub fn product_types(&self) -> std::option::Option<&[crate::types::SavingsPlanProductType]> {
        self.product_types.as_deref()
    }
    /// <p>The plan type.</p>
    pub fn plan_type(&self) -> std::option::Option<&crate::types::SavingsPlanType> {
        self.plan_type.as_ref()
    }
    /// <p>The description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The payment option.</p>
    pub fn payment_option(&self) -> std::option::Option<&crate::types::SavingsPlanPaymentOption> {
        self.payment_option.as_ref()
    }
    /// <p>The duration, in seconds.</p>
    pub fn duration_seconds(&self) -> i64 {
        self.duration_seconds
    }
    /// <p>The currency.</p>
    pub fn currency(&self) -> std::option::Option<&crate::types::CurrencyCode> {
        self.currency.as_ref()
    }
    /// <p>The service.</p>
    pub fn service_code(&self) -> std::option::Option<&str> {
        self.service_code.as_deref()
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_type(&self) -> std::option::Option<&str> {
        self.usage_type.as_deref()
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operation(&self) -> std::option::Option<&str> {
        self.operation.as_deref()
    }
    /// <p>The properties.</p>
    pub fn properties(&self) -> std::option::Option<&[crate::types::SavingsPlanOfferingProperty]> {
        self.properties.as_deref()
    }
}
impl SavingsPlanOffering {
    /// Creates a new builder-style object to manufacture [`SavingsPlanOffering`](crate::types::SavingsPlanOffering).
    pub fn builder() -> crate::types::builders::SavingsPlanOfferingBuilder {
        crate::types::builders::SavingsPlanOfferingBuilder::default()
    }
}

/// A builder for [`SavingsPlanOffering`](crate::types::SavingsPlanOffering).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlanOfferingBuilder {
    pub(crate) offering_id: std::option::Option<std::string::String>,
    pub(crate) product_types:
        std::option::Option<std::vec::Vec<crate::types::SavingsPlanProductType>>,
    pub(crate) plan_type: std::option::Option<crate::types::SavingsPlanType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) payment_option: std::option::Option<crate::types::SavingsPlanPaymentOption>,
    pub(crate) duration_seconds: std::option::Option<i64>,
    pub(crate) currency: std::option::Option<crate::types::CurrencyCode>,
    pub(crate) service_code: std::option::Option<std::string::String>,
    pub(crate) usage_type: std::option::Option<std::string::String>,
    pub(crate) operation: std::option::Option<std::string::String>,
    pub(crate) properties:
        std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingProperty>>,
}
impl SavingsPlanOfferingBuilder {
    /// <p>The ID of the offering.</p>
    pub fn offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_id = Some(input.into());
        self
    }
    /// <p>The ID of the offering.</p>
    pub fn set_offering_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_id = input;
        self
    }
    /// Appends an item to `product_types`.
    ///
    /// To override the contents of this collection use [`set_product_types`](Self::set_product_types).
    ///
    /// <p>The product type.</p>
    pub fn product_types(mut self, input: crate::types::SavingsPlanProductType) -> Self {
        let mut v = self.product_types.unwrap_or_default();
        v.push(input);
        self.product_types = Some(v);
        self
    }
    /// <p>The product type.</p>
    pub fn set_product_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SavingsPlanProductType>>,
    ) -> Self {
        self.product_types = input;
        self
    }
    /// <p>The plan type.</p>
    pub fn plan_type(mut self, input: crate::types::SavingsPlanType) -> Self {
        self.plan_type = Some(input);
        self
    }
    /// <p>The plan type.</p>
    pub fn set_plan_type(
        mut self,
        input: std::option::Option<crate::types::SavingsPlanType>,
    ) -> Self {
        self.plan_type = input;
        self
    }
    /// <p>The description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The payment option.</p>
    pub fn payment_option(mut self, input: crate::types::SavingsPlanPaymentOption) -> Self {
        self.payment_option = Some(input);
        self
    }
    /// <p>The payment option.</p>
    pub fn set_payment_option(
        mut self,
        input: std::option::Option<crate::types::SavingsPlanPaymentOption>,
    ) -> Self {
        self.payment_option = input;
        self
    }
    /// <p>The duration, in seconds.</p>
    pub fn duration_seconds(mut self, input: i64) -> Self {
        self.duration_seconds = Some(input);
        self
    }
    /// <p>The duration, in seconds.</p>
    pub fn set_duration_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.duration_seconds = input;
        self
    }
    /// <p>The currency.</p>
    pub fn currency(mut self, input: crate::types::CurrencyCode) -> Self {
        self.currency = Some(input);
        self
    }
    /// <p>The currency.</p>
    pub fn set_currency(mut self, input: std::option::Option<crate::types::CurrencyCode>) -> Self {
        self.currency = input;
        self
    }
    /// <p>The service.</p>
    pub fn service_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_code = Some(input.into());
        self
    }
    /// <p>The service.</p>
    pub fn set_service_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_code = input;
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.usage_type = Some(input.into());
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn set_usage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.usage_type = input;
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operation(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation = Some(input.into());
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn set_operation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation = input;
        self
    }
    /// Appends an item to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>The properties.</p>
    pub fn properties(mut self, input: crate::types::SavingsPlanOfferingProperty) -> Self {
        let mut v = self.properties.unwrap_or_default();
        v.push(input);
        self.properties = Some(v);
        self
    }
    /// <p>The properties.</p>
    pub fn set_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SavingsPlanOfferingProperty>>,
    ) -> Self {
        self.properties = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlanOffering`](crate::types::SavingsPlanOffering).
    pub fn build(self) -> crate::types::SavingsPlanOffering {
        crate::types::SavingsPlanOffering {
            offering_id: self.offering_id,
            product_types: self.product_types,
            plan_type: self.plan_type,
            description: self.description,
            payment_option: self.payment_option,
            duration_seconds: self.duration_seconds.unwrap_or_default(),
            currency: self.currency,
            service_code: self.service_code,
            usage_type: self.usage_type,
            operation: self.operation,
            properties: self.properties,
        }
    }
}
