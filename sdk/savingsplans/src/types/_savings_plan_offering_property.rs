// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a property.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SavingsPlanOfferingProperty {
    /// <p>The property name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<crate::types::SavingsPlanOfferingPropertyKey>,
    /// <p>The property value.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl SavingsPlanOfferingProperty {
    /// <p>The property name.</p>
    pub fn name(&self) -> std::option::Option<&crate::types::SavingsPlanOfferingPropertyKey> {
        self.name.as_ref()
    }
    /// <p>The property value.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl SavingsPlanOfferingProperty {
    /// Creates a new builder-style object to manufacture [`SavingsPlanOfferingProperty`](crate::types::SavingsPlanOfferingProperty).
    pub fn builder() -> crate::types::builders::SavingsPlanOfferingPropertyBuilder {
        crate::types::builders::SavingsPlanOfferingPropertyBuilder::default()
    }
}

/// A builder for [`SavingsPlanOfferingProperty`](crate::types::SavingsPlanOfferingProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SavingsPlanOfferingPropertyBuilder {
    pub(crate) name: std::option::Option<crate::types::SavingsPlanOfferingPropertyKey>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl SavingsPlanOfferingPropertyBuilder {
    /// <p>The property name.</p>
    pub fn name(mut self, input: crate::types::SavingsPlanOfferingPropertyKey) -> Self {
        self.name = Some(input);
        self
    }
    /// <p>The property name.</p>
    pub fn set_name(
        mut self,
        input: std::option::Option<crate::types::SavingsPlanOfferingPropertyKey>,
    ) -> Self {
        self.name = input;
        self
    }
    /// <p>The property value.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The property value.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`SavingsPlanOfferingProperty`](crate::types::SavingsPlanOfferingProperty).
    pub fn build(self) -> crate::types::SavingsPlanOfferingProperty {
        crate::types::SavingsPlanOfferingProperty {
            name: self.name,
            value: self.value,
        }
    }
}
