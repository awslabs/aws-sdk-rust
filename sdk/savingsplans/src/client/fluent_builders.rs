// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `CreateSavingsPlan`.
///
/// <p>Creates a Savings Plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSavingsPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_savings_plan_input::Builder,
}
impl CreateSavingsPlan {
    /// Creates a new `CreateSavingsPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSavingsPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSavingsPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSavingsPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSavingsPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the offering.</p>
    pub fn savings_plan_offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_offering_id(input.into());
        self
    }
    /// <p>The ID of the offering.</p>
    pub fn set_savings_plan_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_offering_id(input);
        self
    }
    /// <p>The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.</p>
    pub fn commitment(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.commitment(input.into());
        self
    }
    /// <p>The hourly commitment, in USD. This is a value between 0.001 and 1 million. You cannot specify more than five digits after the decimal point.</p>
    pub fn set_commitment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_commitment(input);
        self
    }
    /// <p>The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.</p>
    pub fn upfront_payment_amount(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.upfront_payment_amount(input.into());
        self
    }
    /// <p>The up-front payment amount. This is a whole number between 50 and 99 percent of the total value of the Savings Plan. This parameter is supported only if the payment option is <code>Partial Upfront</code>.</p>
    pub fn set_upfront_payment_amount(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_upfront_payment_amount(input);
        self
    }
    /// <p>The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).</p>
    pub fn purchase_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.purchase_time(input);
        self
    }
    /// <p>The time at which to purchase the Savings Plan, in UTC format (YYYY-MM-DDTHH:MM:SSZ).</p>
    pub fn set_purchase_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_purchase_time(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>One or more tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteQueuedSavingsPlan`.
///
/// <p>Deletes the queued purchase for the specified Savings Plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteQueuedSavingsPlan {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_queued_savings_plan_input::Builder,
}
impl DeleteQueuedSavingsPlan {
    /// Creates a new `DeleteQueuedSavingsPlan`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteQueuedSavingsPlan,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteQueuedSavingsPlanError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteQueuedSavingsPlanOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteQueuedSavingsPlanError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Savings Plan.</p>
    pub fn savings_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_id(input.into());
        self
    }
    /// <p>The ID of the Savings Plan.</p>
    pub fn set_savings_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_savings_plan_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSavingsPlanRates`.
///
/// <p>Describes the specified Savings Plans rates.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSavingsPlanRates {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_savings_plan_rates_input::Builder,
}
impl DescribeSavingsPlanRates {
    /// Creates a new `DescribeSavingsPlanRates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSavingsPlanRates,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlanRatesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSavingsPlanRatesOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlanRatesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the Savings Plan.</p>
    pub fn savings_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_id(input.into());
        self
    }
    /// <p>The ID of the Savings Plan.</p>
    pub fn set_savings_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_savings_plan_id(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::model::SavingsPlanRateFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanRateFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSavingsPlans`.
///
/// <p>Describes the specified Savings Plans.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSavingsPlans {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_savings_plans_input::Builder,
}
impl DescribeSavingsPlans {
    /// Creates a new `DescribeSavingsPlans`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSavingsPlans,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSavingsPlansOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `savingsPlanArns`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_arns`](Self::set_savings_plan_arns).
    ///
    /// <p>The Amazon Resource Names (ARN) of the Savings Plans.</p>
    pub fn savings_plan_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_arns(input.into());
        self
    }
    /// <p>The Amazon Resource Names (ARN) of the Savings Plans.</p>
    pub fn set_savings_plan_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_arns(input);
        self
    }
    /// Appends an item to `savingsPlanIds`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_ids`](Self::set_savings_plan_ids).
    ///
    /// <p>The IDs of the Savings Plans.</p>
    pub fn savings_plan_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_ids(input.into());
        self
    }
    /// <p>The IDs of the Savings Plans.</p>
    pub fn set_savings_plan_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_ids(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// Appends an item to `states`.
    ///
    /// To override the contents of this collection use [`set_states`](Self::set_states).
    ///
    /// <p>The states.</p>
    pub fn states(mut self, input: crate::model::SavingsPlanState) -> Self {
        self.inner = self.inner.states(input);
        self
    }
    /// <p>The states.</p>
    pub fn set_states(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanState>>,
    ) -> Self {
        self.inner = self.inner.set_states(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::model::SavingsPlanFilter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanFilter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSavingsPlansOfferingRates`.
///
/// <p>Describes the specified Savings Plans offering rates.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSavingsPlansOfferingRates {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_savings_plans_offering_rates_input::Builder,
}
impl DescribeSavingsPlansOfferingRates {
    /// Creates a new `DescribeSavingsPlansOfferingRates`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSavingsPlansOfferingRates,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansOfferingRatesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSavingsPlansOfferingRatesOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansOfferingRatesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `savingsPlanOfferingIds`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_offering_ids`](Self::set_savings_plan_offering_ids).
    ///
    /// <p>The IDs of the offerings.</p>
    pub fn savings_plan_offering_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.savings_plan_offering_ids(input.into());
        self
    }
    /// <p>The IDs of the offerings.</p>
    pub fn set_savings_plan_offering_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_offering_ids(input);
        self
    }
    /// Appends an item to `savingsPlanPaymentOptions`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_payment_options`](Self::set_savings_plan_payment_options).
    ///
    /// <p>The payment options.</p>
    pub fn savings_plan_payment_options(
        mut self,
        input: crate::model::SavingsPlanPaymentOption,
    ) -> Self {
        self.inner = self.inner.savings_plan_payment_options(input);
        self
    }
    /// <p>The payment options.</p>
    pub fn set_savings_plan_payment_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanPaymentOption>>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_payment_options(input);
        self
    }
    /// Appends an item to `savingsPlanTypes`.
    ///
    /// To override the contents of this collection use [`set_savings_plan_types`](Self::set_savings_plan_types).
    ///
    /// <p>The plan types.</p>
    pub fn savings_plan_types(mut self, input: crate::model::SavingsPlanType) -> Self {
        self.inner = self.inner.savings_plan_types(input);
        self
    }
    /// <p>The plan types.</p>
    pub fn set_savings_plan_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanType>>,
    ) -> Self {
        self.inner = self.inner.set_savings_plan_types(input);
        self
    }
    /// Appends an item to `products`.
    ///
    /// To override the contents of this collection use [`set_products`](Self::set_products).
    ///
    /// <p>The AWS products.</p>
    pub fn products(mut self, input: crate::model::SavingsPlanProductType) -> Self {
        self.inner = self.inner.products(input);
        self
    }
    /// <p>The AWS products.</p>
    pub fn set_products(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanProductType>>,
    ) -> Self {
        self.inner = self.inner.set_products(input);
        self
    }
    /// Appends an item to `serviceCodes`.
    ///
    /// To override the contents of this collection use [`set_service_codes`](Self::set_service_codes).
    ///
    /// <p>The services.</p>
    pub fn service_codes(mut self, input: crate::model::SavingsPlanRateServiceCode) -> Self {
        self.inner = self.inner.service_codes(input);
        self
    }
    /// <p>The services.</p>
    pub fn set_service_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanRateServiceCode>>,
    ) -> Self {
        self.inner = self.inner.set_service_codes(input);
        self
    }
    /// Appends an item to `usageTypes`.
    ///
    /// To override the contents of this collection use [`set_usage_types`](Self::set_usage_types).
    ///
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_types(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usage_types(input.into());
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn set_usage_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_usage_types(input);
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operations(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.operations(input.into());
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_operations(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::model::SavingsPlanOfferingRateFilterElement) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::model::SavingsPlanOfferingRateFilterElement>,
        >,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSavingsPlansOfferings`.
///
/// <p>Describes the specified Savings Plans offerings.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSavingsPlansOfferings {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_savings_plans_offerings_input::Builder,
}
impl DescribeSavingsPlansOfferings {
    /// Creates a new `DescribeSavingsPlansOfferings`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSavingsPlansOfferings,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansOfferingsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSavingsPlansOfferingsOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSavingsPlansOfferingsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `offeringIds`.
    ///
    /// To override the contents of this collection use [`set_offering_ids`](Self::set_offering_ids).
    ///
    /// <p>The IDs of the offerings.</p>
    pub fn offering_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.offering_ids(input.into());
        self
    }
    /// <p>The IDs of the offerings.</p>
    pub fn set_offering_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_offering_ids(input);
        self
    }
    /// Appends an item to `paymentOptions`.
    ///
    /// To override the contents of this collection use [`set_payment_options`](Self::set_payment_options).
    ///
    /// <p>The payment options.</p>
    pub fn payment_options(mut self, input: crate::model::SavingsPlanPaymentOption) -> Self {
        self.inner = self.inner.payment_options(input);
        self
    }
    /// <p>The payment options.</p>
    pub fn set_payment_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanPaymentOption>>,
    ) -> Self {
        self.inner = self.inner.set_payment_options(input);
        self
    }
    /// <p>The product type.</p>
    pub fn product_type(mut self, input: crate::model::SavingsPlanProductType) -> Self {
        self.inner = self.inner.product_type(input);
        self
    }
    /// <p>The product type.</p>
    pub fn set_product_type(
        mut self,
        input: std::option::Option<crate::model::SavingsPlanProductType>,
    ) -> Self {
        self.inner = self.inner.set_product_type(input);
        self
    }
    /// Appends an item to `planTypes`.
    ///
    /// To override the contents of this collection use [`set_plan_types`](Self::set_plan_types).
    ///
    /// <p>The plan type.</p>
    pub fn plan_types(mut self, input: crate::model::SavingsPlanType) -> Self {
        self.inner = self.inner.plan_types(input);
        self
    }
    /// <p>The plan type.</p>
    pub fn set_plan_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanType>>,
    ) -> Self {
        self.inner = self.inner.set_plan_types(input);
        self
    }
    /// Appends an item to `durations`.
    ///
    /// To override the contents of this collection use [`set_durations`](Self::set_durations).
    ///
    /// <p>The durations, in seconds.</p>
    pub fn durations(mut self, input: i64) -> Self {
        self.inner = self.inner.durations(input);
        self
    }
    /// <p>The durations, in seconds.</p>
    pub fn set_durations(mut self, input: std::option::Option<std::vec::Vec<i64>>) -> Self {
        self.inner = self.inner.set_durations(input);
        self
    }
    /// Appends an item to `currencies`.
    ///
    /// To override the contents of this collection use [`set_currencies`](Self::set_currencies).
    ///
    /// <p>The currencies.</p>
    pub fn currencies(mut self, input: crate::model::CurrencyCode) -> Self {
        self.inner = self.inner.currencies(input);
        self
    }
    /// <p>The currencies.</p>
    pub fn set_currencies(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::CurrencyCode>>,
    ) -> Self {
        self.inner = self.inner.set_currencies(input);
        self
    }
    /// Appends an item to `descriptions`.
    ///
    /// To override the contents of this collection use [`set_descriptions`](Self::set_descriptions).
    ///
    /// <p>The descriptions.</p>
    pub fn descriptions(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.descriptions(input.into());
        self
    }
    /// <p>The descriptions.</p>
    pub fn set_descriptions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_descriptions(input);
        self
    }
    /// Appends an item to `serviceCodes`.
    ///
    /// To override the contents of this collection use [`set_service_codes`](Self::set_service_codes).
    ///
    /// <p>The services.</p>
    pub fn service_codes(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_codes(input.into());
        self
    }
    /// <p>The services.</p>
    pub fn set_service_codes(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_service_codes(input);
        self
    }
    /// Appends an item to `usageTypes`.
    ///
    /// To override the contents of this collection use [`set_usage_types`](Self::set_usage_types).
    ///
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn usage_types(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usage_types(input.into());
        self
    }
    /// <p>The usage details of the line item in the billing report.</p>
    pub fn set_usage_types(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_usage_types(input);
        self
    }
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn operations(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.operations(input.into());
        self
    }
    /// <p>The specific AWS operation for the line item in the billing report.</p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_operations(input);
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filters.</p>
    pub fn filters(mut self, input: crate::model::SavingsPlanOfferingFilterElement) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>The filters.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::SavingsPlanOfferingFilterElement>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The token for the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve additional results, make another call with the returned token value.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p>Lists the tags for the specified resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p>Adds the specified tags to the specified resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>One or more tags. For example, { "tags": {"key1":"value1", "key2":"value2"} }.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p>Removes the specified tags from the specified resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `tagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p>The tag keys.</p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p>The tag keys.</p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}
