// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteTags`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tag_keys(impl Into<String>)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::tag_keys) / [`set_tag_keys(Option<Vec::<String>>)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::set_tag_keys):<br>required: **true**<br><p>One or more tags to delete.</p><br>
    ///   - [`resource_id(impl Into<String>)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::resource_id) / [`set_resource_id(Option<String>)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::set_resource_id):<br>required: **true**<br><p>The ID of the tagged ML object. For example, <code>exampleModelId</code>.</p><br>
    ///   - [`resource_type(TaggableResourceType)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::resource_type) / [`set_resource_type(Option<TaggableResourceType>)`](crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::set_resource_type):<br>required: **true**<br><p>The type of the tagged ML object.</p><br>
    /// - On success, responds with [`DeleteTagsOutput`](crate::operation::delete_tags::DeleteTagsOutput) with field(s):
    ///   - [`resource_id(Option<String>)`](crate::operation::delete_tags::DeleteTagsOutput::resource_id): <p>The ID of the ML object from which tags were deleted.</p>
    ///   - [`resource_type(Option<TaggableResourceType>)`](crate::operation::delete_tags::DeleteTagsOutput::resource_type): <p>The type of the ML object from which tags were deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteTagsError>`](crate::operation::delete_tags::DeleteTagsError)
    pub fn delete_tags(&self) -> crate::operation::delete_tags::builders::DeleteTagsFluentBuilder {
        crate::operation::delete_tags::builders::DeleteTagsFluentBuilder::new(self.handle.clone())
    }
}
