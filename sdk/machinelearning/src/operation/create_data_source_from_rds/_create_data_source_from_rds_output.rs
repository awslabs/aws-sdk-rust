// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Represents the output of a <code>CreateDataSourceFromRDS</code> operation, and is an acknowledgement that Amazon ML received the request.</p>
/// <p>The <code>CreateDataSourceFromRDS</code>&gt; operation is asynchronous. You can poll for updates by using the <code>GetBatchPrediction</code> operation and checking the <code>Status</code> parameter. You can inspect the <code>Message</code> when <code>Status</code> shows up as <code>FAILED</code>. You can also check the progress of the copy operation by going to the <code>DataPipeline</code> console and looking up the pipeline using the <code>pipelineId </code> from the describe call.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDataSourceFromRdsOutput {
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request. </p>
    #[doc(hidden)]
    pub data_source_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateDataSourceFromRdsOutput {
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request. </p>
    pub fn data_source_id(&self) -> std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateDataSourceFromRdsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDataSourceFromRdsOutput {
    /// Creates a new builder-style object to manufacture [`CreateDataSourceFromRdsOutput`](crate::operation::create_data_source_from_rds::CreateDataSourceFromRdsOutput).
    pub fn builder(
    ) -> crate::operation::create_data_source_from_rds::builders::CreateDataSourceFromRdsOutputBuilder
    {
        crate::operation::create_data_source_from_rds::builders::CreateDataSourceFromRdsOutputBuilder::default()
    }
}

/// A builder for [`CreateDataSourceFromRdsOutput`](crate::operation::create_data_source_from_rds::CreateDataSourceFromRdsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDataSourceFromRdsOutputBuilder {
    pub(crate) data_source_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateDataSourceFromRdsOutputBuilder {
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request. </p>
    pub fn data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_id = Some(input.into());
        self
    }
    /// <p>A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the <code>DataSourceID</code> in the request. </p>
    pub fn set_data_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDataSourceFromRdsOutput`](crate::operation::create_data_source_from_rds::CreateDataSourceFromRdsOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_data_source_from_rds::CreateDataSourceFromRdsOutput {
        crate::operation::create_data_source_from_rds::CreateDataSourceFromRdsOutput {
            data_source_id: self.data_source_id,
            _request_id: self._request_id,
        }
    }
}
