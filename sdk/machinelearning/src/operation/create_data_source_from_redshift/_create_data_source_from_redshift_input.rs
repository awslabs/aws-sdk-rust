// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDataSourceFromRedshiftInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    #[doc(hidden)]
    pub data_source_id: std::option::Option<std::string::String>,
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    #[doc(hidden)]
    pub data_source_name: std::option::Option<std::string::String>,
    /// <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p>
    /// <ul>
    /// <li> <p>DatabaseInformation -</p>
    /// <ul>
    /// <li> <p> <code>DatabaseName</code> - The name of the Amazon Redshift database.</p> </li>
    /// <li> <p> <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</p> </li>
    /// </ul> </li>
    /// <li> <p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p> </li>
    /// <li> <p>SelectSqlQuery - The query that is used to retrieve the observation data for the <code>Datasource</code>.</p> </li>
    /// <li> <p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the <code>SelectSqlQuery</code> query is stored in this location.</p> </li>
    /// <li> <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p> </li>
    /// <li> <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p> </li>
    /// <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub data_spec: std::option::Option<crate::types::RedshiftDataSpec>,
    /// <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:</p>
    /// <ul>
    /// <li> <p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p> </li>
    /// <li> <p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to be used for <code>MLModel</code> training.</p>
    #[doc(hidden)]
    pub compute_statistics: bool,
}
impl CreateDataSourceFromRedshiftInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    pub fn data_source_id(&self) -> std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    pub fn data_source_name(&self) -> std::option::Option<&str> {
        self.data_source_name.as_deref()
    }
    /// <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p>
    /// <ul>
    /// <li> <p>DatabaseInformation -</p>
    /// <ul>
    /// <li> <p> <code>DatabaseName</code> - The name of the Amazon Redshift database.</p> </li>
    /// <li> <p> <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</p> </li>
    /// </ul> </li>
    /// <li> <p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p> </li>
    /// <li> <p>SelectSqlQuery - The query that is used to retrieve the observation data for the <code>Datasource</code>.</p> </li>
    /// <li> <p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the <code>SelectSqlQuery</code> query is stored in this location.</p> </li>
    /// <li> <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p> </li>
    /// <li> <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p> </li>
    /// <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li>
    /// </ul>
    pub fn data_spec(&self) -> std::option::Option<&crate::types::RedshiftDataSpec> {
        self.data_spec.as_ref()
    }
    /// <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:</p>
    /// <ul>
    /// <li> <p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p> </li>
    /// <li> <p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code> </p> </li>
    /// </ul>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to be used for <code>MLModel</code> training.</p>
    pub fn compute_statistics(&self) -> bool {
        self.compute_statistics
    }
}
impl CreateDataSourceFromRedshiftInput {
    /// Creates a new builder-style object to manufacture [`CreateDataSourceFromRedshiftInput`](crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftInput).
    pub fn builder() -> crate::operation::create_data_source_from_redshift::builders::CreateDataSourceFromRedshiftInputBuilder{
        crate::operation::create_data_source_from_redshift::builders::CreateDataSourceFromRedshiftInputBuilder::default()
    }
}

/// A builder for [`CreateDataSourceFromRedshiftInput`](crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDataSourceFromRedshiftInputBuilder {
    pub(crate) data_source_id: std::option::Option<std::string::String>,
    pub(crate) data_source_name: std::option::Option<std::string::String>,
    pub(crate) data_spec: std::option::Option<crate::types::RedshiftDataSpec>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) compute_statistics: std::option::Option<bool>,
}
impl CreateDataSourceFromRedshiftInputBuilder {
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    pub fn data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_id = Some(input.into());
        self
    }
    /// <p>A user-supplied ID that uniquely identifies the <code>DataSource</code>.</p>
    pub fn set_data_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    pub fn data_source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_name = Some(input.into());
        self
    }
    /// <p>A user-supplied name or description of the <code>DataSource</code>. </p>
    pub fn set_data_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_name = input;
        self
    }
    /// <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p>
    /// <ul>
    /// <li> <p>DatabaseInformation -</p>
    /// <ul>
    /// <li> <p> <code>DatabaseName</code> - The name of the Amazon Redshift database.</p> </li>
    /// <li> <p> <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</p> </li>
    /// </ul> </li>
    /// <li> <p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p> </li>
    /// <li> <p>SelectSqlQuery - The query that is used to retrieve the observation data for the <code>Datasource</code>.</p> </li>
    /// <li> <p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the <code>SelectSqlQuery</code> query is stored in this location.</p> </li>
    /// <li> <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p> </li>
    /// <li> <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p> </li>
    /// <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li>
    /// </ul>
    pub fn data_spec(mut self, input: crate::types::RedshiftDataSpec) -> Self {
        self.data_spec = Some(input);
        self
    }
    /// <p>The data specification of an Amazon Redshift <code>DataSource</code>:</p>
    /// <ul>
    /// <li> <p>DatabaseInformation -</p>
    /// <ul>
    /// <li> <p> <code>DatabaseName</code> - The name of the Amazon Redshift database.</p> </li>
    /// <li> <p> <code> ClusterIdentifier</code> - The unique ID for the Amazon Redshift cluster.</p> </li>
    /// </ul> </li>
    /// <li> <p>DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.</p> </li>
    /// <li> <p>SelectSqlQuery - The query that is used to retrieve the observation data for the <code>Datasource</code>.</p> </li>
    /// <li> <p>S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the <code>SelectSqlQuery</code> query is stored in this location.</p> </li>
    /// <li> <p>DataSchemaUri - The Amazon S3 location of the <code>DataSchema</code>.</p> </li>
    /// <li> <p>DataSchema - A JSON string representing the schema. This is not required if <code>DataSchemaUri</code> is specified. </p> </li>
    /// <li> <p>DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the <code>DataSource</code>.</p> <p> Sample - <code> "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"</code> </p> </li>
    /// </ul>
    pub fn set_data_spec(
        mut self,
        input: std::option::Option<crate::types::RedshiftDataSpec>,
    ) -> Self {
        self.data_spec = input;
        self
    }
    /// <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:</p>
    /// <ul>
    /// <li> <p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p> </li>
    /// <li> <p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code> </p> </li>
    /// </ul>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:</p>
    /// <ul>
    /// <li> <p>A security group to allow Amazon ML to execute the <code>SelectSqlQuery</code> query on an Amazon Redshift cluster</p> </li>
    /// <li> <p>An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the <code>S3StagingLocation</code> </p> </li>
    /// </ul>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to be used for <code>MLModel</code> training.</p>
    pub fn compute_statistics(mut self, input: bool) -> Self {
        self.compute_statistics = Some(input);
        self
    }
    /// <p>The compute statistics for a <code>DataSource</code>. The statistics are generated from the observation data referenced by a <code>DataSource</code>. Amazon ML uses the statistics internally during <code>MLModel</code> training. This parameter must be set to <code>true</code> if the <code>DataSource</code> needs to be used for <code>MLModel</code> training.</p>
    pub fn set_compute_statistics(mut self, input: std::option::Option<bool>) -> Self {
        self.compute_statistics = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDataSourceFromRedshiftInput`](crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftInput {
                data_source_id: self.data_source_id,
                data_source_name: self.data_source_name,
                data_spec: self.data_spec,
                role_arn: self.role_arn,
                compute_statistics: self.compute_statistics.unwrap_or_default(),
            },
        )
    }
}
