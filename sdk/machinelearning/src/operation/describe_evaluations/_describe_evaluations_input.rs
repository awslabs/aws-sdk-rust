// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEvaluationsInput {
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    /// <ul>
    /// <li> <p> <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p> </li>
    /// <li> <p> <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p> </li>
    /// <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</p> </li>
    /// <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p> </li>
    /// <li> <p> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filter_variable: std::option::Option<crate::types::EvaluationFilterVariable>,
    /// <p>The equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    #[doc(hidden)]
    pub eq: std::option::Option<std::string::String>,
    /// <p>The greater than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    #[doc(hidden)]
    pub gt: std::option::Option<std::string::String>,
    /// <p>The less than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    #[doc(hidden)]
    pub lt: std::option::Option<std::string::String>,
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>. </p>
    #[doc(hidden)]
    pub ge: std::option::Option<std::string::String>,
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    #[doc(hidden)]
    pub le: std::option::Option<std::string::String>,
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    #[doc(hidden)]
    pub ne: std::option::Option<std::string::String>,
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>Evaluation</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p>
    /// <ul>
    /// <li> <p>2014-09</p> </li>
    /// <li> <p>2014-09-09</p> </li>
    /// <li> <p>2014-09-09-Holiday</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    /// <ul>
    /// <li> <p> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p> </li>
    /// <li> <p> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p> </li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    #[doc(hidden)]
    pub sort_order: std::option::Option<crate::types::SortOrder>,
    /// <p>The ID of the page in the paginated results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
}
impl DescribeEvaluationsInput {
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    /// <ul>
    /// <li> <p> <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p> </li>
    /// <li> <p> <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p> </li>
    /// <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</p> </li>
    /// <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p> </li>
    /// <li> <p> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p> </li>
    /// </ul>
    pub fn filter_variable(&self) -> std::option::Option<&crate::types::EvaluationFilterVariable> {
        self.filter_variable.as_ref()
    }
    /// <p>The equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn eq(&self) -> std::option::Option<&str> {
        self.eq.as_deref()
    }
    /// <p>The greater than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn gt(&self) -> std::option::Option<&str> {
        self.gt.as_deref()
    }
    /// <p>The less than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn lt(&self) -> std::option::Option<&str> {
        self.lt.as_deref()
    }
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>. </p>
    pub fn ge(&self) -> std::option::Option<&str> {
        self.ge.as_deref()
    }
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn le(&self) -> std::option::Option<&str> {
        self.le.as_deref()
    }
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn ne(&self) -> std::option::Option<&str> {
        self.ne.as_deref()
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>Evaluation</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p>
    /// <ul>
    /// <li> <p>2014-09</p> </li>
    /// <li> <p>2014-09-09</p> </li>
    /// <li> <p>2014-09-09-Holiday</p> </li>
    /// </ul>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    /// <ul>
    /// <li> <p> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p> </li>
    /// <li> <p> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p> </li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn sort_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_order.as_ref()
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
}
impl DescribeEvaluationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeEvaluationsInput`](crate::operation::describe_evaluations::DescribeEvaluationsInput).
    pub fn builder(
    ) -> crate::operation::describe_evaluations::builders::DescribeEvaluationsInputBuilder {
        crate::operation::describe_evaluations::builders::DescribeEvaluationsInputBuilder::default()
    }
}

/// A builder for [`DescribeEvaluationsInput`](crate::operation::describe_evaluations::DescribeEvaluationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeEvaluationsInputBuilder {
    pub(crate) filter_variable: std::option::Option<crate::types::EvaluationFilterVariable>,
    pub(crate) eq: std::option::Option<std::string::String>,
    pub(crate) gt: std::option::Option<std::string::String>,
    pub(crate) lt: std::option::Option<std::string::String>,
    pub(crate) ge: std::option::Option<std::string::String>,
    pub(crate) le: std::option::Option<std::string::String>,
    pub(crate) ne: std::option::Option<std::string::String>,
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) sort_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
}
impl DescribeEvaluationsInputBuilder {
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    /// <ul>
    /// <li> <p> <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p> </li>
    /// <li> <p> <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p> </li>
    /// <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</p> </li>
    /// <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p> </li>
    /// <li> <p> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p> </li>
    /// </ul>
    pub fn filter_variable(mut self, input: crate::types::EvaluationFilterVariable) -> Self {
        self.filter_variable = Some(input);
        self
    }
    /// <p>Use one of the following variable to filter a list of <code>Evaluation</code> objects:</p>
    /// <ul>
    /// <li> <p> <code>CreatedAt</code> - Sets the search criteria to the <code>Evaluation</code> creation date.</p> </li>
    /// <li> <p> <code>Status</code> - Sets the search criteria to the <code>Evaluation</code> status.</p> </li>
    /// <li> <p> <code>Name</code> - Sets the search criteria to the contents of <code>Evaluation</code> <b> </b> <code>Name</code>.</p> </li>
    /// <li> <p> <code>IAMUser</code> - Sets the search criteria to the user account that invoked an <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> that was evaluated.</p> </li>
    /// <li> <p> <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in <code>Evaluation</code>.</p> </li>
    /// <li> <p> <code>DataUri</code> - Sets the search criteria to the data file(s) used in <code>Evaluation</code>. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.</p> </li>
    /// </ul>
    pub fn set_filter_variable(
        mut self,
        input: std::option::Option<crate::types::EvaluationFilterVariable>,
    ) -> Self {
        self.filter_variable = input;
        self
    }
    /// <p>The equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn eq(mut self, input: impl Into<std::string::String>) -> Self {
        self.eq = Some(input.into());
        self
    }
    /// <p>The equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that exactly match the value specified with <code>EQ</code>.</p>
    pub fn set_eq(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.eq = input;
        self
    }
    /// <p>The greater than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn gt(mut self, input: impl Into<std::string::String>) -> Self {
        self.gt = Some(input.into());
        self
    }
    /// <p>The greater than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than the value specified with <code>GT</code>.</p>
    pub fn set_gt(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gt = input;
        self
    }
    /// <p>The less than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn lt(mut self, input: impl Into<std::string::String>) -> Self {
        self.lt = Some(input.into());
        self
    }
    /// <p>The less than operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than the value specified with <code>LT</code>.</p>
    pub fn set_lt(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lt = input;
        self
    }
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>. </p>
    pub fn ge(mut self, input: impl Into<std::string::String>) -> Self {
        self.ge = Some(input.into());
        self
    }
    /// <p>The greater than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are greater than or equal to the value specified with <code>GE</code>. </p>
    pub fn set_ge(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ge = input;
        self
    }
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn le(mut self, input: impl Into<std::string::String>) -> Self {
        self.le = Some(input.into());
        self
    }
    /// <p>The less than or equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values that are less than or equal to the value specified with <code>LE</code>.</p>
    pub fn set_le(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.le = input;
        self
    }
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn ne(mut self, input: impl Into<std::string::String>) -> Self {
        self.ne = Some(input.into());
        self
    }
    /// <p>The not equal to operator. The <code>Evaluation</code> results will have <code>FilterVariable</code> values not equal to the value specified with <code>NE</code>.</p>
    pub fn set_ne(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ne = input;
        self
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>Evaluation</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p>
    /// <ul>
    /// <li> <p>2014-09</p> </li>
    /// <li> <p>2014-09-09</p> </li>
    /// <li> <p>2014-09-09-Holiday</p> </li>
    /// </ul>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>A string that is found at the beginning of a variable, such as <code>Name</code> or <code>Id</code>.</p>
    /// <p>For example, an <code>Evaluation</code> could have the <code>Name</code> <code>2014-09-09-HolidayGiftMailer</code>. To search for this <code>Evaluation</code>, select <code>Name</code> for the <code>FilterVariable</code> and any of the following strings for the <code>Prefix</code>: </p>
    /// <ul>
    /// <li> <p>2014-09</p> </li>
    /// <li> <p>2014-09-09</p> </li>
    /// <li> <p>2014-09-09-Holiday</p> </li>
    /// </ul>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    /// <ul>
    /// <li> <p> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p> </li>
    /// <li> <p> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p> </li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn sort_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_order = Some(input);
        self
    }
    /// <p>A two-value parameter that determines the sequence of the resulting list of <code>Evaluation</code>.</p>
    /// <ul>
    /// <li> <p> <code>asc</code> - Arranges the list in ascending order (A-Z, 0-9).</p> </li>
    /// <li> <p> <code>dsc</code> - Arranges the list in descending order (Z-A, 9-0).</p> </li>
    /// </ul>
    /// <p>Results are sorted by <code>FilterVariable</code>.</p>
    pub fn set_sort_order(mut self, input: std::option::Option<crate::types::SortOrder>) -> Self {
        self.sort_order = input;
        self
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The ID of the page in the paginated results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p> The maximum number of <code>Evaluation</code> to include in the result.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeEvaluationsInput`](crate::operation::describe_evaluations::DescribeEvaluationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_evaluations::DescribeEvaluationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_evaluations::DescribeEvaluationsInput {
                filter_variable: self.filter_variable,
                eq: self.eq,
                gt: self.gt,
                lt: self.lt,
                ge: self.ge,
                le: self.le,
                ne: self.ne,
                prefix: self.prefix,
                sort_order: self.sort_order,
                next_token: self.next_token,
                limit: self.limit,
            },
        )
    }
}
