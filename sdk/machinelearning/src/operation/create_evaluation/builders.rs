// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_evaluation::_create_evaluation_output::CreateEvaluationOutputBuilder;

pub use crate::operation::create_evaluation::_create_evaluation_input::CreateEvaluationInputBuilder;

/// Fluent builder constructing a request to `CreateEvaluation`.
///
/// <p>Creates a new <code>Evaluation</code> of an <code>MLModel</code>. An <code>MLModel</code> is evaluated on a set of observations associated to a <code>DataSource</code>. Like a <code>DataSource</code> for an <code>MLModel</code>, the <code>DataSource</code> for an <code>Evaluation</code> contains values for the <code>Target Variable</code>. The <code>Evaluation</code> compares the predicted result for each observation to the actual outcome and provides a summary so that you know how effective the <code>MLModel</code> functions on the test data. Evaluation generates a relevant performance metric, such as BinaryAUC, RegressionRMSE or MulticlassAvgFScore based on the corresponding <code>MLModelType</code>: <code>BINARY</code>, <code>REGRESSION</code> or <code>MULTICLASS</code>. </p>
/// <p> <code>CreateEvaluation</code> is an asynchronous operation. In response to <code>CreateEvaluation</code>, Amazon Machine Learning (Amazon ML) immediately returns and sets the evaluation status to <code>PENDING</code>. After the <code>Evaluation</code> is created and ready for use, Amazon ML sets the status to <code>COMPLETED</code>. </p>
/// <p>You can use the <code>GetEvaluation</code> operation to check progress of the evaluation during the creation operation.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateEvaluationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_evaluation::builders::CreateEvaluationInputBuilder,
}
impl CreateEvaluationFluentBuilder {
    /// Creates a new `CreateEvaluation`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_evaluation::CreateEvaluation,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_evaluation::CreateEvaluationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_evaluation::CreateEvaluationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_evaluation::CreateEvaluationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    pub fn evaluation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.evaluation_id(input.into());
        self
    }
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    pub fn set_evaluation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_evaluation_id(input);
        self
    }
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    pub fn evaluation_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.evaluation_name(input.into());
        self
    }
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    pub fn set_evaluation_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_evaluation_name(input);
        self
    }
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    pub fn ml_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ml_model_id(input.into());
        self
    }
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    pub fn set_ml_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_ml_model_id(input);
        self
    }
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    pub fn evaluation_data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.evaluation_data_source_id(input.into());
        self
    }
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    pub fn set_evaluation_data_source_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_evaluation_data_source_id(input);
        self
    }
}
