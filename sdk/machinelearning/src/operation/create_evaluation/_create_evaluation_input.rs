// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEvaluationInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    #[doc(hidden)]
    pub evaluation_id: std::option::Option<std::string::String>,
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    #[doc(hidden)]
    pub evaluation_name: std::option::Option<std::string::String>,
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    #[doc(hidden)]
    pub ml_model_id: std::option::Option<std::string::String>,
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    #[doc(hidden)]
    pub evaluation_data_source_id: std::option::Option<std::string::String>,
}
impl CreateEvaluationInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    pub fn evaluation_id(&self) -> std::option::Option<&str> {
        self.evaluation_id.as_deref()
    }
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    pub fn evaluation_name(&self) -> std::option::Option<&str> {
        self.evaluation_name.as_deref()
    }
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    pub fn ml_model_id(&self) -> std::option::Option<&str> {
        self.ml_model_id.as_deref()
    }
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    pub fn evaluation_data_source_id(&self) -> std::option::Option<&str> {
        self.evaluation_data_source_id.as_deref()
    }
}
impl CreateEvaluationInput {
    /// Creates a new builder-style object to manufacture [`CreateEvaluationInput`](crate::operation::create_evaluation::CreateEvaluationInput).
    pub fn builder() -> crate::operation::create_evaluation::builders::CreateEvaluationInputBuilder
    {
        crate::operation::create_evaluation::builders::CreateEvaluationInputBuilder::default()
    }
}

/// A builder for [`CreateEvaluationInput`](crate::operation::create_evaluation::CreateEvaluationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateEvaluationInputBuilder {
    pub(crate) evaluation_id: std::option::Option<std::string::String>,
    pub(crate) evaluation_name: std::option::Option<std::string::String>,
    pub(crate) ml_model_id: std::option::Option<std::string::String>,
    pub(crate) evaluation_data_source_id: std::option::Option<std::string::String>,
}
impl CreateEvaluationInputBuilder {
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    pub fn evaluation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluation_id = Some(input.into());
        self
    }
    /// <p>A user-supplied ID that uniquely identifies the <code>Evaluation</code>.</p>
    pub fn set_evaluation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.evaluation_id = input;
        self
    }
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    pub fn evaluation_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluation_name = Some(input.into());
        self
    }
    /// <p>A user-supplied name or description of the <code>Evaluation</code>.</p>
    pub fn set_evaluation_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.evaluation_name = input;
        self
    }
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    pub fn ml_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ml_model_id = Some(input.into());
        self
    }
    /// <p>The ID of the <code>MLModel</code> to evaluate.</p>
    /// <p>The schema used in creating the <code>MLModel</code> must match the schema of the <code>DataSource</code> used in the <code>Evaluation</code>.</p>
    pub fn set_ml_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ml_model_id = input;
        self
    }
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    pub fn evaluation_data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.evaluation_data_source_id = Some(input.into());
        self
    }
    /// <p>The ID of the <code>DataSource</code> for the evaluation. The schema of the <code>DataSource</code> must match the schema used to create the <code>MLModel</code>.</p>
    pub fn set_evaluation_data_source_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.evaluation_data_source_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateEvaluationInput`](crate::operation::create_evaluation::CreateEvaluationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_evaluation::CreateEvaluationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_evaluation::CreateEvaluationInput {
            evaluation_id: self.evaluation_id,
            evaluation_name: self.evaluation_name,
            ml_model_id: self.ml_model_id,
            evaluation_data_source_id: self.evaluation_data_source_id,
        })
    }
}
