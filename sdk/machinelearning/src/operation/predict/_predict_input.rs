// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PredictInput {
    /// <p>A unique identifier of the <code>MLModel</code>.</p>
    #[doc(hidden)]
    pub ml_model_id: std::option::Option<std::string::String>,
    /// <p>A map of variable name-value pairs that represent an observation.</p>
    #[doc(hidden)]
    pub record:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub predict_endpoint: std::option::Option<std::string::String>,
}
impl PredictInput {
    /// <p>A unique identifier of the <code>MLModel</code>.</p>
    pub fn ml_model_id(&self) -> std::option::Option<&str> {
        self.ml_model_id.as_deref()
    }
    /// <p>A map of variable name-value pairs that represent an observation.</p>
    pub fn record(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.record.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn predict_endpoint(&self) -> std::option::Option<&str> {
        self.predict_endpoint.as_deref()
    }
}
impl PredictInput {
    /// Creates a new builder-style object to manufacture [`PredictInput`](crate::operation::predict::PredictInput).
    pub fn builder() -> crate::operation::predict::builders::PredictInputBuilder {
        crate::operation::predict::builders::PredictInputBuilder::default()
    }
}

/// A builder for [`PredictInput`](crate::operation::predict::PredictInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PredictInputBuilder {
    pub(crate) ml_model_id: std::option::Option<std::string::String>,
    pub(crate) record:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) predict_endpoint: std::option::Option<std::string::String>,
}
impl PredictInputBuilder {
    /// <p>A unique identifier of the <code>MLModel</code>.</p>
    pub fn ml_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ml_model_id = Some(input.into());
        self
    }
    /// <p>A unique identifier of the <code>MLModel</code>.</p>
    pub fn set_ml_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ml_model_id = input;
        self
    }
    /// Adds a key-value pair to `record`.
    ///
    /// To override the contents of this collection use [`set_record`](Self::set_record).
    ///
    /// <p>A map of variable name-value pairs that represent an observation.</p>
    pub fn record(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.record.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.record = Some(hash_map);
        self
    }
    /// <p>A map of variable name-value pairs that represent an observation.</p>
    pub fn set_record(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.record = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn predict_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.predict_endpoint = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_predict_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.predict_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`PredictInput`](crate::operation::predict::PredictInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::predict::PredictInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::predict::PredictInput {
            ml_model_id: self.ml_model_id,
            record: self.record,
            predict_endpoint: self.predict_endpoint,
        })
    }
}
