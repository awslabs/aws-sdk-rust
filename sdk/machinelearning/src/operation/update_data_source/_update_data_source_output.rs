// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the output of an <code>UpdateDataSource</code> operation.</p>
/// <p>You can see the updated content by using the <code>GetBatchPrediction</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDataSourceOutput {
    /// <p>The ID assigned to the <code>DataSource</code> during creation. This value should be identical to the value of the <code>DataSourceID</code> in the request.</p>
    #[doc(hidden)]
    pub data_source_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateDataSourceOutput {
    /// <p>The ID assigned to the <code>DataSource</code> during creation. This value should be identical to the value of the <code>DataSourceID</code> in the request.</p>
    pub fn data_source_id(&self) -> std::option::Option<&str> {
        self.data_source_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
    pub fn builder() -> crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder
    {
        crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder::default()
    }
}

/// A builder for [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDataSourceOutputBuilder {
    pub(crate) data_source_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateDataSourceOutputBuilder {
    /// <p>The ID assigned to the <code>DataSource</code> during creation. This value should be identical to the value of the <code>DataSourceID</code> in the request.</p>
    pub fn data_source_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source_id = Some(input.into());
        self
    }
    /// <p>The ID assigned to the <code>DataSource</code> during creation. This value should be identical to the value of the <code>DataSourceID</code> in the request.</p>
    pub fn set_data_source_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDataSourceOutput`](crate::operation::update_data_source::UpdateDataSourceOutput).
    pub fn build(self) -> crate::operation::update_data_source::UpdateDataSourceOutput {
        crate::operation::update_data_source::UpdateDataSourceOutput {
            data_source_id: self.data_source_id,
            _request_id: self._request_id,
        }
    }
}
