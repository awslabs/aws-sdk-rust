// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBatchPredictionInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.</p>
    #[doc(hidden)]
    pub batch_prediction_id: std::option::Option<std::string::String>,
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.</p>
    #[doc(hidden)]
    pub batch_prediction_name: std::option::Option<std::string::String>,
    /// <p>The ID of the <code>MLModel</code> that will generate predictions for the group of observations. </p>
    #[doc(hidden)]
    pub ml_model_id: std::option::Option<std::string::String>,
    /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
    #[doc(hidden)]
    pub batch_prediction_data_source_id: std::option::Option<std::string::String>,
    /// <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
    /// <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    #[doc(hidden)]
    pub output_uri: std::option::Option<std::string::String>,
}
impl CreateBatchPredictionInput {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.</p>
    pub fn batch_prediction_id(&self) -> std::option::Option<&str> {
        self.batch_prediction_id.as_deref()
    }
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.</p>
    pub fn batch_prediction_name(&self) -> std::option::Option<&str> {
        self.batch_prediction_name.as_deref()
    }
    /// <p>The ID of the <code>MLModel</code> that will generate predictions for the group of observations. </p>
    pub fn ml_model_id(&self) -> std::option::Option<&str> {
        self.ml_model_id.as_deref()
    }
    /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
    pub fn batch_prediction_data_source_id(&self) -> std::option::Option<&str> {
        self.batch_prediction_data_source_id.as_deref()
    }
    /// <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
    /// <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    pub fn output_uri(&self) -> std::option::Option<&str> {
        self.output_uri.as_deref()
    }
}
impl CreateBatchPredictionInput {
    /// Creates a new builder-style object to manufacture [`CreateBatchPredictionInput`](crate::operation::create_batch_prediction::CreateBatchPredictionInput).
    pub fn builder(
    ) -> crate::operation::create_batch_prediction::builders::CreateBatchPredictionInputBuilder
    {
        crate::operation::create_batch_prediction::builders::CreateBatchPredictionInputBuilder::default()
    }
}

/// A builder for [`CreateBatchPredictionInput`](crate::operation::create_batch_prediction::CreateBatchPredictionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBatchPredictionInputBuilder {
    pub(crate) batch_prediction_id: std::option::Option<std::string::String>,
    pub(crate) batch_prediction_name: std::option::Option<std::string::String>,
    pub(crate) ml_model_id: std::option::Option<std::string::String>,
    pub(crate) batch_prediction_data_source_id: std::option::Option<std::string::String>,
    pub(crate) output_uri: std::option::Option<std::string::String>,
}
impl CreateBatchPredictionInputBuilder {
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.</p>
    pub fn batch_prediction_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.batch_prediction_id = Some(input.into());
        self
    }
    /// <p>A user-supplied ID that uniquely identifies the <code>BatchPrediction</code>.</p>
    pub fn set_batch_prediction_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.batch_prediction_id = input;
        self
    }
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.</p>
    pub fn batch_prediction_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.batch_prediction_name = Some(input.into());
        self
    }
    /// <p>A user-supplied name or description of the <code>BatchPrediction</code>. <code>BatchPredictionName</code> can only use the UTF-8 character set.</p>
    pub fn set_batch_prediction_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.batch_prediction_name = input;
        self
    }
    /// <p>The ID of the <code>MLModel</code> that will generate predictions for the group of observations. </p>
    pub fn ml_model_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ml_model_id = Some(input.into());
        self
    }
    /// <p>The ID of the <code>MLModel</code> that will generate predictions for the group of observations. </p>
    pub fn set_ml_model_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ml_model_id = input;
        self
    }
    /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
    pub fn batch_prediction_data_source_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.batch_prediction_data_source_id = Some(input.into());
        self
    }
    /// <p>The ID of the <code>DataSource</code> that points to the group of observations to predict.</p>
    pub fn set_batch_prediction_data_source_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.batch_prediction_data_source_id = input;
        self
    }
    /// <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
    /// <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    pub fn output_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_uri = Some(input.into());
        self
    }
    /// <p>The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the <code>s3 key</code> portion of the <code>outputURI</code> field: ':', '//', '/./', '/../'.</p>
    /// <p>Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the <a href="https://docs.aws.amazon.com/machine-learning/latest/dg">Amazon Machine Learning Developer Guide</a>.</p>
    pub fn set_output_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_uri = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBatchPredictionInput`](crate::operation::create_batch_prediction::CreateBatchPredictionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_batch_prediction::CreateBatchPredictionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_batch_prediction::CreateBatchPredictionInput {
                batch_prediction_id: self.batch_prediction_id,
                batch_prediction_name: self.batch_prediction_name,
                ml_model_id: self.ml_model_id,
                batch_prediction_data_source_id: self.batch_prediction_data_source_id,
                output_uri: self.output_uri,
            },
        )
    }
}
