// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_batch_predictions_output_next_token(
    input: &crate::operation::describe_batch_predictions::DescribeBatchPredictionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_data_sources_output_next_token(
    input: &crate::operation::describe_data_sources::DescribeDataSourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_evaluations_output_next_token(
    input: &crate::operation::describe_evaluations::DescribeEvaluationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_ml_models_output_next_token(
    input: &crate::operation::describe_ml_models::DescribeMlModelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_batch_predictions_output_results(
    input: crate::operation::describe_batch_predictions::DescribeBatchPredictionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BatchPrediction>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_data_sources_output_results(
    input: crate::operation::describe_data_sources::DescribeDataSourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DataSource>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_evaluations_output_results(
    input: crate::operation::describe_evaluations::DescribeEvaluationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Evaluation>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_ml_models_output_results(
    input: crate::operation::describe_ml_models::DescribeMlModelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::MlModel>> {
    let input = match input.results {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
