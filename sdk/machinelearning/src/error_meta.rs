// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.</p>
    IdempotentParameterMismatchException(crate::error::IdempotentParameterMismatchException),
    /// <p>An error on the server occurred when trying to process a request.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
    InvalidInputException(crate::error::InvalidInputException),
    #[allow(missing_docs)] // documentation missing in model
    InvalidTagException(crate::error::InvalidTagException),
    /// <p>The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as <code>DataSource</code>.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The exception is thrown when a predict request is made to an unmounted <code>MLModel</code>.</p>
    PredictorNotMountedException(crate::error::PredictorNotMountedException),
    /// <p>A specified resource cannot be located.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    #[allow(missing_docs)] // documentation missing in model
    TagLimitExceededException(crate::error::TagLimitExceededException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::PredictorNotMountedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TagLimitExceededException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AddTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AddTagsError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::AddTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AddTagsError::TagLimitExceededException(inner) => {
                Error::TagLimitExceededException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBatchPredictionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBatchPredictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBatchPredictionError> for Error {
    fn from(err: crate::error::CreateBatchPredictionError) -> Self {
        match err {
            crate::error::CreateBatchPredictionError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateBatchPredictionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateBatchPredictionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromRDSError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromRDSError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceFromRDSError> for Error {
    fn from(err: crate::error::CreateDataSourceFromRDSError) -> Self {
        match err {
            crate::error::CreateDataSourceFromRDSError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateDataSourceFromRDSError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDataSourceFromRDSError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDataSourceFromRDSError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromRedshiftError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromRedshiftError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceFromRedshiftError> for Error {
    fn from(err: crate::error::CreateDataSourceFromRedshiftError) -> Self {
        match err {
            crate::error::CreateDataSourceFromRedshiftError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateDataSourceFromRedshiftError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateDataSourceFromRedshiftError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::CreateDataSourceFromRedshiftError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromS3Error, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDataSourceFromS3Error, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDataSourceFromS3Error> for Error {
    fn from(err: crate::error::CreateDataSourceFromS3Error) -> Self {
        match err {
            crate::error::CreateDataSourceFromS3Error::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateDataSourceFromS3Error::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDataSourceFromS3Error::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateDataSourceFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEvaluationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEvaluationError> for Error {
    fn from(err: crate::error::CreateEvaluationError) -> Self {
        match err {
            crate::error::CreateEvaluationError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateEvaluationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEvaluationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateMLModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateMLModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateMLModelError> for Error {
    fn from(err: crate::error::CreateMLModelError) -> Self {
        match err {
            crate::error::CreateMLModelError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateMLModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateMLModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRealtimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRealtimeEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRealtimeEndpointError> for Error {
    fn from(err: crate::error::CreateRealtimeEndpointError) -> Self {
        match err {
            crate::error::CreateRealtimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRealtimeEndpointError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::CreateRealtimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateRealtimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBatchPredictionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBatchPredictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBatchPredictionError> for Error {
    fn from(err: crate::error::DeleteBatchPredictionError) -> Self {
        match err {
            crate::error::DeleteBatchPredictionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteBatchPredictionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteBatchPredictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDataSourceError> for Error {
    fn from(err: crate::error::DeleteDataSourceError) -> Self {
        match err {
            crate::error::DeleteDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDataSourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEvaluationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEvaluationError> for Error {
    fn from(err: crate::error::DeleteEvaluationError) -> Self {
        match err {
            crate::error::DeleteEvaluationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEvaluationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteEvaluationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMLModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMLModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMLModelError> for Error {
    fn from(err: crate::error::DeleteMLModelError) -> Self {
        match err {
            crate::error::DeleteMLModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteMLModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteMLModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRealtimeEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRealtimeEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRealtimeEndpointError> for Error {
    fn from(err: crate::error::DeleteRealtimeEndpointError) -> Self {
        match err {
            crate::error::DeleteRealtimeEndpointError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRealtimeEndpointError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteRealtimeEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteRealtimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTagsError> for Error {
    fn from(err: crate::error::DeleteTagsError) -> Self {
        match err {
            crate::error::DeleteTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteTagsError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::error::DeleteTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBatchPredictionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBatchPredictionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBatchPredictionsError> for Error {
    fn from(err: crate::error::DescribeBatchPredictionsError) -> Self {
        match err {
            crate::error::DescribeBatchPredictionsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeBatchPredictionsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeBatchPredictionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDataSourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDataSourcesError> for Error {
    fn from(err: crate::error::DescribeDataSourcesError) -> Self {
        match err {
            crate::error::DescribeDataSourcesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDataSourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEvaluationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEvaluationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEvaluationsError> for Error {
    fn from(err: crate::error::DescribeEvaluationsError) -> Self {
        match err {
            crate::error::DescribeEvaluationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeEvaluationsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeEvaluationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMLModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMLModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMLModelsError> for Error {
    fn from(err: crate::error::DescribeMLModelsError) -> Self {
        match err {
            crate::error::DescribeMLModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeMLModelsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeMLModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTagsError> for Error {
    fn from(err: crate::error::DescribeTagsError) -> Self {
        match err {
            crate::error::DescribeTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DescribeTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBatchPredictionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBatchPredictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBatchPredictionError> for Error {
    fn from(err: crate::error::GetBatchPredictionError) -> Self {
        match err {
            crate::error::GetBatchPredictionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetBatchPredictionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetBatchPredictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDataSourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDataSourceError> for Error {
    fn from(err: crate::error::GetDataSourceError) -> Self {
        match err {
            crate::error::GetDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDataSourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEvaluationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEvaluationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvaluationError> for Error {
    fn from(err: crate::error::GetEvaluationError) -> Self {
        match err {
            crate::error::GetEvaluationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEvaluationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetEvaluationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMLModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMLModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMLModelError> for Error {
    fn from(err: crate::error::GetMLModelError) -> Self {
        match err {
            crate::error::GetMLModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetMLModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetMLModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PredictError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PredictError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PredictError> for Error {
    fn from(err: crate::error::PredictError) -> Self {
        match err {
            crate::error::PredictError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PredictError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PredictError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PredictError::PredictorNotMountedException(inner) => {
                Error::PredictorNotMountedException(inner)
            }
            crate::error::PredictError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PredictError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBatchPredictionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBatchPredictionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBatchPredictionError> for Error {
    fn from(err: crate::error::UpdateBatchPredictionError) -> Self {
        match err {
            crate::error::UpdateBatchPredictionError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateBatchPredictionError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateBatchPredictionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDataSourceError> for Error {
    fn from(err: crate::error::UpdateDataSourceError) -> Self {
        match err {
            crate::error::UpdateDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateDataSourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEvaluationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEvaluationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEvaluationError> for Error {
    fn from(err: crate::error::UpdateEvaluationError) -> Self {
        match err {
            crate::error::UpdateEvaluationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEvaluationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateEvaluationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMLModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMLModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMLModelError> for Error {
    fn from(err: crate::error::UpdateMLModelError) -> Self {
        match err {
            crate::error::UpdateMLModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UpdateMLModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateMLModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidTagException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::PredictorNotMountedException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TagLimitExceededException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
