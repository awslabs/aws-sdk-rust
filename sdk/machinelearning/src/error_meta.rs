// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.</p>
    IdempotentParameterMismatchException(crate::types::error::IdempotentParameterMismatchException),
    /// <p>An error on the server occurred when trying to process a request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    #[allow(missing_docs)] // documentation missing in model
    InvalidTagException(crate::types::error::InvalidTagException),
    /// <p>The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as <code>DataSource</code>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The exception is thrown when a predict request is made to an unmounted <code>MLModel</code>.</p>
    PredictorNotMountedException(crate::types::error::PredictorNotMountedException),
    /// <p>A specified resource cannot be located.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    #[allow(missing_docs)] // documentation missing in model
    TagLimitExceededException(crate::types::error::TagLimitExceededException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidTagException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::PredictorNotMountedException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TagLimitExceededException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags::AddTagsError> for Error {
    fn from(err: crate::operation::add_tags::AddTagsError) -> Self {
        match err {
            crate::operation::add_tags::AddTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::add_tags::AddTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::add_tags::AddTagsError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::operation::add_tags::AddTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_tags::AddTagsError::TagLimitExceededException(inner) => {
                Error::TagLimitExceededException(inner)
            }
            crate::operation::add_tags::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_batch_prediction::CreateBatchPredictionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_batch_prediction::CreateBatchPredictionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_batch_prediction::CreateBatchPredictionError> for Error {
    fn from(err: crate::operation::create_batch_prediction::CreateBatchPredictionError) -> Self {
        match err {
            crate::operation::create_batch_prediction::CreateBatchPredictionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_batch_prediction::CreateBatchPredictionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_batch_prediction::CreateBatchPredictionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_batch_prediction::CreateBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError> for Error {
    fn from(
        err: crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError,
    ) -> Self {
        match err {
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_data_source_from_rds::CreateDataSourceFromRDSError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError>
    for Error
{
    fn from(
        err: crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError,
    ) -> Self {
        match err {
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_data_source_from_redshift::CreateDataSourceFromRedshiftError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error> for Error {
    fn from(
        err: crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error,
    ) -> Self {
        match err {
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_data_source_from_s3::CreateDataSourceFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_evaluation::CreateEvaluationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_evaluation::CreateEvaluationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_evaluation::CreateEvaluationError> for Error {
    fn from(err: crate::operation::create_evaluation::CreateEvaluationError) -> Self {
        match err {
            crate::operation::create_evaluation::CreateEvaluationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_evaluation::CreateEvaluationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_evaluation::CreateEvaluationError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_evaluation::CreateEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::create_ml_model::CreateMLModelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_ml_model::CreateMLModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_ml_model::CreateMLModelError> for Error {
    fn from(err: crate::operation::create_ml_model::CreateMLModelError) -> Self {
        match err {
            crate::operation::create_ml_model::CreateMLModelError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::operation::create_ml_model::CreateMLModelError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_ml_model::CreateMLModelError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_ml_model::CreateMLModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError> for Error {
    fn from(err: crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError) -> Self {
        match err {
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_realtime_endpoint::CreateRealtimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_batch_prediction::DeleteBatchPredictionError> for Error {
    fn from(err: crate::operation::delete_batch_prediction::DeleteBatchPredictionError) -> Self {
        match err {
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_batch_prediction::DeleteBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_data_source::DeleteDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_data_source::DeleteDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_evaluation::DeleteEvaluationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_evaluation::DeleteEvaluationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_evaluation::DeleteEvaluationError> for Error {
    fn from(err: crate::operation::delete_evaluation::DeleteEvaluationError) -> Self {
        match err {
            crate::operation::delete_evaluation::DeleteEvaluationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_evaluation::DeleteEvaluationError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_evaluation::DeleteEvaluationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_evaluation::DeleteEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::delete_ml_model::DeleteMLModelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_ml_model::DeleteMLModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_ml_model::DeleteMLModelError> for Error {
    fn from(err: crate::operation::delete_ml_model::DeleteMLModelError) -> Self {
        match err {
            crate::operation::delete_ml_model::DeleteMLModelError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_ml_model::DeleteMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::delete_ml_model::DeleteMLModelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_ml_model::DeleteMLModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError> for Error {
    fn from(err: crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError) -> Self {
        match err {
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_realtime_endpoint::DeleteRealtimeEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_tags::DeleteTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_tags::DeleteTagsError> for Error {
    fn from(err: crate::operation::delete_tags::DeleteTagsError) -> Self {
        match err {
            crate::operation::delete_tags::DeleteTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::InvalidTagException(inner) => {
                Error::InvalidTagException(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_tags::DeleteTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_batch_predictions::DescribeBatchPredictionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_batch_predictions::DescribeBatchPredictionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_batch_predictions::DescribeBatchPredictionsError> for Error {
    fn from(
        err: crate::operation::describe_batch_predictions::DescribeBatchPredictionsError,
    ) -> Self {
        match err {
            crate::operation::describe_batch_predictions::DescribeBatchPredictionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_batch_predictions::DescribeBatchPredictionsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_batch_predictions::DescribeBatchPredictionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_data_sources::DescribeDataSourcesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_data_sources::DescribeDataSourcesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_data_sources::DescribeDataSourcesError> for Error {
    fn from(err: crate::operation::describe_data_sources::DescribeDataSourcesError) -> Self {
        match err {
            crate::operation::describe_data_sources::DescribeDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_data_sources::DescribeDataSourcesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_data_sources::DescribeDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_evaluations::DescribeEvaluationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_evaluations::DescribeEvaluationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_evaluations::DescribeEvaluationsError> for Error {
    fn from(err: crate::operation::describe_evaluations::DescribeEvaluationsError) -> Self {
        match err {
            crate::operation::describe_evaluations::DescribeEvaluationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_evaluations::DescribeEvaluationsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_evaluations::DescribeEvaluationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_ml_models::DescribeMLModelsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_ml_models::DescribeMLModelsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_ml_models::DescribeMLModelsError> for Error {
    fn from(err: crate::operation::describe_ml_models::DescribeMLModelsError) -> Self {
        match err {
            crate::operation::describe_ml_models::DescribeMLModelsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_ml_models::DescribeMLModelsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::describe_ml_models::DescribeMLModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_tags::DescribeTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_tags::DescribeTagsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_tags::DescribeTagsError> for Error {
    fn from(err: crate::operation::describe_tags::DescribeTagsError) -> Self {
        match err {
            crate::operation::describe_tags::DescribeTagsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_tags::DescribeTagsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::describe_tags::DescribeTagsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_tags::DescribeTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_batch_prediction::GetBatchPredictionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_batch_prediction::GetBatchPredictionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_batch_prediction::GetBatchPredictionError> for Error {
    fn from(err: crate::operation::get_batch_prediction::GetBatchPredictionError) -> Self {
        match err {
            crate::operation::get_batch_prediction::GetBatchPredictionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_batch_prediction::GetBatchPredictionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_batch_prediction::GetBatchPredictionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_batch_prediction::GetBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_data_source::GetDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_data_source::GetDataSourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::get_data_source::GetDataSourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_evaluation::GetEvaluationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_evaluation::GetEvaluationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evaluation::GetEvaluationError> for Error {
    fn from(err: crate::operation::get_evaluation::GetEvaluationError) -> Self {
        match err {
            crate::operation::get_evaluation::GetEvaluationError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_evaluation::GetEvaluationError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::get_evaluation::GetEvaluationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_evaluation::GetEvaluationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_ml_model::GetMLModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_ml_model::GetMLModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_ml_model::GetMLModelError> for Error {
    fn from(err: crate::operation::get_ml_model::GetMLModelError) -> Self {
        match err {
            crate::operation::get_ml_model::GetMLModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_ml_model::GetMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::get_ml_model::GetMLModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_ml_model::GetMLModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::predict::PredictError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::predict::PredictError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::predict::PredictError> for Error {
    fn from(err: crate::operation::predict::PredictError) -> Self {
        match err {
            crate::operation::predict::PredictError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::predict::PredictError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::predict::PredictError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::predict::PredictError::PredictorNotMountedException(inner) => {
                Error::PredictorNotMountedException(inner)
            }
            crate::operation::predict::PredictError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::predict::PredictError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_batch_prediction::UpdateBatchPredictionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_batch_prediction::UpdateBatchPredictionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_batch_prediction::UpdateBatchPredictionError> for Error {
    fn from(err: crate::operation::update_batch_prediction::UpdateBatchPredictionError) -> Self {
        match err {
            crate::operation::update_batch_prediction::UpdateBatchPredictionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_batch_prediction::UpdateBatchPredictionError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_batch_prediction::UpdateBatchPredictionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_batch_prediction::UpdateBatchPredictionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_data_source::UpdateDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_evaluation::UpdateEvaluationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_evaluation::UpdateEvaluationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_evaluation::UpdateEvaluationError> for Error {
    fn from(err: crate::operation::update_evaluation::UpdateEvaluationError) -> Self {
        match err {
            crate::operation::update_evaluation::UpdateEvaluationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_evaluation::UpdateEvaluationError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::update_evaluation::UpdateEvaluationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_evaluation::UpdateEvaluationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::update_ml_model::UpdateMLModelError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_ml_model::UpdateMLModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_ml_model::UpdateMLModelError> for Error {
    fn from(err: crate::operation::update_ml_model::UpdateMLModelError) -> Self {
        match err {
            crate::operation::update_ml_model::UpdateMLModelError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_ml_model::UpdateMLModelError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::update_ml_model::UpdateMLModelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_ml_model::UpdateMLModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidTagException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::PredictorNotMountedException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TagLimitExceededException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
