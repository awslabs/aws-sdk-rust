// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `BatchPredictionFilterVariable`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let batchpredictionfiltervariable = unimplemented!();
/// match batchpredictionfiltervariable {
///     BatchPredictionFilterVariable::CreatedAt => { /* ... */ },
///     BatchPredictionFilterVariable::DatasourceId => { /* ... */ },
///     BatchPredictionFilterVariable::DataUri => { /* ... */ },
///     BatchPredictionFilterVariable::IamUser => { /* ... */ },
///     BatchPredictionFilterVariable::LastUpdatedAt => { /* ... */ },
///     BatchPredictionFilterVariable::MlModelId => { /* ... */ },
///     BatchPredictionFilterVariable::Name => { /* ... */ },
///     BatchPredictionFilterVariable::Status => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `batchpredictionfiltervariable` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `BatchPredictionFilterVariable::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `BatchPredictionFilterVariable::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `BatchPredictionFilterVariable::NewFeature` is defined.
/// Specifically, when `batchpredictionfiltervariable` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `BatchPredictionFilterVariable::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
/// <p>A list of the variables to use in searching or filtering <code>BatchPrediction</code>.</p>
/// <ul>
/// <li>
/// <p>
/// <code>CreatedAt</code> - Sets the search criteria to <code>BatchPrediction</code> creation date.</p>
/// </li>
/// <li>
/// <p>
/// <code>Status</code> - Sets the search criteria to <code>BatchPrediction</code> status.</p>
/// </li>
/// <li>
/// <p>
/// <code>Name</code> - Sets the search criteria to the contents of <code>BatchPrediction</code>
/// <code>Name</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>IAMUser</code> - Sets the search criteria to the user account that invoked the <code>BatchPrediction</code> creation.</p>
/// </li>
/// <li>
/// <p>
/// <code>MLModelId</code> - Sets the search criteria to the <code>MLModel</code> used in the <code>BatchPrediction</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>DataSourceId</code> - Sets the search criteria to the <code>DataSource</code> used in the <code>BatchPrediction</code>.</p>
/// </li>
/// <li>
/// <p>
/// <code>DataURI</code> - Sets the search criteria to the data file(s) used in the <code>BatchPrediction</code>. The URL can
/// identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.</p>
/// </li>
/// </ul>
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum BatchPredictionFilterVariable {
    #[allow(missing_docs)] // documentation missing in model
    CreatedAt,
    #[allow(missing_docs)] // documentation missing in model
    DatasourceId,
    #[allow(missing_docs)] // documentation missing in model
    DataUri,
    #[allow(missing_docs)] // documentation missing in model
    IamUser,
    #[allow(missing_docs)] // documentation missing in model
    LastUpdatedAt,
    #[allow(missing_docs)] // documentation missing in model
    MlModelId,
    #[allow(missing_docs)] // documentation missing in model
    Name,
    #[allow(missing_docs)] // documentation missing in model
    Status,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for BatchPredictionFilterVariable {
    fn from(s: &str) -> Self {
        match s {
            "CreatedAt" => BatchPredictionFilterVariable::CreatedAt,
            "DataSourceId" => BatchPredictionFilterVariable::DatasourceId,
            "DataURI" => BatchPredictionFilterVariable::DataUri,
            "IAMUser" => BatchPredictionFilterVariable::IamUser,
            "LastUpdatedAt" => BatchPredictionFilterVariable::LastUpdatedAt,
            "MLModelId" => BatchPredictionFilterVariable::MlModelId,
            "Name" => BatchPredictionFilterVariable::Name,
            "Status" => BatchPredictionFilterVariable::Status,
            other => BatchPredictionFilterVariable::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for BatchPredictionFilterVariable {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(BatchPredictionFilterVariable::from(s))
    }
}
impl BatchPredictionFilterVariable {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            BatchPredictionFilterVariable::CreatedAt => "CreatedAt",
            BatchPredictionFilterVariable::DatasourceId => "DataSourceId",
            BatchPredictionFilterVariable::DataUri => "DataURI",
            BatchPredictionFilterVariable::IamUser => "IAMUser",
            BatchPredictionFilterVariable::LastUpdatedAt => "LastUpdatedAt",
            BatchPredictionFilterVariable::MlModelId => "MLModelId",
            BatchPredictionFilterVariable::Name => "Name",
            BatchPredictionFilterVariable::Status => "Status",
            BatchPredictionFilterVariable::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CreatedAt",
            "DataSourceId",
            "DataURI",
            "IAMUser",
            "LastUpdatedAt",
            "MLModelId",
            "Name",
            "Status",
        ]
    }
}
impl AsRef<str> for BatchPredictionFilterVariable {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
