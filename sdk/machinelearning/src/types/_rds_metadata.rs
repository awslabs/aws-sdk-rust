// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The datasource details that are specific to Amazon RDS.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RdsMetadata {
    /// <p>The database details required to connect to an Amazon RDS.</p>
    #[doc(hidden)]
    pub database: std::option::Option<crate::types::RdsDatabase>,
    /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
    #[doc(hidden)]
    pub database_user_name: std::option::Option<std::string::String>,
    /// <p>The SQL query that is supplied during <code>CreateDataSourceFromRDS</code>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>. </p>
    #[doc(hidden)]
    pub select_sql_query: std::option::Option<std::string::String>,
    /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    #[doc(hidden)]
    pub resource_role: std::option::Option<std::string::String>,
    /// <p>The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    #[doc(hidden)]
    pub service_role: std::option::Option<std::string::String>,
    /// <p>The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.</p>
    #[doc(hidden)]
    pub data_pipeline_id: std::option::Option<std::string::String>,
}
impl RdsMetadata {
    /// <p>The database details required to connect to an Amazon RDS.</p>
    pub fn database(&self) -> std::option::Option<&crate::types::RdsDatabase> {
        self.database.as_ref()
    }
    /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
    pub fn database_user_name(&self) -> std::option::Option<&str> {
        self.database_user_name.as_deref()
    }
    /// <p>The SQL query that is supplied during <code>CreateDataSourceFromRDS</code>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>. </p>
    pub fn select_sql_query(&self) -> std::option::Option<&str> {
        self.select_sql_query.as_deref()
    }
    /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn resource_role(&self) -> std::option::Option<&str> {
        self.resource_role.as_deref()
    }
    /// <p>The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn service_role(&self) -> std::option::Option<&str> {
        self.service_role.as_deref()
    }
    /// <p>The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.</p>
    pub fn data_pipeline_id(&self) -> std::option::Option<&str> {
        self.data_pipeline_id.as_deref()
    }
}
impl RdsMetadata {
    /// Creates a new builder-style object to manufacture [`RdsMetadata`](crate::types::RdsMetadata).
    pub fn builder() -> crate::types::builders::RdsMetadataBuilder {
        crate::types::builders::RdsMetadataBuilder::default()
    }
}

/// A builder for [`RdsMetadata`](crate::types::RdsMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RdsMetadataBuilder {
    pub(crate) database: std::option::Option<crate::types::RdsDatabase>,
    pub(crate) database_user_name: std::option::Option<std::string::String>,
    pub(crate) select_sql_query: std::option::Option<std::string::String>,
    pub(crate) resource_role: std::option::Option<std::string::String>,
    pub(crate) service_role: std::option::Option<std::string::String>,
    pub(crate) data_pipeline_id: std::option::Option<std::string::String>,
}
impl RdsMetadataBuilder {
    /// <p>The database details required to connect to an Amazon RDS.</p>
    pub fn database(mut self, input: crate::types::RdsDatabase) -> Self {
        self.database = Some(input);
        self
    }
    /// <p>The database details required to connect to an Amazon RDS.</p>
    pub fn set_database(mut self, input: std::option::Option<crate::types::RdsDatabase>) -> Self {
        self.database = input;
        self
    }
    /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
    pub fn database_user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_user_name = Some(input.into());
        self
    }
    /// <p>The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an <code>RDSSelectSqlQuery</code> query.</p>
    pub fn set_database_user_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_user_name = input;
        self
    }
    /// <p>The SQL query that is supplied during <code>CreateDataSourceFromRDS</code>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>. </p>
    pub fn select_sql_query(mut self, input: impl Into<std::string::String>) -> Self {
        self.select_sql_query = Some(input.into());
        self
    }
    /// <p>The SQL query that is supplied during <code>CreateDataSourceFromRDS</code>. Returns only if <code>Verbose</code> is true in <code>GetDataSourceInput</code>. </p>
    pub fn set_select_sql_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.select_sql_query = input;
        self
    }
    /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn resource_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_role = Some(input.into());
        self
    }
    /// <p>The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn set_resource_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_role = input;
        self
    }
    /// <p>The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn service_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_role = Some(input.into());
        self
    }
    /// <p>The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see <a href="https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html">Role templates</a> for data pipelines.</p>
    pub fn set_service_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_role = input;
        self
    }
    /// <p>The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.</p>
    pub fn data_pipeline_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_pipeline_id = Some(input.into());
        self
    }
    /// <p>The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.</p>
    pub fn set_data_pipeline_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_pipeline_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RdsMetadata`](crate::types::RdsMetadata).
    pub fn build(self) -> crate::types::RdsMetadata {
        crate::types::RdsMetadata {
            database: self.database,
            database_user_name: self.database_user_name,
            select_sql_query: self.select_sql_query,
            resource_role: self.resource_role,
            service_role: self.service_role,
            data_pipeline_id: self.data_pipeline_id,
        }
    }
}
