// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the database details required to connect to an Amazon Redshift database.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedshiftDatabase {
    /// <p>The name of a database hosted on an Amazon Redshift cluster.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The ID of an Amazon Redshift cluster.</p>
    #[doc(hidden)]
    pub cluster_identifier: std::option::Option<std::string::String>,
}
impl RedshiftDatabase {
    /// <p>The name of a database hosted on an Amazon Redshift cluster.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The ID of an Amazon Redshift cluster.</p>
    pub fn cluster_identifier(&self) -> std::option::Option<&str> {
        self.cluster_identifier.as_deref()
    }
}
impl RedshiftDatabase {
    /// Creates a new builder-style object to manufacture [`RedshiftDatabase`](crate::types::RedshiftDatabase).
    pub fn builder() -> crate::types::builders::RedshiftDatabaseBuilder {
        crate::types::builders::RedshiftDatabaseBuilder::default()
    }
}

/// A builder for [`RedshiftDatabase`](crate::types::RedshiftDatabase).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RedshiftDatabaseBuilder {
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) cluster_identifier: std::option::Option<std::string::String>,
}
impl RedshiftDatabaseBuilder {
    /// <p>The name of a database hosted on an Amazon Redshift cluster.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>The name of a database hosted on an Amazon Redshift cluster.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The ID of an Amazon Redshift cluster.</p>
    pub fn cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_identifier = Some(input.into());
        self
    }
    /// <p>The ID of an Amazon Redshift cluster.</p>
    pub fn set_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cluster_identifier = input;
        self
    }
    /// Consumes the builder and constructs a [`RedshiftDatabase`](crate::types::RedshiftDatabase).
    pub fn build(self) -> crate::types::RedshiftDatabase {
        crate::types::RedshiftDatabase {
            database_name: self.database_name,
            cluster_identifier: self.cluster_identifier,
        }
    }
}
