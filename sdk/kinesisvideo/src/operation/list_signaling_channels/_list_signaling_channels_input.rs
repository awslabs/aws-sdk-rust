// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSignalingChannelsInput {
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    #[doc(hidden)]
    pub channel_name_condition: std::option::Option<crate::types::ChannelNameCondition>,
}
impl ListSignalingChannelsInput {
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    pub fn channel_name_condition(
        &self,
    ) -> std::option::Option<&crate::types::ChannelNameCondition> {
        self.channel_name_condition.as_ref()
    }
}
impl ListSignalingChannelsInput {
    /// Creates a new builder-style object to manufacture [`ListSignalingChannelsInput`](crate::operation::list_signaling_channels::ListSignalingChannelsInput).
    pub fn builder(
    ) -> crate::operation::list_signaling_channels::builders::ListSignalingChannelsInputBuilder
    {
        crate::operation::list_signaling_channels::builders::ListSignalingChannelsInputBuilder::default()
    }
}

/// A builder for [`ListSignalingChannelsInput`](crate::operation::list_signaling_channels::ListSignalingChannelsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSignalingChannelsInputBuilder {
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) channel_name_condition: std::option::Option<crate::types::ChannelNameCondition>,
}
impl ListSignalingChannelsInputBuilder {
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    pub fn channel_name_condition(mut self, input: crate::types::ChannelNameCondition) -> Self {
        self.channel_name_condition = Some(input);
        self
    }
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    pub fn set_channel_name_condition(
        mut self,
        input: std::option::Option<crate::types::ChannelNameCondition>,
    ) -> Self {
        self.channel_name_condition = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSignalingChannelsInput`](crate::operation::list_signaling_channels::ListSignalingChannelsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_signaling_channels::ListSignalingChannelsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_signaling_channels::ListSignalingChannelsInput {
                max_results: self.max_results,
                next_token: self.next_token,
                channel_name_condition: self.channel_name_condition,
            },
        )
    }
}
