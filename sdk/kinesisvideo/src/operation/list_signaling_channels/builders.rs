// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_signaling_channels::_list_signaling_channels_output::ListSignalingChannelsOutputBuilder;

pub use crate::operation::list_signaling_channels::_list_signaling_channels_input::ListSignalingChannelsInputBuilder;

/// Fluent builder constructing a request to `ListSignalingChannels`.
///
/// <p>Returns an array of <code>ChannelInfo</code> objects. Each object describes a signaling channel. To retrieve only those channels that satisfy a specific condition, you can specify a <code>ChannelNameCondition</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSignalingChannelsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_signaling_channels::builders::ListSignalingChannelsInputBuilder,
}
impl ListSignalingChannelsFluentBuilder {
    /// Creates a new `ListSignalingChannels`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_signaling_channels::ListSignalingChannels,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_signaling_channels::ListSignalingChannelsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_signaling_channels::ListSignalingChannelsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_signaling_channels::ListSignalingChannelsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_signaling_channels::paginator::ListSignalingChannelsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_signaling_channels::paginator::ListSignalingChannelsPaginator {
        crate::operation::list_signaling_channels::paginator::ListSignalingChannelsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of channels to return in the response. The default is 500.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If you specify this parameter, when the result of a <code>ListSignalingChannels</code> operation is truncated, the call returns the <code>NextToken</code> in the response. To get another batch of channels, provide this token in your next request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    pub fn channel_name_condition(mut self, input: crate::types::ChannelNameCondition) -> Self {
        self.inner = self.inner.channel_name_condition(input);
        self
    }
    /// <p>Optional: Returns only the channels that satisfy a specific condition.</p>
    pub fn set_channel_name_condition(
        mut self,
        input: std::option::Option<crate::types::ChannelNameCondition>,
    ) -> Self {
        self.inner = self.inner.set_channel_name_condition(input);
        self
    }
}
