// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_signaling_channel_endpoint::_get_signaling_channel_endpoint_output::GetSignalingChannelEndpointOutputBuilder;

pub use crate::operation::get_signaling_channel_endpoint::_get_signaling_channel_endpoint_input::GetSignalingChannelEndpointInputBuilder;

/// Fluent builder constructing a request to `GetSignalingChannelEndpoint`.
///
/// <p>Provides an endpoint for the specified signaling channel to send and receive messages. This API uses the <code>SingleMasterChannelEndpointConfiguration</code> input parameter, which consists of the <code>Protocols</code> and <code>Role</code> properties.</p>
/// <p> <code>Protocols</code> is used to determine the communication mechanism. For example, if you specify <code>WSS</code> as the protocol, this API produces a secure websocket endpoint. If you specify <code>HTTPS</code> as the protocol, this API generates an HTTPS endpoint. </p>
/// <p> <code>Role</code> determines the messaging permissions. A <code>MASTER</code> role results in this API generating an endpoint that a client can use to communicate with any of the viewers on the channel. A <code>VIEWER</code> role results in this API generating an endpoint that a client can use to communicate only with a <code>MASTER</code>. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetSignalingChannelEndpointFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_signaling_channel_endpoint::builders::GetSignalingChannelEndpointInputBuilder
            }
impl GetSignalingChannelEndpointFluentBuilder {
    /// Creates a new `GetSignalingChannelEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_signaling_channel_endpoint::GetSignalingChannelEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_signaling_channel_endpoint::GetSignalingChannelEndpointError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_signaling_channel_endpoint::GetSignalingChannelEndpointOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_signaling_channel_endpoint::GetSignalingChannelEndpointError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the signalling channel for which you want to get an endpoint.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the signalling channel for which you want to get an endpoint.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_arn(input);
        self
    }
    /// <p>A structure containing the endpoint configuration for the <code>SINGLE_MASTER</code> channel type.</p>
    pub fn single_master_channel_endpoint_configuration(
        mut self,
        input: crate::types::SingleMasterChannelEndpointConfiguration,
    ) -> Self {
        self.inner = self
            .inner
            .single_master_channel_endpoint_configuration(input);
        self
    }
    /// <p>A structure containing the endpoint configuration for the <code>SINGLE_MASTER</code> channel type.</p>
    pub fn set_single_master_channel_endpoint_configuration(
        mut self,
        input: std::option::Option<crate::types::SingleMasterChannelEndpointConfiguration>,
    ) -> Self {
        self.inner = self
            .inner
            .set_single_master_channel_endpoint_configuration(input);
        self
    }
}
