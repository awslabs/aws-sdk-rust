// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSignalingChannelInput {
    /// <p>The name of the signaling channel that you want to describe.</p>
    pub channel_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the signaling channel that you want to describe.</p>
    pub channel_arn: ::std::option::Option<::std::string::String>,
}
impl DescribeSignalingChannelInput {
    /// <p>The name of the signaling channel that you want to describe.</p>
    pub fn channel_name(&self) -> ::std::option::Option<&str> {
        self.channel_name.as_deref()
    }
    /// <p>The ARN of the signaling channel that you want to describe.</p>
    pub fn channel_arn(&self) -> ::std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
}
impl DescribeSignalingChannelInput {
    /// Creates a new builder-style object to manufacture [`DescribeSignalingChannelInput`](crate::operation::describe_signaling_channel::DescribeSignalingChannelInput).
    pub fn builder() -> crate::operation::describe_signaling_channel::builders::DescribeSignalingChannelInputBuilder {
        crate::operation::describe_signaling_channel::builders::DescribeSignalingChannelInputBuilder::default()
    }
}

/// A builder for [`DescribeSignalingChannelInput`](crate::operation::describe_signaling_channel::DescribeSignalingChannelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSignalingChannelInputBuilder {
    pub(crate) channel_name: ::std::option::Option<::std::string::String>,
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
}
impl DescribeSignalingChannelInputBuilder {
    /// <p>The name of the signaling channel that you want to describe.</p>
    pub fn channel_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the signaling channel that you want to describe.</p>
    pub fn set_channel_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_name = input;
        self
    }
    /// <p>The name of the signaling channel that you want to describe.</p>
    pub fn get_channel_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_name
    }
    /// <p>The ARN of the signaling channel that you want to describe.</p>
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the signaling channel that you want to describe.</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The ARN of the signaling channel that you want to describe.</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// Consumes the builder and constructs a [`DescribeSignalingChannelInput`](crate::operation::describe_signaling_channel::DescribeSignalingChannelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_signaling_channel::DescribeSignalingChannelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_signaling_channel::DescribeSignalingChannelInput {
            channel_name: self.channel_name,
            channel_arn: self.channel_arn,
        })
    }
}
