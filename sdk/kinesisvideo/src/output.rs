// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStreamOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateStreamOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStreamOutput`](crate::output::UpdateStreamOutput).
    pub fn builder() -> crate::output::update_stream_output::Builder {
        crate::output::update_stream_output::Builder::default()
    }
}

/// See [`UpdateStreamOutput`](crate::output::UpdateStreamOutput).
pub mod update_stream_output {

    /// A builder for [`UpdateStreamOutput`](crate::output::UpdateStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateStreamOutput`](crate::output::UpdateStreamOutput).
        pub fn build(self) -> crate::output::UpdateStreamOutput {
            crate::output::UpdateStreamOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSignalingChannelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateSignalingChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput).
    pub fn builder() -> crate::output::update_signaling_channel_output::Builder {
        crate::output::update_signaling_channel_output::Builder::default()
    }
}

/// See [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput).
pub mod update_signaling_channel_output {

    /// A builder for [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput).
        pub fn build(self) -> crate::output::UpdateSignalingChannelOutput {
            crate::output::UpdateSignalingChannelOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateNotificationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateNotificationConfigurationOutput`](crate::output::UpdateNotificationConfigurationOutput).
    pub fn builder() -> crate::output::update_notification_configuration_output::Builder {
        crate::output::update_notification_configuration_output::Builder::default()
    }
}

/// See [`UpdateNotificationConfigurationOutput`](crate::output::UpdateNotificationConfigurationOutput).
pub mod update_notification_configuration_output {

    /// A builder for [`UpdateNotificationConfigurationOutput`](crate::output::UpdateNotificationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateNotificationConfigurationOutput`](crate::output::UpdateNotificationConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateNotificationConfigurationOutput {
            crate::output::UpdateNotificationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMediaStorageConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateMediaStorageConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateMediaStorageConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMediaStorageConfigurationOutput`](crate::output::UpdateMediaStorageConfigurationOutput).
    pub fn builder() -> crate::output::update_media_storage_configuration_output::Builder {
        crate::output::update_media_storage_configuration_output::Builder::default()
    }
}

/// See [`UpdateMediaStorageConfigurationOutput`](crate::output::UpdateMediaStorageConfigurationOutput).
pub mod update_media_storage_configuration_output {

    /// A builder for [`UpdateMediaStorageConfigurationOutput`](crate::output::UpdateMediaStorageConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMediaStorageConfigurationOutput`](crate::output::UpdateMediaStorageConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateMediaStorageConfigurationOutput {
            crate::output::UpdateMediaStorageConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateImageGenerationConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateImageGenerationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateImageGenerationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateImageGenerationConfigurationOutput`](crate::output::UpdateImageGenerationConfigurationOutput).
    pub fn builder() -> crate::output::update_image_generation_configuration_output::Builder {
        crate::output::update_image_generation_configuration_output::Builder::default()
    }
}

/// See [`UpdateImageGenerationConfigurationOutput`](crate::output::UpdateImageGenerationConfigurationOutput).
pub mod update_image_generation_configuration_output {

    /// A builder for [`UpdateImageGenerationConfigurationOutput`](crate::output::UpdateImageGenerationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateImageGenerationConfigurationOutput`](crate::output::UpdateImageGenerationConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateImageGenerationConfigurationOutput {
            crate::output::UpdateImageGenerationConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDataRetentionOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateDataRetentionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateDataRetentionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput).
    pub fn builder() -> crate::output::update_data_retention_output::Builder {
        crate::output::update_data_retention_output::Builder::default()
    }
}

/// See [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput).
pub mod update_data_retention_output {

    /// A builder for [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput).
        pub fn build(self) -> crate::output::UpdateDataRetentionOutput {
            crate::output::UpdateDataRetentionOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagStreamOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagStreamOutput {
    /// Creates a new builder-style object to manufacture [`UntagStreamOutput`](crate::output::UntagStreamOutput).
    pub fn builder() -> crate::output::untag_stream_output::Builder {
        crate::output::untag_stream_output::Builder::default()
    }
}

/// See [`UntagStreamOutput`](crate::output::UntagStreamOutput).
pub mod untag_stream_output {

    /// A builder for [`UntagStreamOutput`](crate::output::UntagStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagStreamOutput`](crate::output::UntagStreamOutput).
        pub fn build(self) -> crate::output::UntagStreamOutput {
            crate::output::UntagStreamOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagStreamOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagStreamOutput {
    /// Creates a new builder-style object to manufacture [`TagStreamOutput`](crate::output::TagStreamOutput).
    pub fn builder() -> crate::output::tag_stream_output::Builder {
        crate::output::tag_stream_output::Builder::default()
    }
}

/// See [`TagStreamOutput`](crate::output::TagStreamOutput).
pub mod tag_stream_output {

    /// A builder for [`TagStreamOutput`](crate::output::TagStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagStreamOutput`](crate::output::TagStreamOutput).
        pub fn build(self) -> crate::output::TagStreamOutput {
            crate::output::TagStreamOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartEdgeConfigurationUpdateOutput {
    /// <p>The name of the stream from which the edge configuration was updated.</p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The current sync status of the stream's edge configuration. When you invoke this API, the sync status will be set to the <code>SYNCING</code> state. Use the <code>DescribeEdgeConfiguration</code> API to get the latest status of the edge configuration.</p>
    #[doc(hidden)]
    pub sync_status: std::option::Option<crate::model::SyncStatus>,
    /// <p>A description of the generated failure status.</p>
    #[doc(hidden)]
    pub failed_status_details: std::option::Option<std::string::String>,
    /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
    #[doc(hidden)]
    pub edge_config: std::option::Option<crate::model::EdgeConfig>,
    _request_id: Option<String>,
}
impl StartEdgeConfigurationUpdateOutput {
    /// <p>The name of the stream from which the edge configuration was updated.</p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p> The current sync status of the stream's edge configuration. When you invoke this API, the sync status will be set to the <code>SYNCING</code> state. Use the <code>DescribeEdgeConfiguration</code> API to get the latest status of the edge configuration.</p>
    pub fn sync_status(&self) -> std::option::Option<&crate::model::SyncStatus> {
        self.sync_status.as_ref()
    }
    /// <p>A description of the generated failure status.</p>
    pub fn failed_status_details(&self) -> std::option::Option<&str> {
        self.failed_status_details.as_deref()
    }
    /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
    pub fn edge_config(&self) -> std::option::Option<&crate::model::EdgeConfig> {
        self.edge_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartEdgeConfigurationUpdateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartEdgeConfigurationUpdateOutput {
    /// Creates a new builder-style object to manufacture [`StartEdgeConfigurationUpdateOutput`](crate::output::StartEdgeConfigurationUpdateOutput).
    pub fn builder() -> crate::output::start_edge_configuration_update_output::Builder {
        crate::output::start_edge_configuration_update_output::Builder::default()
    }
}

/// See [`StartEdgeConfigurationUpdateOutput`](crate::output::StartEdgeConfigurationUpdateOutput).
pub mod start_edge_configuration_update_output {

    /// A builder for [`StartEdgeConfigurationUpdateOutput`](crate::output::StartEdgeConfigurationUpdateOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_name: std::option::Option<std::string::String>,
        pub(crate) stream_arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sync_status: std::option::Option<crate::model::SyncStatus>,
        pub(crate) failed_status_details: std::option::Option<std::string::String>,
        pub(crate) edge_config: std::option::Option<crate::model::EdgeConfig>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the stream from which the edge configuration was updated.</p>
        pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_name = Some(input.into());
            self
        }
        /// <p>The name of the stream from which the edge configuration was updated.</p>
        pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_arn = input;
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p> The current sync status of the stream's edge configuration. When you invoke this API, the sync status will be set to the <code>SYNCING</code> state. Use the <code>DescribeEdgeConfiguration</code> API to get the latest status of the edge configuration.</p>
        pub fn sync_status(mut self, input: crate::model::SyncStatus) -> Self {
            self.sync_status = Some(input);
            self
        }
        /// <p> The current sync status of the stream's edge configuration. When you invoke this API, the sync status will be set to the <code>SYNCING</code> state. Use the <code>DescribeEdgeConfiguration</code> API to get the latest status of the edge configuration.</p>
        pub fn set_sync_status(
            mut self,
            input: std::option::Option<crate::model::SyncStatus>,
        ) -> Self {
            self.sync_status = input;
            self
        }
        /// <p>A description of the generated failure status.</p>
        pub fn failed_status_details(mut self, input: impl Into<std::string::String>) -> Self {
            self.failed_status_details = Some(input.into());
            self
        }
        /// <p>A description of the generated failure status.</p>
        pub fn set_failed_status_details(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failed_status_details = input;
            self
        }
        /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
        pub fn edge_config(mut self, input: crate::model::EdgeConfig) -> Self {
            self.edge_config = Some(input);
            self
        }
        /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
        pub fn set_edge_config(
            mut self,
            input: std::option::Option<crate::model::EdgeConfig>,
        ) -> Self {
            self.edge_config = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartEdgeConfigurationUpdateOutput`](crate::output::StartEdgeConfigurationUpdateOutput).
        pub fn build(self) -> crate::output::StartEdgeConfigurationUpdateOutput {
            crate::output::StartEdgeConfigurationUpdateOutput {
                stream_name: self.stream_name,
                stream_arn: self.stream_arn,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                sync_status: self.sync_status,
                failed_status_details: self.failed_status_details,
                edge_config: self.edge_config,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForStreamOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A map of tag keys and values associated with the specified stream.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForStreamOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A map of tag keys and values associated with the specified stream.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForStreamOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput).
    pub fn builder() -> crate::output::list_tags_for_stream_output::Builder {
        crate::output::list_tags_for_stream_output::Builder::default()
    }
}

/// See [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput).
pub mod list_tags_for_stream_output {

    /// A builder for [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of tag keys and values associated with the specified stream.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of tag keys and values associated with the specified stream.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput).
        pub fn build(self) -> crate::output::ListTagsForStreamOutput {
            crate::output::ListTagsForStreamOutput {
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code> call is truncated, the response includes a token that you can use in the next request to fetch the next set of tags. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                next_token: self.next_token,
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamsOutput {
    /// <p>An array of <code>StreamInfo</code> objects.</p>
    #[doc(hidden)]
    pub stream_info_list: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
    /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListStreamsOutput {
    /// <p>An array of <code>StreamInfo</code> objects.</p>
    pub fn stream_info_list(&self) -> std::option::Option<&[crate::model::StreamInfo]> {
        self.stream_info_list.as_deref()
    }
    /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStreamsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamsOutput`](crate::output::ListStreamsOutput).
    pub fn builder() -> crate::output::list_streams_output::Builder {
        crate::output::list_streams_output::Builder::default()
    }
}

/// See [`ListStreamsOutput`](crate::output::ListStreamsOutput).
pub mod list_streams_output {

    /// A builder for [`ListStreamsOutput`](crate::output::ListStreamsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_info_list: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `stream_info_list`.
        ///
        /// To override the contents of this collection use [`set_stream_info_list`](Self::set_stream_info_list).
        ///
        /// <p>An array of <code>StreamInfo</code> objects.</p>
        pub fn stream_info_list(mut self, input: crate::model::StreamInfo) -> Self {
            let mut v = self.stream_info_list.unwrap_or_default();
            v.push(input);
            self.stream_info_list = Some(v);
            self
        }
        /// <p>An array of <code>StreamInfo</code> objects.</p>
        pub fn set_stream_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
        ) -> Self {
            self.stream_info_list = input;
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStreamsOutput`](crate::output::ListStreamsOutput).
        pub fn build(self) -> crate::output::ListStreamsOutput {
            crate::output::ListStreamsOutput {
                stream_info_list: self.stream_info_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSignalingChannelsOutput {
    /// <p>An array of <code>ChannelInfo</code> objects.</p>
    #[doc(hidden)]
    pub channel_info_list: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
    /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListSignalingChannelsOutput {
    /// <p>An array of <code>ChannelInfo</code> objects.</p>
    pub fn channel_info_list(&self) -> std::option::Option<&[crate::model::ChannelInfo]> {
        self.channel_info_list.as_deref()
    }
    /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListSignalingChannelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSignalingChannelsOutput {
    /// Creates a new builder-style object to manufacture [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput).
    pub fn builder() -> crate::output::list_signaling_channels_output::Builder {
        crate::output::list_signaling_channels_output::Builder::default()
    }
}

/// See [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput).
pub mod list_signaling_channels_output {

    /// A builder for [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_info_list: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `channel_info_list`.
        ///
        /// To override the contents of this collection use [`set_channel_info_list`](Self::set_channel_info_list).
        ///
        /// <p>An array of <code>ChannelInfo</code> objects.</p>
        pub fn channel_info_list(mut self, input: crate::model::ChannelInfo) -> Self {
            let mut v = self.channel_info_list.unwrap_or_default();
            v.push(input);
            self.channel_info_list = Some(v);
            self
        }
        /// <p>An array of <code>ChannelInfo</code> objects.</p>
        pub fn set_channel_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
        ) -> Self {
            self.channel_info_list = input;
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the next batch of streams, use this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput).
        pub fn build(self) -> crate::output::ListSignalingChannelsOutput {
            crate::output::ListSignalingChannelsOutput {
                channel_info_list: self.channel_info_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSignalingChannelEndpointOutput {
    /// <p>A list of endpoints for the specified signaling channel.</p>
    #[doc(hidden)]
    pub resource_endpoint_list:
        std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
    _request_id: Option<String>,
}
impl GetSignalingChannelEndpointOutput {
    /// <p>A list of endpoints for the specified signaling channel.</p>
    pub fn resource_endpoint_list(
        &self,
    ) -> std::option::Option<&[crate::model::ResourceEndpointListItem]> {
        self.resource_endpoint_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetSignalingChannelEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSignalingChannelEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput).
    pub fn builder() -> crate::output::get_signaling_channel_endpoint_output::Builder {
        crate::output::get_signaling_channel_endpoint_output::Builder::default()
    }
}

/// See [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput).
pub mod get_signaling_channel_endpoint_output {

    /// A builder for [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_endpoint_list:
            std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `resource_endpoint_list`.
        ///
        /// To override the contents of this collection use [`set_resource_endpoint_list`](Self::set_resource_endpoint_list).
        ///
        /// <p>A list of endpoints for the specified signaling channel.</p>
        pub fn resource_endpoint_list(
            mut self,
            input: crate::model::ResourceEndpointListItem,
        ) -> Self {
            let mut v = self.resource_endpoint_list.unwrap_or_default();
            v.push(input);
            self.resource_endpoint_list = Some(v);
            self
        }
        /// <p>A list of endpoints for the specified signaling channel.</p>
        pub fn set_resource_endpoint_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
        ) -> Self {
            self.resource_endpoint_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput).
        pub fn build(self) -> crate::output::GetSignalingChannelEndpointOutput {
            crate::output::GetSignalingChannelEndpointOutput {
                resource_endpoint_list: self.resource_endpoint_list,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDataEndpointOutput {
    /// <p>The endpoint value. To read data from the stream or to write data to it, specify this endpoint in your application.</p>
    #[doc(hidden)]
    pub data_endpoint: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDataEndpointOutput {
    /// <p>The endpoint value. To read data from the stream or to write data to it, specify this endpoint in your application.</p>
    pub fn data_endpoint(&self) -> std::option::Option<&str> {
        self.data_endpoint.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDataEndpointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDataEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput).
    pub fn builder() -> crate::output::get_data_endpoint_output::Builder {
        crate::output::get_data_endpoint_output::Builder::default()
    }
}

/// See [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput).
pub mod get_data_endpoint_output {

    /// A builder for [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_endpoint: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The endpoint value. To read data from the stream or to write data to it, specify this endpoint in your application.</p>
        pub fn data_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.data_endpoint = Some(input.into());
            self
        }
        /// <p>The endpoint value. To read data from the stream or to write data to it, specify this endpoint in your application.</p>
        pub fn set_data_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.data_endpoint = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput).
        pub fn build(self) -> crate::output::GetDataEndpointOutput {
            crate::output::GetDataEndpointOutput {
                data_endpoint: self.data_endpoint,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeStreamOutput {
    /// <p>An object that describes the stream.</p>
    #[doc(hidden)]
    pub stream_info: std::option::Option<crate::model::StreamInfo>,
    _request_id: Option<String>,
}
impl DescribeStreamOutput {
    /// <p>An object that describes the stream.</p>
    pub fn stream_info(&self) -> std::option::Option<&crate::model::StreamInfo> {
        self.stream_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeStreamOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStreamOutput`](crate::output::DescribeStreamOutput).
    pub fn builder() -> crate::output::describe_stream_output::Builder {
        crate::output::describe_stream_output::Builder::default()
    }
}

/// See [`DescribeStreamOutput`](crate::output::DescribeStreamOutput).
pub mod describe_stream_output {

    /// A builder for [`DescribeStreamOutput`](crate::output::DescribeStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_info: std::option::Option<crate::model::StreamInfo>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An object that describes the stream.</p>
        pub fn stream_info(mut self, input: crate::model::StreamInfo) -> Self {
            self.stream_info = Some(input);
            self
        }
        /// <p>An object that describes the stream.</p>
        pub fn set_stream_info(
            mut self,
            input: std::option::Option<crate::model::StreamInfo>,
        ) -> Self {
            self.stream_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStreamOutput`](crate::output::DescribeStreamOutput).
        pub fn build(self) -> crate::output::DescribeStreamOutput {
            crate::output::DescribeStreamOutput {
                stream_info: self.stream_info,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSignalingChannelOutput {
    /// <p>A structure that encapsulates the specified signaling channel's metadata and properties.</p>
    #[doc(hidden)]
    pub channel_info: std::option::Option<crate::model::ChannelInfo>,
    _request_id: Option<String>,
}
impl DescribeSignalingChannelOutput {
    /// <p>A structure that encapsulates the specified signaling channel's metadata and properties.</p>
    pub fn channel_info(&self) -> std::option::Option<&crate::model::ChannelInfo> {
        self.channel_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeSignalingChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput).
    pub fn builder() -> crate::output::describe_signaling_channel_output::Builder {
        crate::output::describe_signaling_channel_output::Builder::default()
    }
}

/// See [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput).
pub mod describe_signaling_channel_output {

    /// A builder for [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_info: std::option::Option<crate::model::ChannelInfo>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that encapsulates the specified signaling channel's metadata and properties.</p>
        pub fn channel_info(mut self, input: crate::model::ChannelInfo) -> Self {
            self.channel_info = Some(input);
            self
        }
        /// <p>A structure that encapsulates the specified signaling channel's metadata and properties.</p>
        pub fn set_channel_info(
            mut self,
            input: std::option::Option<crate::model::ChannelInfo>,
        ) -> Self {
            self.channel_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput).
        pub fn build(self) -> crate::output::DescribeSignalingChannelOutput {
            crate::output::DescribeSignalingChannelOutput {
                channel_info: self.channel_info,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeNotificationConfigurationOutput {
    /// <p>The structure that contains the information required for notifications. If the structure is null, the configuration will be deleted from the stream.</p>
    #[doc(hidden)]
    pub notification_configuration: std::option::Option<crate::model::NotificationConfiguration>,
    _request_id: Option<String>,
}
impl DescribeNotificationConfigurationOutput {
    /// <p>The structure that contains the information required for notifications. If the structure is null, the configuration will be deleted from the stream.</p>
    pub fn notification_configuration(
        &self,
    ) -> std::option::Option<&crate::model::NotificationConfiguration> {
        self.notification_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeNotificationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeNotificationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeNotificationConfigurationOutput`](crate::output::DescribeNotificationConfigurationOutput).
    pub fn builder() -> crate::output::describe_notification_configuration_output::Builder {
        crate::output::describe_notification_configuration_output::Builder::default()
    }
}

/// See [`DescribeNotificationConfigurationOutput`](crate::output::DescribeNotificationConfigurationOutput).
pub mod describe_notification_configuration_output {

    /// A builder for [`DescribeNotificationConfigurationOutput`](crate::output::DescribeNotificationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notification_configuration:
            std::option::Option<crate::model::NotificationConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The structure that contains the information required for notifications. If the structure is null, the configuration will be deleted from the stream.</p>
        pub fn notification_configuration(
            mut self,
            input: crate::model::NotificationConfiguration,
        ) -> Self {
            self.notification_configuration = Some(input);
            self
        }
        /// <p>The structure that contains the information required for notifications. If the structure is null, the configuration will be deleted from the stream.</p>
        pub fn set_notification_configuration(
            mut self,
            input: std::option::Option<crate::model::NotificationConfiguration>,
        ) -> Self {
            self.notification_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeNotificationConfigurationOutput`](crate::output::DescribeNotificationConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeNotificationConfigurationOutput {
            crate::output::DescribeNotificationConfigurationOutput {
                notification_configuration: self.notification_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMediaStorageConfigurationOutput {
    /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
    #[doc(hidden)]
    pub media_storage_configuration: std::option::Option<crate::model::MediaStorageConfiguration>,
    _request_id: Option<String>,
}
impl DescribeMediaStorageConfigurationOutput {
    /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
    pub fn media_storage_configuration(
        &self,
    ) -> std::option::Option<&crate::model::MediaStorageConfiguration> {
        self.media_storage_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeMediaStorageConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMediaStorageConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMediaStorageConfigurationOutput`](crate::output::DescribeMediaStorageConfigurationOutput).
    pub fn builder() -> crate::output::describe_media_storage_configuration_output::Builder {
        crate::output::describe_media_storage_configuration_output::Builder::default()
    }
}

/// See [`DescribeMediaStorageConfigurationOutput`](crate::output::DescribeMediaStorageConfigurationOutput).
pub mod describe_media_storage_configuration_output {

    /// A builder for [`DescribeMediaStorageConfigurationOutput`](crate::output::DescribeMediaStorageConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) media_storage_configuration:
            std::option::Option<crate::model::MediaStorageConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
        pub fn media_storage_configuration(
            mut self,
            input: crate::model::MediaStorageConfiguration,
        ) -> Self {
            self.media_storage_configuration = Some(input);
            self
        }
        /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
        pub fn set_media_storage_configuration(
            mut self,
            input: std::option::Option<crate::model::MediaStorageConfiguration>,
        ) -> Self {
            self.media_storage_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMediaStorageConfigurationOutput`](crate::output::DescribeMediaStorageConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeMediaStorageConfigurationOutput {
            crate::output::DescribeMediaStorageConfigurationOutput {
                media_storage_configuration: self.media_storage_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeMappedResourceConfigurationOutput {
    /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
    #[doc(hidden)]
    pub mapped_resource_configuration_list:
        std::option::Option<std::vec::Vec<crate::model::MappedResourceConfigurationListItem>>,
    /// <p>The token that was used in the <code>NextToken</code>request to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeMappedResourceConfigurationOutput {
    /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
    pub fn mapped_resource_configuration_list(
        &self,
    ) -> std::option::Option<&[crate::model::MappedResourceConfigurationListItem]> {
        self.mapped_resource_configuration_list.as_deref()
    }
    /// <p>The token that was used in the <code>NextToken</code>request to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeMappedResourceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeMappedResourceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeMappedResourceConfigurationOutput`](crate::output::DescribeMappedResourceConfigurationOutput).
    pub fn builder() -> crate::output::describe_mapped_resource_configuration_output::Builder {
        crate::output::describe_mapped_resource_configuration_output::Builder::default()
    }
}

/// See [`DescribeMappedResourceConfigurationOutput`](crate::output::DescribeMappedResourceConfigurationOutput).
pub mod describe_mapped_resource_configuration_output {

    /// A builder for [`DescribeMappedResourceConfigurationOutput`](crate::output::DescribeMappedResourceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) mapped_resource_configuration_list:
            std::option::Option<std::vec::Vec<crate::model::MappedResourceConfigurationListItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `mapped_resource_configuration_list`.
        ///
        /// To override the contents of this collection use [`set_mapped_resource_configuration_list`](Self::set_mapped_resource_configuration_list).
        ///
        /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
        pub fn mapped_resource_configuration_list(
            mut self,
            input: crate::model::MappedResourceConfigurationListItem,
        ) -> Self {
            let mut v = self.mapped_resource_configuration_list.unwrap_or_default();
            v.push(input);
            self.mapped_resource_configuration_list = Some(v);
            self
        }
        /// <p>A structure that encapsulates, or contains, the media storage configuration properties.</p>
        pub fn set_mapped_resource_configuration_list(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::MappedResourceConfigurationListItem>,
            >,
        ) -> Self {
            self.mapped_resource_configuration_list = input;
            self
        }
        /// <p>The token that was used in the <code>NextToken</code>request to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that was used in the <code>NextToken</code>request to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeMappedResourceConfigurationOutput`](crate::output::DescribeMappedResourceConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeMappedResourceConfigurationOutput {
            crate::output::DescribeMappedResourceConfigurationOutput {
                mapped_resource_configuration_list: self.mapped_resource_configuration_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeImageGenerationConfigurationOutput {
    /// <p>The structure that contains the information required for the Kinesis video stream (KVS) images delivery. If this structure is null, the configuration will be deleted from the stream.</p>
    #[doc(hidden)]
    pub image_generation_configuration:
        std::option::Option<crate::model::ImageGenerationConfiguration>,
    _request_id: Option<String>,
}
impl DescribeImageGenerationConfigurationOutput {
    /// <p>The structure that contains the information required for the Kinesis video stream (KVS) images delivery. If this structure is null, the configuration will be deleted from the stream.</p>
    pub fn image_generation_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ImageGenerationConfiguration> {
        self.image_generation_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeImageGenerationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeImageGenerationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeImageGenerationConfigurationOutput`](crate::output::DescribeImageGenerationConfigurationOutput).
    pub fn builder() -> crate::output::describe_image_generation_configuration_output::Builder {
        crate::output::describe_image_generation_configuration_output::Builder::default()
    }
}

/// See [`DescribeImageGenerationConfigurationOutput`](crate::output::DescribeImageGenerationConfigurationOutput).
pub mod describe_image_generation_configuration_output {

    /// A builder for [`DescribeImageGenerationConfigurationOutput`](crate::output::DescribeImageGenerationConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) image_generation_configuration:
            std::option::Option<crate::model::ImageGenerationConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The structure that contains the information required for the Kinesis video stream (KVS) images delivery. If this structure is null, the configuration will be deleted from the stream.</p>
        pub fn image_generation_configuration(
            mut self,
            input: crate::model::ImageGenerationConfiguration,
        ) -> Self {
            self.image_generation_configuration = Some(input);
            self
        }
        /// <p>The structure that contains the information required for the Kinesis video stream (KVS) images delivery. If this structure is null, the configuration will be deleted from the stream.</p>
        pub fn set_image_generation_configuration(
            mut self,
            input: std::option::Option<crate::model::ImageGenerationConfiguration>,
        ) -> Self {
            self.image_generation_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeImageGenerationConfigurationOutput`](crate::output::DescribeImageGenerationConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeImageGenerationConfigurationOutput {
            crate::output::DescribeImageGenerationConfigurationOutput {
                image_generation_configuration: self.image_generation_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeEdgeConfigurationOutput {
    /// <p>The name of the stream from which the edge configuration was updated.</p>
    #[doc(hidden)]
    pub stream_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The latest status of the edge configuration update.</p>
    #[doc(hidden)]
    pub sync_status: std::option::Option<crate::model::SyncStatus>,
    /// <p>A description of the generated failure status.</p>
    #[doc(hidden)]
    pub failed_status_details: std::option::Option<std::string::String>,
    /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
    #[doc(hidden)]
    pub edge_config: std::option::Option<crate::model::EdgeConfig>,
    _request_id: Option<String>,
}
impl DescribeEdgeConfigurationOutput {
    /// <p>The name of the stream from which the edge configuration was updated.</p>
    pub fn stream_name(&self) -> std::option::Option<&str> {
        self.stream_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
    /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The latest status of the edge configuration update.</p>
    pub fn sync_status(&self) -> std::option::Option<&crate::model::SyncStatus> {
        self.sync_status.as_ref()
    }
    /// <p>A description of the generated failure status.</p>
    pub fn failed_status_details(&self) -> std::option::Option<&str> {
        self.failed_status_details.as_deref()
    }
    /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
    pub fn edge_config(&self) -> std::option::Option<&crate::model::EdgeConfig> {
        self.edge_config.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeEdgeConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeEdgeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEdgeConfigurationOutput`](crate::output::DescribeEdgeConfigurationOutput).
    pub fn builder() -> crate::output::describe_edge_configuration_output::Builder {
        crate::output::describe_edge_configuration_output::Builder::default()
    }
}

/// See [`DescribeEdgeConfigurationOutput`](crate::output::DescribeEdgeConfigurationOutput).
pub mod describe_edge_configuration_output {

    /// A builder for [`DescribeEdgeConfigurationOutput`](crate::output::DescribeEdgeConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_name: std::option::Option<std::string::String>,
        pub(crate) stream_arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) sync_status: std::option::Option<crate::model::SyncStatus>,
        pub(crate) failed_status_details: std::option::Option<std::string::String>,
        pub(crate) edge_config: std::option::Option<crate::model::EdgeConfig>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the stream from which the edge configuration was updated.</p>
        pub fn stream_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_name = Some(input.into());
            self
        }
        /// <p>The name of the stream from which the edge configuration was updated.</p>
        pub fn set_stream_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_arn = input;
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was first created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
        pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.last_updated_time = Some(input);
            self
        }
        /// <p>The timestamp at which a stream’s edge configuration was last updated.</p>
        pub fn set_last_updated_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.last_updated_time = input;
            self
        }
        /// <p>The latest status of the edge configuration update.</p>
        pub fn sync_status(mut self, input: crate::model::SyncStatus) -> Self {
            self.sync_status = Some(input);
            self
        }
        /// <p>The latest status of the edge configuration update.</p>
        pub fn set_sync_status(
            mut self,
            input: std::option::Option<crate::model::SyncStatus>,
        ) -> Self {
            self.sync_status = input;
            self
        }
        /// <p>A description of the generated failure status.</p>
        pub fn failed_status_details(mut self, input: impl Into<std::string::String>) -> Self {
            self.failed_status_details = Some(input.into());
            self
        }
        /// <p>A description of the generated failure status.</p>
        pub fn set_failed_status_details(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failed_status_details = input;
            self
        }
        /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
        pub fn edge_config(mut self, input: crate::model::EdgeConfig) -> Self {
            self.edge_config = Some(input);
            self
        }
        /// <p>A description of the stream's edge configuration that will be used to sync with the Edge Agent IoT Greengrass component. The Edge Agent component will run on an IoT Hub Device setup at your premise.</p>
        pub fn set_edge_config(
            mut self,
            input: std::option::Option<crate::model::EdgeConfig>,
        ) -> Self {
            self.edge_config = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEdgeConfigurationOutput`](crate::output::DescribeEdgeConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeEdgeConfigurationOutput {
            crate::output::DescribeEdgeConfigurationOutput {
                stream_name: self.stream_name,
                stream_arn: self.stream_arn,
                creation_time: self.creation_time,
                last_updated_time: self.last_updated_time,
                sync_status: self.sync_status,
                failed_status_details: self.failed_status_details,
                edge_config: self.edge_config,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStreamOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStreamOutput`](crate::output::DeleteStreamOutput).
    pub fn builder() -> crate::output::delete_stream_output::Builder {
        crate::output::delete_stream_output::Builder::default()
    }
}

/// See [`DeleteStreamOutput`](crate::output::DeleteStreamOutput).
pub mod delete_stream_output {

    /// A builder for [`DeleteStreamOutput`](crate::output::DeleteStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStreamOutput`](crate::output::DeleteStreamOutput).
        pub fn build(self) -> crate::output::DeleteStreamOutput {
            crate::output::DeleteStreamOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteSignalingChannelOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteSignalingChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput).
    pub fn builder() -> crate::output::delete_signaling_channel_output::Builder {
        crate::output::delete_signaling_channel_output::Builder::default()
    }
}

/// See [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput).
pub mod delete_signaling_channel_output {

    /// A builder for [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput).
        pub fn build(self) -> crate::output::DeleteSignalingChannelOutput {
            crate::output::DeleteSignalingChannelOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamOutput {
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    #[doc(hidden)]
    pub stream_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateStreamOutput {
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    pub fn stream_arn(&self) -> std::option::Option<&str> {
        self.stream_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStreamOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamOutput`](crate::output::CreateStreamOutput).
    pub fn builder() -> crate::output::create_stream_output::Builder {
        crate::output::create_stream_output::Builder::default()
    }
}

/// See [`CreateStreamOutput`](crate::output::CreateStreamOutput).
pub mod create_stream_output {

    /// A builder for [`CreateStreamOutput`](crate::output::CreateStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStreamOutput`](crate::output::CreateStreamOutput).
        pub fn build(self) -> crate::output::CreateStreamOutput {
            crate::output::CreateStreamOutput {
                stream_arn: self.stream_arn,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSignalingChannelOutput {
    /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateSignalingChannelOutput {
    /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateSignalingChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput).
    pub fn builder() -> crate::output::create_signaling_channel_output::Builder {
        crate::output::create_signaling_channel_output::Builder::default()
    }
}

/// See [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput).
pub mod create_signaling_channel_output {

    /// A builder for [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput).
        pub fn build(self) -> crate::output::CreateSignalingChannelOutput {
            crate::output::CreateSignalingChannelOutput {
                channel_arn: self.channel_arn,
                _request_id: self._request_id,
            }
        }
    }
}
