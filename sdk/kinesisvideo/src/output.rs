// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateStreamOutput {}
impl std::fmt::Debug for UpdateStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateStreamOutput");
        formatter.finish()
    }
}
/// See [`UpdateStreamOutput`](crate::output::UpdateStreamOutput)
pub mod update_stream_output {
    /// A builder for [`UpdateStreamOutput`](crate::output::UpdateStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateStreamOutput`](crate::output::UpdateStreamOutput)
        pub fn build(self) -> crate::output::UpdateStreamOutput {
            crate::output::UpdateStreamOutput {}
        }
    }
}
impl UpdateStreamOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStreamOutput`](crate::output::UpdateStreamOutput)
    pub fn builder() -> crate::output::update_stream_output::Builder {
        crate::output::update_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSignalingChannelOutput {}
impl std::fmt::Debug for UpdateSignalingChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSignalingChannelOutput");
        formatter.finish()
    }
}
/// See [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput)
pub mod update_signaling_channel_output {
    /// A builder for [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput)
        pub fn build(self) -> crate::output::UpdateSignalingChannelOutput {
            crate::output::UpdateSignalingChannelOutput {}
        }
    }
}
impl UpdateSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSignalingChannelOutput`](crate::output::UpdateSignalingChannelOutput)
    pub fn builder() -> crate::output::update_signaling_channel_output::Builder {
        crate::output::update_signaling_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateDataRetentionOutput {}
impl std::fmt::Debug for UpdateDataRetentionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateDataRetentionOutput");
        formatter.finish()
    }
}
/// See [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput)
pub mod update_data_retention_output {
    /// A builder for [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput)
        pub fn build(self) -> crate::output::UpdateDataRetentionOutput {
            crate::output::UpdateDataRetentionOutput {}
        }
    }
}
impl UpdateDataRetentionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateDataRetentionOutput`](crate::output::UpdateDataRetentionOutput)
    pub fn builder() -> crate::output::update_data_retention_output::Builder {
        crate::output::update_data_retention_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagStreamOutput {}
impl std::fmt::Debug for UntagStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagStreamOutput");
        formatter.finish()
    }
}
/// See [`UntagStreamOutput`](crate::output::UntagStreamOutput)
pub mod untag_stream_output {
    /// A builder for [`UntagStreamOutput`](crate::output::UntagStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagStreamOutput`](crate::output::UntagStreamOutput)
        pub fn build(self) -> crate::output::UntagStreamOutput {
            crate::output::UntagStreamOutput {}
        }
    }
}
impl UntagStreamOutput {
    /// Creates a new builder-style object to manufacture [`UntagStreamOutput`](crate::output::UntagStreamOutput)
    pub fn builder() -> crate::output::untag_stream_output::Builder {
        crate::output::untag_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagStreamOutput {}
impl std::fmt::Debug for TagStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagStreamOutput");
        formatter.finish()
    }
}
/// See [`TagStreamOutput`](crate::output::TagStreamOutput)
pub mod tag_stream_output {
    /// A builder for [`TagStreamOutput`](crate::output::TagStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagStreamOutput`](crate::output::TagStreamOutput)
        pub fn build(self) -> crate::output::TagStreamOutput {
            crate::output::TagStreamOutput {}
        }
    }
}
impl TagStreamOutput {
    /// Creates a new builder-style object to manufacture [`TagStreamOutput`](crate::output::TagStreamOutput)
    pub fn builder() -> crate::output::tag_stream_output::Builder {
        crate::output::tag_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForStreamOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is
    /// truncated, the response includes a token that you can use in the next request to fetch
    /// the next set of tags.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A map of tag keys and values associated with the specified stream.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ListTagsForStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForStreamOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput)
pub mod list_tags_for_stream_output {
    /// A builder for [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is
        /// truncated, the response includes a token that you can use in the next request to fetch
        /// the next set of tags.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify this parameter and the result of a <code>ListTags</code> call is
        /// truncated, the response includes a token that you can use in the next request to fetch
        /// the next set of tags.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of tag keys and values associated with the specified stream.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of tag keys and values associated with the specified stream.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput)
        pub fn build(self) -> crate::output::ListTagsForStreamOutput {
            crate::output::ListTagsForStreamOutput {
                next_token: self.next_token,
                tags: self.tags,
            }
        }
    }
}
impl ListTagsForStreamOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForStreamOutput`](crate::output::ListTagsForStreamOutput)
    pub fn builder() -> crate::output::list_tags_for_stream_output::Builder {
        crate::output::list_tags_for_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code>
    /// call is truncated, the response includes a token that you can use in the next request to
    /// fetch the next set of tags. </p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code>
        /// call is truncated, the response includes a token that you can use in the next request to
        /// fetch the next set of tags. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify this parameter and the result of a <code>ListTagsForResource</code>
        /// call is truncated, the response includes a token that you can use in the next request to
        /// fetch the next set of tags. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A map of tag keys and values associated with the specified signaling channel.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                next_token: self.next_token,
                tags: self.tags,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListStreamsOutput {
    /// <p>An array of <code>StreamInfo</code> objects.</p>
    pub stream_info_list: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
    /// <p>If the response is truncated, the call returns this element with a token. To get
    /// the next batch of streams, use this token in your next request. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListStreamsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListStreamsOutput");
        formatter.field("stream_info_list", &self.stream_info_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListStreamsOutput`](crate::output::ListStreamsOutput)
pub mod list_streams_output {
    /// A builder for [`ListStreamsOutput`](crate::output::ListStreamsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_info_list: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `stream_info_list`.
        ///
        /// To override the contents of this collection use [`set_stream_info_list`](Self::set_stream_info_list).
        ///
        /// <p>An array of <code>StreamInfo</code> objects.</p>
        pub fn stream_info_list(mut self, input: impl Into<crate::model::StreamInfo>) -> Self {
            let mut v = self.stream_info_list.unwrap_or_default();
            v.push(input.into());
            self.stream_info_list = Some(v);
            self
        }
        /// <p>An array of <code>StreamInfo</code> objects.</p>
        pub fn set_stream_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamInfo>>,
        ) -> Self {
            self.stream_info_list = input;
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get
        /// the next batch of streams, use this token in your next request. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get
        /// the next batch of streams, use this token in your next request. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListStreamsOutput`](crate::output::ListStreamsOutput)
        pub fn build(self) -> crate::output::ListStreamsOutput {
            crate::output::ListStreamsOutput {
                stream_info_list: self.stream_info_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListStreamsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamsOutput`](crate::output::ListStreamsOutput)
    pub fn builder() -> crate::output::list_streams_output::Builder {
        crate::output::list_streams_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListSignalingChannelsOutput {
    /// <p>An array of <code>ChannelInfo</code> objects.</p>
    pub channel_info_list: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
    /// <p>If the response is truncated, the call returns this element with a token. To get the
    /// next batch of streams, use this token in your next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListSignalingChannelsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListSignalingChannelsOutput");
        formatter.field("channel_info_list", &self.channel_info_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput)
pub mod list_signaling_channels_output {
    /// A builder for [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_info_list: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `channel_info_list`.
        ///
        /// To override the contents of this collection use [`set_channel_info_list`](Self::set_channel_info_list).
        ///
        /// <p>An array of <code>ChannelInfo</code> objects.</p>
        pub fn channel_info_list(mut self, input: impl Into<crate::model::ChannelInfo>) -> Self {
            let mut v = self.channel_info_list.unwrap_or_default();
            v.push(input.into());
            self.channel_info_list = Some(v);
            self
        }
        /// <p>An array of <code>ChannelInfo</code> objects.</p>
        pub fn set_channel_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChannelInfo>>,
        ) -> Self {
            self.channel_info_list = input;
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the
        /// next batch of streams, use this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response is truncated, the call returns this element with a token. To get the
        /// next batch of streams, use this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput)
        pub fn build(self) -> crate::output::ListSignalingChannelsOutput {
            crate::output::ListSignalingChannelsOutput {
                channel_info_list: self.channel_info_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListSignalingChannelsOutput {
    /// Creates a new builder-style object to manufacture [`ListSignalingChannelsOutput`](crate::output::ListSignalingChannelsOutput)
    pub fn builder() -> crate::output::list_signaling_channels_output::Builder {
        crate::output::list_signaling_channels_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetSignalingChannelEndpointOutput {
    /// <p>A list of endpoints for the specified signaling channel.</p>
    pub resource_endpoint_list:
        std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
}
impl std::fmt::Debug for GetSignalingChannelEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetSignalingChannelEndpointOutput");
        formatter.field("resource_endpoint_list", &self.resource_endpoint_list);
        formatter.finish()
    }
}
/// See [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput)
pub mod get_signaling_channel_endpoint_output {
    /// A builder for [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_endpoint_list:
            std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
    }
    impl Builder {
        /// Appends an item to `resource_endpoint_list`.
        ///
        /// To override the contents of this collection use [`set_resource_endpoint_list`](Self::set_resource_endpoint_list).
        ///
        /// <p>A list of endpoints for the specified signaling channel.</p>
        pub fn resource_endpoint_list(
            mut self,
            input: impl Into<crate::model::ResourceEndpointListItem>,
        ) -> Self {
            let mut v = self.resource_endpoint_list.unwrap_or_default();
            v.push(input.into());
            self.resource_endpoint_list = Some(v);
            self
        }
        /// <p>A list of endpoints for the specified signaling channel.</p>
        pub fn set_resource_endpoint_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceEndpointListItem>>,
        ) -> Self {
            self.resource_endpoint_list = input;
            self
        }
        /// Consumes the builder and constructs a [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput)
        pub fn build(self) -> crate::output::GetSignalingChannelEndpointOutput {
            crate::output::GetSignalingChannelEndpointOutput {
                resource_endpoint_list: self.resource_endpoint_list,
            }
        }
    }
}
impl GetSignalingChannelEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetSignalingChannelEndpointOutput`](crate::output::GetSignalingChannelEndpointOutput)
    pub fn builder() -> crate::output::get_signaling_channel_endpoint_output::Builder {
        crate::output::get_signaling_channel_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDataEndpointOutput {
    /// <p>The endpoint value. To read data from the stream or to write data to it, specify
    /// this endpoint in your application.</p>
    pub data_endpoint: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetDataEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDataEndpointOutput");
        formatter.field("data_endpoint", &self.data_endpoint);
        formatter.finish()
    }
}
/// See [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput)
pub mod get_data_endpoint_output {
    /// A builder for [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) data_endpoint: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The endpoint value. To read data from the stream or to write data to it, specify
        /// this endpoint in your application.</p>
        pub fn data_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.data_endpoint = Some(input.into());
            self
        }
        /// <p>The endpoint value. To read data from the stream or to write data to it, specify
        /// this endpoint in your application.</p>
        pub fn set_data_endpoint(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.data_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput)
        pub fn build(self) -> crate::output::GetDataEndpointOutput {
            crate::output::GetDataEndpointOutput {
                data_endpoint: self.data_endpoint,
            }
        }
    }
}
impl GetDataEndpointOutput {
    /// Creates a new builder-style object to manufacture [`GetDataEndpointOutput`](crate::output::GetDataEndpointOutput)
    pub fn builder() -> crate::output::get_data_endpoint_output::Builder {
        crate::output::get_data_endpoint_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeStreamOutput {
    /// <p>An object that describes the stream.</p>
    pub stream_info: std::option::Option<crate::model::StreamInfo>,
}
impl std::fmt::Debug for DescribeStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeStreamOutput");
        formatter.field("stream_info", &self.stream_info);
        formatter.finish()
    }
}
/// See [`DescribeStreamOutput`](crate::output::DescribeStreamOutput)
pub mod describe_stream_output {
    /// A builder for [`DescribeStreamOutput`](crate::output::DescribeStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_info: std::option::Option<crate::model::StreamInfo>,
    }
    impl Builder {
        /// <p>An object that describes the stream.</p>
        pub fn stream_info(mut self, input: crate::model::StreamInfo) -> Self {
            self.stream_info = Some(input);
            self
        }
        /// <p>An object that describes the stream.</p>
        pub fn set_stream_info(
            mut self,
            input: std::option::Option<crate::model::StreamInfo>,
        ) -> Self {
            self.stream_info = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeStreamOutput`](crate::output::DescribeStreamOutput)
        pub fn build(self) -> crate::output::DescribeStreamOutput {
            crate::output::DescribeStreamOutput {
                stream_info: self.stream_info,
            }
        }
    }
}
impl DescribeStreamOutput {
    /// Creates a new builder-style object to manufacture [`DescribeStreamOutput`](crate::output::DescribeStreamOutput)
    pub fn builder() -> crate::output::describe_stream_output::Builder {
        crate::output::describe_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSignalingChannelOutput {
    /// <p>A structure that encapsulates the specified signaling channel's metadata and
    /// properties.</p>
    pub channel_info: std::option::Option<crate::model::ChannelInfo>,
}
impl std::fmt::Debug for DescribeSignalingChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSignalingChannelOutput");
        formatter.field("channel_info", &self.channel_info);
        formatter.finish()
    }
}
/// See [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput)
pub mod describe_signaling_channel_output {
    /// A builder for [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_info: std::option::Option<crate::model::ChannelInfo>,
    }
    impl Builder {
        /// <p>A structure that encapsulates the specified signaling channel's metadata and
        /// properties.</p>
        pub fn channel_info(mut self, input: crate::model::ChannelInfo) -> Self {
            self.channel_info = Some(input);
            self
        }
        /// <p>A structure that encapsulates the specified signaling channel's metadata and
        /// properties.</p>
        pub fn set_channel_info(
            mut self,
            input: std::option::Option<crate::model::ChannelInfo>,
        ) -> Self {
            self.channel_info = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput)
        pub fn build(self) -> crate::output::DescribeSignalingChannelOutput {
            crate::output::DescribeSignalingChannelOutput {
                channel_info: self.channel_info,
            }
        }
    }
}
impl DescribeSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSignalingChannelOutput`](crate::output::DescribeSignalingChannelOutput)
    pub fn builder() -> crate::output::describe_signaling_channel_output::Builder {
        crate::output::describe_signaling_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteStreamOutput {}
impl std::fmt::Debug for DeleteStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteStreamOutput");
        formatter.finish()
    }
}
/// See [`DeleteStreamOutput`](crate::output::DeleteStreamOutput)
pub mod delete_stream_output {
    /// A builder for [`DeleteStreamOutput`](crate::output::DeleteStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteStreamOutput`](crate::output::DeleteStreamOutput)
        pub fn build(self) -> crate::output::DeleteStreamOutput {
            crate::output::DeleteStreamOutput {}
        }
    }
}
impl DeleteStreamOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStreamOutput`](crate::output::DeleteStreamOutput)
    pub fn builder() -> crate::output::delete_stream_output::Builder {
        crate::output::delete_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteSignalingChannelOutput {}
impl std::fmt::Debug for DeleteSignalingChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteSignalingChannelOutput");
        formatter.finish()
    }
}
/// See [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput)
pub mod delete_signaling_channel_output {
    /// A builder for [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput)
        pub fn build(self) -> crate::output::DeleteSignalingChannelOutput {
            crate::output::DeleteSignalingChannelOutput {}
        }
    }
}
impl DeleteSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteSignalingChannelOutput`](crate::output::DeleteSignalingChannelOutput)
    pub fn builder() -> crate::output::delete_signaling_channel_output::Builder {
        crate::output::delete_signaling_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateStreamOutput {
    /// <p>The Amazon Resource Name (ARN) of the stream.</p>
    pub stream_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateStreamOutput");
        formatter.field("stream_arn", &self.stream_arn);
        formatter.finish()
    }
}
/// See [`CreateStreamOutput`](crate::output::CreateStreamOutput)
pub mod create_stream_output {
    /// A builder for [`CreateStreamOutput`](crate::output::CreateStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn stream_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.stream_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the stream.</p>
        pub fn set_stream_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.stream_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateStreamOutput`](crate::output::CreateStreamOutput)
        pub fn build(self) -> crate::output::CreateStreamOutput {
            crate::output::CreateStreamOutput {
                stream_arn: self.stream_arn,
            }
        }
    }
}
impl CreateStreamOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamOutput`](crate::output::CreateStreamOutput)
    pub fn builder() -> crate::output::create_stream_output::Builder {
        crate::output::create_stream_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateSignalingChannelOutput {
    /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
    pub channel_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateSignalingChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSignalingChannelOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.finish()
    }
}
/// See [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput)
pub mod create_signaling_channel_output {
    /// A builder for [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) channel_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
        pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.channel_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the created channel.</p>
        pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.channel_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput)
        pub fn build(self) -> crate::output::CreateSignalingChannelOutput {
            crate::output::CreateSignalingChannelOutput {
                channel_arn: self.channel_arn,
            }
        }
    }
}
impl CreateSignalingChannelOutput {
    /// Creates a new builder-style object to manufacture [`CreateSignalingChannelOutput`](crate::output::CreateSignalingChannelOutput)
    pub fn builder() -> crate::output::create_signaling_channel_output::Builder {
        crate::output::create_signaling_channel_output::Builder::default()
    }
}
