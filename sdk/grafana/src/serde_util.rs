// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    builder
}

pub(crate) fn associate_license_output_correct_errors(
    mut builder: crate::operation::associate_license::builders::AssociateLicenseOutputBuilder,
) -> crate::operation::associate_license::builders::AssociateLicenseOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.service_code.is_none() {
        builder.service_code = Some(Default::default())
    }
    if builder.quota_code.is_none() {
        builder.quota_code = Some(Default::default())
    }
    builder
}

pub(crate) fn create_workspace_output_correct_errors(
    mut builder: crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder,
) -> crate::operation::create_workspace::builders::CreateWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_workspace_api_key_output_correct_errors(
    mut builder: crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder,
) -> crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder {
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_workspace_output_correct_errors(
    mut builder: crate::operation::delete_workspace::builders::DeleteWorkspaceOutputBuilder,
) -> crate::operation::delete_workspace::builders::DeleteWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_workspace_api_key_output_correct_errors(
    mut builder: crate::operation::delete_workspace_api_key::builders::DeleteWorkspaceApiKeyOutputBuilder,
) -> crate::operation::delete_workspace_api_key::builders::DeleteWorkspaceApiKeyOutputBuilder {
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.workspace_id.is_none() {
        builder.workspace_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_workspace_output_correct_errors(
    mut builder: crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder,
) -> crate::operation::describe_workspace::builders::DescribeWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workspace_authentication_output_correct_errors(
    mut builder: crate::operation::describe_workspace_authentication::builders::DescribeWorkspaceAuthenticationOutputBuilder,
) -> crate::operation::describe_workspace_authentication::builders::DescribeWorkspaceAuthenticationOutputBuilder {
    if builder.authentication.is_none() {
        builder.authentication = {
            let builder = crate::types::builders::AuthenticationDescriptionBuilder::default();
            crate::serde_util::authentication_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_workspace_configuration_output_correct_errors(
    mut builder: crate::operation::describe_workspace_configuration::builders::DescribeWorkspaceConfigurationOutputBuilder,
) -> crate::operation::describe_workspace_configuration::builders::DescribeWorkspaceConfigurationOutputBuilder {
    if builder.configuration.is_none() {
        builder.configuration = Some(Default::default())
    }
    builder
}

pub(crate) fn disassociate_license_output_correct_errors(
    mut builder: crate::operation::disassociate_license::builders::DisassociateLicenseOutputBuilder,
) -> crate::operation::disassociate_license::builders::DisassociateLicenseOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_permissions_output_correct_errors(
    mut builder: crate::operation::list_permissions::builders::ListPermissionsOutputBuilder,
) -> crate::operation::list_permissions::builders::ListPermissionsOutputBuilder {
    if builder.permissions.is_none() {
        builder.permissions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_workspaces_output_correct_errors(
    mut builder: crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder,
) -> crate::operation::list_workspaces::builders::ListWorkspacesOutputBuilder {
    if builder.workspaces.is_none() {
        builder.workspaces = Some(Default::default())
    }
    builder
}

pub(crate) fn update_permissions_output_correct_errors(
    mut builder: crate::operation::update_permissions::builders::UpdatePermissionsOutputBuilder,
) -> crate::operation::update_permissions::builders::UpdatePermissionsOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn update_workspace_output_correct_errors(
    mut builder: crate::operation::update_workspace::builders::UpdateWorkspaceOutputBuilder,
) -> crate::operation::update_workspace::builders::UpdateWorkspaceOutputBuilder {
    if builder.workspace.is_none() {
        builder.workspace = {
            let builder = crate::types::builders::WorkspaceDescriptionBuilder::default();
            crate::serde_util::workspace_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_workspace_authentication_output_correct_errors(
    mut builder: crate::operation::update_workspace_authentication::builders::UpdateWorkspaceAuthenticationOutputBuilder,
) -> crate::operation::update_workspace_authentication::builders::UpdateWorkspaceAuthenticationOutputBuilder {
    if builder.authentication.is_none() {
        builder.authentication = {
            let builder = crate::types::builders::AuthenticationDescriptionBuilder::default();
            crate::serde_util::authentication_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn workspace_description_correct_errors(
    mut builder: crate::types::builders::WorkspaceDescriptionBuilder,
) -> crate::types::builders::WorkspaceDescriptionBuilder {
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_sources.is_none() {
        builder.data_sources = Some(Default::default())
    }
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.grafana_version.is_none() {
        builder.grafana_version = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.modified.is_none() {
        builder.modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::WorkspaceStatus>().ok()
    }
    if builder.authentication.is_none() {
        builder.authentication = {
            let builder = crate::types::builders::AuthenticationSummaryBuilder::default();
            crate::serde_util::authentication_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn authentication_description_correct_errors(
    mut builder: crate::types::builders::AuthenticationDescriptionBuilder,
) -> crate::types::builders::AuthenticationDescriptionBuilder {
    if builder.providers.is_none() {
        builder.providers = Some(Default::default())
    }
    builder
}

pub(crate) fn authentication_summary_correct_errors(
    mut builder: crate::types::builders::AuthenticationSummaryBuilder,
) -> crate::types::builders::AuthenticationSummaryBuilder {
    if builder.providers.is_none() {
        builder.providers = Some(Default::default())
    }
    builder
}

pub(crate) fn network_access_configuration_correct_errors(
    mut builder: crate::types::builders::NetworkAccessConfigurationBuilder,
) -> crate::types::builders::NetworkAccessConfigurationBuilder {
    if builder.prefix_list_ids.is_none() {
        builder.prefix_list_ids = Some(Default::default())
    }
    if builder.vpce_ids.is_none() {
        builder.vpce_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn permission_entry_correct_errors(
    mut builder: crate::types::builders::PermissionEntryBuilder,
) -> crate::types::builders::PermissionEntryBuilder {
    if builder.user.is_none() {
        builder.user = {
            let builder = crate::types::builders::UserBuilder::default();
            crate::serde_util::user_correct_errors(builder).build().ok()
        }
    }
    if builder.role.is_none() {
        builder.role = "no value was set".parse::<crate::types::Role>().ok()
    }
    builder
}

pub(crate) fn saml_authentication_correct_errors(
    mut builder: crate::types::builders::SamlAuthenticationBuilder,
) -> crate::types::builders::SamlAuthenticationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SamlConfigurationStatus>().ok()
    }
    builder
}

pub(crate) fn update_error_correct_errors(mut builder: crate::types::builders::UpdateErrorBuilder) -> crate::types::builders::UpdateErrorBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.caused_by.is_none() {
        builder.caused_by = {
            let builder = crate::types::builders::UpdateInstructionBuilder::default();
            crate::serde_util::update_instruction_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationBuilder,
) -> crate::types::builders::VpcConfigurationBuilder {
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn workspace_summary_correct_errors(
    mut builder: crate::types::builders::WorkspaceSummaryBuilder,
) -> crate::types::builders::WorkspaceSummaryBuilder {
    if builder.created.is_none() {
        builder.created = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.grafana_version.is_none() {
        builder.grafana_version = Some(Default::default())
    }
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.modified.is_none() {
        builder.modified = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::WorkspaceStatus>().ok()
    }
    if builder.authentication.is_none() {
        builder.authentication = {
            let builder = crate::types::builders::AuthenticationSummaryBuilder::default();
            crate::serde_util::authentication_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn saml_configuration_correct_errors(
    mut builder: crate::types::builders::SamlConfigurationBuilder,
) -> crate::types::builders::SamlConfigurationBuilder {
    if builder.idp_metadata.is_none() {
        builder.idp_metadata = Some(crate::types::IdpMetadata::Unknown)
    }
    builder
}

pub(crate) fn update_instruction_correct_errors(
    mut builder: crate::types::builders::UpdateInstructionBuilder,
) -> crate::types::builders::UpdateInstructionBuilder {
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::UpdateAction>().ok()
    }
    if builder.role.is_none() {
        builder.role = "no value was set".parse::<crate::types::Role>().ok()
    }
    if builder.users.is_none() {
        builder.users = Some(Default::default())
    }
    builder
}

pub(crate) fn user_correct_errors(mut builder: crate::types::builders::UserBuilder) -> crate::types::builders::UserBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::UserType>().ok()
    }
    builder
}
