// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains some information about one workspace in the account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WorkspaceSummary {
    /// <p>The date that the workspace was created.</p>
    pub created: ::aws_smithy_types::DateTime,
    /// <p>The customer-entered description of the workspace.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
    pub endpoint: ::std::string::String,
    /// <p>The Grafana version that the workspace is running.</p>
    pub grafana_version: ::std::string::String,
    /// <p>The unique ID of the workspace.</p>
    pub id: ::std::string::String,
    /// <p>The most recent date that the workspace was modified.</p>
    pub modified: ::aws_smithy_types::DateTime,
    /// <p>The name of the workspace.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, which allows Amazon Managed Grafana to use these channels.</p>
    pub notification_destinations: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>,
    /// <p>The current status of the workspace.</p>
    pub status: crate::types::WorkspaceStatus,
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    pub authentication: ::std::option::Option<crate::types::AuthenticationSummary>,
    /// <p>The list of tags associated with the workspace.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkspaceSummary {
    /// <p>The date that the workspace was created.</p>
    pub fn created(&self) -> &::aws_smithy_types::DateTime {
        &self.created
    }
    /// <p>The customer-entered description of the workspace.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The Grafana version that the workspace is running.</p>
    pub fn grafana_version(&self) -> &str {
        use std::ops::Deref;
        self.grafana_version.deref()
    }
    /// <p>The unique ID of the workspace.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn modified(&self) -> &::aws_smithy_types::DateTime {
        &self.modified
    }
    /// <p>The name of the workspace.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, which allows Amazon Managed Grafana to use these channels.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_destinations.is_none()`.
    pub fn notification_destinations(&self) -> &[crate::types::NotificationDestinationType] {
        self.notification_destinations.as_deref().unwrap_or_default()
    }
    /// <p>The current status of the workspace.</p>
    pub fn status(&self) -> &crate::types::WorkspaceStatus {
        &self.status
    }
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    pub fn authentication(&self) -> ::std::option::Option<&crate::types::AuthenticationSummary> {
        self.authentication.as_ref()
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for WorkspaceSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WorkspaceSummary");
        formatter.field("created", &self.created);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoint", &self.endpoint);
        formatter.field("grafana_version", &self.grafana_version);
        formatter.field("id", &self.id);
        formatter.field("modified", &self.modified);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("notification_destinations", &self.notification_destinations);
        formatter.field("status", &self.status);
        formatter.field("authentication", &self.authentication);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl WorkspaceSummary {
    /// Creates a new builder-style object to manufacture [`WorkspaceSummary`](crate::types::WorkspaceSummary).
    pub fn builder() -> crate::types::builders::WorkspaceSummaryBuilder {
        crate::types::builders::WorkspaceSummaryBuilder::default()
    }
}

/// A builder for [`WorkspaceSummary`](crate::types::WorkspaceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct WorkspaceSummaryBuilder {
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) grafana_version: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) notification_destinations: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>,
    pub(crate) status: ::std::option::Option<crate::types::WorkspaceStatus>,
    pub(crate) authentication: ::std::option::Option<crate::types::AuthenticationSummary>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl WorkspaceSummaryBuilder {
    /// <p>The date that the workspace was created.</p>
    /// This field is required.
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date that the workspace was created.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date that the workspace was created.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// <p>The customer-entered description of the workspace.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The customer-entered description of the workspace.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The customer-entered description of the workspace.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The URL endpoint to use to access the Grafana console in the workspace.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The Grafana version that the workspace is running.</p>
    /// This field is required.
    pub fn grafana_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grafana_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Grafana version that the workspace is running.</p>
    pub fn set_grafana_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grafana_version = input;
        self
    }
    /// <p>The Grafana version that the workspace is running.</p>
    pub fn get_grafana_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.grafana_version
    }
    /// <p>The unique ID of the workspace.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the workspace.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of the workspace.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The most recent date that the workspace was modified.</p>
    /// This field is required.
    pub fn modified(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn set_modified(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified = input;
        self
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn get_modified(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified
    }
    /// <p>The name of the workspace.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workspace.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workspace.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `notification_destinations`.
    ///
    /// To override the contents of this collection use [`set_notification_destinations`](Self::set_notification_destinations).
    ///
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, which allows Amazon Managed Grafana to use these channels.</p>
    pub fn notification_destinations(mut self, input: crate::types::NotificationDestinationType) -> Self {
        let mut v = self.notification_destinations.unwrap_or_default();
        v.push(input);
        self.notification_destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, which allows Amazon Managed Grafana to use these channels.</p>
    pub fn set_notification_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>) -> Self {
        self.notification_destinations = input;
        self
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, which allows Amazon Managed Grafana to use these channels.</p>
    pub fn get_notification_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>> {
        &self.notification_destinations
    }
    /// <p>The current status of the workspace.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkspaceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the workspace.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkspaceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the workspace.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkspaceStatus> {
        &self.status
    }
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    /// This field is required.
    pub fn authentication(mut self, input: crate::types::AuthenticationSummary) -> Self {
        self.authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<crate::types::AuthenticationSummary>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<crate::types::AuthenticationSummary> {
        &self.authentication
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags associated with the workspace.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`WorkspaceSummary`](crate::types::WorkspaceSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`created`](crate::types::builders::WorkspaceSummaryBuilder::created)
    /// - [`endpoint`](crate::types::builders::WorkspaceSummaryBuilder::endpoint)
    /// - [`grafana_version`](crate::types::builders::WorkspaceSummaryBuilder::grafana_version)
    /// - [`id`](crate::types::builders::WorkspaceSummaryBuilder::id)
    /// - [`modified`](crate::types::builders::WorkspaceSummaryBuilder::modified)
    /// - [`status`](crate::types::builders::WorkspaceSummaryBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkspaceSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkspaceSummary {
            created: self.created.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created",
                    "created was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            description: self.description,
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            grafana_version: self.grafana_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grafana_version",
                    "grafana_version was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            modified: self.modified.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified",
                    "modified was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            name: self.name,
            notification_destinations: self.notification_destinations,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building WorkspaceSummary",
                )
            })?,
            authentication: self.authentication,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for WorkspaceSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WorkspaceSummaryBuilder");
        formatter.field("created", &self.created);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoint", &self.endpoint);
        formatter.field("grafana_version", &self.grafana_version);
        formatter.field("id", &self.id);
        formatter.field("modified", &self.modified);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("notification_destinations", &self.notification_destinations);
        formatter.field("status", &self.status);
        formatter.field("authentication", &self.authentication);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
