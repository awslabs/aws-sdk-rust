// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure defines which groups defined in the SAML assertion attribute are to be mapped to the Grafana <code>Admin</code> and <code>Editor</code> roles in the workspace. SAML authenticated users not part of <code>Admin</code> or <code>Editor</code> role groups have <code>Viewer</code> permission over the workspace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RoleValues {
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Editor</code> role to.</p>
    pub editor: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Admin</code> role to.</p>
    pub admin: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RoleValues {
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Editor</code> role to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.editor.is_none()`.
    pub fn editor(&self) -> &[::std::string::String] {
        self.editor.as_deref().unwrap_or_default()
    }
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Admin</code> role to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.admin.is_none()`.
    pub fn admin(&self) -> &[::std::string::String] {
        self.admin.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RoleValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoleValues");
        formatter.field("editor", &"*** Sensitive Data Redacted ***");
        formatter.field("admin", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RoleValues {
    /// Creates a new builder-style object to manufacture [`RoleValues`](crate::types::RoleValues).
    pub fn builder() -> crate::types::builders::RoleValuesBuilder {
        crate::types::builders::RoleValuesBuilder::default()
    }
}

/// A builder for [`RoleValues`](crate::types::RoleValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RoleValuesBuilder {
    pub(crate) editor: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) admin: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RoleValuesBuilder {
    /// Appends an item to `editor`.
    ///
    /// To override the contents of this collection use [`set_editor`](Self::set_editor).
    ///
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Editor</code> role to.</p>
    pub fn editor(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.editor.unwrap_or_default();
        v.push(input.into());
        self.editor = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Editor</code> role to.</p>
    pub fn set_editor(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.editor = input;
        self
    }
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Editor</code> role to.</p>
    pub fn get_editor(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.editor
    }
    /// Appends an item to `admin`.
    ///
    /// To override the contents of this collection use [`set_admin`](Self::set_admin).
    ///
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Admin</code> role to.</p>
    pub fn admin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.admin.unwrap_or_default();
        v.push(input.into());
        self.admin = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Admin</code> role to.</p>
    pub fn set_admin(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.admin = input;
        self
    }
    /// <p>A list of groups from the SAML assertion attribute to grant the Grafana <code>Admin</code> role to.</p>
    pub fn get_admin(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.admin
    }
    /// Consumes the builder and constructs a [`RoleValues`](crate::types::RoleValues).
    pub fn build(self) -> crate::types::RoleValues {
        crate::types::RoleValues {
            editor: self.editor,
            admin: self.admin,
        }
    }
}
impl ::std::fmt::Debug for RoleValuesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RoleValuesBuilder");
        formatter.field("editor", &"*** Sensitive Data Redacted ***");
        formatter.field("admin", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
