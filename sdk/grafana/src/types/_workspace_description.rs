// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about an Amazon Managed Grafana workspace in your account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct WorkspaceDescription {
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If this is <code>ORGANIZATION</code>, the <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units the workspace can access.</p>
    pub account_access_type: ::std::option::Option<crate::types::AccountAccessType>,
    /// <p>The date that the workspace was created.</p>
    pub created: ::aws_smithy_types::DateTime,
    /// <p>Specifies the Amazon Web Services data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.</p>
    /// <p>This list is only used when the workspace was created through the Amazon Web Services console, and the <code>permissionType</code> is <code>SERVICE_MANAGED</code>.</p>
    pub data_sources: ::std::vec::Vec<crate::types::DataSourceType>,
    /// <p>The user-defined description of the workspace.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The URL that users can use to access the Grafana console in the workspace.</p>
    pub endpoint: ::std::string::String,
    /// <p>The version of Grafana supported in this workspace.</p>
    pub grafana_version: ::std::string::String,
    /// <p>The unique ID of this workspace.</p>
    pub id: ::std::string::String,
    /// <p>The most recent date that the workspace was modified.</p>
    pub modified: ::aws_smithy_types::DateTime,
    /// <p>The name of the workspace.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the IAM role that is used to access resources through Organizations.</p>
    pub organization_role_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.</p>
    pub notification_destinations: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>,
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub organizational_units: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>If this is <code>SERVICE_MANAGED</code>, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If this is <code>CUSTOMER_MANAGED</code>, you must manage those roles and permissions yourself.</p>
    /// <p>If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, this parameter must be set to <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information about converting between customer and service managed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>. For more information about the roles and permissions that must be managed for customer managed workspaces, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub permission_type: ::std::option::Option<crate::types::PermissionType>,
    /// <p>The name of the CloudFormation stack set that is used to generate IAM roles to be used for this workspace.</p>
    pub stack_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the workspace.</p>
    pub status: crate::types::WorkspaceStatus,
    /// <p>The IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. This role must already exist.</p>
    pub workspace_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
    pub license_type: ::std::option::Option<crate::types::LicenseType>,
    /// <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
    pub free_trial_consumed: ::std::option::Option<bool>,
    /// <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and will need to be renewed.</p>
    pub license_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies when that free trial ends.</p>
    pub free_trial_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication.</p>
    pub authentication: ::std::option::Option<crate::types::AuthenticationSummary>,
    /// <p>The list of tags associated with the workspace.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The configuration for connecting to data sources in a private VPC (Amazon Virtual Private Cloud).</p>
    pub vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
    /// <p>The configuration settings for network access to your workspace.</p>
    pub network_access_control: ::std::option::Option<crate::types::NetworkAccessConfiguration>,
}
impl WorkspaceDescription {
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If this is <code>ORGANIZATION</code>, the <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units the workspace can access.</p>
    pub fn account_access_type(&self) -> ::std::option::Option<&crate::types::AccountAccessType> {
        self.account_access_type.as_ref()
    }
    /// <p>The date that the workspace was created.</p>
    pub fn created(&self) -> &::aws_smithy_types::DateTime {
        &self.created
    }
    /// <p>Specifies the Amazon Web Services data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.</p>
    /// <p>This list is only used when the workspace was created through the Amazon Web Services console, and the <code>permissionType</code> is <code>SERVICE_MANAGED</code>.</p>
    pub fn data_sources(&self) -> &[crate::types::DataSourceType] {
        use std::ops::Deref;
        self.data_sources.deref()
    }
    /// <p>The user-defined description of the workspace.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL that users can use to access the Grafana console in the workspace.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The version of Grafana supported in this workspace.</p>
    pub fn grafana_version(&self) -> &str {
        use std::ops::Deref;
        self.grafana_version.deref()
    }
    /// <p>The unique ID of this workspace.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn modified(&self) -> &::aws_smithy_types::DateTime {
        &self.modified
    }
    /// <p>The name of the workspace.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the IAM role that is used to access resources through Organizations.</p>
    pub fn organization_role_name(&self) -> ::std::option::Option<&str> {
        self.organization_role_name.as_deref()
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.notification_destinations.is_none()`.
    pub fn notification_destinations(&self) -> &[crate::types::NotificationDestinationType] {
        self.notification_destinations.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.organizational_units.is_none()`.
    pub fn organizational_units(&self) -> &[::std::string::String] {
        self.organizational_units.as_deref().unwrap_or_default()
    }
    /// <p>If this is <code>SERVICE_MANAGED</code>, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If this is <code>CUSTOMER_MANAGED</code>, you must manage those roles and permissions yourself.</p>
    /// <p>If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, this parameter must be set to <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information about converting between customer and service managed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>. For more information about the roles and permissions that must be managed for customer managed workspaces, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn permission_type(&self) -> ::std::option::Option<&crate::types::PermissionType> {
        self.permission_type.as_ref()
    }
    /// <p>The name of the CloudFormation stack set that is used to generate IAM roles to be used for this workspace.</p>
    pub fn stack_set_name(&self) -> ::std::option::Option<&str> {
        self.stack_set_name.as_deref()
    }
    /// <p>The current status of the workspace.</p>
    pub fn status(&self) -> &crate::types::WorkspaceStatus {
        &self.status
    }
    /// <p>The IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. This role must already exist.</p>
    pub fn workspace_role_arn(&self) -> ::std::option::Option<&str> {
        self.workspace_role_arn.as_deref()
    }
    /// <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
    pub fn license_type(&self) -> ::std::option::Option<&crate::types::LicenseType> {
        self.license_type.as_ref()
    }
    /// <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
    pub fn free_trial_consumed(&self) -> ::std::option::Option<bool> {
        self.free_trial_consumed
    }
    /// <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and will need to be renewed.</p>
    pub fn license_expiration(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.license_expiration.as_ref()
    }
    /// <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies when that free trial ends.</p>
    pub fn free_trial_expiration(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.free_trial_expiration.as_ref()
    }
    /// <p>A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication.</p>
    pub fn authentication(&self) -> ::std::option::Option<&crate::types::AuthenticationSummary> {
        self.authentication.as_ref()
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>The configuration for connecting to data sources in a private VPC (Amazon Virtual Private Cloud).</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::VpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>The configuration settings for network access to your workspace.</p>
    pub fn network_access_control(&self) -> ::std::option::Option<&crate::types::NetworkAccessConfiguration> {
        self.network_access_control.as_ref()
    }
}
impl ::std::fmt::Debug for WorkspaceDescription {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WorkspaceDescription");
        formatter.field("account_access_type", &self.account_access_type);
        formatter.field("created", &self.created);
        formatter.field("data_sources", &self.data_sources);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoint", &self.endpoint);
        formatter.field("grafana_version", &self.grafana_version);
        formatter.field("id", &self.id);
        formatter.field("modified", &self.modified);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("organization_role_name", &"*** Sensitive Data Redacted ***");
        formatter.field("notification_destinations", &self.notification_destinations);
        formatter.field("organizational_units", &"*** Sensitive Data Redacted ***");
        formatter.field("permission_type", &self.permission_type);
        formatter.field("stack_set_name", &self.stack_set_name);
        formatter.field("status", &self.status);
        formatter.field("workspace_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("license_type", &self.license_type);
        formatter.field("free_trial_consumed", &self.free_trial_consumed);
        formatter.field("license_expiration", &self.license_expiration);
        formatter.field("free_trial_expiration", &self.free_trial_expiration);
        formatter.field("authentication", &self.authentication);
        formatter.field("tags", &self.tags);
        formatter.field("vpc_configuration", &self.vpc_configuration);
        formatter.field("network_access_control", &self.network_access_control);
        formatter.finish()
    }
}
impl WorkspaceDescription {
    /// Creates a new builder-style object to manufacture [`WorkspaceDescription`](crate::types::WorkspaceDescription).
    pub fn builder() -> crate::types::builders::WorkspaceDescriptionBuilder {
        crate::types::builders::WorkspaceDescriptionBuilder::default()
    }
}

/// A builder for [`WorkspaceDescription`](crate::types::WorkspaceDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct WorkspaceDescriptionBuilder {
    pub(crate) account_access_type: ::std::option::Option<crate::types::AccountAccessType>,
    pub(crate) created: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) data_sources: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceType>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) grafana_version: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) modified: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) organization_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) notification_destinations: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>,
    pub(crate) organizational_units: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) permission_type: ::std::option::Option<crate::types::PermissionType>,
    pub(crate) stack_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::WorkspaceStatus>,
    pub(crate) workspace_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) license_type: ::std::option::Option<crate::types::LicenseType>,
    pub(crate) free_trial_consumed: ::std::option::Option<bool>,
    pub(crate) license_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) free_trial_expiration: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) authentication: ::std::option::Option<crate::types::AuthenticationSummary>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
    pub(crate) network_access_control: ::std::option::Option<crate::types::NetworkAccessConfiguration>,
}
impl WorkspaceDescriptionBuilder {
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If this is <code>ORGANIZATION</code>, the <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units the workspace can access.</p>
    pub fn account_access_type(mut self, input: crate::types::AccountAccessType) -> Self {
        self.account_access_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If this is <code>ORGANIZATION</code>, the <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units the workspace can access.</p>
    pub fn set_account_access_type(mut self, input: ::std::option::Option<crate::types::AccountAccessType>) -> Self {
        self.account_access_type = input;
        self
    }
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If this is <code>ORGANIZATION</code>, the <code>workspaceOrganizationalUnits</code> parameter specifies which organizational units the workspace can access.</p>
    pub fn get_account_access_type(&self) -> &::std::option::Option<crate::types::AccountAccessType> {
        &self.account_access_type
    }
    /// <p>The date that the workspace was created.</p>
    /// This field is required.
    pub fn created(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date that the workspace was created.</p>
    pub fn set_created(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created = input;
        self
    }
    /// <p>The date that the workspace was created.</p>
    pub fn get_created(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created
    }
    /// Appends an item to `data_sources`.
    ///
    /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
    ///
    /// <p>Specifies the Amazon Web Services data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.</p>
    /// <p>This list is only used when the workspace was created through the Amazon Web Services console, and the <code>permissionType</code> is <code>SERVICE_MANAGED</code>.</p>
    pub fn data_sources(mut self, input: crate::types::DataSourceType) -> Self {
        let mut v = self.data_sources.unwrap_or_default();
        v.push(input);
        self.data_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Web Services data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.</p>
    /// <p>This list is only used when the workspace was created through the Amazon Web Services console, and the <code>permissionType</code> is <code>SERVICE_MANAGED</code>.</p>
    pub fn set_data_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSourceType>>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>Specifies the Amazon Web Services data sources that have been configured to have IAM roles and permissions created to allow Amazon Managed Grafana to read data from these sources.</p>
    /// <p>This list is only used when the workspace was created through the Amazon Web Services console, and the <code>permissionType</code> is <code>SERVICE_MANAGED</code>.</p>
    pub fn get_data_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSourceType>> {
        &self.data_sources
    }
    /// <p>The user-defined description of the workspace.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-defined description of the workspace.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The user-defined description of the workspace.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The URL that users can use to access the Grafana console in the workspace.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL that users can use to access the Grafana console in the workspace.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The URL that users can use to access the Grafana console in the workspace.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The version of Grafana supported in this workspace.</p>
    /// This field is required.
    pub fn grafana_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.grafana_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of Grafana supported in this workspace.</p>
    pub fn set_grafana_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.grafana_version = input;
        self
    }
    /// <p>The version of Grafana supported in this workspace.</p>
    pub fn get_grafana_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.grafana_version
    }
    /// <p>The unique ID of this workspace.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of this workspace.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique ID of this workspace.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The most recent date that the workspace was modified.</p>
    /// This field is required.
    pub fn modified(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.modified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn set_modified(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.modified = input;
        self
    }
    /// <p>The most recent date that the workspace was modified.</p>
    pub fn get_modified(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.modified
    }
    /// <p>The name of the workspace.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workspace.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the workspace.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the IAM role that is used to access resources through Organizations.</p>
    pub fn organization_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.organization_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role that is used to access resources through Organizations.</p>
    pub fn set_organization_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.organization_role_name = input;
        self
    }
    /// <p>The name of the IAM role that is used to access resources through Organizations.</p>
    pub fn get_organization_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.organization_role_name
    }
    /// Appends an item to `notification_destinations`.
    ///
    /// To override the contents of this collection use [`set_notification_destinations`](Self::set_notification_destinations).
    ///
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.</p>
    pub fn notification_destinations(mut self, input: crate::types::NotificationDestinationType) -> Self {
        let mut v = self.notification_destinations.unwrap_or_default();
        v.push(input);
        self.notification_destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.</p>
    pub fn set_notification_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>>) -> Self {
        self.notification_destinations = input;
        self
    }
    /// <p>The Amazon Web Services notification channels that Amazon Managed Grafana can automatically create IAM roles and permissions for, to allow Amazon Managed Grafana to use these channels.</p>
    pub fn get_notification_destinations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NotificationDestinationType>> {
        &self.notification_destinations
    }
    /// Appends an item to `organizational_units`.
    ///
    /// To override the contents of this collection use [`set_organizational_units`](Self::set_organizational_units).
    ///
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub fn organizational_units(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.organizational_units.unwrap_or_default();
        v.push(input.into());
        self.organizational_units = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub fn set_organizational_units(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.organizational_units = input;
        self
    }
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub fn get_organizational_units(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.organizational_units
    }
    /// <p>If this is <code>SERVICE_MANAGED</code>, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If this is <code>CUSTOMER_MANAGED</code>, you must manage those roles and permissions yourself.</p>
    /// <p>If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, this parameter must be set to <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information about converting between customer and service managed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>. For more information about the roles and permissions that must be managed for customer managed workspaces, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn permission_type(mut self, input: crate::types::PermissionType) -> Self {
        self.permission_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this is <code>SERVICE_MANAGED</code>, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If this is <code>CUSTOMER_MANAGED</code>, you must manage those roles and permissions yourself.</p>
    /// <p>If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, this parameter must be set to <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information about converting between customer and service managed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>. For more information about the roles and permissions that must be managed for customer managed workspaces, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn set_permission_type(mut self, input: ::std::option::Option<crate::types::PermissionType>) -> Self {
        self.permission_type = input;
        self
    }
    /// <p>If this is <code>SERVICE_MANAGED</code>, and the workplace was created through the Amazon Managed Grafana console, then Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If this is <code>CUSTOMER_MANAGED</code>, you must manage those roles and permissions yourself.</p>
    /// <p>If you are working with a workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, this parameter must be set to <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information about converting between customer and service managed, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-datasource-and-notification.html">Managing permissions for data sources and notification channels</a>. For more information about the roles and permissions that must be managed for customer managed workspaces, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn get_permission_type(&self) -> &::std::option::Option<crate::types::PermissionType> {
        &self.permission_type
    }
    /// <p>The name of the CloudFormation stack set that is used to generate IAM roles to be used for this workspace.</p>
    pub fn stack_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stack_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudFormation stack set that is used to generate IAM roles to be used for this workspace.</p>
    pub fn set_stack_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stack_set_name = input;
        self
    }
    /// <p>The name of the CloudFormation stack set that is used to generate IAM roles to be used for this workspace.</p>
    pub fn get_stack_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stack_set_name
    }
    /// <p>The current status of the workspace.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::WorkspaceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the workspace.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::WorkspaceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the workspace.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::WorkspaceStatus> {
        &self.status
    }
    /// <p>The IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. This role must already exist.</p>
    pub fn workspace_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. This role must already exist.</p>
    pub fn set_workspace_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_role_arn = input;
        self
    }
    /// <p>The IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. This role must already exist.</p>
    pub fn get_workspace_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_role_arn
    }
    /// <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
    pub fn license_type(mut self, input: crate::types::LicenseType) -> Self {
        self.license_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
    pub fn set_license_type(mut self, input: ::std::option::Option<crate::types::LicenseType>) -> Self {
        self.license_type = input;
        self
    }
    /// <p>Specifies whether this workspace has a full Grafana Enterprise license or a free trial license.</p>
    pub fn get_license_type(&self) -> &::std::option::Option<crate::types::LicenseType> {
        &self.license_type
    }
    /// <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
    pub fn free_trial_consumed(mut self, input: bool) -> Self {
        self.free_trial_consumed = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
    pub fn set_free_trial_consumed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.free_trial_consumed = input;
        self
    }
    /// <p>Specifies whether this workspace has already fully used its free trial for Grafana Enterprise.</p>
    pub fn get_free_trial_consumed(&self) -> &::std::option::Option<bool> {
        &self.free_trial_consumed
    }
    /// <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and will need to be renewed.</p>
    pub fn license_expiration(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.license_expiration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and will need to be renewed.</p>
    pub fn set_license_expiration(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.license_expiration = input;
        self
    }
    /// <p>If this workspace has a full Grafana Enterprise license, this specifies when the license ends and will need to be renewed.</p>
    pub fn get_license_expiration(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.license_expiration
    }
    /// <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies when that free trial ends.</p>
    pub fn free_trial_expiration(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.free_trial_expiration = ::std::option::Option::Some(input);
        self
    }
    /// <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies when that free trial ends.</p>
    pub fn set_free_trial_expiration(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.free_trial_expiration = input;
        self
    }
    /// <p>If this workspace is currently in the free trial period for Grafana Enterprise, this value specifies when that free trial ends.</p>
    pub fn get_free_trial_expiration(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.free_trial_expiration
    }
    /// <p>A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication.</p>
    /// This field is required.
    pub fn authentication(mut self, input: crate::types::AuthenticationSummary) -> Self {
        self.authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<crate::types::AuthenticationSummary>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>A structure that describes whether the workspace uses SAML, IAM Identity Center, or both methods for user authentication.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<crate::types::AuthenticationSummary> {
        &self.authentication
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of tags associated with the workspace.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of tags associated with the workspace.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>The configuration for connecting to data sources in a private VPC (Amazon Virtual Private Cloud).</p>
    pub fn vpc_configuration(mut self, input: crate::types::VpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for connecting to data sources in a private VPC (Amazon Virtual Private Cloud).</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::VpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>The configuration for connecting to data sources in a private VPC (Amazon Virtual Private Cloud).</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::VpcConfiguration> {
        &self.vpc_configuration
    }
    /// <p>The configuration settings for network access to your workspace.</p>
    pub fn network_access_control(mut self, input: crate::types::NetworkAccessConfiguration) -> Self {
        self.network_access_control = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration settings for network access to your workspace.</p>
    pub fn set_network_access_control(mut self, input: ::std::option::Option<crate::types::NetworkAccessConfiguration>) -> Self {
        self.network_access_control = input;
        self
    }
    /// <p>The configuration settings for network access to your workspace.</p>
    pub fn get_network_access_control(&self) -> &::std::option::Option<crate::types::NetworkAccessConfiguration> {
        &self.network_access_control
    }
    /// Consumes the builder and constructs a [`WorkspaceDescription`](crate::types::WorkspaceDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`created`](crate::types::builders::WorkspaceDescriptionBuilder::created)
    /// - [`data_sources`](crate::types::builders::WorkspaceDescriptionBuilder::data_sources)
    /// - [`endpoint`](crate::types::builders::WorkspaceDescriptionBuilder::endpoint)
    /// - [`grafana_version`](crate::types::builders::WorkspaceDescriptionBuilder::grafana_version)
    /// - [`id`](crate::types::builders::WorkspaceDescriptionBuilder::id)
    /// - [`modified`](crate::types::builders::WorkspaceDescriptionBuilder::modified)
    /// - [`status`](crate::types::builders::WorkspaceDescriptionBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::WorkspaceDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WorkspaceDescription {
            account_access_type: self.account_access_type,
            created: self.created.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created",
                    "created was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            data_sources: self.data_sources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_sources",
                    "data_sources was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            description: self.description,
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            grafana_version: self.grafana_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "grafana_version",
                    "grafana_version was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            modified: self.modified.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "modified",
                    "modified was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            name: self.name,
            organization_role_name: self.organization_role_name,
            notification_destinations: self.notification_destinations,
            organizational_units: self.organizational_units,
            permission_type: self.permission_type,
            stack_set_name: self.stack_set_name,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building WorkspaceDescription",
                )
            })?,
            workspace_role_arn: self.workspace_role_arn,
            license_type: self.license_type,
            free_trial_consumed: self.free_trial_consumed,
            license_expiration: self.license_expiration,
            free_trial_expiration: self.free_trial_expiration,
            authentication: self.authentication,
            tags: self.tags,
            vpc_configuration: self.vpc_configuration,
            network_access_control: self.network_access_control,
        })
    }
}
impl ::std::fmt::Debug for WorkspaceDescriptionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("WorkspaceDescriptionBuilder");
        formatter.field("account_access_type", &self.account_access_type);
        formatter.field("created", &self.created);
        formatter.field("data_sources", &self.data_sources);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("endpoint", &self.endpoint);
        formatter.field("grafana_version", &self.grafana_version);
        formatter.field("id", &self.id);
        formatter.field("modified", &self.modified);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("organization_role_name", &"*** Sensitive Data Redacted ***");
        formatter.field("notification_destinations", &self.notification_destinations);
        formatter.field("organizational_units", &"*** Sensitive Data Redacted ***");
        formatter.field("permission_type", &self.permission_type);
        formatter.field("stack_set_name", &self.stack_set_name);
        formatter.field("status", &self.status);
        formatter.field("workspace_role_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("license_type", &self.license_type);
        formatter.field("free_trial_consumed", &self.free_trial_consumed);
        formatter.field("license_expiration", &self.license_expiration);
        formatter.field("free_trial_expiration", &self.free_trial_expiration);
        formatter.field("authentication", &self.authentication);
        formatter.field("tags", &self.tags);
        formatter.field("vpc_configuration", &self.vpc_configuration);
        formatter.field("network_access_control", &self.network_access_control);
        formatter.finish()
    }
}
