// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the instructions for one Grafana role permission update in a <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateInstruction {
    /// <p>Specifies whether this update is to add or revoke role permissions.</p>
    #[doc(hidden)]
    pub action: std::option::Option<crate::types::UpdateAction>,
    /// <p>The role to add or revoke for the user or the group specified in <code>users</code>.</p>
    #[doc(hidden)]
    pub role: std::option::Option<crate::types::Role>,
    /// <p>A structure that specifies the user or group to add or revoke the role for.</p>
    #[doc(hidden)]
    pub users: std::option::Option<std::vec::Vec<crate::types::User>>,
}
impl UpdateInstruction {
    /// <p>Specifies whether this update is to add or revoke role permissions.</p>
    pub fn action(&self) -> std::option::Option<&crate::types::UpdateAction> {
        self.action.as_ref()
    }
    /// <p>The role to add or revoke for the user or the group specified in <code>users</code>.</p>
    pub fn role(&self) -> std::option::Option<&crate::types::Role> {
        self.role.as_ref()
    }
    /// <p>A structure that specifies the user or group to add or revoke the role for.</p>
    pub fn users(&self) -> std::option::Option<&[crate::types::User]> {
        self.users.as_deref()
    }
}
impl UpdateInstruction {
    /// Creates a new builder-style object to manufacture [`UpdateInstruction`](crate::types::UpdateInstruction).
    pub fn builder() -> crate::types::builders::UpdateInstructionBuilder {
        crate::types::builders::UpdateInstructionBuilder::default()
    }
}

/// A builder for [`UpdateInstruction`](crate::types::UpdateInstruction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateInstructionBuilder {
    pub(crate) action: std::option::Option<crate::types::UpdateAction>,
    pub(crate) role: std::option::Option<crate::types::Role>,
    pub(crate) users: std::option::Option<std::vec::Vec<crate::types::User>>,
}
impl UpdateInstructionBuilder {
    /// <p>Specifies whether this update is to add or revoke role permissions.</p>
    pub fn action(mut self, input: crate::types::UpdateAction) -> Self {
        self.action = Some(input);
        self
    }
    /// <p>Specifies whether this update is to add or revoke role permissions.</p>
    pub fn set_action(mut self, input: std::option::Option<crate::types::UpdateAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The role to add or revoke for the user or the group specified in <code>users</code>.</p>
    pub fn role(mut self, input: crate::types::Role) -> Self {
        self.role = Some(input);
        self
    }
    /// <p>The role to add or revoke for the user or the group specified in <code>users</code>.</p>
    pub fn set_role(mut self, input: std::option::Option<crate::types::Role>) -> Self {
        self.role = input;
        self
    }
    /// Appends an item to `users`.
    ///
    /// To override the contents of this collection use [`set_users`](Self::set_users).
    ///
    /// <p>A structure that specifies the user or group to add or revoke the role for.</p>
    pub fn users(mut self, input: crate::types::User) -> Self {
        let mut v = self.users.unwrap_or_default();
        v.push(input);
        self.users = Some(v);
        self
    }
    /// <p>A structure that specifies the user or group to add or revoke the role for.</p>
    pub fn set_users(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::User>>,
    ) -> Self {
        self.users = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateInstruction`](crate::types::UpdateInstruction).
    pub fn build(self) -> crate::types::UpdateInstruction {
        crate::types::UpdateInstruction {
            action: self.action,
            role: self.role,
            users: self.users,
        }
    }
}
