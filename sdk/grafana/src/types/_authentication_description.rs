// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure containing information about the user authentication methods used by the workspace.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthenticationDescription {
    /// <p>Specifies whether this workspace uses IAM Identity Center, SAML, or both methods to authenticate users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
    pub providers: ::std::vec::Vec<crate::types::AuthenticationProviderTypes>,
    /// <p>A structure containing information about how this workspace works with SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
    pub saml: ::std::option::Option<crate::types::SamlAuthentication>,
    /// <p>A structure containing information about how this workspace works with IAM Identity Center. </p>
    pub aws_sso: ::std::option::Option<crate::types::AwsSsoAuthentication>,
}
impl AuthenticationDescription {
    /// <p>Specifies whether this workspace uses IAM Identity Center, SAML, or both methods to authenticate users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
    pub fn providers(&self) -> &[crate::types::AuthenticationProviderTypes] {
        use std::ops::Deref;
        self.providers.deref()
    }
    /// <p>A structure containing information about how this workspace works with SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
    pub fn saml(&self) -> ::std::option::Option<&crate::types::SamlAuthentication> {
        self.saml.as_ref()
    }
    /// <p>A structure containing information about how this workspace works with IAM Identity Center. </p>
    pub fn aws_sso(&self) -> ::std::option::Option<&crate::types::AwsSsoAuthentication> {
        self.aws_sso.as_ref()
    }
}
impl AuthenticationDescription {
    /// Creates a new builder-style object to manufacture [`AuthenticationDescription`](crate::types::AuthenticationDescription).
    pub fn builder() -> crate::types::builders::AuthenticationDescriptionBuilder {
        crate::types::builders::AuthenticationDescriptionBuilder::default()
    }
}

/// A builder for [`AuthenticationDescription`](crate::types::AuthenticationDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthenticationDescriptionBuilder {
    pub(crate) providers: ::std::option::Option<::std::vec::Vec<crate::types::AuthenticationProviderTypes>>,
    pub(crate) saml: ::std::option::Option<crate::types::SamlAuthentication>,
    pub(crate) aws_sso: ::std::option::Option<crate::types::AwsSsoAuthentication>,
}
impl AuthenticationDescriptionBuilder {
    /// Appends an item to `providers`.
    ///
    /// To override the contents of this collection use [`set_providers`](Self::set_providers).
    ///
    /// <p>Specifies whether this workspace uses IAM Identity Center, SAML, or both methods to authenticate users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
    pub fn providers(mut self, input: crate::types::AuthenticationProviderTypes) -> Self {
        let mut v = self.providers.unwrap_or_default();
        v.push(input);
        self.providers = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies whether this workspace uses IAM Identity Center, SAML, or both methods to authenticate users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
    pub fn set_providers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AuthenticationProviderTypes>>) -> Self {
        self.providers = input;
        self
    }
    /// <p>Specifies whether this workspace uses IAM Identity Center, SAML, or both methods to authenticate users to use the Grafana console in the Amazon Managed Grafana workspace.</p>
    pub fn get_providers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AuthenticationProviderTypes>> {
        &self.providers
    }
    /// <p>A structure containing information about how this workspace works with SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
    pub fn saml(mut self, input: crate::types::SamlAuthentication) -> Self {
        self.saml = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing information about how this workspace works with SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
    pub fn set_saml(mut self, input: ::std::option::Option<crate::types::SamlAuthentication>) -> Self {
        self.saml = input;
        self
    }
    /// <p>A structure containing information about how this workspace works with SAML, including what attributes within the assertion are to be mapped to user information in the workspace. </p>
    pub fn get_saml(&self) -> &::std::option::Option<crate::types::SamlAuthentication> {
        &self.saml
    }
    /// <p>A structure containing information about how this workspace works with IAM Identity Center. </p>
    pub fn aws_sso(mut self, input: crate::types::AwsSsoAuthentication) -> Self {
        self.aws_sso = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure containing information about how this workspace works with IAM Identity Center. </p>
    pub fn set_aws_sso(mut self, input: ::std::option::Option<crate::types::AwsSsoAuthentication>) -> Self {
        self.aws_sso = input;
        self
    }
    /// <p>A structure containing information about how this workspace works with IAM Identity Center. </p>
    pub fn get_aws_sso(&self) -> &::std::option::Option<crate::types::AwsSsoAuthentication> {
        &self.aws_sso
    }
    /// Consumes the builder and constructs a [`AuthenticationDescription`](crate::types::AuthenticationDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`providers`](crate::types::builders::AuthenticationDescriptionBuilder::providers)
    pub fn build(self) -> ::std::result::Result<crate::types::AuthenticationDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AuthenticationDescription {
            providers: self.providers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "providers",
                    "providers was not specified but it is required when building AuthenticationDescription",
                )
            })?,
            saml: self.saml,
            aws_sso: self.aws_sso,
        })
    }
}
