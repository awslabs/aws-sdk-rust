// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_access_type {
        object.key("accountAccessType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authentication_providers {
        let mut array_3 = object.key("authenticationProviders").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.permission_type {
        object.key("permissionType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.stack_set_name {
        object.key("stackSetName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.workspace_data_sources {
        let mut array_14 = object.key("workspaceDataSources").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.workspace_description {
        object.key("workspaceDescription").string(var_16.as_str());
    }
    if let Some(var_17) = &input.workspace_name {
        object.key("workspaceName").string(var_17.as_str());
    }
    if let Some(var_18) = &input.workspace_notification_destinations {
        let mut array_19 = object
            .key("workspaceNotificationDestinations")
            .start_array();
        for item_20 in var_18 {
            {
                array_19.value().string(item_20.as_str());
            }
        }
        array_19.finish();
    }
    if let Some(var_21) = &input.workspace_organizational_units {
        let mut array_22 = object.key("workspaceOrganizationalUnits").start_array();
        for item_23 in var_21 {
            {
                array_22.value().string(item_23.as_str());
            }
        }
        array_22.finish();
    }
    if let Some(var_24) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_24.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.update_instruction_batch {
        let mut array_30 = object.key("updateInstructionBatch").start_array();
        for item_31 in var_29 {
            {
                let mut object_32 = array_30.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_instruction(
                    &mut object_32,
                    item_31,
                )?;
                object_32.finish();
            }
        }
        array_30.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_33) = &input.account_access_type {
        object.key("accountAccessType").string(var_33.as_str());
    }
    if let Some(var_34) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_34.as_str());
    }
    if let Some(var_35) = &input.permission_type {
        object.key("permissionType").string(var_35.as_str());
    }
    if let Some(var_36) = &input.stack_set_name {
        object.key("stackSetName").string(var_36.as_str());
    }
    if let Some(var_37) = &input.workspace_data_sources {
        let mut array_38 = object.key("workspaceDataSources").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39.as_str());
            }
        }
        array_38.finish();
    }
    if let Some(var_40) = &input.workspace_description {
        object.key("workspaceDescription").string(var_40.as_str());
    }
    if let Some(var_41) = &input.workspace_name {
        object.key("workspaceName").string(var_41.as_str());
    }
    if let Some(var_42) = &input.workspace_notification_destinations {
        let mut array_43 = object
            .key("workspaceNotificationDestinations")
            .start_array();
        for item_44 in var_42 {
            {
                array_43.value().string(item_44.as_str());
            }
        }
        array_43.finish();
    }
    if let Some(var_45) = &input.workspace_organizational_units {
        let mut array_46 = object.key("workspaceOrganizationalUnits").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47.as_str());
            }
        }
        array_46.finish();
    }
    if let Some(var_48) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_authentication_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceAuthenticationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.authentication_providers {
        let mut array_50 = object.key("authenticationProviders").start_array();
        for item_51 in var_49 {
            {
                array_50.value().string(item_51.as_str());
            }
        }
        array_50.finish();
    }
    if let Some(var_52) = &input.saml_configuration {
        let mut object_53 = object.key("samlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_saml_configuration(
            &mut object_53,
            var_52,
        )?;
        object_53.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_instruction(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateInstruction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.action {
        object.key("action").string(var_54.as_str());
    }
    if let Some(var_55) = &input.role {
        object.key("role").string(var_55.as_str());
    }
    if let Some(var_56) = &input.users {
        let mut array_57 = object.key("users").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user(&mut object_59, item_58)?;
                object_59.finish();
            }
        }
        array_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saml_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SamlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.idp_metadata {
        let mut object_61 = object.key("idpMetadata").start_object();
        crate::json_ser::serialize_union_crate_model_idp_metadata(&mut object_61, var_60)?;
        object_61.finish();
    }
    if let Some(var_62) = &input.assertion_attributes {
        let mut object_63 = object.key("assertionAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_assertion_attributes(
            &mut object_63,
            var_62,
        )?;
        object_63.finish();
    }
    if let Some(var_64) = &input.role_values {
        let mut object_65 = object.key("roleValues").start_object();
        crate::json_ser::serialize_structure_crate_model_role_values(&mut object_65, var_64)?;
        object_65.finish();
    }
    if let Some(var_66) = &input.allowed_organizations {
        let mut array_67 = object.key("allowedOrganizations").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68.as_str());
            }
        }
        array_67.finish();
    }
    if input.login_validity_duration != 0 {
        object.key("loginValidityDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.login_validity_duration).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::User,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.id {
        object.key("id").string(var_69.as_str());
    }
    if let Some(var_70) = &input.r#type {
        object.key("type").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_idp_metadata(
    object_61: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdpMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::IdpMetadata::Url(inner) => {
            object_61.key("url").string(inner.as_str());
        }
        crate::model::IdpMetadata::Xml(inner) => {
            object_61.key("xml").string(inner.as_str());
        }
        crate::model::IdpMetadata::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("IdpMetadata"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_assertion_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssertionAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.name {
        object.key("name").string(var_71.as_str());
    }
    if let Some(var_72) = &input.login {
        object.key("login").string(var_72.as_str());
    }
    if let Some(var_73) = &input.email {
        object.key("email").string(var_73.as_str());
    }
    if let Some(var_74) = &input.groups {
        object.key("groups").string(var_74.as_str());
    }
    if let Some(var_75) = &input.role {
        object.key("role").string(var_75.as_str());
    }
    if let Some(var_76) = &input.org {
        object.key("org").string(var_76.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_role_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoleValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_77) = &input.editor {
        let mut array_78 = object.key("editor").start_array();
        for item_79 in var_77 {
            {
                array_78.value().string(item_79.as_str());
            }
        }
        array_78.finish();
    }
    if let Some(var_80) = &input.admin {
        let mut array_81 = object.key("admin").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}
