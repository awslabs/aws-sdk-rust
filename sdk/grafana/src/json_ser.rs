// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.account_access_type {
        object.key("accountAccessType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authentication_providers {
        let mut array_3 = object.key("authenticationProviders").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5);
    }
    if let Some(var_6) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_6);
    }
    if let Some(var_7) = &input.permission_type {
        object.key("permissionType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.stack_set_name {
        object.key("stackSetName").string(var_8);
    }
    if let Some(var_9) = &input.workspace_data_sources {
        let mut array_10 = object.key("workspaceDataSources").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.workspace_description {
        object.key("workspaceDescription").string(var_12);
    }
    if let Some(var_13) = &input.workspace_name {
        object.key("workspaceName").string(var_13);
    }
    if let Some(var_14) = &input.workspace_notification_destinations {
        let mut array_15 = object
            .key("workspaceNotificationDestinations")
            .start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.workspace_organizational_units {
        let mut array_18 = object.key("workspaceOrganizationalUnits").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19);
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_20);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_permissions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePermissionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.update_instruction_batch {
        let mut array_22 = object.key("updateInstructionBatch").start_array();
        for item_23 in var_21 {
            {
                let mut object_24 = array_22.value().start_object();
                crate::json_ser::serialize_structure_crate_model_update_instruction(
                    &mut object_24,
                    item_23,
                )?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_25) = &input.account_access_type {
        object.key("accountAccessType").string(var_25.as_str());
    }
    if let Some(var_26) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_26);
    }
    if let Some(var_27) = &input.permission_type {
        object.key("permissionType").string(var_27.as_str());
    }
    if let Some(var_28) = &input.stack_set_name {
        object.key("stackSetName").string(var_28);
    }
    if let Some(var_29) = &input.workspace_data_sources {
        let mut array_30 = object.key("workspaceDataSources").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    if let Some(var_32) = &input.workspace_description {
        object.key("workspaceDescription").string(var_32);
    }
    if let Some(var_33) = &input.workspace_name {
        object.key("workspaceName").string(var_33);
    }
    if let Some(var_34) = &input.workspace_notification_destinations {
        let mut array_35 = object
            .key("workspaceNotificationDestinations")
            .start_array();
        for item_36 in var_34 {
            {
                array_35.value().string(item_36.as_str());
            }
        }
        array_35.finish();
    }
    if let Some(var_37) = &input.workspace_organizational_units {
        let mut array_38 = object.key("workspaceOrganizationalUnits").start_array();
        for item_39 in var_37 {
            {
                array_38.value().string(item_39);
            }
        }
        array_38.finish();
    }
    if let Some(var_40) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_40);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_workspace_authentication_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorkspaceAuthenticationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.authentication_providers {
        let mut array_42 = object.key("authenticationProviders").start_array();
        for item_43 in var_41 {
            {
                array_42.value().string(item_43.as_str());
            }
        }
        array_42.finish();
    }
    if let Some(var_44) = &input.saml_configuration {
        let mut object_45 = object.key("samlConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_saml_configuration(
            &mut object_45,
            var_44,
        )?;
        object_45.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_update_instruction(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateInstruction,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.action {
        object.key("action").string(var_46.as_str());
    }
    if let Some(var_47) = &input.role {
        object.key("role").string(var_47.as_str());
    }
    if let Some(var_48) = &input.users {
        let mut array_49 = object.key("users").start_array();
        for item_50 in var_48 {
            {
                let mut object_51 = array_49.value().start_object();
                crate::json_ser::serialize_structure_crate_model_user(&mut object_51, item_50)?;
                object_51.finish();
            }
        }
        array_49.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_saml_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SamlConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.idp_metadata {
        let mut object_53 = object.key("idpMetadata").start_object();
        crate::json_ser::serialize_union_crate_model_idp_metadata(&mut object_53, var_52)?;
        object_53.finish();
    }
    if let Some(var_54) = &input.assertion_attributes {
        let mut object_55 = object.key("assertionAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_assertion_attributes(
            &mut object_55,
            var_54,
        )?;
        object_55.finish();
    }
    if let Some(var_56) = &input.role_values {
        let mut object_57 = object.key("roleValues").start_object();
        crate::json_ser::serialize_structure_crate_model_role_values(&mut object_57, var_56)?;
        object_57.finish();
    }
    if let Some(var_58) = &input.allowed_organizations {
        let mut array_59 = object.key("allowedOrganizations").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if input.login_validity_duration != 0 {
        object.key("loginValidityDuration").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.login_validity_duration).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_user(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::User,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_61) = &input.id {
        object.key("id").string(var_61);
    }
    if let Some(var_62) = &input.r#type {
        object.key("type").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_union_crate_model_idp_metadata(
    object_53: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdpMetadata,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    match input {
        crate::model::IdpMetadata::Url(inner) => {
            object_53.key("url").string(inner);
        }
        crate::model::IdpMetadata::Xml(inner) => {
            object_53.key("xml").string(inner);
        }
        crate::model::IdpMetadata::Unknown => {
            return Err(
                aws_smithy_http::operation::SerializationError::unknown_variant("IdpMetadata"),
            )
        }
    }
    Ok(())
}

pub fn serialize_structure_crate_model_assertion_attributes(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AssertionAttributes,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.name {
        object.key("name").string(var_63);
    }
    if let Some(var_64) = &input.login {
        object.key("login").string(var_64);
    }
    if let Some(var_65) = &input.email {
        object.key("email").string(var_65);
    }
    if let Some(var_66) = &input.groups {
        object.key("groups").string(var_66);
    }
    if let Some(var_67) = &input.role {
        object.key("role").string(var_67);
    }
    if let Some(var_68) = &input.org {
        object.key("org").string(var_68);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_role_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RoleValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.editor {
        let mut array_70 = object.key("editor").start_array();
        for item_71 in var_69 {
            {
                array_70.value().string(item_71);
            }
        }
        array_70.finish();
    }
    if let Some(var_72) = &input.admin {
        let mut array_73 = object.key("admin").start_array();
        for item_74 in var_72 {
            {
                array_73.value().string(item_74);
            }
        }
        array_73.finish();
    }
    Ok(())
}
