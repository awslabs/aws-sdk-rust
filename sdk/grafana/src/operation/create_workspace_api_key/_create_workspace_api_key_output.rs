// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateWorkspaceApiKeyOutput {
    /// <p>The name of the key that was created.</p>
    pub key_name: ::std::string::String,
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    pub key: ::std::string::String,
    /// <p>The ID of the workspace that the key is valid for.</p>
    pub workspace_id: ::std::string::String,
    _request_id: Option<String>,
}
impl CreateWorkspaceApiKeyOutput {
    /// <p>The name of the key that was created.</p>
    pub fn key_name(&self) -> &str {
        use std::ops::Deref;
        self.key_name.deref()
    }
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    pub fn key(&self) -> &str {
        use std::ops::Deref;
        self.key.deref()
    }
    /// <p>The ID of the workspace that the key is valid for.</p>
    pub fn workspace_id(&self) -> &str {
        use std::ops::Deref;
        self.workspace_id.deref()
    }
}
impl ::std::fmt::Debug for CreateWorkspaceApiKeyOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkspaceApiKeyOutput");
        formatter.field("key_name", &self.key_name);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("workspace_id", &self.workspace_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for CreateWorkspaceApiKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorkspaceApiKeyOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceApiKeyOutput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyOutput).
    pub fn builder() -> crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder {
        crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder::default()
    }
}

/// A builder for [`CreateWorkspaceApiKeyOutput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateWorkspaceApiKeyOutputBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) key: ::std::option::Option<::std::string::String>,
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkspaceApiKeyOutputBuilder {
    /// <p>The name of the key that was created.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the key that was created.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the key that was created.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    /// This field is required.
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.key
    }
    /// <p>The ID of the workspace that the key is valid for.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace that the key is valid for.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace that the key is valid for.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorkspaceApiKeyOutput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_name`](crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder::key_name)
    /// - [`key`](crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder::key)
    /// - [`workspace_id`](crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyOutputBuilder::workspace_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyOutput {
            key_name: self.key_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_name",
                    "key_name was not specified but it is required when building CreateWorkspaceApiKeyOutput",
                )
            })?,
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building CreateWorkspaceApiKeyOutput",
                )
            })?,
            workspace_id: self.workspace_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "workspace_id",
                    "workspace_id was not specified but it is required when building CreateWorkspaceApiKeyOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for CreateWorkspaceApiKeyOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkspaceApiKeyOutputBuilder");
        formatter.field("key_name", &self.key_name);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("workspace_id", &self.workspace_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
