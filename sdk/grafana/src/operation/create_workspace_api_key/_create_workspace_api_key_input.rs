// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateWorkspaceApiKeyInput {
    /// <p>Specifies the name of the key. Keynames must be unique to the workspace.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the permission level of the key.</p>
    /// <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
    pub key_role: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.</p>
    pub seconds_to_live: ::std::option::Option<i32>,
    /// <p>The ID of the workspace to create an API key.</p>
    pub workspace_id: ::std::option::Option<::std::string::String>,
}
impl CreateWorkspaceApiKeyInput {
    /// <p>Specifies the name of the key. Keynames must be unique to the workspace.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>Specifies the permission level of the key.</p>
    /// <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
    pub fn key_role(&self) -> ::std::option::Option<&str> {
        self.key_role.as_deref()
    }
    /// <p>Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.</p>
    pub fn seconds_to_live(&self) -> ::std::option::Option<i32> {
        self.seconds_to_live
    }
    /// <p>The ID of the workspace to create an API key.</p>
    pub fn workspace_id(&self) -> ::std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
}
impl CreateWorkspaceApiKeyInput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceApiKeyInput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyInput).
    pub fn builder() -> crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyInputBuilder {
        crate::operation::create_workspace_api_key::builders::CreateWorkspaceApiKeyInputBuilder::default()
    }
}

/// A builder for [`CreateWorkspaceApiKeyInput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateWorkspaceApiKeyInputBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) key_role: ::std::option::Option<::std::string::String>,
    pub(crate) seconds_to_live: ::std::option::Option<i32>,
    pub(crate) workspace_id: ::std::option::Option<::std::string::String>,
}
impl CreateWorkspaceApiKeyInputBuilder {
    /// <p>Specifies the name of the key. Keynames must be unique to the workspace.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the key. Keynames must be unique to the workspace.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>Specifies the name of the key. Keynames must be unique to the workspace.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>Specifies the permission level of the key.</p>
    /// <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
    /// This field is required.
    pub fn key_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the permission level of the key.</p>
    /// <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
    pub fn set_key_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_role = input;
        self
    }
    /// <p>Specifies the permission level of the key.</p>
    /// <p> Valid values: <code>VIEWER</code>|<code>EDITOR</code>|<code>ADMIN</code> </p>
    pub fn get_key_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_role
    }
    /// <p>Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.</p>
    /// This field is required.
    pub fn seconds_to_live(mut self, input: i32) -> Self {
        self.seconds_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.</p>
    pub fn set_seconds_to_live(mut self, input: ::std::option::Option<i32>) -> Self {
        self.seconds_to_live = input;
        self
    }
    /// <p>Specifies the time in seconds until the key expires. Keys can be valid for up to 30 days.</p>
    pub fn get_seconds_to_live(&self) -> &::std::option::Option<i32> {
        &self.seconds_to_live
    }
    /// <p>The ID of the workspace to create an API key.</p>
    /// This field is required.
    pub fn workspace_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workspace_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the workspace to create an API key.</p>
    pub fn set_workspace_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// <p>The ID of the workspace to create an API key.</p>
    pub fn get_workspace_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.workspace_id
    }
    /// Consumes the builder and constructs a [`CreateWorkspaceApiKeyInput`](crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_workspace_api_key::CreateWorkspaceApiKeyInput {
            key_name: self.key_name,
            key_role: self.key_role,
            seconds_to_live: self.seconds_to_live,
            workspace_id: self.workspace_id,
        })
    }
}
