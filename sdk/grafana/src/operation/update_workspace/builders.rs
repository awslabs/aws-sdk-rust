// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_workspace::_update_workspace_output::UpdateWorkspaceOutputBuilder;

pub use crate::operation::update_workspace::_update_workspace_input::UpdateWorkspaceInputBuilder;

/// Fluent builder constructing a request to `UpdateWorkspace`.
///
/// <p>Modifies an existing Amazon Managed Grafana workspace. If you use this operation and omit any optional parameters, the existing values of those parameters are not changed.</p>
/// <p>To modify the user authentication methods that the workspace uses, such as SAML or IAM Identity Center, use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdateWorkspaceAuthentication.html">UpdateWorkspaceAuthentication</a>.</p>
/// <p>To modify which users in the workspace have the <code>Admin</code> and <code>Editor</code> Grafana roles, use <a href="https://docs.aws.amazon.com/grafana/latest/APIReference/API_UpdatePermissions.html">UpdatePermissions</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkspaceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_workspace::builders::UpdateWorkspaceInputBuilder,
}
impl UpdateWorkspaceFluentBuilder {
    /// Creates a new `UpdateWorkspace`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_workspace::UpdateWorkspace,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_workspace::UpdateWorkspaceOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_workspace::UpdateWorkspaceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.</p>
    pub fn account_access_type(mut self, input: crate::types::AccountAccessType) -> Self {
        self.inner = self.inner.account_access_type(input);
        self
    }
    /// <p>Specifies whether the workspace can access Amazon Web Services resources in this Amazon Web Services account only, or whether it can also access Amazon Web Services resources in other accounts in the same organization. If you specify <code>ORGANIZATION</code>, you must specify which organizational units the workspace can access in the <code>workspaceOrganizationalUnits</code> parameter.</p>
    pub fn set_account_access_type(
        mut self,
        input: std::option::Option<crate::types::AccountAccessType>,
    ) -> Self {
        self.inner = self.inner.set_account_access_type(input);
        self
    }
    /// <p>The name of an IAM role that already exists to use to access resources through Organizations.</p>
    pub fn organization_role_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.organization_role_name(input.into());
        self
    }
    /// <p>The name of an IAM role that already exists to use to access resources through Organizations.</p>
    pub fn set_organization_role_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_organization_role_name(input);
        self
    }
    /// <p>If you specify <code>Service Managed</code>, Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If you specify <code>CUSTOMER_MANAGED</code>, you will manage those roles and permissions yourself. If you are creating this workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn permission_type(mut self, input: crate::types::PermissionType) -> Self {
        self.inner = self.inner.permission_type(input);
        self
    }
    /// <p>If you specify <code>Service Managed</code>, Amazon Managed Grafana automatically creates the IAM roles and provisions the permissions that the workspace needs to use Amazon Web Services data sources and notification channels.</p>
    /// <p>If you specify <code>CUSTOMER_MANAGED</code>, you will manage those roles and permissions yourself. If you are creating this workspace in a member account of an organization and that account is not a delegated administrator account, and you want the workspace to access data sources in other Amazon Web Services accounts in the organization, you must choose <code>CUSTOMER_MANAGED</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-manage-permissions.html">Amazon Managed Grafana permissions and policies for Amazon Web Services data sources and notification channels</a> </p>
    pub fn set_permission_type(
        mut self,
        input: std::option::Option<crate::types::PermissionType>,
    ) -> Self {
        self.inner = self.inner.set_permission_type(input);
        self
    }
    /// <p>The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.</p>
    pub fn stack_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stack_set_name(input.into());
        self
    }
    /// <p>The name of the CloudFormation stack set to use to generate IAM roles to be used for this workspace.</p>
    pub fn set_stack_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stack_set_name(input);
        self
    }
    /// Appends an item to `workspaceDataSources`.
    ///
    /// To override the contents of this collection use [`set_workspace_data_sources`](Self::set_workspace_data_sources).
    ///
    /// <p>Specify the Amazon Web Services data sources that you want to be queried in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to read data from these sources. You must still add them as data sources in the Grafana console in the workspace.</p>
    /// <p>If you don't specify a data source here, you can still add it as a data source later in the workspace console. However, you will then have to manually configure permissions for it.</p>
    pub fn workspace_data_sources(mut self, input: crate::types::DataSourceType) -> Self {
        self.inner = self.inner.workspace_data_sources(input);
        self
    }
    /// <p>Specify the Amazon Web Services data sources that you want to be queried in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to read data from these sources. You must still add them as data sources in the Grafana console in the workspace.</p>
    /// <p>If you don't specify a data source here, you can still add it as a data source later in the workspace console. However, you will then have to manually configure permissions for it.</p>
    pub fn set_workspace_data_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceType>>,
    ) -> Self {
        self.inner = self.inner.set_workspace_data_sources(input);
        self
    }
    /// <p>A description for the workspace. This is used only to help you identify this workspace.</p>
    pub fn workspace_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_description(input.into());
        self
    }
    /// <p>A description for the workspace. This is used only to help you identify this workspace.</p>
    pub fn set_workspace_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_workspace_description(input);
        self
    }
    /// <p>The ID of the workspace to update.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace to update.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// <p>A new name for the workspace to update.</p>
    pub fn workspace_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_name(input.into());
        self
    }
    /// <p>A new name for the workspace to update.</p>
    pub fn set_workspace_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_name(input);
        self
    }
    /// Appends an item to `workspaceNotificationDestinations`.
    ///
    /// To override the contents of this collection use [`set_workspace_notification_destinations`](Self::set_workspace_notification_destinations).
    ///
    /// <p>Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.</p>
    pub fn workspace_notification_destinations(
        mut self,
        input: crate::types::NotificationDestinationType,
    ) -> Self {
        self.inner = self.inner.workspace_notification_destinations(input);
        self
    }
    /// <p>Specify the Amazon Web Services notification channels that you plan to use in this workspace. Specifying these data sources here enables Amazon Managed Grafana to create IAM roles and permissions that allow Amazon Managed Grafana to use these channels.</p>
    pub fn set_workspace_notification_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotificationDestinationType>>,
    ) -> Self {
        self.inner = self.inner.set_workspace_notification_destinations(input);
        self
    }
    /// Appends an item to `workspaceOrganizationalUnits`.
    ///
    /// To override the contents of this collection use [`set_workspace_organizational_units`](Self::set_workspace_organizational_units).
    ///
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub fn workspace_organizational_units(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_organizational_units(input.into());
        self
    }
    /// <p>Specifies the organizational units that this workspace is allowed to use data sources from, if this workspace is in an account that is part of an organization.</p>
    pub fn set_workspace_organizational_units(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_workspace_organizational_units(input);
        self
    }
    /// <p>The workspace needs an IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. If you already have a role that you want to use, specify it here. If you omit this field and you specify some Amazon Web Services resources in <code>workspaceDataSources</code> or <code>workspaceNotificationDestinations</code>, a new IAM role with the necessary permissions is automatically created.</p>
    pub fn workspace_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_role_arn(input.into());
        self
    }
    /// <p>The workspace needs an IAM role that grants permissions to the Amazon Web Services resources that the workspace will view data from. If you already have a role that you want to use, specify it here. If you omit this field and you specify some Amazon Web Services resources in <code>workspaceDataSources</code> or <code>workspaceNotificationDestinations</code>, a new IAM role with the necessary permissions is automatically created.</p>
    pub fn set_workspace_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_workspace_role_arn(input);
        self
    }
    /// <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p>
    pub fn vpc_configuration(mut self, input: crate::types::VpcConfiguration) -> Self {
        self.inner = self.inner.vpc_configuration(input);
        self
    }
    /// <p>The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to.</p>
    pub fn set_vpc_configuration(
        mut self,
        input: std::option::Option<crate::types::VpcConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_vpc_configuration(input);
        self
    }
    /// <p>Whether to remove the VPC configuration from the workspace.</p>
    /// <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>
    pub fn remove_vpc_configuration(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_vpc_configuration(input);
        self
    }
    /// <p>Whether to remove the VPC configuration from the workspace.</p>
    /// <p>Setting this to <code>true</code> and providing a <code>vpcConfiguration</code> to set will return an error.</p>
    pub fn set_remove_vpc_configuration(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_vpc_configuration(input);
        self
    }
}
