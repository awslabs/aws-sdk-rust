// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_workspace_authentication::_update_workspace_authentication_output::UpdateWorkspaceAuthenticationOutputBuilder;

pub use crate::operation::update_workspace_authentication::_update_workspace_authentication_input::UpdateWorkspaceAuthenticationInputBuilder;

/// Fluent builder constructing a request to `UpdateWorkspaceAuthentication`.
///
/// <p>Use this operation to define the identity provider (IdP) that this workspace authenticates users from, using SAML. You can also map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateWorkspaceAuthenticationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_workspace_authentication::builders::UpdateWorkspaceAuthenticationInputBuilder
            }
impl UpdateWorkspaceAuthenticationFluentBuilder {
    /// Creates a new `UpdateWorkspaceAuthentication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_workspace_authentication::UpdateWorkspaceAuthentication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the workspace to update the authentication for.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.workspace_id(input.into());
        self
    }
    /// <p>The ID of the workspace to update the authentication for.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_workspace_id(input);
        self
    }
    /// Appends an item to `authenticationProviders`.
    ///
    /// To override the contents of this collection use [`set_authentication_providers`](Self::set_authentication_providers).
    ///
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    pub fn authentication_providers(
        mut self,
        input: crate::types::AuthenticationProviderTypes,
    ) -> Self {
        self.inner = self.inner.authentication_providers(input);
        self
    }
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    pub fn set_authentication_providers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AuthenticationProviderTypes>>,
    ) -> Self {
        self.inner = self.inner.set_authentication_providers(input);
        self
    }
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    pub fn saml_configuration(mut self, input: crate::types::SamlConfiguration) -> Self {
        self.inner = self.inner.saml_configuration(input);
        self
    }
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    pub fn set_saml_configuration(
        mut self,
        input: std::option::Option<crate::types::SamlConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_saml_configuration(input);
        self
    }
}
