// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceAuthenticationInput {
    /// <p>The ID of the workspace to update the authentication for.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    #[doc(hidden)]
    pub authentication_providers:
        std::option::Option<std::vec::Vec<crate::types::AuthenticationProviderTypes>>,
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    #[doc(hidden)]
    pub saml_configuration: std::option::Option<crate::types::SamlConfiguration>,
}
impl UpdateWorkspaceAuthenticationInput {
    /// <p>The ID of the workspace to update the authentication for.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    pub fn authentication_providers(
        &self,
    ) -> std::option::Option<&[crate::types::AuthenticationProviderTypes]> {
        self.authentication_providers.as_deref()
    }
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    pub fn saml_configuration(&self) -> std::option::Option<&crate::types::SamlConfiguration> {
        self.saml_configuration.as_ref()
    }
}
impl UpdateWorkspaceAuthenticationInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceAuthenticationInput`](crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationInput).
    pub fn builder() -> crate::operation::update_workspace_authentication::builders::UpdateWorkspaceAuthenticationInputBuilder{
        crate::operation::update_workspace_authentication::builders::UpdateWorkspaceAuthenticationInputBuilder::default()
    }
}

/// A builder for [`UpdateWorkspaceAuthenticationInput`](crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkspaceAuthenticationInputBuilder {
    pub(crate) workspace_id: std::option::Option<std::string::String>,
    pub(crate) authentication_providers:
        std::option::Option<std::vec::Vec<crate::types::AuthenticationProviderTypes>>,
    pub(crate) saml_configuration: std::option::Option<crate::types::SamlConfiguration>,
}
impl UpdateWorkspaceAuthenticationInputBuilder {
    /// <p>The ID of the workspace to update the authentication for.</p>
    pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.workspace_id = Some(input.into());
        self
    }
    /// <p>The ID of the workspace to update the authentication for.</p>
    pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.workspace_id = input;
        self
    }
    /// Appends an item to `authentication_providers`.
    ///
    /// To override the contents of this collection use [`set_authentication_providers`](Self::set_authentication_providers).
    ///
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    pub fn authentication_providers(
        mut self,
        input: crate::types::AuthenticationProviderTypes,
    ) -> Self {
        let mut v = self.authentication_providers.unwrap_or_default();
        v.push(input);
        self.authentication_providers = Some(v);
        self
    }
    /// <p>Specifies whether this workspace uses SAML 2.0, IAM Identity Center (successor to Single Sign-On), or both to authenticate users for using the Grafana console within a workspace. For more information, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/authentication-in-AMG.html">User authentication in Amazon Managed Grafana</a>.</p>
    pub fn set_authentication_providers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AuthenticationProviderTypes>>,
    ) -> Self {
        self.authentication_providers = input;
        self
    }
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    pub fn saml_configuration(mut self, input: crate::types::SamlConfiguration) -> Self {
        self.saml_configuration = Some(input);
        self
    }
    /// <p>If the workspace uses SAML, use this structure to map SAML assertion attributes to workspace user information and define which groups in the assertion attribute are to have the <code>Admin</code> and <code>Editor</code> roles in the workspace.</p>
    pub fn set_saml_configuration(
        mut self,
        input: std::option::Option<crate::types::SamlConfiguration>,
    ) -> Self {
        self.saml_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateWorkspaceAuthenticationInput`](crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_workspace_authentication::UpdateWorkspaceAuthenticationInput {
                workspace_id: self.workspace_id,
                authentication_providers: self.authentication_providers,
                saml_configuration: self.saml_configuration,
            },
        )
    }
}
