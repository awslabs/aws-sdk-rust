// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_workspace_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_workspace::CreateWorkspaceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.account_access_type {
        object.key("accountAccessType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authentication_providers {
        let mut array_3 = object.key("authenticationProviders").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.client_token {
        object.key("clientToken").string(var_5.as_str());
    }
    if let Some(var_6) = &input.configuration {
        object.key("configuration").string(var_6.as_str());
    }
    if let Some(var_7) = &input.grafana_version {
        object.key("grafanaVersion").string(var_7.as_str());
    }
    if let Some(var_8) = &input.network_access_control {
        #[allow(unused_mut)]
        let mut object_9 = object.key("networkAccessControl").start_object();
        crate::protocol_serde::shape_network_access_configuration::ser_network_access_configuration(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.organization_role_name {
        object.key("organizationRoleName").string(var_10.as_str());
    }
    if let Some(var_11) = &input.permission_type {
        object.key("permissionType").string(var_11.as_str());
    }
    if let Some(var_12) = &input.stack_set_name {
        object.key("stackSetName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.tags {
        #[allow(unused_mut)]
        let mut object_14 = object.key("tags").start_object();
        for (key_15, value_16) in var_13 {
            {
                object_14.key(key_15.as_str()).string(value_16.as_str());
            }
        }
        object_14.finish();
    }
    if let Some(var_17) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("vpcConfiguration").start_object();
        crate::protocol_serde::shape_vpc_configuration::ser_vpc_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.workspace_data_sources {
        let mut array_20 = object.key("workspaceDataSources").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.workspace_description {
        object.key("workspaceDescription").string(var_22.as_str());
    }
    if let Some(var_23) = &input.workspace_name {
        object.key("workspaceName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.workspace_notification_destinations {
        let mut array_25 = object.key("workspaceNotificationDestinations").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.workspace_organizational_units {
        let mut array_28 = object.key("workspaceOrganizationalUnits").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.workspace_role_arn {
        object.key("workspaceRoleArn").string(var_30.as_str());
    }
    Ok(())
}
