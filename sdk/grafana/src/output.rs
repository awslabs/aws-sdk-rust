// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorkspacesOutput {
    /// <p>An array of structures that contain some information about the workspaces in the account.</p>
    #[doc(hidden)]
    pub workspaces: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
    /// <p>The token to use when requesting the next set of workspaces.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorkspacesOutput {
    /// <p>An array of structures that contain some information about the workspaces in the account.</p>
    pub fn workspaces(&self) -> std::option::Option<&[crate::model::WorkspaceSummary]> {
        self.workspaces.as_deref()
    }
    /// <p>The token to use when requesting the next set of workspaces.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorkspacesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
pub mod list_workspaces_output {

    /// A builder for [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspaces: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `workspaces`.
        ///
        /// To override the contents of this collection use [`set_workspaces`](Self::set_workspaces).
        ///
        /// <p>An array of structures that contain some information about the workspaces in the account.</p>
        pub fn workspaces(mut self, input: crate::model::WorkspaceSummary) -> Self {
            let mut v = self.workspaces.unwrap_or_default();
            v.push(input);
            self.workspaces = Some(v);
            self
        }
        /// <p>An array of structures that contain some information about the workspaces in the account.</p>
        pub fn set_workspaces(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::WorkspaceSummary>>,
        ) -> Self {
            self.workspaces = input;
            self
        }
        /// <p>The token to use when requesting the next set of workspaces.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use when requesting the next set of workspaces.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
        pub fn build(self) -> crate::output::ListWorkspacesOutput {
            crate::output::ListWorkspacesOutput {
                workspaces: self.workspaces,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListWorkspacesOutput {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesOutput`](crate::output::ListWorkspacesOutput).
    pub fn builder() -> crate::output::list_workspaces_output::Builder {
        crate::output::list_workspaces_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorkspaceOutput {
    /// <p>A structure containing data about the workspace that was created.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl CreateWorkspaceOutput {
    /// <p>A structure containing data about the workspace that was created.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
pub mod create_workspace_output {

    /// A builder for [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing data about the workspace that was created.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing data about the workspace that was created.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
        pub fn build(self) -> crate::output::CreateWorkspaceOutput {
            crate::output::CreateWorkspaceOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceOutput`](crate::output::CreateWorkspaceOutput).
    pub fn builder() -> crate::output::create_workspace_output::Builder {
        crate::output::create_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkspaceOutput {
    /// <p>A structure containing information about the workspace that was deleted.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl DeleteWorkspaceOutput {
    /// <p>A structure containing information about the workspace that was deleted.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
pub mod delete_workspace_output {

    /// A builder for [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing information about the workspace that was deleted.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing information about the workspace that was deleted.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
        pub fn build(self) -> crate::output::DeleteWorkspaceOutput {
            crate::output::DeleteWorkspaceOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceOutput`](crate::output::DeleteWorkspaceOutput).
    pub fn builder() -> crate::output::delete_workspace_output::Builder {
        crate::output::delete_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceOutput {
    /// <p>A structure containing data about the workspace that was created.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl UpdateWorkspaceOutput {
    /// <p>A structure containing data about the workspace that was created.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
pub mod update_workspace_output {

    /// A builder for [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing data about the workspace that was created.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing data about the workspace that was created.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
        pub fn build(self) -> crate::output::UpdateWorkspaceOutput {
            crate::output::UpdateWorkspaceOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceOutput`](crate::output::UpdateWorkspaceOutput).
    pub fn builder() -> crate::output::update_workspace_output::Builder {
        crate::output::update_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorkspaceOutput {
    /// <p>A structure containing information about the workspace.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl DescribeWorkspaceOutput {
    /// <p>A structure containing information about the workspace.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeWorkspaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
pub mod describe_workspace_output {

    /// A builder for [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing information about the workspace.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing information about the workspace.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
        pub fn build(self) -> crate::output::DescribeWorkspaceOutput {
            crate::output::DescribeWorkspaceOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeWorkspaceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceOutput`](crate::output::DescribeWorkspaceOutput).
    pub fn builder() -> crate::output::describe_workspace_output::Builder {
        crate::output::describe_workspace_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePermissionsOutput {
    /// <p>An array of structures that contain the errors from the operation, if any.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::UpdateError>>,
    _request_id: Option<String>,
}
impl UpdatePermissionsOutput {
    /// <p>An array of structures that contain the errors from the operation, if any.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::UpdateError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdatePermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdatePermissionsOutput`](crate::output::UpdatePermissionsOutput).
pub mod update_permissions_output {

    /// A builder for [`UpdatePermissionsOutput`](crate::output::UpdatePermissionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::UpdateError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p>An array of structures that contain the errors from the operation, if any.</p>
        pub fn errors(mut self, input: crate::model::UpdateError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p>An array of structures that contain the errors from the operation, if any.</p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UpdateError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdatePermissionsOutput`](crate::output::UpdatePermissionsOutput).
        pub fn build(self) -> crate::output::UpdatePermissionsOutput {
            crate::output::UpdatePermissionsOutput {
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdatePermissionsOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePermissionsOutput`](crate::output::UpdatePermissionsOutput).
    pub fn builder() -> crate::output::update_permissions_output::Builder {
        crate::output::update_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPermissionsOutput {
    /// <p>The token to use in a subsequent <code>ListPermissions</code> operation to return the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The permissions returned by the operation.</p>
    #[doc(hidden)]
    pub permissions: std::option::Option<std::vec::Vec<crate::model::PermissionEntry>>,
    _request_id: Option<String>,
}
impl ListPermissionsOutput {
    /// <p>The token to use in a subsequent <code>ListPermissions</code> operation to return the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The permissions returned by the operation.</p>
    pub fn permissions(&self) -> std::option::Option<&[crate::model::PermissionEntry]> {
        self.permissions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPermissionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListPermissionsOutput`](crate::output::ListPermissionsOutput).
pub mod list_permissions_output {

    /// A builder for [`ListPermissionsOutput`](crate::output::ListPermissionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) permissions: std::option::Option<std::vec::Vec<crate::model::PermissionEntry>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token to use in a subsequent <code>ListPermissions</code> operation to return the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token to use in a subsequent <code>ListPermissions</code> operation to return the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `permissions`.
        ///
        /// To override the contents of this collection use [`set_permissions`](Self::set_permissions).
        ///
        /// <p>The permissions returned by the operation.</p>
        pub fn permissions(mut self, input: crate::model::PermissionEntry) -> Self {
            let mut v = self.permissions.unwrap_or_default();
            v.push(input);
            self.permissions = Some(v);
            self
        }
        /// <p>The permissions returned by the operation.</p>
        pub fn set_permissions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PermissionEntry>>,
        ) -> Self {
            self.permissions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListPermissionsOutput`](crate::output::ListPermissionsOutput).
        pub fn build(self) -> crate::output::ListPermissionsOutput {
            crate::output::ListPermissionsOutput {
                next_token: self.next_token,
                permissions: self.permissions,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListPermissionsOutput {
    /// Creates a new builder-style object to manufacture [`ListPermissionsOutput`](crate::output::ListPermissionsOutput).
    pub fn builder() -> crate::output::list_permissions_output::Builder {
        crate::output::list_permissions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateLicenseOutput {
    /// <p>A structure containing information about the workspace.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl DisassociateLicenseOutput {
    /// <p>A structure containing information about the workspace.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for DisassociateLicenseOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DisassociateLicenseOutput`](crate::output::DisassociateLicenseOutput).
pub mod disassociate_license_output {

    /// A builder for [`DisassociateLicenseOutput`](crate::output::DisassociateLicenseOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing information about the workspace.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing information about the workspace.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateLicenseOutput`](crate::output::DisassociateLicenseOutput).
        pub fn build(self) -> crate::output::DisassociateLicenseOutput {
            crate::output::DisassociateLicenseOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl DisassociateLicenseOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateLicenseOutput`](crate::output::DisassociateLicenseOutput).
    pub fn builder() -> crate::output::disassociate_license_output::Builder {
        crate::output::disassociate_license_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateLicenseOutput {
    /// <p>A structure containing data about the workspace.</p>
    #[doc(hidden)]
    pub workspace: std::option::Option<crate::model::WorkspaceDescription>,
    _request_id: Option<String>,
}
impl AssociateLicenseOutput {
    /// <p>A structure containing data about the workspace.</p>
    pub fn workspace(&self) -> std::option::Option<&crate::model::WorkspaceDescription> {
        self.workspace.as_ref()
    }
}
impl aws_http::request_id::RequestId for AssociateLicenseOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`AssociateLicenseOutput`](crate::output::AssociateLicenseOutput).
pub mod associate_license_output {

    /// A builder for [`AssociateLicenseOutput`](crate::output::AssociateLicenseOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) workspace: std::option::Option<crate::model::WorkspaceDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing data about the workspace.</p>
        pub fn workspace(mut self, input: crate::model::WorkspaceDescription) -> Self {
            self.workspace = Some(input);
            self
        }
        /// <p>A structure containing data about the workspace.</p>
        pub fn set_workspace(
            mut self,
            input: std::option::Option<crate::model::WorkspaceDescription>,
        ) -> Self {
            self.workspace = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateLicenseOutput`](crate::output::AssociateLicenseOutput).
        pub fn build(self) -> crate::output::AssociateLicenseOutput {
            crate::output::AssociateLicenseOutput {
                workspace: self.workspace,
                _request_id: self._request_id,
            }
        }
    }
}
impl AssociateLicenseOutput {
    /// Creates a new builder-style object to manufacture [`AssociateLicenseOutput`](crate::output::AssociateLicenseOutput).
    pub fn builder() -> crate::output::associate_license_output::Builder {
        crate::output::associate_license_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceConfigurationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UpdateWorkspaceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkspaceConfigurationOutput`](crate::output::UpdateWorkspaceConfigurationOutput).
pub mod update_workspace_configuration_output {

    /// A builder for [`UpdateWorkspaceConfigurationOutput`](crate::output::UpdateWorkspaceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkspaceConfigurationOutput`](crate::output::UpdateWorkspaceConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateWorkspaceConfigurationOutput {
            crate::output::UpdateWorkspaceConfigurationOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkspaceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceConfigurationOutput`](crate::output::UpdateWorkspaceConfigurationOutput).
    pub fn builder() -> crate::output::update_workspace_configuration_output::Builder {
        crate::output::update_workspace_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorkspaceConfigurationOutput {
    /// <p>The configuration string for the workspace that you requested. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.</p>
    #[doc(hidden)]
    pub configuration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeWorkspaceConfigurationOutput {
    /// <p>The configuration string for the workspace that you requested. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.</p>
    pub fn configuration(&self) -> std::option::Option<&str> {
        self.configuration.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeWorkspaceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeWorkspaceConfigurationOutput`](crate::output::DescribeWorkspaceConfigurationOutput).
pub mod describe_workspace_configuration_output {

    /// A builder for [`DescribeWorkspaceConfigurationOutput`](crate::output::DescribeWorkspaceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configuration: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The configuration string for the workspace that you requested. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.</p>
        pub fn configuration(mut self, input: impl Into<std::string::String>) -> Self {
            self.configuration = Some(input.into());
            self
        }
        /// <p>The configuration string for the workspace that you requested. For more information about the format and configuration options available, see <a href="https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html">Working in your Grafana workspace</a>.</p>
        pub fn set_configuration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWorkspaceConfigurationOutput`](crate::output::DescribeWorkspaceConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeWorkspaceConfigurationOutput {
            crate::output::DescribeWorkspaceConfigurationOutput {
                configuration: self.configuration,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeWorkspaceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceConfigurationOutput`](crate::output::DescribeWorkspaceConfigurationOutput).
    pub fn builder() -> crate::output::describe_workspace_configuration_output::Builder {
        crate::output::describe_workspace_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateWorkspaceAuthenticationOutput {
    /// <p>A structure that describes the user authentication for this workspace after the update is made.</p>
    #[doc(hidden)]
    pub authentication: std::option::Option<crate::model::AuthenticationDescription>,
    _request_id: Option<String>,
}
impl UpdateWorkspaceAuthenticationOutput {
    /// <p>A structure that describes the user authentication for this workspace after the update is made.</p>
    pub fn authentication(&self) -> std::option::Option<&crate::model::AuthenticationDescription> {
        self.authentication.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateWorkspaceAuthenticationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateWorkspaceAuthenticationOutput`](crate::output::UpdateWorkspaceAuthenticationOutput).
pub mod update_workspace_authentication_output {

    /// A builder for [`UpdateWorkspaceAuthenticationOutput`](crate::output::UpdateWorkspaceAuthenticationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) authentication: std::option::Option<crate::model::AuthenticationDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure that describes the user authentication for this workspace after the update is made.</p>
        pub fn authentication(mut self, input: crate::model::AuthenticationDescription) -> Self {
            self.authentication = Some(input);
            self
        }
        /// <p>A structure that describes the user authentication for this workspace after the update is made.</p>
        pub fn set_authentication(
            mut self,
            input: std::option::Option<crate::model::AuthenticationDescription>,
        ) -> Self {
            self.authentication = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateWorkspaceAuthenticationOutput`](crate::output::UpdateWorkspaceAuthenticationOutput).
        pub fn build(self) -> crate::output::UpdateWorkspaceAuthenticationOutput {
            crate::output::UpdateWorkspaceAuthenticationOutput {
                authentication: self.authentication,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateWorkspaceAuthenticationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceAuthenticationOutput`](crate::output::UpdateWorkspaceAuthenticationOutput).
    pub fn builder() -> crate::output::update_workspace_authentication_output::Builder {
        crate::output::update_workspace_authentication_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorkspaceAuthenticationOutput {
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    #[doc(hidden)]
    pub authentication: std::option::Option<crate::model::AuthenticationDescription>,
    _request_id: Option<String>,
}
impl DescribeWorkspaceAuthenticationOutput {
    /// <p>A structure containing information about the authentication methods used in the workspace.</p>
    pub fn authentication(&self) -> std::option::Option<&crate::model::AuthenticationDescription> {
        self.authentication.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeWorkspaceAuthenticationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeWorkspaceAuthenticationOutput`](crate::output::DescribeWorkspaceAuthenticationOutput).
pub mod describe_workspace_authentication_output {

    /// A builder for [`DescribeWorkspaceAuthenticationOutput`](crate::output::DescribeWorkspaceAuthenticationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) authentication: std::option::Option<crate::model::AuthenticationDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A structure containing information about the authentication methods used in the workspace.</p>
        pub fn authentication(mut self, input: crate::model::AuthenticationDescription) -> Self {
            self.authentication = Some(input);
            self
        }
        /// <p>A structure containing information about the authentication methods used in the workspace.</p>
        pub fn set_authentication(
            mut self,
            input: std::option::Option<crate::model::AuthenticationDescription>,
        ) -> Self {
            self.authentication = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeWorkspaceAuthenticationOutput`](crate::output::DescribeWorkspaceAuthenticationOutput).
        pub fn build(self) -> crate::output::DescribeWorkspaceAuthenticationOutput {
            crate::output::DescribeWorkspaceAuthenticationOutput {
                authentication: self.authentication,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeWorkspaceAuthenticationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceAuthenticationOutput`](crate::output::DescribeWorkspaceAuthenticationOutput).
    pub fn builder() -> crate::output::describe_workspace_authentication_output::Builder {
        crate::output::describe_workspace_authentication_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteWorkspaceApiKeyOutput {
    /// <p>The name of the key that was deleted.</p>
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The ID of the workspace where the key was deleted.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteWorkspaceApiKeyOutput {
    /// <p>The name of the key that was deleted.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The ID of the workspace where the key was deleted.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteWorkspaceApiKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteWorkspaceApiKeyOutput`](crate::output::DeleteWorkspaceApiKeyOutput).
pub mod delete_workspace_api_key_output {

    /// A builder for [`DeleteWorkspaceApiKeyOutput`](crate::output::DeleteWorkspaceApiKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the key that was deleted.</p>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_name = Some(input.into());
            self
        }
        /// <p>The name of the key that was deleted.</p>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_name = input;
            self
        }
        /// <p>The ID of the workspace where the key was deleted.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace where the key was deleted.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteWorkspaceApiKeyOutput`](crate::output::DeleteWorkspaceApiKeyOutput).
        pub fn build(self) -> crate::output::DeleteWorkspaceApiKeyOutput {
            crate::output::DeleteWorkspaceApiKeyOutput {
                key_name: self.key_name,
                workspace_id: self.workspace_id,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteWorkspaceApiKeyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceApiKeyOutput`](crate::output::DeleteWorkspaceApiKeyOutput).
    pub fn builder() -> crate::output::delete_workspace_api_key_output::Builder {
        crate::output::delete_workspace_api_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWorkspaceApiKeyOutput {
    /// <p>The name of the key that was created.</p>
    #[doc(hidden)]
    pub key_name: std::option::Option<std::string::String>,
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>The ID of the workspace that the key is valid for.</p>
    #[doc(hidden)]
    pub workspace_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWorkspaceApiKeyOutput {
    /// <p>The name of the key that was created.</p>
    pub fn key_name(&self) -> std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>The ID of the workspace that the key is valid for.</p>
    pub fn workspace_id(&self) -> std::option::Option<&str> {
        self.workspace_id.as_deref()
    }
}
impl std::fmt::Debug for CreateWorkspaceApiKeyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWorkspaceApiKeyOutput");
        formatter.field("key_name", &self.key_name);
        formatter.field("key", &"*** Sensitive Data Redacted ***");
        formatter.field("workspace_id", &self.workspace_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for CreateWorkspaceApiKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateWorkspaceApiKeyOutput`](crate::output::CreateWorkspaceApiKeyOutput).
pub mod create_workspace_api_key_output {

    /// A builder for [`CreateWorkspaceApiKeyOutput`](crate::output::CreateWorkspaceApiKeyOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
    pub struct Builder {
        pub(crate) key_name: std::option::Option<std::string::String>,
        pub(crate) key: std::option::Option<std::string::String>,
        pub(crate) workspace_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The name of the key that was created.</p>
        pub fn key_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.key_name = Some(input.into());
            self
        }
        /// <p>The name of the key that was created.</p>
        pub fn set_key_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key_name = input;
            self
        }
        /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
        pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
            self.key = Some(input.into());
            self
        }
        /// <p>The key token. Use this value as a bearer token to authenticate HTTP requests to the workspace.</p>
        pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.key = input;
            self
        }
        /// <p>The ID of the workspace that the key is valid for.</p>
        pub fn workspace_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.workspace_id = Some(input.into());
            self
        }
        /// <p>The ID of the workspace that the key is valid for.</p>
        pub fn set_workspace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.workspace_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateWorkspaceApiKeyOutput`](crate::output::CreateWorkspaceApiKeyOutput).
        pub fn build(self) -> crate::output::CreateWorkspaceApiKeyOutput {
            crate::output::CreateWorkspaceApiKeyOutput {
                key_name: self.key_name,
                key: self.key,
                workspace_id: self.workspace_id,
                _request_id: self._request_id,
            }
        }
    }
    impl std::fmt::Debug for Builder {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            let mut formatter = f.debug_struct("Builder");
            formatter.field("key_name", &self.key_name);
            formatter.field("key", &"*** Sensitive Data Redacted ***");
            formatter.field("workspace_id", &self.workspace_id);
            formatter.field("_request_id", &self._request_id);
            formatter.finish()
        }
    }
}
impl CreateWorkspaceApiKeyOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceApiKeyOutput`](crate::output::CreateWorkspaceApiKeyOutput).
    pub fn builder() -> crate::output::create_workspace_api_key_output::Builder {
        crate::output::create_workspace_api_key_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The list of tags that are associated with the resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The list of tags that are associated with the resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The list of tags that are associated with the resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The list of tags that are associated with the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}
