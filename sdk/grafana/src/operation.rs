// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateLicense`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_license`](crate::client::fluent_builders::AssociateLicense).
///
/// `ParseStrictResponse` impl for `AssociateLicense`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateLicense {
    _private: (),
}
impl AssociateLicense {
    /// Creates a new builder-style object to manufacture [`AssociateLicenseInput`](crate::input::AssociateLicenseInput).
    pub fn builder() -> crate::input::associate_license_input::Builder {
        crate::input::associate_license_input::Builder::default()
    }
    /// Creates a new `AssociateLicense` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateLicense {
    type Output = std::result::Result<
        crate::output::AssociateLicenseOutput,
        crate::error::AssociateLicenseError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_associate_license::de_associate_license_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_associate_license::de_associate_license_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateWorkspace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_workspace`](crate::client::fluent_builders::CreateWorkspace).
///
/// `ParseStrictResponse` impl for `CreateWorkspace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkspace {
    _private: (),
}
impl CreateWorkspace {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceInput`](crate::input::CreateWorkspaceInput).
    pub fn builder() -> crate::input::create_workspace_input::Builder {
        crate::input::create_workspace_input::Builder::default()
    }
    /// Creates a new `CreateWorkspace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWorkspace {
    type Output = std::result::Result<
        crate::output::CreateWorkspaceOutput,
        crate::error::CreateWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_create_workspace::de_create_workspace_http_error(response)
        } else {
            crate::protocol_serde::shape_create_workspace::de_create_workspace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateWorkspaceApiKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_workspace_api_key`](crate::client::fluent_builders::CreateWorkspaceApiKey).
///
/// `ParseStrictResponse` impl for `CreateWorkspaceApiKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWorkspaceApiKey {
    _private: (),
}
impl CreateWorkspaceApiKey {
    /// Creates a new builder-style object to manufacture [`CreateWorkspaceApiKeyInput`](crate::input::CreateWorkspaceApiKeyInput).
    pub fn builder() -> crate::input::create_workspace_api_key_input::Builder {
        crate::input::create_workspace_api_key_input::Builder::default()
    }
    /// Creates a new `CreateWorkspaceApiKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWorkspaceApiKey {
    type Output = std::result::Result<
        crate::output::CreateWorkspaceApiKeyOutput,
        crate::error::CreateWorkspaceApiKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_workspace_api_key::de_create_workspace_api_key_http_error(response)
        } else {
            crate::protocol_serde::shape_create_workspace_api_key::de_create_workspace_api_key_http_response(response)
        }
    }
}

/// Operation shape for `DeleteWorkspace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_workspace`](crate::client::fluent_builders::DeleteWorkspace).
///
/// `ParseStrictResponse` impl for `DeleteWorkspace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWorkspace {
    _private: (),
}
impl DeleteWorkspace {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceInput`](crate::input::DeleteWorkspaceInput).
    pub fn builder() -> crate::input::delete_workspace_input::Builder {
        crate::input::delete_workspace_input::Builder::default()
    }
    /// Creates a new `DeleteWorkspace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWorkspace {
    type Output = std::result::Result<
        crate::output::DeleteWorkspaceOutput,
        crate::error::DeleteWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_delete_workspace::de_delete_workspace_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_workspace::de_delete_workspace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteWorkspaceApiKey`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_workspace_api_key`](crate::client::fluent_builders::DeleteWorkspaceApiKey).
///
/// `ParseStrictResponse` impl for `DeleteWorkspaceApiKey`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWorkspaceApiKey {
    _private: (),
}
impl DeleteWorkspaceApiKey {
    /// Creates a new builder-style object to manufacture [`DeleteWorkspaceApiKeyInput`](crate::input::DeleteWorkspaceApiKeyInput).
    pub fn builder() -> crate::input::delete_workspace_api_key_input::Builder {
        crate::input::delete_workspace_api_key_input::Builder::default()
    }
    /// Creates a new `DeleteWorkspaceApiKey` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWorkspaceApiKey {
    type Output = std::result::Result<
        crate::output::DeleteWorkspaceApiKeyOutput,
        crate::error::DeleteWorkspaceApiKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_workspace_api_key::de_delete_workspace_api_key_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_workspace_api_key::de_delete_workspace_api_key_http_response(response)
        }
    }
}

/// Operation shape for `DescribeWorkspace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_workspace`](crate::client::fluent_builders::DescribeWorkspace).
///
/// `ParseStrictResponse` impl for `DescribeWorkspace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeWorkspace {
    _private: (),
}
impl DescribeWorkspace {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceInput`](crate::input::DescribeWorkspaceInput).
    pub fn builder() -> crate::input::describe_workspace_input::Builder {
        crate::input::describe_workspace_input::Builder::default()
    }
    /// Creates a new `DescribeWorkspace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeWorkspace {
    type Output = std::result::Result<
        crate::output::DescribeWorkspaceOutput,
        crate::error::DescribeWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_workspace::de_describe_workspace_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_workspace::de_describe_workspace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeWorkspaceAuthentication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_workspace_authentication`](crate::client::fluent_builders::DescribeWorkspaceAuthentication).
///
/// `ParseStrictResponse` impl for `DescribeWorkspaceAuthentication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeWorkspaceAuthentication {
    _private: (),
}
impl DescribeWorkspaceAuthentication {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceAuthenticationInput`](crate::input::DescribeWorkspaceAuthenticationInput).
    pub fn builder() -> crate::input::describe_workspace_authentication_input::Builder {
        crate::input::describe_workspace_authentication_input::Builder::default()
    }
    /// Creates a new `DescribeWorkspaceAuthentication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeWorkspaceAuthentication {
    type Output = std::result::Result<
        crate::output::DescribeWorkspaceAuthenticationOutput,
        crate::error::DescribeWorkspaceAuthenticationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_workspace_authentication::de_describe_workspace_authentication_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_workspace_authentication::de_describe_workspace_authentication_http_response(response)
        }
    }
}

/// Operation shape for `DescribeWorkspaceConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_workspace_configuration`](crate::client::fluent_builders::DescribeWorkspaceConfiguration).
///
/// `ParseStrictResponse` impl for `DescribeWorkspaceConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeWorkspaceConfiguration {
    _private: (),
}
impl DescribeWorkspaceConfiguration {
    /// Creates a new builder-style object to manufacture [`DescribeWorkspaceConfigurationInput`](crate::input::DescribeWorkspaceConfigurationInput).
    pub fn builder() -> crate::input::describe_workspace_configuration_input::Builder {
        crate::input::describe_workspace_configuration_input::Builder::default()
    }
    /// Creates a new `DescribeWorkspaceConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeWorkspaceConfiguration {
    type Output = std::result::Result<
        crate::output::DescribeWorkspaceConfigurationOutput,
        crate::error::DescribeWorkspaceConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_workspace_configuration::de_describe_workspace_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_workspace_configuration::de_describe_workspace_configuration_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateLicense`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_license`](crate::client::fluent_builders::DisassociateLicense).
///
/// `ParseStrictResponse` impl for `DisassociateLicense`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateLicense {
    _private: (),
}
impl DisassociateLicense {
    /// Creates a new builder-style object to manufacture [`DisassociateLicenseInput`](crate::input::DisassociateLicenseInput).
    pub fn builder() -> crate::input::disassociate_license_input::Builder {
        crate::input::disassociate_license_input::Builder::default()
    }
    /// Creates a new `DisassociateLicense` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateLicense {
    type Output = std::result::Result<
        crate::output::DisassociateLicenseOutput,
        crate::error::DisassociateLicenseError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_disassociate_license::de_disassociate_license_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disassociate_license::de_disassociate_license_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListPermissions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_permissions`](crate::client::fluent_builders::ListPermissions).
///
/// `ParseStrictResponse` impl for `ListPermissions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListPermissions {
    _private: (),
}
impl ListPermissions {
    /// Creates a new builder-style object to manufacture [`ListPermissionsInput`](crate::input::ListPermissionsInput).
    pub fn builder() -> crate::input::list_permissions_input::Builder {
        crate::input::list_permissions_input::Builder::default()
    }
    /// Creates a new `ListPermissions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListPermissions {
    type Output = std::result::Result<
        crate::output::ListPermissionsOutput,
        crate::error::ListPermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_permissions::de_list_permissions_http_error(response)
        } else {
            crate::protocol_serde::shape_list_permissions::de_list_permissions_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListWorkspaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_workspaces`](crate::client::fluent_builders::ListWorkspaces).
///
/// `ParseStrictResponse` impl for `ListWorkspaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListWorkspaces {
    _private: (),
}
impl ListWorkspaces {
    /// Creates a new builder-style object to manufacture [`ListWorkspacesInput`](crate::input::ListWorkspacesInput).
    pub fn builder() -> crate::input::list_workspaces_input::Builder {
        crate::input::list_workspaces_input::Builder::default()
    }
    /// Creates a new `ListWorkspaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListWorkspaces {
    type Output =
        std::result::Result<crate::output::ListWorkspacesOutput, crate::error::ListWorkspacesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_workspaces::de_list_workspaces_http_error(response)
        } else {
            crate::protocol_serde::shape_list_workspaces::de_list_workspaces_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdatePermissions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_permissions`](crate::client::fluent_builders::UpdatePermissions).
///
/// `ParseStrictResponse` impl for `UpdatePermissions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdatePermissions {
    _private: (),
}
impl UpdatePermissions {
    /// Creates a new builder-style object to manufacture [`UpdatePermissionsInput`](crate::input::UpdatePermissionsInput).
    pub fn builder() -> crate::input::update_permissions_input::Builder {
        crate::input::update_permissions_input::Builder::default()
    }
    /// Creates a new `UpdatePermissions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdatePermissions {
    type Output = std::result::Result<
        crate::output::UpdatePermissionsOutput,
        crate::error::UpdatePermissionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_permissions::de_update_permissions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_permissions::de_update_permissions_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateWorkspace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_workspace`](crate::client::fluent_builders::UpdateWorkspace).
///
/// `ParseStrictResponse` impl for `UpdateWorkspace`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkspace {
    _private: (),
}
impl UpdateWorkspace {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceInput`](crate::input::UpdateWorkspaceInput).
    pub fn builder() -> crate::input::update_workspace_input::Builder {
        crate::input::update_workspace_input::Builder::default()
    }
    /// Creates a new `UpdateWorkspace` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWorkspace {
    type Output = std::result::Result<
        crate::output::UpdateWorkspaceOutput,
        crate::error::UpdateWorkspaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_workspace::de_update_workspace_http_error(response)
        } else {
            crate::protocol_serde::shape_update_workspace::de_update_workspace_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateWorkspaceAuthentication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_workspace_authentication`](crate::client::fluent_builders::UpdateWorkspaceAuthentication).
///
/// `ParseStrictResponse` impl for `UpdateWorkspaceAuthentication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkspaceAuthentication {
    _private: (),
}
impl UpdateWorkspaceAuthentication {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceAuthenticationInput`](crate::input::UpdateWorkspaceAuthenticationInput).
    pub fn builder() -> crate::input::update_workspace_authentication_input::Builder {
        crate::input::update_workspace_authentication_input::Builder::default()
    }
    /// Creates a new `UpdateWorkspaceAuthentication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWorkspaceAuthentication {
    type Output = std::result::Result<
        crate::output::UpdateWorkspaceAuthenticationOutput,
        crate::error::UpdateWorkspaceAuthenticationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_workspace_authentication::de_update_workspace_authentication_http_error(response)
        } else {
            crate::protocol_serde::shape_update_workspace_authentication::de_update_workspace_authentication_http_response(response)
        }
    }
}

/// Operation shape for `UpdateWorkspaceConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_workspace_configuration`](crate::client::fluent_builders::UpdateWorkspaceConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateWorkspaceConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWorkspaceConfiguration {
    _private: (),
}
impl UpdateWorkspaceConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateWorkspaceConfigurationInput`](crate::input::UpdateWorkspaceConfigurationInput).
    pub fn builder() -> crate::input::update_workspace_configuration_input::Builder {
        crate::input::update_workspace_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateWorkspaceConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWorkspaceConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateWorkspaceConfigurationOutput,
        crate::error::UpdateWorkspaceConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_workspace_configuration::de_update_workspace_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_workspace_configuration::de_update_workspace_configuration_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
