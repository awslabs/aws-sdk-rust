// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_change_logs_output_next_token(
    input: &crate::operation::get_change_logs::GetChangeLogsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_delegations_output_next_token(
    input: &crate::operation::get_delegations::GetDelegationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_evidence_by_evidence_folder_output_next_token(
    input: &crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_evidence_folders_by_assessment_output_next_token(
    input: &crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_evidence_folders_by_assessment_control_output_next_token(
    input: &crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assessment_control_insights_by_control_domain_output_next_token(
    input: &crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assessment_framework_share_requests_output_next_token(
    input: &crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assessment_frameworks_output_next_token(
    input: &crate::operation::list_assessment_frameworks::ListAssessmentFrameworksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assessment_reports_output_next_token(
    input: &crate::operation::list_assessment_reports::ListAssessmentReportsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_assessments_output_next_token(
    input: &crate::operation::list_assessments::ListAssessmentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_control_domain_insights_output_next_token(
    input: &crate::operation::list_control_domain_insights::ListControlDomainInsightsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_control_domain_insights_by_assessment_output_next_token(
    input: &crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_control_insights_by_control_domain_output_next_token(
    input: &crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_controls_output_next_token(
    input: &crate::operation::list_controls::ListControlsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_keywords_for_data_source_output_next_token(
    input: &crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_notifications_output_next_token(
    input: &crate::operation::list_notifications::ListNotificationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
