// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ValidateAssessmentReportIntegrityOutput {
    /// <p> Specifies whether the signature key is valid. </p>
    #[doc(hidden)]
    pub signature_valid: std::option::Option<bool>,
    /// <p> The signature algorithm that's used to code sign the assessment report file. </p>
    #[doc(hidden)]
    pub signature_algorithm: std::option::Option<std::string::String>,
    /// <p> The date and time signature that specifies when the assessment report was created. </p>
    #[doc(hidden)]
    pub signature_date_time: std::option::Option<std::string::String>,
    /// <p> The unique identifier for the validation signature key. </p>
    #[doc(hidden)]
    pub signature_key_id: std::option::Option<std::string::String>,
    /// <p> Represents any errors that occurred when validating the assessment report. </p>
    #[doc(hidden)]
    pub validation_errors: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ValidateAssessmentReportIntegrityOutput {
    /// <p> Specifies whether the signature key is valid. </p>
    pub fn signature_valid(&self) -> std::option::Option<bool> {
        self.signature_valid
    }
    /// <p> The signature algorithm that's used to code sign the assessment report file. </p>
    pub fn signature_algorithm(&self) -> std::option::Option<&str> {
        self.signature_algorithm.as_deref()
    }
    /// <p> The date and time signature that specifies when the assessment report was created. </p>
    pub fn signature_date_time(&self) -> std::option::Option<&str> {
        self.signature_date_time.as_deref()
    }
    /// <p> The unique identifier for the validation signature key. </p>
    pub fn signature_key_id(&self) -> std::option::Option<&str> {
        self.signature_key_id.as_deref()
    }
    /// <p> Represents any errors that occurred when validating the assessment report. </p>
    pub fn validation_errors(&self) -> std::option::Option<&[std::string::String]> {
        self.validation_errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for ValidateAssessmentReportIntegrityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ValidateAssessmentReportIntegrityOutput {
    /// Creates a new builder-style object to manufacture [`ValidateAssessmentReportIntegrityOutput`](crate::output::ValidateAssessmentReportIntegrityOutput).
    pub fn builder() -> crate::output::validate_assessment_report_integrity_output::Builder {
        crate::output::validate_assessment_report_integrity_output::Builder::default()
    }
}

/// See [`ValidateAssessmentReportIntegrityOutput`](crate::output::ValidateAssessmentReportIntegrityOutput).
pub mod validate_assessment_report_integrity_output {

    /// A builder for [`ValidateAssessmentReportIntegrityOutput`](crate::output::ValidateAssessmentReportIntegrityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) signature_valid: std::option::Option<bool>,
        pub(crate) signature_algorithm: std::option::Option<std::string::String>,
        pub(crate) signature_date_time: std::option::Option<std::string::String>,
        pub(crate) signature_key_id: std::option::Option<std::string::String>,
        pub(crate) validation_errors: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Specifies whether the signature key is valid. </p>
        pub fn signature_valid(mut self, input: bool) -> Self {
            self.signature_valid = Some(input);
            self
        }
        /// <p> Specifies whether the signature key is valid. </p>
        pub fn set_signature_valid(mut self, input: std::option::Option<bool>) -> Self {
            self.signature_valid = input;
            self
        }
        /// <p> The signature algorithm that's used to code sign the assessment report file. </p>
        pub fn signature_algorithm(mut self, input: impl Into<std::string::String>) -> Self {
            self.signature_algorithm = Some(input.into());
            self
        }
        /// <p> The signature algorithm that's used to code sign the assessment report file. </p>
        pub fn set_signature_algorithm(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.signature_algorithm = input;
            self
        }
        /// <p> The date and time signature that specifies when the assessment report was created. </p>
        pub fn signature_date_time(mut self, input: impl Into<std::string::String>) -> Self {
            self.signature_date_time = Some(input.into());
            self
        }
        /// <p> The date and time signature that specifies when the assessment report was created. </p>
        pub fn set_signature_date_time(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.signature_date_time = input;
            self
        }
        /// <p> The unique identifier for the validation signature key. </p>
        pub fn signature_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.signature_key_id = Some(input.into());
            self
        }
        /// <p> The unique identifier for the validation signature key. </p>
        pub fn set_signature_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.signature_key_id = input;
            self
        }
        /// Appends an item to `validation_errors`.
        ///
        /// To override the contents of this collection use [`set_validation_errors`](Self::set_validation_errors).
        ///
        /// <p> Represents any errors that occurred when validating the assessment report. </p>
        pub fn validation_errors(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.validation_errors.unwrap_or_default();
            v.push(input.into());
            self.validation_errors = Some(v);
            self
        }
        /// <p> Represents any errors that occurred when validating the assessment report. </p>
        pub fn set_validation_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.validation_errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ValidateAssessmentReportIntegrityOutput`](crate::output::ValidateAssessmentReportIntegrityOutput).
        pub fn build(self) -> crate::output::ValidateAssessmentReportIntegrityOutput {
            crate::output::ValidateAssessmentReportIntegrityOutput {
                signature_valid: self.signature_valid,
                signature_algorithm: self.signature_algorithm,
                signature_date_time: self.signature_date_time,
                signature_key_id: self.signature_key_id,
                validation_errors: self.validation_errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSettingsOutput {
    /// <p> The current list of settings. </p>
    #[doc(hidden)]
    pub settings: std::option::Option<crate::model::Settings>,
    _request_id: Option<String>,
}
impl UpdateSettingsOutput {
    /// <p> The current list of settings. </p>
    pub fn settings(&self) -> std::option::Option<&crate::model::Settings> {
        self.settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSettingsOutput`](crate::output::UpdateSettingsOutput).
    pub fn builder() -> crate::output::update_settings_output::Builder {
        crate::output::update_settings_output::Builder::default()
    }
}

/// See [`UpdateSettingsOutput`](crate::output::UpdateSettingsOutput).
pub mod update_settings_output {

    /// A builder for [`UpdateSettingsOutput`](crate::output::UpdateSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) settings: std::option::Option<crate::model::Settings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The current list of settings. </p>
        pub fn settings(mut self, input: crate::model::Settings) -> Self {
            self.settings = Some(input);
            self
        }
        /// <p> The current list of settings. </p>
        pub fn set_settings(mut self, input: std::option::Option<crate::model::Settings>) -> Self {
            self.settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSettingsOutput`](crate::output::UpdateSettingsOutput).
        pub fn build(self) -> crate::output::UpdateSettingsOutput {
            crate::output::UpdateSettingsOutput {
                settings: self.settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateControlOutput {
    /// <p> The name of the updated control set that the <code>UpdateControl</code> API returned. </p>
    #[doc(hidden)]
    pub control: std::option::Option<crate::model::Control>,
    _request_id: Option<String>,
}
impl UpdateControlOutput {
    /// <p> The name of the updated control set that the <code>UpdateControl</code> API returned. </p>
    pub fn control(&self) -> std::option::Option<&crate::model::Control> {
        self.control.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateControlOutput {
    /// Creates a new builder-style object to manufacture [`UpdateControlOutput`](crate::output::UpdateControlOutput).
    pub fn builder() -> crate::output::update_control_output::Builder {
        crate::output::update_control_output::Builder::default()
    }
}

/// See [`UpdateControlOutput`](crate::output::UpdateControlOutput).
pub mod update_control_output {

    /// A builder for [`UpdateControlOutput`](crate::output::UpdateControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control: std::option::Option<crate::model::Control>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the updated control set that the <code>UpdateControl</code> API returned. </p>
        pub fn control(mut self, input: crate::model::Control) -> Self {
            self.control = Some(input);
            self
        }
        /// <p> The name of the updated control set that the <code>UpdateControl</code> API returned. </p>
        pub fn set_control(mut self, input: std::option::Option<crate::model::Control>) -> Self {
            self.control = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateControlOutput`](crate::output::UpdateControlOutput).
        pub fn build(self) -> crate::output::UpdateControlOutput {
            crate::output::UpdateControlOutput {
                control: self.control,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentStatusOutput {
    /// <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API returned. </p>
    #[doc(hidden)]
    pub assessment: std::option::Option<crate::model::Assessment>,
    _request_id: Option<String>,
}
impl UpdateAssessmentStatusOutput {
    /// <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API returned. </p>
    pub fn assessment(&self) -> std::option::Option<&crate::model::Assessment> {
        self.assessment.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentStatusOutput`](crate::output::UpdateAssessmentStatusOutput).
    pub fn builder() -> crate::output::update_assessment_status_output::Builder {
        crate::output::update_assessment_status_output::Builder::default()
    }
}

/// See [`UpdateAssessmentStatusOutput`](crate::output::UpdateAssessmentStatusOutput).
pub mod update_assessment_status_output {

    /// A builder for [`UpdateAssessmentStatusOutput`](crate::output::UpdateAssessmentStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment: std::option::Option<crate::model::Assessment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API returned. </p>
        pub fn assessment(mut self, input: crate::model::Assessment) -> Self {
            self.assessment = Some(input);
            self
        }
        /// <p> The name of the updated assessment that the <code>UpdateAssessmentStatus</code> API returned. </p>
        pub fn set_assessment(
            mut self,
            input: std::option::Option<crate::model::Assessment>,
        ) -> Self {
            self.assessment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentStatusOutput`](crate::output::UpdateAssessmentStatusOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentStatusOutput {
            crate::output::UpdateAssessmentStatusOutput {
                assessment: self.assessment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentFrameworkShareOutput {
    /// <p> The updated share request that's returned by the <code>UpdateAssessmentFrameworkShare</code> operation. </p>
    #[doc(hidden)]
    pub assessment_framework_share_request:
        std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
    _request_id: Option<String>,
}
impl UpdateAssessmentFrameworkShareOutput {
    /// <p> The updated share request that's returned by the <code>UpdateAssessmentFrameworkShare</code> operation. </p>
    pub fn assessment_framework_share_request(
        &self,
    ) -> std::option::Option<&crate::model::AssessmentFrameworkShareRequest> {
        self.assessment_framework_share_request.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentFrameworkShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentFrameworkShareOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentFrameworkShareOutput`](crate::output::UpdateAssessmentFrameworkShareOutput).
    pub fn builder() -> crate::output::update_assessment_framework_share_output::Builder {
        crate::output::update_assessment_framework_share_output::Builder::default()
    }
}

/// See [`UpdateAssessmentFrameworkShareOutput`](crate::output::UpdateAssessmentFrameworkShareOutput).
pub mod update_assessment_framework_share_output {

    /// A builder for [`UpdateAssessmentFrameworkShareOutput`](crate::output::UpdateAssessmentFrameworkShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_framework_share_request:
            std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The updated share request that's returned by the <code>UpdateAssessmentFrameworkShare</code> operation. </p>
        pub fn assessment_framework_share_request(
            mut self,
            input: crate::model::AssessmentFrameworkShareRequest,
        ) -> Self {
            self.assessment_framework_share_request = Some(input);
            self
        }
        /// <p> The updated share request that's returned by the <code>UpdateAssessmentFrameworkShare</code> operation. </p>
        pub fn set_assessment_framework_share_request(
            mut self,
            input: std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
        ) -> Self {
            self.assessment_framework_share_request = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentFrameworkShareOutput`](crate::output::UpdateAssessmentFrameworkShareOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentFrameworkShareOutput {
            crate::output::UpdateAssessmentFrameworkShareOutput {
                assessment_framework_share_request: self.assessment_framework_share_request,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentFrameworkOutput {
    /// <p> The name of the framework. </p>
    #[doc(hidden)]
    pub framework: std::option::Option<crate::model::Framework>,
    _request_id: Option<String>,
}
impl UpdateAssessmentFrameworkOutput {
    /// <p> The name of the framework. </p>
    pub fn framework(&self) -> std::option::Option<&crate::model::Framework> {
        self.framework.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentFrameworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentFrameworkOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentFrameworkOutput`](crate::output::UpdateAssessmentFrameworkOutput).
    pub fn builder() -> crate::output::update_assessment_framework_output::Builder {
        crate::output::update_assessment_framework_output::Builder::default()
    }
}

/// See [`UpdateAssessmentFrameworkOutput`](crate::output::UpdateAssessmentFrameworkOutput).
pub mod update_assessment_framework_output {

    /// A builder for [`UpdateAssessmentFrameworkOutput`](crate::output::UpdateAssessmentFrameworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) framework: std::option::Option<crate::model::Framework>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the framework. </p>
        pub fn framework(mut self, input: crate::model::Framework) -> Self {
            self.framework = Some(input);
            self
        }
        /// <p> The name of the framework. </p>
        pub fn set_framework(
            mut self,
            input: std::option::Option<crate::model::Framework>,
        ) -> Self {
            self.framework = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentFrameworkOutput`](crate::output::UpdateAssessmentFrameworkOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentFrameworkOutput {
            crate::output::UpdateAssessmentFrameworkOutput {
                framework: self.framework,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentControlSetStatusOutput {
    /// <p> The name of the updated control set that the <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
    #[doc(hidden)]
    pub control_set: std::option::Option<crate::model::AssessmentControlSet>,
    _request_id: Option<String>,
}
impl UpdateAssessmentControlSetStatusOutput {
    /// <p> The name of the updated control set that the <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
    pub fn control_set(&self) -> std::option::Option<&crate::model::AssessmentControlSet> {
        self.control_set.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentControlSetStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentControlSetStatusOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentControlSetStatusOutput`](crate::output::UpdateAssessmentControlSetStatusOutput).
    pub fn builder() -> crate::output::update_assessment_control_set_status_output::Builder {
        crate::output::update_assessment_control_set_status_output::Builder::default()
    }
}

/// See [`UpdateAssessmentControlSetStatusOutput`](crate::output::UpdateAssessmentControlSetStatusOutput).
pub mod update_assessment_control_set_status_output {

    /// A builder for [`UpdateAssessmentControlSetStatusOutput`](crate::output::UpdateAssessmentControlSetStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_set: std::option::Option<crate::model::AssessmentControlSet>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the updated control set that the <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
        pub fn control_set(mut self, input: crate::model::AssessmentControlSet) -> Self {
            self.control_set = Some(input);
            self
        }
        /// <p> The name of the updated control set that the <code>UpdateAssessmentControlSetStatus</code> API returned. </p>
        pub fn set_control_set(
            mut self,
            input: std::option::Option<crate::model::AssessmentControlSet>,
        ) -> Self {
            self.control_set = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentControlSetStatusOutput`](crate::output::UpdateAssessmentControlSetStatusOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentControlSetStatusOutput {
            crate::output::UpdateAssessmentControlSetStatusOutput {
                control_set: self.control_set,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentControlOutput {
    /// <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API returned. </p>
    #[doc(hidden)]
    pub control: std::option::Option<crate::model::AssessmentControl>,
    _request_id: Option<String>,
}
impl UpdateAssessmentControlOutput {
    /// <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API returned. </p>
    pub fn control(&self) -> std::option::Option<&crate::model::AssessmentControl> {
        self.control.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentControlOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentControlOutput`](crate::output::UpdateAssessmentControlOutput).
    pub fn builder() -> crate::output::update_assessment_control_output::Builder {
        crate::output::update_assessment_control_output::Builder::default()
    }
}

/// See [`UpdateAssessmentControlOutput`](crate::output::UpdateAssessmentControlOutput).
pub mod update_assessment_control_output {

    /// A builder for [`UpdateAssessmentControlOutput`](crate::output::UpdateAssessmentControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control: std::option::Option<crate::model::AssessmentControl>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API returned. </p>
        pub fn control(mut self, input: crate::model::AssessmentControl) -> Self {
            self.control = Some(input);
            self
        }
        /// <p> The name of the updated control set that the <code>UpdateAssessmentControl</code> API returned. </p>
        pub fn set_control(
            mut self,
            input: std::option::Option<crate::model::AssessmentControl>,
        ) -> Self {
            self.control = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentControlOutput`](crate::output::UpdateAssessmentControlOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentControlOutput {
            crate::output::UpdateAssessmentControlOutput {
                control: self.control,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateAssessmentOutput {
    /// <p> The response object for the <code>UpdateAssessment</code> API. This is the name of the updated assessment.</p>
    #[doc(hidden)]
    pub assessment: std::option::Option<crate::model::Assessment>,
    _request_id: Option<String>,
}
impl UpdateAssessmentOutput {
    /// <p> The response object for the <code>UpdateAssessment</code> API. This is the name of the updated assessment.</p>
    pub fn assessment(&self) -> std::option::Option<&crate::model::Assessment> {
        self.assessment.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentOutput`](crate::output::UpdateAssessmentOutput).
    pub fn builder() -> crate::output::update_assessment_output::Builder {
        crate::output::update_assessment_output::Builder::default()
    }
}

/// See [`UpdateAssessmentOutput`](crate::output::UpdateAssessmentOutput).
pub mod update_assessment_output {

    /// A builder for [`UpdateAssessmentOutput`](crate::output::UpdateAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment: std::option::Option<crate::model::Assessment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The response object for the <code>UpdateAssessment</code> API. This is the name of the updated assessment.</p>
        pub fn assessment(mut self, input: crate::model::Assessment) -> Self {
            self.assessment = Some(input);
            self
        }
        /// <p> The response object for the <code>UpdateAssessment</code> API. This is the name of the updated assessment.</p>
        pub fn set_assessment(
            mut self,
            input: std::option::Option<crate::model::Assessment>,
        ) -> Self {
            self.assessment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateAssessmentOutput`](crate::output::UpdateAssessmentOutput).
        pub fn build(self) -> crate::output::UpdateAssessmentOutput {
            crate::output::UpdateAssessmentOutput {
                assessment: self.assessment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartAssessmentFrameworkShareOutput {
    /// <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API. </p>
    #[doc(hidden)]
    pub assessment_framework_share_request:
        std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
    _request_id: Option<String>,
}
impl StartAssessmentFrameworkShareOutput {
    /// <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API. </p>
    pub fn assessment_framework_share_request(
        &self,
    ) -> std::option::Option<&crate::model::AssessmentFrameworkShareRequest> {
        self.assessment_framework_share_request.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartAssessmentFrameworkShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartAssessmentFrameworkShareOutput {
    /// Creates a new builder-style object to manufacture [`StartAssessmentFrameworkShareOutput`](crate::output::StartAssessmentFrameworkShareOutput).
    pub fn builder() -> crate::output::start_assessment_framework_share_output::Builder {
        crate::output::start_assessment_framework_share_output::Builder::default()
    }
}

/// See [`StartAssessmentFrameworkShareOutput`](crate::output::StartAssessmentFrameworkShareOutput).
pub mod start_assessment_framework_share_output {

    /// A builder for [`StartAssessmentFrameworkShareOutput`](crate::output::StartAssessmentFrameworkShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_framework_share_request:
            std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API. </p>
        pub fn assessment_framework_share_request(
            mut self,
            input: crate::model::AssessmentFrameworkShareRequest,
        ) -> Self {
            self.assessment_framework_share_request = Some(input);
            self
        }
        /// <p> The share request that's created by the <code>StartAssessmentFrameworkShare</code> API. </p>
        pub fn set_assessment_framework_share_request(
            mut self,
            input: std::option::Option<crate::model::AssessmentFrameworkShareRequest>,
        ) -> Self {
            self.assessment_framework_share_request = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartAssessmentFrameworkShareOutput`](crate::output::StartAssessmentFrameworkShareOutput).
        pub fn build(self) -> crate::output::StartAssessmentFrameworkShareOutput {
            crate::output::StartAssessmentFrameworkShareOutput {
                assessment_framework_share_request: self.assessment_framework_share_request,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterOrganizationAdminAccountOutput {
    /// <p> The identifier for the delegated administrator account. </p>
    #[doc(hidden)]
    pub admin_account_id: std::option::Option<std::string::String>,
    /// <p> The identifier for the organization. </p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterOrganizationAdminAccountOutput {
    /// <p> The identifier for the delegated administrator account. </p>
    pub fn admin_account_id(&self) -> std::option::Option<&str> {
        self.admin_account_id.as_deref()
    }
    /// <p> The identifier for the organization. </p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for RegisterOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`RegisterOrganizationAdminAccountOutput`](crate::output::RegisterOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::register_organization_admin_account_output::Builder {
        crate::output::register_organization_admin_account_output::Builder::default()
    }
}

/// See [`RegisterOrganizationAdminAccountOutput`](crate::output::RegisterOrganizationAdminAccountOutput).
pub mod register_organization_admin_account_output {

    /// A builder for [`RegisterOrganizationAdminAccountOutput`](crate::output::RegisterOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_account_id: std::option::Option<std::string::String>,
        pub(crate) organization_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The identifier for the delegated administrator account. </p>
        pub fn admin_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.admin_account_id = Some(input.into());
            self
        }
        /// <p> The identifier for the delegated administrator account. </p>
        pub fn set_admin_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.admin_account_id = input;
            self
        }
        /// <p> The identifier for the organization. </p>
        pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.organization_id = Some(input.into());
            self
        }
        /// <p> The identifier for the organization. </p>
        pub fn set_organization_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.organization_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterOrganizationAdminAccountOutput`](crate::output::RegisterOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::RegisterOrganizationAdminAccountOutput {
            crate::output::RegisterOrganizationAdminAccountOutput {
                admin_account_id: self.admin_account_id,
                organization_id: self.organization_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterAccountOutput {
    /// <p> The status of the account registration request. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AccountStatus>,
    _request_id: Option<String>,
}
impl RegisterAccountOutput {
    /// <p> The status of the account registration request. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::AccountStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for RegisterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterAccountOutput {
    /// Creates a new builder-style object to manufacture [`RegisterAccountOutput`](crate::output::RegisterAccountOutput).
    pub fn builder() -> crate::output::register_account_output::Builder {
        crate::output::register_account_output::Builder::default()
    }
}

/// See [`RegisterAccountOutput`](crate::output::RegisterAccountOutput).
pub mod register_account_output {

    /// A builder for [`RegisterAccountOutput`](crate::output::RegisterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::AccountStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The status of the account registration request. </p>
        pub fn status(mut self, input: crate::model::AccountStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p> The status of the account registration request. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AccountStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RegisterAccountOutput`](crate::output::RegisterAccountOutput).
        pub fn build(self) -> crate::output::RegisterAccountOutput {
            crate::output::RegisterAccountOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p> The list of tags that the <code>ListTagsForResource</code> API returned. </p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNotificationsOutput {
    /// <p> The returned list of notifications. </p>
    #[doc(hidden)]
    pub notifications: std::option::Option<std::vec::Vec<crate::model::Notification>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListNotificationsOutput {
    /// <p> The returned list of notifications. </p>
    pub fn notifications(&self) -> std::option::Option<&[crate::model::Notification]> {
        self.notifications.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListNotificationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListNotificationsOutput {
    /// Creates a new builder-style object to manufacture [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
    pub fn builder() -> crate::output::list_notifications_output::Builder {
        crate::output::list_notifications_output::Builder::default()
    }
}

/// See [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
pub mod list_notifications_output {

    /// A builder for [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) notifications: std::option::Option<std::vec::Vec<crate::model::Notification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `notifications`.
        ///
        /// To override the contents of this collection use [`set_notifications`](Self::set_notifications).
        ///
        /// <p> The returned list of notifications. </p>
        pub fn notifications(mut self, input: crate::model::Notification) -> Self {
            let mut v = self.notifications.unwrap_or_default();
            v.push(input);
            self.notifications = Some(v);
            self
        }
        /// <p> The returned list of notifications. </p>
        pub fn set_notifications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Notification>>,
        ) -> Self {
            self.notifications = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListNotificationsOutput`](crate::output::ListNotificationsOutput).
        pub fn build(self) -> crate::output::ListNotificationsOutput {
            crate::output::ListNotificationsOutput {
                notifications: self.notifications,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListKeywordsForDataSourceOutput {
    /// <p> The list of keywords for the event mapping source. </p>
    #[doc(hidden)]
    pub keywords: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListKeywordsForDataSourceOutput {
    /// <p> The list of keywords for the event mapping source. </p>
    pub fn keywords(&self) -> std::option::Option<&[std::string::String]> {
        self.keywords.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListKeywordsForDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListKeywordsForDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`ListKeywordsForDataSourceOutput`](crate::output::ListKeywordsForDataSourceOutput).
    pub fn builder() -> crate::output::list_keywords_for_data_source_output::Builder {
        crate::output::list_keywords_for_data_source_output::Builder::default()
    }
}

/// See [`ListKeywordsForDataSourceOutput`](crate::output::ListKeywordsForDataSourceOutput).
pub mod list_keywords_for_data_source_output {

    /// A builder for [`ListKeywordsForDataSourceOutput`](crate::output::ListKeywordsForDataSourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) keywords: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `keywords`.
        ///
        /// To override the contents of this collection use [`set_keywords`](Self::set_keywords).
        ///
        /// <p> The list of keywords for the event mapping source. </p>
        pub fn keywords(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.keywords.unwrap_or_default();
            v.push(input.into());
            self.keywords = Some(v);
            self
        }
        /// <p> The list of keywords for the event mapping source. </p>
        pub fn set_keywords(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.keywords = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListKeywordsForDataSourceOutput`](crate::output::ListKeywordsForDataSourceOutput).
        pub fn build(self) -> crate::output::ListKeywordsForDataSourceOutput {
            crate::output::ListKeywordsForDataSourceOutput {
                keywords: self.keywords,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListControlsOutput {
    /// <p> The list of control metadata objects that the <code>ListControls</code> API returned. </p>
    #[doc(hidden)]
    pub control_metadata_list: std::option::Option<std::vec::Vec<crate::model::ControlMetadata>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListControlsOutput {
    /// <p> The list of control metadata objects that the <code>ListControls</code> API returned. </p>
    pub fn control_metadata_list(&self) -> std::option::Option<&[crate::model::ControlMetadata]> {
        self.control_metadata_list.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListControlsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListControlsOutput {
    /// Creates a new builder-style object to manufacture [`ListControlsOutput`](crate::output::ListControlsOutput).
    pub fn builder() -> crate::output::list_controls_output::Builder {
        crate::output::list_controls_output::Builder::default()
    }
}

/// See [`ListControlsOutput`](crate::output::ListControlsOutput).
pub mod list_controls_output {

    /// A builder for [`ListControlsOutput`](crate::output::ListControlsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_metadata_list:
            std::option::Option<std::vec::Vec<crate::model::ControlMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `control_metadata_list`.
        ///
        /// To override the contents of this collection use [`set_control_metadata_list`](Self::set_control_metadata_list).
        ///
        /// <p> The list of control metadata objects that the <code>ListControls</code> API returned. </p>
        pub fn control_metadata_list(mut self, input: crate::model::ControlMetadata) -> Self {
            let mut v = self.control_metadata_list.unwrap_or_default();
            v.push(input);
            self.control_metadata_list = Some(v);
            self
        }
        /// <p> The list of control metadata objects that the <code>ListControls</code> API returned. </p>
        pub fn set_control_metadata_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ControlMetadata>>,
        ) -> Self {
            self.control_metadata_list = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListControlsOutput`](crate::output::ListControlsOutput).
        pub fn build(self) -> crate::output::ListControlsOutput {
            crate::output::ListControlsOutput {
                control_metadata_list: self.control_metadata_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListControlInsightsByControlDomainOutput {
    /// <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API returned. </p>
    #[doc(hidden)]
    pub control_insights_metadata:
        std::option::Option<std::vec::Vec<crate::model::ControlInsightsMetadataItem>>,
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListControlInsightsByControlDomainOutput {
    /// <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API returned. </p>
    pub fn control_insights_metadata(
        &self,
    ) -> std::option::Option<&[crate::model::ControlInsightsMetadataItem]> {
        self.control_insights_metadata.as_deref()
    }
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListControlInsightsByControlDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListControlInsightsByControlDomainOutput {
    /// Creates a new builder-style object to manufacture [`ListControlInsightsByControlDomainOutput`](crate::output::ListControlInsightsByControlDomainOutput).
    pub fn builder() -> crate::output::list_control_insights_by_control_domain_output::Builder {
        crate::output::list_control_insights_by_control_domain_output::Builder::default()
    }
}

/// See [`ListControlInsightsByControlDomainOutput`](crate::output::ListControlInsightsByControlDomainOutput).
pub mod list_control_insights_by_control_domain_output {

    /// A builder for [`ListControlInsightsByControlDomainOutput`](crate::output::ListControlInsightsByControlDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_insights_metadata:
            std::option::Option<std::vec::Vec<crate::model::ControlInsightsMetadataItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `control_insights_metadata`.
        ///
        /// To override the contents of this collection use [`set_control_insights_metadata`](Self::set_control_insights_metadata).
        ///
        /// <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API returned. </p>
        pub fn control_insights_metadata(
            mut self,
            input: crate::model::ControlInsightsMetadataItem,
        ) -> Self {
            let mut v = self.control_insights_metadata.unwrap_or_default();
            v.push(input);
            self.control_insights_metadata = Some(v);
            self
        }
        /// <p>The control analytics data that the <code>ListControlInsightsByControlDomain</code> API returned. </p>
        pub fn set_control_insights_metadata(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ControlInsightsMetadataItem>>,
        ) -> Self {
            self.control_insights_metadata = input;
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListControlInsightsByControlDomainOutput`](crate::output::ListControlInsightsByControlDomainOutput).
        pub fn build(self) -> crate::output::ListControlInsightsByControlDomainOutput {
            crate::output::ListControlInsightsByControlDomainOutput {
                control_insights_metadata: self.control_insights_metadata,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListControlDomainInsightsByAssessmentOutput {
    /// <p>The control domain analytics data that the <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub control_domain_insights:
        std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListControlDomainInsightsByAssessmentOutput {
    /// <p>The control domain analytics data that the <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
    pub fn control_domain_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ControlDomainInsights]> {
        self.control_domain_insights.as_deref()
    }
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListControlDomainInsightsByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListControlDomainInsightsByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`ListControlDomainInsightsByAssessmentOutput`](crate::output::ListControlDomainInsightsByAssessmentOutput).
    pub fn builder() -> crate::output::list_control_domain_insights_by_assessment_output::Builder {
        crate::output::list_control_domain_insights_by_assessment_output::Builder::default()
    }
}

/// See [`ListControlDomainInsightsByAssessmentOutput`](crate::output::ListControlDomainInsightsByAssessmentOutput).
pub mod list_control_domain_insights_by_assessment_output {

    /// A builder for [`ListControlDomainInsightsByAssessmentOutput`](crate::output::ListControlDomainInsightsByAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_domain_insights:
            std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `control_domain_insights`.
        ///
        /// To override the contents of this collection use [`set_control_domain_insights`](Self::set_control_domain_insights).
        ///
        /// <p>The control domain analytics data that the <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
        pub fn control_domain_insights(
            mut self,
            input: crate::model::ControlDomainInsights,
        ) -> Self {
            let mut v = self.control_domain_insights.unwrap_or_default();
            v.push(input);
            self.control_domain_insights = Some(v);
            self
        }
        /// <p>The control domain analytics data that the <code>ListControlDomainInsightsByAssessment</code> API returned. </p>
        pub fn set_control_domain_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
        ) -> Self {
            self.control_domain_insights = input;
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListControlDomainInsightsByAssessmentOutput`](crate::output::ListControlDomainInsightsByAssessmentOutput).
        pub fn build(self) -> crate::output::ListControlDomainInsightsByAssessmentOutput {
            crate::output::ListControlDomainInsightsByAssessmentOutput {
                control_domain_insights: self.control_domain_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListControlDomainInsightsOutput {
    /// <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API returned. </p>
    #[doc(hidden)]
    pub control_domain_insights:
        std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListControlDomainInsightsOutput {
    /// <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API returned. </p>
    pub fn control_domain_insights(
        &self,
    ) -> std::option::Option<&[crate::model::ControlDomainInsights]> {
        self.control_domain_insights.as_deref()
    }
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListControlDomainInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListControlDomainInsightsOutput {
    /// Creates a new builder-style object to manufacture [`ListControlDomainInsightsOutput`](crate::output::ListControlDomainInsightsOutput).
    pub fn builder() -> crate::output::list_control_domain_insights_output::Builder {
        crate::output::list_control_domain_insights_output::Builder::default()
    }
}

/// See [`ListControlDomainInsightsOutput`](crate::output::ListControlDomainInsightsOutput).
pub mod list_control_domain_insights_output {

    /// A builder for [`ListControlDomainInsightsOutput`](crate::output::ListControlDomainInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_domain_insights:
            std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `control_domain_insights`.
        ///
        /// To override the contents of this collection use [`set_control_domain_insights`](Self::set_control_domain_insights).
        ///
        /// <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API returned. </p>
        pub fn control_domain_insights(
            mut self,
            input: crate::model::ControlDomainInsights,
        ) -> Self {
            let mut v = self.control_domain_insights.unwrap_or_default();
            v.push(input);
            self.control_domain_insights = Some(v);
            self
        }
        /// <p>The control domain analytics data that the <code>ListControlDomainInsights</code> API returned. </p>
        pub fn set_control_domain_insights(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ControlDomainInsights>>,
        ) -> Self {
            self.control_domain_insights = input;
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListControlDomainInsightsOutput`](crate::output::ListControlDomainInsightsOutput).
        pub fn build(self) -> crate::output::ListControlDomainInsightsOutput {
            crate::output::ListControlDomainInsightsOutput {
                control_domain_insights: self.control_domain_insights,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssessmentsOutput {
    /// <p> The metadata that's associated with the assessment. </p>
    #[doc(hidden)]
    pub assessment_metadata:
        std::option::Option<std::vec::Vec<crate::model::AssessmentMetadataItem>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssessmentsOutput {
    /// <p> The metadata that's associated with the assessment. </p>
    pub fn assessment_metadata(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentMetadataItem]> {
        self.assessment_metadata.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssessmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssessmentsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentsOutput`](crate::output::ListAssessmentsOutput).
    pub fn builder() -> crate::output::list_assessments_output::Builder {
        crate::output::list_assessments_output::Builder::default()
    }
}

/// See [`ListAssessmentsOutput`](crate::output::ListAssessmentsOutput).
pub mod list_assessments_output {

    /// A builder for [`ListAssessmentsOutput`](crate::output::ListAssessmentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_metadata:
            std::option::Option<std::vec::Vec<crate::model::AssessmentMetadataItem>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `assessment_metadata`.
        ///
        /// To override the contents of this collection use [`set_assessment_metadata`](Self::set_assessment_metadata).
        ///
        /// <p> The metadata that's associated with the assessment. </p>
        pub fn assessment_metadata(mut self, input: crate::model::AssessmentMetadataItem) -> Self {
            let mut v = self.assessment_metadata.unwrap_or_default();
            v.push(input);
            self.assessment_metadata = Some(v);
            self
        }
        /// <p> The metadata that's associated with the assessment. </p>
        pub fn set_assessment_metadata(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentMetadataItem>>,
        ) -> Self {
            self.assessment_metadata = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentsOutput`](crate::output::ListAssessmentsOutput).
        pub fn build(self) -> crate::output::ListAssessmentsOutput {
            crate::output::ListAssessmentsOutput {
                assessment_metadata: self.assessment_metadata,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssessmentReportsOutput {
    /// <p> The list of assessment reports that the <code>ListAssessmentReports</code> API returned. </p>
    #[doc(hidden)]
    pub assessment_reports:
        std::option::Option<std::vec::Vec<crate::model::AssessmentReportMetadata>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssessmentReportsOutput {
    /// <p> The list of assessment reports that the <code>ListAssessmentReports</code> API returned. </p>
    pub fn assessment_reports(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentReportMetadata]> {
        self.assessment_reports.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssessmentReportsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssessmentReportsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentReportsOutput`](crate::output::ListAssessmentReportsOutput).
    pub fn builder() -> crate::output::list_assessment_reports_output::Builder {
        crate::output::list_assessment_reports_output::Builder::default()
    }
}

/// See [`ListAssessmentReportsOutput`](crate::output::ListAssessmentReportsOutput).
pub mod list_assessment_reports_output {

    /// A builder for [`ListAssessmentReportsOutput`](crate::output::ListAssessmentReportsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_reports:
            std::option::Option<std::vec::Vec<crate::model::AssessmentReportMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `assessment_reports`.
        ///
        /// To override the contents of this collection use [`set_assessment_reports`](Self::set_assessment_reports).
        ///
        /// <p> The list of assessment reports that the <code>ListAssessmentReports</code> API returned. </p>
        pub fn assessment_reports(mut self, input: crate::model::AssessmentReportMetadata) -> Self {
            let mut v = self.assessment_reports.unwrap_or_default();
            v.push(input);
            self.assessment_reports = Some(v);
            self
        }
        /// <p> The list of assessment reports that the <code>ListAssessmentReports</code> API returned. </p>
        pub fn set_assessment_reports(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentReportMetadata>>,
        ) -> Self {
            self.assessment_reports = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentReportsOutput`](crate::output::ListAssessmentReportsOutput).
        pub fn build(self) -> crate::output::ListAssessmentReportsOutput {
            crate::output::ListAssessmentReportsOutput {
                assessment_reports: self.assessment_reports,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssessmentFrameworkShareRequestsOutput {
    /// <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code> API returned. </p>
    #[doc(hidden)]
    pub assessment_framework_share_requests:
        std::option::Option<std::vec::Vec<crate::model::AssessmentFrameworkShareRequest>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssessmentFrameworkShareRequestsOutput {
    /// <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code> API returned. </p>
    pub fn assessment_framework_share_requests(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentFrameworkShareRequest]> {
        self.assessment_framework_share_requests.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssessmentFrameworkShareRequestsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssessmentFrameworkShareRequestsOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentFrameworkShareRequestsOutput`](crate::output::ListAssessmentFrameworkShareRequestsOutput).
    pub fn builder() -> crate::output::list_assessment_framework_share_requests_output::Builder {
        crate::output::list_assessment_framework_share_requests_output::Builder::default()
    }
}

/// See [`ListAssessmentFrameworkShareRequestsOutput`](crate::output::ListAssessmentFrameworkShareRequestsOutput).
pub mod list_assessment_framework_share_requests_output {

    /// A builder for [`ListAssessmentFrameworkShareRequestsOutput`](crate::output::ListAssessmentFrameworkShareRequestsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_framework_share_requests:
            std::option::Option<std::vec::Vec<crate::model::AssessmentFrameworkShareRequest>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `assessment_framework_share_requests`.
        ///
        /// To override the contents of this collection use [`set_assessment_framework_share_requests`](Self::set_assessment_framework_share_requests).
        ///
        /// <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code> API returned. </p>
        pub fn assessment_framework_share_requests(
            mut self,
            input: crate::model::AssessmentFrameworkShareRequest,
        ) -> Self {
            let mut v = self.assessment_framework_share_requests.unwrap_or_default();
            v.push(input);
            self.assessment_framework_share_requests = Some(v);
            self
        }
        /// <p> The list of share requests that the <code>ListAssessmentFrameworkShareRequests</code> API returned. </p>
        pub fn set_assessment_framework_share_requests(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AssessmentFrameworkShareRequest>,
            >,
        ) -> Self {
            self.assessment_framework_share_requests = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentFrameworkShareRequestsOutput`](crate::output::ListAssessmentFrameworkShareRequestsOutput).
        pub fn build(self) -> crate::output::ListAssessmentFrameworkShareRequestsOutput {
            crate::output::ListAssessmentFrameworkShareRequestsOutput {
                assessment_framework_share_requests: self.assessment_framework_share_requests,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssessmentFrameworksOutput {
    /// <p> The list of metadata objects for the framework. </p>
    #[doc(hidden)]
    pub framework_metadata_list:
        std::option::Option<std::vec::Vec<crate::model::AssessmentFrameworkMetadata>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssessmentFrameworksOutput {
    /// <p> The list of metadata objects for the framework. </p>
    pub fn framework_metadata_list(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentFrameworkMetadata]> {
        self.framework_metadata_list.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssessmentFrameworksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssessmentFrameworksOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentFrameworksOutput`](crate::output::ListAssessmentFrameworksOutput).
    pub fn builder() -> crate::output::list_assessment_frameworks_output::Builder {
        crate::output::list_assessment_frameworks_output::Builder::default()
    }
}

/// See [`ListAssessmentFrameworksOutput`](crate::output::ListAssessmentFrameworksOutput).
pub mod list_assessment_frameworks_output {

    /// A builder for [`ListAssessmentFrameworksOutput`](crate::output::ListAssessmentFrameworksOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) framework_metadata_list:
            std::option::Option<std::vec::Vec<crate::model::AssessmentFrameworkMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `framework_metadata_list`.
        ///
        /// To override the contents of this collection use [`set_framework_metadata_list`](Self::set_framework_metadata_list).
        ///
        /// <p> The list of metadata objects for the framework. </p>
        pub fn framework_metadata_list(
            mut self,
            input: crate::model::AssessmentFrameworkMetadata,
        ) -> Self {
            let mut v = self.framework_metadata_list.unwrap_or_default();
            v.push(input);
            self.framework_metadata_list = Some(v);
            self
        }
        /// <p> The list of metadata objects for the framework. </p>
        pub fn set_framework_metadata_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentFrameworkMetadata>>,
        ) -> Self {
            self.framework_metadata_list = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentFrameworksOutput`](crate::output::ListAssessmentFrameworksOutput).
        pub fn build(self) -> crate::output::ListAssessmentFrameworksOutput {
            crate::output::ListAssessmentFrameworksOutput {
                framework_metadata_list: self.framework_metadata_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAssessmentControlInsightsByControlDomainOutput {
    /// <p>The assessment control analytics data that the <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
    #[doc(hidden)]
    pub control_insights_by_assessment:
        std::option::Option<std::vec::Vec<crate::model::ControlInsightsMetadataByAssessmentItem>>,
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAssessmentControlInsightsByControlDomainOutput {
    /// <p>The assessment control analytics data that the <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
    pub fn control_insights_by_assessment(
        &self,
    ) -> std::option::Option<&[crate::model::ControlInsightsMetadataByAssessmentItem]> {
        self.control_insights_by_assessment.as_deref()
    }
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAssessmentControlInsightsByControlDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAssessmentControlInsightsByControlDomainOutput {
    /// Creates a new builder-style object to manufacture [`ListAssessmentControlInsightsByControlDomainOutput`](crate::output::ListAssessmentControlInsightsByControlDomainOutput).
    pub fn builder(
    ) -> crate::output::list_assessment_control_insights_by_control_domain_output::Builder {
        crate::output::list_assessment_control_insights_by_control_domain_output::Builder::default()
    }
}

/// See [`ListAssessmentControlInsightsByControlDomainOutput`](crate::output::ListAssessmentControlInsightsByControlDomainOutput).
pub mod list_assessment_control_insights_by_control_domain_output {

    /// A builder for [`ListAssessmentControlInsightsByControlDomainOutput`](crate::output::ListAssessmentControlInsightsByControlDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control_insights_by_assessment: std::option::Option<
            std::vec::Vec<crate::model::ControlInsightsMetadataByAssessmentItem>,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `control_insights_by_assessment`.
        ///
        /// To override the contents of this collection use [`set_control_insights_by_assessment`](Self::set_control_insights_by_assessment).
        ///
        /// <p>The assessment control analytics data that the <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
        pub fn control_insights_by_assessment(
            mut self,
            input: crate::model::ControlInsightsMetadataByAssessmentItem,
        ) -> Self {
            let mut v = self.control_insights_by_assessment.unwrap_or_default();
            v.push(input);
            self.control_insights_by_assessment = Some(v);
            self
        }
        /// <p>The assessment control analytics data that the <code>ListAssessmentControlInsightsByControlDomain</code> API returned. </p>
        pub fn set_control_insights_by_assessment(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ControlInsightsMetadataByAssessmentItem>,
            >,
        ) -> Self {
            self.control_insights_by_assessment = input;
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAssessmentControlInsightsByControlDomainOutput`](crate::output::ListAssessmentControlInsightsByControlDomainOutput).
        pub fn build(self) -> crate::output::ListAssessmentControlInsightsByControlDomainOutput {
            crate::output::ListAssessmentControlInsightsByControlDomainOutput {
                control_insights_by_assessment: self.control_insights_by_assessment,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSettingsOutput {
    /// <p> The settings object that holds all supported Audit Manager settings. </p>
    #[doc(hidden)]
    pub settings: std::option::Option<crate::model::Settings>,
    _request_id: Option<String>,
}
impl GetSettingsOutput {
    /// <p> The settings object that holds all supported Audit Manager settings. </p>
    pub fn settings(&self) -> std::option::Option<&crate::model::Settings> {
        self.settings.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetSettingsOutput`](crate::output::GetSettingsOutput).
    pub fn builder() -> crate::output::get_settings_output::Builder {
        crate::output::get_settings_output::Builder::default()
    }
}

/// See [`GetSettingsOutput`](crate::output::GetSettingsOutput).
pub mod get_settings_output {

    /// A builder for [`GetSettingsOutput`](crate::output::GetSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) settings: std::option::Option<crate::model::Settings>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The settings object that holds all supported Audit Manager settings. </p>
        pub fn settings(mut self, input: crate::model::Settings) -> Self {
            self.settings = Some(input);
            self
        }
        /// <p> The settings object that holds all supported Audit Manager settings. </p>
        pub fn set_settings(mut self, input: std::option::Option<crate::model::Settings>) -> Self {
            self.settings = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetSettingsOutput`](crate::output::GetSettingsOutput).
        pub fn build(self) -> crate::output::GetSettingsOutput {
            crate::output::GetSettingsOutput {
                settings: self.settings,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetServicesInScopeOutput {
    /// <p> The metadata that's associated with the Amazon Web Service. </p>
    #[doc(hidden)]
    pub service_metadata: std::option::Option<std::vec::Vec<crate::model::ServiceMetadata>>,
    _request_id: Option<String>,
}
impl GetServicesInScopeOutput {
    /// <p> The metadata that's associated with the Amazon Web Service. </p>
    pub fn service_metadata(&self) -> std::option::Option<&[crate::model::ServiceMetadata]> {
        self.service_metadata.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetServicesInScopeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetServicesInScopeOutput {
    /// Creates a new builder-style object to manufacture [`GetServicesInScopeOutput`](crate::output::GetServicesInScopeOutput).
    pub fn builder() -> crate::output::get_services_in_scope_output::Builder {
        crate::output::get_services_in_scope_output::Builder::default()
    }
}

/// See [`GetServicesInScopeOutput`](crate::output::GetServicesInScopeOutput).
pub mod get_services_in_scope_output {

    /// A builder for [`GetServicesInScopeOutput`](crate::output::GetServicesInScopeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_metadata:
            std::option::Option<std::vec::Vec<crate::model::ServiceMetadata>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `service_metadata`.
        ///
        /// To override the contents of this collection use [`set_service_metadata`](Self::set_service_metadata).
        ///
        /// <p> The metadata that's associated with the Amazon Web Service. </p>
        pub fn service_metadata(mut self, input: crate::model::ServiceMetadata) -> Self {
            let mut v = self.service_metadata.unwrap_or_default();
            v.push(input);
            self.service_metadata = Some(v);
            self
        }
        /// <p> The metadata that's associated with the Amazon Web Service. </p>
        pub fn set_service_metadata(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceMetadata>>,
        ) -> Self {
            self.service_metadata = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetServicesInScopeOutput`](crate::output::GetServicesInScopeOutput).
        pub fn build(self) -> crate::output::GetServicesInScopeOutput {
            crate::output::GetServicesInScopeOutput {
                service_metadata: self.service_metadata,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetOrganizationAdminAccountOutput {
    /// <p> The identifier for the administrator account. </p>
    #[doc(hidden)]
    pub admin_account_id: std::option::Option<std::string::String>,
    /// <p> The identifier for the organization. </p>
    #[doc(hidden)]
    pub organization_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetOrganizationAdminAccountOutput {
    /// <p> The identifier for the administrator account. </p>
    pub fn admin_account_id(&self) -> std::option::Option<&str> {
        self.admin_account_id.as_deref()
    }
    /// <p> The identifier for the organization. </p>
    pub fn organization_id(&self) -> std::option::Option<&str> {
        self.organization_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetOrganizationAdminAccountOutput`](crate::output::GetOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::get_organization_admin_account_output::Builder {
        crate::output::get_organization_admin_account_output::Builder::default()
    }
}

/// See [`GetOrganizationAdminAccountOutput`](crate::output::GetOrganizationAdminAccountOutput).
pub mod get_organization_admin_account_output {

    /// A builder for [`GetOrganizationAdminAccountOutput`](crate::output::GetOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_account_id: std::option::Option<std::string::String>,
        pub(crate) organization_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The identifier for the administrator account. </p>
        pub fn admin_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.admin_account_id = Some(input.into());
            self
        }
        /// <p> The identifier for the administrator account. </p>
        pub fn set_admin_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.admin_account_id = input;
            self
        }
        /// <p> The identifier for the organization. </p>
        pub fn organization_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.organization_id = Some(input.into());
            self
        }
        /// <p> The identifier for the organization. </p>
        pub fn set_organization_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.organization_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetOrganizationAdminAccountOutput`](crate::output::GetOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::GetOrganizationAdminAccountOutput {
            crate::output::GetOrganizationAdminAccountOutput {
                admin_account_id: self.admin_account_id,
                organization_id: self.organization_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInsightsByAssessmentOutput {
    /// <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub insights: std::option::Option<crate::model::InsightsByAssessment>,
    _request_id: Option<String>,
}
impl GetInsightsByAssessmentOutput {
    /// <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API returned. </p>
    pub fn insights(&self) -> std::option::Option<&crate::model::InsightsByAssessment> {
        self.insights.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetInsightsByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInsightsByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`GetInsightsByAssessmentOutput`](crate::output::GetInsightsByAssessmentOutput).
    pub fn builder() -> crate::output::get_insights_by_assessment_output::Builder {
        crate::output::get_insights_by_assessment_output::Builder::default()
    }
}

/// See [`GetInsightsByAssessmentOutput`](crate::output::GetInsightsByAssessmentOutput).
pub mod get_insights_by_assessment_output {

    /// A builder for [`GetInsightsByAssessmentOutput`](crate::output::GetInsightsByAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) insights: std::option::Option<crate::model::InsightsByAssessment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API returned. </p>
        pub fn insights(mut self, input: crate::model::InsightsByAssessment) -> Self {
            self.insights = Some(input);
            self
        }
        /// <p> The assessment analytics data that the <code>GetInsightsByAssessment</code> API returned. </p>
        pub fn set_insights(
            mut self,
            input: std::option::Option<crate::model::InsightsByAssessment>,
        ) -> Self {
            self.insights = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInsightsByAssessmentOutput`](crate::output::GetInsightsByAssessmentOutput).
        pub fn build(self) -> crate::output::GetInsightsByAssessmentOutput {
            crate::output::GetInsightsByAssessmentOutput {
                insights: self.insights,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInsightsOutput {
    /// <p>The analytics data that the <code>GetInsights</code> API returned. </p>
    #[doc(hidden)]
    pub insights: std::option::Option<crate::model::Insights>,
    _request_id: Option<String>,
}
impl GetInsightsOutput {
    /// <p>The analytics data that the <code>GetInsights</code> API returned. </p>
    pub fn insights(&self) -> std::option::Option<&crate::model::Insights> {
        self.insights.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetInsightsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInsightsOutput {
    /// Creates a new builder-style object to manufacture [`GetInsightsOutput`](crate::output::GetInsightsOutput).
    pub fn builder() -> crate::output::get_insights_output::Builder {
        crate::output::get_insights_output::Builder::default()
    }
}

/// See [`GetInsightsOutput`](crate::output::GetInsightsOutput).
pub mod get_insights_output {

    /// A builder for [`GetInsightsOutput`](crate::output::GetInsightsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) insights: std::option::Option<crate::model::Insights>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The analytics data that the <code>GetInsights</code> API returned. </p>
        pub fn insights(mut self, input: crate::model::Insights) -> Self {
            self.insights = Some(input);
            self
        }
        /// <p>The analytics data that the <code>GetInsights</code> API returned. </p>
        pub fn set_insights(mut self, input: std::option::Option<crate::model::Insights>) -> Self {
            self.insights = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetInsightsOutput`](crate::output::GetInsightsOutput).
        pub fn build(self) -> crate::output::GetInsightsOutput {
            crate::output::GetInsightsOutput {
                insights: self.insights,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceFoldersByAssessmentControlOutput {
    /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
    #[doc(hidden)]
    pub evidence_folders:
        std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEvidenceFoldersByAssessmentControlOutput {
    /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
    pub fn evidence_folders(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentEvidenceFolder]> {
        self.evidence_folders.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEvidenceFoldersByAssessmentControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEvidenceFoldersByAssessmentControlOutput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFoldersByAssessmentControlOutput`](crate::output::GetEvidenceFoldersByAssessmentControlOutput).
    pub fn builder() -> crate::output::get_evidence_folders_by_assessment_control_output::Builder {
        crate::output::get_evidence_folders_by_assessment_control_output::Builder::default()
    }
}

/// See [`GetEvidenceFoldersByAssessmentControlOutput`](crate::output::GetEvidenceFoldersByAssessmentControlOutput).
pub mod get_evidence_folders_by_assessment_control_output {

    /// A builder for [`GetEvidenceFoldersByAssessmentControlOutput`](crate::output::GetEvidenceFoldersByAssessmentControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence_folders:
            std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `evidence_folders`.
        ///
        /// To override the contents of this collection use [`set_evidence_folders`](Self::set_evidence_folders).
        ///
        /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
        pub fn evidence_folders(mut self, input: crate::model::AssessmentEvidenceFolder) -> Self {
            let mut v = self.evidence_folders.unwrap_or_default();
            v.push(input);
            self.evidence_folders = Some(v);
            self
        }
        /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessmentControl</code> API returned. </p>
        pub fn set_evidence_folders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
        ) -> Self {
            self.evidence_folders = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEvidenceFoldersByAssessmentControlOutput`](crate::output::GetEvidenceFoldersByAssessmentControlOutput).
        pub fn build(self) -> crate::output::GetEvidenceFoldersByAssessmentControlOutput {
            crate::output::GetEvidenceFoldersByAssessmentControlOutput {
                evidence_folders: self.evidence_folders,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceFoldersByAssessmentOutput {
    /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub evidence_folders:
        std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEvidenceFoldersByAssessmentOutput {
    /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API returned. </p>
    pub fn evidence_folders(
        &self,
    ) -> std::option::Option<&[crate::model::AssessmentEvidenceFolder]> {
        self.evidence_folders.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEvidenceFoldersByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEvidenceFoldersByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFoldersByAssessmentOutput`](crate::output::GetEvidenceFoldersByAssessmentOutput).
    pub fn builder() -> crate::output::get_evidence_folders_by_assessment_output::Builder {
        crate::output::get_evidence_folders_by_assessment_output::Builder::default()
    }
}

/// See [`GetEvidenceFoldersByAssessmentOutput`](crate::output::GetEvidenceFoldersByAssessmentOutput).
pub mod get_evidence_folders_by_assessment_output {

    /// A builder for [`GetEvidenceFoldersByAssessmentOutput`](crate::output::GetEvidenceFoldersByAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence_folders:
            std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `evidence_folders`.
        ///
        /// To override the contents of this collection use [`set_evidence_folders`](Self::set_evidence_folders).
        ///
        /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API returned. </p>
        pub fn evidence_folders(mut self, input: crate::model::AssessmentEvidenceFolder) -> Self {
            let mut v = self.evidence_folders.unwrap_or_default();
            v.push(input);
            self.evidence_folders = Some(v);
            self
        }
        /// <p> The list of evidence folders that the <code>GetEvidenceFoldersByAssessment</code> API returned. </p>
        pub fn set_evidence_folders(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentEvidenceFolder>>,
        ) -> Self {
            self.evidence_folders = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEvidenceFoldersByAssessmentOutput`](crate::output::GetEvidenceFoldersByAssessmentOutput).
        pub fn build(self) -> crate::output::GetEvidenceFoldersByAssessmentOutput {
            crate::output::GetEvidenceFoldersByAssessmentOutput {
                evidence_folders: self.evidence_folders,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceFolderOutput {
    /// <p> The folder that the evidence is stored in. </p>
    #[doc(hidden)]
    pub evidence_folder: std::option::Option<crate::model::AssessmentEvidenceFolder>,
    _request_id: Option<String>,
}
impl GetEvidenceFolderOutput {
    /// <p> The folder that the evidence is stored in. </p>
    pub fn evidence_folder(&self) -> std::option::Option<&crate::model::AssessmentEvidenceFolder> {
        self.evidence_folder.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEvidenceFolderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEvidenceFolderOutput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFolderOutput`](crate::output::GetEvidenceFolderOutput).
    pub fn builder() -> crate::output::get_evidence_folder_output::Builder {
        crate::output::get_evidence_folder_output::Builder::default()
    }
}

/// See [`GetEvidenceFolderOutput`](crate::output::GetEvidenceFolderOutput).
pub mod get_evidence_folder_output {

    /// A builder for [`GetEvidenceFolderOutput`](crate::output::GetEvidenceFolderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence_folder: std::option::Option<crate::model::AssessmentEvidenceFolder>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The folder that the evidence is stored in. </p>
        pub fn evidence_folder(mut self, input: crate::model::AssessmentEvidenceFolder) -> Self {
            self.evidence_folder = Some(input);
            self
        }
        /// <p> The folder that the evidence is stored in. </p>
        pub fn set_evidence_folder(
            mut self,
            input: std::option::Option<crate::model::AssessmentEvidenceFolder>,
        ) -> Self {
            self.evidence_folder = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEvidenceFolderOutput`](crate::output::GetEvidenceFolderOutput).
        pub fn build(self) -> crate::output::GetEvidenceFolderOutput {
            crate::output::GetEvidenceFolderOutput {
                evidence_folder: self.evidence_folder,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceByEvidenceFolderOutput {
    /// <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned. </p>
    #[doc(hidden)]
    pub evidence: std::option::Option<std::vec::Vec<crate::model::Evidence>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEvidenceByEvidenceFolderOutput {
    /// <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned. </p>
    pub fn evidence(&self) -> std::option::Option<&[crate::model::Evidence]> {
        self.evidence.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEvidenceByEvidenceFolderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEvidenceByEvidenceFolderOutput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceByEvidenceFolderOutput`](crate::output::GetEvidenceByEvidenceFolderOutput).
    pub fn builder() -> crate::output::get_evidence_by_evidence_folder_output::Builder {
        crate::output::get_evidence_by_evidence_folder_output::Builder::default()
    }
}

/// See [`GetEvidenceByEvidenceFolderOutput`](crate::output::GetEvidenceByEvidenceFolderOutput).
pub mod get_evidence_by_evidence_folder_output {

    /// A builder for [`GetEvidenceByEvidenceFolderOutput`](crate::output::GetEvidenceByEvidenceFolderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence: std::option::Option<std::vec::Vec<crate::model::Evidence>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `evidence`.
        ///
        /// To override the contents of this collection use [`set_evidence`](Self::set_evidence).
        ///
        /// <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned. </p>
        pub fn evidence(mut self, input: crate::model::Evidence) -> Self {
            let mut v = self.evidence.unwrap_or_default();
            v.push(input);
            self.evidence = Some(v);
            self
        }
        /// <p> The list of evidence that the <code>GetEvidenceByEvidenceFolder</code> API returned. </p>
        pub fn set_evidence(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Evidence>>,
        ) -> Self {
            self.evidence = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEvidenceByEvidenceFolderOutput`](crate::output::GetEvidenceByEvidenceFolderOutput).
        pub fn build(self) -> crate::output::GetEvidenceByEvidenceFolderOutput {
            crate::output::GetEvidenceByEvidenceFolderOutput {
                evidence: self.evidence,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceOutput {
    /// <p> The evidence that the <code>GetEvidence</code> API returned. </p>
    #[doc(hidden)]
    pub evidence: std::option::Option<crate::model::Evidence>,
    _request_id: Option<String>,
}
impl GetEvidenceOutput {
    /// <p> The evidence that the <code>GetEvidence</code> API returned. </p>
    pub fn evidence(&self) -> std::option::Option<&crate::model::Evidence> {
        self.evidence.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEvidenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEvidenceOutput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceOutput`](crate::output::GetEvidenceOutput).
    pub fn builder() -> crate::output::get_evidence_output::Builder {
        crate::output::get_evidence_output::Builder::default()
    }
}

/// See [`GetEvidenceOutput`](crate::output::GetEvidenceOutput).
pub mod get_evidence_output {

    /// A builder for [`GetEvidenceOutput`](crate::output::GetEvidenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence: std::option::Option<crate::model::Evidence>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The evidence that the <code>GetEvidence</code> API returned. </p>
        pub fn evidence(mut self, input: crate::model::Evidence) -> Self {
            self.evidence = Some(input);
            self
        }
        /// <p> The evidence that the <code>GetEvidence</code> API returned. </p>
        pub fn set_evidence(mut self, input: std::option::Option<crate::model::Evidence>) -> Self {
            self.evidence = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEvidenceOutput`](crate::output::GetEvidenceOutput).
        pub fn build(self) -> crate::output::GetEvidenceOutput {
            crate::output::GetEvidenceOutput {
                evidence: self.evidence,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDelegationsOutput {
    /// <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
    #[doc(hidden)]
    pub delegations: std::option::Option<std::vec::Vec<crate::model::DelegationMetadata>>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetDelegationsOutput {
    /// <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
    pub fn delegations(&self) -> std::option::Option<&[crate::model::DelegationMetadata]> {
        self.delegations.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDelegationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDelegationsOutput {
    /// Creates a new builder-style object to manufacture [`GetDelegationsOutput`](crate::output::GetDelegationsOutput).
    pub fn builder() -> crate::output::get_delegations_output::Builder {
        crate::output::get_delegations_output::Builder::default()
    }
}

/// See [`GetDelegationsOutput`](crate::output::GetDelegationsOutput).
pub mod get_delegations_output {

    /// A builder for [`GetDelegationsOutput`](crate::output::GetDelegationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delegations:
            std::option::Option<std::vec::Vec<crate::model::DelegationMetadata>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `delegations`.
        ///
        /// To override the contents of this collection use [`set_delegations`](Self::set_delegations).
        ///
        /// <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
        pub fn delegations(mut self, input: crate::model::DelegationMetadata) -> Self {
            let mut v = self.delegations.unwrap_or_default();
            v.push(input);
            self.delegations = Some(v);
            self
        }
        /// <p> The list of delegations that the <code>GetDelegations</code> API returned. </p>
        pub fn set_delegations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DelegationMetadata>>,
        ) -> Self {
            self.delegations = input;
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p> The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetDelegationsOutput`](crate::output::GetDelegationsOutput).
        pub fn build(self) -> crate::output::GetDelegationsOutput {
            crate::output::GetDelegationsOutput {
                delegations: self.delegations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetControlOutput {
    /// <p> The name of the control that the <code>GetControl</code> API returned. </p>
    #[doc(hidden)]
    pub control: std::option::Option<crate::model::Control>,
    _request_id: Option<String>,
}
impl GetControlOutput {
    /// <p> The name of the control that the <code>GetControl</code> API returned. </p>
    pub fn control(&self) -> std::option::Option<&crate::model::Control> {
        self.control.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetControlOutput {
    /// Creates a new builder-style object to manufacture [`GetControlOutput`](crate::output::GetControlOutput).
    pub fn builder() -> crate::output::get_control_output::Builder {
        crate::output::get_control_output::Builder::default()
    }
}

/// See [`GetControlOutput`](crate::output::GetControlOutput).
pub mod get_control_output {

    /// A builder for [`GetControlOutput`](crate::output::GetControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control: std::option::Option<crate::model::Control>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the control that the <code>GetControl</code> API returned. </p>
        pub fn control(mut self, input: crate::model::Control) -> Self {
            self.control = Some(input);
            self
        }
        /// <p> The name of the control that the <code>GetControl</code> API returned. </p>
        pub fn set_control(mut self, input: std::option::Option<crate::model::Control>) -> Self {
            self.control = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetControlOutput`](crate::output::GetControlOutput).
        pub fn build(self) -> crate::output::GetControlOutput {
            crate::output::GetControlOutput {
                control: self.control,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetChangeLogsOutput {
    /// <p>The list of user activity for the control. </p>
    #[doc(hidden)]
    pub change_logs: std::option::Option<std::vec::Vec<crate::model::ChangeLog>>,
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetChangeLogsOutput {
    /// <p>The list of user activity for the control. </p>
    pub fn change_logs(&self) -> std::option::Option<&[crate::model::ChangeLog]> {
        self.change_logs.as_deref()
    }
    /// <p>The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetChangeLogsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetChangeLogsOutput {
    /// Creates a new builder-style object to manufacture [`GetChangeLogsOutput`](crate::output::GetChangeLogsOutput).
    pub fn builder() -> crate::output::get_change_logs_output::Builder {
        crate::output::get_change_logs_output::Builder::default()
    }
}

/// See [`GetChangeLogsOutput`](crate::output::GetChangeLogsOutput).
pub mod get_change_logs_output {

    /// A builder for [`GetChangeLogsOutput`](crate::output::GetChangeLogsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) change_logs: std::option::Option<std::vec::Vec<crate::model::ChangeLog>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `change_logs`.
        ///
        /// To override the contents of this collection use [`set_change_logs`](Self::set_change_logs).
        ///
        /// <p>The list of user activity for the control. </p>
        pub fn change_logs(mut self, input: crate::model::ChangeLog) -> Self {
            let mut v = self.change_logs.unwrap_or_default();
            v.push(input);
            self.change_logs = Some(v);
            self
        }
        /// <p>The list of user activity for the control. </p>
        pub fn set_change_logs(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ChangeLog>>,
        ) -> Self {
            self.change_logs = input;
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token that's used to fetch the next set of results. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetChangeLogsOutput`](crate::output::GetChangeLogsOutput).
        pub fn build(self) -> crate::output::GetChangeLogsOutput {
            crate::output::GetChangeLogsOutput {
                change_logs: self.change_logs,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAssessmentReportUrlOutput {
    /// <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. </p>
    #[doc(hidden)]
    pub pre_signed_url: std::option::Option<crate::model::Url>,
    _request_id: Option<String>,
}
impl GetAssessmentReportUrlOutput {
    /// <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. </p>
    pub fn pre_signed_url(&self) -> std::option::Option<&crate::model::Url> {
        self.pre_signed_url.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAssessmentReportUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAssessmentReportUrlOutput {
    /// Creates a new builder-style object to manufacture [`GetAssessmentReportUrlOutput`](crate::output::GetAssessmentReportUrlOutput).
    pub fn builder() -> crate::output::get_assessment_report_url_output::Builder {
        crate::output::get_assessment_report_url_output::Builder::default()
    }
}

/// See [`GetAssessmentReportUrlOutput`](crate::output::GetAssessmentReportUrlOutput).
pub mod get_assessment_report_url_output {

    /// A builder for [`GetAssessmentReportUrlOutput`](crate::output::GetAssessmentReportUrlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pre_signed_url: std::option::Option<crate::model::Url>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. </p>
        pub fn pre_signed_url(mut self, input: crate::model::Url) -> Self {
            self.pre_signed_url = Some(input);
            self
        }
        /// <p> Short for uniform resource locator. A URL is used as a unique identifier to locate a resource on the internet. </p>
        pub fn set_pre_signed_url(mut self, input: std::option::Option<crate::model::Url>) -> Self {
            self.pre_signed_url = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAssessmentReportUrlOutput`](crate::output::GetAssessmentReportUrlOutput).
        pub fn build(self) -> crate::output::GetAssessmentReportUrlOutput {
            crate::output::GetAssessmentReportUrlOutput {
                pre_signed_url: self.pre_signed_url,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAssessmentFrameworkOutput {
    /// <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
    #[doc(hidden)]
    pub framework: std::option::Option<crate::model::Framework>,
    _request_id: Option<String>,
}
impl GetAssessmentFrameworkOutput {
    /// <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
    pub fn framework(&self) -> std::option::Option<&crate::model::Framework> {
        self.framework.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAssessmentFrameworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAssessmentFrameworkOutput {
    /// Creates a new builder-style object to manufacture [`GetAssessmentFrameworkOutput`](crate::output::GetAssessmentFrameworkOutput).
    pub fn builder() -> crate::output::get_assessment_framework_output::Builder {
        crate::output::get_assessment_framework_output::Builder::default()
    }
}

/// See [`GetAssessmentFrameworkOutput`](crate::output::GetAssessmentFrameworkOutput).
pub mod get_assessment_framework_output {

    /// A builder for [`GetAssessmentFrameworkOutput`](crate::output::GetAssessmentFrameworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) framework: std::option::Option<crate::model::Framework>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
        pub fn framework(mut self, input: crate::model::Framework) -> Self {
            self.framework = Some(input);
            self
        }
        /// <p> The framework that the <code>GetAssessmentFramework</code> API returned. </p>
        pub fn set_framework(
            mut self,
            input: std::option::Option<crate::model::Framework>,
        ) -> Self {
            self.framework = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAssessmentFrameworkOutput`](crate::output::GetAssessmentFrameworkOutput).
        pub fn build(self) -> crate::output::GetAssessmentFrameworkOutput {
            crate::output::GetAssessmentFrameworkOutput {
                framework: self.framework,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAssessmentOutput {
    /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
    #[doc(hidden)]
    pub assessment: std::option::Option<crate::model::Assessment>,
    /// <p> The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). </p>
    #[doc(hidden)]
    pub user_role: std::option::Option<crate::model::Role>,
    _request_id: Option<String>,
}
impl GetAssessmentOutput {
    /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
    pub fn assessment(&self) -> std::option::Option<&crate::model::Assessment> {
        self.assessment.as_ref()
    }
    /// <p> The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). </p>
    pub fn user_role(&self) -> std::option::Option<&crate::model::Role> {
        self.user_role.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`GetAssessmentOutput`](crate::output::GetAssessmentOutput).
    pub fn builder() -> crate::output::get_assessment_output::Builder {
        crate::output::get_assessment_output::Builder::default()
    }
}

/// See [`GetAssessmentOutput`](crate::output::GetAssessmentOutput).
pub mod get_assessment_output {

    /// A builder for [`GetAssessmentOutput`](crate::output::GetAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment: std::option::Option<crate::model::Assessment>,
        pub(crate) user_role: std::option::Option<crate::model::Role>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
        pub fn assessment(mut self, input: crate::model::Assessment) -> Self {
            self.assessment = Some(input);
            self
        }
        /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
        pub fn set_assessment(
            mut self,
            input: std::option::Option<crate::model::Assessment>,
        ) -> Self {
            self.assessment = input;
            self
        }
        /// <p> The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). </p>
        pub fn user_role(mut self, input: crate::model::Role) -> Self {
            self.user_role = Some(input);
            self
        }
        /// <p> The wrapper that contains the Audit Manager role information of the current user. This includes the role type and IAM Amazon Resource Name (ARN). </p>
        pub fn set_user_role(mut self, input: std::option::Option<crate::model::Role>) -> Self {
            self.user_role = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAssessmentOutput`](crate::output::GetAssessmentOutput).
        pub fn build(self) -> crate::output::GetAssessmentOutput {
            crate::output::GetAssessmentOutput {
                assessment: self.assessment,
                user_role: self.user_role,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetAccountStatusOutput {
    /// <p> The status of the Amazon Web Services account. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AccountStatus>,
    _request_id: Option<String>,
}
impl GetAccountStatusOutput {
    /// <p> The status of the Amazon Web Services account. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::AccountStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetAccountStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetAccountStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetAccountStatusOutput`](crate::output::GetAccountStatusOutput).
    pub fn builder() -> crate::output::get_account_status_output::Builder {
        crate::output::get_account_status_output::Builder::default()
    }
}

/// See [`GetAccountStatusOutput`](crate::output::GetAccountStatusOutput).
pub mod get_account_status_output {

    /// A builder for [`GetAccountStatusOutput`](crate::output::GetAccountStatusOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::AccountStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The status of the Amazon Web Services account. </p>
        pub fn status(mut self, input: crate::model::AccountStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p> The status of the Amazon Web Services account. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AccountStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetAccountStatusOutput`](crate::output::GetAccountStatusOutput).
        pub fn build(self) -> crate::output::GetAccountStatusOutput {
            crate::output::GetAccountStatusOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateAssessmentReportEvidenceFolderOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DisassociateAssessmentReportEvidenceFolderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateAssessmentReportEvidenceFolderOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateAssessmentReportEvidenceFolderOutput`](crate::output::DisassociateAssessmentReportEvidenceFolderOutput).
    pub fn builder() -> crate::output::disassociate_assessment_report_evidence_folder_output::Builder
    {
        crate::output::disassociate_assessment_report_evidence_folder_output::Builder::default()
    }
}

/// See [`DisassociateAssessmentReportEvidenceFolderOutput`](crate::output::DisassociateAssessmentReportEvidenceFolderOutput).
pub mod disassociate_assessment_report_evidence_folder_output {

    /// A builder for [`DisassociateAssessmentReportEvidenceFolderOutput`](crate::output::DisassociateAssessmentReportEvidenceFolderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateAssessmentReportEvidenceFolderOutput`](crate::output::DisassociateAssessmentReportEvidenceFolderOutput).
        pub fn build(self) -> crate::output::DisassociateAssessmentReportEvidenceFolderOutput {
            crate::output::DisassociateAssessmentReportEvidenceFolderOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterOrganizationAdminAccountOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeregisterOrganizationAdminAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeregisterOrganizationAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterOrganizationAdminAccountOutput`](crate::output::DeregisterOrganizationAdminAccountOutput).
    pub fn builder() -> crate::output::deregister_organization_admin_account_output::Builder {
        crate::output::deregister_organization_admin_account_output::Builder::default()
    }
}

/// See [`DeregisterOrganizationAdminAccountOutput`](crate::output::DeregisterOrganizationAdminAccountOutput).
pub mod deregister_organization_admin_account_output {

    /// A builder for [`DeregisterOrganizationAdminAccountOutput`](crate::output::DeregisterOrganizationAdminAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterOrganizationAdminAccountOutput`](crate::output::DeregisterOrganizationAdminAccountOutput).
        pub fn build(self) -> crate::output::DeregisterOrganizationAdminAccountOutput {
            crate::output::DeregisterOrganizationAdminAccountOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeregisterAccountOutput {
    /// <p> The registration status of the account. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::AccountStatus>,
    _request_id: Option<String>,
}
impl DeregisterAccountOutput {
    /// <p> The registration status of the account. </p>
    pub fn status(&self) -> std::option::Option<&crate::model::AccountStatus> {
        self.status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeregisterAccountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeregisterAccountOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterAccountOutput`](crate::output::DeregisterAccountOutput).
    pub fn builder() -> crate::output::deregister_account_output::Builder {
        crate::output::deregister_account_output::Builder::default()
    }
}

/// See [`DeregisterAccountOutput`](crate::output::DeregisterAccountOutput).
pub mod deregister_account_output {

    /// A builder for [`DeregisterAccountOutput`](crate::output::DeregisterAccountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::AccountStatus>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The registration status of the account. </p>
        pub fn status(mut self, input: crate::model::AccountStatus) -> Self {
            self.status = Some(input);
            self
        }
        /// <p> The registration status of the account. </p>
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::AccountStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterAccountOutput`](crate::output::DeregisterAccountOutput).
        pub fn build(self) -> crate::output::DeregisterAccountOutput {
            crate::output::DeregisterAccountOutput {
                status: self.status,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteControlOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteControlOutput {
    /// Creates a new builder-style object to manufacture [`DeleteControlOutput`](crate::output::DeleteControlOutput).
    pub fn builder() -> crate::output::delete_control_output::Builder {
        crate::output::delete_control_output::Builder::default()
    }
}

/// See [`DeleteControlOutput`](crate::output::DeleteControlOutput).
pub mod delete_control_output {

    /// A builder for [`DeleteControlOutput`](crate::output::DeleteControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteControlOutput`](crate::output::DeleteControlOutput).
        pub fn build(self) -> crate::output::DeleteControlOutput {
            crate::output::DeleteControlOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAssessmentReportOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAssessmentReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAssessmentReportOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentReportOutput`](crate::output::DeleteAssessmentReportOutput).
    pub fn builder() -> crate::output::delete_assessment_report_output::Builder {
        crate::output::delete_assessment_report_output::Builder::default()
    }
}

/// See [`DeleteAssessmentReportOutput`](crate::output::DeleteAssessmentReportOutput).
pub mod delete_assessment_report_output {

    /// A builder for [`DeleteAssessmentReportOutput`](crate::output::DeleteAssessmentReportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAssessmentReportOutput`](crate::output::DeleteAssessmentReportOutput).
        pub fn build(self) -> crate::output::DeleteAssessmentReportOutput {
            crate::output::DeleteAssessmentReportOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAssessmentFrameworkShareOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAssessmentFrameworkShareOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAssessmentFrameworkShareOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentFrameworkShareOutput`](crate::output::DeleteAssessmentFrameworkShareOutput).
    pub fn builder() -> crate::output::delete_assessment_framework_share_output::Builder {
        crate::output::delete_assessment_framework_share_output::Builder::default()
    }
}

/// See [`DeleteAssessmentFrameworkShareOutput`](crate::output::DeleteAssessmentFrameworkShareOutput).
pub mod delete_assessment_framework_share_output {

    /// A builder for [`DeleteAssessmentFrameworkShareOutput`](crate::output::DeleteAssessmentFrameworkShareOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAssessmentFrameworkShareOutput`](crate::output::DeleteAssessmentFrameworkShareOutput).
        pub fn build(self) -> crate::output::DeleteAssessmentFrameworkShareOutput {
            crate::output::DeleteAssessmentFrameworkShareOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAssessmentFrameworkOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAssessmentFrameworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAssessmentFrameworkOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentFrameworkOutput`](crate::output::DeleteAssessmentFrameworkOutput).
    pub fn builder() -> crate::output::delete_assessment_framework_output::Builder {
        crate::output::delete_assessment_framework_output::Builder::default()
    }
}

/// See [`DeleteAssessmentFrameworkOutput`](crate::output::DeleteAssessmentFrameworkOutput).
pub mod delete_assessment_framework_output {

    /// A builder for [`DeleteAssessmentFrameworkOutput`](crate::output::DeleteAssessmentFrameworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAssessmentFrameworkOutput`](crate::output::DeleteAssessmentFrameworkOutput).
        pub fn build(self) -> crate::output::DeleteAssessmentFrameworkOutput {
            crate::output::DeleteAssessmentFrameworkOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAssessmentOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentOutput`](crate::output::DeleteAssessmentOutput).
    pub fn builder() -> crate::output::delete_assessment_output::Builder {
        crate::output::delete_assessment_output::Builder::default()
    }
}

/// See [`DeleteAssessmentOutput`](crate::output::DeleteAssessmentOutput).
pub mod delete_assessment_output {

    /// A builder for [`DeleteAssessmentOutput`](crate::output::DeleteAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAssessmentOutput`](crate::output::DeleteAssessmentOutput).
        pub fn build(self) -> crate::output::DeleteAssessmentOutput {
            crate::output::DeleteAssessmentOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateControlOutput {
    /// <p> The new control that the <code>CreateControl</code> API returned. </p>
    #[doc(hidden)]
    pub control: std::option::Option<crate::model::Control>,
    _request_id: Option<String>,
}
impl CreateControlOutput {
    /// <p> The new control that the <code>CreateControl</code> API returned. </p>
    pub fn control(&self) -> std::option::Option<&crate::model::Control> {
        self.control.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateControlOutput {
    /// Creates a new builder-style object to manufacture [`CreateControlOutput`](crate::output::CreateControlOutput).
    pub fn builder() -> crate::output::create_control_output::Builder {
        crate::output::create_control_output::Builder::default()
    }
}

/// See [`CreateControlOutput`](crate::output::CreateControlOutput).
pub mod create_control_output {

    /// A builder for [`CreateControlOutput`](crate::output::CreateControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) control: std::option::Option<crate::model::Control>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The new control that the <code>CreateControl</code> API returned. </p>
        pub fn control(mut self, input: crate::model::Control) -> Self {
            self.control = Some(input);
            self
        }
        /// <p> The new control that the <code>CreateControl</code> API returned. </p>
        pub fn set_control(mut self, input: std::option::Option<crate::model::Control>) -> Self {
            self.control = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateControlOutput`](crate::output::CreateControlOutput).
        pub fn build(self) -> crate::output::CreateControlOutput {
            crate::output::CreateControlOutput {
                control: self.control,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssessmentReportOutput {
    /// <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned. </p>
    #[doc(hidden)]
    pub assessment_report: std::option::Option<crate::model::AssessmentReport>,
    _request_id: Option<String>,
}
impl CreateAssessmentReportOutput {
    /// <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned. </p>
    pub fn assessment_report(&self) -> std::option::Option<&crate::model::AssessmentReport> {
        self.assessment_report.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAssessmentReportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssessmentReportOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentReportOutput`](crate::output::CreateAssessmentReportOutput).
    pub fn builder() -> crate::output::create_assessment_report_output::Builder {
        crate::output::create_assessment_report_output::Builder::default()
    }
}

/// See [`CreateAssessmentReportOutput`](crate::output::CreateAssessmentReportOutput).
pub mod create_assessment_report_output {

    /// A builder for [`CreateAssessmentReportOutput`](crate::output::CreateAssessmentReportOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment_report: std::option::Option<crate::model::AssessmentReport>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned. </p>
        pub fn assessment_report(mut self, input: crate::model::AssessmentReport) -> Self {
            self.assessment_report = Some(input);
            self
        }
        /// <p> The new assessment report that the <code>CreateAssessmentReport</code> API returned. </p>
        pub fn set_assessment_report(
            mut self,
            input: std::option::Option<crate::model::AssessmentReport>,
        ) -> Self {
            self.assessment_report = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAssessmentReportOutput`](crate::output::CreateAssessmentReportOutput).
        pub fn build(self) -> crate::output::CreateAssessmentReportOutput {
            crate::output::CreateAssessmentReportOutput {
                assessment_report: self.assessment_report,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssessmentFrameworkOutput {
    /// <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API returned. </p>
    #[doc(hidden)]
    pub framework: std::option::Option<crate::model::Framework>,
    _request_id: Option<String>,
}
impl CreateAssessmentFrameworkOutput {
    /// <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API returned. </p>
    pub fn framework(&self) -> std::option::Option<&crate::model::Framework> {
        self.framework.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAssessmentFrameworkOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssessmentFrameworkOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentFrameworkOutput`](crate::output::CreateAssessmentFrameworkOutput).
    pub fn builder() -> crate::output::create_assessment_framework_output::Builder {
        crate::output::create_assessment_framework_output::Builder::default()
    }
}

/// See [`CreateAssessmentFrameworkOutput`](crate::output::CreateAssessmentFrameworkOutput).
pub mod create_assessment_framework_output {

    /// A builder for [`CreateAssessmentFrameworkOutput`](crate::output::CreateAssessmentFrameworkOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) framework: std::option::Option<crate::model::Framework>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API returned. </p>
        pub fn framework(mut self, input: crate::model::Framework) -> Self {
            self.framework = Some(input);
            self
        }
        /// <p> The name of the new framework that the <code>CreateAssessmentFramework</code> API returned. </p>
        pub fn set_framework(
            mut self,
            input: std::option::Option<crate::model::Framework>,
        ) -> Self {
            self.framework = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAssessmentFrameworkOutput`](crate::output::CreateAssessmentFrameworkOutput).
        pub fn build(self) -> crate::output::CreateAssessmentFrameworkOutput {
            crate::output::CreateAssessmentFrameworkOutput {
                framework: self.framework,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssessmentOutput {
    /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
    #[doc(hidden)]
    pub assessment: std::option::Option<crate::model::Assessment>,
    _request_id: Option<String>,
}
impl CreateAssessmentOutput {
    /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
    pub fn assessment(&self) -> std::option::Option<&crate::model::Assessment> {
        self.assessment.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentOutput`](crate::output::CreateAssessmentOutput).
    pub fn builder() -> crate::output::create_assessment_output::Builder {
        crate::output::create_assessment_output::Builder::default()
    }
}

/// See [`CreateAssessmentOutput`](crate::output::CreateAssessmentOutput).
pub mod create_assessment_output {

    /// A builder for [`CreateAssessmentOutput`](crate::output::CreateAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) assessment: std::option::Option<crate::model::Assessment>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
        pub fn assessment(mut self, input: crate::model::Assessment) -> Self {
            self.assessment = Some(input);
            self
        }
        /// <p> An entity that defines the scope of audit evidence collected by Audit Manager. An Audit Manager assessment is an implementation of an Audit Manager framework. </p>
        pub fn set_assessment(
            mut self,
            input: std::option::Option<crate::model::Assessment>,
        ) -> Self {
            self.assessment = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAssessmentOutput`](crate::output::CreateAssessmentOutput).
        pub fn build(self) -> crate::output::CreateAssessmentOutput {
            crate::output::CreateAssessmentOutput {
                assessment: self.assessment,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControlOutput {
    /// <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API returned. </p>
    #[doc(hidden)]
    pub errors: std::option::Option<
        std::vec::Vec<crate::model::BatchImportEvidenceToAssessmentControlError>,
    >,
    _request_id: Option<String>,
}
impl BatchImportEvidenceToAssessmentControlOutput {
    /// <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API returned. </p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::model::BatchImportEvidenceToAssessmentControlError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchImportEvidenceToAssessmentControlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchImportEvidenceToAssessmentControlOutput {
    /// Creates a new builder-style object to manufacture [`BatchImportEvidenceToAssessmentControlOutput`](crate::output::BatchImportEvidenceToAssessmentControlOutput).
    pub fn builder() -> crate::output::batch_import_evidence_to_assessment_control_output::Builder {
        crate::output::batch_import_evidence_to_assessment_control_output::Builder::default()
    }
}

/// See [`BatchImportEvidenceToAssessmentControlOutput`](crate::output::BatchImportEvidenceToAssessmentControlOutput).
pub mod batch_import_evidence_to_assessment_control_output {

    /// A builder for [`BatchImportEvidenceToAssessmentControlOutput`](crate::output::BatchImportEvidenceToAssessmentControlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors: std::option::Option<
            std::vec::Vec<crate::model::BatchImportEvidenceToAssessmentControlError>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API returned. </p>
        pub fn errors(
            mut self,
            input: crate::model::BatchImportEvidenceToAssessmentControlError,
        ) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p> A list of errors that the <code>BatchImportEvidenceToAssessmentControl</code> API returned. </p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchImportEvidenceToAssessmentControlError>,
            >,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchImportEvidenceToAssessmentControlOutput`](crate::output::BatchImportEvidenceToAssessmentControlOutput).
        pub fn build(self) -> crate::output::BatchImportEvidenceToAssessmentControlOutput {
            crate::output::BatchImportEvidenceToAssessmentControlOutput {
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDisassociateAssessmentReportEvidenceOutput {
    /// <p> The identifier for the evidence. </p>
    #[doc(hidden)]
    pub evidence_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API returned. </p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
    _request_id: Option<String>,
}
impl BatchDisassociateAssessmentReportEvidenceOutput {
    /// <p> The identifier for the evidence. </p>
    pub fn evidence_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.evidence_ids.as_deref()
    }
    /// <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API returned. </p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::AssessmentReportEvidenceError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDisassociateAssessmentReportEvidenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDisassociateAssessmentReportEvidenceOutput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateAssessmentReportEvidenceOutput`](crate::output::BatchDisassociateAssessmentReportEvidenceOutput).
    pub fn builder() -> crate::output::batch_disassociate_assessment_report_evidence_output::Builder
    {
        crate::output::batch_disassociate_assessment_report_evidence_output::Builder::default()
    }
}

/// See [`BatchDisassociateAssessmentReportEvidenceOutput`](crate::output::BatchDisassociateAssessmentReportEvidenceOutput).
pub mod batch_disassociate_assessment_report_evidence_output {

    /// A builder for [`BatchDisassociateAssessmentReportEvidenceOutput`](crate::output::BatchDisassociateAssessmentReportEvidenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) errors:
            std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `evidence_ids`.
        ///
        /// To override the contents of this collection use [`set_evidence_ids`](Self::set_evidence_ids).
        ///
        /// <p> The identifier for the evidence. </p>
        pub fn evidence_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.evidence_ids.unwrap_or_default();
            v.push(input.into());
            self.evidence_ids = Some(v);
            self
        }
        /// <p> The identifier for the evidence. </p>
        pub fn set_evidence_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.evidence_ids = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API returned. </p>
        pub fn errors(mut self, input: crate::model::AssessmentReportEvidenceError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p> A list of errors that the <code>BatchDisassociateAssessmentReportEvidence</code> API returned. </p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDisassociateAssessmentReportEvidenceOutput`](crate::output::BatchDisassociateAssessmentReportEvidenceOutput).
        pub fn build(self) -> crate::output::BatchDisassociateAssessmentReportEvidenceOutput {
            crate::output::BatchDisassociateAssessmentReportEvidenceOutput {
                evidence_ids: self.evidence_ids,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDeleteDelegationByAssessmentOutput {
    /// <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub errors:
        std::option::Option<std::vec::Vec<crate::model::BatchDeleteDelegationByAssessmentError>>,
    _request_id: Option<String>,
}
impl BatchDeleteDelegationByAssessmentOutput {
    /// <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned. </p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::model::BatchDeleteDelegationByAssessmentError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDeleteDelegationByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDeleteDelegationByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteDelegationByAssessmentOutput`](crate::output::BatchDeleteDelegationByAssessmentOutput).
    pub fn builder() -> crate::output::batch_delete_delegation_by_assessment_output::Builder {
        crate::output::batch_delete_delegation_by_assessment_output::Builder::default()
    }
}

/// See [`BatchDeleteDelegationByAssessmentOutput`](crate::output::BatchDeleteDelegationByAssessmentOutput).
pub mod batch_delete_delegation_by_assessment_output {

    /// A builder for [`BatchDeleteDelegationByAssessmentOutput`](crate::output::BatchDeleteDelegationByAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) errors: std::option::Option<
            std::vec::Vec<crate::model::BatchDeleteDelegationByAssessmentError>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned. </p>
        pub fn errors(
            mut self,
            input: crate::model::BatchDeleteDelegationByAssessmentError,
        ) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p> A list of errors that the <code>BatchDeleteDelegationByAssessment</code> API returned. </p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchDeleteDelegationByAssessmentError>,
            >,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDeleteDelegationByAssessmentOutput`](crate::output::BatchDeleteDelegationByAssessmentOutput).
        pub fn build(self) -> crate::output::BatchDeleteDelegationByAssessmentOutput {
            crate::output::BatchDeleteDelegationByAssessmentOutput {
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateDelegationByAssessmentOutput {
    /// <p> The delegations that are associated with the assessment. </p>
    #[doc(hidden)]
    pub delegations: std::option::Option<std::vec::Vec<crate::model::Delegation>>,
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub errors:
        std::option::Option<std::vec::Vec<crate::model::BatchCreateDelegationByAssessmentError>>,
    _request_id: Option<String>,
}
impl BatchCreateDelegationByAssessmentOutput {
    /// <p> The delegations that are associated with the assessment. </p>
    pub fn delegations(&self) -> std::option::Option<&[crate::model::Delegation]> {
        self.delegations.as_deref()
    }
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::model::BatchCreateDelegationByAssessmentError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateDelegationByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateDelegationByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateDelegationByAssessmentOutput`](crate::output::BatchCreateDelegationByAssessmentOutput).
    pub fn builder() -> crate::output::batch_create_delegation_by_assessment_output::Builder {
        crate::output::batch_create_delegation_by_assessment_output::Builder::default()
    }
}

/// See [`BatchCreateDelegationByAssessmentOutput`](crate::output::BatchCreateDelegationByAssessmentOutput).
pub mod batch_create_delegation_by_assessment_output {

    /// A builder for [`BatchCreateDelegationByAssessmentOutput`](crate::output::BatchCreateDelegationByAssessmentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) delegations: std::option::Option<std::vec::Vec<crate::model::Delegation>>,
        pub(crate) errors: std::option::Option<
            std::vec::Vec<crate::model::BatchCreateDelegationByAssessmentError>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `delegations`.
        ///
        /// To override the contents of this collection use [`set_delegations`](Self::set_delegations).
        ///
        /// <p> The delegations that are associated with the assessment. </p>
        pub fn delegations(mut self, input: crate::model::Delegation) -> Self {
            let mut v = self.delegations.unwrap_or_default();
            v.push(input);
            self.delegations = Some(v);
            self
        }
        /// <p> The delegations that are associated with the assessment. </p>
        pub fn set_delegations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Delegation>>,
        ) -> Self {
            self.delegations = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
        pub fn errors(
            mut self,
            input: crate::model::BatchCreateDelegationByAssessmentError,
        ) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::BatchCreateDelegationByAssessmentError>,
            >,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchCreateDelegationByAssessmentOutput`](crate::output::BatchCreateDelegationByAssessmentOutput).
        pub fn build(self) -> crate::output::BatchCreateDelegationByAssessmentOutput {
            crate::output::BatchCreateDelegationByAssessmentOutput {
                delegations: self.delegations,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchAssociateAssessmentReportEvidenceOutput {
    /// <p> The list of evidence identifiers. </p>
    #[doc(hidden)]
    pub evidence_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API returned. </p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
    _request_id: Option<String>,
}
impl BatchAssociateAssessmentReportEvidenceOutput {
    /// <p> The list of evidence identifiers. </p>
    pub fn evidence_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.evidence_ids.as_deref()
    }
    /// <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API returned. </p>
    pub fn errors(&self) -> std::option::Option<&[crate::model::AssessmentReportEvidenceError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchAssociateAssessmentReportEvidenceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchAssociateAssessmentReportEvidenceOutput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateAssessmentReportEvidenceOutput`](crate::output::BatchAssociateAssessmentReportEvidenceOutput).
    pub fn builder() -> crate::output::batch_associate_assessment_report_evidence_output::Builder {
        crate::output::batch_associate_assessment_report_evidence_output::Builder::default()
    }
}

/// See [`BatchAssociateAssessmentReportEvidenceOutput`](crate::output::BatchAssociateAssessmentReportEvidenceOutput).
pub mod batch_associate_assessment_report_evidence_output {

    /// A builder for [`BatchAssociateAssessmentReportEvidenceOutput`](crate::output::BatchAssociateAssessmentReportEvidenceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) evidence_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) errors:
            std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `evidence_ids`.
        ///
        /// To override the contents of this collection use [`set_evidence_ids`](Self::set_evidence_ids).
        ///
        /// <p> The list of evidence identifiers. </p>
        pub fn evidence_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.evidence_ids.unwrap_or_default();
            v.push(input.into());
            self.evidence_ids = Some(v);
            self
        }
        /// <p> The list of evidence identifiers. </p>
        pub fn set_evidence_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.evidence_ids = input;
            self
        }
        /// Appends an item to `errors`.
        ///
        /// To override the contents of this collection use [`set_errors`](Self::set_errors).
        ///
        /// <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API returned. </p>
        pub fn errors(mut self, input: crate::model::AssessmentReportEvidenceError) -> Self {
            let mut v = self.errors.unwrap_or_default();
            v.push(input);
            self.errors = Some(v);
            self
        }
        /// <p> A list of errors that the <code>BatchAssociateAssessmentReportEvidence</code> API returned. </p>
        pub fn set_errors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AssessmentReportEvidenceError>>,
        ) -> Self {
            self.errors = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchAssociateAssessmentReportEvidenceOutput`](crate::output::BatchAssociateAssessmentReportEvidenceOutput).
        pub fn build(self) -> crate::output::BatchAssociateAssessmentReportEvidenceOutput {
            crate::output::BatchAssociateAssessmentReportEvidenceOutput {
                evidence_ids: self.evidence_ids,
                errors: self.errors,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateAssessmentReportEvidenceFolderOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for AssociateAssessmentReportEvidenceFolderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateAssessmentReportEvidenceFolderOutput {
    /// Creates a new builder-style object to manufacture [`AssociateAssessmentReportEvidenceFolderOutput`](crate::output::AssociateAssessmentReportEvidenceFolderOutput).
    pub fn builder() -> crate::output::associate_assessment_report_evidence_folder_output::Builder {
        crate::output::associate_assessment_report_evidence_folder_output::Builder::default()
    }
}

/// See [`AssociateAssessmentReportEvidenceFolderOutput`](crate::output::AssociateAssessmentReportEvidenceFolderOutput).
pub mod associate_assessment_report_evidence_folder_output {

    /// A builder for [`AssociateAssessmentReportEvidenceFolderOutput`](crate::output::AssociateAssessmentReportEvidenceFolderOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateAssessmentReportEvidenceFolderOutput`](crate::output::AssociateAssessmentReportEvidenceFolderOutput).
        pub fn build(self) -> crate::output::AssociateAssessmentReportEvidenceFolderOutput {
            crate::output::AssociateAssessmentReportEvidenceFolderOutput {
                _request_id: self._request_id,
            }
        }
    }
}
