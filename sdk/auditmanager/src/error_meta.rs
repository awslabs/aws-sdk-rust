// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p> Your account isn't registered with Audit Manager. Check the delegated administrator setup on the Audit Manager settings page, and try again. </p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> An internal service error occurred during the processing of your request. Try again later. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p> The resource that's specified in the request can't be found. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You've reached your account quota for this resource type. To perform the requested action, delete some existing resources or <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">request a quota increase</a> from the Service Quotas console. For a list of Audit Manager service quotas, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> The request has invalid or missing parameters. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError> for Error {
    fn from(err: crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError) -> Self {
        match err {
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError> for Error {
    fn from(err: crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError) -> Self {
        match err {
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_associate_assessment_report_evidence::BatchAssociateAssessmentReportEvidenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError> for Error {
    fn from(err: crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError) -> Self {
        match err {
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError> for Error {
    fn from(err: crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError) -> Self {
        match err {
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::batch_delete_delegation_by_assessment::BatchDeleteDelegationByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError> for Error {
    fn from(err: crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError) -> Self {
        match err {
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_disassociate_assessment_report_evidence::BatchDisassociateAssessmentReportEvidenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError> for Error {
    fn from(err: crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError) -> Self {
        match err {
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment::CreateAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment::CreateAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_assessment::CreateAssessmentError> for Error {
    fn from(err: crate::operation::create_assessment::CreateAssessmentError) -> Self {
        match err {
            crate::operation::create_assessment::CreateAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_assessment::CreateAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_assessment::CreateAssessmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_assessment::CreateAssessmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_assessment::CreateAssessmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_assessment::CreateAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment_framework::CreateAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment_framework::CreateAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_assessment_framework::CreateAssessmentFrameworkError> for Error {
    fn from(err: crate::operation::create_assessment_framework::CreateAssessmentFrameworkError) -> Self {
        match err {
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_assessment_framework::CreateAssessmentFrameworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment_report::CreateAssessmentReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_assessment_report::CreateAssessmentReportError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_assessment_report::CreateAssessmentReportError> for Error {
    fn from(err: crate::operation::create_assessment_report::CreateAssessmentReportError) -> Self {
        match err {
            crate::operation::create_assessment_report::CreateAssessmentReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_assessment_report::CreateAssessmentReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_assessment_report::CreateAssessmentReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_assessment_report::CreateAssessmentReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_assessment_report::CreateAssessmentReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_control::CreateControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_control::CreateControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_control::CreateControlError> for Error {
    fn from(err: crate::operation::create_control::CreateControlError) -> Self {
        match err {
            crate::operation::create_control::CreateControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_control::CreateControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_control::CreateControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_control::CreateControlError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_control::CreateControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_control::CreateControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment::DeleteAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment::DeleteAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_assessment::DeleteAssessmentError> for Error {
    fn from(err: crate::operation::delete_assessment::DeleteAssessmentError) -> Self {
        match err {
            crate::operation::delete_assessment::DeleteAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_assessment::DeleteAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_assessment::DeleteAssessmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_assessment::DeleteAssessmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_assessment::DeleteAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError> for Error {
    fn from(err: crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError) -> Self {
        match err {
            crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_assessment_framework::DeleteAssessmentFrameworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError> for Error {
    fn from(err: crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError) -> Self {
        match err {
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_assessment_framework_share::DeleteAssessmentFrameworkShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment_report::DeleteAssessmentReportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_assessment_report::DeleteAssessmentReportError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_assessment_report::DeleteAssessmentReportError> for Error {
    fn from(err: crate::operation::delete_assessment_report::DeleteAssessmentReportError) -> Self {
        match err {
            crate::operation::delete_assessment_report::DeleteAssessmentReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_assessment_report::DeleteAssessmentReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_assessment_report::DeleteAssessmentReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_assessment_report::DeleteAssessmentReportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_assessment_report::DeleteAssessmentReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_control::DeleteControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_control::DeleteControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_control::DeleteControlError> for Error {
    fn from(err: crate::operation::delete_control::DeleteControlError) -> Self {
        match err {
            crate::operation::delete_control::DeleteControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_control::DeleteControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_control::DeleteControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_control::DeleteControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_control::DeleteControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_account::DeregisterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_account::DeregisterAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_account::DeregisterAccountError> for Error {
    fn from(err: crate::operation::deregister_account::DeregisterAccountError) -> Self {
        match err {
            crate::operation::deregister_account::DeregisterAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::deregister_account::DeregisterAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::deregister_account::DeregisterAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::deregister_account::DeregisterAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::deregister_account::DeregisterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError> for Error {
    fn from(err: crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError) -> Self {
        match err {
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::deregister_organization_admin_account::DeregisterOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError> for Error {
    fn from(err: crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError) -> Self {
        match err {
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_assessment_report_evidence_folder::DisassociateAssessmentReportEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_status::GetAccountStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account_status::GetAccountStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_status::GetAccountStatusError> for Error {
    fn from(err: crate::operation::get_account_status::GetAccountStatusError) -> Self {
        match err {
            crate::operation::get_account_status::GetAccountStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_account_status::GetAccountStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment::GetAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment::GetAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_assessment::GetAssessmentError> for Error {
    fn from(err: crate::operation::get_assessment::GetAssessmentError) -> Self {
        match err {
            crate::operation::get_assessment::GetAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_assessment::GetAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_assessment::GetAssessmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_assessment::GetAssessmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_assessment::GetAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment_framework::GetAssessmentFrameworkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment_framework::GetAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_assessment_framework::GetAssessmentFrameworkError> for Error {
    fn from(err: crate::operation::get_assessment_framework::GetAssessmentFrameworkError) -> Self {
        match err {
            crate::operation::get_assessment_framework::GetAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_assessment_framework::GetAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_assessment_framework::GetAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_assessment_framework::GetAssessmentFrameworkError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_assessment_framework::GetAssessmentFrameworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment_report_url::GetAssessmentReportUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_assessment_report_url::GetAssessmentReportUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_assessment_report_url::GetAssessmentReportUrlError> for Error {
    fn from(err: crate::operation::get_assessment_report_url::GetAssessmentReportUrlError) -> Self {
        match err {
            crate::operation::get_assessment_report_url::GetAssessmentReportUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_assessment_report_url::GetAssessmentReportUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_assessment_report_url::GetAssessmentReportUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_assessment_report_url::GetAssessmentReportUrlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_assessment_report_url::GetAssessmentReportUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_change_logs::GetChangeLogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_change_logs::GetChangeLogsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_change_logs::GetChangeLogsError> for Error {
    fn from(err: crate::operation::get_change_logs::GetChangeLogsError) -> Self {
        match err {
            crate::operation::get_change_logs::GetChangeLogsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_change_logs::GetChangeLogsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_change_logs::GetChangeLogsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_change_logs::GetChangeLogsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_change_logs::GetChangeLogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_control::GetControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_control::GetControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_control::GetControlError> for Error {
    fn from(err: crate::operation::get_control::GetControlError) -> Self {
        match err {
            crate::operation::get_control::GetControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_control::GetControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_control::GetControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_control::GetControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_control::GetControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_delegations::GetDelegationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_delegations::GetDelegationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_delegations::GetDelegationsError> for Error {
    fn from(err: crate::operation::get_delegations::GetDelegationsError) -> Self {
        match err {
            crate::operation::get_delegations::GetDelegationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_delegations::GetDelegationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_delegations::GetDelegationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_delegations::GetDelegationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence::GetEvidenceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence::GetEvidenceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence::GetEvidenceError> for Error {
    fn from(err: crate::operation::get_evidence::GetEvidenceError) -> Self {
        match err {
            crate::operation::get_evidence::GetEvidenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_evidence::GetEvidenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_evidence::GetEvidenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_evidence::GetEvidenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_evidence::GetEvidenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError> for Error {
    fn from(err: crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError) -> Self {
        match err {
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError> for Error {
    fn from(err: crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError) -> Self {
        match err {
            crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_evidence_file_upload_url::GetEvidenceFileUploadUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence_folder::GetEvidenceFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_evidence_folder::GetEvidenceFolderError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence_folder::GetEvidenceFolderError> for Error {
    fn from(err: crate::operation::get_evidence_folder::GetEvidenceFolderError) -> Self {
        match err {
            crate::operation::get_evidence_folder::GetEvidenceFolderError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_evidence_folder::GetEvidenceFolderError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_evidence_folder::GetEvidenceFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_evidence_folder::GetEvidenceFolderError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_evidence_folder::GetEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError> for Error {
    fn from(err: crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError) -> Self {
        match err {
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_evidence_folders_by_assessment::GetEvidenceFoldersByAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError> for Error {
    fn from(err: crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError) -> Self {
        match err {
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_evidence_folders_by_assessment_control::GetEvidenceFoldersByAssessmentControlError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_insights::GetInsightsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_insights::GetInsightsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_insights::GetInsightsError> for Error {
    fn from(err: crate::operation::get_insights::GetInsightsError) -> Self {
        match err {
            crate::operation::get_insights::GetInsightsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_insights::GetInsightsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_insights::GetInsightsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError> for Error {
    fn from(err: crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError) -> Self {
        match err {
            crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_insights_by_assessment::GetInsightsByAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError> for Error {
    fn from(err: crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError) -> Self {
        match err {
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_organization_admin_account::GetOrganizationAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_services_in_scope::GetServicesInScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_services_in_scope::GetServicesInScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_services_in_scope::GetServicesInScopeError> for Error {
    fn from(err: crate::operation::get_services_in_scope::GetServicesInScopeError) -> Self {
        match err {
            crate::operation::get_services_in_scope::GetServicesInScopeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_services_in_scope::GetServicesInScopeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_services_in_scope::GetServicesInScopeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_services_in_scope::GetServicesInScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_settings::GetSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_settings::GetSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_settings::GetSettingsError> for Error {
    fn from(err: crate::operation::get_settings::GetSettingsError) -> Self {
        match err {
            crate::operation::get_settings::GetSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_settings::GetSettingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_settings::GetSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError> for Error {
    fn from(err: crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError) -> Self {
        match err {
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_assessment_control_insights_by_control_domain::ListAssessmentControlInsightsByControlDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError> for Error {
    fn from(err: crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError) -> Self {
        match err {
            crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_assessment_frameworks::ListAssessmentFrameworksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError> for Error {
    fn from(err: crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError) -> Self {
        match err {
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_assessment_framework_share_requests::ListAssessmentFrameworkShareRequestsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessment_reports::ListAssessmentReportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessment_reports::ListAssessmentReportsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assessment_reports::ListAssessmentReportsError> for Error {
    fn from(err: crate::operation::list_assessment_reports::ListAssessmentReportsError) -> Self {
        match err {
            crate::operation::list_assessment_reports::ListAssessmentReportsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_assessment_reports::ListAssessmentReportsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_assessment_reports::ListAssessmentReportsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_assessment_reports::ListAssessmentReportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessments::ListAssessmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_assessments::ListAssessmentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_assessments::ListAssessmentsError> for Error {
    fn from(err: crate::operation::list_assessments::ListAssessmentsError) -> Self {
        match err {
            crate::operation::list_assessments::ListAssessmentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_assessments::ListAssessmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_assessments::ListAssessmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_assessments::ListAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_control_domain_insights::ListControlDomainInsightsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_control_domain_insights::ListControlDomainInsightsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_control_domain_insights::ListControlDomainInsightsError> for Error {
    fn from(err: crate::operation::list_control_domain_insights::ListControlDomainInsightsError) -> Self {
        match err {
            crate::operation::list_control_domain_insights::ListControlDomainInsightsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_control_domain_insights::ListControlDomainInsightsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_control_domain_insights::ListControlDomainInsightsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_control_domain_insights::ListControlDomainInsightsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_control_domain_insights::ListControlDomainInsightsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError> for Error {
    fn from(err: crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError) -> Self {
        match err {
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_control_domain_insights_by_assessment::ListControlDomainInsightsByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError> for Error {
    fn from(err: crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError) -> Self {
        match err {
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_control_insights_by_control_domain::ListControlInsightsByControlDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_controls::ListControlsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_controls::ListControlsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_controls::ListControlsError> for Error {
    fn from(err: crate::operation::list_controls::ListControlsError) -> Self {
        match err {
            crate::operation::list_controls::ListControlsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_controls::ListControlsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_controls::ListControlsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_controls::ListControlsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError> for Error {
    fn from(err: crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError) -> Self {
        match err {
            crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_keywords_for_data_source::ListKeywordsForDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_notifications::ListNotificationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_notifications::ListNotificationsError> for Error {
    fn from(err: crate::operation::list_notifications::ListNotificationsError) -> Self {
        match err {
            crate::operation::list_notifications::ListNotificationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_notifications::ListNotificationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_notifications::ListNotificationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_notifications::ListNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_account::RegisterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_account::RegisterAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_account::RegisterAccountError> for Error {
    fn from(err: crate::operation::register_account::RegisterAccountError) -> Self {
        match err {
            crate::operation::register_account::RegisterAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::register_account::RegisterAccountError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::register_account::RegisterAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::register_account::RegisterAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::register_account::RegisterAccountError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::register_account::RegisterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError> for Error {
    fn from(err: crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError) -> Self {
        match err {
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::register_organization_admin_account::RegisterOrganizationAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError> for Error {
    fn from(err: crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError) -> Self {
        match err {
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment::UpdateAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment::UpdateAssessmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment::UpdateAssessmentError> for Error {
    fn from(err: crate::operation::update_assessment::UpdateAssessmentError) -> Self {
        match err {
            crate::operation::update_assessment::UpdateAssessmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_assessment::UpdateAssessmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_assessment::UpdateAssessmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_assessment::UpdateAssessmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_assessment::UpdateAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_control::UpdateAssessmentControlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_control::UpdateAssessmentControlError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment_control::UpdateAssessmentControlError> for Error {
    fn from(err: crate::operation::update_assessment_control::UpdateAssessmentControlError) -> Self {
        match err {
            crate::operation::update_assessment_control::UpdateAssessmentControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assessment_control::UpdateAssessmentControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_assessment_control::UpdateAssessmentControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assessment_control::UpdateAssessmentControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_assessment_control::UpdateAssessmentControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError> for Error {
    fn from(err: crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError) -> Self {
        match err {
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_assessment_control_set_status::UpdateAssessmentControlSetStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError> for Error {
    fn from(err: crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError) -> Self {
        match err {
            crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_assessment_framework::UpdateAssessmentFrameworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError> for Error {
    fn from(err: crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError) -> Self {
        match err {
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_assessment_framework_share::UpdateAssessmentFrameworkShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_status::UpdateAssessmentStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_assessment_status::UpdateAssessmentStatusError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_assessment_status::UpdateAssessmentStatusError> for Error {
    fn from(err: crate::operation::update_assessment_status::UpdateAssessmentStatusError) -> Self {
        match err {
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_assessment_status::UpdateAssessmentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_control::UpdateControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_control::UpdateControlError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_control::UpdateControlError> for Error {
    fn from(err: crate::operation::update_control::UpdateControlError) -> Self {
        match err {
            crate::operation::update_control::UpdateControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_control::UpdateControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_control::UpdateControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_control::UpdateControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_control::UpdateControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_settings::UpdateSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_settings::UpdateSettingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_settings::UpdateSettingsError> for Error {
    fn from(err: crate::operation::update_settings::UpdateSettingsError) -> Self {
        match err {
            crate::operation::update_settings::UpdateSettingsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_settings::UpdateSettingsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_settings::UpdateSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_settings::UpdateSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError> for Error {
    fn from(err: crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError) -> Self {
        match err {
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::validate_assessment_report_integrity::ValidateAssessmentReportIntegrityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
