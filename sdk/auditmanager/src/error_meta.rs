// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p> Your account isn't registered with Audit Manager. Check the delegated administrator setup on the Audit Manager settings page, and try again. </p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p> An internal service error occurred during the processing of your request. Try again later. </p>
    InternalServerException(crate::error::InternalServerException),
    /// <p> The resource that's specified in the request can't be found. </p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>You've reached your account quota for this resource type. To perform the requested action, delete some existing resources or <a href="https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html">request a quota increase</a> from the Service Quotas console. For a list of Audit Manager service quotas, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p> The request has invalid or missing parameters. </p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociateAssessmentReportEvidenceFolderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateAssessmentReportEvidenceFolderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateAssessmentReportEvidenceFolderError> for Error {
    fn from(err: crate::error::AssociateAssessmentReportEvidenceFolderError) -> Self {
        match err {
            crate::error::AssociateAssessmentReportEvidenceFolderError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::AssociateAssessmentReportEvidenceFolderError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::AssociateAssessmentReportEvidenceFolderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateAssessmentReportEvidenceFolderError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::AssociateAssessmentReportEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateAssessmentReportEvidenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchAssociateAssessmentReportEvidenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchAssociateAssessmentReportEvidenceError> for Error {
    fn from(err: crate::error::BatchAssociateAssessmentReportEvidenceError) -> Self {
        match err {
            crate::error::BatchAssociateAssessmentReportEvidenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchAssociateAssessmentReportEvidenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchAssociateAssessmentReportEvidenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchAssociateAssessmentReportEvidenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchAssociateAssessmentReportEvidenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchCreateDelegationByAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchCreateDelegationByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateDelegationByAssessmentError> for Error {
    fn from(err: crate::error::BatchCreateDelegationByAssessmentError) -> Self {
        match err {
            crate::error::BatchCreateDelegationByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchCreateDelegationByAssessmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::BatchCreateDelegationByAssessmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::BatchCreateDelegationByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchCreateDelegationByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteDelegationByAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchDeleteDelegationByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteDelegationByAssessmentError> for Error {
    fn from(err: crate::error::BatchDeleteDelegationByAssessmentError) -> Self {
        match err {
            crate::error::BatchDeleteDelegationByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::BatchDeleteDelegationByAssessmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::BatchDeleteDelegationByAssessmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDeleteDelegationByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::BatchDeleteDelegationByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateAssessmentReportEvidenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchDisassociateAssessmentReportEvidenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDisassociateAssessmentReportEvidenceError> for Error {
    fn from(err: crate::error::BatchDisassociateAssessmentReportEvidenceError) -> Self {
        match err {
            crate::error::BatchDisassociateAssessmentReportEvidenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchDisassociateAssessmentReportEvidenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchDisassociateAssessmentReportEvidenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchDisassociateAssessmentReportEvidenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchDisassociateAssessmentReportEvidenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::BatchImportEvidenceToAssessmentControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::BatchImportEvidenceToAssessmentControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchImportEvidenceToAssessmentControlError> for Error {
    fn from(err: crate::error::BatchImportEvidenceToAssessmentControlError) -> Self {
        match err {
            crate::error::BatchImportEvidenceToAssessmentControlError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::BatchImportEvidenceToAssessmentControlError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::BatchImportEvidenceToAssessmentControlError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::BatchImportEvidenceToAssessmentControlError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::BatchImportEvidenceToAssessmentControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssessmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssessmentError> for Error {
    fn from(err: crate::error::CreateAssessmentError) -> Self {
        match err {
            crate::error::CreateAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAssessmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssessmentFrameworkError> for Error {
    fn from(err: crate::error::CreateAssessmentFrameworkError) -> Self {
        match err {
            crate::error::CreateAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAssessmentFrameworkError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAssessmentFrameworkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAssessmentReportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAssessmentReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAssessmentReportError> for Error {
    fn from(err: crate::error::CreateAssessmentReportError) -> Self {
        match err {
            crate::error::CreateAssessmentReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateAssessmentReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateAssessmentReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateAssessmentReportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateAssessmentReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateControlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateControlError> for Error {
    fn from(err: crate::error::CreateControlError) -> Self {
        match err {
            crate::error::CreateControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateControlError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentError> for Error {
    fn from(err: crate::error::DeleteAssessmentError) -> Self {
        match err {
            crate::error::DeleteAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentFrameworkError> for Error {
    fn from(err: crate::error::DeleteAssessmentFrameworkError) -> Self {
        match err {
            crate::error::DeleteAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAssessmentFrameworkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentFrameworkShareError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAssessmentFrameworkShareError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentFrameworkShareError> for Error {
    fn from(err: crate::error::DeleteAssessmentFrameworkShareError) -> Self {
        match err {
            crate::error::DeleteAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAssessmentFrameworkShareError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentReportError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAssessmentReportError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAssessmentReportError> for Error {
    fn from(err: crate::error::DeleteAssessmentReportError) -> Self {
        match err {
            crate::error::DeleteAssessmentReportError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteAssessmentReportError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteAssessmentReportError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAssessmentReportError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteAssessmentReportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteControlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteControlError> for Error {
    fn from(err: crate::error::DeleteControlError) -> Self {
        match err {
            crate::error::DeleteControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterAccountError> for Error {
    fn from(err: crate::error::DeregisterAccountError) -> Self {
        match err {
            crate::error::DeregisterAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeregisterAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeregisterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeregisterAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DeregisterOrganizationAdminAccountError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::DeregisterOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::DeregisterOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeregisterOrganizationAdminAccountError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeregisterOrganizationAdminAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DeregisterOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeregisterOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateAssessmentReportEvidenceFolderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateAssessmentReportEvidenceFolderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateAssessmentReportEvidenceFolderError> for Error {
    fn from(err: crate::error::DisassociateAssessmentReportEvidenceFolderError) -> Self {
        match err {
            crate::error::DisassociateAssessmentReportEvidenceFolderError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DisassociateAssessmentReportEvidenceFolderError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DisassociateAssessmentReportEvidenceFolderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateAssessmentReportEvidenceFolderError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DisassociateAssessmentReportEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAccountStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountStatusError> for Error {
    fn from(err: crate::error::GetAccountStatusError) -> Self {
        match err {
            crate::error::GetAccountStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAccountStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAssessmentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAssessmentError> for Error {
    fn from(err: crate::error::GetAssessmentError) -> Self {
        match err {
            crate::error::GetAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAssessmentFrameworkError> for Error {
    fn from(err: crate::error::GetAssessmentFrameworkError) -> Self {
        match err {
            crate::error::GetAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAssessmentFrameworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAssessmentReportUrlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAssessmentReportUrlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAssessmentReportUrlError> for Error {
    fn from(err: crate::error::GetAssessmentReportUrlError) -> Self {
        match err {
            crate::error::GetAssessmentReportUrlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAssessmentReportUrlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetAssessmentReportUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAssessmentReportUrlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAssessmentReportUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChangeLogsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetChangeLogsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChangeLogsError> for Error {
    fn from(err: crate::error::GetChangeLogsError) -> Self {
        match err {
            crate::error::GetChangeLogsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetChangeLogsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetChangeLogsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetChangeLogsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetChangeLogsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetControlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetControlError> for Error {
    fn from(err: crate::error::GetControlError) -> Self {
        match err {
            crate::error::GetControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDelegationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDelegationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDelegationsError> for Error {
    fn from(err: crate::error::GetDelegationsError) -> Self {
        match err {
            crate::error::GetDelegationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetDelegationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetDelegationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetDelegationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEvidenceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetEvidenceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvidenceError> for Error {
    fn from(err: crate::error::GetEvidenceError) -> Self {
        match err {
            crate::error::GetEvidenceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEvidenceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEvidenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEvidenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEvidenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEvidenceByEvidenceFolderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEvidenceByEvidenceFolderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvidenceByEvidenceFolderError> for Error {
    fn from(err: crate::error::GetEvidenceByEvidenceFolderError) -> Self {
        match err {
            crate::error::GetEvidenceByEvidenceFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEvidenceByEvidenceFolderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEvidenceByEvidenceFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEvidenceByEvidenceFolderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEvidenceByEvidenceFolderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEvidenceFolderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEvidenceFolderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvidenceFolderError> for Error {
    fn from(err: crate::error::GetEvidenceFolderError) -> Self {
        match err {
            crate::error::GetEvidenceFolderError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEvidenceFolderError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEvidenceFolderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEvidenceFolderError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEvidenceFolderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetEvidenceFoldersByAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetEvidenceFoldersByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvidenceFoldersByAssessmentError> for Error {
    fn from(err: crate::error::GetEvidenceFoldersByAssessmentError) -> Self {
        match err {
            crate::error::GetEvidenceFoldersByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetEvidenceFoldersByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetEvidenceFoldersByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetEvidenceFoldersByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetEvidenceFoldersByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetEvidenceFoldersByAssessmentControlError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetEvidenceFoldersByAssessmentControlError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEvidenceFoldersByAssessmentControlError> for Error {
    fn from(err: crate::error::GetEvidenceFoldersByAssessmentControlError) -> Self {
        match err {
            crate::error::GetEvidenceFoldersByAssessmentControlError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::GetEvidenceFoldersByAssessmentControlError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::GetEvidenceFoldersByAssessmentControlError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetEvidenceFoldersByAssessmentControlError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::GetEvidenceFoldersByAssessmentControlError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInsightsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetInsightsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInsightsError> for Error {
    fn from(err: crate::error::GetInsightsError) -> Self {
        match err {
            crate::error::GetInsightsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInsightsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetInsightsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInsightsByAssessmentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInsightsByAssessmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInsightsByAssessmentError> for Error {
    fn from(err: crate::error::GetInsightsByAssessmentError) -> Self {
        match err {
            crate::error::GetInsightsByAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetInsightsByAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetInsightsByAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetInsightsByAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetInsightsByAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetOrganizationAdminAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::GetOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::GetOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetOrganizationAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServicesInScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServicesInScopeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServicesInScopeError> for Error {
    fn from(err: crate::error::GetServicesInScopeError) -> Self {
        match err {
            crate::error::GetServicesInScopeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServicesInScopeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetServicesInScopeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetServicesInScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSettingsError> for Error {
    fn from(err: crate::error::GetSettingsError) -> Self {
        match err {
            crate::error::GetSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAssessmentControlInsightsByControlDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAssessmentControlInsightsByControlDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentControlInsightsByControlDomainError> for Error {
    fn from(err: crate::error::ListAssessmentControlInsightsByControlDomainError) -> Self {
        match err {
            crate::error::ListAssessmentControlInsightsByControlDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAssessmentControlInsightsByControlDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::ListAssessmentControlInsightsByControlDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListAssessmentControlInsightsByControlDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListAssessmentControlInsightsByControlDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentFrameworksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentFrameworksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentFrameworksError> for Error {
    fn from(err: crate::error::ListAssessmentFrameworksError) -> Self {
        match err {
            crate::error::ListAssessmentFrameworksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentFrameworksError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAssessmentFrameworksError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAssessmentFrameworksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAssessmentFrameworkShareRequestsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAssessmentFrameworkShareRequestsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentFrameworkShareRequestsError> for Error {
    fn from(err: crate::error::ListAssessmentFrameworkShareRequestsError) -> Self {
        match err {
            crate::error::ListAssessmentFrameworkShareRequestsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListAssessmentFrameworkShareRequestsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListAssessmentFrameworkShareRequestsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAssessmentFrameworkShareRequestsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentReportsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentReportsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentReportsError> for Error {
    fn from(err: crate::error::ListAssessmentReportsError) -> Self {
        match err {
            crate::error::ListAssessmentReportsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentReportsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAssessmentReportsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAssessmentReportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAssessmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAssessmentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssessmentsError> for Error {
    fn from(err: crate::error::ListAssessmentsError) -> Self {
        match err {
            crate::error::ListAssessmentsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListAssessmentsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListAssessmentsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListAssessmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListControlDomainInsightsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListControlDomainInsightsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListControlDomainInsightsError> for Error {
    fn from(err: crate::error::ListControlDomainInsightsError) -> Self {
        match err {
            crate::error::ListControlDomainInsightsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListControlDomainInsightsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListControlDomainInsightsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListControlDomainInsightsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListControlDomainInsightsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListControlDomainInsightsByAssessmentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListControlDomainInsightsByAssessmentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListControlDomainInsightsByAssessmentError> for Error {
    fn from(err: crate::error::ListControlDomainInsightsByAssessmentError) -> Self {
        match err {
            crate::error::ListControlDomainInsightsByAssessmentError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::ListControlDomainInsightsByAssessmentError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListControlDomainInsightsByAssessmentError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListControlDomainInsightsByAssessmentError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::error::ListControlDomainInsightsByAssessmentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListControlInsightsByControlDomainError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListControlInsightsByControlDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListControlInsightsByControlDomainError> for Error {
    fn from(err: crate::error::ListControlInsightsByControlDomainError) -> Self {
        match err {
            crate::error::ListControlInsightsByControlDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListControlInsightsByControlDomainError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ListControlInsightsByControlDomainError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListControlInsightsByControlDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListControlInsightsByControlDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListControlsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListControlsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListControlsError> for Error {
    fn from(err: crate::error::ListControlsError) -> Self {
        match err {
            crate::error::ListControlsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListControlsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListControlsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListControlsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListKeywordsForDataSourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListKeywordsForDataSourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListKeywordsForDataSourceError> for Error {
    fn from(err: crate::error::ListKeywordsForDataSourceError) -> Self {
        match err {
            crate::error::ListKeywordsForDataSourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListKeywordsForDataSourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListKeywordsForDataSourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListKeywordsForDataSourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListNotificationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListNotificationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListNotificationsError> for Error {
    fn from(err: crate::error::ListNotificationsError) -> Self {
        match err {
            crate::error::ListNotificationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListNotificationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListNotificationsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListNotificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterAccountError> for Error {
    fn from(err: crate::error::RegisterAccountError) -> Self {
        match err {
            crate::error::RegisterAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RegisterAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RegisterOrganizationAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterOrganizationAdminAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterOrganizationAdminAccountError> for Error {
    fn from(err: crate::error::RegisterOrganizationAdminAccountError) -> Self {
        match err {
            crate::error::RegisterOrganizationAdminAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RegisterOrganizationAdminAccountError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterOrganizationAdminAccountError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::RegisterOrganizationAdminAccountError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RegisterOrganizationAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAssessmentFrameworkShareError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAssessmentFrameworkShareError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAssessmentFrameworkShareError> for Error {
    fn from(err: crate::error::StartAssessmentFrameworkShareError) -> Self {
        match err {
            crate::error::StartAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartAssessmentFrameworkShareError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentError> for Error {
    fn from(err: crate::error::UpdateAssessmentError) -> Self {
        match err {
            crate::error::UpdateAssessmentError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAssessmentError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentControlError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentControlError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentControlError> for Error {
    fn from(err: crate::error::UpdateAssessmentControlError) -> Self {
        match err {
            crate::error::UpdateAssessmentControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAssessmentControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentControlSetStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAssessmentControlSetStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentControlSetStatusError> for Error {
    fn from(err: crate::error::UpdateAssessmentControlSetStatusError) -> Self {
        match err {
            crate::error::UpdateAssessmentControlSetStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentControlSetStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentControlSetStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateAssessmentControlSetStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentControlSetStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentFrameworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentFrameworkError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentFrameworkError> for Error {
    fn from(err: crate::error::UpdateAssessmentFrameworkError) -> Self {
        match err {
            crate::error::UpdateAssessmentFrameworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentFrameworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentFrameworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAssessmentFrameworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentFrameworkError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentFrameworkShareError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAssessmentFrameworkShareError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentFrameworkShareError> for Error {
    fn from(err: crate::error::UpdateAssessmentFrameworkShareError) -> Self {
        match err {
            crate::error::UpdateAssessmentFrameworkShareError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentFrameworkShareError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentFrameworkShareError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAssessmentFrameworkShareError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentFrameworkShareError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAssessmentStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAssessmentStatusError> for Error {
    fn from(err: crate::error::UpdateAssessmentStatusError) -> Self {
        match err {
            crate::error::UpdateAssessmentStatusError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateAssessmentStatusError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateAssessmentStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAssessmentStatusError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::UpdateAssessmentStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateAssessmentStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateControlError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateControlError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateControlError> for Error {
    fn from(err: crate::error::UpdateControlError) -> Self {
        match err {
            crate::error::UpdateControlError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateControlError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateControlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateControlError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateControlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSettingsError> for Error {
    fn from(err: crate::error::UpdateSettingsError) -> Self {
        match err {
            crate::error::UpdateSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSettingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ValidateAssessmentReportIntegrityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ValidateAssessmentReportIntegrityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ValidateAssessmentReportIntegrityError> for Error {
    fn from(err: crate::error::ValidateAssessmentReportIntegrityError) -> Self {
        match err {
            crate::error::ValidateAssessmentReportIntegrityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ValidateAssessmentReportIntegrityError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::ValidateAssessmentReportIntegrityError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ValidateAssessmentReportIntegrityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ValidateAssessmentReportIntegrityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
