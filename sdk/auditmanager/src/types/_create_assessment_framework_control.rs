// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The control entity attributes that uniquely identify an existing control to be added to a framework in Audit Manager. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAssessmentFrameworkControl {
    /// <p> The unique identifier of the control. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
}
impl CreateAssessmentFrameworkControl {
    /// <p> The unique identifier of the control. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
}
impl CreateAssessmentFrameworkControl {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentFrameworkControl`](crate::types::CreateAssessmentFrameworkControl).
    pub fn builder() -> crate::types::builders::CreateAssessmentFrameworkControlBuilder {
        crate::types::builders::CreateAssessmentFrameworkControlBuilder::default()
    }
}

/// A builder for [`CreateAssessmentFrameworkControl`](crate::types::CreateAssessmentFrameworkControl).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAssessmentFrameworkControlBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
}
impl CreateAssessmentFrameworkControlBuilder {
    /// <p> The unique identifier of the control. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p> The unique identifier of the control. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateAssessmentFrameworkControl`](crate::types::CreateAssessmentFrameworkControl).
    pub fn build(self) -> crate::types::CreateAssessmentFrameworkControl {
        crate::types::CreateAssessmentFrameworkControl { id: self.id }
    }
}
