// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An error entity for assessment report evidence errors. This is used to provide more meaningful errors than a simple string message. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssessmentReportEvidenceError {
    /// <p> The identifier for the evidence. </p>
    #[doc(hidden)]
    pub evidence_id: std::option::Option<std::string::String>,
    /// <p> The error code that was returned. </p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p> The error message that was returned. </p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl AssessmentReportEvidenceError {
    /// <p> The identifier for the evidence. </p>
    pub fn evidence_id(&self) -> std::option::Option<&str> {
        self.evidence_id.as_deref()
    }
    /// <p> The error code that was returned. </p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p> The error message that was returned. </p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl AssessmentReportEvidenceError {
    /// Creates a new builder-style object to manufacture [`AssessmentReportEvidenceError`](crate::types::AssessmentReportEvidenceError).
    pub fn builder() -> crate::types::builders::AssessmentReportEvidenceErrorBuilder {
        crate::types::builders::AssessmentReportEvidenceErrorBuilder::default()
    }
}

/// A builder for [`AssessmentReportEvidenceError`](crate::types::AssessmentReportEvidenceError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssessmentReportEvidenceErrorBuilder {
    pub(crate) evidence_id: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl AssessmentReportEvidenceErrorBuilder {
    /// <p> The identifier for the evidence. </p>
    pub fn evidence_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.evidence_id = Some(input.into());
        self
    }
    /// <p> The identifier for the evidence. </p>
    pub fn set_evidence_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.evidence_id = input;
        self
    }
    /// <p> The error code that was returned. </p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p> The error code that was returned. </p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p> The error message that was returned. </p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p> The error message that was returned. </p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`AssessmentReportEvidenceError`](crate::types::AssessmentReportEvidenceError).
    pub fn build(self) -> crate::types::AssessmentReportEvidenceError {
        crate::types::AssessmentReportEvidenceError {
            evidence_id: self.evidence_id,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
