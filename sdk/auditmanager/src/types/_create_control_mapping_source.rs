// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The control mapping fields that represent the source for evidence collection, along with related parameters and metadata. This doesn't contain <code>mappingID</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateControlMappingSource {
    /// <p> The name of the control mapping data source. </p>
    #[doc(hidden)]
    pub source_name: std::option::Option<std::string::String>,
    /// <p> The description of the data source that determines where Audit Manager collects evidence from for the control. </p>
    #[doc(hidden)]
    pub source_description: std::option::Option<std::string::String>,
    /// <p> The setup option for the data source, which reflects if the evidence collection is automated or manual. </p>
    #[doc(hidden)]
    pub source_set_up_option: std::option::Option<crate::types::SourceSetUpOption>,
    /// <p> Specifies one of the five types of data sources for evidence collection. </p>
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::SourceType>,
    /// <p> The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. </p>
    /// <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Config rules supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Security Hub controls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub source_keyword: std::option::Option<crate::types::SourceKeyword>,
    /// <p> The frequency of evidence collection for the control mapping source. </p>
    #[doc(hidden)]
    pub source_frequency: std::option::Option<crate::types::SourceFrequency>,
    /// <p> The instructions for troubleshooting the control. </p>
    #[doc(hidden)]
    pub troubleshooting_text: std::option::Option<std::string::String>,
}
impl CreateControlMappingSource {
    /// <p> The name of the control mapping data source. </p>
    pub fn source_name(&self) -> std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p> The description of the data source that determines where Audit Manager collects evidence from for the control. </p>
    pub fn source_description(&self) -> std::option::Option<&str> {
        self.source_description.as_deref()
    }
    /// <p> The setup option for the data source, which reflects if the evidence collection is automated or manual. </p>
    pub fn source_set_up_option(&self) -> std::option::Option<&crate::types::SourceSetUpOption> {
        self.source_set_up_option.as_ref()
    }
    /// <p> Specifies one of the five types of data sources for evidence collection. </p>
    pub fn source_type(&self) -> std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
    /// <p> The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. </p>
    /// <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Config rules supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Security Hub controls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li>
    /// </ul>
    pub fn source_keyword(&self) -> std::option::Option<&crate::types::SourceKeyword> {
        self.source_keyword.as_ref()
    }
    /// <p> The frequency of evidence collection for the control mapping source. </p>
    pub fn source_frequency(&self) -> std::option::Option<&crate::types::SourceFrequency> {
        self.source_frequency.as_ref()
    }
    /// <p> The instructions for troubleshooting the control. </p>
    pub fn troubleshooting_text(&self) -> std::option::Option<&str> {
        self.troubleshooting_text.as_deref()
    }
}
impl CreateControlMappingSource {
    /// Creates a new builder-style object to manufacture [`CreateControlMappingSource`](crate::types::CreateControlMappingSource).
    pub fn builder() -> crate::types::builders::CreateControlMappingSourceBuilder {
        crate::types::builders::CreateControlMappingSourceBuilder::default()
    }
}

/// A builder for [`CreateControlMappingSource`](crate::types::CreateControlMappingSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateControlMappingSourceBuilder {
    pub(crate) source_name: std::option::Option<std::string::String>,
    pub(crate) source_description: std::option::Option<std::string::String>,
    pub(crate) source_set_up_option: std::option::Option<crate::types::SourceSetUpOption>,
    pub(crate) source_type: std::option::Option<crate::types::SourceType>,
    pub(crate) source_keyword: std::option::Option<crate::types::SourceKeyword>,
    pub(crate) source_frequency: std::option::Option<crate::types::SourceFrequency>,
    pub(crate) troubleshooting_text: std::option::Option<std::string::String>,
}
impl CreateControlMappingSourceBuilder {
    /// <p> The name of the control mapping data source. </p>
    pub fn source_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_name = Some(input.into());
        self
    }
    /// <p> The name of the control mapping data source. </p>
    pub fn set_source_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p> The description of the data source that determines where Audit Manager collects evidence from for the control. </p>
    pub fn source_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_description = Some(input.into());
        self
    }
    /// <p> The description of the data source that determines where Audit Manager collects evidence from for the control. </p>
    pub fn set_source_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_description = input;
        self
    }
    /// <p> The setup option for the data source, which reflects if the evidence collection is automated or manual. </p>
    pub fn source_set_up_option(mut self, input: crate::types::SourceSetUpOption) -> Self {
        self.source_set_up_option = Some(input);
        self
    }
    /// <p> The setup option for the data source, which reflects if the evidence collection is automated or manual. </p>
    pub fn set_source_set_up_option(
        mut self,
        input: std::option::Option<crate::types::SourceSetUpOption>,
    ) -> Self {
        self.source_set_up_option = input;
        self
    }
    /// <p> Specifies one of the five types of data sources for evidence collection. </p>
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// <p> Specifies one of the five types of data sources for evidence collection. </p>
    pub fn set_source_type(mut self, input: std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p> The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. </p>
    /// <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Config rules supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Security Hub controls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li>
    /// </ul>
    pub fn source_keyword(mut self, input: crate::types::SourceKeyword) -> Self {
        self.source_keyword = Some(input);
        self
    }
    /// <p> The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. </p>
    /// <p> To learn more about the supported keywords that you can use when mapping a control data source, see the following pages in the <i>Audit Manager User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-ash.html">Config rules supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-config.html">Security Hub controls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-api.html">API calls supported by Audit Manager</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources-cloudtrail.html">CloudTrail event names supported by Audit Manager</a> </p> </li>
    /// </ul>
    pub fn set_source_keyword(
        mut self,
        input: std::option::Option<crate::types::SourceKeyword>,
    ) -> Self {
        self.source_keyword = input;
        self
    }
    /// <p> The frequency of evidence collection for the control mapping source. </p>
    pub fn source_frequency(mut self, input: crate::types::SourceFrequency) -> Self {
        self.source_frequency = Some(input);
        self
    }
    /// <p> The frequency of evidence collection for the control mapping source. </p>
    pub fn set_source_frequency(
        mut self,
        input: std::option::Option<crate::types::SourceFrequency>,
    ) -> Self {
        self.source_frequency = input;
        self
    }
    /// <p> The instructions for troubleshooting the control. </p>
    pub fn troubleshooting_text(mut self, input: impl Into<std::string::String>) -> Self {
        self.troubleshooting_text = Some(input.into());
        self
    }
    /// <p> The instructions for troubleshooting the control. </p>
    pub fn set_troubleshooting_text(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.troubleshooting_text = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateControlMappingSource`](crate::types::CreateControlMappingSource).
    pub fn build(self) -> crate::types::CreateControlMappingSource {
        crate::types::CreateControlMappingSource {
            source_name: self.source_name,
            source_description: self.source_description,
            source_set_up_option: self.source_set_up_option,
            source_type: self.source_type,
            source_keyword: self.source_keyword,
            source_frequency: self.source_frequency,
            troubleshooting_text: self.troubleshooting_text,
        }
    }
}
