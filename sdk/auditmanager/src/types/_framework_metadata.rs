// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The metadata of a framework, such as the name, ID, or description. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FrameworkMetadata {
    /// <p> The name of the framework. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The description of the framework. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The logo that's associated with the framework. </p>
    #[doc(hidden)]
    pub logo: std::option::Option<std::string::String>,
    /// <p> The compliance standard that's associated with the framework. For example, this could be PCI DSS or HIPAA. </p>
    #[doc(hidden)]
    pub compliance_type: std::option::Option<std::string::String>,
}
impl FrameworkMetadata {
    /// <p> The name of the framework. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The description of the framework. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The logo that's associated with the framework. </p>
    pub fn logo(&self) -> std::option::Option<&str> {
        self.logo.as_deref()
    }
    /// <p> The compliance standard that's associated with the framework. For example, this could be PCI DSS or HIPAA. </p>
    pub fn compliance_type(&self) -> std::option::Option<&str> {
        self.compliance_type.as_deref()
    }
}
impl FrameworkMetadata {
    /// Creates a new builder-style object to manufacture [`FrameworkMetadata`](crate::types::FrameworkMetadata).
    pub fn builder() -> crate::types::builders::FrameworkMetadataBuilder {
        crate::types::builders::FrameworkMetadataBuilder::default()
    }
}

/// A builder for [`FrameworkMetadata`](crate::types::FrameworkMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FrameworkMetadataBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) logo: std::option::Option<std::string::String>,
    pub(crate) compliance_type: std::option::Option<std::string::String>,
}
impl FrameworkMetadataBuilder {
    /// <p> The name of the framework. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the framework. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The description of the framework. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> The description of the framework. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The logo that's associated with the framework. </p>
    pub fn logo(mut self, input: impl Into<std::string::String>) -> Self {
        self.logo = Some(input.into());
        self
    }
    /// <p> The logo that's associated with the framework. </p>
    pub fn set_logo(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.logo = input;
        self
    }
    /// <p> The compliance standard that's associated with the framework. For example, this could be PCI DSS or HIPAA. </p>
    pub fn compliance_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.compliance_type = Some(input.into());
        self
    }
    /// <p> The compliance standard that's associated with the framework. For example, this could be PCI DSS or HIPAA. </p>
    pub fn set_compliance_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.compliance_type = input;
        self
    }
    /// Consumes the builder and constructs a [`FrameworkMetadata`](crate::types::FrameworkMetadata).
    pub fn build(self) -> crate::types::FrameworkMetadata {
        crate::types::FrameworkMetadata {
            name: self.name,
            description: self.description,
            logo: self.logo,
            compliance_type: self.compliance_type,
        }
    }
}
