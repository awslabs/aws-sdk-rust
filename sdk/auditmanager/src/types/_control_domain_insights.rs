// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the latest analytics data for a specific control domain.</p>
/// <p>Control domain insights are grouped by control domain, and ranked by the highest total count of non-compliant evidence.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ControlDomainInsights {
    /// <p>The name of the control domain. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the control domain. </p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The number of controls in the control domain that collected non-compliant evidence on the <code>lastUpdated</code> date. </p>
    #[doc(hidden)]
    pub controls_count_by_noncompliant_evidence: std::option::Option<i32>,
    /// <p>The total number of controls in the control domain. </p>
    #[doc(hidden)]
    pub total_controls_count: std::option::Option<i32>,
    /// <p>A breakdown of the compliance check status for the evidence that’s associated with the control domain. </p>
    #[doc(hidden)]
    pub evidence_insights: std::option::Option<crate::types::EvidenceInsights>,
    /// <p>The time when the control domain insights were last updated. </p>
    #[doc(hidden)]
    pub last_updated: std::option::Option<aws_smithy_types::DateTime>,
}
impl ControlDomainInsights {
    /// <p>The name of the control domain. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The unique identifier for the control domain. </p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The number of controls in the control domain that collected non-compliant evidence on the <code>lastUpdated</code> date. </p>
    pub fn controls_count_by_noncompliant_evidence(&self) -> std::option::Option<i32> {
        self.controls_count_by_noncompliant_evidence
    }
    /// <p>The total number of controls in the control domain. </p>
    pub fn total_controls_count(&self) -> std::option::Option<i32> {
        self.total_controls_count
    }
    /// <p>A breakdown of the compliance check status for the evidence that’s associated with the control domain. </p>
    pub fn evidence_insights(&self) -> std::option::Option<&crate::types::EvidenceInsights> {
        self.evidence_insights.as_ref()
    }
    /// <p>The time when the control domain insights were last updated. </p>
    pub fn last_updated(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
}
impl ControlDomainInsights {
    /// Creates a new builder-style object to manufacture [`ControlDomainInsights`](crate::types::ControlDomainInsights).
    pub fn builder() -> crate::types::builders::ControlDomainInsightsBuilder {
        crate::types::builders::ControlDomainInsightsBuilder::default()
    }
}

/// A builder for [`ControlDomainInsights`](crate::types::ControlDomainInsights).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ControlDomainInsightsBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) controls_count_by_noncompliant_evidence: std::option::Option<i32>,
    pub(crate) total_controls_count: std::option::Option<i32>,
    pub(crate) evidence_insights: std::option::Option<crate::types::EvidenceInsights>,
    pub(crate) last_updated: std::option::Option<aws_smithy_types::DateTime>,
}
impl ControlDomainInsightsBuilder {
    /// <p>The name of the control domain. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the control domain. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The unique identifier for the control domain. </p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the control domain. </p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The number of controls in the control domain that collected non-compliant evidence on the <code>lastUpdated</code> date. </p>
    pub fn controls_count_by_noncompliant_evidence(mut self, input: i32) -> Self {
        self.controls_count_by_noncompliant_evidence = Some(input);
        self
    }
    /// <p>The number of controls in the control domain that collected non-compliant evidence on the <code>lastUpdated</code> date. </p>
    pub fn set_controls_count_by_noncompliant_evidence(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.controls_count_by_noncompliant_evidence = input;
        self
    }
    /// <p>The total number of controls in the control domain. </p>
    pub fn total_controls_count(mut self, input: i32) -> Self {
        self.total_controls_count = Some(input);
        self
    }
    /// <p>The total number of controls in the control domain. </p>
    pub fn set_total_controls_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_controls_count = input;
        self
    }
    /// <p>A breakdown of the compliance check status for the evidence that’s associated with the control domain. </p>
    pub fn evidence_insights(mut self, input: crate::types::EvidenceInsights) -> Self {
        self.evidence_insights = Some(input);
        self
    }
    /// <p>A breakdown of the compliance check status for the evidence that’s associated with the control domain. </p>
    pub fn set_evidence_insights(
        mut self,
        input: std::option::Option<crate::types::EvidenceInsights>,
    ) -> Self {
        self.evidence_insights = input;
        self
    }
    /// <p>The time when the control domain insights were last updated. </p>
    pub fn last_updated(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated = Some(input);
        self
    }
    /// <p>The time when the control domain insights were last updated. </p>
    pub fn set_last_updated(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated = input;
        self
    }
    /// Consumes the builder and constructs a [`ControlDomainInsights`](crate::types::ControlDomainInsights).
    pub fn build(self) -> crate::types::ControlDomainInsights {
        crate::types::ControlDomainInsights {
            name: self.name,
            id: self.id,
            controls_count_by_noncompliant_evidence: self.controls_count_by_noncompliant_evidence,
            total_controls_count: self.total_controls_count,
            evidence_insights: self.evidence_insights,
            last_updated: self.last_updated,
        }
    }
}
