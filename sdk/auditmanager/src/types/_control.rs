// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> A control in Audit Manager. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct Control {
    /// <p> The Amazon Resource Name (ARN) of the control. </p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p> The unique identifier for the control. </p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p> Specifies whether the control is a standard control or a custom control.</p>
    pub r#type: ::std::option::Option<crate::types::ControlType>,
    /// <p> The name of the control. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The description of the control. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> The steps that you should follow to determine if the control has been satisfied. </p>
    pub testing_information: ::std::option::Option<::std::string::String>,
    /// <p> The title of the action plan for remediating the control. </p>
    pub action_plan_title: ::std::option::Option<::std::string::String>,
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub action_plan_instructions: ::std::option::Option<::std::string::String>,
    /// <p> The data source types that determine where Audit Manager collects evidence from for the control. </p>
    pub control_sources: ::std::option::Option<::std::string::String>,
    /// <p> The data mapping sources for the control. </p>
    pub control_mapping_sources: ::std::option::Option<::std::vec::Vec<crate::types::ControlMappingSource>>,
    /// <p> The time when the control was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The time when the control was most recently updated. </p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The user or role that created the control. </p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p> The user or role that most recently updated the control. </p>
    pub last_updated_by: ::std::option::Option<::std::string::String>,
    /// <p> The tags associated with the control. </p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl Control {
    /// <p> The Amazon Resource Name (ARN) of the control. </p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> The unique identifier for the control. </p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p> Specifies whether the control is a standard control or a custom control.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::ControlType> {
        self.r#type.as_ref()
    }
    /// <p> The name of the control. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The description of the control. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The steps that you should follow to determine if the control has been satisfied. </p>
    pub fn testing_information(&self) -> ::std::option::Option<&str> {
        self.testing_information.as_deref()
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn action_plan_title(&self) -> ::std::option::Option<&str> {
        self.action_plan_title.as_deref()
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn action_plan_instructions(&self) -> ::std::option::Option<&str> {
        self.action_plan_instructions.as_deref()
    }
    /// <p> The data source types that determine where Audit Manager collects evidence from for the control. </p>
    pub fn control_sources(&self) -> ::std::option::Option<&str> {
        self.control_sources.as_deref()
    }
    /// <p> The data mapping sources for the control. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_mapping_sources.is_none()`.
    pub fn control_mapping_sources(&self) -> &[crate::types::ControlMappingSource] {
        self.control_mapping_sources.as_deref().unwrap_or_default()
    }
    /// <p> The time when the control was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p> The time when the control was most recently updated. </p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p> The user or role that created the control. </p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p> The user or role that most recently updated the control. </p>
    pub fn last_updated_by(&self) -> ::std::option::Option<&str> {
        self.last_updated_by.as_deref()
    }
    /// <p> The tags associated with the control. </p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for Control {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("Control");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("testing_information", &"*** Sensitive Data Redacted ***");
        formatter.field("action_plan_title", &"*** Sensitive Data Redacted ***");
        formatter.field("action_plan_instructions", &"*** Sensitive Data Redacted ***");
        formatter.field("control_sources", &self.control_sources);
        formatter.field("control_mapping_sources", &self.control_mapping_sources);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("last_updated_by", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl Control {
    /// Creates a new builder-style object to manufacture [`Control`](crate::types::Control).
    pub fn builder() -> crate::types::builders::ControlBuilder {
        crate::types::builders::ControlBuilder::default()
    }
}

/// A builder for [`Control`](crate::types::Control).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ControlBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ControlType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) testing_information: ::std::option::Option<::std::string::String>,
    pub(crate) action_plan_title: ::std::option::Option<::std::string::String>,
    pub(crate) action_plan_instructions: ::std::option::Option<::std::string::String>,
    pub(crate) control_sources: ::std::option::Option<::std::string::String>,
    pub(crate) control_mapping_sources: ::std::option::Option<::std::vec::Vec<crate::types::ControlMappingSource>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_by: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl ControlBuilder {
    /// <p> The Amazon Resource Name (ARN) of the control. </p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the control. </p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the control. </p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p> The unique identifier for the control. </p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier for the control. </p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p> The unique identifier for the control. </p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p> Specifies whether the control is a standard control or a custom control.</p>
    pub fn r#type(mut self, input: crate::types::ControlType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p> Specifies whether the control is a standard control or a custom control.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ControlType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> Specifies whether the control is a standard control or a custom control.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ControlType> {
        &self.r#type
    }
    /// <p> The name of the control. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the control. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the control. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The description of the control. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of the control. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of the control. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The steps that you should follow to determine if the control has been satisfied. </p>
    pub fn testing_information(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.testing_information = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The steps that you should follow to determine if the control has been satisfied. </p>
    pub fn set_testing_information(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.testing_information = input;
        self
    }
    /// <p> The steps that you should follow to determine if the control has been satisfied. </p>
    pub fn get_testing_information(&self) -> &::std::option::Option<::std::string::String> {
        &self.testing_information
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn action_plan_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_plan_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn set_action_plan_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_plan_title = input;
        self
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn get_action_plan_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_plan_title
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn action_plan_instructions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_plan_instructions = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn set_action_plan_instructions(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_plan_instructions = input;
        self
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn get_action_plan_instructions(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_plan_instructions
    }
    /// <p> The data source types that determine where Audit Manager collects evidence from for the control. </p>
    pub fn control_sources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_sources = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The data source types that determine where Audit Manager collects evidence from for the control. </p>
    pub fn set_control_sources(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_sources = input;
        self
    }
    /// <p> The data source types that determine where Audit Manager collects evidence from for the control. </p>
    pub fn get_control_sources(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_sources
    }
    /// Appends an item to `control_mapping_sources`.
    ///
    /// To override the contents of this collection use [`set_control_mapping_sources`](Self::set_control_mapping_sources).
    ///
    /// <p> The data mapping sources for the control. </p>
    pub fn control_mapping_sources(mut self, input: crate::types::ControlMappingSource) -> Self {
        let mut v = self.control_mapping_sources.unwrap_or_default();
        v.push(input);
        self.control_mapping_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p> The data mapping sources for the control. </p>
    pub fn set_control_mapping_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ControlMappingSource>>) -> Self {
        self.control_mapping_sources = input;
        self
    }
    /// <p> The data mapping sources for the control. </p>
    pub fn get_control_mapping_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ControlMappingSource>> {
        &self.control_mapping_sources
    }
    /// <p> The time when the control was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time when the control was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p> The time when the control was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p> The time when the control was most recently updated. </p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p> The time when the control was most recently updated. </p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p> The time when the control was most recently updated. </p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p> The user or role that created the control. </p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The user or role that created the control. </p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p> The user or role that created the control. </p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p> The user or role that most recently updated the control. </p>
    pub fn last_updated_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_updated_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The user or role that most recently updated the control. </p>
    pub fn set_last_updated_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_updated_by = input;
        self
    }
    /// <p> The user or role that most recently updated the control. </p>
    pub fn get_last_updated_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_updated_by
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags associated with the control. </p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The tags associated with the control. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> The tags associated with the control. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`Control`](crate::types::Control).
    pub fn build(self) -> crate::types::Control {
        crate::types::Control {
            arn: self.arn,
            id: self.id,
            r#type: self.r#type,
            name: self.name,
            description: self.description,
            testing_information: self.testing_information,
            action_plan_title: self.action_plan_title,
            action_plan_instructions: self.action_plan_instructions,
            control_sources: self.control_sources,
            control_mapping_sources: self.control_mapping_sources,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            created_by: self.created_by,
            last_updated_by: self.last_updated_by,
            tags: self.tags,
        }
    }
}
impl ::std::fmt::Debug for ControlBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ControlBuilder");
        formatter.field("arn", &self.arn);
        formatter.field("id", &self.id);
        formatter.field("r#type", &self.r#type);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("testing_information", &"*** Sensitive Data Redacted ***");
        formatter.field("action_plan_title", &"*** Sensitive Data Redacted ***");
        formatter.field("action_plan_instructions", &"*** Sensitive Data Redacted ***");
        formatter.field("control_sources", &self.control_sources);
        formatter.field("control_mapping_sources", &self.control_mapping_sources);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("created_by", &"*** Sensitive Data Redacted ***");
        formatter.field("last_updated_by", &"*** Sensitive Data Redacted ***");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
