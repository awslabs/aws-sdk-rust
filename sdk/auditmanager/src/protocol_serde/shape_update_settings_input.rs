// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_settings_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_settings::UpdateSettingsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.default_assessment_reports_destination {
        #[allow(unused_mut)]
        let mut object_2 = object
            .key("defaultAssessmentReportsDestination")
            .start_object();
        crate::protocol_serde::shape_assessment_reports_destination::ser_assessment_reports_destination(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.default_process_owners {
        let mut array_4 = object.key("defaultProcessOwners").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_role::ser_role(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.deregistration_policy {
        #[allow(unused_mut)]
        let mut object_8 = object.key("deregistrationPolicy").start_object();
        crate::protocol_serde::shape_deregistration_policy::ser_deregistration_policy(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.evidence_finder_enabled {
        object.key("evidenceFinderEnabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.kms_key {
        object.key("kmsKey").string(var_10.as_str());
    }
    if let Some(var_11) = &input.sns_topic {
        object.key("snsTopic").string(var_11.as_str());
    }
    Ok(())
}
