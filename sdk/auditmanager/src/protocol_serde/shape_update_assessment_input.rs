// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_assessment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_assessment::UpdateAssessmentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.assessment_description {
        object.key("assessmentDescription").string(var_1.as_str());
    }
    if let Some(var_2) = &input.assessment_name {
        object.key("assessmentName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.assessment_reports_destination {
        #[allow(unused_mut)]
        let mut object_4 = object.key("assessmentReportsDestination").start_object();
        crate::protocol_serde::shape_assessment_reports_destination::ser_assessment_reports_destination(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.roles {
        let mut array_6 = object.key("roles").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_role::ser_role(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.scope {
        #[allow(unused_mut)]
        let mut object_10 = object.key("scope").start_object();
        crate::protocol_serde::shape_scope::ser_scope(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
