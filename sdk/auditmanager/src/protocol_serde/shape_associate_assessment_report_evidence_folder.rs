// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_associate_assessment_report_evidence_folder_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderOutput,
    crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled(generic),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccessDeniedException" => {
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::AccessDeniedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccessDeniedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_access_denied_exception::de_access_denied_exception_json_err(_response_body, output)
                        .map_err(
                            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    crate::serde_util::access_denied_exception_correct_errors(output).build().map_err(
                        crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                    )?
                };
                tmp
            })
        }
        "InternalServerException" => {
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::InternalServerException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InternalServerExceptionBuilder::default();
                    output = crate::protocol_serde::shape_internal_server_exception::de_internal_server_exception_json_err(_response_body, output)
                        .map_err(
                            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    crate::serde_util::internal_server_exception_correct_errors(output).build().map_err(
                        crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                    )?
                };
                tmp
            })
        }
        "ResourceNotFoundException" => {
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ResourceNotFoundExceptionBuilder::default();
                    output =
                        crate::protocol_serde::shape_resource_not_found_exception::de_resource_not_found_exception_json_err(_response_body, output)
                            .map_err(
                            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                        )?;
                    let output = output.meta(generic);
                    crate::serde_util::resource_not_found_exception_correct_errors(output).build().map_err(
                        crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                    )?
                };
                tmp
            })
        }
        "ValidationException" => {
            crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::ValidationException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ValidationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_validation_exception::de_validation_exception_json_err(_response_body, output).map_err(
                        crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                    )?;
                    let output = output.meta(generic);
                    crate::serde_util::validation_exception_correct_errors(output).build().map_err(
                        crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::unhandled,
                    )?
                };
                tmp
            })
        }
        _ => crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_associate_assessment_report_evidence_folder_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderOutput,
    crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::associate_assessment_report_evidence_folder::builders::AssociateAssessmentReportEvidenceFolderOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_associate_assessment_report_evidence_folder_input(
    input: &crate::operation::associate_assessment_report_evidence_folder::AssociateAssessmentReportEvidenceFolderInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_associate_assessment_report_evidence_folder_input::ser_associate_assessment_report_evidence_folder_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
