// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>
/// Associates an evidence folder to the specified assessment report in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateAssessmentReportEvidenceFolder {
    _private: (),
}
impl AssociateAssessmentReportEvidenceFolder {
    /// Creates a new builder-style object to manufacture [`AssociateAssessmentReportEvidenceFolderInput`](crate::input::AssociateAssessmentReportEvidenceFolderInput)
    pub fn builder() -> crate::input::associate_assessment_report_evidence_folder_input::Builder {
        crate::input::associate_assessment_report_evidence_folder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateAssessmentReportEvidenceFolder {
    type Output = std::result::Result<
        crate::output::AssociateAssessmentReportEvidenceFolderOutput,
        crate::error::AssociateAssessmentReportEvidenceFolderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_assessment_report_evidence_folder_error(
                response,
            )
        } else {
            crate::operation_deser::parse_associate_assessment_report_evidence_folder_response(
                response,
            )
        }
    }
}

/// <p>
/// Associates a list of evidence to an assessment report in an Audit Manager assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchAssociateAssessmentReportEvidence {
    _private: (),
}
impl BatchAssociateAssessmentReportEvidence {
    /// Creates a new builder-style object to manufacture [`BatchAssociateAssessmentReportEvidenceInput`](crate::input::BatchAssociateAssessmentReportEvidenceInput)
    pub fn builder() -> crate::input::batch_associate_assessment_report_evidence_input::Builder {
        crate::input::batch_associate_assessment_report_evidence_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchAssociateAssessmentReportEvidence {
    type Output = std::result::Result<
        crate::output::BatchAssociateAssessmentReportEvidenceOutput,
        crate::error::BatchAssociateAssessmentReportEvidenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_associate_assessment_report_evidence_error(response)
        } else {
            crate::operation_deser::parse_batch_associate_assessment_report_evidence_response(
                response,
            )
        }
    }
}

/// <p>
/// Create a batch of delegations for a specified assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateDelegationByAssessment {
    _private: (),
}
impl BatchCreateDelegationByAssessment {
    /// Creates a new builder-style object to manufacture [`BatchCreateDelegationByAssessmentInput`](crate::input::BatchCreateDelegationByAssessmentInput)
    pub fn builder() -> crate::input::batch_create_delegation_by_assessment_input::Builder {
        crate::input::batch_create_delegation_by_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchCreateDelegationByAssessment {
    type Output = std::result::Result<
        crate::output::BatchCreateDelegationByAssessmentOutput,
        crate::error::BatchCreateDelegationByAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_create_delegation_by_assessment_error(response)
        } else {
            crate::operation_deser::parse_batch_create_delegation_by_assessment_response(response)
        }
    }
}

/// <p>
/// Deletes the delegations in the specified Audit Manager assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteDelegationByAssessment {
    _private: (),
}
impl BatchDeleteDelegationByAssessment {
    /// Creates a new builder-style object to manufacture [`BatchDeleteDelegationByAssessmentInput`](crate::input::BatchDeleteDelegationByAssessmentInput)
    pub fn builder() -> crate::input::batch_delete_delegation_by_assessment_input::Builder {
        crate::input::batch_delete_delegation_by_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDeleteDelegationByAssessment {
    type Output = std::result::Result<
        crate::output::BatchDeleteDelegationByAssessmentOutput,
        crate::error::BatchDeleteDelegationByAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_delete_delegation_by_assessment_error(response)
        } else {
            crate::operation_deser::parse_batch_delete_delegation_by_assessment_response(response)
        }
    }
}

/// <p>
/// Disassociates a list of evidence from the specified assessment report in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchDisassociateAssessmentReportEvidence {
    _private: (),
}
impl BatchDisassociateAssessmentReportEvidence {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateAssessmentReportEvidenceInput`](crate::input::BatchDisassociateAssessmentReportEvidenceInput)
    pub fn builder() -> crate::input::batch_disassociate_assessment_report_evidence_input::Builder {
        crate::input::batch_disassociate_assessment_report_evidence_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchDisassociateAssessmentReportEvidence {
    type Output = std::result::Result<
        crate::output::BatchDisassociateAssessmentReportEvidenceOutput,
        crate::error::BatchDisassociateAssessmentReportEvidenceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_disassociate_assessment_report_evidence_error(
                response,
            )
        } else {
            crate::operation_deser::parse_batch_disassociate_assessment_report_evidence_response(
                response,
            )
        }
    }
}

/// <p>
/// Uploads one or more pieces of evidence to the specified control in the assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControl {
    _private: (),
}
impl BatchImportEvidenceToAssessmentControl {
    /// Creates a new builder-style object to manufacture [`BatchImportEvidenceToAssessmentControlInput`](crate::input::BatchImportEvidenceToAssessmentControlInput)
    pub fn builder() -> crate::input::batch_import_evidence_to_assessment_control_input::Builder {
        crate::input::batch_import_evidence_to_assessment_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchImportEvidenceToAssessmentControl {
    type Output = std::result::Result<
        crate::output::BatchImportEvidenceToAssessmentControlOutput,
        crate::error::BatchImportEvidenceToAssessmentControlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_import_evidence_to_assessment_control_error(
                response,
            )
        } else {
            crate::operation_deser::parse_batch_import_evidence_to_assessment_control_response(
                response,
            )
        }
    }
}

/// <p>
/// Creates an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssessment {
    _private: (),
}
impl CreateAssessment {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentInput`](crate::input::CreateAssessmentInput)
    pub fn builder() -> crate::input::create_assessment_input::Builder {
        crate::input::create_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssessment {
    type Output = std::result::Result<
        crate::output::CreateAssessmentOutput,
        crate::error::CreateAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_assessment_error(response)
        } else {
            crate::operation_deser::parse_create_assessment_response(response)
        }
    }
}

/// <p>
/// Creates a custom framework in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssessmentFramework {
    _private: (),
}
impl CreateAssessmentFramework {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentFrameworkInput`](crate::input::CreateAssessmentFrameworkInput)
    pub fn builder() -> crate::input::create_assessment_framework_input::Builder {
        crate::input::create_assessment_framework_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssessmentFramework {
    type Output = std::result::Result<
        crate::output::CreateAssessmentFrameworkOutput,
        crate::error::CreateAssessmentFrameworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_assessment_framework_error(response)
        } else {
            crate::operation_deser::parse_create_assessment_framework_response(response)
        }
    }
}

/// <p>
/// Creates an assessment report for the specified assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateAssessmentReport {
    _private: (),
}
impl CreateAssessmentReport {
    /// Creates a new builder-style object to manufacture [`CreateAssessmentReportInput`](crate::input::CreateAssessmentReportInput)
    pub fn builder() -> crate::input::create_assessment_report_input::Builder {
        crate::input::create_assessment_report_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateAssessmentReport {
    type Output = std::result::Result<
        crate::output::CreateAssessmentReportOutput,
        crate::error::CreateAssessmentReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_assessment_report_error(response)
        } else {
            crate::operation_deser::parse_create_assessment_report_response(response)
        }
    }
}

/// <p>
/// Creates a new custom control in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateControl {
    _private: (),
}
impl CreateControl {
    /// Creates a new builder-style object to manufacture [`CreateControlInput`](crate::input::CreateControlInput)
    pub fn builder() -> crate::input::create_control_input::Builder {
        crate::input::create_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateControl {
    type Output =
        std::result::Result<crate::output::CreateControlOutput, crate::error::CreateControlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_control_error(response)
        } else {
            crate::operation_deser::parse_create_control_response(response)
        }
    }
}

/// <p>
/// Deletes an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssessment {
    _private: (),
}
impl DeleteAssessment {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentInput`](crate::input::DeleteAssessmentInput)
    pub fn builder() -> crate::input::delete_assessment_input::Builder {
        crate::input::delete_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssessment {
    type Output = std::result::Result<
        crate::output::DeleteAssessmentOutput,
        crate::error::DeleteAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_assessment_error(response)
        } else {
            crate::operation_deser::parse_delete_assessment_response(response)
        }
    }
}

/// <p>
/// Deletes a custom framework in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssessmentFramework {
    _private: (),
}
impl DeleteAssessmentFramework {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentFrameworkInput`](crate::input::DeleteAssessmentFrameworkInput)
    pub fn builder() -> crate::input::delete_assessment_framework_input::Builder {
        crate::input::delete_assessment_framework_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssessmentFramework {
    type Output = std::result::Result<
        crate::output::DeleteAssessmentFrameworkOutput,
        crate::error::DeleteAssessmentFrameworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_assessment_framework_error(response)
        } else {
            crate::operation_deser::parse_delete_assessment_framework_response(response)
        }
    }
}

/// <p>
/// Deletes an assessment report from an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteAssessmentReport {
    _private: (),
}
impl DeleteAssessmentReport {
    /// Creates a new builder-style object to manufacture [`DeleteAssessmentReportInput`](crate::input::DeleteAssessmentReportInput)
    pub fn builder() -> crate::input::delete_assessment_report_input::Builder {
        crate::input::delete_assessment_report_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteAssessmentReport {
    type Output = std::result::Result<
        crate::output::DeleteAssessmentReportOutput,
        crate::error::DeleteAssessmentReportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_assessment_report_error(response)
        } else {
            crate::operation_deser::parse_delete_assessment_report_response(response)
        }
    }
}

/// <p>
/// Deletes a custom control in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteControl {
    _private: (),
}
impl DeleteControl {
    /// Creates a new builder-style object to manufacture [`DeleteControlInput`](crate::input::DeleteControlInput)
    pub fn builder() -> crate::input::delete_control_input::Builder {
        crate::input::delete_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteControl {
    type Output =
        std::result::Result<crate::output::DeleteControlOutput, crate::error::DeleteControlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_control_error(response)
        } else {
            crate::operation_deser::parse_delete_control_response(response)
        }
    }
}

/// <p>
/// Deregisters an account in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterAccount {
    _private: (),
}
impl DeregisterAccount {
    /// Creates a new builder-style object to manufacture [`DeregisterAccountInput`](crate::input::DeregisterAccountInput)
    pub fn builder() -> crate::input::deregister_account_input::Builder {
        crate::input::deregister_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterAccount {
    type Output = std::result::Result<
        crate::output::DeregisterAccountOutput,
        crate::error::DeregisterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_account_error(response)
        } else {
            crate::operation_deser::parse_deregister_account_response(response)
        }
    }
}

/// <p>Removes the specified member account as a delegated administrator for Audit Manager. </p>
/// <important>
/// <p>When you remove a delegated administrator from your Audit Manager settings, or when you
/// deregister a delegated administrator from Organizations, you continue to have access
/// to the evidence that you previously collected under that account. However, Audit Manager
/// will stop collecting and attaching evidence to that delegated administrator account
/// moving forward.</p>
/// </important>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeregisterOrganizationAdminAccount {
    _private: (),
}
impl DeregisterOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`DeregisterOrganizationAdminAccountInput`](crate::input::DeregisterOrganizationAdminAccountInput)
    pub fn builder() -> crate::input::deregister_organization_admin_account_input::Builder {
        crate::input::deregister_organization_admin_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeregisterOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::DeregisterOrganizationAdminAccountOutput,
        crate::error::DeregisterOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_deregister_organization_admin_account_error(response)
        } else {
            crate::operation_deser::parse_deregister_organization_admin_account_response(response)
        }
    }
}

/// <p>
/// Disassociates an evidence folder from the specified assessment report in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateAssessmentReportEvidenceFolder {
    _private: (),
}
impl DisassociateAssessmentReportEvidenceFolder {
    /// Creates a new builder-style object to manufacture [`DisassociateAssessmentReportEvidenceFolderInput`](crate::input::DisassociateAssessmentReportEvidenceFolderInput)
    pub fn builder() -> crate::input::disassociate_assessment_report_evidence_folder_input::Builder
    {
        crate::input::disassociate_assessment_report_evidence_folder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateAssessmentReportEvidenceFolder {
    type Output = std::result::Result<
        crate::output::DisassociateAssessmentReportEvidenceFolderOutput,
        crate::error::DisassociateAssessmentReportEvidenceFolderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_assessment_report_evidence_folder_error(
                response,
            )
        } else {
            crate::operation_deser::parse_disassociate_assessment_report_evidence_folder_response(
                response,
            )
        }
    }
}

/// <p>
/// Returns the registration status of an account in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAccountStatus {
    _private: (),
}
impl GetAccountStatus {
    /// Creates a new builder-style object to manufacture [`GetAccountStatusInput`](crate::input::GetAccountStatusInput)
    pub fn builder() -> crate::input::get_account_status_input::Builder {
        crate::input::get_account_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAccountStatus {
    type Output = std::result::Result<
        crate::output::GetAccountStatusOutput,
        crate::error::GetAccountStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_account_status_error(response)
        } else {
            crate::operation_deser::parse_get_account_status_response(response)
        }
    }
}

/// <p>
/// Returns an assessment from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssessment {
    _private: (),
}
impl GetAssessment {
    /// Creates a new builder-style object to manufacture [`GetAssessmentInput`](crate::input::GetAssessmentInput)
    pub fn builder() -> crate::input::get_assessment_input::Builder {
        crate::input::get_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssessment {
    type Output =
        std::result::Result<crate::output::GetAssessmentOutput, crate::error::GetAssessmentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_assessment_error(response)
        } else {
            crate::operation_deser::parse_get_assessment_response(response)
        }
    }
}

/// <p>
/// Returns a framework from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssessmentFramework {
    _private: (),
}
impl GetAssessmentFramework {
    /// Creates a new builder-style object to manufacture [`GetAssessmentFrameworkInput`](crate::input::GetAssessmentFrameworkInput)
    pub fn builder() -> crate::input::get_assessment_framework_input::Builder {
        crate::input::get_assessment_framework_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssessmentFramework {
    type Output = std::result::Result<
        crate::output::GetAssessmentFrameworkOutput,
        crate::error::GetAssessmentFrameworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_assessment_framework_error(response)
        } else {
            crate::operation_deser::parse_get_assessment_framework_response(response)
        }
    }
}

/// <p>
/// Returns the URL of a specified assessment report in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetAssessmentReportUrl {
    _private: (),
}
impl GetAssessmentReportUrl {
    /// Creates a new builder-style object to manufacture [`GetAssessmentReportUrlInput`](crate::input::GetAssessmentReportUrlInput)
    pub fn builder() -> crate::input::get_assessment_report_url_input::Builder {
        crate::input::get_assessment_report_url_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetAssessmentReportUrl {
    type Output = std::result::Result<
        crate::output::GetAssessmentReportUrlOutput,
        crate::error::GetAssessmentReportUrlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_assessment_report_url_error(response)
        } else {
            crate::operation_deser::parse_get_assessment_report_url_response(response)
        }
    }
}

/// <p>
/// Returns a list of changelogs from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetChangeLogs {
    _private: (),
}
impl GetChangeLogs {
    /// Creates a new builder-style object to manufacture [`GetChangeLogsInput`](crate::input::GetChangeLogsInput)
    pub fn builder() -> crate::input::get_change_logs_input::Builder {
        crate::input::get_change_logs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetChangeLogs {
    type Output =
        std::result::Result<crate::output::GetChangeLogsOutput, crate::error::GetChangeLogsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_change_logs_error(response)
        } else {
            crate::operation_deser::parse_get_change_logs_response(response)
        }
    }
}

/// <p>
/// Returns a control from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetControl {
    _private: (),
}
impl GetControl {
    /// Creates a new builder-style object to manufacture [`GetControlInput`](crate::input::GetControlInput)
    pub fn builder() -> crate::input::get_control_input::Builder {
        crate::input::get_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetControl {
    type Output =
        std::result::Result<crate::output::GetControlOutput, crate::error::GetControlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_control_error(response)
        } else {
            crate::operation_deser::parse_get_control_response(response)
        }
    }
}

/// <p>
/// Returns a list of delegations from an audit owner to a delegate.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDelegations {
    _private: (),
}
impl GetDelegations {
    /// Creates a new builder-style object to manufacture [`GetDelegationsInput`](crate::input::GetDelegationsInput)
    pub fn builder() -> crate::input::get_delegations_input::Builder {
        crate::input::get_delegations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDelegations {
    type Output =
        std::result::Result<crate::output::GetDelegationsOutput, crate::error::GetDelegationsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_delegations_error(response)
        } else {
            crate::operation_deser::parse_get_delegations_response(response)
        }
    }
}

/// <p>
/// Returns evidence from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEvidence {
    _private: (),
}
impl GetEvidence {
    /// Creates a new builder-style object to manufacture [`GetEvidenceInput`](crate::input::GetEvidenceInput)
    pub fn builder() -> crate::input::get_evidence_input::Builder {
        crate::input::get_evidence_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEvidence {
    type Output =
        std::result::Result<crate::output::GetEvidenceOutput, crate::error::GetEvidenceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_evidence_error(response)
        } else {
            crate::operation_deser::parse_get_evidence_response(response)
        }
    }
}

/// <p>
/// Returns all evidence from a specified evidence folder in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEvidenceByEvidenceFolder {
    _private: (),
}
impl GetEvidenceByEvidenceFolder {
    /// Creates a new builder-style object to manufacture [`GetEvidenceByEvidenceFolderInput`](crate::input::GetEvidenceByEvidenceFolderInput)
    pub fn builder() -> crate::input::get_evidence_by_evidence_folder_input::Builder {
        crate::input::get_evidence_by_evidence_folder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEvidenceByEvidenceFolder {
    type Output = std::result::Result<
        crate::output::GetEvidenceByEvidenceFolderOutput,
        crate::error::GetEvidenceByEvidenceFolderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_evidence_by_evidence_folder_error(response)
        } else {
            crate::operation_deser::parse_get_evidence_by_evidence_folder_response(response)
        }
    }
}

/// <p>
/// Returns an evidence folder from the specified assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEvidenceFolder {
    _private: (),
}
impl GetEvidenceFolder {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFolderInput`](crate::input::GetEvidenceFolderInput)
    pub fn builder() -> crate::input::get_evidence_folder_input::Builder {
        crate::input::get_evidence_folder_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEvidenceFolder {
    type Output = std::result::Result<
        crate::output::GetEvidenceFolderOutput,
        crate::error::GetEvidenceFolderError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_evidence_folder_error(response)
        } else {
            crate::operation_deser::parse_get_evidence_folder_response(response)
        }
    }
}

/// <p>
/// Returns the evidence folders from a specified assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEvidenceFoldersByAssessment {
    _private: (),
}
impl GetEvidenceFoldersByAssessment {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFoldersByAssessmentInput`](crate::input::GetEvidenceFoldersByAssessmentInput)
    pub fn builder() -> crate::input::get_evidence_folders_by_assessment_input::Builder {
        crate::input::get_evidence_folders_by_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEvidenceFoldersByAssessment {
    type Output = std::result::Result<
        crate::output::GetEvidenceFoldersByAssessmentOutput,
        crate::error::GetEvidenceFoldersByAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_evidence_folders_by_assessment_error(response)
        } else {
            crate::operation_deser::parse_get_evidence_folders_by_assessment_response(response)
        }
    }
}

/// <p>
/// Returns a list of evidence folders associated with a specified control of an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetEvidenceFoldersByAssessmentControl {
    _private: (),
}
impl GetEvidenceFoldersByAssessmentControl {
    /// Creates a new builder-style object to manufacture [`GetEvidenceFoldersByAssessmentControlInput`](crate::input::GetEvidenceFoldersByAssessmentControlInput)
    pub fn builder() -> crate::input::get_evidence_folders_by_assessment_control_input::Builder {
        crate::input::get_evidence_folders_by_assessment_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetEvidenceFoldersByAssessmentControl {
    type Output = std::result::Result<
        crate::output::GetEvidenceFoldersByAssessmentControlOutput,
        crate::error::GetEvidenceFoldersByAssessmentControlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_evidence_folders_by_assessment_control_error(response)
        } else {
            crate::operation_deser::parse_get_evidence_folders_by_assessment_control_response(
                response,
            )
        }
    }
}

/// <p>
/// Returns the name of the delegated Amazon Web Services administrator account for the organization.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetOrganizationAdminAccount {
    _private: (),
}
impl GetOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`GetOrganizationAdminAccountInput`](crate::input::GetOrganizationAdminAccountInput)
    pub fn builder() -> crate::input::get_organization_admin_account_input::Builder {
        crate::input::get_organization_admin_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::GetOrganizationAdminAccountOutput,
        crate::error::GetOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_organization_admin_account_error(response)
        } else {
            crate::operation_deser::parse_get_organization_admin_account_response(response)
        }
    }
}

/// <p>
/// Returns a list of the in-scope Amazon Web Services services for the specified assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetServicesInScope {
    _private: (),
}
impl GetServicesInScope {
    /// Creates a new builder-style object to manufacture [`GetServicesInScopeInput`](crate::input::GetServicesInScopeInput)
    pub fn builder() -> crate::input::get_services_in_scope_input::Builder {
        crate::input::get_services_in_scope_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetServicesInScope {
    type Output = std::result::Result<
        crate::output::GetServicesInScopeOutput,
        crate::error::GetServicesInScopeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_services_in_scope_error(response)
        } else {
            crate::operation_deser::parse_get_services_in_scope_response(response)
        }
    }
}

/// <p>
/// Returns the settings for the specified account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetSettings {
    _private: (),
}
impl GetSettings {
    /// Creates a new builder-style object to manufacture [`GetSettingsInput`](crate::input::GetSettingsInput)
    pub fn builder() -> crate::input::get_settings_input::Builder {
        crate::input::get_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetSettings {
    type Output =
        std::result::Result<crate::output::GetSettingsOutput, crate::error::GetSettingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_settings_error(response)
        } else {
            crate::operation_deser::parse_get_settings_response(response)
        }
    }
}

/// <p>
/// Returns a list of the frameworks available in the Audit Manager framework library.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssessmentFrameworks {
    _private: (),
}
impl ListAssessmentFrameworks {
    /// Creates a new builder-style object to manufacture [`ListAssessmentFrameworksInput`](crate::input::ListAssessmentFrameworksInput)
    pub fn builder() -> crate::input::list_assessment_frameworks_input::Builder {
        crate::input::list_assessment_frameworks_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssessmentFrameworks {
    type Output = std::result::Result<
        crate::output::ListAssessmentFrameworksOutput,
        crate::error::ListAssessmentFrameworksError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_assessment_frameworks_error(response)
        } else {
            crate::operation_deser::parse_list_assessment_frameworks_response(response)
        }
    }
}

/// <p>
/// Returns a list of assessment reports created in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssessmentReports {
    _private: (),
}
impl ListAssessmentReports {
    /// Creates a new builder-style object to manufacture [`ListAssessmentReportsInput`](crate::input::ListAssessmentReportsInput)
    pub fn builder() -> crate::input::list_assessment_reports_input::Builder {
        crate::input::list_assessment_reports_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssessmentReports {
    type Output = std::result::Result<
        crate::output::ListAssessmentReportsOutput,
        crate::error::ListAssessmentReportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_assessment_reports_error(response)
        } else {
            crate::operation_deser::parse_list_assessment_reports_response(response)
        }
    }
}

/// <p>
/// Returns a list of current and past assessments from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAssessments {
    _private: (),
}
impl ListAssessments {
    /// Creates a new builder-style object to manufacture [`ListAssessmentsInput`](crate::input::ListAssessmentsInput)
    pub fn builder() -> crate::input::list_assessments_input::Builder {
        crate::input::list_assessments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAssessments {
    type Output = std::result::Result<
        crate::output::ListAssessmentsOutput,
        crate::error::ListAssessmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_assessments_error(response)
        } else {
            crate::operation_deser::parse_list_assessments_response(response)
        }
    }
}

/// <p>
/// Returns a list of controls from Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListControls {
    _private: (),
}
impl ListControls {
    /// Creates a new builder-style object to manufacture [`ListControlsInput`](crate::input::ListControlsInput)
    pub fn builder() -> crate::input::list_controls_input::Builder {
        crate::input::list_controls_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListControls {
    type Output =
        std::result::Result<crate::output::ListControlsOutput, crate::error::ListControlsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_controls_error(response)
        } else {
            crate::operation_deser::parse_list_controls_response(response)
        }
    }
}

/// <p>
/// Returns a list of keywords that pre-mapped to the specified control data source.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListKeywordsForDataSource {
    _private: (),
}
impl ListKeywordsForDataSource {
    /// Creates a new builder-style object to manufacture [`ListKeywordsForDataSourceInput`](crate::input::ListKeywordsForDataSourceInput)
    pub fn builder() -> crate::input::list_keywords_for_data_source_input::Builder {
        crate::input::list_keywords_for_data_source_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListKeywordsForDataSource {
    type Output = std::result::Result<
        crate::output::ListKeywordsForDataSourceOutput,
        crate::error::ListKeywordsForDataSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_keywords_for_data_source_error(response)
        } else {
            crate::operation_deser::parse_list_keywords_for_data_source_response(response)
        }
    }
}

/// <p>
/// Returns a list of all Audit Manager notifications.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNotifications {
    _private: (),
}
impl ListNotifications {
    /// Creates a new builder-style object to manufacture [`ListNotificationsInput`](crate::input::ListNotificationsInput)
    pub fn builder() -> crate::input::list_notifications_input::Builder {
        crate::input::list_notifications_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListNotifications {
    type Output = std::result::Result<
        crate::output::ListNotificationsOutput,
        crate::error::ListNotificationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_notifications_error(response)
        } else {
            crate::operation_deser::parse_list_notifications_response(response)
        }
    }
}

/// <p>
/// Returns a list of tags for the specified resource in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>
/// Enables Audit Manager for the specified account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterAccount {
    _private: (),
}
impl RegisterAccount {
    /// Creates a new builder-style object to manufacture [`RegisterAccountInput`](crate::input::RegisterAccountInput)
    pub fn builder() -> crate::input::register_account_input::Builder {
        crate::input::register_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterAccount {
    type Output = std::result::Result<
        crate::output::RegisterAccountOutput,
        crate::error::RegisterAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_account_error(response)
        } else {
            crate::operation_deser::parse_register_account_response(response)
        }
    }
}

/// <p>
/// Enables an account within the organization as the delegated administrator for Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RegisterOrganizationAdminAccount {
    _private: (),
}
impl RegisterOrganizationAdminAccount {
    /// Creates a new builder-style object to manufacture [`RegisterOrganizationAdminAccountInput`](crate::input::RegisterOrganizationAdminAccountInput)
    pub fn builder() -> crate::input::register_organization_admin_account_input::Builder {
        crate::input::register_organization_admin_account_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RegisterOrganizationAdminAccount {
    type Output = std::result::Result<
        crate::output::RegisterOrganizationAdminAccountOutput,
        crate::error::RegisterOrganizationAdminAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_register_organization_admin_account_error(response)
        } else {
            crate::operation_deser::parse_register_organization_admin_account_response(response)
        }
    }
}

/// <p>
/// Tags the specified resource in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>
/// Removes a tag from a resource in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>
/// Edits an Audit Manager assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssessment {
    _private: (),
}
impl UpdateAssessment {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentInput`](crate::input::UpdateAssessmentInput)
    pub fn builder() -> crate::input::update_assessment_input::Builder {
        crate::input::update_assessment_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssessment {
    type Output = std::result::Result<
        crate::output::UpdateAssessmentOutput,
        crate::error::UpdateAssessmentError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_assessment_error(response)
        } else {
            crate::operation_deser::parse_update_assessment_response(response)
        }
    }
}

/// <p>
/// Updates a control within an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssessmentControl {
    _private: (),
}
impl UpdateAssessmentControl {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentControlInput`](crate::input::UpdateAssessmentControlInput)
    pub fn builder() -> crate::input::update_assessment_control_input::Builder {
        crate::input::update_assessment_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssessmentControl {
    type Output = std::result::Result<
        crate::output::UpdateAssessmentControlOutput,
        crate::error::UpdateAssessmentControlError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_assessment_control_error(response)
        } else {
            crate::operation_deser::parse_update_assessment_control_response(response)
        }
    }
}

/// <p>
/// Updates the status of a control set in an Audit Manager assessment.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssessmentControlSetStatus {
    _private: (),
}
impl UpdateAssessmentControlSetStatus {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentControlSetStatusInput`](crate::input::UpdateAssessmentControlSetStatusInput)
    pub fn builder() -> crate::input::update_assessment_control_set_status_input::Builder {
        crate::input::update_assessment_control_set_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssessmentControlSetStatus {
    type Output = std::result::Result<
        crate::output::UpdateAssessmentControlSetStatusOutput,
        crate::error::UpdateAssessmentControlSetStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_assessment_control_set_status_error(response)
        } else {
            crate::operation_deser::parse_update_assessment_control_set_status_response(response)
        }
    }
}

/// <p>
/// Updates a custom framework in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssessmentFramework {
    _private: (),
}
impl UpdateAssessmentFramework {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentFrameworkInput`](crate::input::UpdateAssessmentFrameworkInput)
    pub fn builder() -> crate::input::update_assessment_framework_input::Builder {
        crate::input::update_assessment_framework_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssessmentFramework {
    type Output = std::result::Result<
        crate::output::UpdateAssessmentFrameworkOutput,
        crate::error::UpdateAssessmentFrameworkError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_assessment_framework_error(response)
        } else {
            crate::operation_deser::parse_update_assessment_framework_response(response)
        }
    }
}

/// <p>
/// Updates the status of an assessment in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateAssessmentStatus {
    _private: (),
}
impl UpdateAssessmentStatus {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentStatusInput`](crate::input::UpdateAssessmentStatusInput)
    pub fn builder() -> crate::input::update_assessment_status_input::Builder {
        crate::input::update_assessment_status_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateAssessmentStatus {
    type Output = std::result::Result<
        crate::output::UpdateAssessmentStatusOutput,
        crate::error::UpdateAssessmentStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_assessment_status_error(response)
        } else {
            crate::operation_deser::parse_update_assessment_status_response(response)
        }
    }
}

/// <p>
/// Updates a custom control in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateControl {
    _private: (),
}
impl UpdateControl {
    /// Creates a new builder-style object to manufacture [`UpdateControlInput`](crate::input::UpdateControlInput)
    pub fn builder() -> crate::input::update_control_input::Builder {
        crate::input::update_control_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateControl {
    type Output =
        std::result::Result<crate::output::UpdateControlOutput, crate::error::UpdateControlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_control_error(response)
        } else {
            crate::operation_deser::parse_update_control_response(response)
        }
    }
}

/// <p>
/// Updates Audit Manager settings for the current user account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSettings {
    _private: (),
}
impl UpdateSettings {
    /// Creates a new builder-style object to manufacture [`UpdateSettingsInput`](crate::input::UpdateSettingsInput)
    pub fn builder() -> crate::input::update_settings_input::Builder {
        crate::input::update_settings_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateSettings {
    type Output =
        std::result::Result<crate::output::UpdateSettingsOutput, crate::error::UpdateSettingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_settings_error(response)
        } else {
            crate::operation_deser::parse_update_settings_response(response)
        }
    }
}

/// <p>
/// Validates the integrity of an assessment report in Audit Manager.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateAssessmentReportIntegrity {
    _private: (),
}
impl ValidateAssessmentReportIntegrity {
    /// Creates a new builder-style object to manufacture [`ValidateAssessmentReportIntegrityInput`](crate::input::ValidateAssessmentReportIntegrityInput)
    pub fn builder() -> crate::input::validate_assessment_report_integrity_input::Builder {
        crate::input::validate_assessment_report_integrity_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ValidateAssessmentReportIntegrity {
    type Output = std::result::Result<
        crate::output::ValidateAssessmentReportIntegrityOutput,
        crate::error::ValidateAssessmentReportIntegrityError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_validate_assessment_report_integrity_error(response)
        } else {
            crate::operation_deser::parse_validate_assessment_report_integrity_response(response)
        }
    }
}
