// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEvidenceByEvidenceFolderInput {
    /// <p> The identifier for the assessment. </p>
    #[doc(hidden)]
    pub assessment_id: std::option::Option<std::string::String>,
    /// <p> The identifier for the control set. </p>
    #[doc(hidden)]
    pub control_set_id: std::option::Option<std::string::String>,
    /// <p> The unique identifier for the folder that the evidence is stored in. </p>
    #[doc(hidden)]
    pub evidence_folder_id: std::option::Option<std::string::String>,
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> Represents the maximum number of results on a page or for an API request call. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl GetEvidenceByEvidenceFolderInput {
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(&self) -> std::option::Option<&str> {
        self.assessment_id.as_deref()
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(&self) -> std::option::Option<&str> {
        self.control_set_id.as_deref()
    }
    /// <p> The unique identifier for the folder that the evidence is stored in. </p>
    pub fn evidence_folder_id(&self) -> std::option::Option<&str> {
        self.evidence_folder_id.as_deref()
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Represents the maximum number of results on a page or for an API request call. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl GetEvidenceByEvidenceFolderInput {
    /// Creates a new builder-style object to manufacture [`GetEvidenceByEvidenceFolderInput`](crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderInput).
    pub fn builder() -> crate::operation::get_evidence_by_evidence_folder::builders::GetEvidenceByEvidenceFolderInputBuilder{
        crate::operation::get_evidence_by_evidence_folder::builders::GetEvidenceByEvidenceFolderInputBuilder::default()
    }
}

/// A builder for [`GetEvidenceByEvidenceFolderInput`](crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEvidenceByEvidenceFolderInputBuilder {
    pub(crate) assessment_id: std::option::Option<std::string::String>,
    pub(crate) control_set_id: std::option::Option<std::string::String>,
    pub(crate) evidence_folder_id: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl GetEvidenceByEvidenceFolderInputBuilder {
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.assessment_id = Some(input.into());
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.assessment_id = input;
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.control_set_id = Some(input.into());
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn set_control_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.control_set_id = input;
        self
    }
    /// <p> The unique identifier for the folder that the evidence is stored in. </p>
    pub fn evidence_folder_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.evidence_folder_id = Some(input.into());
        self
    }
    /// <p> The unique identifier for the folder that the evidence is stored in. </p>
    pub fn set_evidence_folder_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.evidence_folder_id = input;
        self
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The pagination token that's used to fetch the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> Represents the maximum number of results on a page or for an API request call. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> Represents the maximum number of results on a page or for an API request call. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`GetEvidenceByEvidenceFolderInput`](crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_evidence_by_evidence_folder::GetEvidenceByEvidenceFolderInput {
                assessment_id: self.assessment_id,
                control_set_id: self.control_set_id,
                evidence_folder_id: self.evidence_folder_id,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
