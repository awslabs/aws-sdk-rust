// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSettingsInput {
    /// <p> The list of setting attribute enum values. </p>
    #[doc(hidden)]
    pub attribute: std::option::Option<crate::types::SettingAttribute>,
}
impl GetSettingsInput {
    /// <p> The list of setting attribute enum values. </p>
    pub fn attribute(&self) -> std::option::Option<&crate::types::SettingAttribute> {
        self.attribute.as_ref()
    }
}
impl GetSettingsInput {
    /// Creates a new builder-style object to manufacture [`GetSettingsInput`](crate::operation::get_settings::GetSettingsInput).
    pub fn builder() -> crate::operation::get_settings::builders::GetSettingsInputBuilder {
        crate::operation::get_settings::builders::GetSettingsInputBuilder::default()
    }
}

/// A builder for [`GetSettingsInput`](crate::operation::get_settings::GetSettingsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSettingsInputBuilder {
    pub(crate) attribute: std::option::Option<crate::types::SettingAttribute>,
}
impl GetSettingsInputBuilder {
    /// <p> The list of setting attribute enum values. </p>
    pub fn attribute(mut self, input: crate::types::SettingAttribute) -> Self {
        self.attribute = Some(input);
        self
    }
    /// <p> The list of setting attribute enum values. </p>
    pub fn set_attribute(
        mut self,
        input: std::option::Option<crate::types::SettingAttribute>,
    ) -> Self {
        self.attribute = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSettingsInput`](crate::operation::get_settings::GetSettingsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_settings::GetSettingsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_settings::GetSettingsInput {
            attribute: self.attribute,
        })
    }
}
