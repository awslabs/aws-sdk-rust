// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_import_evidence_to_assessment_control::_batch_import_evidence_to_assessment_control_output::BatchImportEvidenceToAssessmentControlOutputBuilder;

pub use crate::operation::batch_import_evidence_to_assessment_control::_batch_import_evidence_to_assessment_control_input::BatchImportEvidenceToAssessmentControlInputBuilder;

/// Fluent builder constructing a request to `BatchImportEvidenceToAssessmentControl`.
///
/// <p>Uploads one or more pieces of evidence to a control in an Audit Manager assessment. You can upload manual evidence from any Amazon Simple Storage Service (Amazon S3) bucket by specifying the S3 URI of the evidence. </p>
/// <p>You must upload manual evidence to your S3 bucket before you can upload it to your assessment. For instructions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a> in the <i>Amazon Simple Storage Service API Reference.</i> </p>
/// <p>The following restrictions apply to this action:</p>
/// <ul>
/// <li> <p>Maximum size of an individual evidence file: 100 MB</p> </li>
/// <li> <p>Number of daily manual evidence uploads per control: 100</p> </li>
/// <li> <p>Supported file formats: See <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i> </p> </li>
/// </ul>
/// <p>For more information about Audit Manager service restrictions, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControlFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder
            }
impl BatchImportEvidenceToAssessmentControlFluentBuilder {
    /// Creates a new `BatchImportEvidenceToAssessmentControl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControl, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput, aws_smithy_http::result::SdkError<crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.assessment_id(input.into());
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_id(input);
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.control_set_id(input.into());
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn set_control_set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_control_set_id(input);
        self
    }
    /// <p> The identifier for the control. </p>
    pub fn control_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.control_id(input.into());
        self
    }
    /// <p> The identifier for the control. </p>
    pub fn set_control_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_control_id(input);
        self
    }
    /// Appends an item to `manualEvidence`.
    ///
    /// To override the contents of this collection use [`set_manual_evidence`](Self::set_manual_evidence).
    ///
    /// <p> The list of manual evidence objects. </p>
    pub fn manual_evidence(mut self, input: crate::types::ManualEvidence) -> Self {
        self.inner = self.inner.manual_evidence(input);
        self
    }
    /// <p> The list of manual evidence objects. </p>
    pub fn set_manual_evidence(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ManualEvidence>>,
    ) -> Self {
        self.inner = self.inner.set_manual_evidence(input);
        self
    }
}
