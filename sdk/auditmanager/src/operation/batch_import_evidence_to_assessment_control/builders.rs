// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_import_evidence_to_assessment_control::_batch_import_evidence_to_assessment_control_output::BatchImportEvidenceToAssessmentControlOutputBuilder;

pub use crate::operation::batch_import_evidence_to_assessment_control::_batch_import_evidence_to_assessment_control_input::BatchImportEvidenceToAssessmentControlInputBuilder;

impl crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.batch_import_evidence_to_assessment_control();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `BatchImportEvidenceToAssessmentControl`.
///
/// <p>Adds one or more pieces of evidence to a control in an Audit Manager assessment.</p>
/// <p>You can import manual evidence from any S3 bucket by specifying the S3 URI of the object. You can also upload a file from your browser, or enter plain text in response to a risk assessment question.</p>
/// <p>The following restrictions apply to this action:</p>
/// <ul>
/// <li>
/// <p><code>manualEvidence</code> can be only one of the following: <code>evidenceFileName</code>, <code>s3ResourcePath</code>, or <code>textResponse</code></p></li>
/// <li>
/// <p>Maximum size of an individual evidence file: 100 MB</p></li>
/// <li>
/// <p>Number of daily manual evidence uploads per control: 100</p></li>
/// <li>
/// <p>Supported file formats: See <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/upload-evidence.html#supported-manual-evidence-files">Supported file types for manual evidence</a> in the <i>Audit Manager User Guide</i></p></li>
/// </ul>
/// <p>For more information about Audit Manager service restrictions, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/service-quotas.html">Quotas and restrictions for Audit Manager</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControlFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput,
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
    > for BatchImportEvidenceToAssessmentControlFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput,
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl BatchImportEvidenceToAssessmentControlFluentBuilder {
    /// Creates a new `BatchImportEvidenceToAssessmentControl`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the BatchImportEvidenceToAssessmentControl as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControl::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControl::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlOutput,
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier for the assessment.</p>
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assessment_id(input.into());
        self
    }
    /// <p>The identifier for the assessment.</p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_id(input);
        self
    }
    /// <p>The identifier for the assessment.</p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assessment_id()
    }
    /// <p>The identifier for the control set.</p>
    pub fn control_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.control_set_id(input.into());
        self
    }
    /// <p>The identifier for the control set.</p>
    pub fn set_control_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_control_set_id(input);
        self
    }
    /// <p>The identifier for the control set.</p>
    pub fn get_control_set_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_control_set_id()
    }
    /// <p>The identifier for the control.</p>
    pub fn control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.control_id(input.into());
        self
    }
    /// <p>The identifier for the control.</p>
    pub fn set_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_control_id(input);
        self
    }
    /// <p>The identifier for the control.</p>
    pub fn get_control_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_control_id()
    }
    ///
    /// Appends an item to `manualEvidence`.
    ///
    /// To override the contents of this collection use [`set_manual_evidence`](Self::set_manual_evidence).
    ///
    /// <p>The list of manual evidence objects.</p>
    pub fn manual_evidence(mut self, input: crate::types::ManualEvidence) -> Self {
        self.inner = self.inner.manual_evidence(input);
        self
    }
    /// <p>The list of manual evidence objects.</p>
    pub fn set_manual_evidence(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>>) -> Self {
        self.inner = self.inner.set_manual_evidence(input);
        self
    }
    /// <p>The list of manual evidence objects.</p>
    pub fn get_manual_evidence(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>> {
        self.inner.get_manual_evidence()
    }
}
