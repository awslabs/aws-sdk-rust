// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControlInput {
    /// <p> The identifier for the assessment. </p>
    pub assessment_id: ::std::option::Option<::std::string::String>,
    /// <p> The identifier for the control set. </p>
    pub control_set_id: ::std::option::Option<::std::string::String>,
    /// <p> The identifier for the control. </p>
    pub control_id: ::std::option::Option<::std::string::String>,
    /// <p> The list of manual evidence objects. </p>
    pub manual_evidence: ::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>>,
}
impl BatchImportEvidenceToAssessmentControlInput {
    /// <p> The identifier for the assessment. </p>
    pub fn assessment_id(&self) -> ::std::option::Option<&str> {
        self.assessment_id.as_deref()
    }
    /// <p> The identifier for the control set. </p>
    pub fn control_set_id(&self) -> ::std::option::Option<&str> {
        self.control_set_id.as_deref()
    }
    /// <p> The identifier for the control. </p>
    pub fn control_id(&self) -> ::std::option::Option<&str> {
        self.control_id.as_deref()
    }
    /// <p> The list of manual evidence objects. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.manual_evidence.is_none()`.
    pub fn manual_evidence(&self) -> &[crate::types::ManualEvidence] {
        self.manual_evidence.as_deref().unwrap_or_default()
    }
}
impl BatchImportEvidenceToAssessmentControlInput {
    /// Creates a new builder-style object to manufacture [`BatchImportEvidenceToAssessmentControlInput`](crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlInput).
    pub fn builder() -> crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder {
        crate::operation::batch_import_evidence_to_assessment_control::builders::BatchImportEvidenceToAssessmentControlInputBuilder::default()
    }
}

/// A builder for [`BatchImportEvidenceToAssessmentControlInput`](crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchImportEvidenceToAssessmentControlInputBuilder {
    pub(crate) assessment_id: ::std::option::Option<::std::string::String>,
    pub(crate) control_set_id: ::std::option::Option<::std::string::String>,
    pub(crate) control_id: ::std::option::Option<::std::string::String>,
    pub(crate) manual_evidence: ::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>>,
}
impl BatchImportEvidenceToAssessmentControlInputBuilder {
    /// <p> The identifier for the assessment. </p>
    /// This field is required.
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_id = input;
        self
    }
    /// <p> The identifier for the assessment. </p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_id
    }
    /// <p> The identifier for the control set. </p>
    /// This field is required.
    pub fn control_set_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_set_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn set_control_set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_set_id = input;
        self
    }
    /// <p> The identifier for the control set. </p>
    pub fn get_control_set_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_set_id
    }
    /// <p> The identifier for the control. </p>
    /// This field is required.
    pub fn control_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.control_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The identifier for the control. </p>
    pub fn set_control_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.control_id = input;
        self
    }
    /// <p> The identifier for the control. </p>
    pub fn get_control_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.control_id
    }
    /// Appends an item to `manual_evidence`.
    ///
    /// To override the contents of this collection use [`set_manual_evidence`](Self::set_manual_evidence).
    ///
    /// <p> The list of manual evidence objects. </p>
    pub fn manual_evidence(mut self, input: crate::types::ManualEvidence) -> Self {
        let mut v = self.manual_evidence.unwrap_or_default();
        v.push(input);
        self.manual_evidence = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of manual evidence objects. </p>
    pub fn set_manual_evidence(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>>) -> Self {
        self.manual_evidence = input;
        self
    }
    /// <p> The list of manual evidence objects. </p>
    pub fn get_manual_evidence(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ManualEvidence>> {
        &self.manual_evidence
    }
    /// Consumes the builder and constructs a [`BatchImportEvidenceToAssessmentControlInput`](crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::batch_import_evidence_to_assessment_control::BatchImportEvidenceToAssessmentControlInput {
                assessment_id: self.assessment_id,
                control_set_id: self.control_set_id,
                control_id: self.control_id,
                manual_evidence: self.manual_evidence,
            },
        )
    }
}
