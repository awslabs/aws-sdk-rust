// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_assessment_report::_delete_assessment_report_output::DeleteAssessmentReportOutputBuilder;

pub use crate::operation::delete_assessment_report::_delete_assessment_report_input::DeleteAssessmentReportInputBuilder;

impl DeleteAssessmentReportInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_assessment_report::DeleteAssessmentReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assessment_report::DeleteAssessmentReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_assessment_report();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteAssessmentReport`.
///
/// <p>Deletes an assessment report in Audit Manager. </p>
/// <p>When you run the <code>DeleteAssessmentReport</code> operation, Audit Manager attempts to delete the following data:</p>
/// <ol>
/// <li> <p>The specified assessment report that’s stored in your S3 bucket</p> </li>
/// <li> <p>The associated metadata that’s stored in Audit Manager</p> </li>
/// </ol>
/// <p>If Audit Manager can’t access the assessment report in your S3 bucket, the report isn’t deleted. In this event, the <code>DeleteAssessmentReport</code> operation doesn’t fail. Instead, it proceeds to delete the associated metadata only. You must then delete the assessment report from the S3 bucket yourself. </p>
/// <p>This scenario happens when Audit Manager receives a <code>403 (Forbidden)</code> or <code>404 (Not Found)</code> error from Amazon S3. To avoid this, make sure that your S3 bucket is available, and that you configured the correct permissions for Audit Manager to delete resources in your S3 bucket. For an example permissions policy that you can use, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/security_iam_id-based-policy-examples.html#full-administrator-access-assessment-report-destination">Assessment report destination permissions</a> in the <i>Audit Manager User Guide</i>. For information about the issues that could cause a <code>403 (Forbidden)</code> or <code>404 (Not Found</code>) error from Amazon S3, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/ErrorResponses.html#ErrorCodeList">List of Error Codes</a> in the <i>Amazon Simple Storage Service API Reference</i>. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteAssessmentReportFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_assessment_report::builders::DeleteAssessmentReportInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_assessment_report::DeleteAssessmentReportOutput,
        crate::operation::delete_assessment_report::DeleteAssessmentReportError,
    > for DeleteAssessmentReportFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_assessment_report::DeleteAssessmentReportOutput,
            crate::operation::delete_assessment_report::DeleteAssessmentReportError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteAssessmentReportFluentBuilder {
    /// Creates a new `DeleteAssessmentReport`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteAssessmentReport as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_assessment_report::builders::DeleteAssessmentReportInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_assessment_report::DeleteAssessmentReportOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_assessment_report::DeleteAssessmentReportError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_assessment_report::DeleteAssessmentReport::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_assessment_report::DeleteAssessmentReport::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_assessment_report::DeleteAssessmentReportOutput,
        crate::operation::delete_assessment_report::DeleteAssessmentReportError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p> The unique identifier for the assessment. </p>
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assessment_id(input.into());
        self
    }
    /// <p> The unique identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_id(input);
        self
    }
    /// <p> The unique identifier for the assessment. </p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assessment_id()
    }
    /// <p> The unique identifier for the assessment report. </p>
    pub fn assessment_report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.assessment_report_id(input.into());
        self
    }
    /// <p> The unique identifier for the assessment report. </p>
    pub fn set_assessment_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_assessment_report_id(input);
        self
    }
    /// <p> The unique identifier for the assessment report. </p>
    pub fn get_assessment_report_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_assessment_report_id()
    }
}
