// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAssessmentFrameworkInput {
    /// <p> The unique identifier for the framework. </p>
    pub framework_id: ::std::option::Option<::std::string::String>,
    /// <p> The name of the framework to be updated. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The description of the updated framework. </p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p> The compliance type that the new custom framework supports, such as CIS or HIPAA. </p>
    pub compliance_type: ::std::option::Option<::std::string::String>,
    /// <p> The control sets that are associated with the framework. </p>
    pub control_sets: ::std::option::Option<::std::vec::Vec<crate::types::UpdateAssessmentFrameworkControlSet>>,
}
impl UpdateAssessmentFrameworkInput {
    /// <p> The unique identifier for the framework. </p>
    pub fn framework_id(&self) -> ::std::option::Option<&str> {
        self.framework_id.as_deref()
    }
    /// <p> The name of the framework to be updated. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The description of the updated framework. </p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The compliance type that the new custom framework supports, such as CIS or HIPAA. </p>
    pub fn compliance_type(&self) -> ::std::option::Option<&str> {
        self.compliance_type.as_deref()
    }
    /// <p> The control sets that are associated with the framework. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.control_sets.is_none()`.
    pub fn control_sets(&self) -> &[crate::types::UpdateAssessmentFrameworkControlSet] {
        self.control_sets.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UpdateAssessmentFrameworkInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssessmentFrameworkInput");
        formatter.field("framework_id", &self.framework_id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("compliance_type", &"*** Sensitive Data Redacted ***");
        formatter.field("control_sets", &self.control_sets);
        formatter.finish()
    }
}
impl UpdateAssessmentFrameworkInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentFrameworkInput`](crate::operation::update_assessment_framework::UpdateAssessmentFrameworkInput).
    pub fn builder() -> crate::operation::update_assessment_framework::builders::UpdateAssessmentFrameworkInputBuilder {
        crate::operation::update_assessment_framework::builders::UpdateAssessmentFrameworkInputBuilder::default()
    }
}

/// A builder for [`UpdateAssessmentFrameworkInput`](crate::operation::update_assessment_framework::UpdateAssessmentFrameworkInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateAssessmentFrameworkInputBuilder {
    pub(crate) framework_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) compliance_type: ::std::option::Option<::std::string::String>,
    pub(crate) control_sets: ::std::option::Option<::std::vec::Vec<crate::types::UpdateAssessmentFrameworkControlSet>>,
}
impl UpdateAssessmentFrameworkInputBuilder {
    /// <p> The unique identifier for the framework. </p>
    /// This field is required.
    pub fn framework_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.framework_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier for the framework. </p>
    pub fn set_framework_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.framework_id = input;
        self
    }
    /// <p> The unique identifier for the framework. </p>
    pub fn get_framework_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.framework_id
    }
    /// <p> The name of the framework to be updated. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the framework to be updated. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the framework to be updated. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The description of the updated framework. </p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of the updated framework. </p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The description of the updated framework. </p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p> The compliance type that the new custom framework supports, such as CIS or HIPAA. </p>
    pub fn compliance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.compliance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The compliance type that the new custom framework supports, such as CIS or HIPAA. </p>
    pub fn set_compliance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.compliance_type = input;
        self
    }
    /// <p> The compliance type that the new custom framework supports, such as CIS or HIPAA. </p>
    pub fn get_compliance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.compliance_type
    }
    /// Appends an item to `control_sets`.
    ///
    /// To override the contents of this collection use [`set_control_sets`](Self::set_control_sets).
    ///
    /// <p> The control sets that are associated with the framework. </p>
    pub fn control_sets(mut self, input: crate::types::UpdateAssessmentFrameworkControlSet) -> Self {
        let mut v = self.control_sets.unwrap_or_default();
        v.push(input);
        self.control_sets = ::std::option::Option::Some(v);
        self
    }
    /// <p> The control sets that are associated with the framework. </p>
    pub fn set_control_sets(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UpdateAssessmentFrameworkControlSet>>) -> Self {
        self.control_sets = input;
        self
    }
    /// <p> The control sets that are associated with the framework. </p>
    pub fn get_control_sets(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UpdateAssessmentFrameworkControlSet>> {
        &self.control_sets
    }
    /// Consumes the builder and constructs a [`UpdateAssessmentFrameworkInput`](crate::operation::update_assessment_framework::UpdateAssessmentFrameworkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_assessment_framework::UpdateAssessmentFrameworkInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_assessment_framework::UpdateAssessmentFrameworkInput {
            framework_id: self.framework_id,
            name: self.name,
            description: self.description,
            compliance_type: self.compliance_type,
            control_sets: self.control_sets,
        })
    }
}
impl ::std::fmt::Debug for UpdateAssessmentFrameworkInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssessmentFrameworkInputBuilder");
        formatter.field("framework_id", &self.framework_id);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("compliance_type", &"*** Sensitive Data Redacted ***");
        formatter.field("control_sets", &self.control_sets);
        formatter.finish()
    }
}
