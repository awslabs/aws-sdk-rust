// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateControlInput {
    /// <p> The name of the control. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The description of the control. </p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p> The steps to follow to determine if the control is satisfied. </p>
    #[doc(hidden)]
    pub testing_information: std::option::Option<std::string::String>,
    /// <p> The title of the action plan for remediating the control. </p>
    #[doc(hidden)]
    pub action_plan_title: std::option::Option<std::string::String>,
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    #[doc(hidden)]
    pub action_plan_instructions: std::option::Option<std::string::String>,
    /// <p> The data mapping sources for the control. </p>
    #[doc(hidden)]
    pub control_mapping_sources:
        std::option::Option<std::vec::Vec<crate::types::CreateControlMappingSource>>,
    /// <p> The tags that are associated with the control. </p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateControlInput {
    /// <p> The name of the control. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The description of the control. </p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p> The steps to follow to determine if the control is satisfied. </p>
    pub fn testing_information(&self) -> std::option::Option<&str> {
        self.testing_information.as_deref()
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn action_plan_title(&self) -> std::option::Option<&str> {
        self.action_plan_title.as_deref()
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn action_plan_instructions(&self) -> std::option::Option<&str> {
        self.action_plan_instructions.as_deref()
    }
    /// <p> The data mapping sources for the control. </p>
    pub fn control_mapping_sources(
        &self,
    ) -> std::option::Option<&[crate::types::CreateControlMappingSource]> {
        self.control_mapping_sources.as_deref()
    }
    /// <p> The tags that are associated with the control. </p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateControlInput {
    /// Creates a new builder-style object to manufacture [`CreateControlInput`](crate::operation::create_control::CreateControlInput).
    pub fn builder() -> crate::operation::create_control::builders::CreateControlInputBuilder {
        crate::operation::create_control::builders::CreateControlInputBuilder::default()
    }
}

/// A builder for [`CreateControlInput`](crate::operation::create_control::CreateControlInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateControlInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) testing_information: std::option::Option<std::string::String>,
    pub(crate) action_plan_title: std::option::Option<std::string::String>,
    pub(crate) action_plan_instructions: std::option::Option<std::string::String>,
    pub(crate) control_mapping_sources:
        std::option::Option<std::vec::Vec<crate::types::CreateControlMappingSource>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateControlInputBuilder {
    /// <p> The name of the control. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the control. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The description of the control. </p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p> The description of the control. </p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p> The steps to follow to determine if the control is satisfied. </p>
    pub fn testing_information(mut self, input: impl Into<std::string::String>) -> Self {
        self.testing_information = Some(input.into());
        self
    }
    /// <p> The steps to follow to determine if the control is satisfied. </p>
    pub fn set_testing_information(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.testing_information = input;
        self
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn action_plan_title(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_plan_title = Some(input.into());
        self
    }
    /// <p> The title of the action plan for remediating the control. </p>
    pub fn set_action_plan_title(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.action_plan_title = input;
        self
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn action_plan_instructions(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_plan_instructions = Some(input.into());
        self
    }
    /// <p> The recommended actions to carry out if the control isn't fulfilled. </p>
    pub fn set_action_plan_instructions(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.action_plan_instructions = input;
        self
    }
    /// Appends an item to `control_mapping_sources`.
    ///
    /// To override the contents of this collection use [`set_control_mapping_sources`](Self::set_control_mapping_sources).
    ///
    /// <p> The data mapping sources for the control. </p>
    pub fn control_mapping_sources(
        mut self,
        input: crate::types::CreateControlMappingSource,
    ) -> Self {
        let mut v = self.control_mapping_sources.unwrap_or_default();
        v.push(input);
        self.control_mapping_sources = Some(v);
        self
    }
    /// <p> The data mapping sources for the control. </p>
    pub fn set_control_mapping_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CreateControlMappingSource>>,
    ) -> Self {
        self.control_mapping_sources = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The tags that are associated with the control. </p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p> The tags that are associated with the control. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateControlInput`](crate::operation::create_control::CreateControlInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_control::CreateControlInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_control::CreateControlInput {
            name: self.name,
            description: self.description,
            testing_information: self.testing_information,
            action_plan_title: self.action_plan_title,
            action_plan_instructions: self.action_plan_instructions,
            control_mapping_sources: self.control_mapping_sources,
            tags: self.tags,
        })
    }
}
