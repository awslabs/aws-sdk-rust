// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAssessmentInput {
    /// <p> The unique identifier for the assessment. </p>
    pub assessment_id: ::std::option::Option<::std::string::String>,
    /// <p> The name of the assessment to be updated. </p>
    pub assessment_name: ::std::option::Option<::std::string::String>,
    /// <p> The description of the assessment. </p>
    pub assessment_description: ::std::option::Option<::std::string::String>,
    /// <p> The scope of the assessment. </p>
    pub scope: ::std::option::Option<crate::types::Scope>,
    /// <p> The assessment report storage destination for the assessment that's being updated. </p>
    pub assessment_reports_destination: ::std::option::Option<crate::types::AssessmentReportsDestination>,
    /// <p> The list of roles for the assessment. </p>
    pub roles: ::std::option::Option<::std::vec::Vec<crate::types::Role>>,
}
impl UpdateAssessmentInput {
    /// <p> The unique identifier for the assessment. </p>
    pub fn assessment_id(&self) -> ::std::option::Option<&str> {
        self.assessment_id.as_deref()
    }
    /// <p> The name of the assessment to be updated. </p>
    pub fn assessment_name(&self) -> ::std::option::Option<&str> {
        self.assessment_name.as_deref()
    }
    /// <p> The description of the assessment. </p>
    pub fn assessment_description(&self) -> ::std::option::Option<&str> {
        self.assessment_description.as_deref()
    }
    /// <p> The scope of the assessment. </p>
    pub fn scope(&self) -> ::std::option::Option<&crate::types::Scope> {
        self.scope.as_ref()
    }
    /// <p> The assessment report storage destination for the assessment that's being updated. </p>
    pub fn assessment_reports_destination(&self) -> ::std::option::Option<&crate::types::AssessmentReportsDestination> {
        self.assessment_reports_destination.as_ref()
    }
    /// <p> The list of roles for the assessment. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.roles.is_none()`.
    pub fn roles(&self) -> &[crate::types::Role] {
        self.roles.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for UpdateAssessmentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssessmentInput");
        formatter.field("assessment_id", &self.assessment_id);
        formatter.field("assessment_name", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_description", &"*** Sensitive Data Redacted ***");
        formatter.field("scope", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_reports_destination", &"*** Sensitive Data Redacted ***");
        formatter.field("roles", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateAssessmentInput {
    /// Creates a new builder-style object to manufacture [`UpdateAssessmentInput`](crate::operation::update_assessment::UpdateAssessmentInput).
    pub fn builder() -> crate::operation::update_assessment::builders::UpdateAssessmentInputBuilder {
        crate::operation::update_assessment::builders::UpdateAssessmentInputBuilder::default()
    }
}

/// A builder for [`UpdateAssessmentInput`](crate::operation::update_assessment::UpdateAssessmentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateAssessmentInputBuilder {
    pub(crate) assessment_id: ::std::option::Option<::std::string::String>,
    pub(crate) assessment_name: ::std::option::Option<::std::string::String>,
    pub(crate) assessment_description: ::std::option::Option<::std::string::String>,
    pub(crate) scope: ::std::option::Option<crate::types::Scope>,
    pub(crate) assessment_reports_destination: ::std::option::Option<crate::types::AssessmentReportsDestination>,
    pub(crate) roles: ::std::option::Option<::std::vec::Vec<crate::types::Role>>,
}
impl UpdateAssessmentInputBuilder {
    /// <p> The unique identifier for the assessment. </p>
    /// This field is required.
    pub fn assessment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The unique identifier for the assessment. </p>
    pub fn set_assessment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_id = input;
        self
    }
    /// <p> The unique identifier for the assessment. </p>
    pub fn get_assessment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_id
    }
    /// <p> The name of the assessment to be updated. </p>
    pub fn assessment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the assessment to be updated. </p>
    pub fn set_assessment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_name = input;
        self
    }
    /// <p> The name of the assessment to be updated. </p>
    pub fn get_assessment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_name
    }
    /// <p> The description of the assessment. </p>
    pub fn assessment_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.assessment_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The description of the assessment. </p>
    pub fn set_assessment_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.assessment_description = input;
        self
    }
    /// <p> The description of the assessment. </p>
    pub fn get_assessment_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.assessment_description
    }
    /// <p> The scope of the assessment. </p>
    /// This field is required.
    pub fn scope(mut self, input: crate::types::Scope) -> Self {
        self.scope = ::std::option::Option::Some(input);
        self
    }
    /// <p> The scope of the assessment. </p>
    pub fn set_scope(mut self, input: ::std::option::Option<crate::types::Scope>) -> Self {
        self.scope = input;
        self
    }
    /// <p> The scope of the assessment. </p>
    pub fn get_scope(&self) -> &::std::option::Option<crate::types::Scope> {
        &self.scope
    }
    /// <p> The assessment report storage destination for the assessment that's being updated. </p>
    pub fn assessment_reports_destination(mut self, input: crate::types::AssessmentReportsDestination) -> Self {
        self.assessment_reports_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p> The assessment report storage destination for the assessment that's being updated. </p>
    pub fn set_assessment_reports_destination(mut self, input: ::std::option::Option<crate::types::AssessmentReportsDestination>) -> Self {
        self.assessment_reports_destination = input;
        self
    }
    /// <p> The assessment report storage destination for the assessment that's being updated. </p>
    pub fn get_assessment_reports_destination(&self) -> &::std::option::Option<crate::types::AssessmentReportsDestination> {
        &self.assessment_reports_destination
    }
    /// Appends an item to `roles`.
    ///
    /// To override the contents of this collection use [`set_roles`](Self::set_roles).
    ///
    /// <p> The list of roles for the assessment. </p>
    pub fn roles(mut self, input: crate::types::Role) -> Self {
        let mut v = self.roles.unwrap_or_default();
        v.push(input);
        self.roles = ::std::option::Option::Some(v);
        self
    }
    /// <p> The list of roles for the assessment. </p>
    pub fn set_roles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Role>>) -> Self {
        self.roles = input;
        self
    }
    /// <p> The list of roles for the assessment. </p>
    pub fn get_roles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Role>> {
        &self.roles
    }
    /// Consumes the builder and constructs a [`UpdateAssessmentInput`](crate::operation::update_assessment::UpdateAssessmentInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_assessment::UpdateAssessmentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_assessment::UpdateAssessmentInput {
            assessment_id: self.assessment_id,
            assessment_name: self.assessment_name,
            assessment_description: self.assessment_description,
            scope: self.scope,
            assessment_reports_destination: self.assessment_reports_destination,
            roles: self.roles,
        })
    }
}
impl ::std::fmt::Debug for UpdateAssessmentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAssessmentInputBuilder");
        formatter.field("assessment_id", &self.assessment_id);
        formatter.field("assessment_name", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_description", &"*** Sensitive Data Redacted ***");
        formatter.field("scope", &"*** Sensitive Data Redacted ***");
        formatter.field("assessment_reports_destination", &"*** Sensitive Data Redacted ***");
        formatter.field("roles", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
