// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchCreateDelegationByAssessmentOutput {
    /// <p> The delegations that are associated with the assessment. </p>
    #[doc(hidden)]
    pub delegations: std::option::Option<std::vec::Vec<crate::types::Delegation>>,
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    #[doc(hidden)]
    pub errors:
        std::option::Option<std::vec::Vec<crate::types::BatchCreateDelegationByAssessmentError>>,
    _request_id: Option<String>,
}
impl BatchCreateDelegationByAssessmentOutput {
    /// <p> The delegations that are associated with the assessment. </p>
    pub fn delegations(&self) -> std::option::Option<&[crate::types::Delegation]> {
        self.delegations.as_deref()
    }
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    pub fn errors(
        &self,
    ) -> std::option::Option<&[crate::types::BatchCreateDelegationByAssessmentError]> {
        self.errors.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchCreateDelegationByAssessmentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchCreateDelegationByAssessmentOutput {
    /// Creates a new builder-style object to manufacture [`BatchCreateDelegationByAssessmentOutput`](crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentOutput).
    pub fn builder() -> crate::operation::batch_create_delegation_by_assessment::builders::BatchCreateDelegationByAssessmentOutputBuilder{
        crate::operation::batch_create_delegation_by_assessment::builders::BatchCreateDelegationByAssessmentOutputBuilder::default()
    }
}

/// A builder for [`BatchCreateDelegationByAssessmentOutput`](crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchCreateDelegationByAssessmentOutputBuilder {
    pub(crate) delegations: std::option::Option<std::vec::Vec<crate::types::Delegation>>,
    pub(crate) errors:
        std::option::Option<std::vec::Vec<crate::types::BatchCreateDelegationByAssessmentError>>,
    _request_id: Option<String>,
}
impl BatchCreateDelegationByAssessmentOutputBuilder {
    /// Appends an item to `delegations`.
    ///
    /// To override the contents of this collection use [`set_delegations`](Self::set_delegations).
    ///
    /// <p> The delegations that are associated with the assessment. </p>
    pub fn delegations(mut self, input: crate::types::Delegation) -> Self {
        let mut v = self.delegations.unwrap_or_default();
        v.push(input);
        self.delegations = Some(v);
        self
    }
    /// <p> The delegations that are associated with the assessment. </p>
    pub fn set_delegations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Delegation>>,
    ) -> Self {
        self.delegations = input;
        self
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    pub fn errors(mut self, input: crate::types::BatchCreateDelegationByAssessmentError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p> A list of errors that the <code>BatchCreateDelegationByAssessment</code> API returned. </p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<
            std::vec::Vec<crate::types::BatchCreateDelegationByAssessmentError>,
        >,
    ) -> Self {
        self.errors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchCreateDelegationByAssessmentOutput`](crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentOutput).
    pub fn build(self) -> crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentOutput{
        crate::operation::batch_create_delegation_by_assessment::BatchCreateDelegationByAssessmentOutput {
            delegations: self.delegations
            ,
            errors: self.errors
            ,
            _request_id: self._request_id,
        }
    }
}
