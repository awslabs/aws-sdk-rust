// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_assessment_framework_share::_start_assessment_framework_share_output::StartAssessmentFrameworkShareOutputBuilder;

pub use crate::operation::start_assessment_framework_share::_start_assessment_framework_share_input::StartAssessmentFrameworkShareInputBuilder;

/// Fluent builder constructing a request to `StartAssessmentFrameworkShare`.
///
/// <p> Creates a share request for a custom framework in Audit Manager. </p>
/// <p>The share request specifies a recipient and notifies them that a custom framework is available. Recipients have 120 days to accept or decline the request. If no action is taken, the share request expires.</p>
/// <p>When you create a share request, Audit Manager stores a snapshot of your custom framework in the US East (N. Virginia) Amazon Web Services Region. Audit Manager also stores a backup of the same snapshot in the US West (Oregon) Amazon Web Services Region.</p>
/// <p>Audit Manager deletes the snapshot and the backup snapshot when one of the following events occurs:</p>
/// <ul>
/// <li> <p>The sender revokes the share request.</p> </li>
/// <li> <p>The recipient declines the share request.</p> </li>
/// <li> <p>The recipient encounters an error and doesn't successfully accept the share request.</p> </li>
/// <li> <p>The share request expires before the recipient responds to the request.</p> </li>
/// </ul>
/// <p>When a sender <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/framework-sharing.html#framework-sharing-resend">resends a share request</a>, the snapshot is replaced with an updated version that corresponds with the latest version of the custom framework. </p>
/// <p>When a recipient accepts a share request, the snapshot is replicated into their Amazon Web Services account under the Amazon Web Services Region that was specified in the share request. </p> <important>
/// <p>When you invoke the <code>StartAssessmentFrameworkShare</code> API, you are about to share a custom framework with another Amazon Web Services account. You may not share a custom framework that is derived from a standard framework if the standard framework is designated as not eligible for sharing by Amazon Web Services, unless you have obtained permission to do so from the owner of the standard framework. To learn more about which standard frameworks are eligible for sharing, see <a href="https://docs.aws.amazon.com/audit-manager/latest/userguide/share-custom-framework-concepts-and-terminology.html#eligibility">Framework sharing eligibility</a> in the <i>Audit Manager User Guide</i>.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartAssessmentFrameworkShareFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::start_assessment_framework_share::builders::StartAssessmentFrameworkShareInputBuilder
            }
impl StartAssessmentFrameworkShareFluentBuilder {
    /// Creates a new `StartAssessmentFrameworkShare`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShare,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::start_assessment_framework_share::StartAssessmentFrameworkShareError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The unique identifier for the custom framework to be shared. </p>
    pub fn framework_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.framework_id(input.into());
        self
    }
    /// <p> The unique identifier for the custom framework to be shared. </p>
    pub fn set_framework_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_framework_id(input);
        self
    }
    /// <p> The Amazon Web Services account of the recipient. </p>
    pub fn destination_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_account(input.into());
        self
    }
    /// <p> The Amazon Web Services account of the recipient. </p>
    pub fn set_destination_account(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_account(input);
        self
    }
    /// <p> The Amazon Web Services Region of the recipient. </p>
    pub fn destination_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.destination_region(input.into());
        self
    }
    /// <p> The Amazon Web Services Region of the recipient. </p>
    pub fn set_destination_region(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_destination_region(input);
        self
    }
    /// <p> An optional comment from the sender about the share request. </p>
    pub fn comment(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.comment(input.into());
        self
    }
    /// <p> An optional comment from the sender about the share request. </p>
    pub fn set_comment(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_comment(input);
        self
    }
}
