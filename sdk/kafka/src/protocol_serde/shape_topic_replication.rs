// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_topic_replication(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::TopicReplication,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.copy_access_control_lists_for_topics {
        object.key("copyAccessControlListsForTopics").boolean(*var_1);
    }
    if let Some(var_2) = &input.copy_topic_configurations {
        object.key("copyTopicConfigurations").boolean(*var_2);
    }
    if let Some(var_3) = &input.detect_and_copy_new_topics {
        object.key("detectAndCopyNewTopics").boolean(*var_3);
    }
    if let Some(var_4) = &input.topics_to_exclude {
        let mut array_5 = object.key("topicsToExclude").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.topics_to_replicate {
        let mut array_8 = object.key("topicsToReplicate").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    Ok(())
}

pub(crate) fn de_topic_replication<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::TopicReplication>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TopicReplicationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "copyAccessControlListsForTopics" => {
                            builder = builder
                                .set_copy_access_control_lists_for_topics(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "copyTopicConfigurations" => {
                            builder =
                                builder.set_copy_topic_configurations(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "detectAndCopyNewTopics" => {
                            builder =
                                builder.set_detect_and_copy_new_topics(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "topicsToExclude" => {
                            builder =
                                builder.set_topics_to_exclude(crate::protocol_serde::shape_list_of_string_max249::de_list_of_string_max249(tokens)?);
                        }
                        "topicsToReplicate" => {
                            builder = builder
                                .set_topics_to_replicate(crate::protocol_serde::shape_list_of_string_max249::de_list_of_string_max249(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::topic_replication_correct_errors(builder).build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
