// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_cluster_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_cluster::CreateClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.broker_node_group_info {
        #[allow(unused_mut)]
        let mut object_2 = object.key("brokerNodeGroupInfo").start_object();
        crate::protocol_serde::shape_broker_node_group_info::ser_broker_node_group_info(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.client_authentication {
        #[allow(unused_mut)]
        let mut object_4 = object.key("clientAuthentication").start_object();
        crate::protocol_serde::shape_client_authentication::ser_client_authentication(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.cluster_name {
        object.key("clusterName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.configuration_info {
        #[allow(unused_mut)]
        let mut object_7 = object.key("configurationInfo").start_object();
        crate::protocol_serde::shape_configuration_info::ser_configuration_info(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.encryption_info {
        #[allow(unused_mut)]
        let mut object_9 = object.key("encryptionInfo").start_object();
        crate::protocol_serde::shape_encryption_info::ser_encryption_info(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.enhanced_monitoring {
        object.key("enhancedMonitoring").string(var_10.as_str());
    }
    if let Some(var_11) = &input.kafka_version {
        object.key("kafkaVersion").string(var_11.as_str());
    }
    if let Some(var_12) = &input.logging_info {
        #[allow(unused_mut)]
        let mut object_13 = object.key("loggingInfo").start_object();
        crate::protocol_serde::shape_logging_info::ser_logging_info(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.number_of_broker_nodes {
        object.key("numberOfBrokerNodes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.open_monitoring {
        #[allow(unused_mut)]
        let mut object_16 = object.key("openMonitoring").start_object();
        crate::protocol_serde::shape_open_monitoring_info::ser_open_monitoring_info(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.storage_mode {
        object.key("storageMode").string(var_17.as_str());
    }
    if let Some(var_18) = &input.tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    Ok(())
}
