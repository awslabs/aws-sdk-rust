// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateSecurityOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateSecurityOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateSecurityOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput)
pub mod update_security_output {
    /// A builder for [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput)
        pub fn build(self) -> crate::output::UpdateSecurityOutput {
            crate::output::UpdateSecurityOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateSecurityOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput)
    pub fn builder() -> crate::output::update_security_output::Builder {
        crate::output::update_security_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateMonitoringOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateMonitoringOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateMonitoringOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput)
pub mod update_monitoring_output {
    /// A builder for [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput)
        pub fn build(self) -> crate::output::UpdateMonitoringOutput {
            crate::output::UpdateMonitoringOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateMonitoringOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput)
    pub fn builder() -> crate::output::update_monitoring_output::Builder {
        crate::output::update_monitoring_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>Latest revision of the configuration.</p>
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
}
impl std::fmt::Debug for UpdateConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateConfigurationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("latest_revision", &self.latest_revision);
        formatter.finish()
    }
}
/// See [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput)
pub mod update_configuration_output {
    /// A builder for [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput)
        pub fn build(self) -> crate::output::UpdateConfigurationOutput {
            crate::output::UpdateConfigurationOutput {
                arn: self.arn,
                latest_revision: self.latest_revision,
            }
        }
    }
}
impl UpdateConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput)
    pub fn builder() -> crate::output::update_configuration_output::Builder {
        crate::output::update_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateClusterKafkaVersionOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateClusterKafkaVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateClusterKafkaVersionOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput)
pub mod update_cluster_kafka_version_output {
    /// A builder for [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput)
        pub fn build(self) -> crate::output::UpdateClusterKafkaVersionOutput {
            crate::output::UpdateClusterKafkaVersionOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateClusterKafkaVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput)
    pub fn builder() -> crate::output::update_cluster_kafka_version_output::Builder {
        crate::output::update_cluster_kafka_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateClusterConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateClusterConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateClusterConfigurationOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput)
pub mod update_cluster_configuration_output {
    /// A builder for [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput)
        pub fn build(self) -> crate::output::UpdateClusterConfigurationOutput {
            crate::output::UpdateClusterConfigurationOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateClusterConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput)
    pub fn builder() -> crate::output::update_cluster_configuration_output::Builder {
        crate::output::update_cluster_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBrokerTypeOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateBrokerTypeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBrokerTypeOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput)
pub mod update_broker_type_output {
    /// A builder for [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput)
        pub fn build(self) -> crate::output::UpdateBrokerTypeOutput {
            crate::output::UpdateBrokerTypeOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateBrokerTypeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput)
    pub fn builder() -> crate::output::update_broker_type_output::Builder {
        crate::output::update_broker_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBrokerStorageOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateBrokerStorageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBrokerStorageOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput)
pub mod update_broker_storage_output {
    /// A builder for [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput)
        pub fn build(self) -> crate::output::UpdateBrokerStorageOutput {
            crate::output::UpdateBrokerStorageOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateBrokerStorageOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput)
    pub fn builder() -> crate::output::update_broker_storage_output::Builder {
        crate::output::update_broker_storage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateBrokerCountOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UpdateBrokerCountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateBrokerCountOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput)
pub mod update_broker_count_output {
    /// A builder for [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput)
        pub fn build(self) -> crate::output::UpdateBrokerCountOutput {
            crate::output::UpdateBrokerCountOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl UpdateBrokerCountOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput)
    pub fn builder() -> crate::output::update_broker_count_output::Builder {
        crate::output::update_broker_count_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RebootBrokerOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub cluster_operation_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RebootBrokerOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RebootBrokerOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_operation_arn", &self.cluster_operation_arn);
        formatter.finish()
    }
}
/// See [`RebootBrokerOutput`](crate::output::RebootBrokerOutput)
pub mod reboot_broker_output {
    /// A builder for [`RebootBrokerOutput`](crate::output::RebootBrokerOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`RebootBrokerOutput`](crate::output::RebootBrokerOutput)
        pub fn build(self) -> crate::output::RebootBrokerOutput {
            crate::output::RebootBrokerOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
            }
        }
    }
}
impl RebootBrokerOutput {
    /// Creates a new builder-style object to manufacture [`RebootBrokerOutput`](crate::output::RebootBrokerOutput)
    pub fn builder() -> crate::output::reboot_broker_output::Builder {
        crate::output::reboot_broker_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The key-value pair for the resource tag.</p>
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The key-value pair for the resource tag.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The key-value pair for the resource tag.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListScramSecretsOutput {
    /// <p>Paginated results marker.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of scram secrets associated with the cluster.</p>
    pub secret_arn_list: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ListScramSecretsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListScramSecretsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("secret_arn_list", &self.secret_arn_list);
        formatter.finish()
    }
}
/// See [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput)
pub mod list_scram_secrets_output {
    /// A builder for [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) secret_arn_list: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>Paginated results marker.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Paginated results marker.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `secret_arn_list`.
        ///
        /// To override the contents of this collection use [`set_secret_arn_list`](Self::set_secret_arn_list).
        ///
        /// <p>The list of scram secrets associated with the cluster.</p>
        pub fn secret_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.secret_arn_list.unwrap_or_default();
            v.push(input.into());
            self.secret_arn_list = Some(v);
            self
        }
        /// <p>The list of scram secrets associated with the cluster.</p>
        pub fn set_secret_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.secret_arn_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput)
        pub fn build(self) -> crate::output::ListScramSecretsOutput {
            crate::output::ListScramSecretsOutput {
                next_token: self.next_token,
                secret_arn_list: self.secret_arn_list,
            }
        }
    }
}
impl ListScramSecretsOutput {
    /// Creates a new builder-style object to manufacture [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput)
    pub fn builder() -> crate::output::list_scram_secrets_output::Builder {
        crate::output::list_scram_secrets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNodesOutput {
    /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response.
    /// To get another batch of nodes, provide this token in your next request.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>List containing a NodeInfo object.</p>
    pub node_info_list: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
}
impl std::fmt::Debug for ListNodesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListNodesOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("node_info_list", &self.node_info_list);
        formatter.finish()
    }
}
/// See [`ListNodesOutput`](crate::output::ListNodesOutput)
pub mod list_nodes_output {
    /// A builder for [`ListNodesOutput`](crate::output::ListNodesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) node_info_list: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
    }
    impl Builder {
        /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response.
        /// To get another batch of nodes, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response.
        /// To get another batch of nodes, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `node_info_list`.
        ///
        /// To override the contents of this collection use [`set_node_info_list`](Self::set_node_info_list).
        ///
        /// <p>List containing a NodeInfo object.</p>
        pub fn node_info_list(mut self, input: impl Into<crate::model::NodeInfo>) -> Self {
            let mut v = self.node_info_list.unwrap_or_default();
            v.push(input.into());
            self.node_info_list = Some(v);
            self
        }
        /// <p>List containing a NodeInfo object.</p>
        pub fn set_node_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
        ) -> Self {
            self.node_info_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListNodesOutput`](crate::output::ListNodesOutput)
        pub fn build(self) -> crate::output::ListNodesOutput {
            crate::output::ListNodesOutput {
                next_token: self.next_token,
                node_info_list: self.node_info_list,
            }
        }
    }
}
impl ListNodesOutput {
    /// Creates a new builder-style object to manufacture [`ListNodesOutput`](crate::output::ListNodesOutput)
    pub fn builder() -> crate::output::list_nodes_output::Builder {
        crate::output::list_nodes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListKafkaVersionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub kafka_versions: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
    #[allow(missing_docs)] // documentation missing in model
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListKafkaVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListKafkaVersionsOutput");
        formatter.field("kafka_versions", &self.kafka_versions);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput)
pub mod list_kafka_versions_output {
    /// A builder for [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kafka_versions: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
        ///
        pub fn kafka_versions(mut self, input: impl Into<crate::model::KafkaVersion>) -> Self {
            let mut v = self.kafka_versions.unwrap_or_default();
            v.push(input.into());
            self.kafka_versions = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
        ) -> Self {
            self.kafka_versions = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput)
        pub fn build(self) -> crate::output::ListKafkaVersionsOutput {
            crate::output::ListKafkaVersionsOutput {
                kafka_versions: self.kafka_versions,
                next_token: self.next_token,
            }
        }
    }
}
impl ListKafkaVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput)
    pub fn builder() -> crate::output::list_kafka_versions_output::Builder {
        crate::output::list_kafka_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListConfigurationsOutput {
    /// <p>An array of MSK configurations.</p>
    pub configurations: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
    /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response.
    /// To get another batch of configurations, provide this token in your next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListConfigurationsOutput");
        formatter.field("configurations", &self.configurations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput)
pub mod list_configurations_output {
    /// A builder for [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configurations: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `configurations`.
        ///
        /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
        ///
        /// <p>An array of MSK configurations.</p>
        pub fn configurations(mut self, input: impl Into<crate::model::Configuration>) -> Self {
            let mut v = self.configurations.unwrap_or_default();
            v.push(input.into());
            self.configurations = Some(v);
            self
        }
        /// <p>An array of MSK configurations.</p>
        pub fn set_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        ) -> Self {
            self.configurations = input;
            self
        }
        /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response.
        /// To get another batch of configurations, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response.
        /// To get another batch of configurations, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput)
        pub fn build(self) -> crate::output::ListConfigurationsOutput {
            crate::output::ListConfigurationsOutput {
                configurations: self.configurations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput)
    pub fn builder() -> crate::output::list_configurations_output::Builder {
        crate::output::list_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListConfigurationRevisionsOutput {
    /// <p>Paginated results marker.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>List of ConfigurationRevision objects.</p>
    pub revisions: std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
}
impl std::fmt::Debug for ListConfigurationRevisionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListConfigurationRevisionsOutput");
        formatter.field("next_token", &self.next_token);
        formatter.field("revisions", &self.revisions);
        formatter.finish()
    }
}
/// See [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput)
pub mod list_configuration_revisions_output {
    /// A builder for [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) revisions:
            std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
    }
    impl Builder {
        /// <p>Paginated results marker.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Paginated results marker.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `revisions`.
        ///
        /// To override the contents of this collection use [`set_revisions`](Self::set_revisions).
        ///
        /// <p>List of ConfigurationRevision objects.</p>
        pub fn revisions(mut self, input: impl Into<crate::model::ConfigurationRevision>) -> Self {
            let mut v = self.revisions.unwrap_or_default();
            v.push(input.into());
            self.revisions = Some(v);
            self
        }
        /// <p>List of ConfigurationRevision objects.</p>
        pub fn set_revisions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
        ) -> Self {
            self.revisions = input;
            self
        }
        /// Consumes the builder and constructs a [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput)
        pub fn build(self) -> crate::output::ListConfigurationRevisionsOutput {
            crate::output::ListConfigurationRevisionsOutput {
                next_token: self.next_token,
                revisions: self.revisions,
            }
        }
    }
}
impl ListConfigurationRevisionsOutput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput)
    pub fn builder() -> crate::output::list_configuration_revisions_output::Builder {
        crate::output::list_configuration_revisions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListClustersOutput {
    /// <p>Information on each of the MSK clusters in the response.</p>
    pub cluster_info_list: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
    /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response.
    /// To get another batch of clusters, provide this token in your next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListClustersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListClustersOutput");
        formatter.field("cluster_info_list", &self.cluster_info_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListClustersOutput`](crate::output::ListClustersOutput)
pub mod list_clusters_output {
    /// A builder for [`ListClustersOutput`](crate::output::ListClustersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info_list: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `cluster_info_list`.
        ///
        /// To override the contents of this collection use [`set_cluster_info_list`](Self::set_cluster_info_list).
        ///
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn cluster_info_list(mut self, input: impl Into<crate::model::ClusterInfo>) -> Self {
            let mut v = self.cluster_info_list.unwrap_or_default();
            v.push(input.into());
            self.cluster_info_list = Some(v);
            self
        }
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn set_cluster_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
        ) -> Self {
            self.cluster_info_list = input;
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response.
        /// To get another batch of clusters, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response.
        /// To get another batch of clusters, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListClustersOutput`](crate::output::ListClustersOutput)
        pub fn build(self) -> crate::output::ListClustersOutput {
            crate::output::ListClustersOutput {
                cluster_info_list: self.cluster_info_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListClustersOutput {
    /// Creates a new builder-style object to manufacture [`ListClustersOutput`](crate::output::ListClustersOutput)
    pub fn builder() -> crate::output::list_clusters_output::Builder {
        crate::output::list_clusters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListClusterOperationsOutput {
    /// <p>An array of cluster operation information objects.</p>
    pub cluster_operation_info_list:
        std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
    /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListClusterOperationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListClusterOperationsOutput");
        formatter.field(
            "cluster_operation_info_list",
            &self.cluster_operation_info_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput)
pub mod list_cluster_operations_output {
    /// A builder for [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_operation_info_list:
            std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `cluster_operation_info_list`.
        ///
        /// To override the contents of this collection use [`set_cluster_operation_info_list`](Self::set_cluster_operation_info_list).
        ///
        /// <p>An array of cluster operation information objects.</p>
        pub fn cluster_operation_info_list(
            mut self,
            input: impl Into<crate::model::ClusterOperationInfo>,
        ) -> Self {
            let mut v = self.cluster_operation_info_list.unwrap_or_default();
            v.push(input.into());
            self.cluster_operation_info_list = Some(v);
            self
        }
        /// <p>An array of cluster operation information objects.</p>
        pub fn set_cluster_operation_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
        ) -> Self {
            self.cluster_operation_info_list = input;
            self
        }
        /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput)
        pub fn build(self) -> crate::output::ListClusterOperationsOutput {
            crate::output::ListClusterOperationsOutput {
                cluster_operation_info_list: self.cluster_operation_info_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListClusterOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput)
    pub fn builder() -> crate::output::list_cluster_operations_output::Builder {
        crate::output::list_cluster_operations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetCompatibleKafkaVersionsOutput {
    /// <p>A list of CompatibleKafkaVersion objects.</p>
    pub compatible_kafka_versions:
        std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
}
impl std::fmt::Debug for GetCompatibleKafkaVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetCompatibleKafkaVersionsOutput");
        formatter.field("compatible_kafka_versions", &self.compatible_kafka_versions);
        formatter.finish()
    }
}
/// See [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput)
pub mod get_compatible_kafka_versions_output {
    /// A builder for [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) compatible_kafka_versions:
            std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
    }
    impl Builder {
        /// Appends an item to `compatible_kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_compatible_kafka_versions`](Self::set_compatible_kafka_versions).
        ///
        /// <p>A list of CompatibleKafkaVersion objects.</p>
        pub fn compatible_kafka_versions(
            mut self,
            input: impl Into<crate::model::CompatibleKafkaVersion>,
        ) -> Self {
            let mut v = self.compatible_kafka_versions.unwrap_or_default();
            v.push(input.into());
            self.compatible_kafka_versions = Some(v);
            self
        }
        /// <p>A list of CompatibleKafkaVersion objects.</p>
        pub fn set_compatible_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
        ) -> Self {
            self.compatible_kafka_versions = input;
            self
        }
        /// Consumes the builder and constructs a [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput)
        pub fn build(self) -> crate::output::GetCompatibleKafkaVersionsOutput {
            crate::output::GetCompatibleKafkaVersionsOutput {
                compatible_kafka_versions: self.compatible_kafka_versions,
            }
        }
    }
}
impl GetCompatibleKafkaVersionsOutput {
    /// Creates a new builder-style object to manufacture [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput)
    pub fn builder() -> crate::output::get_compatible_kafka_versions_output::Builder {
        crate::output::get_compatible_kafka_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBootstrapBrokersOutput {
    /// <p>A string containing one or more hostname:port pairs.</p>
    pub bootstrap_broker_string: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub bootstrap_broker_string_tls: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetBootstrapBrokersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBootstrapBrokersOutput");
        formatter.field("bootstrap_broker_string", &self.bootstrap_broker_string);
        formatter.field(
            "bootstrap_broker_string_tls",
            &self.bootstrap_broker_string_tls,
        );
        formatter.field(
            "bootstrap_broker_string_sasl_scram",
            &self.bootstrap_broker_string_sasl_scram,
        );
        formatter.field(
            "bootstrap_broker_string_sasl_iam",
            &self.bootstrap_broker_string_sasl_iam,
        );
        formatter.finish()
    }
}
/// See [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput)
pub mod get_bootstrap_brokers_output {
    /// A builder for [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bootstrap_broker_string: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_tls: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A string containing one or more hostname:port pairs.</p>
        pub fn bootstrap_broker_string(mut self, input: impl Into<std::string::String>) -> Self {
            self.bootstrap_broker_string = Some(input.into());
            self
        }
        /// <p>A string containing one or more hostname:port pairs.</p>
        pub fn set_bootstrap_broker_string(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn bootstrap_broker_string_tls(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_tls = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn set_bootstrap_broker_string_tls(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_tls = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn bootstrap_broker_string_sasl_scram(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_scram = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn set_bootstrap_broker_string_sasl_scram(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_scram = input;
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn bootstrap_broker_string_sasl_iam(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_iam = Some(input.into());
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn set_bootstrap_broker_string_sasl_iam(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_iam = input;
            self
        }
        /// Consumes the builder and constructs a [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput)
        pub fn build(self) -> crate::output::GetBootstrapBrokersOutput {
            crate::output::GetBootstrapBrokersOutput {
                bootstrap_broker_string: self.bootstrap_broker_string,
                bootstrap_broker_string_tls: self.bootstrap_broker_string_tls,
                bootstrap_broker_string_sasl_scram: self.bootstrap_broker_string_sasl_scram,
                bootstrap_broker_string_sasl_iam: self.bootstrap_broker_string_sasl_iam,
            }
        }
    }
}
impl GetBootstrapBrokersOutput {
    /// Creates a new builder-style object to manufacture [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput)
    pub fn builder() -> crate::output::get_bootstrap_brokers_output::Builder {
        crate::output::get_bootstrap_brokers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeConfigurationRevisionOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    pub creation_time: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The description of the configuration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The revision number.</p>
    pub revision: i64,
    /// <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
    /// When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
    pub server_properties: std::option::Option<aws_smithy_types::Blob>,
}
impl std::fmt::Debug for DescribeConfigurationRevisionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConfigurationRevisionOutput");
        formatter.field("arn", &self.arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("description", &self.description);
        formatter.field("revision", &self.revision);
        formatter.field("server_properties", &self.server_properties);
        formatter.finish()
    }
}
/// See [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput)
pub mod describe_configuration_revision_output {
    /// A builder for [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) revision: std::option::Option<i64>,
        pub(crate) server_properties: std::option::Option<aws_smithy_types::Blob>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::Instant) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The revision number.</p>
        pub fn revision(mut self, input: i64) -> Self {
            self.revision = Some(input);
            self
        }
        /// <p>The revision number.</p>
        pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
            self.revision = input;
            self
        }
        /// <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
        /// When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
        pub fn server_properties(mut self, input: aws_smithy_types::Blob) -> Self {
            self.server_properties = Some(input);
            self
        }
        /// <p>Contents of the <filename>server.properties</filename> file. When using the API, you must ensure that the contents of the file are base64 encoded.
        /// When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>server.properties</filename> can be in plaintext.</p>
        pub fn set_server_properties(
            mut self,
            input: std::option::Option<aws_smithy_types::Blob>,
        ) -> Self {
            self.server_properties = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput)
        pub fn build(self) -> crate::output::DescribeConfigurationRevisionOutput {
            crate::output::DescribeConfigurationRevisionOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                description: self.description,
                revision: self.revision.unwrap_or_default(),
                server_properties: self.server_properties,
            }
        }
    }
}
impl DescribeConfigurationRevisionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput)
    pub fn builder() -> crate::output::describe_configuration_revision_output::Builder {
        crate::output::describe_configuration_revision_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    pub creation_time: std::option::Option<aws_smithy_types::Instant>,
    /// <p>The description of the configuration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    pub kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Latest revision of the configuration.</p>
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    /// <p>The name of the configuration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub state: std::option::Option<crate::model::ConfigurationState>,
}
impl std::fmt::Debug for DescribeConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeConfigurationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("description", &self.description);
        formatter.field("kafka_versions", &self.kafka_versions);
        formatter.field("latest_revision", &self.latest_revision);
        formatter.field("name", &self.name);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput)
pub mod describe_configuration_output {
    /// A builder for [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::Instant) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
        ///
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn kafka_versions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.kafka_versions.unwrap_or_default();
            v.push(input.into());
            self.kafka_versions = Some(v);
            self
        }
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn set_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.kafka_versions = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput)
        pub fn build(self) -> crate::output::DescribeConfigurationOutput {
            crate::output::DescribeConfigurationOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                description: self.description,
                kafka_versions: self.kafka_versions,
                latest_revision: self.latest_revision,
                name: self.name,
                state: self.state,
            }
        }
    }
}
impl DescribeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput)
    pub fn builder() -> crate::output::describe_configuration_output::Builder {
        crate::output::describe_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClusterOperationOutput {
    /// <p>Cluster operation information</p>
    pub cluster_operation_info: std::option::Option<crate::model::ClusterOperationInfo>,
}
impl std::fmt::Debug for DescribeClusterOperationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClusterOperationOutput");
        formatter.field("cluster_operation_info", &self.cluster_operation_info);
        formatter.finish()
    }
}
/// See [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput)
pub mod describe_cluster_operation_output {
    /// A builder for [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_operation_info: std::option::Option<crate::model::ClusterOperationInfo>,
    }
    impl Builder {
        /// <p>Cluster operation information</p>
        pub fn cluster_operation_info(mut self, input: crate::model::ClusterOperationInfo) -> Self {
            self.cluster_operation_info = Some(input);
            self
        }
        /// <p>Cluster operation information</p>
        pub fn set_cluster_operation_info(
            mut self,
            input: std::option::Option<crate::model::ClusterOperationInfo>,
        ) -> Self {
            self.cluster_operation_info = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput)
        pub fn build(self) -> crate::output::DescribeClusterOperationOutput {
            crate::output::DescribeClusterOperationOutput {
                cluster_operation_info: self.cluster_operation_info,
            }
        }
    }
}
impl DescribeClusterOperationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput)
    pub fn builder() -> crate::output::describe_cluster_operation_output::Builder {
        crate::output::describe_cluster_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeClusterOutput {
    /// <p>The cluster information.</p>
    pub cluster_info: std::option::Option<crate::model::ClusterInfo>,
}
impl std::fmt::Debug for DescribeClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeClusterOutput");
        formatter.field("cluster_info", &self.cluster_info);
        formatter.finish()
    }
}
/// See [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
pub mod describe_cluster_output {
    /// A builder for [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info: std::option::Option<crate::model::ClusterInfo>,
    }
    impl Builder {
        /// <p>The cluster information.</p>
        pub fn cluster_info(mut self, input: crate::model::ClusterInfo) -> Self {
            self.cluster_info = Some(input);
            self
        }
        /// <p>The cluster information.</p>
        pub fn set_cluster_info(
            mut self,
            input: std::option::Option<crate::model::ClusterInfo>,
        ) -> Self {
            self.cluster_info = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
        pub fn build(self) -> crate::output::DescribeClusterOutput {
            crate::output::DescribeClusterOutput {
                cluster_info: self.cluster_info,
            }
        }
    }
}
impl DescribeClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOutput`](crate::output::DescribeClusterOutput)
    pub fn builder() -> crate::output::describe_cluster_output::Builder {
        crate::output::describe_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub state: std::option::Option<crate::model::ConfigurationState>,
}
impl std::fmt::Debug for DeleteConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteConfigurationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput)
pub mod delete_configuration_output {
    /// A builder for [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput)
        pub fn build(self) -> crate::output::DeleteConfigurationOutput {
            crate::output::DeleteConfigurationOutput {
                arn: self.arn,
                state: self.state,
            }
        }
    }
}
impl DeleteConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput)
    pub fn builder() -> crate::output::delete_configuration_output::Builder {
        crate::output::delete_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub state: std::option::Option<crate::model::ClusterState>,
}
impl std::fmt::Debug for DeleteClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteClusterOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`DeleteClusterOutput`](crate::output::DeleteClusterOutput)
pub mod delete_cluster_output {
    /// A builder for [`DeleteClusterOutput`](crate::output::DeleteClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ClusterState>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn state(mut self, input: crate::model::ClusterState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::ClusterState>) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClusterOutput`](crate::output::DeleteClusterOutput)
        pub fn build(self) -> crate::output::DeleteClusterOutput {
            crate::output::DeleteClusterOutput {
                cluster_arn: self.cluster_arn,
                state: self.state,
            }
        }
    }
}
impl DeleteClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClusterOutput`](crate::output::DeleteClusterOutput)
    pub fn builder() -> crate::output::delete_cluster_output::Builder {
        crate::output::delete_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    pub creation_time: std::option::Option<aws_smithy_types::Instant>,
    /// <p>Latest revision of the configuration.</p>
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    /// <p>The name of the configuration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub state: std::option::Option<crate::model::ConfigurationState>,
}
impl std::fmt::Debug for CreateConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateConfigurationOutput");
        formatter.field("arn", &self.arn);
        formatter.field("creation_time", &self.creation_time);
        formatter.field("latest_revision", &self.latest_revision);
        formatter.field("name", &self.name);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput)
pub mod create_configuration_output {
    /// A builder for [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::Instant>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::Instant) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::Instant>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput)
        pub fn build(self) -> crate::output::CreateConfigurationOutput {
            crate::output::CreateConfigurationOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                latest_revision: self.latest_revision,
                name: self.name,
                state: self.state,
            }
        }
    }
}
impl CreateConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput)
    pub fn builder() -> crate::output::create_configuration_output::Builder {
        crate::output::create_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The name of the MSK cluster.</p>
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub state: std::option::Option<crate::model::ClusterState>,
}
impl std::fmt::Debug for CreateClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateClusterOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("cluster_name", &self.cluster_name);
        formatter.field("state", &self.state);
        formatter.finish()
    }
}
/// See [`CreateClusterOutput`](crate::output::CreateClusterOutput)
pub mod create_cluster_output {
    /// A builder for [`CreateClusterOutput`](crate::output::CreateClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ClusterState>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_name = Some(input.into());
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_name = input;
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn state(mut self, input: crate::model::ClusterState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::ClusterState>) -> Self {
            self.state = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateClusterOutput`](crate::output::CreateClusterOutput)
        pub fn build(self) -> crate::output::CreateClusterOutput {
            crate::output::CreateClusterOutput {
                cluster_arn: self.cluster_arn,
                cluster_name: self.cluster_name,
                state: self.state,
            }
        }
    }
}
impl CreateClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateClusterOutput`](crate::output::CreateClusterOutput)
    pub fn builder() -> crate::output::create_cluster_output::Builder {
        crate::output::create_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchDisassociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>List of errors when disassociating secrets to cluster.</p>
    pub unprocessed_scram_secrets:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
}
impl std::fmt::Debug for BatchDisassociateScramSecretOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchDisassociateScramSecretOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("unprocessed_scram_secrets", &self.unprocessed_scram_secrets);
        formatter.finish()
    }
}
/// See [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput)
pub mod batch_disassociate_scram_secret_output {
    /// A builder for [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) unprocessed_scram_secrets:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Appends an item to `unprocessed_scram_secrets`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_scram_secrets`](Self::set_unprocessed_scram_secrets).
        ///
        /// <p>List of errors when disassociating secrets to cluster.</p>
        pub fn unprocessed_scram_secrets(
            mut self,
            input: impl Into<crate::model::UnprocessedScramSecret>,
        ) -> Self {
            let mut v = self.unprocessed_scram_secrets.unwrap_or_default();
            v.push(input.into());
            self.unprocessed_scram_secrets = Some(v);
            self
        }
        /// <p>List of errors when disassociating secrets to cluster.</p>
        pub fn set_unprocessed_scram_secrets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        ) -> Self {
            self.unprocessed_scram_secrets = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput)
        pub fn build(self) -> crate::output::BatchDisassociateScramSecretOutput {
            crate::output::BatchDisassociateScramSecretOutput {
                cluster_arn: self.cluster_arn,
                unprocessed_scram_secrets: self.unprocessed_scram_secrets,
            }
        }
    }
}
impl BatchDisassociateScramSecretOutput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput)
    pub fn builder() -> crate::output::batch_disassociate_scram_secret_output::Builder {
        crate::output::batch_disassociate_scram_secret_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchAssociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>List of errors when associating secrets to cluster.</p>
    pub unprocessed_scram_secrets:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
}
impl std::fmt::Debug for BatchAssociateScramSecretOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchAssociateScramSecretOutput");
        formatter.field("cluster_arn", &self.cluster_arn);
        formatter.field("unprocessed_scram_secrets", &self.unprocessed_scram_secrets);
        formatter.finish()
    }
}
/// See [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput)
pub mod batch_associate_scram_secret_output {
    /// A builder for [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) unprocessed_scram_secrets:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Appends an item to `unprocessed_scram_secrets`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_scram_secrets`](Self::set_unprocessed_scram_secrets).
        ///
        /// <p>List of errors when associating secrets to cluster.</p>
        pub fn unprocessed_scram_secrets(
            mut self,
            input: impl Into<crate::model::UnprocessedScramSecret>,
        ) -> Self {
            let mut v = self.unprocessed_scram_secrets.unwrap_or_default();
            v.push(input.into());
            self.unprocessed_scram_secrets = Some(v);
            self
        }
        /// <p>List of errors when associating secrets to cluster.</p>
        pub fn set_unprocessed_scram_secrets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        ) -> Self {
            self.unprocessed_scram_secrets = input;
            self
        }
        /// Consumes the builder and constructs a [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput)
        pub fn build(self) -> crate::output::BatchAssociateScramSecretOutput {
            crate::output::BatchAssociateScramSecretOutput {
                cluster_arn: self.cluster_arn,
                unprocessed_scram_secrets: self.unprocessed_scram_secrets,
            }
        }
    }
}
impl BatchAssociateScramSecretOutput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput)
    pub fn builder() -> crate::output::batch_associate_scram_secret_output::Builder {
        crate::output::batch_associate_scram_secret_output::Builder::default()
    }
}
