// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStorageOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateStorageOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateStorageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateStorageOutput`](crate::output::UpdateStorageOutput).
pub mod update_storage_output {

    /// A builder for [`UpdateStorageOutput`](crate::output::UpdateStorageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateStorageOutput`](crate::output::UpdateStorageOutput).
        pub fn build(self) -> crate::output::UpdateStorageOutput {
            crate::output::UpdateStorageOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateStorageOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStorageOutput`](crate::output::UpdateStorageOutput).
    pub fn builder() -> crate::output::update_storage_output::Builder {
        crate::output::update_storage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateSecurityOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateSecurityOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateSecurityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput).
pub mod update_security_output {

    /// A builder for [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput).
        pub fn build(self) -> crate::output::UpdateSecurityOutput {
            crate::output::UpdateSecurityOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateSecurityOutput {
    /// Creates a new builder-style object to manufacture [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput).
    pub fn builder() -> crate::output::update_security_output::Builder {
        crate::output::update_security_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateMonitoringOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateMonitoringOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateMonitoringOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput).
pub mod update_monitoring_output {

    /// A builder for [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput).
        pub fn build(self) -> crate::output::UpdateMonitoringOutput {
            crate::output::UpdateMonitoringOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateMonitoringOutput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput).
    pub fn builder() -> crate::output::update_monitoring_output::Builder {
        crate::output::update_monitoring_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConnectivityOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateConnectivityOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateConnectivityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateConnectivityOutput`](crate::output::UpdateConnectivityOutput).
pub mod update_connectivity_output {

    /// A builder for [`UpdateConnectivityOutput`](crate::output::UpdateConnectivityOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConnectivityOutput`](crate::output::UpdateConnectivityOutput).
        pub fn build(self) -> crate::output::UpdateConnectivityOutput {
            crate::output::UpdateConnectivityOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateConnectivityOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConnectivityOutput`](crate::output::UpdateConnectivityOutput).
    pub fn builder() -> crate::output::update_connectivity_output::Builder {
        crate::output::update_connectivity_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Latest revision of the configuration.</p>
    #[doc(hidden)]
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    _request_id: Option<String>,
}
impl UpdateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn latest_revision(&self) -> std::option::Option<&crate::model::ConfigurationRevision> {
        self.latest_revision.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput).
pub mod update_configuration_output {

    /// A builder for [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateConfigurationOutput {
            crate::output::UpdateConfigurationOutput {
                arn: self.arn,
                latest_revision: self.latest_revision,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput).
    pub fn builder() -> crate::output::update_configuration_output::Builder {
        crate::output::update_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateClusterKafkaVersionOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateClusterKafkaVersionOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateClusterKafkaVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput).
pub mod update_cluster_kafka_version_output {

    /// A builder for [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput).
        pub fn build(self) -> crate::output::UpdateClusterKafkaVersionOutput {
            crate::output::UpdateClusterKafkaVersionOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateClusterKafkaVersionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput).
    pub fn builder() -> crate::output::update_cluster_kafka_version_output::Builder {
        crate::output::update_cluster_kafka_version_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateClusterConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateClusterConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateClusterConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput).
pub mod update_cluster_configuration_output {

    /// A builder for [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateClusterConfigurationOutput {
            crate::output::UpdateClusterConfigurationOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateClusterConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput).
    pub fn builder() -> crate::output::update_cluster_configuration_output::Builder {
        crate::output::update_cluster_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBrokerTypeOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateBrokerTypeOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateBrokerTypeOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput).
pub mod update_broker_type_output {

    /// A builder for [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput).
        pub fn build(self) -> crate::output::UpdateBrokerTypeOutput {
            crate::output::UpdateBrokerTypeOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateBrokerTypeOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput).
    pub fn builder() -> crate::output::update_broker_type_output::Builder {
        crate::output::update_broker_type_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBrokerStorageOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateBrokerStorageOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateBrokerStorageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput).
pub mod update_broker_storage_output {

    /// A builder for [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput).
        pub fn build(self) -> crate::output::UpdateBrokerStorageOutput {
            crate::output::UpdateBrokerStorageOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateBrokerStorageOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput).
    pub fn builder() -> crate::output::update_broker_storage_output::Builder {
        crate::output::update_broker_storage_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBrokerCountOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateBrokerCountOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateBrokerCountOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput).
pub mod update_broker_count_output {

    /// A builder for [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput).
        pub fn build(self) -> crate::output::UpdateBrokerCountOutput {
            crate::output::UpdateBrokerCountOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateBrokerCountOutput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput).
    pub fn builder() -> crate::output::update_broker_count_output::Builder {
        crate::output::update_broker_count_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RebootBrokerOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    #[doc(hidden)]
    pub cluster_operation_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RebootBrokerOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    pub fn cluster_operation_arn(&self) -> std::option::Option<&str> {
        self.cluster_operation_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for RebootBrokerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`RebootBrokerOutput`](crate::output::RebootBrokerOutput).
pub mod reboot_broker_output {

    /// A builder for [`RebootBrokerOutput`](crate::output::RebootBrokerOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_operation_arn: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_operation_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.cluster_operation_arn = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RebootBrokerOutput`](crate::output::RebootBrokerOutput).
        pub fn build(self) -> crate::output::RebootBrokerOutput {
            crate::output::RebootBrokerOutput {
                cluster_arn: self.cluster_arn,
                cluster_operation_arn: self.cluster_operation_arn,
                _request_id: self._request_id,
            }
        }
    }
}
impl RebootBrokerOutput {
    /// Creates a new builder-style object to manufacture [`RebootBrokerOutput`](crate::output::RebootBrokerOutput).
    pub fn builder() -> crate::output::reboot_broker_output::Builder {
        crate::output::reboot_broker_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The key-value pair for the resource tag.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The key-value pair for the resource tag.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The key-value pair for the resource tag.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>The key-value pair for the resource tag.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListScramSecretsOutput {
    /// <p>Paginated results marker.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The list of scram secrets associated with the cluster.</p>
    #[doc(hidden)]
    pub secret_arn_list: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl ListScramSecretsOutput {
    /// <p>Paginated results marker.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of scram secrets associated with the cluster.</p>
    pub fn secret_arn_list(&self) -> std::option::Option<&[std::string::String]> {
        self.secret_arn_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListScramSecretsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput).
pub mod list_scram_secrets_output {

    /// A builder for [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) secret_arn_list: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Paginated results marker.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Paginated results marker.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `secret_arn_list`.
        ///
        /// To override the contents of this collection use [`set_secret_arn_list`](Self::set_secret_arn_list).
        ///
        /// <p>The list of scram secrets associated with the cluster.</p>
        pub fn secret_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.secret_arn_list.unwrap_or_default();
            v.push(input.into());
            self.secret_arn_list = Some(v);
            self
        }
        /// <p>The list of scram secrets associated with the cluster.</p>
        pub fn set_secret_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.secret_arn_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput).
        pub fn build(self) -> crate::output::ListScramSecretsOutput {
            crate::output::ListScramSecretsOutput {
                next_token: self.next_token,
                secret_arn_list: self.secret_arn_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListScramSecretsOutput {
    /// Creates a new builder-style object to manufacture [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput).
    pub fn builder() -> crate::output::list_scram_secrets_output::Builder {
        crate::output::list_scram_secrets_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListNodesOutput {
    /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>List containing a NodeInfo object.</p>
    #[doc(hidden)]
    pub node_info_list: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
    _request_id: Option<String>,
}
impl ListNodesOutput {
    /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>List containing a NodeInfo object.</p>
    pub fn node_info_list(&self) -> std::option::Option<&[crate::model::NodeInfo]> {
        self.node_info_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListNodesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListNodesOutput`](crate::output::ListNodesOutput).
pub mod list_nodes_output {

    /// A builder for [`ListNodesOutput`](crate::output::ListNodesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) node_info_list: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `node_info_list`.
        ///
        /// To override the contents of this collection use [`set_node_info_list`](Self::set_node_info_list).
        ///
        /// <p>List containing a NodeInfo object.</p>
        pub fn node_info_list(mut self, input: crate::model::NodeInfo) -> Self {
            let mut v = self.node_info_list.unwrap_or_default();
            v.push(input);
            self.node_info_list = Some(v);
            self
        }
        /// <p>List containing a NodeInfo object.</p>
        pub fn set_node_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NodeInfo>>,
        ) -> Self {
            self.node_info_list = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListNodesOutput`](crate::output::ListNodesOutput).
        pub fn build(self) -> crate::output::ListNodesOutput {
            crate::output::ListNodesOutput {
                next_token: self.next_token,
                node_info_list: self.node_info_list,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListNodesOutput {
    /// Creates a new builder-style object to manufacture [`ListNodesOutput`](crate::output::ListNodesOutput).
    pub fn builder() -> crate::output::list_nodes_output::Builder {
        crate::output::list_nodes_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListKafkaVersionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub kafka_versions: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListKafkaVersionsOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn kafka_versions(&self) -> std::option::Option<&[crate::model::KafkaVersion]> {
        self.kafka_versions.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListKafkaVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput).
pub mod list_kafka_versions_output {

    /// A builder for [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kafka_versions: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
        ///
        pub fn kafka_versions(mut self, input: crate::model::KafkaVersion) -> Self {
            let mut v = self.kafka_versions.unwrap_or_default();
            v.push(input);
            self.kafka_versions = Some(v);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::KafkaVersion>>,
        ) -> Self {
            self.kafka_versions = input;
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput).
        pub fn build(self) -> crate::output::ListKafkaVersionsOutput {
            crate::output::ListKafkaVersionsOutput {
                kafka_versions: self.kafka_versions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListKafkaVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput).
    pub fn builder() -> crate::output::list_kafka_versions_output::Builder {
        crate::output::list_kafka_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConfigurationsOutput {
    /// <p>An array of MSK configurations.</p>
    #[doc(hidden)]
    pub configurations: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
    /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListConfigurationsOutput {
    /// <p>An array of MSK configurations.</p>
    pub fn configurations(&self) -> std::option::Option<&[crate::model::Configuration]> {
        self.configurations.as_deref()
    }
    /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput).
pub mod list_configurations_output {

    /// A builder for [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) configurations: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `configurations`.
        ///
        /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
        ///
        /// <p>An array of MSK configurations.</p>
        pub fn configurations(mut self, input: crate::model::Configuration) -> Self {
            let mut v = self.configurations.unwrap_or_default();
            v.push(input);
            self.configurations = Some(v);
            self
        }
        /// <p>An array of MSK configurations.</p>
        pub fn set_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Configuration>>,
        ) -> Self {
            self.configurations = input;
            self
        }
        /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput).
        pub fn build(self) -> crate::output::ListConfigurationsOutput {
            crate::output::ListConfigurationsOutput {
                configurations: self.configurations,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput).
    pub fn builder() -> crate::output::list_configurations_output::Builder {
        crate::output::list_configurations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConfigurationRevisionsOutput {
    /// <p>Paginated results marker.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>List of ConfigurationRevision objects.</p>
    #[doc(hidden)]
    pub revisions: std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
    _request_id: Option<String>,
}
impl ListConfigurationRevisionsOutput {
    /// <p>Paginated results marker.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>List of ConfigurationRevision objects.</p>
    pub fn revisions(&self) -> std::option::Option<&[crate::model::ConfigurationRevision]> {
        self.revisions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConfigurationRevisionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput).
pub mod list_configuration_revisions_output {

    /// A builder for [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) revisions:
            std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Paginated results marker.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Paginated results marker.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `revisions`.
        ///
        /// To override the contents of this collection use [`set_revisions`](Self::set_revisions).
        ///
        /// <p>List of ConfigurationRevision objects.</p>
        pub fn revisions(mut self, input: crate::model::ConfigurationRevision) -> Self {
            let mut v = self.revisions.unwrap_or_default();
            v.push(input);
            self.revisions = Some(v);
            self
        }
        /// <p>List of ConfigurationRevision objects.</p>
        pub fn set_revisions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConfigurationRevision>>,
        ) -> Self {
            self.revisions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput).
        pub fn build(self) -> crate::output::ListConfigurationRevisionsOutput {
            crate::output::ListConfigurationRevisionsOutput {
                next_token: self.next_token,
                revisions: self.revisions,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListConfigurationRevisionsOutput {
    /// Creates a new builder-style object to manufacture [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput).
    pub fn builder() -> crate::output::list_configuration_revisions_output::Builder {
        crate::output::list_configuration_revisions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClustersV2Output {
    /// <p>Information on each of the MSK clusters in the response.</p>
    #[doc(hidden)]
    pub cluster_info_list: std::option::Option<std::vec::Vec<crate::model::Cluster>>,
    /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListClustersV2Output {
    /// <p>Information on each of the MSK clusters in the response.</p>
    pub fn cluster_info_list(&self) -> std::option::Option<&[crate::model::Cluster]> {
        self.cluster_info_list.as_deref()
    }
    /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListClustersV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListClustersV2Output`](crate::output::ListClustersV2Output).
pub mod list_clusters_v2_output {

    /// A builder for [`ListClustersV2Output`](crate::output::ListClustersV2Output).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info_list: std::option::Option<std::vec::Vec<crate::model::Cluster>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cluster_info_list`.
        ///
        /// To override the contents of this collection use [`set_cluster_info_list`](Self::set_cluster_info_list).
        ///
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn cluster_info_list(mut self, input: crate::model::Cluster) -> Self {
            let mut v = self.cluster_info_list.unwrap_or_default();
            v.push(input);
            self.cluster_info_list = Some(v);
            self
        }
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn set_cluster_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Cluster>>,
        ) -> Self {
            self.cluster_info_list = input;
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListClustersV2Output`](crate::output::ListClustersV2Output).
        pub fn build(self) -> crate::output::ListClustersV2Output {
            crate::output::ListClustersV2Output {
                cluster_info_list: self.cluster_info_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListClustersV2Output {
    /// Creates a new builder-style object to manufacture [`ListClustersV2Output`](crate::output::ListClustersV2Output).
    pub fn builder() -> crate::output::list_clusters_v2_output::Builder {
        crate::output::list_clusters_v2_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClustersOutput {
    /// <p>Information on each of the MSK clusters in the response.</p>
    #[doc(hidden)]
    pub cluster_info_list: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
    /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListClustersOutput {
    /// <p>Information on each of the MSK clusters in the response.</p>
    pub fn cluster_info_list(&self) -> std::option::Option<&[crate::model::ClusterInfo]> {
        self.cluster_info_list.as_deref()
    }
    /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListClustersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListClustersOutput`](crate::output::ListClustersOutput).
pub mod list_clusters_output {

    /// A builder for [`ListClustersOutput`](crate::output::ListClustersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info_list: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cluster_info_list`.
        ///
        /// To override the contents of this collection use [`set_cluster_info_list`](Self::set_cluster_info_list).
        ///
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn cluster_info_list(mut self, input: crate::model::ClusterInfo) -> Self {
            let mut v = self.cluster_info_list.unwrap_or_default();
            v.push(input);
            self.cluster_info_list = Some(v);
            self
        }
        /// <p>Information on each of the MSK clusters in the response.</p>
        pub fn set_cluster_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterInfo>>,
        ) -> Self {
            self.cluster_info_list = input;
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListClustersOutput`](crate::output::ListClustersOutput).
        pub fn build(self) -> crate::output::ListClustersOutput {
            crate::output::ListClustersOutput {
                cluster_info_list: self.cluster_info_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListClustersOutput {
    /// Creates a new builder-style object to manufacture [`ListClustersOutput`](crate::output::ListClustersOutput).
    pub fn builder() -> crate::output::list_clusters_output::Builder {
        crate::output::list_clusters_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListClusterOperationsOutput {
    /// <p>An array of cluster operation information objects.</p>
    #[doc(hidden)]
    pub cluster_operation_info_list:
        std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
    /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListClusterOperationsOutput {
    /// <p>An array of cluster operation information objects.</p>
    pub fn cluster_operation_info_list(
        &self,
    ) -> std::option::Option<&[crate::model::ClusterOperationInfo]> {
        self.cluster_operation_info_list.as_deref()
    }
    /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListClusterOperationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput).
pub mod list_cluster_operations_output {

    /// A builder for [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_operation_info_list:
            std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `cluster_operation_info_list`.
        ///
        /// To override the contents of this collection use [`set_cluster_operation_info_list`](Self::set_cluster_operation_info_list).
        ///
        /// <p>An array of cluster operation information objects.</p>
        pub fn cluster_operation_info_list(
            mut self,
            input: crate::model::ClusterOperationInfo,
        ) -> Self {
            let mut v = self.cluster_operation_info_list.unwrap_or_default();
            v.push(input);
            self.cluster_operation_info_list = Some(v);
            self
        }
        /// <p>An array of cluster operation information objects.</p>
        pub fn set_cluster_operation_info_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ClusterOperationInfo>>,
        ) -> Self {
            self.cluster_operation_info_list = input;
            self
        }
        /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput).
        pub fn build(self) -> crate::output::ListClusterOperationsOutput {
            crate::output::ListClusterOperationsOutput {
                cluster_operation_info_list: self.cluster_operation_info_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListClusterOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput).
    pub fn builder() -> crate::output::list_cluster_operations_output::Builder {
        crate::output::list_cluster_operations_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetCompatibleKafkaVersionsOutput {
    /// <p>A list of CompatibleKafkaVersion objects.</p>
    #[doc(hidden)]
    pub compatible_kafka_versions:
        std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
    _request_id: Option<String>,
}
impl GetCompatibleKafkaVersionsOutput {
    /// <p>A list of CompatibleKafkaVersion objects.</p>
    pub fn compatible_kafka_versions(
        &self,
    ) -> std::option::Option<&[crate::model::CompatibleKafkaVersion]> {
        self.compatible_kafka_versions.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetCompatibleKafkaVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput).
pub mod get_compatible_kafka_versions_output {

    /// A builder for [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) compatible_kafka_versions:
            std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `compatible_kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_compatible_kafka_versions`](Self::set_compatible_kafka_versions).
        ///
        /// <p>A list of CompatibleKafkaVersion objects.</p>
        pub fn compatible_kafka_versions(
            mut self,
            input: crate::model::CompatibleKafkaVersion,
        ) -> Self {
            let mut v = self.compatible_kafka_versions.unwrap_or_default();
            v.push(input);
            self.compatible_kafka_versions = Some(v);
            self
        }
        /// <p>A list of CompatibleKafkaVersion objects.</p>
        pub fn set_compatible_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CompatibleKafkaVersion>>,
        ) -> Self {
            self.compatible_kafka_versions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput).
        pub fn build(self) -> crate::output::GetCompatibleKafkaVersionsOutput {
            crate::output::GetCompatibleKafkaVersionsOutput {
                compatible_kafka_versions: self.compatible_kafka_versions,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetCompatibleKafkaVersionsOutput {
    /// Creates a new builder-style object to manufacture [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput).
    pub fn builder() -> crate::output::get_compatible_kafka_versions_output::Builder {
        crate::output::get_compatible_kafka_versions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBootstrapBrokersOutput {
    /// <p>A string containing one or more hostname:port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_tls: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_tls: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_sasl_scram: std::option::Option<std::string::String>,
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_sasl_iam: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBootstrapBrokersOutput {
    /// <p>A string containing one or more hostname:port pairs.</p>
    pub fn bootstrap_broker_string(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_tls(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_tls.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_sasl_scram(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_sasl_scram.as_deref()
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_sasl_iam(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_sasl_iam.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_public_tls(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_tls.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_scram(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_sasl_scram.as_deref()
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_iam(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_sasl_iam.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetBootstrapBrokersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput).
pub mod get_bootstrap_brokers_output {

    /// A builder for [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) bootstrap_broker_string: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_tls: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_public_tls: std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_public_sasl_scram:
            std::option::Option<std::string::String>,
        pub(crate) bootstrap_broker_string_public_sasl_iam:
            std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A string containing one or more hostname:port pairs.</p>
        pub fn bootstrap_broker_string(mut self, input: impl Into<std::string::String>) -> Self {
            self.bootstrap_broker_string = Some(input.into());
            self
        }
        /// <p>A string containing one or more hostname:port pairs.</p>
        pub fn set_bootstrap_broker_string(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn bootstrap_broker_string_tls(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_tls = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn set_bootstrap_broker_string_tls(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_tls = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn bootstrap_broker_string_sasl_scram(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_scram = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn set_bootstrap_broker_string_sasl_scram(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_scram = input;
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn bootstrap_broker_string_sasl_iam(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_iam = Some(input.into());
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn set_bootstrap_broker_string_sasl_iam(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_sasl_iam = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn bootstrap_broker_string_public_tls(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_tls = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
        pub fn set_bootstrap_broker_string_public_tls(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_tls = input;
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn bootstrap_broker_string_public_sasl_scram(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_sasl_scram = Some(input.into());
            self
        }
        /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
        pub fn set_bootstrap_broker_string_public_sasl_scram(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_sasl_scram = input;
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn bootstrap_broker_string_public_sasl_iam(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_sasl_iam = Some(input.into());
            self
        }
        /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
        pub fn set_bootstrap_broker_string_public_sasl_iam(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.bootstrap_broker_string_public_sasl_iam = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput).
        pub fn build(self) -> crate::output::GetBootstrapBrokersOutput {
            crate::output::GetBootstrapBrokersOutput {
                bootstrap_broker_string: self.bootstrap_broker_string,
                bootstrap_broker_string_tls: self.bootstrap_broker_string_tls,
                bootstrap_broker_string_sasl_scram: self.bootstrap_broker_string_sasl_scram,
                bootstrap_broker_string_sasl_iam: self.bootstrap_broker_string_sasl_iam,
                bootstrap_broker_string_public_tls: self.bootstrap_broker_string_public_tls,
                bootstrap_broker_string_public_sasl_scram: self
                    .bootstrap_broker_string_public_sasl_scram,
                bootstrap_broker_string_public_sasl_iam: self
                    .bootstrap_broker_string_public_sasl_iam,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetBootstrapBrokersOutput {
    /// Creates a new builder-style object to manufacture [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput).
    pub fn builder() -> crate::output::get_bootstrap_brokers_output::Builder {
        crate::output::get_bootstrap_brokers_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConfigurationRevisionOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The revision number.</p>
    #[doc(hidden)]
    pub revision: i64,
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    #[doc(hidden)]
    pub server_properties: std::option::Option<aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl DescribeConfigurationRevisionOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The revision number.</p>
    pub fn revision(&self) -> i64 {
        self.revision
    }
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    pub fn server_properties(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.server_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeConfigurationRevisionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput).
pub mod describe_configuration_revision_output {

    /// A builder for [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) revision: std::option::Option<i64>,
        pub(crate) server_properties: std::option::Option<aws_smithy_types::Blob>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>The revision number.</p>
        pub fn revision(mut self, input: i64) -> Self {
            self.revision = Some(input);
            self
        }
        /// <p>The revision number.</p>
        pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
            self.revision = input;
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn server_properties(mut self, input: aws_smithy_types::Blob) -> Self {
            self.server_properties = Some(input);
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn set_server_properties(
            mut self,
            input: std::option::Option<aws_smithy_types::Blob>,
        ) -> Self {
            self.server_properties = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput).
        pub fn build(self) -> crate::output::DescribeConfigurationRevisionOutput {
            crate::output::DescribeConfigurationRevisionOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                description: self.description,
                revision: self.revision.unwrap_or_default(),
                server_properties: self.server_properties,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeConfigurationRevisionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput).
    pub fn builder() -> crate::output::describe_configuration_revision_output::Builder {
        crate::output::describe_configuration_revision_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    #[doc(hidden)]
    pub kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Latest revision of the configuration.</p>
    #[doc(hidden)]
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    /// <p>The name of the configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ConfigurationState>,
    _request_id: Option<String>,
}
impl DescribeConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    pub fn kafka_versions(&self) -> std::option::Option<&[std::string::String]> {
        self.kafka_versions.as_deref()
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn latest_revision(&self) -> std::option::Option<&crate::model::ConfigurationRevision> {
        self.latest_revision.as_ref()
    }
    /// <p>The name of the configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn state(&self) -> std::option::Option<&crate::model::ConfigurationState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput).
pub mod describe_configuration_output {

    /// A builder for [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// Appends an item to `kafka_versions`.
        ///
        /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
        ///
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn kafka_versions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.kafka_versions.unwrap_or_default();
            v.push(input.into());
            self.kafka_versions = Some(v);
            self
        }
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn set_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.kafka_versions = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeConfigurationOutput {
            crate::output::DescribeConfigurationOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                description: self.description,
                kafka_versions: self.kafka_versions,
                latest_revision: self.latest_revision,
                name: self.name,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput).
    pub fn builder() -> crate::output::describe_configuration_output::Builder {
        crate::output::describe_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClusterV2Output {
    /// <p>The cluster information.</p>
    #[doc(hidden)]
    pub cluster_info: std::option::Option<crate::model::Cluster>,
    _request_id: Option<String>,
}
impl DescribeClusterV2Output {
    /// <p>The cluster information.</p>
    pub fn cluster_info(&self) -> std::option::Option<&crate::model::Cluster> {
        self.cluster_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeClusterV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClusterV2Output`](crate::output::DescribeClusterV2Output).
pub mod describe_cluster_v2_output {

    /// A builder for [`DescribeClusterV2Output`](crate::output::DescribeClusterV2Output).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info: std::option::Option<crate::model::Cluster>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The cluster information.</p>
        pub fn cluster_info(mut self, input: crate::model::Cluster) -> Self {
            self.cluster_info = Some(input);
            self
        }
        /// <p>The cluster information.</p>
        pub fn set_cluster_info(
            mut self,
            input: std::option::Option<crate::model::Cluster>,
        ) -> Self {
            self.cluster_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterV2Output`](crate::output::DescribeClusterV2Output).
        pub fn build(self) -> crate::output::DescribeClusterV2Output {
            crate::output::DescribeClusterV2Output {
                cluster_info: self.cluster_info,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClusterV2Output {
    /// Creates a new builder-style object to manufacture [`DescribeClusterV2Output`](crate::output::DescribeClusterV2Output).
    pub fn builder() -> crate::output::describe_cluster_v2_output::Builder {
        crate::output::describe_cluster_v2_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClusterOperationOutput {
    /// <p>Cluster operation information</p>
    #[doc(hidden)]
    pub cluster_operation_info: std::option::Option<crate::model::ClusterOperationInfo>,
    _request_id: Option<String>,
}
impl DescribeClusterOperationOutput {
    /// <p>Cluster operation information</p>
    pub fn cluster_operation_info(
        &self,
    ) -> std::option::Option<&crate::model::ClusterOperationInfo> {
        self.cluster_operation_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeClusterOperationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput).
pub mod describe_cluster_operation_output {

    /// A builder for [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_operation_info: std::option::Option<crate::model::ClusterOperationInfo>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Cluster operation information</p>
        pub fn cluster_operation_info(mut self, input: crate::model::ClusterOperationInfo) -> Self {
            self.cluster_operation_info = Some(input);
            self
        }
        /// <p>Cluster operation information</p>
        pub fn set_cluster_operation_info(
            mut self,
            input: std::option::Option<crate::model::ClusterOperationInfo>,
        ) -> Self {
            self.cluster_operation_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput).
        pub fn build(self) -> crate::output::DescribeClusterOperationOutput {
            crate::output::DescribeClusterOperationOutput {
                cluster_operation_info: self.cluster_operation_info,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClusterOperationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput).
    pub fn builder() -> crate::output::describe_cluster_operation_output::Builder {
        crate::output::describe_cluster_operation_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeClusterOutput {
    /// <p>The cluster information.</p>
    #[doc(hidden)]
    pub cluster_info: std::option::Option<crate::model::ClusterInfo>,
    _request_id: Option<String>,
}
impl DescribeClusterOutput {
    /// <p>The cluster information.</p>
    pub fn cluster_info(&self) -> std::option::Option<&crate::model::ClusterInfo> {
        self.cluster_info.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DescribeClusterOutput`](crate::output::DescribeClusterOutput).
pub mod describe_cluster_output {

    /// A builder for [`DescribeClusterOutput`](crate::output::DescribeClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_info: std::option::Option<crate::model::ClusterInfo>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The cluster information.</p>
        pub fn cluster_info(mut self, input: crate::model::ClusterInfo) -> Self {
            self.cluster_info = Some(input);
            self
        }
        /// <p>The cluster information.</p>
        pub fn set_cluster_info(
            mut self,
            input: std::option::Option<crate::model::ClusterInfo>,
        ) -> Self {
            self.cluster_info = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeClusterOutput`](crate::output::DescribeClusterOutput).
        pub fn build(self) -> crate::output::DescribeClusterOutput {
            crate::output::DescribeClusterOutput {
                cluster_info: self.cluster_info,
                _request_id: self._request_id,
            }
        }
    }
}
impl DescribeClusterOutput {
    /// Creates a new builder-style object to manufacture [`DescribeClusterOutput`](crate::output::DescribeClusterOutput).
    pub fn builder() -> crate::output::describe_cluster_output::Builder {
        crate::output::describe_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ConfigurationState>,
    _request_id: Option<String>,
}
impl DeleteConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn state(&self) -> std::option::Option<&crate::model::ConfigurationState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput).
pub mod delete_configuration_output {

    /// A builder for [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteConfigurationOutput {
            crate::output::DeleteConfigurationOutput {
                arn: self.arn,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput).
    pub fn builder() -> crate::output::delete_configuration_output::Builder {
        crate::output::delete_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ClusterState>,
    _request_id: Option<String>,
}
impl DeleteClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ClusterState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`DeleteClusterOutput`](crate::output::DeleteClusterOutput).
pub mod delete_cluster_output {

    /// A builder for [`DeleteClusterOutput`](crate::output::DeleteClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ClusterState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn state(mut self, input: crate::model::ClusterState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::ClusterState>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteClusterOutput`](crate::output::DeleteClusterOutput).
        pub fn build(self) -> crate::output::DeleteClusterOutput {
            crate::output::DeleteClusterOutput {
                cluster_arn: self.cluster_arn,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl DeleteClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteClusterOutput`](crate::output::DeleteClusterOutput).
    pub fn builder() -> crate::output::delete_cluster_output::Builder {
        crate::output::delete_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Latest revision of the configuration.</p>
    #[doc(hidden)]
    pub latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
    /// <p>The name of the configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ConfigurationState>,
    _request_id: Option<String>,
}
impl CreateConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn latest_revision(&self) -> std::option::Option<&crate::model::ConfigurationRevision> {
        self.latest_revision.as_ref()
    }
    /// <p>The name of the configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn state(&self) -> std::option::Option<&crate::model::ConfigurationState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput).
pub mod create_configuration_output {

    /// A builder for [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) arn: std::option::Option<std::string::String>,
        pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
        pub(crate) latest_revision: std::option::Option<crate::model::ConfigurationRevision>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ConfigurationState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.arn = input;
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
            self.creation_time = Some(input);
            self
        }
        /// <p>The time when the configuration was created.</p>
        pub fn set_creation_time(
            mut self,
            input: std::option::Option<aws_smithy_types::DateTime>,
        ) -> Self {
            self.creation_time = input;
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn latest_revision(mut self, input: crate::model::ConfigurationRevision) -> Self {
            self.latest_revision = Some(input);
            self
        }
        /// <p>Latest revision of the configuration.</p>
        pub fn set_latest_revision(
            mut self,
            input: std::option::Option<crate::model::ConfigurationRevision>,
        ) -> Self {
            self.latest_revision = input;
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn state(mut self, input: crate::model::ConfigurationState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
        pub fn set_state(
            mut self,
            input: std::option::Option<crate::model::ConfigurationState>,
        ) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput).
        pub fn build(self) -> crate::output::CreateConfigurationOutput {
            crate::output::CreateConfigurationOutput {
                arn: self.arn,
                creation_time: self.creation_time,
                latest_revision: self.latest_revision,
                name: self.name,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput).
    pub fn builder() -> crate::output::create_configuration_output::Builder {
        crate::output::create_configuration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClusterV2Output {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The name of the MSK cluster.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ClusterState>,
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    #[doc(hidden)]
    pub cluster_type: std::option::Option<crate::model::ClusterType>,
    _request_id: Option<String>,
}
impl CreateClusterV2Output {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the MSK cluster.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ClusterState> {
        self.state.as_ref()
    }
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    pub fn cluster_type(&self) -> std::option::Option<&crate::model::ClusterType> {
        self.cluster_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateClusterV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateClusterV2Output`](crate::output::CreateClusterV2Output).
pub mod create_cluster_v2_output {

    /// A builder for [`CreateClusterV2Output`](crate::output::CreateClusterV2Output).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ClusterState>,
        pub(crate) cluster_type: std::option::Option<crate::model::ClusterType>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_name = Some(input.into());
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_name = input;
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn state(mut self, input: crate::model::ClusterState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::ClusterState>) -> Self {
            self.state = input;
            self
        }
        /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
        pub fn cluster_type(mut self, input: crate::model::ClusterType) -> Self {
            self.cluster_type = Some(input);
            self
        }
        /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
        pub fn set_cluster_type(
            mut self,
            input: std::option::Option<crate::model::ClusterType>,
        ) -> Self {
            self.cluster_type = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateClusterV2Output`](crate::output::CreateClusterV2Output).
        pub fn build(self) -> crate::output::CreateClusterV2Output {
            crate::output::CreateClusterV2Output {
                cluster_arn: self.cluster_arn,
                cluster_name: self.cluster_name,
                state: self.state,
                cluster_type: self.cluster_type,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateClusterV2Output {
    /// Creates a new builder-style object to manufacture [`CreateClusterV2Output`](crate::output::CreateClusterV2Output).
    pub fn builder() -> crate::output::create_cluster_v2_output::Builder {
        crate::output::create_cluster_v2_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The name of the MSK cluster.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::model::ClusterState>,
    _request_id: Option<String>,
}
impl CreateClusterOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the MSK cluster.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn state(&self) -> std::option::Option<&crate::model::ClusterState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`CreateClusterOutput`](crate::output::CreateClusterOutput).
pub mod create_cluster_output {

    /// A builder for [`CreateClusterOutput`](crate::output::CreateClusterOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) cluster_name: std::option::Option<std::string::String>,
        pub(crate) state: std::option::Option<crate::model::ClusterState>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_name = Some(input.into());
            self
        }
        /// <p>The name of the MSK cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_name = input;
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn state(mut self, input: crate::model::ClusterState) -> Self {
            self.state = Some(input);
            self
        }
        /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
        pub fn set_state(mut self, input: std::option::Option<crate::model::ClusterState>) -> Self {
            self.state = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateClusterOutput`](crate::output::CreateClusterOutput).
        pub fn build(self) -> crate::output::CreateClusterOutput {
            crate::output::CreateClusterOutput {
                cluster_arn: self.cluster_arn,
                cluster_name: self.cluster_name,
                state: self.state,
                _request_id: self._request_id,
            }
        }
    }
}
impl CreateClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateClusterOutput`](crate::output::CreateClusterOutput).
    pub fn builder() -> crate::output::create_cluster_output::Builder {
        crate::output::create_cluster_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDisassociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>List of errors when disassociating secrets to cluster.</p>
    #[doc(hidden)]
    pub unprocessed_scram_secrets:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
    _request_id: Option<String>,
}
impl BatchDisassociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>List of errors when disassociating secrets to cluster.</p>
    pub fn unprocessed_scram_secrets(
        &self,
    ) -> std::option::Option<&[crate::model::UnprocessedScramSecret]> {
        self.unprocessed_scram_secrets.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDisassociateScramSecretOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput).
pub mod batch_disassociate_scram_secret_output {

    /// A builder for [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) unprocessed_scram_secrets:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Appends an item to `unprocessed_scram_secrets`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_scram_secrets`](Self::set_unprocessed_scram_secrets).
        ///
        /// <p>List of errors when disassociating secrets to cluster.</p>
        pub fn unprocessed_scram_secrets(
            mut self,
            input: crate::model::UnprocessedScramSecret,
        ) -> Self {
            let mut v = self.unprocessed_scram_secrets.unwrap_or_default();
            v.push(input);
            self.unprocessed_scram_secrets = Some(v);
            self
        }
        /// <p>List of errors when disassociating secrets to cluster.</p>
        pub fn set_unprocessed_scram_secrets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        ) -> Self {
            self.unprocessed_scram_secrets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput).
        pub fn build(self) -> crate::output::BatchDisassociateScramSecretOutput {
            crate::output::BatchDisassociateScramSecretOutput {
                cluster_arn: self.cluster_arn,
                unprocessed_scram_secrets: self.unprocessed_scram_secrets,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchDisassociateScramSecretOutput {
    /// Creates a new builder-style object to manufacture [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput).
    pub fn builder() -> crate::output::batch_disassociate_scram_secret_output::Builder {
        crate::output::batch_disassociate_scram_secret_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchAssociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>List of errors when associating secrets to cluster.</p>
    #[doc(hidden)]
    pub unprocessed_scram_secrets:
        std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
    _request_id: Option<String>,
}
impl BatchAssociateScramSecretOutput {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>List of errors when associating secrets to cluster.</p>
    pub fn unprocessed_scram_secrets(
        &self,
    ) -> std::option::Option<&[crate::model::UnprocessedScramSecret]> {
        self.unprocessed_scram_secrets.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchAssociateScramSecretOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput).
pub mod batch_associate_scram_secret_output {

    /// A builder for [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) cluster_arn: std::option::Option<std::string::String>,
        pub(crate) unprocessed_scram_secrets:
            std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.cluster_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cluster_arn = input;
            self
        }
        /// Appends an item to `unprocessed_scram_secrets`.
        ///
        /// To override the contents of this collection use [`set_unprocessed_scram_secrets`](Self::set_unprocessed_scram_secrets).
        ///
        /// <p>List of errors when associating secrets to cluster.</p>
        pub fn unprocessed_scram_secrets(
            mut self,
            input: crate::model::UnprocessedScramSecret,
        ) -> Self {
            let mut v = self.unprocessed_scram_secrets.unwrap_or_default();
            v.push(input);
            self.unprocessed_scram_secrets = Some(v);
            self
        }
        /// <p>List of errors when associating secrets to cluster.</p>
        pub fn set_unprocessed_scram_secrets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UnprocessedScramSecret>>,
        ) -> Self {
            self.unprocessed_scram_secrets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput).
        pub fn build(self) -> crate::output::BatchAssociateScramSecretOutput {
            crate::output::BatchAssociateScramSecretOutput {
                cluster_arn: self.cluster_arn,
                unprocessed_scram_secrets: self.unprocessed_scram_secrets,
                _request_id: self._request_id,
            }
        }
    }
}
impl BatchAssociateScramSecretOutput {
    /// Creates a new builder-style object to manufacture [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput).
    pub fn builder() -> crate::output::batch_associate_scram_secret_output::Builder {
        crate::output::batch_associate_scram_secret_output::Builder::default()
    }
}
