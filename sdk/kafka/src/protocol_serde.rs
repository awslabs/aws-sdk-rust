// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_batch_associate_scram_secret;

pub(crate) mod shape_batch_disassociate_scram_secret;

pub(crate) mod shape_create_cluster;

pub(crate) mod shape_create_cluster_v2;

pub(crate) mod shape_create_configuration;

pub(crate) mod shape_create_replicator;

pub(crate) mod shape_create_vpc_connection;

pub(crate) mod shape_delete_cluster;

pub(crate) mod shape_delete_cluster_policy;

pub(crate) mod shape_delete_configuration;

pub(crate) mod shape_delete_replicator;

pub(crate) mod shape_delete_vpc_connection;

pub(crate) mod shape_describe_cluster;

pub(crate) mod shape_describe_cluster_operation;

pub(crate) mod shape_describe_cluster_operation_v2;

pub(crate) mod shape_describe_cluster_v2;

pub(crate) mod shape_describe_configuration;

pub(crate) mod shape_describe_configuration_revision;

pub(crate) mod shape_describe_replicator;

pub(crate) mod shape_describe_vpc_connection;

pub(crate) mod shape_get_bootstrap_brokers;

pub(crate) mod shape_get_cluster_policy;

pub(crate) mod shape_get_compatible_kafka_versions;

pub(crate) mod shape_list_client_vpc_connections;

pub(crate) mod shape_list_cluster_operations;

pub(crate) mod shape_list_cluster_operations_v2;

pub(crate) mod shape_list_clusters;

pub(crate) mod shape_list_clusters_v2;

pub(crate) mod shape_list_configuration_revisions;

pub(crate) mod shape_list_configurations;

pub(crate) mod shape_list_kafka_versions;

pub(crate) mod shape_list_nodes;

pub(crate) mod shape_list_replicators;

pub(crate) mod shape_list_scram_secrets;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_vpc_connections;

pub(crate) mod shape_put_cluster_policy;

pub(crate) mod shape_reboot_broker;

pub(crate) mod shape_reject_client_vpc_connection;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_broker_count;

pub(crate) mod shape_update_broker_storage;

pub(crate) mod shape_update_broker_type;

pub(crate) mod shape_update_cluster_configuration;

pub(crate) mod shape_update_cluster_kafka_version;

pub(crate) mod shape_update_configuration;

pub(crate) mod shape_update_connectivity;

pub(crate) mod shape_update_monitoring;

pub(crate) mod shape_update_replication_info;

pub(crate) mod shape_update_security;

pub(crate) mod shape_update_storage;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_batch_associate_scram_secret_input;

pub(crate) mod shape_batch_disassociate_scram_secret_input;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_cluster_input;

pub(crate) mod shape_create_cluster_v2_input;

pub(crate) mod shape_create_configuration_input;

pub(crate) mod shape_create_replicator_input;

pub(crate) mod shape_create_vpc_connection_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_internal_server_error_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_put_cluster_policy_input;

pub(crate) mod shape_reboot_broker_input;

pub(crate) mod shape_reject_client_vpc_connection_input;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_broker_count_input;

pub(crate) mod shape_update_broker_storage_input;

pub(crate) mod shape_update_broker_type_input;

pub(crate) mod shape_update_cluster_configuration_input;

pub(crate) mod shape_update_cluster_kafka_version_input;

pub(crate) mod shape_update_configuration_input;

pub(crate) mod shape_update_connectivity_input;

pub(crate) mod shape_update_monitoring_input;

pub(crate) mod shape_update_replication_info_input;

pub(crate) mod shape_update_security_input;

pub(crate) mod shape_update_storage_input;

pub(crate) mod shape_broker_ebs_volume_info;

pub(crate) mod shape_broker_node_group_info;

pub(crate) mod shape_client_authentication;

pub(crate) mod shape_cluster;

pub(crate) mod shape_cluster_info;

pub(crate) mod shape_cluster_operation_info;

pub(crate) mod shape_cluster_operation_v2;

pub(crate) mod shape_configuration_info;

pub(crate) mod shape_configuration_revision;

pub(crate) mod shape_connectivity_info;

pub(crate) mod shape_consumer_group_replication_update;

pub(crate) mod shape_encryption_info;

pub(crate) mod shape_kafka_cluster;

pub(crate) mod shape_list_of_client_vpc_connection;

pub(crate) mod shape_list_of_cluster;

pub(crate) mod shape_list_of_cluster_info;

pub(crate) mod shape_list_of_cluster_operation_info;

pub(crate) mod shape_list_of_cluster_operation_v2_summary;

pub(crate) mod shape_list_of_compatible_kafka_version;

pub(crate) mod shape_list_of_configuration;

pub(crate) mod shape_list_of_configuration_revision;

pub(crate) mod shape_list_of_kafka_cluster_description;

pub(crate) mod shape_list_of_kafka_version;

pub(crate) mod shape_list_of_node_info;

pub(crate) mod shape_list_of_replication_info_description;

pub(crate) mod shape_list_of_replicator_summary;

pub(crate) mod shape_list_of_string;

pub(crate) mod shape_list_of_unprocessed_scram_secret;

pub(crate) mod shape_list_of_vpc_connection;

pub(crate) mod shape_logging_info;

pub(crate) mod shape_map_of_string;

pub(crate) mod shape_open_monitoring_info;

pub(crate) mod shape_provisioned_request;

pub(crate) mod shape_provisioned_throughput;

pub(crate) mod shape_replication_info;

pub(crate) mod shape_replication_state_info;

pub(crate) mod shape_serverless_request;

pub(crate) mod shape_topic_replication_update;

pub(crate) mod shape_amazon_msk_cluster;

pub(crate) mod shape_broker_logs;

pub(crate) mod shape_broker_software_info;

pub(crate) mod shape_client_vpc_connection;

pub(crate) mod shape_cluster_operation_v2_provisioned;

pub(crate) mod shape_cluster_operation_v2_serverless;

pub(crate) mod shape_cluster_operation_v2_summary;

pub(crate) mod shape_compatible_kafka_version;

pub(crate) mod shape_configuration;

pub(crate) mod shape_consumer_group_replication;

pub(crate) mod shape_encryption_at_rest;

pub(crate) mod shape_encryption_in_transit;

pub(crate) mod shape_error_info;

pub(crate) mod shape_kafka_cluster_client_vpc_config;

pub(crate) mod shape_kafka_cluster_description;

pub(crate) mod shape_kafka_version;

pub(crate) mod shape_list_of_cluster_operation_step;

pub(crate) mod shape_mutable_cluster_info;

pub(crate) mod shape_node_info;

pub(crate) mod shape_open_monitoring;

pub(crate) mod shape_prometheus_info;

pub(crate) mod shape_provisioned;

pub(crate) mod shape_public_access;

pub(crate) mod shape_replication_info_description;

pub(crate) mod shape_replicator_summary;

pub(crate) mod shape_sasl;

pub(crate) mod shape_serverless;

pub(crate) mod shape_serverless_client_authentication;

pub(crate) mod shape_state_info;

pub(crate) mod shape_storage_info;

pub(crate) mod shape_tls;

pub(crate) mod shape_topic_replication;

pub(crate) mod shape_unauthenticated;

pub(crate) mod shape_unprocessed_scram_secret;

pub(crate) mod shape_vpc_config;

pub(crate) mod shape_vpc_connection;

pub(crate) mod shape_vpc_connection_info;

pub(crate) mod shape_vpc_connectivity;

pub(crate) mod shape_broker_node_info;

pub(crate) mod shape_cloud_watch_logs;

pub(crate) mod shape_cluster_operation_step;

pub(crate) mod shape_ebs_storage_info;

pub(crate) mod shape_firehose;

pub(crate) mod shape_iam;

pub(crate) mod shape_jmx_exporter_info;

pub(crate) mod shape_list_of_broker_ebs_volume_info;

pub(crate) mod shape_list_of_kafka_cluster_summary;

pub(crate) mod shape_list_of_replication_info_summary;

pub(crate) mod shape_list_of_vpc_config;

pub(crate) mod shape_node_exporter_info;

pub(crate) mod shape_prometheus;

pub(crate) mod shape_s3;

pub(crate) mod shape_scram;

pub(crate) mod shape_serverless_sasl;

pub(crate) mod shape_user_identity;

pub(crate) mod shape_vpc_connection_info_serverless;

pub(crate) mod shape_vpc_connectivity_client_authentication;

pub(crate) mod shape_zookeeper_node_info;

pub(crate) mod shape_cluster_operation_step_info;

pub(crate) mod shape_jmx_exporter;

pub(crate) mod shape_kafka_cluster_summary;

pub(crate) mod shape_list_of_string_max249;

pub(crate) mod shape_list_of_string_max256;

pub(crate) mod shape_node_exporter;

pub(crate) mod shape_replication_info_summary;

pub(crate) mod shape_vpc_connectivity_sasl;

pub(crate) mod shape_vpc_connectivity_tls;

pub(crate) mod shape_vpc_connectivity_iam;

pub(crate) mod shape_vpc_connectivity_scram;
