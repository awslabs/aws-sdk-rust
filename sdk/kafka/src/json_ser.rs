// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_associate_scram_secret_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchAssociateScramSecretInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.secret_arn_list {
        let mut array_2 = object.key("secretArnList").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_batch_disassociate_scram_secret_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDisassociateScramSecretInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.secret_arn_list {
        let mut array_5 = object.key("secretArnList").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_cluster_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClusterInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.broker_node_group_info {
        let mut object_8 = object.key("brokerNodeGroupInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_broker_node_group_info(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_authentication {
        let mut object_10 = object.key("clientAuthentication").start_object();
        crate::json_ser::serialize_structure_crate_model_client_authentication(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.cluster_name {
        object.key("clusterName").string(var_11);
    }
    if let Some(var_12) = &input.configuration_info {
        let mut object_13 = object.key("configurationInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_configuration_info(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.encryption_info {
        let mut object_15 = object.key("encryptionInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_info(&mut object_15, var_14)?;
        object_15.finish();
    }
    if let Some(var_16) = &input.enhanced_monitoring {
        object.key("enhancedMonitoring").string(var_16.as_str());
    }
    if let Some(var_17) = &input.kafka_version {
        object.key("kafkaVersion").string(var_17);
    }
    if let Some(var_18) = &input.logging_info {
        let mut object_19 = object.key("loggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_19, var_18)?;
        object_19.finish();
    }
    {
        object.key("numberOfBrokerNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_broker_nodes).into()),
        );
    }
    if let Some(var_20) = &input.open_monitoring {
        let mut object_21 = object.key("openMonitoring").start_object();
        crate::json_ser::serialize_structure_crate_model_open_monitoring_info(
            &mut object_21,
            var_20,
        )?;
        object_21.finish();
    }
    if let Some(var_22) = &input.tags {
        let mut object_23 = object.key("tags").start_object();
        for (key_24, value_25) in var_22 {
            {
                object_23.key(key_24).string(value_25);
            }
        }
        object_23.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.description {
        object.key("description").string(var_26);
    }
    if let Some(var_27) = &input.kafka_versions {
        let mut array_28 = object.key("kafkaVersions").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29);
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.name {
        object.key("name").string(var_30);
    }
    if let Some(var_31) = &input.server_properties {
        object
            .key("serverProperties")
            .string_unchecked(&aws_smithy_types::base64::encode(var_31));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_reboot_broker_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RebootBrokerInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.broker_ids {
        let mut array_33 = object.key("brokerIds").start_array();
        for item_34 in var_32 {
            {
                array_33.value().string(item_34);
            }
        }
        array_33.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_broker_count_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBrokerCountInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.current_version {
        object.key("currentVersion").string(var_39);
    }
    {
        object.key("targetNumberOfBrokerNodes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.target_number_of_broker_nodes).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_broker_storage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBrokerStorageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.current_version {
        object.key("currentVersion").string(var_40);
    }
    if let Some(var_41) = &input.target_broker_ebs_volume_info {
        let mut array_42 = object.key("targetBrokerEBSVolumeInfo").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_broker_ebs_volume_info(
                    &mut object_44,
                    item_43,
                )?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_broker_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBrokerTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.current_version {
        object.key("currentVersion").string(var_45);
    }
    if let Some(var_46) = &input.target_instance_type {
        object.key("targetInstanceType").string(var_46);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.configuration_info {
        let mut object_48 = object.key("configurationInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_configuration_info(
            &mut object_48,
            var_47,
        )?;
        object_48.finish();
    }
    if let Some(var_49) = &input.current_version {
        object.key("currentVersion").string(var_49);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_cluster_kafka_version_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterKafkaVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.configuration_info {
        let mut object_51 = object.key("configurationInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_configuration_info(
            &mut object_51,
            var_50,
        )?;
        object_51.finish();
    }
    if let Some(var_52) = &input.current_version {
        object.key("currentVersion").string(var_52);
    }
    if let Some(var_53) = &input.target_kafka_version {
        object.key("targetKafkaVersion").string(var_53);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.description {
        object.key("description").string(var_54);
    }
    if let Some(var_55) = &input.server_properties {
        object
            .key("serverProperties")
            .string_unchecked(&aws_smithy_types::base64::encode(var_55));
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_connectivity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateConnectivityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.connectivity_info {
        let mut object_57 = object.key("connectivityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_connectivity_info(&mut object_57, var_56)?;
        object_57.finish();
    }
    if let Some(var_58) = &input.current_version {
        object.key("currentVersion").string(var_58);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_monitoring_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMonitoringInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_59) = &input.current_version {
        object.key("currentVersion").string(var_59);
    }
    if let Some(var_60) = &input.enhanced_monitoring {
        object.key("enhancedMonitoring").string(var_60.as_str());
    }
    if let Some(var_61) = &input.logging_info {
        let mut object_62 = object.key("loggingInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_info(&mut object_62, var_61)?;
        object_62.finish();
    }
    if let Some(var_63) = &input.open_monitoring {
        let mut object_64 = object.key("openMonitoring").start_object();
        crate::json_ser::serialize_structure_crate_model_open_monitoring_info(
            &mut object_64,
            var_63,
        )?;
        object_64.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_security_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSecurityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_65) = &input.client_authentication {
        let mut object_66 = object.key("clientAuthentication").start_object();
        crate::json_ser::serialize_structure_crate_model_client_authentication(
            &mut object_66,
            var_65,
        )?;
        object_66.finish();
    }
    if let Some(var_67) = &input.current_version {
        object.key("currentVersion").string(var_67);
    }
    if let Some(var_68) = &input.encryption_info {
        let mut object_69 = object.key("encryptionInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_info(&mut object_69, var_68)?;
        object_69.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_broker_node_group_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BrokerNodeGroupInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.broker_az_distribution {
        object.key("brokerAZDistribution").string(var_70.as_str());
    }
    if let Some(var_71) = &input.client_subnets {
        let mut array_72 = object.key("clientSubnets").start_array();
        for item_73 in var_71 {
            {
                array_72.value().string(item_73);
            }
        }
        array_72.finish();
    }
    if let Some(var_74) = &input.instance_type {
        object.key("instanceType").string(var_74);
    }
    if let Some(var_75) = &input.security_groups {
        let mut array_76 = object.key("securityGroups").start_array();
        for item_77 in var_75 {
            {
                array_76.value().string(item_77);
            }
        }
        array_76.finish();
    }
    if let Some(var_78) = &input.storage_info {
        let mut object_79 = object.key("storageInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_storage_info(&mut object_79, var_78)?;
        object_79.finish();
    }
    if let Some(var_80) = &input.connectivity_info {
        let mut object_81 = object.key("connectivityInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_connectivity_info(&mut object_81, var_80)?;
        object_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_client_authentication(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ClientAuthentication,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.sasl {
        let mut object_83 = object.key("sasl").start_object();
        crate::json_ser::serialize_structure_crate_model_sasl(&mut object_83, var_82)?;
        object_83.finish();
    }
    if let Some(var_84) = &input.tls {
        let mut object_85 = object.key("tls").start_object();
        crate::json_ser::serialize_structure_crate_model_tls(&mut object_85, var_84)?;
        object_85.finish();
    }
    if let Some(var_86) = &input.unauthenticated {
        let mut object_87 = object.key("unauthenticated").start_object();
        crate::json_ser::serialize_structure_crate_model_unauthenticated(&mut object_87, var_86)?;
        object_87.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigurationInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_88) = &input.arn {
        object.key("arn").string(var_88);
    }
    {
        object.key("revision").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.revision).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_89) = &input.encryption_at_rest {
        let mut object_90 = object.key("encryptionAtRest").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_at_rest(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.encryption_in_transit {
        let mut object_92 = object.key("encryptionInTransit").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_in_transit(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_logging_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.broker_logs {
        let mut object_94 = object.key("brokerLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_broker_logs(&mut object_94, var_93)?;
        object_94.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_open_monitoring_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OpenMonitoringInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.prometheus {
        let mut object_96 = object.key("prometheus").start_object();
        crate::json_ser::serialize_structure_crate_model_prometheus_info(&mut object_96, var_95)?;
        object_96.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_broker_ebs_volume_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BrokerEbsVolumeInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_97) = &input.kafka_broker_node_id {
        object.key("kafkaBrokerNodeId").string(var_97);
    }
    {
        object.key("volumeSizeGB").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size_gb).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_connectivity_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConnectivityInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_98) = &input.public_access {
        let mut object_99 = object.key("publicAccess").start_object();
        crate::json_ser::serialize_structure_crate_model_public_access(&mut object_99, var_98)?;
        object_99.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_storage_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::StorageInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_100) = &input.ebs_storage_info {
        let mut object_101 = object.key("ebsStorageInfo").start_object();
        crate::json_ser::serialize_structure_crate_model_ebs_storage_info(
            &mut object_101,
            var_100,
        )?;
        object_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sasl(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Sasl,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.scram {
        let mut object_103 = object.key("scram").start_object();
        crate::json_ser::serialize_structure_crate_model_scram(&mut object_103, var_102)?;
        object_103.finish();
    }
    if let Some(var_104) = &input.iam {
        let mut object_105 = object.key("iam").start_object();
        crate::json_ser::serialize_structure_crate_model_iam(&mut object_105, var_104)?;
        object_105.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tls(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tls,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.certificate_authority_arn_list {
        let mut array_107 = object.key("certificateAuthorityArnList").start_array();
        for item_108 in var_106 {
            {
                array_107.value().string(item_108);
            }
        }
        array_107.finish();
    }
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_unauthenticated(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Unauthenticated,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_at_rest(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionAtRest,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_109) = &input.data_volume_kms_key_id {
        object.key("dataVolumeKMSKeyId").string(var_109);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_in_transit(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionInTransit,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_110) = &input.client_broker {
        object.key("clientBroker").string(var_110.as_str());
    }
    if input.in_cluster {
        object.key("inCluster").boolean(input.in_cluster);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_broker_logs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BrokerLogs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_111) = &input.cloud_watch_logs {
        let mut object_112 = object.key("cloudWatchLogs").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_logs(
            &mut object_112,
            var_111,
        )?;
        object_112.finish();
    }
    if let Some(var_113) = &input.firehose {
        let mut object_114 = object.key("firehose").start_object();
        crate::json_ser::serialize_structure_crate_model_firehose(&mut object_114, var_113)?;
        object_114.finish();
    }
    if let Some(var_115) = &input.s3 {
        let mut object_116 = object.key("s3").start_object();
        crate::json_ser::serialize_structure_crate_model_s3(&mut object_116, var_115)?;
        object_116.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_prometheus_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PrometheusInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.jmx_exporter {
        let mut object_118 = object.key("jmxExporter").start_object();
        crate::json_ser::serialize_structure_crate_model_jmx_exporter_info(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    if let Some(var_119) = &input.node_exporter {
        let mut object_120 = object.key("nodeExporter").start_object();
        crate::json_ser::serialize_structure_crate_model_node_exporter_info(
            &mut object_120,
            var_119,
        )?;
        object_120.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_public_access(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PublicAccess,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.r#type {
        object.key("type").string(var_121);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_ebs_storage_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EbsStorageInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.volume_size != 0 {
        object.key("volumeSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.volume_size).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_scram(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Scram,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_iam(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Iam,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if input.enabled {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_logs(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogs,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_122) = &input.log_group {
        object.key("logGroup").string(var_122);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_firehose(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Firehose,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.delivery_stream {
        object.key("deliveryStream").string(var_123);
    }
    {
        object.key("enabled").boolean(input.enabled);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_s3(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_124) = &input.bucket {
        object.key("bucket").string(var_124);
    }
    {
        object.key("enabled").boolean(input.enabled);
    }
    if let Some(var_125) = &input.prefix {
        object.key("prefix").string(var_125);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_jmx_exporter_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JmxExporterInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("enabledInBroker")
            .boolean(input.enabled_in_broker);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_node_exporter_info(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodeExporterInfo,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    {
        object
            .key("enabledInBroker")
            .boolean(input.enabled_in_broker);
    }
    Ok(())
}
