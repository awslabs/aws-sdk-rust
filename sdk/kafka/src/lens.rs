// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_cluster_operations_output_next_token(
    input: &crate::operation::list_cluster_operations::ListClusterOperationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_clusters_output_next_token(
    input: &crate::operation::list_clusters::ListClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_clusters_v2_output_next_token(
    input: &crate::operation::list_clusters_v2::ListClustersV2Output,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_configuration_revisions_output_next_token(
    input: &crate::operation::list_configuration_revisions::ListConfigurationRevisionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_configurations_output_next_token(
    input: &crate::operation::list_configurations::ListConfigurationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_kafka_versions_output_next_token(
    input: &crate::operation::list_kafka_versions::ListKafkaVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_nodes_output_next_token(
    input: &crate::operation::list_nodes::ListNodesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_scram_secrets_output_next_token(
    input: &crate::operation::list_scram_secrets::ListScramSecretsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_cluster_operations_output_cluster_operation_info_list(
    input: crate::operation::list_cluster_operations::ListClusterOperationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterOperationInfo>> {
    let input = match input.cluster_operation_info_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_clusters_output_cluster_info_list(
    input: crate::operation::list_clusters::ListClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClusterInfo>> {
    let input = match input.cluster_info_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_clusters_v2_output_cluster_info_list(
    input: crate::operation::list_clusters_v2::ListClustersV2Output,
) -> std::option::Option<std::vec::Vec<crate::types::Cluster>> {
    let input = match input.cluster_info_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_configuration_revisions_output_revisions(
    input: crate::operation::list_configuration_revisions::ListConfigurationRevisionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigurationRevision>> {
    let input = match input.revisions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_configurations_output_configurations(
    input: crate::operation::list_configurations::ListConfigurationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Configuration>> {
    let input = match input.configurations {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_kafka_versions_output_kafka_versions(
    input: crate::operation::list_kafka_versions::ListKafkaVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::KafkaVersion>> {
    let input = match input.kafka_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_nodes_output_node_info_list(
    input: crate::operation::list_nodes::ListNodesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::NodeInfo>> {
    let input = match input.node_info_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_scram_secrets_output_secret_arn_list(
    input: crate::operation::list_scram_secrets::ListScramSecretsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.secret_arn_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
