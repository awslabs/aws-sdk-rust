// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn configuration_revision_correct_errors(
    mut builder: crate::types::builders::ConfigurationRevisionBuilder,
) -> crate::types::builders::ConfigurationRevisionBuilder {
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn broker_node_group_info_correct_errors(
    mut builder: crate::types::builders::BrokerNodeGroupInfoBuilder,
) -> crate::types::builders::BrokerNodeGroupInfoBuilder {
    if builder.client_subnets.is_none() {
        builder.client_subnets = Some(Default::default())
    }
    if builder.instance_type.is_none() {
        builder.instance_type = Some(Default::default())
    }
    builder
}

pub(crate) fn client_vpc_connection_correct_errors(
    mut builder: crate::types::builders::ClientVpcConnectionBuilder,
) -> crate::types::builders::ClientVpcConnectionBuilder {
    if builder.vpc_connection_arn.is_none() {
        builder.vpc_connection_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_correct_errors(
    mut builder: crate::types::builders::ConfigurationBuilder,
) -> crate::types::builders::ConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.kafka_versions.is_none() {
        builder.kafka_versions = Some(Default::default())
    }
    if builder.latest_revision.is_none() {
        builder.latest_revision = {
            let builder = crate::types::builders::ConfigurationRevisionBuilder::default();
            Some(crate::serde_util::configuration_revision_correct_errors(builder).build())
        }
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::ConfigurationState>().ok()
    }
    builder
}

pub(crate) fn logging_info_correct_errors(mut builder: crate::types::builders::LoggingInfoBuilder) -> crate::types::builders::LoggingInfoBuilder {
    if builder.broker_logs.is_none() {
        builder.broker_logs = {
            let builder = crate::types::builders::BrokerLogsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn open_monitoring_correct_errors(
    mut builder: crate::types::builders::OpenMonitoringBuilder,
) -> crate::types::builders::OpenMonitoringBuilder {
    if builder.prometheus.is_none() {
        builder.prometheus = {
            let builder = crate::types::builders::PrometheusBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn provisioned_correct_errors(mut builder: crate::types::builders::ProvisionedBuilder) -> crate::types::builders::ProvisionedBuilder {
    if builder.broker_node_group_info.is_none() {
        builder.broker_node_group_info = {
            let builder = crate::types::builders::BrokerNodeGroupInfoBuilder::default();
            Some(crate::serde_util::broker_node_group_info_correct_errors(builder).build())
        }
    }
    if builder.number_of_broker_nodes.is_none() {
        builder.number_of_broker_nodes = Some(Default::default())
    }
    builder
}

pub(crate) fn serverless_correct_errors(mut builder: crate::types::builders::ServerlessBuilder) -> crate::types::builders::ServerlessBuilder {
    if builder.vpc_configs.is_none() {
        builder.vpc_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_connection_correct_errors(
    mut builder: crate::types::builders::VpcConnectionBuilder,
) -> crate::types::builders::VpcConnectionBuilder {
    if builder.vpc_connection_arn.is_none() {
        builder.vpc_connection_arn = Some(Default::default())
    }
    if builder.target_cluster_arn.is_none() {
        builder.target_cluster_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn amazon_msk_cluster_correct_errors(
    mut builder: crate::types::builders::AmazonMskClusterBuilder,
) -> crate::types::builders::AmazonMskClusterBuilder {
    if builder.msk_cluster_arn.is_none() {
        builder.msk_cluster_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_info_correct_errors(
    mut builder: crate::types::builders::ConfigurationInfoBuilder,
) -> crate::types::builders::ConfigurationInfoBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.revision.is_none() {
        builder.revision = Some(Default::default())
    }
    builder
}

pub(crate) fn consumer_group_replication_correct_errors(
    mut builder: crate::types::builders::ConsumerGroupReplicationBuilder,
) -> crate::types::builders::ConsumerGroupReplicationBuilder {
    if builder.consumer_groups_to_replicate.is_none() {
        builder.consumer_groups_to_replicate = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_at_rest_correct_errors(
    mut builder: crate::types::builders::EncryptionAtRestBuilder,
) -> crate::types::builders::EncryptionAtRestBuilder {
    if builder.data_volume_kms_key_id.is_none() {
        builder.data_volume_kms_key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn kafka_cluster_client_vpc_config_correct_errors(
    mut builder: crate::types::builders::KafkaClusterClientVpcConfigBuilder,
) -> crate::types::builders::KafkaClusterClientVpcConfigBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn open_monitoring_info_correct_errors(
    mut builder: crate::types::builders::OpenMonitoringInfoBuilder,
) -> crate::types::builders::OpenMonitoringInfoBuilder {
    if builder.prometheus.is_none() {
        builder.prometheus = {
            let builder = crate::types::builders::PrometheusInfoBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn topic_replication_correct_errors(
    mut builder: crate::types::builders::TopicReplicationBuilder,
) -> crate::types::builders::TopicReplicationBuilder {
    if builder.topics_to_replicate.is_none() {
        builder.topics_to_replicate = Some(Default::default())
    }
    builder
}

pub(crate) fn broker_ebs_volume_info_correct_errors(
    mut builder: crate::types::builders::BrokerEbsVolumeInfoBuilder,
) -> crate::types::builders::BrokerEbsVolumeInfoBuilder {
    if builder.kafka_broker_node_id.is_none() {
        builder.kafka_broker_node_id = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_logs_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogsBuilder,
) -> crate::types::builders::CloudWatchLogsBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn firehose_correct_errors(mut builder: crate::types::builders::FirehoseBuilder) -> crate::types::builders::FirehoseBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn jmx_exporter_correct_errors(mut builder: crate::types::builders::JmxExporterBuilder) -> crate::types::builders::JmxExporterBuilder {
    if builder.enabled_in_broker.is_none() {
        builder.enabled_in_broker = Some(Default::default())
    }
    builder
}

pub(crate) fn node_exporter_correct_errors(mut builder: crate::types::builders::NodeExporterBuilder) -> crate::types::builders::NodeExporterBuilder {
    if builder.enabled_in_broker.is_none() {
        builder.enabled_in_broker = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_correct_errors(mut builder: crate::types::builders::S3Builder) -> crate::types::builders::S3Builder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn jmx_exporter_info_correct_errors(
    mut builder: crate::types::builders::JmxExporterInfoBuilder,
) -> crate::types::builders::JmxExporterInfoBuilder {
    if builder.enabled_in_broker.is_none() {
        builder.enabled_in_broker = Some(Default::default())
    }
    builder
}

pub(crate) fn node_exporter_info_correct_errors(
    mut builder: crate::types::builders::NodeExporterInfoBuilder,
) -> crate::types::builders::NodeExporterInfoBuilder {
    if builder.enabled_in_broker.is_none() {
        builder.enabled_in_broker = Some(Default::default())
    }
    builder
}
