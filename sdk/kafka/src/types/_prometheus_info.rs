// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Prometheus settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PrometheusInfo {
    /// <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
    #[doc(hidden)]
    pub jmx_exporter: std::option::Option<crate::types::JmxExporterInfo>,
    /// <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
    #[doc(hidden)]
    pub node_exporter: std::option::Option<crate::types::NodeExporterInfo>,
}
impl PrometheusInfo {
    /// <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
    pub fn jmx_exporter(&self) -> std::option::Option<&crate::types::JmxExporterInfo> {
        self.jmx_exporter.as_ref()
    }
    /// <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
    pub fn node_exporter(&self) -> std::option::Option<&crate::types::NodeExporterInfo> {
        self.node_exporter.as_ref()
    }
}
impl PrometheusInfo {
    /// Creates a new builder-style object to manufacture [`PrometheusInfo`](crate::types::PrometheusInfo).
    pub fn builder() -> crate::types::builders::PrometheusInfoBuilder {
        crate::types::builders::PrometheusInfoBuilder::default()
    }
}

/// A builder for [`PrometheusInfo`](crate::types::PrometheusInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PrometheusInfoBuilder {
    pub(crate) jmx_exporter: std::option::Option<crate::types::JmxExporterInfo>,
    pub(crate) node_exporter: std::option::Option<crate::types::NodeExporterInfo>,
}
impl PrometheusInfoBuilder {
    /// <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
    pub fn jmx_exporter(mut self, input: crate::types::JmxExporterInfo) -> Self {
        self.jmx_exporter = Some(input);
        self
    }
    /// <p>Indicates whether you want to turn on or turn off the JMX Exporter.</p>
    pub fn set_jmx_exporter(
        mut self,
        input: std::option::Option<crate::types::JmxExporterInfo>,
    ) -> Self {
        self.jmx_exporter = input;
        self
    }
    /// <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
    pub fn node_exporter(mut self, input: crate::types::NodeExporterInfo) -> Self {
        self.node_exporter = Some(input);
        self
    }
    /// <p>Indicates whether you want to turn on or turn off the Node Exporter.</p>
    pub fn set_node_exporter(
        mut self,
        input: std::option::Option<crate::types::NodeExporterInfo>,
    ) -> Self {
        self.node_exporter = input;
        self
    }
    /// Consumes the builder and constructs a [`PrometheusInfo`](crate::types::PrometheusInfo).
    pub fn build(self) -> crate::types::PrometheusInfo {
        crate::types::PrometheusInfo {
            jmx_exporter: self.jmx_exporter,
            node_exporter: self.node_exporter,
        }
    }
}
