// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the EBS storage volumes attached to Apache Kafka broker nodes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EbsStorageInfo {
    /// <p>EBS volume provisioned throughput information.</p>
    #[doc(hidden)]
    pub provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    /// <p>The size in GiB of the EBS volume for the data drive on each broker node.</p>
    #[doc(hidden)]
    pub volume_size: i32,
}
impl EbsStorageInfo {
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn provisioned_throughput(
        &self,
    ) -> std::option::Option<&crate::types::ProvisionedThroughput> {
        self.provisioned_throughput.as_ref()
    }
    /// <p>The size in GiB of the EBS volume for the data drive on each broker node.</p>
    pub fn volume_size(&self) -> i32 {
        self.volume_size
    }
}
impl EbsStorageInfo {
    /// Creates a new builder-style object to manufacture [`EbsStorageInfo`](crate::types::EbsStorageInfo).
    pub fn builder() -> crate::types::builders::EbsStorageInfoBuilder {
        crate::types::builders::EbsStorageInfoBuilder::default()
    }
}

/// A builder for [`EbsStorageInfo`](crate::types::EbsStorageInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EbsStorageInfoBuilder {
    pub(crate) provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    pub(crate) volume_size: std::option::Option<i32>,
}
impl EbsStorageInfoBuilder {
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn provisioned_throughput(mut self, input: crate::types::ProvisionedThroughput) -> Self {
        self.provisioned_throughput = Some(input);
        self
    }
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn set_provisioned_throughput(
        mut self,
        input: std::option::Option<crate::types::ProvisionedThroughput>,
    ) -> Self {
        self.provisioned_throughput = input;
        self
    }
    /// <p>The size in GiB of the EBS volume for the data drive on each broker node.</p>
    pub fn volume_size(mut self, input: i32) -> Self {
        self.volume_size = Some(input);
        self
    }
    /// <p>The size in GiB of the EBS volume for the data drive on each broker node.</p>
    pub fn set_volume_size(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size = input;
        self
    }
    /// Consumes the builder and constructs a [`EbsStorageInfo`](crate::types::EbsStorageInfo).
    pub fn build(self) -> crate::types::EbsStorageInfo {
        crate::types::EbsStorageInfo {
            provisioned_throughput: self.provisioned_throughput,
            volume_size: self.volume_size.unwrap_or_default(),
        }
    }
}
