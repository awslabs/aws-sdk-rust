// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Public access control for brokers.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PublicAccess {
    /// <p>The value DISABLED indicates that public access is turned off. SERVICE_PROVIDED_EIPS indicates that public access is turned on.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl PublicAccess {
    /// <p>The value DISABLED indicates that public access is turned off. SERVICE_PROVIDED_EIPS indicates that public access is turned on.</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl PublicAccess {
    /// Creates a new builder-style object to manufacture [`PublicAccess`](crate::types::PublicAccess).
    pub fn builder() -> crate::types::builders::PublicAccessBuilder {
        crate::types::builders::PublicAccessBuilder::default()
    }
}

/// A builder for [`PublicAccess`](crate::types::PublicAccess).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PublicAccessBuilder {
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl PublicAccessBuilder {
    /// <p>The value DISABLED indicates that public access is turned off. SERVICE_PROVIDED_EIPS indicates that public access is turned on.</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The value DISABLED indicates that public access is turned off. SERVICE_PROVIDED_EIPS indicates that public access is turned on.</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`PublicAccess`](crate::types::PublicAccess).
    pub fn build(self) -> crate::types::PublicAccess {
        crate::types::PublicAccess {
            r#type: self.r#type,
        }
    }
}
