// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration to use for the brokers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfigurationInfo {
    /// <p>ARN of the configuration to use.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The revision of the configuration to use.</p>
    #[doc(hidden)]
    pub revision: i64,
}
impl ConfigurationInfo {
    /// <p>ARN of the configuration to use.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The revision of the configuration to use.</p>
    pub fn revision(&self) -> i64 {
        self.revision
    }
}
impl ConfigurationInfo {
    /// Creates a new builder-style object to manufacture [`ConfigurationInfo`](crate::types::ConfigurationInfo).
    pub fn builder() -> crate::types::builders::ConfigurationInfoBuilder {
        crate::types::builders::ConfigurationInfoBuilder::default()
    }
}

/// A builder for [`ConfigurationInfo`](crate::types::ConfigurationInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfigurationInfoBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) revision: std::option::Option<i64>,
}
impl ConfigurationInfoBuilder {
    /// <p>ARN of the configuration to use.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>ARN of the configuration to use.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The revision of the configuration to use.</p>
    pub fn revision(mut self, input: i64) -> Self {
        self.revision = Some(input);
        self
    }
    /// <p>The revision of the configuration to use.</p>
    pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
        self.revision = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfigurationInfo`](crate::types::ConfigurationInfo).
    pub fn build(self) -> crate::types::ConfigurationInfo {
        crate::types::ConfigurationInfo {
            arn: self.arn,
            revision: self.revision.unwrap_or_default(),
        }
    }
}
