// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about an error state of the cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorInfo {
    /// <p>A number describing the error programmatically.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>An optional field to provide more details about the error.</p>
    #[doc(hidden)]
    pub error_string: std::option::Option<std::string::String>,
}
impl ErrorInfo {
    /// <p>A number describing the error programmatically.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>An optional field to provide more details about the error.</p>
    pub fn error_string(&self) -> std::option::Option<&str> {
        self.error_string.as_deref()
    }
}
impl ErrorInfo {
    /// Creates a new builder-style object to manufacture [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn builder() -> crate::types::builders::ErrorInfoBuilder {
        crate::types::builders::ErrorInfoBuilder::default()
    }
}

/// A builder for [`ErrorInfo`](crate::types::ErrorInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorInfoBuilder {
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_string: std::option::Option<std::string::String>,
}
impl ErrorInfoBuilder {
    /// <p>A number describing the error programmatically.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>A number describing the error programmatically.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>An optional field to provide more details about the error.</p>
    pub fn error_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_string = Some(input.into());
        self
    }
    /// <p>An optional field to provide more details about the error.</p>
    pub fn set_error_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_string = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorInfo`](crate::types::ErrorInfo).
    pub fn build(self) -> crate::types::ErrorInfo {
        crate::types::ErrorInfo {
            error_code: self.error_code,
            error_string: self.error_string,
        }
    }
}
