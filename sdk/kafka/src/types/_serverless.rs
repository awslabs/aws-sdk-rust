// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Serverless cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Serverless {
    /// <p>The configuration of the Amazon VPCs for the cluster.</p>
    pub vpc_configs: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfig>>,
    /// <p>Includes all client authentication information.</p>
    pub client_authentication: ::std::option::Option<crate::types::ServerlessClientAuthentication>,
}
impl Serverless {
    /// <p>The configuration of the Amazon VPCs for the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_configs.is_none()`.
    pub fn vpc_configs(&self) -> &[crate::types::VpcConfig] {
        self.vpc_configs.as_deref().unwrap_or_default()
    }
    /// <p>Includes all client authentication information.</p>
    pub fn client_authentication(&self) -> ::std::option::Option<&crate::types::ServerlessClientAuthentication> {
        self.client_authentication.as_ref()
    }
}
impl Serverless {
    /// Creates a new builder-style object to manufacture [`Serverless`](crate::types::Serverless).
    pub fn builder() -> crate::types::builders::ServerlessBuilder {
        crate::types::builders::ServerlessBuilder::default()
    }
}

/// A builder for [`Serverless`](crate::types::Serverless).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServerlessBuilder {
    pub(crate) vpc_configs: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfig>>,
    pub(crate) client_authentication: ::std::option::Option<crate::types::ServerlessClientAuthentication>,
}
impl ServerlessBuilder {
    /// Appends an item to `vpc_configs`.
    ///
    /// To override the contents of this collection use [`set_vpc_configs`](Self::set_vpc_configs).
    ///
    /// <p>The configuration of the Amazon VPCs for the cluster.</p>
    pub fn vpc_configs(mut self, input: crate::types::VpcConfig) -> Self {
        let mut v = self.vpc_configs.unwrap_or_default();
        v.push(input);
        self.vpc_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration of the Amazon VPCs for the cluster.</p>
    pub fn set_vpc_configs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfig>>) -> Self {
        self.vpc_configs = input;
        self
    }
    /// <p>The configuration of the Amazon VPCs for the cluster.</p>
    pub fn get_vpc_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcConfig>> {
        &self.vpc_configs
    }
    /// <p>Includes all client authentication information.</p>
    pub fn client_authentication(mut self, input: crate::types::ServerlessClientAuthentication) -> Self {
        self.client_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Includes all client authentication information.</p>
    pub fn set_client_authentication(mut self, input: ::std::option::Option<crate::types::ServerlessClientAuthentication>) -> Self {
        self.client_authentication = input;
        self
    }
    /// <p>Includes all client authentication information.</p>
    pub fn get_client_authentication(&self) -> &::std::option::Option<crate::types::ServerlessClientAuthentication> {
        &self.client_authentication
    }
    /// Consumes the builder and constructs a [`Serverless`](crate::types::Serverless).
    pub fn build(self) -> crate::types::Serverless {
        crate::types::Serverless {
            vpc_configs: self.vpc_configs,
            client_authentication: self.client_authentication,
        }
    }
}
