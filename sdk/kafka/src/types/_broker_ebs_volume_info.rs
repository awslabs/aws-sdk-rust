// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the EBS volume upgrade information. The broker identifier must be set to the keyword ALL. This means the changes apply to all the brokers in the cluster.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BrokerEbsVolumeInfo {
    /// <p>The ID of the broker to update.</p>
    #[doc(hidden)]
    pub kafka_broker_node_id: std::option::Option<std::string::String>,
    /// <p>EBS volume provisioned throughput information.</p>
    #[doc(hidden)]
    pub provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    /// <p>Size of the EBS volume to update.</p>
    #[doc(hidden)]
    pub volume_size_gb: i32,
}
impl BrokerEbsVolumeInfo {
    /// <p>The ID of the broker to update.</p>
    pub fn kafka_broker_node_id(&self) -> std::option::Option<&str> {
        self.kafka_broker_node_id.as_deref()
    }
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn provisioned_throughput(
        &self,
    ) -> std::option::Option<&crate::types::ProvisionedThroughput> {
        self.provisioned_throughput.as_ref()
    }
    /// <p>Size of the EBS volume to update.</p>
    pub fn volume_size_gb(&self) -> i32 {
        self.volume_size_gb
    }
}
impl BrokerEbsVolumeInfo {
    /// Creates a new builder-style object to manufacture [`BrokerEbsVolumeInfo`](crate::types::BrokerEbsVolumeInfo).
    pub fn builder() -> crate::types::builders::BrokerEbsVolumeInfoBuilder {
        crate::types::builders::BrokerEbsVolumeInfoBuilder::default()
    }
}

/// A builder for [`BrokerEbsVolumeInfo`](crate::types::BrokerEbsVolumeInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BrokerEbsVolumeInfoBuilder {
    pub(crate) kafka_broker_node_id: std::option::Option<std::string::String>,
    pub(crate) provisioned_throughput: std::option::Option<crate::types::ProvisionedThroughput>,
    pub(crate) volume_size_gb: std::option::Option<i32>,
}
impl BrokerEbsVolumeInfoBuilder {
    /// <p>The ID of the broker to update.</p>
    pub fn kafka_broker_node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kafka_broker_node_id = Some(input.into());
        self
    }
    /// <p>The ID of the broker to update.</p>
    pub fn set_kafka_broker_node_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.kafka_broker_node_id = input;
        self
    }
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn provisioned_throughput(mut self, input: crate::types::ProvisionedThroughput) -> Self {
        self.provisioned_throughput = Some(input);
        self
    }
    /// <p>EBS volume provisioned throughput information.</p>
    pub fn set_provisioned_throughput(
        mut self,
        input: std::option::Option<crate::types::ProvisionedThroughput>,
    ) -> Self {
        self.provisioned_throughput = input;
        self
    }
    /// <p>Size of the EBS volume to update.</p>
    pub fn volume_size_gb(mut self, input: i32) -> Self {
        self.volume_size_gb = Some(input);
        self
    }
    /// <p>Size of the EBS volume to update.</p>
    pub fn set_volume_size_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.volume_size_gb = input;
        self
    }
    /// Consumes the builder and constructs a [`BrokerEbsVolumeInfo`](crate::types::BrokerEbsVolumeInfo).
    pub fn build(self) -> crate::types::BrokerEbsVolumeInfo {
        crate::types::BrokerEbsVolumeInfo {
            kafka_broker_node_id: self.kafka_broker_node_id,
            provisioned_throughput: self.provisioned_throughput,
            volume_size_gb: self.volume_size_gb.unwrap_or_default(),
        }
    }
}
