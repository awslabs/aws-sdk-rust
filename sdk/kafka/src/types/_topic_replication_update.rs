// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for updating the topic replication of a replicator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TopicReplicationUpdate {
    /// <p>Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.</p>
    pub copy_access_control_lists_for_topics: ::std::option::Option<bool>,
    /// <p>Whether to periodically configure remote topics to match their corresponding upstream topics.</p>
    pub copy_topic_configurations: ::std::option::Option<bool>,
    /// <p>Whether to periodically check for new topics and partitions.</p>
    pub detect_and_copy_new_topics: ::std::option::Option<bool>,
    /// <p>List of regular expression patterns indicating the topics that should not be replicated.</p>
    pub topics_to_exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>List of regular expression patterns indicating the topics to copy.</p>
    pub topics_to_replicate: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TopicReplicationUpdate {
    /// <p>Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.</p>
    pub fn copy_access_control_lists_for_topics(&self) -> ::std::option::Option<bool> {
        self.copy_access_control_lists_for_topics
    }
    /// <p>Whether to periodically configure remote topics to match their corresponding upstream topics.</p>
    pub fn copy_topic_configurations(&self) -> ::std::option::Option<bool> {
        self.copy_topic_configurations
    }
    /// <p>Whether to periodically check for new topics and partitions.</p>
    pub fn detect_and_copy_new_topics(&self) -> ::std::option::Option<bool> {
        self.detect_and_copy_new_topics
    }
    /// <p>List of regular expression patterns indicating the topics that should not be replicated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topics_to_exclude.is_none()`.
    pub fn topics_to_exclude(&self) -> &[::std::string::String] {
        self.topics_to_exclude.as_deref().unwrap_or_default()
    }
    /// <p>List of regular expression patterns indicating the topics to copy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topics_to_replicate.is_none()`.
    pub fn topics_to_replicate(&self) -> &[::std::string::String] {
        self.topics_to_replicate.as_deref().unwrap_or_default()
    }
}
impl TopicReplicationUpdate {
    /// Creates a new builder-style object to manufacture [`TopicReplicationUpdate`](crate::types::TopicReplicationUpdate).
    pub fn builder() -> crate::types::builders::TopicReplicationUpdateBuilder {
        crate::types::builders::TopicReplicationUpdateBuilder::default()
    }
}

/// A builder for [`TopicReplicationUpdate`](crate::types::TopicReplicationUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TopicReplicationUpdateBuilder {
    pub(crate) copy_access_control_lists_for_topics: ::std::option::Option<bool>,
    pub(crate) copy_topic_configurations: ::std::option::Option<bool>,
    pub(crate) detect_and_copy_new_topics: ::std::option::Option<bool>,
    pub(crate) topics_to_exclude: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) topics_to_replicate: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl TopicReplicationUpdateBuilder {
    /// <p>Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.</p>
    /// This field is required.
    pub fn copy_access_control_lists_for_topics(mut self, input: bool) -> Self {
        self.copy_access_control_lists_for_topics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.</p>
    pub fn set_copy_access_control_lists_for_topics(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_access_control_lists_for_topics = input;
        self
    }
    /// <p>Whether to periodically configure remote topic ACLs to match their corresponding upstream topics.</p>
    pub fn get_copy_access_control_lists_for_topics(&self) -> &::std::option::Option<bool> {
        &self.copy_access_control_lists_for_topics
    }
    /// <p>Whether to periodically configure remote topics to match their corresponding upstream topics.</p>
    /// This field is required.
    pub fn copy_topic_configurations(mut self, input: bool) -> Self {
        self.copy_topic_configurations = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to periodically configure remote topics to match their corresponding upstream topics.</p>
    pub fn set_copy_topic_configurations(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_topic_configurations = input;
        self
    }
    /// <p>Whether to periodically configure remote topics to match their corresponding upstream topics.</p>
    pub fn get_copy_topic_configurations(&self) -> &::std::option::Option<bool> {
        &self.copy_topic_configurations
    }
    /// <p>Whether to periodically check for new topics and partitions.</p>
    /// This field is required.
    pub fn detect_and_copy_new_topics(mut self, input: bool) -> Self {
        self.detect_and_copy_new_topics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to periodically check for new topics and partitions.</p>
    pub fn set_detect_and_copy_new_topics(mut self, input: ::std::option::Option<bool>) -> Self {
        self.detect_and_copy_new_topics = input;
        self
    }
    /// <p>Whether to periodically check for new topics and partitions.</p>
    pub fn get_detect_and_copy_new_topics(&self) -> &::std::option::Option<bool> {
        &self.detect_and_copy_new_topics
    }
    /// Appends an item to `topics_to_exclude`.
    ///
    /// To override the contents of this collection use [`set_topics_to_exclude`](Self::set_topics_to_exclude).
    ///
    /// <p>List of regular expression patterns indicating the topics that should not be replicated.</p>
    pub fn topics_to_exclude(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.topics_to_exclude.unwrap_or_default();
        v.push(input.into());
        self.topics_to_exclude = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of regular expression patterns indicating the topics that should not be replicated.</p>
    pub fn set_topics_to_exclude(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.topics_to_exclude = input;
        self
    }
    /// <p>List of regular expression patterns indicating the topics that should not be replicated.</p>
    pub fn get_topics_to_exclude(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.topics_to_exclude
    }
    /// Appends an item to `topics_to_replicate`.
    ///
    /// To override the contents of this collection use [`set_topics_to_replicate`](Self::set_topics_to_replicate).
    ///
    /// <p>List of regular expression patterns indicating the topics to copy.</p>
    pub fn topics_to_replicate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.topics_to_replicate.unwrap_or_default();
        v.push(input.into());
        self.topics_to_replicate = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of regular expression patterns indicating the topics to copy.</p>
    pub fn set_topics_to_replicate(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.topics_to_replicate = input;
        self
    }
    /// <p>List of regular expression patterns indicating the topics to copy.</p>
    pub fn get_topics_to_replicate(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.topics_to_replicate
    }
    /// Consumes the builder and constructs a [`TopicReplicationUpdate`](crate::types::TopicReplicationUpdate).
    pub fn build(self) -> crate::types::TopicReplicationUpdate {
        crate::types::TopicReplicationUpdate {
            copy_access_control_lists_for_topics: self.copy_access_control_lists_for_topics,
            copy_topic_configurations: self.copy_topic_configurations,
            detect_and_copy_new_topics: self.detect_and_copy_new_topics,
            topics_to_exclude: self.topics_to_exclude,
            topics_to_replicate: self.topics_to_replicate,
        }
    }
}
