// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a replicator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicatorSummary {
    /// <p>The time the replicator was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The current version of the replicator.</p>
    pub current_version: ::std::option::Option<::std::string::String>,
    /// <p>Whether this resource is a replicator reference.</p>
    pub is_replicator_reference: ::std::option::Option<bool>,
    /// <p>Kafka Clusters used in setting up sources / targets for replication.</p>
    pub kafka_clusters_summary: ::std::option::Option<::std::vec::Vec<crate::types::KafkaClusterSummary>>,
    /// <p>A list of summarized information of replications between clusters.</p>
    pub replication_info_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationInfoSummary>>,
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub replicator_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the replicator.</p>
    pub replicator_name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the replicator resource in the region where the replicator was created.</p>
    pub replicator_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>State of the replicator.</p>
    pub replicator_state: ::std::option::Option<crate::types::ReplicatorState>,
}
impl ReplicatorSummary {
    /// <p>The time the replicator was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The current version of the replicator.</p>
    pub fn current_version(&self) -> ::std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>Whether this resource is a replicator reference.</p>
    pub fn is_replicator_reference(&self) -> ::std::option::Option<bool> {
        self.is_replicator_reference
    }
    /// <p>Kafka Clusters used in setting up sources / targets for replication.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.kafka_clusters_summary.is_none()`.
    pub fn kafka_clusters_summary(&self) -> &[crate::types::KafkaClusterSummary] {
        self.kafka_clusters_summary.as_deref().unwrap_or_default()
    }
    /// <p>A list of summarized information of replications between clusters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_info_summary_list.is_none()`.
    pub fn replication_info_summary_list(&self) -> &[crate::types::ReplicationInfoSummary] {
        self.replication_info_summary_list.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn replicator_arn(&self) -> ::std::option::Option<&str> {
        self.replicator_arn.as_deref()
    }
    /// <p>The name of the replicator.</p>
    pub fn replicator_name(&self) -> ::std::option::Option<&str> {
        self.replicator_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator resource in the region where the replicator was created.</p>
    pub fn replicator_resource_arn(&self) -> ::std::option::Option<&str> {
        self.replicator_resource_arn.as_deref()
    }
    /// <p>State of the replicator.</p>
    pub fn replicator_state(&self) -> ::std::option::Option<&crate::types::ReplicatorState> {
        self.replicator_state.as_ref()
    }
}
impl ReplicatorSummary {
    /// Creates a new builder-style object to manufacture [`ReplicatorSummary`](crate::types::ReplicatorSummary).
    pub fn builder() -> crate::types::builders::ReplicatorSummaryBuilder {
        crate::types::builders::ReplicatorSummaryBuilder::default()
    }
}

/// A builder for [`ReplicatorSummary`](crate::types::ReplicatorSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicatorSummaryBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) current_version: ::std::option::Option<::std::string::String>,
    pub(crate) is_replicator_reference: ::std::option::Option<bool>,
    pub(crate) kafka_clusters_summary: ::std::option::Option<::std::vec::Vec<crate::types::KafkaClusterSummary>>,
    pub(crate) replication_info_summary_list: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationInfoSummary>>,
    pub(crate) replicator_arn: ::std::option::Option<::std::string::String>,
    pub(crate) replicator_name: ::std::option::Option<::std::string::String>,
    pub(crate) replicator_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) replicator_state: ::std::option::Option<crate::types::ReplicatorState>,
}
impl ReplicatorSummaryBuilder {
    /// <p>The time the replicator was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the replicator was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time the replicator was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The current version of the replicator.</p>
    pub fn current_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current version of the replicator.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The current version of the replicator.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_version
    }
    /// <p>Whether this resource is a replicator reference.</p>
    pub fn is_replicator_reference(mut self, input: bool) -> Self {
        self.is_replicator_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether this resource is a replicator reference.</p>
    pub fn set_is_replicator_reference(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_replicator_reference = input;
        self
    }
    /// <p>Whether this resource is a replicator reference.</p>
    pub fn get_is_replicator_reference(&self) -> &::std::option::Option<bool> {
        &self.is_replicator_reference
    }
    /// Appends an item to `kafka_clusters_summary`.
    ///
    /// To override the contents of this collection use [`set_kafka_clusters_summary`](Self::set_kafka_clusters_summary).
    ///
    /// <p>Kafka Clusters used in setting up sources / targets for replication.</p>
    pub fn kafka_clusters_summary(mut self, input: crate::types::KafkaClusterSummary) -> Self {
        let mut v = self.kafka_clusters_summary.unwrap_or_default();
        v.push(input);
        self.kafka_clusters_summary = ::std::option::Option::Some(v);
        self
    }
    /// <p>Kafka Clusters used in setting up sources / targets for replication.</p>
    pub fn set_kafka_clusters_summary(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KafkaClusterSummary>>) -> Self {
        self.kafka_clusters_summary = input;
        self
    }
    /// <p>Kafka Clusters used in setting up sources / targets for replication.</p>
    pub fn get_kafka_clusters_summary(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KafkaClusterSummary>> {
        &self.kafka_clusters_summary
    }
    /// Appends an item to `replication_info_summary_list`.
    ///
    /// To override the contents of this collection use [`set_replication_info_summary_list`](Self::set_replication_info_summary_list).
    ///
    /// <p>A list of summarized information of replications between clusters.</p>
    pub fn replication_info_summary_list(mut self, input: crate::types::ReplicationInfoSummary) -> Self {
        let mut v = self.replication_info_summary_list.unwrap_or_default();
        v.push(input);
        self.replication_info_summary_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of summarized information of replications between clusters.</p>
    pub fn set_replication_info_summary_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ReplicationInfoSummary>>) -> Self {
        self.replication_info_summary_list = input;
        self
    }
    /// <p>A list of summarized information of replications between clusters.</p>
    pub fn get_replication_info_summary_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ReplicationInfoSummary>> {
        &self.replication_info_summary_list
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn replicator_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replicator_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn set_replicator_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replicator_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator.</p>
    pub fn get_replicator_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.replicator_arn
    }
    /// <p>The name of the replicator.</p>
    pub fn replicator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replicator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the replicator.</p>
    pub fn set_replicator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replicator_name = input;
        self
    }
    /// <p>The name of the replicator.</p>
    pub fn get_replicator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.replicator_name
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator resource in the region where the replicator was created.</p>
    pub fn replicator_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replicator_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator resource in the region where the replicator was created.</p>
    pub fn set_replicator_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replicator_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicator resource in the region where the replicator was created.</p>
    pub fn get_replicator_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.replicator_resource_arn
    }
    /// <p>State of the replicator.</p>
    pub fn replicator_state(mut self, input: crate::types::ReplicatorState) -> Self {
        self.replicator_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the replicator.</p>
    pub fn set_replicator_state(mut self, input: ::std::option::Option<crate::types::ReplicatorState>) -> Self {
        self.replicator_state = input;
        self
    }
    /// <p>State of the replicator.</p>
    pub fn get_replicator_state(&self) -> &::std::option::Option<crate::types::ReplicatorState> {
        &self.replicator_state
    }
    /// Consumes the builder and constructs a [`ReplicatorSummary`](crate::types::ReplicatorSummary).
    pub fn build(self) -> crate::types::ReplicatorSummary {
        crate::types::ReplicatorSummary {
            creation_time: self.creation_time,
            current_version: self.current_version,
            is_replicator_reference: self.is_replicator_reference,
            kafka_clusters_summary: self.kafka_clusters_summary,
            replication_info_summary_list: self.replication_info_summary_list,
            replicator_arn: self.replicator_arn,
            replicator_name: self.replicator_name,
            replicator_resource_arn: self.replicator_resource_arn,
            replicator_state: self.replicator_state,
        }
    }
}
