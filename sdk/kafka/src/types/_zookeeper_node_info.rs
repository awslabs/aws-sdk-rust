// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Zookeeper node information.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ZookeeperNodeInfo {
    /// <p>The attached elastic network interface of the broker.</p>
    pub attached_eni_id: ::std::option::Option<::std::string::String>,
    /// <p>The virtual private cloud (VPC) IP address of the client.</p>
    pub client_vpc_ip_address: ::std::option::Option<::std::string::String>,
    /// <p>Endpoints for accessing the ZooKeeper.</p>
    pub endpoints: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The role-specific ID for Zookeeper.</p>
    pub zookeeper_id: ::std::option::Option<f64>,
    /// <p>The version of Zookeeper.</p>
    pub zookeeper_version: ::std::option::Option<::std::string::String>,
}
impl ZookeeperNodeInfo {
    /// <p>The attached elastic network interface of the broker.</p>
    pub fn attached_eni_id(&self) -> ::std::option::Option<&str> {
        self.attached_eni_id.as_deref()
    }
    /// <p>The virtual private cloud (VPC) IP address of the client.</p>
    pub fn client_vpc_ip_address(&self) -> ::std::option::Option<&str> {
        self.client_vpc_ip_address.as_deref()
    }
    /// <p>Endpoints for accessing the ZooKeeper.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.endpoints.is_none()`.
    pub fn endpoints(&self) -> &[::std::string::String] {
        self.endpoints.as_deref().unwrap_or_default()
    }
    /// <p>The role-specific ID for Zookeeper.</p>
    pub fn zookeeper_id(&self) -> ::std::option::Option<f64> {
        self.zookeeper_id
    }
    /// <p>The version of Zookeeper.</p>
    pub fn zookeeper_version(&self) -> ::std::option::Option<&str> {
        self.zookeeper_version.as_deref()
    }
}
impl ZookeeperNodeInfo {
    /// Creates a new builder-style object to manufacture [`ZookeeperNodeInfo`](crate::types::ZookeeperNodeInfo).
    pub fn builder() -> crate::types::builders::ZookeeperNodeInfoBuilder {
        crate::types::builders::ZookeeperNodeInfoBuilder::default()
    }
}

/// A builder for [`ZookeeperNodeInfo`](crate::types::ZookeeperNodeInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ZookeeperNodeInfoBuilder {
    pub(crate) attached_eni_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_vpc_ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) endpoints: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) zookeeper_id: ::std::option::Option<f64>,
    pub(crate) zookeeper_version: ::std::option::Option<::std::string::String>,
}
impl ZookeeperNodeInfoBuilder {
    /// <p>The attached elastic network interface of the broker.</p>
    pub fn attached_eni_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attached_eni_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The attached elastic network interface of the broker.</p>
    pub fn set_attached_eni_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attached_eni_id = input;
        self
    }
    /// <p>The attached elastic network interface of the broker.</p>
    pub fn get_attached_eni_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.attached_eni_id
    }
    /// <p>The virtual private cloud (VPC) IP address of the client.</p>
    pub fn client_vpc_ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_vpc_ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The virtual private cloud (VPC) IP address of the client.</p>
    pub fn set_client_vpc_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_vpc_ip_address = input;
        self
    }
    /// <p>The virtual private cloud (VPC) IP address of the client.</p>
    pub fn get_client_vpc_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_vpc_ip_address
    }
    /// Appends an item to `endpoints`.
    ///
    /// To override the contents of this collection use [`set_endpoints`](Self::set_endpoints).
    ///
    /// <p>Endpoints for accessing the ZooKeeper.</p>
    pub fn endpoints(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.endpoints.unwrap_or_default();
        v.push(input.into());
        self.endpoints = ::std::option::Option::Some(v);
        self
    }
    /// <p>Endpoints for accessing the ZooKeeper.</p>
    pub fn set_endpoints(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.endpoints = input;
        self
    }
    /// <p>Endpoints for accessing the ZooKeeper.</p>
    pub fn get_endpoints(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.endpoints
    }
    /// <p>The role-specific ID for Zookeeper.</p>
    pub fn zookeeper_id(mut self, input: f64) -> Self {
        self.zookeeper_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The role-specific ID for Zookeeper.</p>
    pub fn set_zookeeper_id(mut self, input: ::std::option::Option<f64>) -> Self {
        self.zookeeper_id = input;
        self
    }
    /// <p>The role-specific ID for Zookeeper.</p>
    pub fn get_zookeeper_id(&self) -> &::std::option::Option<f64> {
        &self.zookeeper_id
    }
    /// <p>The version of Zookeeper.</p>
    pub fn zookeeper_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.zookeeper_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of Zookeeper.</p>
    pub fn set_zookeeper_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.zookeeper_version = input;
        self
    }
    /// <p>The version of Zookeeper.</p>
    pub fn get_zookeeper_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.zookeeper_version
    }
    /// Consumes the builder and constructs a [`ZookeeperNodeInfo`](crate::types::ZookeeperNodeInfo).
    pub fn build(self) -> crate::types::ZookeeperNodeInfo {
        crate::types::ZookeeperNodeInfo {
            attached_eni_id: self.attached_eni_id,
            client_vpc_ip_address: self.client_vpc_ip_address,
            endpoints: self.endpoints,
            zookeeper_id: self.zookeeper_id,
            zookeeper_version: self.zookeeper_version,
        }
    }
}
