// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KafkaVersion {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::KafkaVersionStatus>,
}
impl KafkaVersion {
    #[allow(missing_docs)] // documentation missing in model
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(&self) -> std::option::Option<&crate::types::KafkaVersionStatus> {
        self.status.as_ref()
    }
}
impl KafkaVersion {
    /// Creates a new builder-style object to manufacture [`KafkaVersion`](crate::types::KafkaVersion).
    pub fn builder() -> crate::types::builders::KafkaVersionBuilder {
        crate::types::builders::KafkaVersionBuilder::default()
    }
}

/// A builder for [`KafkaVersion`](crate::types::KafkaVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KafkaVersionBuilder {
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::KafkaVersionStatus>,
}
impl KafkaVersionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn status(mut self, input: crate::types::KafkaVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::KafkaVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`KafkaVersion`](crate::types::KafkaVersion).
    pub fn build(self) -> crate::types::KafkaVersion {
        crate::types::KafkaVersion {
            version: self.version,
            status: self.status,
        }
    }
}
