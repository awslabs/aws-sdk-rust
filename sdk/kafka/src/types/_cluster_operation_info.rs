// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about a cluster operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ClusterOperationInfo {
    /// <p>The ID of the API request that triggered this operation.</p>
    pub client_request_id: ::std::option::Option<::std::string::String>,
    /// <p>ARN of the cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time that the operation was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the operation finished.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Describes the error if the operation fails.</p>
    pub error_info: ::std::option::Option<crate::types::ErrorInfo>,
    /// <p>ARN of the cluster operation.</p>
    pub operation_arn: ::std::option::Option<::std::string::String>,
    /// <p>State of the cluster operation.</p>
    pub operation_state: ::std::option::Option<::std::string::String>,
    /// <p>Steps completed during the operation.</p>
    pub operation_steps: ::std::option::Option<::std::vec::Vec<crate::types::ClusterOperationStep>>,
    /// <p>Type of the cluster operation.</p>
    pub operation_type: ::std::option::Option<::std::string::String>,
    /// <p>Information about cluster attributes before a cluster is updated.</p>
    pub source_cluster_info: ::std::option::Option<crate::types::MutableClusterInfo>,
    /// <p>Information about cluster attributes after a cluster is updated.</p>
    pub target_cluster_info: ::std::option::Option<crate::types::MutableClusterInfo>,
    /// <p>Description of the VPC connection for CreateVpcConnection and DeleteVpcConnection operations.</p>
    pub vpc_connection_info: ::std::option::Option<crate::types::VpcConnectionInfo>,
}
impl ClusterOperationInfo {
    /// <p>The ID of the API request that triggered this operation.</p>
    pub fn client_request_id(&self) -> ::std::option::Option<&str> {
        self.client_request_id.as_deref()
    }
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The time that the operation was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The time at which the operation finished.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>Describes the error if the operation fails.</p>
    pub fn error_info(&self) -> ::std::option::Option<&crate::types::ErrorInfo> {
        self.error_info.as_ref()
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn operation_arn(&self) -> ::std::option::Option<&str> {
        self.operation_arn.as_deref()
    }
    /// <p>State of the cluster operation.</p>
    pub fn operation_state(&self) -> ::std::option::Option<&str> {
        self.operation_state.as_deref()
    }
    /// <p>Steps completed during the operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operation_steps.is_none()`.
    pub fn operation_steps(&self) -> &[crate::types::ClusterOperationStep] {
        self.operation_steps.as_deref().unwrap_or_default()
    }
    /// <p>Type of the cluster operation.</p>
    pub fn operation_type(&self) -> ::std::option::Option<&str> {
        self.operation_type.as_deref()
    }
    /// <p>Information about cluster attributes before a cluster is updated.</p>
    pub fn source_cluster_info(&self) -> ::std::option::Option<&crate::types::MutableClusterInfo> {
        self.source_cluster_info.as_ref()
    }
    /// <p>Information about cluster attributes after a cluster is updated.</p>
    pub fn target_cluster_info(&self) -> ::std::option::Option<&crate::types::MutableClusterInfo> {
        self.target_cluster_info.as_ref()
    }
    /// <p>Description of the VPC connection for CreateVpcConnection and DeleteVpcConnection operations.</p>
    pub fn vpc_connection_info(&self) -> ::std::option::Option<&crate::types::VpcConnectionInfo> {
        self.vpc_connection_info.as_ref()
    }
}
impl ClusterOperationInfo {
    /// Creates a new builder-style object to manufacture [`ClusterOperationInfo`](crate::types::ClusterOperationInfo).
    pub fn builder() -> crate::types::builders::ClusterOperationInfoBuilder {
        crate::types::builders::ClusterOperationInfoBuilder::default()
    }
}

/// A builder for [`ClusterOperationInfo`](crate::types::ClusterOperationInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ClusterOperationInfoBuilder {
    pub(crate) client_request_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) error_info: ::std::option::Option<crate::types::ErrorInfo>,
    pub(crate) operation_arn: ::std::option::Option<::std::string::String>,
    pub(crate) operation_state: ::std::option::Option<::std::string::String>,
    pub(crate) operation_steps: ::std::option::Option<::std::vec::Vec<crate::types::ClusterOperationStep>>,
    pub(crate) operation_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_cluster_info: ::std::option::Option<crate::types::MutableClusterInfo>,
    pub(crate) target_cluster_info: ::std::option::Option<crate::types::MutableClusterInfo>,
    pub(crate) vpc_connection_info: ::std::option::Option<crate::types::VpcConnectionInfo>,
}
impl ClusterOperationInfoBuilder {
    /// <p>The ID of the API request that triggered this operation.</p>
    pub fn client_request_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the API request that triggered this operation.</p>
    pub fn set_client_request_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_id = input;
        self
    }
    /// <p>The ID of the API request that triggered this operation.</p>
    pub fn get_client_request_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_id
    }
    /// <p>ARN of the cluster.</p>
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>ARN of the cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The time that the operation was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the operation was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the operation was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time at which the operation finished.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the operation finished.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time at which the operation finished.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>Describes the error if the operation fails.</p>
    pub fn error_info(mut self, input: crate::types::ErrorInfo) -> Self {
        self.error_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the error if the operation fails.</p>
    pub fn set_error_info(mut self, input: ::std::option::Option<crate::types::ErrorInfo>) -> Self {
        self.error_info = input;
        self
    }
    /// <p>Describes the error if the operation fails.</p>
    pub fn get_error_info(&self) -> &::std::option::Option<crate::types::ErrorInfo> {
        &self.error_info
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn operation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn set_operation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_arn = input;
        self
    }
    /// <p>ARN of the cluster operation.</p>
    pub fn get_operation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_arn
    }
    /// <p>State of the cluster operation.</p>
    pub fn operation_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>State of the cluster operation.</p>
    pub fn set_operation_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_state = input;
        self
    }
    /// <p>State of the cluster operation.</p>
    pub fn get_operation_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_state
    }
    /// Appends an item to `operation_steps`.
    ///
    /// To override the contents of this collection use [`set_operation_steps`](Self::set_operation_steps).
    ///
    /// <p>Steps completed during the operation.</p>
    pub fn operation_steps(mut self, input: crate::types::ClusterOperationStep) -> Self {
        let mut v = self.operation_steps.unwrap_or_default();
        v.push(input);
        self.operation_steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Steps completed during the operation.</p>
    pub fn set_operation_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClusterOperationStep>>) -> Self {
        self.operation_steps = input;
        self
    }
    /// <p>Steps completed during the operation.</p>
    pub fn get_operation_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClusterOperationStep>> {
        &self.operation_steps
    }
    /// <p>Type of the cluster operation.</p>
    pub fn operation_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Type of the cluster operation.</p>
    pub fn set_operation_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_type = input;
        self
    }
    /// <p>Type of the cluster operation.</p>
    pub fn get_operation_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_type
    }
    /// <p>Information about cluster attributes before a cluster is updated.</p>
    pub fn source_cluster_info(mut self, input: crate::types::MutableClusterInfo) -> Self {
        self.source_cluster_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about cluster attributes before a cluster is updated.</p>
    pub fn set_source_cluster_info(mut self, input: ::std::option::Option<crate::types::MutableClusterInfo>) -> Self {
        self.source_cluster_info = input;
        self
    }
    /// <p>Information about cluster attributes before a cluster is updated.</p>
    pub fn get_source_cluster_info(&self) -> &::std::option::Option<crate::types::MutableClusterInfo> {
        &self.source_cluster_info
    }
    /// <p>Information about cluster attributes after a cluster is updated.</p>
    pub fn target_cluster_info(mut self, input: crate::types::MutableClusterInfo) -> Self {
        self.target_cluster_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about cluster attributes after a cluster is updated.</p>
    pub fn set_target_cluster_info(mut self, input: ::std::option::Option<crate::types::MutableClusterInfo>) -> Self {
        self.target_cluster_info = input;
        self
    }
    /// <p>Information about cluster attributes after a cluster is updated.</p>
    pub fn get_target_cluster_info(&self) -> &::std::option::Option<crate::types::MutableClusterInfo> {
        &self.target_cluster_info
    }
    /// <p>Description of the VPC connection for CreateVpcConnection and DeleteVpcConnection operations.</p>
    pub fn vpc_connection_info(mut self, input: crate::types::VpcConnectionInfo) -> Self {
        self.vpc_connection_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Description of the VPC connection for CreateVpcConnection and DeleteVpcConnection operations.</p>
    pub fn set_vpc_connection_info(mut self, input: ::std::option::Option<crate::types::VpcConnectionInfo>) -> Self {
        self.vpc_connection_info = input;
        self
    }
    /// <p>Description of the VPC connection for CreateVpcConnection and DeleteVpcConnection operations.</p>
    pub fn get_vpc_connection_info(&self) -> &::std::option::Option<crate::types::VpcConnectionInfo> {
        &self.vpc_connection_info
    }
    /// Consumes the builder and constructs a [`ClusterOperationInfo`](crate::types::ClusterOperationInfo).
    pub fn build(self) -> crate::types::ClusterOperationInfo {
        crate::types::ClusterOperationInfo {
            client_request_id: self.client_request_id,
            cluster_arn: self.cluster_arn,
            creation_time: self.creation_time,
            end_time: self.end_time,
            error_info: self.error_info,
            operation_arn: self.operation_arn,
            operation_state: self.operation_state,
            operation_steps: self.operation_steps,
            operation_type: self.operation_type,
            source_cluster_info: self.source_cluster_info,
            target_cluster_info: self.target_cluster_info,
            vpc_connection_info: self.vpc_connection_info,
        }
    }
}
