// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BrokerLogs {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub cloud_watch_logs: std::option::Option<crate::types::CloudWatchLogs>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub firehose: std::option::Option<crate::types::Firehose>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub s3: std::option::Option<crate::types::S3>,
}
impl BrokerLogs {
    #[allow(missing_docs)] // documentation missing in model
    pub fn cloud_watch_logs(&self) -> std::option::Option<&crate::types::CloudWatchLogs> {
        self.cloud_watch_logs.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn firehose(&self) -> std::option::Option<&crate::types::Firehose> {
        self.firehose.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn s3(&self) -> std::option::Option<&crate::types::S3> {
        self.s3.as_ref()
    }
}
impl BrokerLogs {
    /// Creates a new builder-style object to manufacture [`BrokerLogs`](crate::types::BrokerLogs).
    pub fn builder() -> crate::types::builders::BrokerLogsBuilder {
        crate::types::builders::BrokerLogsBuilder::default()
    }
}

/// A builder for [`BrokerLogs`](crate::types::BrokerLogs).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BrokerLogsBuilder {
    pub(crate) cloud_watch_logs: std::option::Option<crate::types::CloudWatchLogs>,
    pub(crate) firehose: std::option::Option<crate::types::Firehose>,
    pub(crate) s3: std::option::Option<crate::types::S3>,
}
impl BrokerLogsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn cloud_watch_logs(mut self, input: crate::types::CloudWatchLogs) -> Self {
        self.cloud_watch_logs = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_cloud_watch_logs(
        mut self,
        input: std::option::Option<crate::types::CloudWatchLogs>,
    ) -> Self {
        self.cloud_watch_logs = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn firehose(mut self, input: crate::types::Firehose) -> Self {
        self.firehose = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_firehose(mut self, input: std::option::Option<crate::types::Firehose>) -> Self {
        self.firehose = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn s3(mut self, input: crate::types::S3) -> Self {
        self.s3 = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_s3(mut self, input: std::option::Option<crate::types::S3>) -> Self {
        self.s3 = input;
        self
    }
    /// Consumes the builder and constructs a [`BrokerLogs`](crate::types::BrokerLogs).
    pub fn build(self) -> crate::types::BrokerLogs {
        crate::types::BrokerLogs {
            cloud_watch_logs: self.cloud_watch_logs,
            firehose: self.firehose,
            s3: self.s3,
        }
    }
}
