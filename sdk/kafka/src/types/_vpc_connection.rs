// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The VPC connection object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct VpcConnection {
    /// <p>The ARN that identifies the Vpc Connection.</p>
    pub vpc_connection_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN that identifies the Cluster which the Vpc Connection belongs to.</p>
    pub target_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>Creation time of the Vpc Connection.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Information about the auth scheme of Vpc Connection.</p>
    pub authentication: ::std::option::Option<::std::string::String>,
    /// <p>The vpcId that belongs to the Vpc Connection.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>State of the Vpc Connection.</p>
    pub state: ::std::option::Option<crate::types::VpcConnectionState>,
}
impl VpcConnection {
    /// <p>The ARN that identifies the Vpc Connection.</p>
    pub fn vpc_connection_arn(&self) -> ::std::option::Option<&str> {
        self.vpc_connection_arn.as_deref()
    }
    /// <p>The ARN that identifies the Cluster which the Vpc Connection belongs to.</p>
    pub fn target_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.target_cluster_arn.as_deref()
    }
    /// <p>Creation time of the Vpc Connection.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>Information about the auth scheme of Vpc Connection.</p>
    pub fn authentication(&self) -> ::std::option::Option<&str> {
        self.authentication.as_deref()
    }
    /// <p>The vpcId that belongs to the Vpc Connection.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>State of the Vpc Connection.</p>
    pub fn state(&self) -> ::std::option::Option<&crate::types::VpcConnectionState> {
        self.state.as_ref()
    }
}
impl VpcConnection {
    /// Creates a new builder-style object to manufacture [`VpcConnection`](crate::types::VpcConnection).
    pub fn builder() -> crate::types::builders::VpcConnectionBuilder {
        crate::types::builders::VpcConnectionBuilder::default()
    }
}

/// A builder for [`VpcConnection`](crate::types::VpcConnection).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct VpcConnectionBuilder {
    pub(crate) vpc_connection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) target_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) authentication: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) state: ::std::option::Option<crate::types::VpcConnectionState>,
}
impl VpcConnectionBuilder {
    /// <p>The ARN that identifies the Vpc Connection.</p>
    /// This field is required.
    pub fn vpc_connection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_connection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN that identifies the Vpc Connection.</p>
    pub fn set_vpc_connection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_connection_arn = input;
        self
    }
    /// <p>The ARN that identifies the Vpc Connection.</p>
    pub fn get_vpc_connection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_connection_arn
    }
    /// <p>The ARN that identifies the Cluster which the Vpc Connection belongs to.</p>
    /// This field is required.
    pub fn target_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN that identifies the Cluster which the Vpc Connection belongs to.</p>
    pub fn set_target_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_cluster_arn = input;
        self
    }
    /// <p>The ARN that identifies the Cluster which the Vpc Connection belongs to.</p>
    pub fn get_target_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_cluster_arn
    }
    /// <p>Creation time of the Vpc Connection.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Creation time of the Vpc Connection.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>Creation time of the Vpc Connection.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>Information about the auth scheme of Vpc Connection.</p>
    pub fn authentication(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authentication = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Information about the auth scheme of Vpc Connection.</p>
    pub fn set_authentication(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authentication = input;
        self
    }
    /// <p>Information about the auth scheme of Vpc Connection.</p>
    pub fn get_authentication(&self) -> &::std::option::Option<::std::string::String> {
        &self.authentication
    }
    /// <p>The vpcId that belongs to the Vpc Connection.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The vpcId that belongs to the Vpc Connection.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The vpcId that belongs to the Vpc Connection.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>State of the Vpc Connection.</p>
    pub fn state(mut self, input: crate::types::VpcConnectionState) -> Self {
        self.state = ::std::option::Option::Some(input);
        self
    }
    /// <p>State of the Vpc Connection.</p>
    pub fn set_state(mut self, input: ::std::option::Option<crate::types::VpcConnectionState>) -> Self {
        self.state = input;
        self
    }
    /// <p>State of the Vpc Connection.</p>
    pub fn get_state(&self) -> &::std::option::Option<crate::types::VpcConnectionState> {
        &self.state
    }
    /// Consumes the builder and constructs a [`VpcConnection`](crate::types::VpcConnection).
    pub fn build(self) -> crate::types::VpcConnection {
        crate::types::VpcConnection {
            vpc_connection_arn: self.vpc_connection_arn,
            target_cluster_arn: self.target_cluster_arn,
            creation_time: self.creation_time,
            authentication: self.authentication,
            vpc_id: self.vpc_id,
            state: self.state,
        }
    }
}
