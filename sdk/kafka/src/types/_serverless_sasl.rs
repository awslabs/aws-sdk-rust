// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details for client authentication using SASL.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServerlessSasl {
    /// <p>Indicates whether IAM access control is enabled.</p>
    #[doc(hidden)]
    pub iam: std::option::Option<crate::types::Iam>,
}
impl ServerlessSasl {
    /// <p>Indicates whether IAM access control is enabled.</p>
    pub fn iam(&self) -> std::option::Option<&crate::types::Iam> {
        self.iam.as_ref()
    }
}
impl ServerlessSasl {
    /// Creates a new builder-style object to manufacture [`ServerlessSasl`](crate::types::ServerlessSasl).
    pub fn builder() -> crate::types::builders::ServerlessSaslBuilder {
        crate::types::builders::ServerlessSaslBuilder::default()
    }
}

/// A builder for [`ServerlessSasl`](crate::types::ServerlessSasl).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServerlessSaslBuilder {
    pub(crate) iam: std::option::Option<crate::types::Iam>,
}
impl ServerlessSaslBuilder {
    /// <p>Indicates whether IAM access control is enabled.</p>
    pub fn iam(mut self, input: crate::types::Iam) -> Self {
        self.iam = Some(input);
        self
    }
    /// <p>Indicates whether IAM access control is enabled.</p>
    pub fn set_iam(mut self, input: std::option::Option<crate::types::Iam>) -> Self {
        self.iam = input;
        self
    }
    /// Consumes the builder and constructs a [`ServerlessSasl`](crate::types::ServerlessSasl).
    pub fn build(self) -> crate::types::ServerlessSasl {
        crate::types::ServerlessSasl { iam: self.iam }
    }
}
