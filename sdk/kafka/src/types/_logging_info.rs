// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub broker_logs: ::std::option::Option<crate::types::BrokerLogs>,
}
impl LoggingInfo {
    #[allow(missing_docs)] // documentation missing in model
    pub fn broker_logs(&self) -> ::std::option::Option<&crate::types::BrokerLogs> {
        self.broker_logs.as_ref()
    }
}
impl LoggingInfo {
    /// Creates a new builder-style object to manufacture [`LoggingInfo`](crate::types::LoggingInfo).
    pub fn builder() -> crate::types::builders::LoggingInfoBuilder {
        crate::types::builders::LoggingInfoBuilder::default()
    }
}

/// A builder for [`LoggingInfo`](crate::types::LoggingInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoggingInfoBuilder {
    pub(crate) broker_logs: ::std::option::Option<crate::types::BrokerLogs>,
}
impl LoggingInfoBuilder {
    #[allow(missing_docs)] // documentation missing in model
    /// This field is required.
    pub fn broker_logs(mut self, input: crate::types::BrokerLogs) -> Self {
        self.broker_logs = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_broker_logs(mut self, input: ::std::option::Option<crate::types::BrokerLogs>) -> Self {
        self.broker_logs = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_broker_logs(&self) -> &::std::option::Option<crate::types::BrokerLogs> {
        &self.broker_logs
    }
    /// Consumes the builder and constructs a [`LoggingInfo`](crate::types::LoggingInfo).
    pub fn build(self) -> crate::types::LoggingInfo {
        crate::types::LoggingInfo {
            broker_logs: self.broker_logs,
        }
    }
}
