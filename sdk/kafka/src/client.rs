// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Managed Streaming for Kafka
///
/// Client for invoking operations on Managed Streaming for Kafka. Each operation on Managed Streaming for Kafka is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kafka::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::RetryConfig;
/// # async fn docs() {
///     let shared_config = aws_config::load_from_env().await;
///     let config = aws_sdk_kafka::config::Builder::from(&shared_config)
///         .retry_config(RetryConfig::disabled())
///         .build();
///     let client = aws_sdk_kafka::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use aws_smithy_client::Builder;

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`BatchAssociateScramSecret`](crate::client::fluent_builders::BatchAssociateScramSecret) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::BatchAssociateScramSecret::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::BatchAssociateScramSecret::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
    ///   - [`secret_arn_list(Vec<String>)`](crate::client::fluent_builders::BatchAssociateScramSecret::secret_arn_list) / [`set_secret_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::BatchAssociateScramSecret::set_secret_arn_list): <p>List of AWS Secrets Manager secret ARNs.</p>
    /// - On success, responds with [`BatchAssociateScramSecretOutput`](crate::output::BatchAssociateScramSecretOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::BatchAssociateScramSecretOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`unprocessed_scram_secrets(Option<Vec<UnprocessedScramSecret>>)`](crate::output::BatchAssociateScramSecretOutput::unprocessed_scram_secrets): <p>List of errors when associating secrets to cluster.</p>
    /// - On failure, responds with [`SdkError<BatchAssociateScramSecretError>`](crate::error::BatchAssociateScramSecretError)
    pub fn batch_associate_scram_secret(&self) -> fluent_builders::BatchAssociateScramSecret {
        fluent_builders::BatchAssociateScramSecret::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`BatchDisassociateScramSecret`](crate::client::fluent_builders::BatchDisassociateScramSecret) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::BatchDisassociateScramSecret::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::BatchDisassociateScramSecret::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
    ///   - [`secret_arn_list(Vec<String>)`](crate::client::fluent_builders::BatchDisassociateScramSecret::secret_arn_list) / [`set_secret_arn_list(Option<Vec<String>>)`](crate::client::fluent_builders::BatchDisassociateScramSecret::set_secret_arn_list): <p>List of AWS Secrets Manager secret ARNs.</p>
    /// - On success, responds with [`BatchDisassociateScramSecretOutput`](crate::output::BatchDisassociateScramSecretOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::BatchDisassociateScramSecretOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`unprocessed_scram_secrets(Option<Vec<UnprocessedScramSecret>>)`](crate::output::BatchDisassociateScramSecretOutput::unprocessed_scram_secrets): <p>List of errors when disassociating secrets to cluster.</p>
    /// - On failure, responds with [`SdkError<BatchDisassociateScramSecretError>`](crate::error::BatchDisassociateScramSecretError)
    pub fn batch_disassociate_scram_secret(&self) -> fluent_builders::BatchDisassociateScramSecret {
        fluent_builders::BatchDisassociateScramSecret::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateCluster`](crate::client::fluent_builders::CreateCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`broker_node_group_info(BrokerNodeGroupInfo)`](crate::client::fluent_builders::CreateCluster::broker_node_group_info) / [`set_broker_node_group_info(Option<BrokerNodeGroupInfo>)`](crate::client::fluent_builders::CreateCluster::set_broker_node_group_info): <p>Information about the broker nodes in the cluster.</p>
    ///   - [`client_authentication(ClientAuthentication)`](crate::client::fluent_builders::CreateCluster::client_authentication) / [`set_client_authentication(Option<ClientAuthentication>)`](crate::client::fluent_builders::CreateCluster::set_client_authentication): <p>Includes all client authentication related information.</p>
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_cluster_name): <p>The name of the cluster.</p>
    ///   - [`configuration_info(ConfigurationInfo)`](crate::client::fluent_builders::CreateCluster::configuration_info) / [`set_configuration_info(Option<ConfigurationInfo>)`](crate::client::fluent_builders::CreateCluster::set_configuration_info): <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    ///   - [`encryption_info(EncryptionInfo)`](crate::client::fluent_builders::CreateCluster::encryption_info) / [`set_encryption_info(Option<EncryptionInfo>)`](crate::client::fluent_builders::CreateCluster::set_encryption_info): <p>Includes all encryption-related information.</p>
    ///   - [`enhanced_monitoring(EnhancedMonitoring)`](crate::client::fluent_builders::CreateCluster::enhanced_monitoring) / [`set_enhanced_monitoring(Option<EnhancedMonitoring>)`](crate::client::fluent_builders::CreateCluster::set_enhanced_monitoring): <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    ///   - [`open_monitoring(OpenMonitoringInfo)`](crate::client::fluent_builders::CreateCluster::open_monitoring) / [`set_open_monitoring(Option<OpenMonitoringInfo>)`](crate::client::fluent_builders::CreateCluster::set_open_monitoring): <p>The settings for open monitoring.</p>
    ///   - [`kafka_version(impl Into<String>)`](crate::client::fluent_builders::CreateCluster::kafka_version) / [`set_kafka_version(Option<String>)`](crate::client::fluent_builders::CreateCluster::set_kafka_version): <p>The version of Apache Kafka.</p>
    ///   - [`logging_info(LoggingInfo)`](crate::client::fluent_builders::CreateCluster::logging_info) / [`set_logging_info(Option<LoggingInfo>)`](crate::client::fluent_builders::CreateCluster::set_logging_info): (undocumented)
    ///   - [`number_of_broker_nodes(i32)`](crate::client::fluent_builders::CreateCluster::number_of_broker_nodes) / [`set_number_of_broker_nodes(i32)`](crate::client::fluent_builders::CreateCluster::set_number_of_broker_nodes): <p>The number of broker nodes in the cluster.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateCluster::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateCluster::set_tags): <p>Create tags when creating the cluster.</p>
    /// - On success, responds with [`CreateClusterOutput`](crate::output::CreateClusterOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::CreateClusterOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_name(Option<String>)`](crate::output::CreateClusterOutput::cluster_name): <p>The name of the MSK cluster.</p>
    ///   - [`state(Option<ClusterState>)`](crate::output::CreateClusterOutput::state): <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    /// - On failure, responds with [`SdkError<CreateClusterError>`](crate::error::CreateClusterError)
    pub fn create_cluster(&self) -> fluent_builders::CreateCluster {
        fluent_builders::CreateCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateClusterV2`](crate::client::fluent_builders::CreateClusterV2) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name(impl Into<String>)`](crate::client::fluent_builders::CreateClusterV2::cluster_name) / [`set_cluster_name(Option<String>)`](crate::client::fluent_builders::CreateClusterV2::set_cluster_name): <p>The name of the cluster.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateClusterV2::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateClusterV2::set_tags): <p>A map of tags that you want the cluster to have.</p>
    ///   - [`provisioned(ProvisionedRequest)`](crate::client::fluent_builders::CreateClusterV2::provisioned) / [`set_provisioned(Option<ProvisionedRequest>)`](crate::client::fluent_builders::CreateClusterV2::set_provisioned): <p>Information about the provisioned cluster.</p>
    ///   - [`serverless(ServerlessRequest)`](crate::client::fluent_builders::CreateClusterV2::serverless) / [`set_serverless(Option<ServerlessRequest>)`](crate::client::fluent_builders::CreateClusterV2::set_serverless): <p>Information about the serverless cluster.</p>
    /// - On success, responds with [`CreateClusterV2Output`](crate::output::CreateClusterV2Output) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::CreateClusterV2Output::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_name(Option<String>)`](crate::output::CreateClusterV2Output::cluster_name): <p>The name of the MSK cluster.</p>
    ///   - [`state(Option<ClusterState>)`](crate::output::CreateClusterV2Output::state): <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    ///   - [`cluster_type(Option<ClusterType>)`](crate::output::CreateClusterV2Output::cluster_type): <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    /// - On failure, responds with [`SdkError<CreateClusterV2Error>`](crate::error::CreateClusterV2Error)
    pub fn create_cluster_v2(&self) -> fluent_builders::CreateClusterV2 {
        fluent_builders::CreateClusterV2::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateConfiguration`](crate::client::fluent_builders::CreateConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateConfiguration::set_description): <p>The description of the configuration.</p>
    ///   - [`kafka_versions(Vec<String>)`](crate::client::fluent_builders::CreateConfiguration::kafka_versions) / [`set_kafka_versions(Option<Vec<String>>)`](crate::client::fluent_builders::CreateConfiguration::set_kafka_versions): <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateConfiguration::set_name): <p>The name of the configuration.</p>
    ///   - [`server_properties(Blob)`](crate::client::fluent_builders::CreateConfiguration::server_properties) / [`set_server_properties(Option<Blob>)`](crate::client::fluent_builders::CreateConfiguration::set_server_properties): <p>Contents of the <filename>   server.properties  </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>   server.properties  </filename> can be in plaintext.</p>
    /// - On success, responds with [`CreateConfigurationOutput`](crate::output::CreateConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::CreateConfigurationOutput::creation_time): <p>The time when the configuration was created.</p>
    ///   - [`latest_revision(Option<ConfigurationRevision>)`](crate::output::CreateConfigurationOutput::latest_revision): <p>Latest revision of the configuration.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateConfigurationOutput::name): <p>The name of the configuration.</p>
    ///   - [`state(Option<ConfigurationState>)`](crate::output::CreateConfigurationOutput::state): <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    /// - On failure, responds with [`SdkError<CreateConfigurationError>`](crate::error::CreateConfigurationError)
    pub fn create_configuration(&self) -> fluent_builders::CreateConfiguration {
        fluent_builders::CreateConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCluster`](crate::client::fluent_builders::DeleteCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteCluster::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::DeleteCluster::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::DeleteCluster::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::DeleteCluster::set_current_version): <p>The current version of the MSK cluster.</p>
    /// - On success, responds with [`DeleteClusterOutput`](crate::output::DeleteClusterOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::DeleteClusterOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`state(Option<ClusterState>)`](crate::output::DeleteClusterOutput::state): <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    /// - On failure, responds with [`SdkError<DeleteClusterError>`](crate::error::DeleteClusterError)
    pub fn delete_cluster(&self) -> fluent_builders::DeleteCluster {
        fluent_builders::DeleteCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteConfiguration`](crate::client::fluent_builders::DeleteConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DeleteConfiguration::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DeleteConfiguration::set_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
    /// - On success, responds with [`DeleteConfigurationOutput`](crate::output::DeleteConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DeleteConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
    ///   - [`state(Option<ConfigurationState>)`](crate::output::DeleteConfigurationOutput::state): <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    /// - On failure, responds with [`SdkError<DeleteConfigurationError>`](crate::error::DeleteConfigurationError)
    pub fn delete_configuration(&self) -> fluent_builders::DeleteConfiguration {
        fluent_builders::DeleteConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeCluster`](crate::client::fluent_builders::DescribeCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeCluster::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::DescribeCluster::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    /// - On success, responds with [`DescribeClusterOutput`](crate::output::DescribeClusterOutput) with field(s):
    ///   - [`cluster_info(Option<ClusterInfo>)`](crate::output::DescribeClusterOutput::cluster_info): <p>The cluster information.</p>
    /// - On failure, responds with [`SdkError<DescribeClusterError>`](crate::error::DescribeClusterError)
    pub fn describe_cluster(&self) -> fluent_builders::DescribeCluster {
        fluent_builders::DescribeCluster::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeClusterOperation`](crate::client::fluent_builders::DescribeClusterOperation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_operation_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeClusterOperation::cluster_operation_arn) / [`set_cluster_operation_arn(Option<String>)`](crate::client::fluent_builders::DescribeClusterOperation::set_cluster_operation_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>
    /// - On success, responds with [`DescribeClusterOperationOutput`](crate::output::DescribeClusterOperationOutput) with field(s):
    ///   - [`cluster_operation_info(Option<ClusterOperationInfo>)`](crate::output::DescribeClusterOperationOutput::cluster_operation_info): <p>Cluster operation information</p>
    /// - On failure, responds with [`SdkError<DescribeClusterOperationError>`](crate::error::DescribeClusterOperationError)
    pub fn describe_cluster_operation(&self) -> fluent_builders::DescribeClusterOperation {
        fluent_builders::DescribeClusterOperation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeClusterV2`](crate::client::fluent_builders::DescribeClusterV2) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeClusterV2::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::DescribeClusterV2::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    /// - On success, responds with [`DescribeClusterV2Output`](crate::output::DescribeClusterV2Output) with field(s):
    ///   - [`cluster_info(Option<Cluster>)`](crate::output::DescribeClusterV2Output::cluster_info): <p>The cluster information.</p>
    /// - On failure, responds with [`SdkError<DescribeClusterV2Error>`](crate::error::DescribeClusterV2Error)
    pub fn describe_cluster_v2(&self) -> fluent_builders::DescribeClusterV2 {
        fluent_builders::DescribeClusterV2::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConfiguration`](crate::client::fluent_builders::DescribeConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DescribeConfiguration::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DescribeConfiguration::set_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
    /// - On success, responds with [`DescribeConfigurationOutput`](crate::output::DescribeConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DescribeConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeConfigurationOutput::creation_time): <p>The time when the configuration was created.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeConfigurationOutput::description): <p>The description of the configuration.</p>
    ///   - [`kafka_versions(Option<Vec<String>>)`](crate::output::DescribeConfigurationOutput::kafka_versions): <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    ///   - [`latest_revision(Option<ConfigurationRevision>)`](crate::output::DescribeConfigurationOutput::latest_revision): <p>Latest revision of the configuration.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeConfigurationOutput::name): <p>The name of the configuration.</p>
    ///   - [`state(Option<ConfigurationState>)`](crate::output::DescribeConfigurationOutput::state): <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    /// - On failure, responds with [`SdkError<DescribeConfigurationError>`](crate::error::DescribeConfigurationError)
    pub fn describe_configuration(&self) -> fluent_builders::DescribeConfiguration {
        fluent_builders::DescribeConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeConfigurationRevision`](crate::client::fluent_builders::DescribeConfigurationRevision) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::DescribeConfigurationRevision::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::DescribeConfigurationRevision::set_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
    ///   - [`revision(i64)`](crate::client::fluent_builders::DescribeConfigurationRevision::revision) / [`set_revision(i64)`](crate::client::fluent_builders::DescribeConfigurationRevision::set_revision): <p>A string that uniquely identifies a revision of an MSK configuration.</p>
    /// - On success, responds with [`DescribeConfigurationRevisionOutput`](crate::output::DescribeConfigurationRevisionOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DescribeConfigurationRevisionOutput::arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`creation_time(Option<DateTime>)`](crate::output::DescribeConfigurationRevisionOutput::creation_time): <p>The time when the configuration was created.</p>
    ///   - [`description(Option<String>)`](crate::output::DescribeConfigurationRevisionOutput::description): <p>The description of the configuration.</p>
    ///   - [`revision(i64)`](crate::output::DescribeConfigurationRevisionOutput::revision): <p>The revision number.</p>
    ///   - [`server_properties(Option<Blob>)`](crate::output::DescribeConfigurationRevisionOutput::server_properties): <p>Contents of the <filename>   server.properties  </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>   server.properties  </filename> can be in plaintext.</p>
    /// - On failure, responds with [`SdkError<DescribeConfigurationRevisionError>`](crate::error::DescribeConfigurationRevisionError)
    pub fn describe_configuration_revision(
        &self,
    ) -> fluent_builders::DescribeConfigurationRevision {
        fluent_builders::DescribeConfigurationRevision::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetBootstrapBrokers`](crate::client::fluent_builders::GetBootstrapBrokers) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::GetBootstrapBrokers::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::GetBootstrapBrokers::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    /// - On success, responds with [`GetBootstrapBrokersOutput`](crate::output::GetBootstrapBrokersOutput) with field(s):
    ///   - [`bootstrap_broker_string(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string): <p>A string containing one or more hostname:port pairs.</p>
    ///   - [`bootstrap_broker_string_tls(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_tls): <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    ///   - [`bootstrap_broker_string_sasl_scram(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_sasl_scram): <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    ///   - [`bootstrap_broker_string_sasl_iam(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_sasl_iam): <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    ///   - [`bootstrap_broker_string_public_tls(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_public_tls): <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    ///   - [`bootstrap_broker_string_public_sasl_scram(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_public_sasl_scram): <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    ///   - [`bootstrap_broker_string_public_sasl_iam(Option<String>)`](crate::output::GetBootstrapBrokersOutput::bootstrap_broker_string_public_sasl_iam): <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    /// - On failure, responds with [`SdkError<GetBootstrapBrokersError>`](crate::error::GetBootstrapBrokersError)
    pub fn get_bootstrap_brokers(&self) -> fluent_builders::GetBootstrapBrokers {
        fluent_builders::GetBootstrapBrokers::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCompatibleKafkaVersions`](crate::client::fluent_builders::GetCompatibleKafkaVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::GetCompatibleKafkaVersions::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::GetCompatibleKafkaVersions::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster check.</p>
    /// - On success, responds with [`GetCompatibleKafkaVersionsOutput`](crate::output::GetCompatibleKafkaVersionsOutput) with field(s):
    ///   - [`compatible_kafka_versions(Option<Vec<CompatibleKafkaVersion>>)`](crate::output::GetCompatibleKafkaVersionsOutput::compatible_kafka_versions): <p>A list of CompatibleKafkaVersion objects.</p>
    /// - On failure, responds with [`SdkError<GetCompatibleKafkaVersionsError>`](crate::error::GetCompatibleKafkaVersionsError)
    pub fn get_compatible_kafka_versions(&self) -> fluent_builders::GetCompatibleKafkaVersions {
        fluent_builders::GetCompatibleKafkaVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListClusterOperations`](crate::client::fluent_builders::ListClusterOperations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListClusterOperations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::ListClusterOperations::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::ListClusterOperations::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListClusterOperations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListClusterOperations::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListClusterOperations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListClusterOperations::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListClusterOperationsOutput`](crate::output::ListClusterOperationsOutput) with field(s):
    ///   - [`cluster_operation_info_list(Option<Vec<ClusterOperationInfo>>)`](crate::output::ListClusterOperationsOutput::cluster_operation_info_list): <p>An array of cluster operation information objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListClusterOperationsOutput::next_token): <p>If the response of ListClusterOperations is truncated, it returns a NextToken in the response. This Nexttoken should be sent in the subsequent request to ListClusterOperations.</p>
    /// - On failure, responds with [`SdkError<ListClusterOperationsError>`](crate::error::ListClusterOperationsError)
    pub fn list_cluster_operations(&self) -> fluent_builders::ListClusterOperations {
        fluent_builders::ListClusterOperations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListClusters`](crate::client::fluent_builders::ListClusters) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListClusters::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name_filter(impl Into<String>)`](crate::client::fluent_builders::ListClusters::cluster_name_filter) / [`set_cluster_name_filter(Option<String>)`](crate::client::fluent_builders::ListClusters::set_cluster_name_filter): <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListClusters::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListClusters::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListClusters::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListClusters::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListClustersOutput`](crate::output::ListClustersOutput) with field(s):
    ///   - [`cluster_info_list(Option<Vec<ClusterInfo>>)`](crate::output::ListClustersOutput::cluster_info_list): <p>Information on each of the MSK clusters in the response.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListClustersOutput::next_token): <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    /// - On failure, responds with [`SdkError<ListClustersError>`](crate::error::ListClustersError)
    pub fn list_clusters(&self) -> fluent_builders::ListClusters {
        fluent_builders::ListClusters::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListClustersV2`](crate::client::fluent_builders::ListClustersV2) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListClustersV2::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_name_filter(impl Into<String>)`](crate::client::fluent_builders::ListClustersV2::cluster_name_filter) / [`set_cluster_name_filter(Option<String>)`](crate::client::fluent_builders::ListClustersV2::set_cluster_name_filter): <p>Specify a prefix of the names of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
    ///   - [`cluster_type_filter(impl Into<String>)`](crate::client::fluent_builders::ListClustersV2::cluster_type_filter) / [`set_cluster_type_filter(Option<String>)`](crate::client::fluent_builders::ListClustersV2::set_cluster_type_filter): <p>Specify either PROVISIONED or SERVERLESS.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListClustersV2::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListClustersV2::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListClustersV2::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListClustersV2::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListClustersV2Output`](crate::output::ListClustersV2Output) with field(s):
    ///   - [`cluster_info_list(Option<Vec<Cluster>>)`](crate::output::ListClustersV2Output::cluster_info_list): <p>Information on each of the MSK clusters in the response.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListClustersV2Output::next_token): <p>The paginated results marker. When the result of a ListClusters operation is truncated, the call returns NextToken in the response. To get another batch of clusters, provide this token in your next request.</p>
    /// - On failure, responds with [`SdkError<ListClustersV2Error>`](crate::error::ListClustersV2Error)
    pub fn list_clusters_v2(&self) -> fluent_builders::ListClustersV2 {
        fluent_builders::ListClustersV2::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConfigurationRevisions`](crate::client::fluent_builders::ListConfigurationRevisions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConfigurationRevisions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListConfigurationRevisions::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListConfigurationRevisions::set_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConfigurationRevisions::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListConfigurationRevisions::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConfigurationRevisions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConfigurationRevisions::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListConfigurationRevisionsOutput`](crate::output::ListConfigurationRevisionsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListConfigurationRevisionsOutput::next_token): <p>Paginated results marker.</p>
    ///   - [`revisions(Option<Vec<ConfigurationRevision>>)`](crate::output::ListConfigurationRevisionsOutput::revisions): <p>List of ConfigurationRevision objects.</p>
    /// - On failure, responds with [`SdkError<ListConfigurationRevisionsError>`](crate::error::ListConfigurationRevisionsError)
    pub fn list_configuration_revisions(&self) -> fluent_builders::ListConfigurationRevisions {
        fluent_builders::ListConfigurationRevisions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListConfigurations`](crate::client::fluent_builders::ListConfigurations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListConfigurations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListConfigurations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListConfigurations::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListConfigurations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListConfigurations::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListConfigurationsOutput`](crate::output::ListConfigurationsOutput) with field(s):
    ///   - [`configurations(Option<Vec<Configuration>>)`](crate::output::ListConfigurationsOutput::configurations): <p>An array of MSK configurations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListConfigurationsOutput::next_token): <p>The paginated results marker. When the result of a ListConfigurations operation is truncated, the call returns NextToken in the response. To get another batch of configurations, provide this token in your next request.</p>
    /// - On failure, responds with [`SdkError<ListConfigurationsError>`](crate::error::ListConfigurationsError)
    pub fn list_configurations(&self) -> fluent_builders::ListConfigurations {
        fluent_builders::ListConfigurations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListKafkaVersions`](crate::client::fluent_builders::ListKafkaVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListKafkaVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListKafkaVersions::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListKafkaVersions::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListKafkaVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListKafkaVersions::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListKafkaVersionsOutput`](crate::output::ListKafkaVersionsOutput) with field(s):
    ///   - [`kafka_versions(Option<Vec<KafkaVersion>>)`](crate::output::ListKafkaVersionsOutput::kafka_versions): (undocumented)
    ///   - [`next_token(Option<String>)`](crate::output::ListKafkaVersionsOutput::next_token): (undocumented)
    /// - On failure, responds with [`SdkError<ListKafkaVersionsError>`](crate::error::ListKafkaVersionsError)
    pub fn list_kafka_versions(&self) -> fluent_builders::ListKafkaVersions {
        fluent_builders::ListKafkaVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListNodes`](crate::client::fluent_builders::ListNodes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListNodes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::ListNodes::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::ListNodes::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListNodes::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListNodes::set_max_results): <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListNodes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListNodes::set_next_token): <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
    /// - On success, responds with [`ListNodesOutput`](crate::output::ListNodesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListNodesOutput::next_token): <p>The paginated results marker. When the result of a ListNodes operation is truncated, the call returns NextToken in the response. To get another batch of nodes, provide this token in your next request.</p>
    ///   - [`node_info_list(Option<Vec<NodeInfo>>)`](crate::output::ListNodesOutput::node_info_list): <p>List containing a NodeInfo object.</p>
    /// - On failure, responds with [`SdkError<ListNodesError>`](crate::error::ListNodesError)
    pub fn list_nodes(&self) -> fluent_builders::ListNodes {
        fluent_builders::ListNodes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListScramSecrets`](crate::client::fluent_builders::ListScramSecrets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListScramSecrets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::ListScramSecrets::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::ListScramSecrets::set_cluster_arn): <p>The arn of the cluster.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListScramSecrets::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListScramSecrets::set_max_results): <p>The maxResults of the query.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListScramSecrets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListScramSecrets::set_next_token): <p>The nextToken of the query.</p>
    /// - On success, responds with [`ListScramSecretsOutput`](crate::output::ListScramSecretsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListScramSecretsOutput::next_token): <p>Paginated results marker.</p>
    ///   - [`secret_arn_list(Option<Vec<String>>)`](crate::output::ListScramSecretsOutput::secret_arn_list): <p>The list of scram secrets associated with the cluster.</p>
    /// - On failure, responds with [`SdkError<ListScramSecretsError>`](crate::error::ListScramSecretsError)
    pub fn list_scram_secrets(&self) -> fluent_builders::ListScramSecrets {
        fluent_builders::ListScramSecrets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The key-value pair for the resource tag.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RebootBroker`](crate::client::fluent_builders::RebootBroker) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`broker_ids(Vec<String>)`](crate::client::fluent_builders::RebootBroker::broker_ids) / [`set_broker_ids(Option<Vec<String>>)`](crate::client::fluent_builders::RebootBroker::set_broker_ids): <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::RebootBroker::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::RebootBroker::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
    /// - On success, responds with [`RebootBrokerOutput`](crate::output::RebootBrokerOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::RebootBrokerOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::RebootBrokerOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<RebootBrokerError>`](crate::error::RebootBrokerError)
    pub fn reboot_broker(&self) -> fluent_builders::RebootBroker {
        fluent_builders::RebootBroker::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value pair for the resource tag.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>  <ul>   <li> <p>Each tag key must be unique. If you add a tag with a key that's already in use, your new tag overwrites the existing key-value pair. </p> </li>   <li> <p>You can't start a tag key with aws: because this prefix is reserved for use by AWS. AWS creates tags that begin with this prefix on your behalf, but you can't edit or delete them.</p> </li>   <li> <p>Tag keys must be between 1 and 128 Unicode characters in length.</p> </li>   <li> <p>Tag keys must consist of the following characters: Unicode letters, digits, white space, and the following special characters: _ . / = + - @.</p> </li>  </ul>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBrokerCount`](crate::client::fluent_builders::UpdateBrokerCount) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerCount::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateBrokerCount::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerCount::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateBrokerCount::set_current_version): <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    ///   - [`target_number_of_broker_nodes(i32)`](crate::client::fluent_builders::UpdateBrokerCount::target_number_of_broker_nodes) / [`set_target_number_of_broker_nodes(i32)`](crate::client::fluent_builders::UpdateBrokerCount::set_target_number_of_broker_nodes): <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>
    /// - On success, responds with [`UpdateBrokerCountOutput`](crate::output::UpdateBrokerCountOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateBrokerCountOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateBrokerCountOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateBrokerCountError>`](crate::error::UpdateBrokerCountError)
    pub fn update_broker_count(&self) -> fluent_builders::UpdateBrokerCount {
        fluent_builders::UpdateBrokerCount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBrokerStorage`](crate::client::fluent_builders::UpdateBrokerStorage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerStorage::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateBrokerStorage::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerStorage::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateBrokerStorage::set_current_version): <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    ///   - [`target_broker_ebs_volume_info(Vec<BrokerEbsVolumeInfo>)`](crate::client::fluent_builders::UpdateBrokerStorage::target_broker_ebs_volume_info) / [`set_target_broker_ebs_volume_info(Option<Vec<BrokerEbsVolumeInfo>>)`](crate::client::fluent_builders::UpdateBrokerStorage::set_target_broker_ebs_volume_info): <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
    /// - On success, responds with [`UpdateBrokerStorageOutput`](crate::output::UpdateBrokerStorageOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateBrokerStorageOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateBrokerStorageOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateBrokerStorageError>`](crate::error::UpdateBrokerStorageError)
    pub fn update_broker_storage(&self) -> fluent_builders::UpdateBrokerStorage {
        fluent_builders::UpdateBrokerStorage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBrokerType`](crate::client::fluent_builders::UpdateBrokerType) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerType::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateBrokerType::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerType::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateBrokerType::set_current_version): <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>
    ///   - [`target_instance_type(impl Into<String>)`](crate::client::fluent_builders::UpdateBrokerType::target_instance_type) / [`set_target_instance_type(Option<String>)`](crate::client::fluent_builders::UpdateBrokerType::set_target_instance_type): <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>
    /// - On success, responds with [`UpdateBrokerTypeOutput`](crate::output::UpdateBrokerTypeOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateBrokerTypeOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateBrokerTypeOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateBrokerTypeError>`](crate::error::UpdateBrokerTypeError)
    pub fn update_broker_type(&self) -> fluent_builders::UpdateBrokerType {
        fluent_builders::UpdateBrokerType::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateClusterConfiguration`](crate::client::fluent_builders::UpdateClusterConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateClusterConfiguration::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateClusterConfiguration::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`configuration_info(ConfigurationInfo)`](crate::client::fluent_builders::UpdateClusterConfiguration::configuration_info) / [`set_configuration_info(Option<ConfigurationInfo>)`](crate::client::fluent_builders::UpdateClusterConfiguration::set_configuration_info): <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateClusterConfiguration::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateClusterConfiguration::set_current_version): <p>The version of the cluster that needs to be updated.</p>
    /// - On success, responds with [`UpdateClusterConfigurationOutput`](crate::output::UpdateClusterConfigurationOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateClusterConfigurationOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateClusterConfigurationOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateClusterConfigurationError>`](crate::error::UpdateClusterConfigurationError)
    pub fn update_cluster_configuration(&self) -> fluent_builders::UpdateClusterConfiguration {
        fluent_builders::UpdateClusterConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateClusterKafkaVersion`](crate::client::fluent_builders::UpdateClusterKafkaVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
    ///   - [`configuration_info(ConfigurationInfo)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::configuration_info) / [`set_configuration_info(Option<ConfigurationInfo>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::set_configuration_info): <p>The custom configuration that should be applied on the new version of cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::set_current_version): <p>Current cluster version.</p>
    ///   - [`target_kafka_version(impl Into<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::target_kafka_version) / [`set_target_kafka_version(Option<String>)`](crate::client::fluent_builders::UpdateClusterKafkaVersion::set_target_kafka_version): <p>Target Kafka version.</p>
    /// - On success, responds with [`UpdateClusterKafkaVersionOutput`](crate::output::UpdateClusterKafkaVersionOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateClusterKafkaVersionOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateClusterKafkaVersionOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateClusterKafkaVersionError>`](crate::error::UpdateClusterKafkaVersionError)
    pub fn update_cluster_kafka_version(&self) -> fluent_builders::UpdateClusterKafkaVersion {
        fluent_builders::UpdateClusterKafkaVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConfiguration`](crate::client::fluent_builders::UpdateConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::UpdateConfiguration::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::UpdateConfiguration::set_arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateConfiguration::set_description): <p>The description of the configuration revision.</p>
    ///   - [`server_properties(Blob)`](crate::client::fluent_builders::UpdateConfiguration::server_properties) / [`set_server_properties(Option<Blob>)`](crate::client::fluent_builders::UpdateConfiguration::set_server_properties): <p>Contents of the <filename>   server.properties  </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>   server.properties  </filename> can be in plaintext.</p>
    /// - On success, responds with [`UpdateConfigurationOutput`](crate::output::UpdateConfigurationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::UpdateConfigurationOutput::arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`latest_revision(Option<ConfigurationRevision>)`](crate::output::UpdateConfigurationOutput::latest_revision): <p>Latest revision of the configuration.</p>
    /// - On failure, responds with [`SdkError<UpdateConfigurationError>`](crate::error::UpdateConfigurationError)
    pub fn update_configuration(&self) -> fluent_builders::UpdateConfiguration {
        fluent_builders::UpdateConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateConnectivity`](crate::client::fluent_builders::UpdateConnectivity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateConnectivity::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateConnectivity::set_cluster_arn): <p>The Amazon Resource Name (ARN) of the configuration.</p>
    ///   - [`connectivity_info(ConnectivityInfo)`](crate::client::fluent_builders::UpdateConnectivity::connectivity_info) / [`set_connectivity_info(Option<ConnectivityInfo>)`](crate::client::fluent_builders::UpdateConnectivity::set_connectivity_info): <p>Information about the broker access configuration.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateConnectivity::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateConnectivity::set_current_version): <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    /// - On success, responds with [`UpdateConnectivityOutput`](crate::output::UpdateConnectivityOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateConnectivityOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateConnectivityOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateConnectivityError>`](crate::error::UpdateConnectivityError)
    pub fn update_connectivity(&self) -> fluent_builders::UpdateConnectivity {
        fluent_builders::UpdateConnectivity::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateMonitoring`](crate::client::fluent_builders::UpdateMonitoring) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateMonitoring::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateMonitoring::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateMonitoring::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateMonitoring::set_current_version): <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    ///   - [`enhanced_monitoring(EnhancedMonitoring)`](crate::client::fluent_builders::UpdateMonitoring::enhanced_monitoring) / [`set_enhanced_monitoring(Option<EnhancedMonitoring>)`](crate::client::fluent_builders::UpdateMonitoring::set_enhanced_monitoring): <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    ///   - [`open_monitoring(OpenMonitoringInfo)`](crate::client::fluent_builders::UpdateMonitoring::open_monitoring) / [`set_open_monitoring(Option<OpenMonitoringInfo>)`](crate::client::fluent_builders::UpdateMonitoring::set_open_monitoring): <p>The settings for open monitoring.</p>
    ///   - [`logging_info(LoggingInfo)`](crate::client::fluent_builders::UpdateMonitoring::logging_info) / [`set_logging_info(Option<LoggingInfo>)`](crate::client::fluent_builders::UpdateMonitoring::set_logging_info): (undocumented)
    /// - On success, responds with [`UpdateMonitoringOutput`](crate::output::UpdateMonitoringOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateMonitoringOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateMonitoringOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateMonitoringError>`](crate::error::UpdateMonitoringError)
    pub fn update_monitoring(&self) -> fluent_builders::UpdateMonitoring {
        fluent_builders::UpdateMonitoring::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSecurity`](crate::client::fluent_builders::UpdateSecurity) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_authentication(ClientAuthentication)`](crate::client::fluent_builders::UpdateSecurity::client_authentication) / [`set_client_authentication(Option<ClientAuthentication>)`](crate::client::fluent_builders::UpdateSecurity::set_client_authentication): <p>Includes all client authentication related information.</p>
    ///   - [`cluster_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateSecurity::cluster_arn) / [`set_cluster_arn(Option<String>)`](crate::client::fluent_builders::UpdateSecurity::set_cluster_arn): <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    ///   - [`current_version(impl Into<String>)`](crate::client::fluent_builders::UpdateSecurity::current_version) / [`set_current_version(Option<String>)`](crate::client::fluent_builders::UpdateSecurity::set_current_version): <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    ///   - [`encryption_info(EncryptionInfo)`](crate::client::fluent_builders::UpdateSecurity::encryption_info) / [`set_encryption_info(Option<EncryptionInfo>)`](crate::client::fluent_builders::UpdateSecurity::set_encryption_info): <p>Includes all encryption-related information.</p>
    /// - On success, responds with [`UpdateSecurityOutput`](crate::output::UpdateSecurityOutput) with field(s):
    ///   - [`cluster_arn(Option<String>)`](crate::output::UpdateSecurityOutput::cluster_arn): <p>The Amazon Resource Name (ARN) of the cluster.</p>
    ///   - [`cluster_operation_arn(Option<String>)`](crate::output::UpdateSecurityOutput::cluster_operation_arn): <p>The Amazon Resource Name (ARN) of the cluster operation.</p>
    /// - On failure, responds with [`SdkError<UpdateSecurityError>`](crate::error::UpdateSecurityError)
    pub fn update_security(&self) -> fluent_builders::UpdateSecurity {
        fluent_builders::UpdateSecurity::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    //!
    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    //!
    /// Fluent builder constructing a request to `BatchAssociateScramSecret`.
    ///
    /// <p>Associates one or more Scram Secrets with an Amazon MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct BatchAssociateScramSecret {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::batch_associate_scram_secret_input::Builder,
    }
    impl BatchAssociateScramSecret {
        /// Creates a new `BatchAssociateScramSecret`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchAssociateScramSecretOutput,
            aws_smithy_http::result::SdkError<crate::error::BatchAssociateScramSecretError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// Appends an item to `SecretArnList`.
        ///
        /// To override the contents of this collection use [`set_secret_arn_list`](Self::set_secret_arn_list).
        ///
        /// <p>List of AWS Secrets Manager secret ARNs.</p>
        pub fn secret_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn_list(input.into());
            self
        }
        /// <p>List of AWS Secrets Manager secret ARNs.</p>
        pub fn set_secret_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_secret_arn_list(input);
            self
        }
    }
    /// Fluent builder constructing a request to `BatchDisassociateScramSecret`.
    ///
    /// <p>Disassociates one or more Scram Secrets from an Amazon MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct BatchDisassociateScramSecret {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::batch_disassociate_scram_secret_input::Builder,
    }
    impl BatchDisassociateScramSecret {
        /// Creates a new `BatchDisassociateScramSecret`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::BatchDisassociateScramSecretOutput,
            aws_smithy_http::result::SdkError<crate::error::BatchDisassociateScramSecretError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// Appends an item to `SecretArnList`.
        ///
        /// To override the contents of this collection use [`set_secret_arn_list`](Self::set_secret_arn_list).
        ///
        /// <p>List of AWS Secrets Manager secret ARNs.</p>
        pub fn secret_arn_list(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn_list(input.into());
            self
        }
        /// <p>List of AWS Secrets Manager secret ARNs.</p>
        pub fn set_secret_arn_list(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_secret_arn_list(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateCluster`.
    ///
    /// <p>Creates a new MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateCluster {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_cluster_input::Builder,
    }
    impl CreateCluster {
        /// Creates a new `CreateCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateClusterError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Information about the broker nodes in the cluster.</p>
        pub fn broker_node_group_info(mut self, input: crate::model::BrokerNodeGroupInfo) -> Self {
            self.inner = self.inner.broker_node_group_info(input);
            self
        }
        /// <p>Information about the broker nodes in the cluster.</p>
        pub fn set_broker_node_group_info(
            mut self,
            input: std::option::Option<crate::model::BrokerNodeGroupInfo>,
        ) -> Self {
            self.inner = self.inner.set_broker_node_group_info(input);
            self
        }
        /// <p>Includes all client authentication related information.</p>
        pub fn client_authentication(mut self, input: crate::model::ClientAuthentication) -> Self {
            self.inner = self.inner.client_authentication(input);
            self
        }
        /// <p>Includes all client authentication related information.</p>
        pub fn set_client_authentication(
            mut self,
            input: std::option::Option<crate::model::ClientAuthentication>,
        ) -> Self {
            self.inner = self.inner.set_client_authentication(input);
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(input.into());
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
        pub fn configuration_info(mut self, input: crate::model::ConfigurationInfo) -> Self {
            self.inner = self.inner.configuration_info(input);
            self
        }
        /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
        pub fn set_configuration_info(
            mut self,
            input: std::option::Option<crate::model::ConfigurationInfo>,
        ) -> Self {
            self.inner = self.inner.set_configuration_info(input);
            self
        }
        /// <p>Includes all encryption-related information.</p>
        pub fn encryption_info(mut self, input: crate::model::EncryptionInfo) -> Self {
            self.inner = self.inner.encryption_info(input);
            self
        }
        /// <p>Includes all encryption-related information.</p>
        pub fn set_encryption_info(
            mut self,
            input: std::option::Option<crate::model::EncryptionInfo>,
        ) -> Self {
            self.inner = self.inner.set_encryption_info(input);
            self
        }
        /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
        pub fn enhanced_monitoring(mut self, input: crate::model::EnhancedMonitoring) -> Self {
            self.inner = self.inner.enhanced_monitoring(input);
            self
        }
        /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
        pub fn set_enhanced_monitoring(
            mut self,
            input: std::option::Option<crate::model::EnhancedMonitoring>,
        ) -> Self {
            self.inner = self.inner.set_enhanced_monitoring(input);
            self
        }
        /// <p>The settings for open monitoring.</p>
        pub fn open_monitoring(mut self, input: crate::model::OpenMonitoringInfo) -> Self {
            self.inner = self.inner.open_monitoring(input);
            self
        }
        /// <p>The settings for open monitoring.</p>
        pub fn set_open_monitoring(
            mut self,
            input: std::option::Option<crate::model::OpenMonitoringInfo>,
        ) -> Self {
            self.inner = self.inner.set_open_monitoring(input);
            self
        }
        /// <p>The version of Apache Kafka.</p>
        pub fn kafka_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kafka_version(input.into());
            self
        }
        /// <p>The version of Apache Kafka.</p>
        pub fn set_kafka_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_kafka_version(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn logging_info(mut self, input: crate::model::LoggingInfo) -> Self {
            self.inner = self.inner.logging_info(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_logging_info(
            mut self,
            input: std::option::Option<crate::model::LoggingInfo>,
        ) -> Self {
            self.inner = self.inner.set_logging_info(input);
            self
        }
        /// <p>The number of broker nodes in the cluster.</p>
        pub fn number_of_broker_nodes(mut self, input: i32) -> Self {
            self.inner = self.inner.number_of_broker_nodes(input);
            self
        }
        /// <p>The number of broker nodes in the cluster.</p>
        pub fn set_number_of_broker_nodes(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_number_of_broker_nodes(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>Create tags when creating the cluster.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k.into(), v.into());
            self
        }
        /// <p>Create tags when creating the cluster.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateClusterV2`.
    ///
    /// <p>Creates a new MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateClusterV2 {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_cluster_v2_input::Builder,
    }
    impl CreateClusterV2 {
        /// Creates a new `CreateClusterV2`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateClusterV2Output,
            aws_smithy_http::result::SdkError<crate::error::CreateClusterV2Error>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the cluster.</p>
        pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name(input.into());
            self
        }
        /// <p>The name of the cluster.</p>
        pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_name(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A map of tags that you want the cluster to have.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k.into(), v.into());
            self
        }
        /// <p>A map of tags that you want the cluster to have.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Information about the provisioned cluster.</p>
        pub fn provisioned(mut self, input: crate::model::ProvisionedRequest) -> Self {
            self.inner = self.inner.provisioned(input);
            self
        }
        /// <p>Information about the provisioned cluster.</p>
        pub fn set_provisioned(
            mut self,
            input: std::option::Option<crate::model::ProvisionedRequest>,
        ) -> Self {
            self.inner = self.inner.set_provisioned(input);
            self
        }
        /// <p>Information about the serverless cluster.</p>
        pub fn serverless(mut self, input: crate::model::ServerlessRequest) -> Self {
            self.inner = self.inner.serverless(input);
            self
        }
        /// <p>Information about the serverless cluster.</p>
        pub fn set_serverless(
            mut self,
            input: std::option::Option<crate::model::ServerlessRequest>,
        ) -> Self {
            self.inner = self.inner.set_serverless(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateConfiguration`.
    ///
    /// <p>Creates a new MSK configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_configuration_input::Builder,
    }
    impl CreateConfiguration {
        /// Creates a new `CreateConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The description of the configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>The description of the configuration.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// Appends an item to `KafkaVersions`.
        ///
        /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
        ///
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn kafka_versions(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.kafka_versions(input.into());
            self
        }
        /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
        pub fn set_kafka_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_kafka_versions(input);
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the configuration.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn server_properties(mut self, input: aws_smithy_types::Blob) -> Self {
            self.inner = self.inner.server_properties(input);
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn set_server_properties(
            mut self,
            input: std::option::Option<aws_smithy_types::Blob>,
        ) -> Self {
            self.inner = self.inner.set_server_properties(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCluster`.
    ///
    /// <p>Deletes the MSK cluster specified by the Amazon Resource Name (ARN) in the request.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteCluster {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_cluster_input::Builder,
    }
    impl DeleteCluster {
        /// Creates a new `DeleteCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteClusterError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The current version of the MSK cluster.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The current version of the MSK cluster.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteConfiguration`.
    ///
    /// <p>Deletes an MSK Configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_configuration_input::Builder,
    }
    impl DeleteConfiguration {
        /// Creates a new `DeleteConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeCluster`.
    ///
    /// <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeCluster {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_cluster_input::Builder,
    }
    impl DescribeCluster {
        /// Creates a new `DescribeCluster`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeClusterError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeClusterOperation`.
    ///
    /// <p>Returns a description of the cluster operation specified by the ARN.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeClusterOperation {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_cluster_operation_input::Builder,
    }
    impl DescribeClusterOperation {
        /// Creates a new `DescribeClusterOperation`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterOperationOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeClusterOperationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>
        pub fn cluster_operation_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_operation_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the MSK cluster operation.</p>
        pub fn set_cluster_operation_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_operation_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeClusterV2`.
    ///
    /// <p>Returns a description of the MSK cluster whose Amazon Resource Name (ARN) is specified in the request.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeClusterV2 {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_cluster_v2_input::Builder,
    }
    impl DescribeClusterV2 {
        /// Creates a new `DescribeClusterV2`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeClusterV2Output,
            aws_smithy_http::result::SdkError<crate::error::DescribeClusterV2Error>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeConfiguration`.
    ///
    /// <p>Returns a description of this MSK configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_configuration_input::Builder,
    }
    impl DescribeConfiguration {
        /// Creates a new `DescribeConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DescribeConfigurationRevision`.
    ///
    /// <p>Returns a description of this revision of the configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DescribeConfigurationRevision {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::describe_configuration_revision_input::Builder,
    }
    impl DescribeConfigurationRevision {
        /// Creates a new `DescribeConfigurationRevision`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConfigurationRevisionOutput,
            aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationRevisionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
        /// <p>A string that uniquely identifies a revision of an MSK configuration.</p>
        pub fn revision(mut self, input: i64) -> Self {
            self.inner = self.inner.revision(input);
            self
        }
        /// <p>A string that uniquely identifies a revision of an MSK configuration.</p>
        pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_revision(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetBootstrapBrokers`.
    ///
    /// <p>A list of brokers that a client application can use to bootstrap.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetBootstrapBrokers {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_bootstrap_brokers_input::Builder,
    }
    impl GetBootstrapBrokers {
        /// Creates a new `GetBootstrapBrokers`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetBootstrapBrokersOutput,
            aws_smithy_http::result::SdkError<crate::error::GetBootstrapBrokersError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCompatibleKafkaVersions`.
    ///
    /// <p>Gets the Apache Kafka versions to which you can update the MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetCompatibleKafkaVersions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_compatible_kafka_versions_input::Builder,
    }
    impl GetCompatibleKafkaVersions {
        /// Creates a new `GetCompatibleKafkaVersions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCompatibleKafkaVersionsOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCompatibleKafkaVersionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster check.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster check.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListClusterOperations`.
    ///
    /// <p>Returns a list of all the operations that have been performed on the specified MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListClusterOperations {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_cluster_operations_input::Builder,
    }
    impl ListClusterOperations {
        /// Creates a new `ListClusterOperations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClusterOperationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListClusterOperationsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListClusterOperationsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListClusterOperationsPaginator {
            crate::paginator::ListClusterOperationsPaginator::new(self.handle, self.inner)
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListClusters`.
    ///
    /// <p>Returns a list of all the MSK clusters in the current Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListClusters {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_clusters_input::Builder,
    }
    impl ListClusters {
        /// Creates a new `ListClusters`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClustersOutput,
            aws_smithy_http::result::SdkError<crate::error::ListClustersError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListClustersPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListClustersPaginator {
            crate::paginator::ListClustersPaginator::new(self.handle, self.inner)
        }
        /// <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
        pub fn cluster_name_filter(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name_filter(input.into());
            self
        }
        /// <p>Specify a prefix of the name of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
        pub fn set_cluster_name_filter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_name_filter(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListClustersV2`.
    ///
    /// <p>Returns a list of all the MSK clusters in the current Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListClustersV2 {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_clusters_v2_input::Builder,
    }
    impl ListClustersV2 {
        /// Creates a new `ListClustersV2`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListClustersV2Output,
            aws_smithy_http::result::SdkError<crate::error::ListClustersV2Error>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListClustersV2Paginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListClustersV2Paginator {
            crate::paginator::ListClustersV2Paginator::new(self.handle, self.inner)
        }
        /// <p>Specify a prefix of the names of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
        pub fn cluster_name_filter(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_name_filter(input.into());
            self
        }
        /// <p>Specify a prefix of the names of the clusters that you want to list. The service lists all the clusters whose names start with this prefix.</p>
        pub fn set_cluster_name_filter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_name_filter(input);
            self
        }
        /// <p>Specify either PROVISIONED or SERVERLESS.</p>
        pub fn cluster_type_filter(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_type_filter(input.into());
            self
        }
        /// <p>Specify either PROVISIONED or SERVERLESS.</p>
        pub fn set_cluster_type_filter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cluster_type_filter(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListConfigurationRevisions`.
    ///
    /// <p>Returns a list of all the MSK configurations in this Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListConfigurationRevisions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_configuration_revisions_input::Builder,
    }
    impl ListConfigurationRevisions {
        /// Creates a new `ListConfigurationRevisions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListConfigurationRevisionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListConfigurationRevisionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListConfigurationRevisionsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListConfigurationRevisionsPaginator {
            crate::paginator::ListConfigurationRevisionsPaginator::new(self.handle, self.inner)
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies an MSK configuration and all of its revisions.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListConfigurations`.
    ///
    /// <p>Returns a list of all the MSK configurations in this Region.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListConfigurations {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_configurations_input::Builder,
    }
    impl ListConfigurations {
        /// Creates a new `ListConfigurations`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListConfigurationsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListConfigurationsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListConfigurationsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListConfigurationsPaginator {
            crate::paginator::ListConfigurationsPaginator::new(self.handle, self.inner)
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListKafkaVersions`.
    ///
    /// <p>Returns a list of Apache Kafka versions.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListKafkaVersions {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_kafka_versions_input::Builder,
    }
    impl ListKafkaVersions {
        /// Creates a new `ListKafkaVersions`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListKafkaVersionsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListKafkaVersionsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListKafkaVersionsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListKafkaVersionsPaginator {
            crate::paginator::ListKafkaVersionsPaginator::new(self.handle, self.inner)
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListNodes`.
    ///
    /// <p>Returns a list of the broker nodes in the cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListNodes {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_nodes_input::Builder,
    }
    impl ListNodes {
        /// Creates a new `ListNodes`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListNodesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListNodesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListNodesPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListNodesPaginator {
            crate::paginator::ListNodesPaginator::new(self.handle, self.inner)
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maximum number of results to return in the response. If there are more results, the response includes a NextToken parameter.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The paginated results marker. When the result of the operation is truncated, the call returns NextToken in the response. To get the next batch, provide this token in your next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListScramSecrets`.
    ///
    /// <p>Returns a list of the Scram Secrets associated with an Amazon MSK cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListScramSecrets {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_scram_secrets_input::Builder,
    }
    impl ListScramSecrets {
        /// Creates a new `ListScramSecrets`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListScramSecretsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListScramSecretsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListScramSecretsPaginator::send) which returns a [`Stream`](tokio_stream::Stream).
        pub fn into_paginator(self) -> crate::paginator::ListScramSecretsPaginator {
            crate::paginator::ListScramSecretsPaginator::new(self.handle, self.inner)
        }
        /// <p>The arn of the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The arn of the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The maxResults of the query.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        /// <p>The maxResults of the query.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The nextToken of the query.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>The nextToken of the query.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Returns a list of the tags associated with the specified resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `RebootBroker`.
    ///
    /// Reboots brokers.
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct RebootBroker {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::reboot_broker_input::Builder,
    }
    impl RebootBroker {
        /// Creates a new `RebootBroker`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RebootBrokerOutput,
            aws_smithy_http::result::SdkError<crate::error::RebootBrokerError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `BrokerIds`.
        ///
        /// To override the contents of this collection use [`set_broker_ids`](Self::set_broker_ids).
        ///
        /// <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>
        pub fn broker_ids(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.broker_ids(input.into());
            self
        }
        /// <p>The list of broker IDs to be rebooted. The reboot-broker operation supports rebooting one broker at a time.</p>
        pub fn set_broker_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_broker_ids(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Adds tags to the specified MSK resource.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Adds a key-value pair to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The key-value pair for the resource tag.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k.into(), v.into());
            self
        }
        /// <p>The key-value pair for the resource tag.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Removes the tags associated with the keys that are provided in the query.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the resource that's associated with the tags.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>
        /// <ul>
        /// <li> <p>Each tag key must be unique. If you add a tag with a key that's already in use, your new tag overwrites the existing key-value pair. </p> </li>
        /// <li> <p>You can't start a tag key with aws: because this prefix is reserved for use by AWS. AWS creates tags that begin with this prefix on your behalf, but you can't edit or delete them.</p> </li>
        /// <li> <p>Tag keys must be between 1 and 128 Unicode characters in length.</p> </li>
        /// <li> <p>Tag keys must consist of the following characters: Unicode letters, digits, white space, and the following special characters: _ . / = + - @.</p> </li>
        /// </ul>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>Tag keys must be unique for a given cluster. In addition, the following restrictions apply:</p>
        /// <ul>
        /// <li> <p>Each tag key must be unique. If you add a tag with a key that's already in use, your new tag overwrites the existing key-value pair. </p> </li>
        /// <li> <p>You can't start a tag key with aws: because this prefix is reserved for use by AWS. AWS creates tags that begin with this prefix on your behalf, but you can't edit or delete them.</p> </li>
        /// <li> <p>Tag keys must be between 1 and 128 Unicode characters in length.</p> </li>
        /// <li> <p>Tag keys must consist of the following characters: Unicode letters, digits, white space, and the following special characters: _ . / = + - @.</p> </li>
        /// </ul>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateBrokerCount`.
    ///
    /// <p>Updates the number of broker nodes in the cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateBrokerCount {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_broker_count_input::Builder,
    }
    impl UpdateBrokerCount {
        /// Creates a new `UpdateBrokerCount`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateBrokerCountOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateBrokerCountError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>
        pub fn target_number_of_broker_nodes(mut self, input: i32) -> Self {
            self.inner = self.inner.target_number_of_broker_nodes(input);
            self
        }
        /// <p>The number of broker nodes that you want the cluster to have after this operation completes successfully.</p>
        pub fn set_target_number_of_broker_nodes(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.inner = self.inner.set_target_number_of_broker_nodes(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateBrokerStorage`.
    ///
    /// <p>Updates the EBS storage associated with MSK brokers.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateBrokerStorage {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_broker_storage_input::Builder,
    }
    impl UpdateBrokerStorage {
        /// Creates a new `UpdateBrokerStorage`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateBrokerStorageOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateBrokerStorageError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// Appends an item to `TargetBrokerEBSVolumeInfo`.
        ///
        /// To override the contents of this collection use [`set_target_broker_ebs_volume_info`](Self::set_target_broker_ebs_volume_info).
        ///
        /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
        pub fn target_broker_ebs_volume_info(
            mut self,
            input: crate::model::BrokerEbsVolumeInfo,
        ) -> Self {
            self.inner = self.inner.target_broker_ebs_volume_info(input);
            self
        }
        /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
        pub fn set_target_broker_ebs_volume_info(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::BrokerEbsVolumeInfo>>,
        ) -> Self {
            self.inner = self.inner.set_target_broker_ebs_volume_info(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateBrokerType`.
    ///
    /// <p>Updates EC2 instance type.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateBrokerType {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_broker_type_input::Builder,
    }
    impl UpdateBrokerType {
        /// Creates a new `UpdateBrokerType`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateBrokerTypeOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateBrokerTypeError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The cluster version that you want to change. After this operation completes successfully, the cluster will have a new version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>
        pub fn target_instance_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_instance_type(input.into());
            self
        }
        /// <p>The Amazon MSK broker type that you want all of the brokers in this cluster to be.</p>
        pub fn set_target_instance_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_target_instance_type(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateClusterConfiguration`.
    ///
    /// <p>Updates the cluster with the configuration that is specified in the request body.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateClusterConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_cluster_configuration_input::Builder,
    }
    impl UpdateClusterConfiguration {
        /// Creates a new `UpdateClusterConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateClusterConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateClusterConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
        pub fn configuration_info(mut self, input: crate::model::ConfigurationInfo) -> Self {
            self.inner = self.inner.configuration_info(input);
            self
        }
        /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
        pub fn set_configuration_info(
            mut self,
            input: std::option::Option<crate::model::ConfigurationInfo>,
        ) -> Self {
            self.inner = self.inner.set_configuration_info(input);
            self
        }
        /// <p>The version of the cluster that needs to be updated.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of the cluster that needs to be updated.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateClusterKafkaVersion`.
    ///
    /// <p>Updates the Apache Kafka version for the cluster.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateClusterKafkaVersion {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_cluster_kafka_version_input::Builder,
    }
    impl UpdateClusterKafkaVersion {
        /// Creates a new `UpdateClusterKafkaVersion`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateClusterKafkaVersionOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateClusterKafkaVersionError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the cluster to be updated.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The custom configuration that should be applied on the new version of cluster.</p>
        pub fn configuration_info(mut self, input: crate::model::ConfigurationInfo) -> Self {
            self.inner = self.inner.configuration_info(input);
            self
        }
        /// <p>The custom configuration that should be applied on the new version of cluster.</p>
        pub fn set_configuration_info(
            mut self,
            input: std::option::Option<crate::model::ConfigurationInfo>,
        ) -> Self {
            self.inner = self.inner.set_configuration_info(input);
            self
        }
        /// <p>Current cluster version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>Current cluster version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// <p>Target Kafka version.</p>
        pub fn target_kafka_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.target_kafka_version(input.into());
            self
        }
        /// <p>Target Kafka version.</p>
        pub fn set_target_kafka_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_target_kafka_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateConfiguration`.
    ///
    /// <p>Updates an MSK configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateConfiguration {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_configuration_input::Builder,
    }
    impl UpdateConfiguration {
        /// Creates a new `UpdateConfiguration`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConfigurationOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateConfigurationError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_arn(input);
            self
        }
        /// <p>The description of the configuration revision.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input.into());
            self
        }
        /// <p>The description of the configuration revision.</p>
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn server_properties(mut self, input: aws_smithy_types::Blob) -> Self {
            self.inner = self.inner.server_properties(input);
            self
        }
        /// <p>Contents of the <filename>
        /// server.properties
        /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
        /// server.properties
        /// </filename> can be in plaintext.</p>
        pub fn set_server_properties(
            mut self,
            input: std::option::Option<aws_smithy_types::Blob>,
        ) -> Self {
            self.inner = self.inner.set_server_properties(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateConnectivity`.
    ///
    /// <p>Updates the cluster's connectivity configuration.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateConnectivity {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_connectivity_input::Builder,
    }
    impl UpdateConnectivity {
        /// Creates a new `UpdateConnectivity`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConnectivityOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateConnectivityError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>Information about the broker access configuration.</p>
        pub fn connectivity_info(mut self, input: crate::model::ConnectivityInfo) -> Self {
            self.inner = self.inner.connectivity_info(input);
            self
        }
        /// <p>Information about the broker access configuration.</p>
        pub fn set_connectivity_info(
            mut self,
            input: std::option::Option<crate::model::ConnectivityInfo>,
        ) -> Self {
            self.inner = self.inner.set_connectivity_info(input);
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateMonitoring`.
    ///
    /// <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateMonitoring {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_monitoring_input::Builder,
    }
    impl UpdateMonitoring {
        /// Creates a new `UpdateMonitoring`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateMonitoringOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateMonitoringError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
        pub fn enhanced_monitoring(mut self, input: crate::model::EnhancedMonitoring) -> Self {
            self.inner = self.inner.enhanced_monitoring(input);
            self
        }
        /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
        pub fn set_enhanced_monitoring(
            mut self,
            input: std::option::Option<crate::model::EnhancedMonitoring>,
        ) -> Self {
            self.inner = self.inner.set_enhanced_monitoring(input);
            self
        }
        /// <p>The settings for open monitoring.</p>
        pub fn open_monitoring(mut self, input: crate::model::OpenMonitoringInfo) -> Self {
            self.inner = self.inner.open_monitoring(input);
            self
        }
        /// <p>The settings for open monitoring.</p>
        pub fn set_open_monitoring(
            mut self,
            input: std::option::Option<crate::model::OpenMonitoringInfo>,
        ) -> Self {
            self.inner = self.inner.set_open_monitoring(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn logging_info(mut self, input: crate::model::LoggingInfo) -> Self {
            self.inner = self.inner.logging_info(input);
            self
        }
        #[allow(missing_docs)] // documentation missing in model
        pub fn set_logging_info(
            mut self,
            input: std::option::Option<crate::model::LoggingInfo>,
        ) -> Self {
            self.inner = self.inner.set_logging_info(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateSecurity`.
    ///
    /// <p>Updates the security settings for the cluster. You can use this operation to specify encryption and authentication on existing clusters.</p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateSecurity {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_security_input::Builder,
    }
    impl UpdateSecurity {
        /// Creates a new `UpdateSecurity`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateSecurityOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateSecurityError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(|err| aws_smithy_http::result::SdkError::ConstructionFailure(err.into()))?
                .make_operation(&self.handle.conf)
                .await
                .map_err(|err| {
                    aws_smithy_http::result::SdkError::ConstructionFailure(err.into())
                })?;
            self.handle.client.call(op).await
        }
        /// <p>Includes all client authentication related information.</p>
        pub fn client_authentication(mut self, input: crate::model::ClientAuthentication) -> Self {
            self.inner = self.inner.client_authentication(input);
            self
        }
        /// <p>Includes all client authentication related information.</p>
        pub fn set_client_authentication(
            mut self,
            input: std::option::Option<crate::model::ClientAuthentication>,
        ) -> Self {
            self.inner = self.inner.set_client_authentication(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cluster_arn(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
        pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cluster_arn(input);
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.current_version(input.into());
            self
        }
        /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
        pub fn set_current_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_current_version(input);
            self
        }
        /// <p>Includes all encryption-related information.</p>
        pub fn encryption_info(mut self, input: crate::model::EncryptionInfo) -> Self {
            self.inner = self.inner.encryption_info(input);
            self
        }
        /// <p>Includes all encryption-related information.</p>
        pub fn set_encryption_info(
            mut self,
            input: std::option::Option<crate::model::EncryptionInfo>,
        ) -> Self {
            self.inner = self.inner.set_encryption_info(input);
            self
        }
    }
}

impl Client {
    /// Creates a client with the given service config and connector override.
    pub fn from_conf_conn<C, E>(conf: crate::Config, conn: C) -> Self
    where
        C: aws_smithy_client::bounds::SmithyConnector<Error = E> + Send + 'static,
        E: Into<aws_smithy_http::result::ConnectorError>,
    {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::new()
            .connector(aws_smithy_client::erase::DynConnector::new(conn))
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ));
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Creates a new client from a shared config.
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let timeout_config = conf.timeout_config.as_ref().cloned().unwrap_or_default();
        let sleep_impl = conf.sleep_impl.clone();
        let mut builder = aws_smithy_client::Builder::dyn_https().middleware(
            aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ),
        );
        builder.set_retry_config(retry_config.into());
        builder.set_timeout_config(timeout_config);
        // the builder maintains a try-state. To avoid suppressing the warning when sleep is unset,
        // only set it if we actually have a sleep impl.
        if let Some(sleep_impl) = sleep_impl {
            builder.set_sleep_impl(Some(sleep_impl));
        }
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
