// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetBootstrapBrokersOutput {
    /// <p>A string containing one or more hostname:port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_tls: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_tls: std::option::Option<std::string::String>,
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_sasl_scram: std::option::Option<std::string::String>,
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    #[doc(hidden)]
    pub bootstrap_broker_string_public_sasl_iam: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBootstrapBrokersOutput {
    /// <p>A string containing one or more hostname:port pairs.</p>
    pub fn bootstrap_broker_string(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_tls(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_tls.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_sasl_scram(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_sasl_scram.as_deref()
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_sasl_iam(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_sasl_iam.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_public_tls(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_tls.as_deref()
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_scram(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_sasl_scram.as_deref()
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_iam(&self) -> std::option::Option<&str> {
        self.bootstrap_broker_string_public_sasl_iam.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetBootstrapBrokersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBootstrapBrokersOutput {
    /// Creates a new builder-style object to manufacture [`GetBootstrapBrokersOutput`](crate::operation::get_bootstrap_brokers::GetBootstrapBrokersOutput).
    pub fn builder(
    ) -> crate::operation::get_bootstrap_brokers::builders::GetBootstrapBrokersOutputBuilder {
        crate::operation::get_bootstrap_brokers::builders::GetBootstrapBrokersOutputBuilder::default(
        )
    }
}

/// A builder for [`GetBootstrapBrokersOutput`](crate::operation::get_bootstrap_brokers::GetBootstrapBrokersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetBootstrapBrokersOutputBuilder {
    pub(crate) bootstrap_broker_string: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_tls: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_sasl_scram: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_sasl_iam: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_public_tls: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_public_sasl_scram: std::option::Option<std::string::String>,
    pub(crate) bootstrap_broker_string_public_sasl_iam: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBootstrapBrokersOutputBuilder {
    /// <p>A string containing one or more hostname:port pairs.</p>
    pub fn bootstrap_broker_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.bootstrap_broker_string = Some(input.into());
        self
    }
    /// <p>A string containing one or more hostname:port pairs.</p>
    pub fn set_bootstrap_broker_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string = input;
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_tls(mut self, input: impl Into<std::string::String>) -> Self {
        self.bootstrap_broker_string_tls = Some(input.into());
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn set_bootstrap_broker_string_tls(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_tls = input;
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_sasl_scram(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_sasl_scram = Some(input.into());
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn set_bootstrap_broker_string_sasl_scram(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_sasl_scram = input;
        self
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_sasl_iam(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_sasl_iam = Some(input.into());
        self
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn set_bootstrap_broker_string_sasl_iam(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_sasl_iam = input;
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn bootstrap_broker_string_public_tls(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_tls = Some(input.into());
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and TLS port pairs.</p>
    pub fn set_bootstrap_broker_string_public_tls(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_tls = input;
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_scram(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_sasl_scram = Some(input.into());
        self
    }
    /// <p>A string containing one or more DNS names (or IP) and Sasl Scram port pairs.</p>
    pub fn set_bootstrap_broker_string_public_sasl_scram(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_sasl_scram = input;
        self
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn bootstrap_broker_string_public_sasl_iam(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_sasl_iam = Some(input.into());
        self
    }
    /// <p>A string that contains one or more DNS names (or IP addresses) and SASL IAM port pairs.</p>
    pub fn set_bootstrap_broker_string_public_sasl_iam(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.bootstrap_broker_string_public_sasl_iam = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBootstrapBrokersOutput`](crate::operation::get_bootstrap_brokers::GetBootstrapBrokersOutput).
    pub fn build(self) -> crate::operation::get_bootstrap_brokers::GetBootstrapBrokersOutput {
        crate::operation::get_bootstrap_brokers::GetBootstrapBrokersOutput {
            bootstrap_broker_string: self.bootstrap_broker_string,
            bootstrap_broker_string_tls: self.bootstrap_broker_string_tls,
            bootstrap_broker_string_sasl_scram: self.bootstrap_broker_string_sasl_scram,
            bootstrap_broker_string_sasl_iam: self.bootstrap_broker_string_sasl_iam,
            bootstrap_broker_string_public_tls: self.bootstrap_broker_string_public_tls,
            bootstrap_broker_string_public_sasl_scram: self
                .bootstrap_broker_string_public_sasl_scram,
            bootstrap_broker_string_public_sasl_iam: self.bootstrap_broker_string_public_sasl_iam,
            _request_id: self._request_id,
        }
    }
}
