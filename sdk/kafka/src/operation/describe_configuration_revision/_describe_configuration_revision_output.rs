// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConfigurationRevisionOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The revision number.</p>
    #[doc(hidden)]
    pub revision: i64,
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    #[doc(hidden)]
    pub server_properties: std::option::Option<aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl DescribeConfigurationRevisionOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The revision number.</p>
    pub fn revision(&self) -> i64 {
        self.revision
    }
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    pub fn server_properties(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.server_properties.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeConfigurationRevisionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConfigurationRevisionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
    pub fn builder() -> crate::operation::describe_configuration_revision::builders::DescribeConfigurationRevisionOutputBuilder{
        crate::operation::describe_configuration_revision::builders::DescribeConfigurationRevisionOutputBuilder::default()
    }
}

/// A builder for [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeConfigurationRevisionOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) revision: std::option::Option<i64>,
    pub(crate) server_properties: std::option::Option<aws_smithy_types::Blob>,
    _request_id: Option<String>,
}
impl DescribeConfigurationRevisionOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the configuration was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The revision number.</p>
    pub fn revision(mut self, input: i64) -> Self {
        self.revision = Some(input);
        self
    }
    /// <p>The revision number.</p>
    pub fn set_revision(mut self, input: std::option::Option<i64>) -> Self {
        self.revision = input;
        self
    }
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    pub fn server_properties(mut self, input: aws_smithy_types::Blob) -> Self {
        self.server_properties = Some(input);
        self
    }
    /// <p>Contents of the <filename>
    /// server.properties
    /// </filename> file. When using the API, you must ensure that the contents of the file are base64 encoded. When using the AWS Management Console, the SDK, or the AWS CLI, the contents of <filename>
    /// server.properties
    /// </filename> can be in plaintext.</p>
    pub fn set_server_properties(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.server_properties = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConfigurationRevisionOutput`](crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput
    {
        crate::operation::describe_configuration_revision::DescribeConfigurationRevisionOutput {
            arn: self.arn,
            creation_time: self.creation_time,
            description: self.description,
            revision: self.revision.unwrap_or_default(),
            server_properties: self.server_properties,
            _request_id: self._request_id,
        }
    }
}
