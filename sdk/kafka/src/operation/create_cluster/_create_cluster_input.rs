// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateClusterInput {
    /// <p>Information about the broker nodes in the cluster.</p>
    pub broker_node_group_info: ::std::option::Option<crate::types::BrokerNodeGroupInfo>,
    /// <p>Includes all client authentication related information.</p>
    pub client_authentication: ::std::option::Option<crate::types::ClientAuthentication>,
    /// <p>The name of the cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    pub configuration_info: ::std::option::Option<crate::types::ConfigurationInfo>,
    /// <p>Includes all encryption-related information.</p>
    pub encryption_info: ::std::option::Option<crate::types::EncryptionInfo>,
    /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    pub enhanced_monitoring: ::std::option::Option<crate::types::EnhancedMonitoring>,
    /// <p>The settings for open monitoring.</p>
    pub open_monitoring: ::std::option::Option<crate::types::OpenMonitoringInfo>,
    /// <p>The version of Apache Kafka.</p>
    pub kafka_version: ::std::option::Option<::std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    pub logging_info: ::std::option::Option<crate::types::LoggingInfo>,
    /// <p>The number of broker nodes in the cluster.</p>
    pub number_of_broker_nodes: ::std::option::Option<i32>,
    /// <p>Create tags when creating the cluster.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>This controls storage mode for supported storage tiers.</p>
    pub storage_mode: ::std::option::Option<crate::types::StorageMode>,
}
impl CreateClusterInput {
    /// <p>Information about the broker nodes in the cluster.</p>
    pub fn broker_node_group_info(&self) -> ::std::option::Option<&crate::types::BrokerNodeGroupInfo> {
        self.broker_node_group_info.as_ref()
    }
    /// <p>Includes all client authentication related information.</p>
    pub fn client_authentication(&self) -> ::std::option::Option<&crate::types::ClientAuthentication> {
        self.client_authentication.as_ref()
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    pub fn configuration_info(&self) -> ::std::option::Option<&crate::types::ConfigurationInfo> {
        self.configuration_info.as_ref()
    }
    /// <p>Includes all encryption-related information.</p>
    pub fn encryption_info(&self) -> ::std::option::Option<&crate::types::EncryptionInfo> {
        self.encryption_info.as_ref()
    }
    /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    pub fn enhanced_monitoring(&self) -> ::std::option::Option<&crate::types::EnhancedMonitoring> {
        self.enhanced_monitoring.as_ref()
    }
    /// <p>The settings for open monitoring.</p>
    pub fn open_monitoring(&self) -> ::std::option::Option<&crate::types::OpenMonitoringInfo> {
        self.open_monitoring.as_ref()
    }
    /// <p>The version of Apache Kafka.</p>
    pub fn kafka_version(&self) -> ::std::option::Option<&str> {
        self.kafka_version.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_info(&self) -> ::std::option::Option<&crate::types::LoggingInfo> {
        self.logging_info.as_ref()
    }
    /// <p>The number of broker nodes in the cluster.</p>
    pub fn number_of_broker_nodes(&self) -> ::std::option::Option<i32> {
        self.number_of_broker_nodes
    }
    /// <p>Create tags when creating the cluster.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>This controls storage mode for supported storage tiers.</p>
    pub fn storage_mode(&self) -> ::std::option::Option<&crate::types::StorageMode> {
        self.storage_mode.as_ref()
    }
}
impl CreateClusterInput {
    /// Creates a new builder-style object to manufacture [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn builder() -> crate::operation::create_cluster::builders::CreateClusterInputBuilder {
        crate::operation::create_cluster::builders::CreateClusterInputBuilder::default()
    }
}

/// A builder for [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateClusterInputBuilder {
    pub(crate) broker_node_group_info: ::std::option::Option<crate::types::BrokerNodeGroupInfo>,
    pub(crate) client_authentication: ::std::option::Option<crate::types::ClientAuthentication>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) configuration_info: ::std::option::Option<crate::types::ConfigurationInfo>,
    pub(crate) encryption_info: ::std::option::Option<crate::types::EncryptionInfo>,
    pub(crate) enhanced_monitoring: ::std::option::Option<crate::types::EnhancedMonitoring>,
    pub(crate) open_monitoring: ::std::option::Option<crate::types::OpenMonitoringInfo>,
    pub(crate) kafka_version: ::std::option::Option<::std::string::String>,
    pub(crate) logging_info: ::std::option::Option<crate::types::LoggingInfo>,
    pub(crate) number_of_broker_nodes: ::std::option::Option<i32>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) storage_mode: ::std::option::Option<crate::types::StorageMode>,
}
impl CreateClusterInputBuilder {
    /// <p>Information about the broker nodes in the cluster.</p>
    /// This field is required.
    pub fn broker_node_group_info(mut self, input: crate::types::BrokerNodeGroupInfo) -> Self {
        self.broker_node_group_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the broker nodes in the cluster.</p>
    pub fn set_broker_node_group_info(mut self, input: ::std::option::Option<crate::types::BrokerNodeGroupInfo>) -> Self {
        self.broker_node_group_info = input;
        self
    }
    /// <p>Information about the broker nodes in the cluster.</p>
    pub fn get_broker_node_group_info(&self) -> &::std::option::Option<crate::types::BrokerNodeGroupInfo> {
        &self.broker_node_group_info
    }
    /// <p>Includes all client authentication related information.</p>
    pub fn client_authentication(mut self, input: crate::types::ClientAuthentication) -> Self {
        self.client_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Includes all client authentication related information.</p>
    pub fn set_client_authentication(mut self, input: ::std::option::Option<crate::types::ClientAuthentication>) -> Self {
        self.client_authentication = input;
        self
    }
    /// <p>Includes all client authentication related information.</p>
    pub fn get_client_authentication(&self) -> &::std::option::Option<crate::types::ClientAuthentication> {
        &self.client_authentication
    }
    /// <p>The name of the cluster.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    pub fn configuration_info(mut self, input: crate::types::ConfigurationInfo) -> Self {
        self.configuration_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    pub fn set_configuration_info(mut self, input: ::std::option::Option<crate::types::ConfigurationInfo>) -> Self {
        self.configuration_info = input;
        self
    }
    /// <p>Represents the configuration that you want MSK to use for the brokers in a cluster.</p>
    pub fn get_configuration_info(&self) -> &::std::option::Option<crate::types::ConfigurationInfo> {
        &self.configuration_info
    }
    /// <p>Includes all encryption-related information.</p>
    pub fn encryption_info(mut self, input: crate::types::EncryptionInfo) -> Self {
        self.encryption_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Includes all encryption-related information.</p>
    pub fn set_encryption_info(mut self, input: ::std::option::Option<crate::types::EncryptionInfo>) -> Self {
        self.encryption_info = input;
        self
    }
    /// <p>Includes all encryption-related information.</p>
    pub fn get_encryption_info(&self) -> &::std::option::Option<crate::types::EncryptionInfo> {
        &self.encryption_info
    }
    /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    pub fn enhanced_monitoring(mut self, input: crate::types::EnhancedMonitoring) -> Self {
        self.enhanced_monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    pub fn set_enhanced_monitoring(mut self, input: ::std::option::Option<crate::types::EnhancedMonitoring>) -> Self {
        self.enhanced_monitoring = input;
        self
    }
    /// <p>Specifies the level of monitoring for the MSK cluster. The possible values are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.</p>
    pub fn get_enhanced_monitoring(&self) -> &::std::option::Option<crate::types::EnhancedMonitoring> {
        &self.enhanced_monitoring
    }
    /// <p>The settings for open monitoring.</p>
    pub fn open_monitoring(mut self, input: crate::types::OpenMonitoringInfo) -> Self {
        self.open_monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn set_open_monitoring(mut self, input: ::std::option::Option<crate::types::OpenMonitoringInfo>) -> Self {
        self.open_monitoring = input;
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn get_open_monitoring(&self) -> &::std::option::Option<crate::types::OpenMonitoringInfo> {
        &self.open_monitoring
    }
    /// <p>The version of Apache Kafka.</p>
    /// This field is required.
    pub fn kafka_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kafka_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of Apache Kafka.</p>
    pub fn set_kafka_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kafka_version = input;
        self
    }
    /// <p>The version of Apache Kafka.</p>
    pub fn get_kafka_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.kafka_version
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_info(mut self, input: crate::types::LoggingInfo) -> Self {
        self.logging_info = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_logging_info(mut self, input: ::std::option::Option<crate::types::LoggingInfo>) -> Self {
        self.logging_info = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_logging_info(&self) -> &::std::option::Option<crate::types::LoggingInfo> {
        &self.logging_info
    }
    /// <p>The number of broker nodes in the cluster.</p>
    /// This field is required.
    pub fn number_of_broker_nodes(mut self, input: i32) -> Self {
        self.number_of_broker_nodes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of broker nodes in the cluster.</p>
    pub fn set_number_of_broker_nodes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_broker_nodes = input;
        self
    }
    /// <p>The number of broker nodes in the cluster.</p>
    pub fn get_number_of_broker_nodes(&self) -> &::std::option::Option<i32> {
        &self.number_of_broker_nodes
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Create tags when creating the cluster.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Create tags when creating the cluster.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Create tags when creating the cluster.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>This controls storage mode for supported storage tiers.</p>
    pub fn storage_mode(mut self, input: crate::types::StorageMode) -> Self {
        self.storage_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>This controls storage mode for supported storage tiers.</p>
    pub fn set_storage_mode(mut self, input: ::std::option::Option<crate::types::StorageMode>) -> Self {
        self.storage_mode = input;
        self
    }
    /// <p>This controls storage mode for supported storage tiers.</p>
    pub fn get_storage_mode(&self) -> &::std::option::Option<crate::types::StorageMode> {
        &self.storage_mode
    }
    /// Consumes the builder and constructs a [`CreateClusterInput`](crate::operation::create_cluster::CreateClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_cluster::CreateClusterInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_cluster::CreateClusterInput {
            broker_node_group_info: self.broker_node_group_info,
            client_authentication: self.client_authentication,
            cluster_name: self.cluster_name,
            configuration_info: self.configuration_info,
            encryption_info: self.encryption_info,
            enhanced_monitoring: self.enhanced_monitoring,
            open_monitoring: self.open_monitoring,
            kafka_version: self.kafka_version,
            logging_info: self.logging_info,
            number_of_broker_nodes: self.number_of_broker_nodes,
            tags: self.tags,
            storage_mode: self.storage_mode,
        })
    }
}
