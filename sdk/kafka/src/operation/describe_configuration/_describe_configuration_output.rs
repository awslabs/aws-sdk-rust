// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The time when the configuration was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The description of the configuration.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    #[doc(hidden)]
    pub kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Latest revision of the configuration.</p>
    #[doc(hidden)]
    pub latest_revision: std::option::Option<crate::types::ConfigurationRevision>,
    /// <p>The name of the configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ConfigurationState>,
    _request_id: Option<String>,
}
impl DescribeConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The description of the configuration.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    pub fn kafka_versions(&self) -> std::option::Option<&[std::string::String]> {
        self.kafka_versions.as_deref()
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn latest_revision(&self) -> std::option::Option<&crate::types::ConfigurationRevision> {
        self.latest_revision.as_ref()
    }
    /// <p>The name of the configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn state(&self) -> std::option::Option<&crate::types::ConfigurationState> {
        self.state.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeConfigurationOutput`](crate::operation::describe_configuration::DescribeConfigurationOutput).
    pub fn builder(
    ) -> crate::operation::describe_configuration::builders::DescribeConfigurationOutputBuilder
    {
        crate::operation::describe_configuration::builders::DescribeConfigurationOutputBuilder::default()
    }
}

/// A builder for [`DescribeConfigurationOutput`](crate::operation::describe_configuration::DescribeConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeConfigurationOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) kafka_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) latest_revision: std::option::Option<crate::types::ConfigurationRevision>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ConfigurationState>,
    _request_id: Option<String>,
}
impl DescribeConfigurationOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the configuration.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The time when the configuration was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time when the configuration was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the configuration.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `kafka_versions`.
    ///
    /// To override the contents of this collection use [`set_kafka_versions`](Self::set_kafka_versions).
    ///
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    pub fn kafka_versions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.kafka_versions.unwrap_or_default();
        v.push(input.into());
        self.kafka_versions = Some(v);
        self
    }
    /// <p>The versions of Apache Kafka with which you can use this MSK configuration.</p>
    pub fn set_kafka_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.kafka_versions = input;
        self
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn latest_revision(mut self, input: crate::types::ConfigurationRevision) -> Self {
        self.latest_revision = Some(input);
        self
    }
    /// <p>Latest revision of the configuration.</p>
    pub fn set_latest_revision(
        mut self,
        input: std::option::Option<crate::types::ConfigurationRevision>,
    ) -> Self {
        self.latest_revision = input;
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the configuration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn state(mut self, input: crate::types::ConfigurationState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the configuration. The possible states are ACTIVE, DELETING, and DELETE_FAILED. </p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::ConfigurationState>,
    ) -> Self {
        self.state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeConfigurationOutput`](crate::operation::describe_configuration::DescribeConfigurationOutput).
    pub fn build(self) -> crate::operation::describe_configuration::DescribeConfigurationOutput {
        crate::operation::describe_configuration::DescribeConfigurationOutput {
            arn: self.arn,
            creation_time: self.creation_time,
            description: self.description,
            kafka_versions: self.kafka_versions,
            latest_revision: self.latest_revision,
            name: self.name,
            state: self.state,
            _request_id: self._request_id,
        }
    }
}
