// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBrokerStorageInput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    #[doc(hidden)]
    pub current_version: std::option::Option<std::string::String>,
    /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
    #[doc(hidden)]
    pub target_broker_ebs_volume_info:
        std::option::Option<std::vec::Vec<crate::types::BrokerEbsVolumeInfo>>,
}
impl UpdateBrokerStorageInput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    pub fn current_version(&self) -> std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
    pub fn target_broker_ebs_volume_info(
        &self,
    ) -> std::option::Option<&[crate::types::BrokerEbsVolumeInfo]> {
        self.target_broker_ebs_volume_info.as_deref()
    }
}
impl UpdateBrokerStorageInput {
    /// Creates a new builder-style object to manufacture [`UpdateBrokerStorageInput`](crate::operation::update_broker_storage::UpdateBrokerStorageInput).
    pub fn builder(
    ) -> crate::operation::update_broker_storage::builders::UpdateBrokerStorageInputBuilder {
        crate::operation::update_broker_storage::builders::UpdateBrokerStorageInputBuilder::default(
        )
    }
}

/// A builder for [`UpdateBrokerStorageInput`](crate::operation::update_broker_storage::UpdateBrokerStorageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBrokerStorageInputBuilder {
    pub(crate) cluster_arn: std::option::Option<std::string::String>,
    pub(crate) current_version: std::option::Option<std::string::String>,
    pub(crate) target_broker_ebs_volume_info:
        std::option::Option<std::vec::Vec<crate::types::BrokerEbsVolumeInfo>>,
}
impl UpdateBrokerStorageInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_version = Some(input.into());
        self
    }
    /// <p>The version of cluster to update from. A successful operation will then generate a new version.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// Appends an item to `target_broker_ebs_volume_info`.
    ///
    /// To override the contents of this collection use [`set_target_broker_ebs_volume_info`](Self::set_target_broker_ebs_volume_info).
    ///
    /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
    pub fn target_broker_ebs_volume_info(
        mut self,
        input: crate::types::BrokerEbsVolumeInfo,
    ) -> Self {
        let mut v = self.target_broker_ebs_volume_info.unwrap_or_default();
        v.push(input);
        self.target_broker_ebs_volume_info = Some(v);
        self
    }
    /// <p>Describes the target volume size and the ID of the broker to apply the update to.</p>
    pub fn set_target_broker_ebs_volume_info(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BrokerEbsVolumeInfo>>,
    ) -> Self {
        self.target_broker_ebs_volume_info = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBrokerStorageInput`](crate::operation::update_broker_storage::UpdateBrokerStorageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_broker_storage::UpdateBrokerStorageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_broker_storage::UpdateBrokerStorageInput {
                cluster_arn: self.cluster_arn,
                current_version: self.current_version,
                target_broker_ebs_volume_info: self.target_broker_ebs_volume_info,
            },
        )
    }
}
