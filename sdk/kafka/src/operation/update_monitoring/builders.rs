// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_monitoring::_update_monitoring_output::UpdateMonitoringOutputBuilder;

pub use crate::operation::update_monitoring::_update_monitoring_input::UpdateMonitoringInputBuilder;

/// Fluent builder constructing a request to `UpdateMonitoring`.
///
/// <p>Updates the monitoring settings for the cluster. You can use this operation to specify which Apache Kafka metrics you want Amazon MSK to send to Amazon CloudWatch. You can also specify settings for open monitoring with Prometheus.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateMonitoringFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_monitoring::builders::UpdateMonitoringInputBuilder,
}
impl UpdateMonitoringFluentBuilder {
    /// Creates a new `UpdateMonitoring`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_monitoring::UpdateMonitoring,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring::UpdateMonitoringError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_monitoring::UpdateMonitoringOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_monitoring::UpdateMonitoringError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.cluster_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_arn(input);
        self
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.current_version(input.into());
        self
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_current_version(input);
        self
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn enhanced_monitoring(mut self, input: crate::types::EnhancedMonitoring) -> Self {
        self.inner = self.inner.enhanced_monitoring(input);
        self
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn set_enhanced_monitoring(
        mut self,
        input: std::option::Option<crate::types::EnhancedMonitoring>,
    ) -> Self {
        self.inner = self.inner.set_enhanced_monitoring(input);
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn open_monitoring(mut self, input: crate::types::OpenMonitoringInfo) -> Self {
        self.inner = self.inner.open_monitoring(input);
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn set_open_monitoring(
        mut self,
        input: std::option::Option<crate::types::OpenMonitoringInfo>,
    ) -> Self {
        self.inner = self.inner.set_open_monitoring(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_info(mut self, input: crate::types::LoggingInfo) -> Self {
        self.inner = self.inner.logging_info(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_logging_info(
        mut self,
        input: std::option::Option<crate::types::LoggingInfo>,
    ) -> Self {
        self.inner = self.inner.set_logging_info(input);
        self
    }
}
