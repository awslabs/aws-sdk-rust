// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Request body for UpdateMonitoring.
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateMonitoringInput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub current_version: ::std::option::Option<::std::string::String>,
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub enhanced_monitoring: ::std::option::Option<crate::types::EnhancedMonitoring>,
    /// <p>The settings for open monitoring.</p>
    pub open_monitoring: ::std::option::Option<crate::types::OpenMonitoringInfo>,
    #[allow(missing_docs)] // documentation missing in model
    pub logging_info: ::std::option::Option<crate::types::LoggingInfo>,
}
impl UpdateMonitoringInput {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn cluster_arn(&self) -> ::std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub fn current_version(&self) -> ::std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn enhanced_monitoring(&self) -> ::std::option::Option<&crate::types::EnhancedMonitoring> {
        self.enhanced_monitoring.as_ref()
    }
    /// <p>The settings for open monitoring.</p>
    pub fn open_monitoring(&self) -> ::std::option::Option<&crate::types::OpenMonitoringInfo> {
        self.open_monitoring.as_ref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_info(&self) -> ::std::option::Option<&crate::types::LoggingInfo> {
        self.logging_info.as_ref()
    }
}
impl UpdateMonitoringInput {
    /// Creates a new builder-style object to manufacture [`UpdateMonitoringInput`](crate::operation::update_monitoring::UpdateMonitoringInput).
    pub fn builder() -> crate::operation::update_monitoring::builders::UpdateMonitoringInputBuilder {
        crate::operation::update_monitoring::builders::UpdateMonitoringInputBuilder::default()
    }
}

/// A builder for [`UpdateMonitoringInput`](crate::operation::update_monitoring::UpdateMonitoringInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateMonitoringInputBuilder {
    pub(crate) cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) current_version: ::std::option::Option<::std::string::String>,
    pub(crate) enhanced_monitoring: ::std::option::Option<crate::types::EnhancedMonitoring>,
    pub(crate) open_monitoring: ::std::option::Option<crate::types::OpenMonitoringInfo>,
    pub(crate) logging_info: ::std::option::Option<crate::types::LoggingInfo>,
}
impl UpdateMonitoringInputBuilder {
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    /// This field is required.
    pub fn cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn set_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) that uniquely identifies the cluster.</p>
    pub fn get_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_arn
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    /// This field is required.
    pub fn current_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub fn set_current_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The version of the MSK cluster to update. Cluster versions aren't simple numbers. You can describe an MSK cluster to find its version. When this update operation is successful, it generates a new cluster version.</p>
    pub fn get_current_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_version
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn enhanced_monitoring(mut self, input: crate::types::EnhancedMonitoring) -> Self {
        self.enhanced_monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn set_enhanced_monitoring(mut self, input: ::std::option::Option<crate::types::EnhancedMonitoring>) -> Self {
        self.enhanced_monitoring = input;
        self
    }
    /// <p>Specifies which Apache Kafka metrics Amazon MSK gathers and sends to Amazon CloudWatch for this cluster.</p>
    pub fn get_enhanced_monitoring(&self) -> &::std::option::Option<crate::types::EnhancedMonitoring> {
        &self.enhanced_monitoring
    }
    /// <p>The settings for open monitoring.</p>
    pub fn open_monitoring(mut self, input: crate::types::OpenMonitoringInfo) -> Self {
        self.open_monitoring = ::std::option::Option::Some(input);
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn set_open_monitoring(mut self, input: ::std::option::Option<crate::types::OpenMonitoringInfo>) -> Self {
        self.open_monitoring = input;
        self
    }
    /// <p>The settings for open monitoring.</p>
    pub fn get_open_monitoring(&self) -> &::std::option::Option<crate::types::OpenMonitoringInfo> {
        &self.open_monitoring
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn logging_info(mut self, input: crate::types::LoggingInfo) -> Self {
        self.logging_info = ::std::option::Option::Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_logging_info(mut self, input: ::std::option::Option<crate::types::LoggingInfo>) -> Self {
        self.logging_info = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_logging_info(&self) -> &::std::option::Option<crate::types::LoggingInfo> {
        &self.logging_info
    }
    /// Consumes the builder and constructs a [`UpdateMonitoringInput`](crate::operation::update_monitoring::UpdateMonitoringInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_monitoring::UpdateMonitoringInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_monitoring::UpdateMonitoringInput {
            cluster_arn: self.cluster_arn,
            current_version: self.current_version,
            enhanced_monitoring: self.enhanced_monitoring,
            open_monitoring: self.open_monitoring,
            logging_info: self.logging_info,
        })
    }
}
