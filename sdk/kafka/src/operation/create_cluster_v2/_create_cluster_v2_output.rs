// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateClusterV2Output {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    #[doc(hidden)]
    pub cluster_arn: std::option::Option<std::string::String>,
    /// <p>The name of the MSK cluster.</p>
    #[doc(hidden)]
    pub cluster_name: std::option::Option<std::string::String>,
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::ClusterState>,
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    #[doc(hidden)]
    pub cluster_type: std::option::Option<crate::types::ClusterType>,
    _request_id: Option<String>,
}
impl CreateClusterV2Output {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(&self) -> std::option::Option<&str> {
        self.cluster_arn.as_deref()
    }
    /// <p>The name of the MSK cluster.</p>
    pub fn cluster_name(&self) -> std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::ClusterState> {
        self.state.as_ref()
    }
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    pub fn cluster_type(&self) -> std::option::Option<&crate::types::ClusterType> {
        self.cluster_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateClusterV2Output {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateClusterV2Output {
    /// Creates a new builder-style object to manufacture [`CreateClusterV2Output`](crate::operation::create_cluster_v2::CreateClusterV2Output).
    pub fn builder() -> crate::operation::create_cluster_v2::builders::CreateClusterV2OutputBuilder
    {
        crate::operation::create_cluster_v2::builders::CreateClusterV2OutputBuilder::default()
    }
}

/// A builder for [`CreateClusterV2Output`](crate::operation::create_cluster_v2::CreateClusterV2Output).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateClusterV2OutputBuilder {
    pub(crate) cluster_arn: std::option::Option<std::string::String>,
    pub(crate) cluster_name: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::ClusterState>,
    pub(crate) cluster_type: std::option::Option<crate::types::ClusterType>,
    _request_id: Option<String>,
}
impl CreateClusterV2OutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the cluster.</p>
    pub fn set_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_arn = input;
        self
    }
    /// <p>The name of the MSK cluster.</p>
    pub fn cluster_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.cluster_name = Some(input.into());
        self
    }
    /// <p>The name of the MSK cluster.</p>
    pub fn set_cluster_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn state(mut self, input: crate::types::ClusterState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the cluster. The possible states are ACTIVE, CREATING, DELETING, FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::ClusterState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    pub fn cluster_type(mut self, input: crate::types::ClusterType) -> Self {
        self.cluster_type = Some(input);
        self
    }
    /// <p>The type of the cluster. The possible states are PROVISIONED or SERVERLESS.</p>
    pub fn set_cluster_type(
        mut self,
        input: std::option::Option<crate::types::ClusterType>,
    ) -> Self {
        self.cluster_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateClusterV2Output`](crate::operation::create_cluster_v2::CreateClusterV2Output).
    pub fn build(self) -> crate::operation::create_cluster_v2::CreateClusterV2Output {
        crate::operation::create_cluster_v2::CreateClusterV2Output {
            cluster_arn: self.cluster_arn,
            cluster_name: self.cluster_name,
            state: self.state,
            cluster_type: self.cluster_type,
            _request_id: self._request_id,
        }
    }
}
