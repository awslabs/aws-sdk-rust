// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Timestream was unable to process this request because it contains resource that already exists.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p> Timestream was unable to fully process this request because of an internal server error.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The requested endpoint was not valid.</p>
    InvalidEndpointException(crate::types::error::InvalidEndpointException),
    /// <p> WriteRecords would throw this exception in the following cases: </p>
    /// <ul>
    /// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
    /// <ul>
    /// <li> <p>Measure values are different</p> </li>
    /// <li> <p>Version is not present in the request <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
    /// </ul> <p> In this case, if Timestream rejects data, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current recordâ€™s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
    /// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> </li>
    /// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
    /// </ul>
    /// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Quotas</a> in the Amazon Timestream Developer Guide. </p>
    RejectedRecordsException(crate::types::error::RejectedRecordsException),
    /// <p>The operation tried to access a nonexistent resource. The resource might not be specified correctly, or its status might not be ACTIVE.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> The instance quota of resource exceeded for this account.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p> Too many requests were made by a user and they exceeded the service quotas. The request was throttled.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> An invalid or malformed request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidEndpointException(inner) => inner.fmt(f),
            Error::RejectedRecordsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_load_task::CreateBatchLoadTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_batch_load_task::CreateBatchLoadTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_batch_load_task::CreateBatchLoadTaskError> for Error {
    fn from(err: crate::operation::create_batch_load_task::CreateBatchLoadTaskError) -> Self {
        match err {
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_database::CreateDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_database::CreateDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_database::CreateDatabaseError> for Error {
    fn from(err: crate::operation::create_database::CreateDatabaseError) -> Self {
        match err {
            crate::operation::create_database::CreateDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_database::CreateDatabaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_database::CreateDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_database::CreateDatabaseError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::create_database::CreateDatabaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_database::CreateDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_database::CreateDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_database::CreateDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table::CreateTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_table::CreateTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_table::CreateTableError> for Error {
    fn from(err: crate::operation::create_table::CreateTableError) -> Self {
        match err {
            crate::operation::create_table::CreateTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_table::CreateTableError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_table::CreateTableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_table::CreateTableError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::create_table::CreateTableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_table::CreateTableError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_table::CreateTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_table::CreateTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_table::CreateTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_database::DeleteDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_database::DeleteDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_database::DeleteDatabaseError> for Error {
    fn from(err: crate::operation::delete_database::DeleteDatabaseError) -> Self {
        match err {
            crate::operation::delete_database::DeleteDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_database::DeleteDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_database::DeleteDatabaseError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::delete_database::DeleteDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_database::DeleteDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_database::DeleteDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_database::DeleteDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table::DeleteTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_table::DeleteTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_table::DeleteTableError> for Error {
    fn from(err: crate::operation::delete_table::DeleteTableError) -> Self {
        match err {
            crate::operation::delete_table::DeleteTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_table::DeleteTableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_table::DeleteTableError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::delete_table::DeleteTableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_table::DeleteTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_table::DeleteTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_table::DeleteTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError> for Error {
    fn from(err: crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError) -> Self {
        match err {
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_batch_load_task::DescribeBatchLoadTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_database::DescribeDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_database::DescribeDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_database::DescribeDatabaseError> for Error {
    fn from(err: crate::operation::describe_database::DescribeDatabaseError) -> Self {
        match err {
            crate::operation::describe_database::DescribeDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_database::DescribeDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_database::DescribeDatabaseError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::describe_database::DescribeDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_database::DescribeDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_database::DescribeDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_database::DescribeDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_endpoints::DescribeEndpointsError> for Error {
    fn from(err: crate::operation::describe_endpoints::DescribeEndpointsError) -> Self {
        match err {
            crate::operation::describe_endpoints::DescribeEndpointsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_table::DescribeTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_table::DescribeTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_table::DescribeTableError> for Error {
    fn from(err: crate::operation::describe_table::DescribeTableError) -> Self {
        match err {
            crate::operation::describe_table::DescribeTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_table::DescribeTableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_table::DescribeTableError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::describe_table::DescribeTableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_table::DescribeTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_table::DescribeTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_table::DescribeTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_batch_load_tasks::ListBatchLoadTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_batch_load_tasks::ListBatchLoadTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_batch_load_tasks::ListBatchLoadTasksError> for Error {
    fn from(err: crate::operation::list_batch_load_tasks::ListBatchLoadTasksError) -> Self {
        match err {
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_batch_load_tasks::ListBatchLoadTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_databases::ListDatabasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_databases::ListDatabasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_databases::ListDatabasesError> for Error {
    fn from(err: crate::operation::list_databases::ListDatabasesError) -> Self {
        match err {
            crate::operation::list_databases::ListDatabasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_databases::ListDatabasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_databases::ListDatabasesError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::list_databases::ListDatabasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_databases::ListDatabasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_databases::ListDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tables::ListTablesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tables::ListTablesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tables::ListTablesError> for Error {
    fn from(err: crate::operation::list_tables::ListTablesError) -> Self {
        match err {
            crate::operation::list_tables::ListTablesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tables::ListTablesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tables::ListTablesError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::list_tables::ListTablesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tables::ListTablesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tables::ListTablesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tables::ListTablesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError> for Error {
    fn from(err: crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError) -> Self {
        match err {
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::resume_batch_load_task::ResumeBatchLoadTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_database::UpdateDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_database::UpdateDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_database::UpdateDatabaseError> for Error {
    fn from(err: crate::operation::update_database::UpdateDatabaseError) -> Self {
        match err {
            crate::operation::update_database::UpdateDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_database::UpdateDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_database::UpdateDatabaseError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::update_database::UpdateDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_database::UpdateDatabaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_database::UpdateDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_database::UpdateDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_database::UpdateDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_table::UpdateTableError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_table::UpdateTableError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_table::UpdateTableError> for Error {
    fn from(err: crate::operation::update_table::UpdateTableError) -> Self {
        match err {
            crate::operation::update_table::UpdateTableError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_table::UpdateTableError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_table::UpdateTableError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::update_table::UpdateTableError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_table::UpdateTableError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_table::UpdateTableError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_table::UpdateTableError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::write_records::WriteRecordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::write_records::WriteRecordsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::write_records::WriteRecordsError> for Error {
    fn from(err: crate::operation::write_records::WriteRecordsError) -> Self {
        match err {
            crate::operation::write_records::WriteRecordsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::write_records::WriteRecordsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::write_records::WriteRecordsError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::write_records::WriteRecordsError::RejectedRecordsException(inner) => Error::RejectedRecordsException(inner),
            crate::operation::write_records::WriteRecordsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::write_records::WriteRecordsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::write_records::WriteRecordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::write_records::WriteRecordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidEndpointException(inner) => inner.source(),
            Error::RejectedRecordsException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidEndpointException(e) => e.request_id(),
            Self::RejectedRecordsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
