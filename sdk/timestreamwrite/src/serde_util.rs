// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_batch_load_task_output_correct_errors(
    mut builder: crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskOutputBuilder,
) -> crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskOutputBuilder {
    if builder.task_id.is_none() {
        builder.task_id = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_batch_load_task_output_correct_errors(
    mut builder: crate::operation::describe_batch_load_task::builders::DescribeBatchLoadTaskOutputBuilder,
) -> crate::operation::describe_batch_load_task::builders::DescribeBatchLoadTaskOutputBuilder {
    if builder.batch_load_task_description.is_none() {
        builder.batch_load_task_description = {
            let builder = crate::types::builders::BatchLoadTaskDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_endpoints_output_correct_errors(
    mut builder: crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder,
) -> crate::operation::describe_endpoints::builders::DescribeEndpointsOutputBuilder {
    if builder.endpoints.is_none() {
        builder.endpoints = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceConfigurationBuilder,
) -> crate::types::builders::DataSourceConfigurationBuilder {
    if builder.data_source_s3_configuration.is_none() {
        builder.data_source_s3_configuration = {
            let builder = crate::types::builders::DataSourceS3ConfigurationBuilder::default();
            crate::serde_util::data_source_s3_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.data_format.is_none() {
        builder.data_format = "no value was set".parse::<crate::types::BatchLoadDataFormat>().ok()
    }
    builder
}

pub(crate) fn endpoint_correct_errors(mut builder: crate::types::builders::EndpointBuilder) -> crate::types::builders::EndpointBuilder {
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    if builder.cache_period_in_minutes.is_none() {
        builder.cache_period_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn magnetic_store_write_properties_correct_errors(
    mut builder: crate::types::builders::MagneticStoreWritePropertiesBuilder,
) -> crate::types::builders::MagneticStoreWritePropertiesBuilder {
    if builder.enable_magnetic_store_writes.is_none() {
        builder.enable_magnetic_store_writes = Some(Default::default())
    }
    builder
}

pub(crate) fn retention_properties_correct_errors(
    mut builder: crate::types::builders::RetentionPropertiesBuilder,
) -> crate::types::builders::RetentionPropertiesBuilder {
    if builder.memory_store_retention_period_in_hours.is_none() {
        builder.memory_store_retention_period_in_hours = Some(Default::default())
    }
    if builder.magnetic_store_retention_period_in_days.is_none() {
        builder.magnetic_store_retention_period_in_days = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn data_model_correct_errors(mut builder: crate::types::builders::DataModelBuilder) -> crate::types::builders::DataModelBuilder {
    if builder.dimension_mappings.is_none() {
        builder.dimension_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_s3_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceS3ConfigurationBuilder,
) -> crate::types::builders::DataSourceS3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn report_s3_configuration_correct_errors(
    mut builder: crate::types::builders::ReportS3ConfigurationBuilder,
) -> crate::types::builders::ReportS3ConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn multi_measure_mappings_correct_errors(
    mut builder: crate::types::builders::MultiMeasureMappingsBuilder,
) -> crate::types::builders::MultiMeasureMappingsBuilder {
    if builder.multi_measure_attribute_mappings.is_none() {
        builder.multi_measure_attribute_mappings = Some(Default::default())
    }
    builder
}

pub(crate) fn partition_key_correct_errors(mut builder: crate::types::builders::PartitionKeyBuilder) -> crate::types::builders::PartitionKeyBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::PartitionKeyType>().ok()
    }
    builder
}

pub(crate) fn mixed_measure_mapping_correct_errors(
    mut builder: crate::types::builders::MixedMeasureMappingBuilder,
) -> crate::types::builders::MixedMeasureMappingBuilder {
    if builder.measure_value_type.is_none() {
        builder.measure_value_type = "no value was set".parse::<crate::types::MeasureValueType>().ok()
    }
    builder
}

pub(crate) fn multi_measure_attribute_mapping_correct_errors(
    mut builder: crate::types::builders::MultiMeasureAttributeMappingBuilder,
) -> crate::types::builders::MultiMeasureAttributeMappingBuilder {
    if builder.source_column.is_none() {
        builder.source_column = Some(Default::default())
    }
    builder
}
