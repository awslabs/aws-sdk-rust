// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> WriteRecords would throw this exception in the following cases: </p>
/// <ul>
/// <li> <p>Records with duplicate data where there are multiple records with the same dimensions, timestamps, and measure names but: </p>
/// <ul>
/// <li> <p>Measure values are different</p> </li>
/// <li> <p>Version is not present in the request <i>or</i> the value of version in the new record is equal to or lower than the existing value</p> </li>
/// </ul> <p> In this case, if Timestream rejects data, the <code>ExistingVersion</code> field in the <code>RejectedRecords</code> response will indicate the current recordâ€™s version. To force an update, you can resend the request with a version for the record set to a value greater than the <code>ExistingVersion</code>.</p> </li>
/// <li> <p> Records with timestamps that lie outside the retention duration of the memory store. </p> </li>
/// <li> <p> Records with dimensions or measures that exceed the Timestream defined limits. </p> </li>
/// </ul>
/// <p> For more information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Quotas</a> in the Amazon Timestream Developer Guide. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RejectedRecordsException {
    #[allow(missing_docs)] // documentation missing in model
    pub message: ::std::option::Option<::std::string::String>,
    /// <p> </p>
    pub rejected_records: ::std::option::Option<::std::vec::Vec<crate::types::RejectedRecord>>,
    pub(crate) meta: ::aws_smithy_types::error::ErrorMetadata,
}
impl RejectedRecordsException {
    /// <p> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.rejected_records.is_none()`.
    pub fn rejected_records(&self) -> &[crate::types::RejectedRecord] {
        self.rejected_records.as_deref().unwrap_or_default()
    }
}
impl RejectedRecordsException {
    /// Returns the error message.
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ::std::fmt::Display for RejectedRecordsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        ::std::write!(f, "RejectedRecordsException")?;
        if let ::std::option::Option::Some(inner_1) = &self.message {
            {
                ::std::write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl ::std::error::Error for RejectedRecordsException {}
impl ::aws_http::request_id::RequestId for crate::types::error::RejectedRecordsException {
    fn request_id(&self) -> Option<&str> {
        use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for RejectedRecordsException {
    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl RejectedRecordsException {
    /// Creates a new builder-style object to manufacture [`RejectedRecordsException`](crate::types::error::RejectedRecordsException).
    pub fn builder() -> crate::types::error::builders::RejectedRecordsExceptionBuilder {
        crate::types::error::builders::RejectedRecordsExceptionBuilder::default()
    }
}

/// A builder for [`RejectedRecordsException`](crate::types::error::RejectedRecordsException).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RejectedRecordsExceptionBuilder {
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) rejected_records: ::std::option::Option<::std::vec::Vec<crate::types::RejectedRecord>>,
    meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
}
impl RejectedRecordsExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Appends an item to `rejected_records`.
    ///
    /// To override the contents of this collection use [`set_rejected_records`](Self::set_rejected_records).
    ///
    /// <p> </p>
    pub fn rejected_records(mut self, input: crate::types::RejectedRecord) -> Self {
        let mut v = self.rejected_records.unwrap_or_default();
        v.push(input);
        self.rejected_records = ::std::option::Option::Some(v);
        self
    }
    /// <p> </p>
    pub fn set_rejected_records(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RejectedRecord>>) -> Self {
        self.rejected_records = input;
        self
    }
    /// <p> </p>
    pub fn get_rejected_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RejectedRecord>> {
        &self.rejected_records
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: ::aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(&mut self, meta: std::option::Option<::aws_smithy_types::error::ErrorMetadata>) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`RejectedRecordsException`](crate::types::error::RejectedRecordsException).
    pub fn build(self) -> crate::types::error::RejectedRecordsException {
        crate::types::error::RejectedRecordsException {
            message: self.message,
            rejected_records: self.rejected_records,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
