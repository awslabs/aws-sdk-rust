// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MixedMeasureMapping {
    /// <p></p>
    pub measure_name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub source_column: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub target_measure_name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub measure_value_type: crate::types::MeasureValueType,
    /// <p></p>
    pub multi_measure_attribute_mappings: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
}
impl MixedMeasureMapping {
    /// <p></p>
    pub fn measure_name(&self) -> ::std::option::Option<&str> {
        self.measure_name.as_deref()
    }
    /// <p></p>
    pub fn source_column(&self) -> ::std::option::Option<&str> {
        self.source_column.as_deref()
    }
    /// <p></p>
    pub fn target_measure_name(&self) -> ::std::option::Option<&str> {
        self.target_measure_name.as_deref()
    }
    /// <p></p>
    pub fn measure_value_type(&self) -> &crate::types::MeasureValueType {
        &self.measure_value_type
    }
    /// <p></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.multi_measure_attribute_mappings.is_none()`.
    pub fn multi_measure_attribute_mappings(&self) -> &[crate::types::MultiMeasureAttributeMapping] {
        self.multi_measure_attribute_mappings.as_deref().unwrap_or_default()
    }
}
impl MixedMeasureMapping {
    /// Creates a new builder-style object to manufacture [`MixedMeasureMapping`](crate::types::MixedMeasureMapping).
    pub fn builder() -> crate::types::builders::MixedMeasureMappingBuilder {
        crate::types::builders::MixedMeasureMappingBuilder::default()
    }
}

/// A builder for [`MixedMeasureMapping`](crate::types::MixedMeasureMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MixedMeasureMappingBuilder {
    pub(crate) measure_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_column: ::std::option::Option<::std::string::String>,
    pub(crate) target_measure_name: ::std::option::Option<::std::string::String>,
    pub(crate) measure_value_type: ::std::option::Option<crate::types::MeasureValueType>,
    pub(crate) multi_measure_attribute_mappings: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
}
impl MixedMeasureMappingBuilder {
    /// <p></p>
    pub fn measure_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.measure_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_measure_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.measure_name = input;
        self
    }
    /// <p></p>
    pub fn get_measure_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.measure_name
    }
    /// <p></p>
    pub fn source_column(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_column = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_source_column(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_column = input;
        self
    }
    /// <p></p>
    pub fn get_source_column(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_column
    }
    /// <p></p>
    pub fn target_measure_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_measure_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_target_measure_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_measure_name = input;
        self
    }
    /// <p></p>
    pub fn get_target_measure_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_measure_name
    }
    /// <p></p>
    /// This field is required.
    pub fn measure_value_type(mut self, input: crate::types::MeasureValueType) -> Self {
        self.measure_value_type = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_measure_value_type(mut self, input: ::std::option::Option<crate::types::MeasureValueType>) -> Self {
        self.measure_value_type = input;
        self
    }
    /// <p></p>
    pub fn get_measure_value_type(&self) -> &::std::option::Option<crate::types::MeasureValueType> {
        &self.measure_value_type
    }
    /// Appends an item to `multi_measure_attribute_mappings`.
    ///
    /// To override the contents of this collection use [`set_multi_measure_attribute_mappings`](Self::set_multi_measure_attribute_mappings).
    ///
    /// <p></p>
    pub fn multi_measure_attribute_mappings(mut self, input: crate::types::MultiMeasureAttributeMapping) -> Self {
        let mut v = self.multi_measure_attribute_mappings.unwrap_or_default();
        v.push(input);
        self.multi_measure_attribute_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p></p>
    pub fn set_multi_measure_attribute_mappings(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>>,
    ) -> Self {
        self.multi_measure_attribute_mappings = input;
        self
    }
    /// <p></p>
    pub fn get_multi_measure_attribute_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MultiMeasureAttributeMapping>> {
        &self.multi_measure_attribute_mappings
    }
    /// Consumes the builder and constructs a [`MixedMeasureMapping`](crate::types::MixedMeasureMapping).
    /// This method will fail if any of the following fields are not set:
    /// - [`measure_value_type`](crate::types::builders::MixedMeasureMappingBuilder::measure_value_type)
    pub fn build(self) -> ::std::result::Result<crate::types::MixedMeasureMapping, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MixedMeasureMapping {
            measure_name: self.measure_name,
            source_column: self.source_column,
            target_measure_name: self.target_measure_name,
            measure_value_type: self.measure_value_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "measure_value_type",
                    "measure_value_type was not specified but it is required when building MixedMeasureMapping",
                )
            })?,
            multi_measure_attribute_mappings: self.multi_measure_attribute_mappings,
        })
    }
}
