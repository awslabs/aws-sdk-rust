// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Represents the data attribute of the time series. For example, the CPU utilization of an EC2 instance or the RPM of a wind turbine are measures. MeasureValue has both name and value. </p>
/// <p> MeasureValue is only allowed for type <code>MULTI</code>. Using <code>MULTI</code> type, you can pass multiple data attributes associated with the same time series in a single record </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MeasureValue {
    /// <p> The name of the MeasureValue. </p>
    /// <p> For constraints on MeasureValue names, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>
    pub name: ::std::string::String,
    /// <p> The value for the MeasureValue. For information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types">Data types</a>.</p>
    pub value: ::std::string::String,
    /// <p>Contains the data type of the MeasureValue for the time-series data point.</p>
    pub r#type: crate::types::MeasureValueType,
}
impl MeasureValue {
    /// <p> The name of the MeasureValue. </p>
    /// <p> For constraints on MeasureValue names, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p> The value for the MeasureValue. For information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types">Data types</a>.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>Contains the data type of the MeasureValue for the time-series data point.</p>
    pub fn r#type(&self) -> &crate::types::MeasureValueType {
        &self.r#type
    }
}
impl MeasureValue {
    /// Creates a new builder-style object to manufacture [`MeasureValue`](crate::types::MeasureValue).
    pub fn builder() -> crate::types::builders::MeasureValueBuilder {
        crate::types::builders::MeasureValueBuilder::default()
    }
}

/// A builder for [`MeasureValue`](crate::types::MeasureValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MeasureValueBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::MeasureValueType>,
}
impl MeasureValueBuilder {
    /// <p> The name of the MeasureValue. </p>
    /// <p> For constraints on MeasureValue names, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the MeasureValue. </p>
    /// <p> For constraints on MeasureValue names, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the MeasureValue. </p>
    /// <p> For constraints on MeasureValue names, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.naming"> Naming Constraints</a> in the Amazon Timestream Developer Guide.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The value for the MeasureValue. For information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types">Data types</a>.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The value for the MeasureValue. For information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types">Data types</a>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p> The value for the MeasureValue. For information, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/writes.html#writes.data-types">Data types</a>.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>Contains the data type of the MeasureValue for the time-series data point.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::MeasureValueType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the data type of the MeasureValue for the time-series data point.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::MeasureValueType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Contains the data type of the MeasureValue for the time-series data point.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::MeasureValueType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`MeasureValue`](crate::types::MeasureValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::MeasureValueBuilder::name)
    /// - [`value`](crate::types::builders::MeasureValueBuilder::value)
    /// - [`r#type`](crate::types::builders::MeasureValueBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::MeasureValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MeasureValue {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building MeasureValue",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building MeasureValue",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building MeasureValue",
                )
            })?,
        })
    }
}
