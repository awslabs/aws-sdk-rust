// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> An attribute used in partitioning data in a table. A dimension key partitions data using the values of the dimension specified by the dimension-name as partition key, while a measure key partitions data using measure names (values of the 'measure_name' column). </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PartitionKey {
    /// <p> The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). </p>
    pub r#type: crate::types::PartitionKeyType,
    /// <p> The name of the attribute used for a dimension key. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p> The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). </p>
    pub enforcement_in_record: ::std::option::Option<crate::types::PartitionKeyEnforcementLevel>,
}
impl PartitionKey {
    /// <p> The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). </p>
    pub fn r#type(&self) -> &crate::types::PartitionKeyType {
        &self.r#type
    }
    /// <p> The name of the attribute used for a dimension key. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). </p>
    pub fn enforcement_in_record(&self) -> ::std::option::Option<&crate::types::PartitionKeyEnforcementLevel> {
        self.enforcement_in_record.as_ref()
    }
}
impl PartitionKey {
    /// Creates a new builder-style object to manufacture [`PartitionKey`](crate::types::PartitionKey).
    pub fn builder() -> crate::types::builders::PartitionKeyBuilder {
        crate::types::builders::PartitionKeyBuilder::default()
    }
}

/// A builder for [`PartitionKey`](crate::types::PartitionKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PartitionKeyBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::PartitionKeyType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) enforcement_in_record: ::std::option::Option<crate::types::PartitionKeyEnforcementLevel>,
}
impl PartitionKeyBuilder {
    /// <p> The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). </p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::PartitionKeyType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). </p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::PartitionKeyType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p> The type of the partition key. Options are DIMENSION (dimension key) and MEASURE (measure key). </p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::PartitionKeyType> {
        &self.r#type
    }
    /// <p> The name of the attribute used for a dimension key. </p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the attribute used for a dimension key. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the attribute used for a dimension key. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). </p>
    pub fn enforcement_in_record(mut self, input: crate::types::PartitionKeyEnforcementLevel) -> Self {
        self.enforcement_in_record = ::std::option::Option::Some(input);
        self
    }
    /// <p> The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). </p>
    pub fn set_enforcement_in_record(mut self, input: ::std::option::Option<crate::types::PartitionKeyEnforcementLevel>) -> Self {
        self.enforcement_in_record = input;
        self
    }
    /// <p> The level of enforcement for the specification of a dimension key in ingested records. Options are REQUIRED (dimension key must be specified) and OPTIONAL (dimension key does not have to be specified). </p>
    pub fn get_enforcement_in_record(&self) -> &::std::option::Option<crate::types::PartitionKeyEnforcementLevel> {
        &self.enforcement_in_record
    }
    /// Consumes the builder and constructs a [`PartitionKey`](crate::types::PartitionKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::PartitionKeyBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::PartitionKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PartitionKey {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building PartitionKey",
                )
            })?,
            name: self.name,
            enforcement_in_record: self.enforcement_in_record,
        })
    }
}
