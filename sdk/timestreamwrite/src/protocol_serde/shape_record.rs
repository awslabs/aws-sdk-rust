// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_record(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Record,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.dimensions {
        let mut array_2 = object.key("Dimensions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_dimension::ser_dimension(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.measure_name {
        object.key("MeasureName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.measure_value {
        object.key("MeasureValue").string(var_6.as_str());
    }
    if let Some(var_7) = &input.measure_value_type {
        object.key("MeasureValueType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.time {
        object.key("Time").string(var_8.as_str());
    }
    if let Some(var_9) = &input.time_unit {
        object.key("TimeUnit").string(var_9.as_str());
    }
    if let Some(var_10) = &input.version {
        object.key("Version").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.measure_values {
        let mut array_12 = object.key("MeasureValues").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_measure_value::ser_measure_value(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
