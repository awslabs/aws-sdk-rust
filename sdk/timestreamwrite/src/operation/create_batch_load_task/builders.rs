// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_batch_load_task::_create_batch_load_task_output::CreateBatchLoadTaskOutputBuilder;

pub use crate::operation::create_batch_load_task::_create_batch_load_task_input::CreateBatchLoadTaskInputBuilder;

impl CreateBatchLoadTaskInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_batch_load_task::CreateBatchLoadTaskOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_batch_load_task();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateBatchLoadTask`.
///
/// <p>Creates a new Timestream batch load task. A batch load task processes data from a CSV source in an S3 location and writes to a Timestream table. A mapping from source to target is defined in a batch load task. Errors and events are written to a report at an S3 location. For the report, if the KMS key is not specified, the report will be encrypted with an S3 managed key when <code>SSE_S3</code> is the option. Otherwise an error is thrown. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#aws-managed-cmk">Amazon Web Services managed keys</a>. <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html">Service quotas apply</a>. For details, see <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/code-samples.create-batch-load.html">code sample</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateBatchLoadTaskFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_batch_load_task::CreateBatchLoadTaskOutput,
        crate::operation::create_batch_load_task::CreateBatchLoadTaskError,
    > for CreateBatchLoadTaskFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_batch_load_task::CreateBatchLoadTaskOutput,
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateBatchLoadTaskFluentBuilder {
    /// Creates a new `CreateBatchLoadTask`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateBatchLoadTask as a reference.
    pub fn as_input(&self) -> &crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_batch_load_task::CreateBatchLoadTaskOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_batch_load_task::CreateBatchLoadTaskError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_batch_load_task::CreateBatchLoadTask::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_batch_load_task::CreateBatchLoadTask::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_batch_load_task::CreateBatchLoadTaskOutput,
        crate::operation::create_batch_load_task::CreateBatchLoadTaskError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p></p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p></p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p></p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p></p>
    pub fn data_model_configuration(mut self, input: crate::types::DataModelConfiguration) -> Self {
        self.inner = self.inner.data_model_configuration(input);
        self
    }
    /// <p></p>
    pub fn set_data_model_configuration(mut self, input: ::std::option::Option<crate::types::DataModelConfiguration>) -> Self {
        self.inner = self.inner.set_data_model_configuration(input);
        self
    }
    /// <p></p>
    pub fn get_data_model_configuration(&self) -> &::std::option::Option<crate::types::DataModelConfiguration> {
        self.inner.get_data_model_configuration()
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn data_source_configuration(mut self, input: crate::types::DataSourceConfiguration) -> Self {
        self.inner = self.inner.data_source_configuration(input);
        self
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn set_data_source_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceConfiguration>) -> Self {
        self.inner = self.inner.set_data_source_configuration(input);
        self
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn get_data_source_configuration(&self) -> &::std::option::Option<crate::types::DataSourceConfiguration> {
        self.inner.get_data_source_configuration()
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn report_configuration(mut self, input: crate::types::ReportConfiguration) -> Self {
        self.inner = self.inner.report_configuration(input);
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn set_report_configuration(mut self, input: ::std::option::Option<crate::types::ReportConfiguration>) -> Self {
        self.inner = self.inner.set_report_configuration(input);
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn get_report_configuration(&self) -> &::std::option::Option<crate::types::ReportConfiguration> {
        self.inner.get_report_configuration()
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn target_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_database_name(input.into());
        self
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn set_target_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_database_name(input);
        self
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn get_target_database_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_database_name()
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn target_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target_table_name(input.into());
        self
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn set_target_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target_table_name(input);
        self
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn get_target_table_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target_table_name()
    }
    /// <p></p>
    pub fn record_version(mut self, input: i64) -> Self {
        self.inner = self.inner.record_version(input);
        self
    }
    /// <p></p>
    pub fn set_record_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_record_version(input);
        self
    }
    /// <p></p>
    pub fn get_record_version(&self) -> &::std::option::Option<i64> {
        self.inner.get_record_version()
    }
}
