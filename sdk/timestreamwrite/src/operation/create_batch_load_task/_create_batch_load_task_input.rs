// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateBatchLoadTaskInput {
    /// <p></p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub data_model_configuration: ::std::option::Option<crate::types::DataModelConfiguration>,
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub report_configuration: ::std::option::Option<crate::types::ReportConfiguration>,
    /// <p>Target Timestream database for a batch load task.</p>
    pub target_database_name: ::std::option::Option<::std::string::String>,
    /// <p>Target Timestream table for a batch load task.</p>
    pub target_table_name: ::std::option::Option<::std::string::String>,
    /// <p></p>
    pub record_version: ::std::option::Option<i64>,
}
impl CreateBatchLoadTaskInput {
    /// <p></p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p></p>
    pub fn data_model_configuration(&self) -> ::std::option::Option<&crate::types::DataModelConfiguration> {
        self.data_model_configuration.as_ref()
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn data_source_configuration(&self) -> ::std::option::Option<&crate::types::DataSourceConfiguration> {
        self.data_source_configuration.as_ref()
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn report_configuration(&self) -> ::std::option::Option<&crate::types::ReportConfiguration> {
        self.report_configuration.as_ref()
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn target_database_name(&self) -> ::std::option::Option<&str> {
        self.target_database_name.as_deref()
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn target_table_name(&self) -> ::std::option::Option<&str> {
        self.target_table_name.as_deref()
    }
    /// <p></p>
    pub fn record_version(&self) -> ::std::option::Option<i64> {
        self.record_version
    }
}
impl ::std::fmt::Debug for CreateBatchLoadTaskInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBatchLoadTaskInput");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("data_model_configuration", &self.data_model_configuration);
        formatter.field("data_source_configuration", &self.data_source_configuration);
        formatter.field("report_configuration", &self.report_configuration);
        formatter.field("target_database_name", &self.target_database_name);
        formatter.field("target_table_name", &self.target_table_name);
        formatter.field("record_version", &self.record_version);
        formatter.finish()
    }
}
impl CreateBatchLoadTaskInput {
    /// Creates a new builder-style object to manufacture [`CreateBatchLoadTaskInput`](crate::operation::create_batch_load_task::CreateBatchLoadTaskInput).
    pub fn builder() -> crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskInputBuilder {
        crate::operation::create_batch_load_task::builders::CreateBatchLoadTaskInputBuilder::default()
    }
}

/// A builder for [`CreateBatchLoadTaskInput`](crate::operation::create_batch_load_task::CreateBatchLoadTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateBatchLoadTaskInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) data_model_configuration: ::std::option::Option<crate::types::DataModelConfiguration>,
    pub(crate) data_source_configuration: ::std::option::Option<crate::types::DataSourceConfiguration>,
    pub(crate) report_configuration: ::std::option::Option<crate::types::ReportConfiguration>,
    pub(crate) target_database_name: ::std::option::Option<::std::string::String>,
    pub(crate) target_table_name: ::std::option::Option<::std::string::String>,
    pub(crate) record_version: ::std::option::Option<i64>,
}
impl CreateBatchLoadTaskInputBuilder {
    /// <p></p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p></p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p></p>
    pub fn data_model_configuration(mut self, input: crate::types::DataModelConfiguration) -> Self {
        self.data_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_data_model_configuration(mut self, input: ::std::option::Option<crate::types::DataModelConfiguration>) -> Self {
        self.data_model_configuration = input;
        self
    }
    /// <p></p>
    pub fn get_data_model_configuration(&self) -> &::std::option::Option<crate::types::DataModelConfiguration> {
        &self.data_model_configuration
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    /// This field is required.
    pub fn data_source_configuration(mut self, input: crate::types::DataSourceConfiguration) -> Self {
        self.data_source_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn set_data_source_configuration(mut self, input: ::std::option::Option<crate::types::DataSourceConfiguration>) -> Self {
        self.data_source_configuration = input;
        self
    }
    /// <p>Defines configuration details about the data source for a batch load task.</p>
    pub fn get_data_source_configuration(&self) -> &::std::option::Option<crate::types::DataSourceConfiguration> {
        &self.data_source_configuration
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    /// This field is required.
    pub fn report_configuration(mut self, input: crate::types::ReportConfiguration) -> Self {
        self.report_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn set_report_configuration(mut self, input: ::std::option::Option<crate::types::ReportConfiguration>) -> Self {
        self.report_configuration = input;
        self
    }
    /// <p>Report configuration for a batch load task. This contains details about where error reports are stored.</p>
    pub fn get_report_configuration(&self) -> &::std::option::Option<crate::types::ReportConfiguration> {
        &self.report_configuration
    }
    /// <p>Target Timestream database for a batch load task.</p>
    /// This field is required.
    pub fn target_database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn set_target_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_database_name = input;
        self
    }
    /// <p>Target Timestream database for a batch load task.</p>
    pub fn get_target_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_database_name
    }
    /// <p>Target Timestream table for a batch load task.</p>
    /// This field is required.
    pub fn target_table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn set_target_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_table_name = input;
        self
    }
    /// <p>Target Timestream table for a batch load task.</p>
    pub fn get_target_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_table_name
    }
    /// <p></p>
    pub fn record_version(mut self, input: i64) -> Self {
        self.record_version = ::std::option::Option::Some(input);
        self
    }
    /// <p></p>
    pub fn set_record_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.record_version = input;
        self
    }
    /// <p></p>
    pub fn get_record_version(&self) -> &::std::option::Option<i64> {
        &self.record_version
    }
    /// Consumes the builder and constructs a [`CreateBatchLoadTaskInput`](crate::operation::create_batch_load_task::CreateBatchLoadTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_batch_load_task::CreateBatchLoadTaskInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_batch_load_task::CreateBatchLoadTaskInput {
            client_token: self.client_token,
            data_model_configuration: self.data_model_configuration,
            data_source_configuration: self.data_source_configuration,
            report_configuration: self.report_configuration,
            target_database_name: self.target_database_name,
            target_table_name: self.target_table_name,
            record_version: self.record_version,
        })
    }
}
impl ::std::fmt::Debug for CreateBatchLoadTaskInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateBatchLoadTaskInputBuilder");
        formatter.field("client_token", &"*** Sensitive Data Redacted ***");
        formatter.field("data_model_configuration", &self.data_model_configuration);
        formatter.field("data_source_configuration", &self.data_source_configuration);
        formatter.field("report_configuration", &self.report_configuration);
        formatter.field("target_database_name", &self.target_database_name);
        formatter.field("target_table_name", &self.target_table_name);
        formatter.field("record_version", &self.record_version);
        formatter.finish()
    }
}
