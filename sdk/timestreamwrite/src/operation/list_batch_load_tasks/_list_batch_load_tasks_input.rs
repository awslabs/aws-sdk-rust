// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListBatchLoadTasksInput {
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The total number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Status of the batch load task.</p>
    pub task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
}
impl ListBatchLoadTasksInput {
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The total number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(&self) -> ::std::option::Option<&crate::types::BatchLoadStatus> {
        self.task_status.as_ref()
    }
}
impl ListBatchLoadTasksInput {
    /// Creates a new builder-style object to manufacture [`ListBatchLoadTasksInput`](crate::operation::list_batch_load_tasks::ListBatchLoadTasksInput).
    pub fn builder() -> crate::operation::list_batch_load_tasks::builders::ListBatchLoadTasksInputBuilder {
        crate::operation::list_batch_load_tasks::builders::ListBatchLoadTasksInputBuilder::default()
    }
}

/// A builder for [`ListBatchLoadTasksInput`](crate::operation::list_batch_load_tasks::ListBatchLoadTasksInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListBatchLoadTasksInputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) task_status: ::std::option::Option<crate::types::BatchLoadStatus>,
}
impl ListBatchLoadTasksInputBuilder {
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token to specify where to start paginating. This is the NextToken from a previously truncated response.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The total number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The total number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as argument of a subsequent API invocation.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Status of the batch load task.</p>
    pub fn task_status(mut self, input: crate::types::BatchLoadStatus) -> Self {
        self.task_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn set_task_status(mut self, input: ::std::option::Option<crate::types::BatchLoadStatus>) -> Self {
        self.task_status = input;
        self
    }
    /// <p>Status of the batch load task.</p>
    pub fn get_task_status(&self) -> &::std::option::Option<crate::types::BatchLoadStatus> {
        &self.task_status
    }
    /// Consumes the builder and constructs a [`ListBatchLoadTasksInput`](crate::operation::list_batch_load_tasks::ListBatchLoadTasksInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_batch_load_tasks::ListBatchLoadTasksInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_batch_load_tasks::ListBatchLoadTasksInput {
            next_token: self.next_token,
            max_results: self.max_results,
            task_status: self.task_status,
        })
    }
}
