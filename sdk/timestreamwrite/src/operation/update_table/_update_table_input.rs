// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateTableInput {
    /// <p>The name of the Timestream database.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Timestream table.</p>
    pub table_name: ::std::option::Option<::std::string::String>,
    /// <p>The retention duration of the memory store and the magnetic store.</p>
    pub retention_properties: ::std::option::Option<crate::types::RetentionProperties>,
    /// <p>Contains properties to set on the table when enabling magnetic store writes.</p>
    pub magnetic_store_write_properties: ::std::option::Option<crate::types::MagneticStoreWriteProperties>,
    /// <p> The schema of the table. </p>
    pub schema: ::std::option::Option<crate::types::Schema>,
}
impl UpdateTableInput {
    /// <p>The name of the Timestream database.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the Timestream table.</p>
    pub fn table_name(&self) -> ::std::option::Option<&str> {
        self.table_name.as_deref()
    }
    /// <p>The retention duration of the memory store and the magnetic store.</p>
    pub fn retention_properties(&self) -> ::std::option::Option<&crate::types::RetentionProperties> {
        self.retention_properties.as_ref()
    }
    /// <p>Contains properties to set on the table when enabling magnetic store writes.</p>
    pub fn magnetic_store_write_properties(&self) -> ::std::option::Option<&crate::types::MagneticStoreWriteProperties> {
        self.magnetic_store_write_properties.as_ref()
    }
    /// <p> The schema of the table. </p>
    pub fn schema(&self) -> ::std::option::Option<&crate::types::Schema> {
        self.schema.as_ref()
    }
}
impl UpdateTableInput {
    /// Creates a new builder-style object to manufacture [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
    pub fn builder() -> crate::operation::update_table::builders::UpdateTableInputBuilder {
        crate::operation::update_table::builders::UpdateTableInputBuilder::default()
    }
}

/// A builder for [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateTableInputBuilder {
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) retention_properties: ::std::option::Option<crate::types::RetentionProperties>,
    pub(crate) magnetic_store_write_properties: ::std::option::Option<crate::types::MagneticStoreWriteProperties>,
    pub(crate) schema: ::std::option::Option<crate::types::Schema>,
}
impl UpdateTableInputBuilder {
    /// <p>The name of the Timestream database.</p>
    /// This field is required.
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Timestream database.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the Timestream database.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the Timestream table.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Timestream table.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The name of the Timestream table.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>The retention duration of the memory store and the magnetic store.</p>
    pub fn retention_properties(mut self, input: crate::types::RetentionProperties) -> Self {
        self.retention_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention duration of the memory store and the magnetic store.</p>
    pub fn set_retention_properties(mut self, input: ::std::option::Option<crate::types::RetentionProperties>) -> Self {
        self.retention_properties = input;
        self
    }
    /// <p>The retention duration of the memory store and the magnetic store.</p>
    pub fn get_retention_properties(&self) -> &::std::option::Option<crate::types::RetentionProperties> {
        &self.retention_properties
    }
    /// <p>Contains properties to set on the table when enabling magnetic store writes.</p>
    pub fn magnetic_store_write_properties(mut self, input: crate::types::MagneticStoreWriteProperties) -> Self {
        self.magnetic_store_write_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains properties to set on the table when enabling magnetic store writes.</p>
    pub fn set_magnetic_store_write_properties(mut self, input: ::std::option::Option<crate::types::MagneticStoreWriteProperties>) -> Self {
        self.magnetic_store_write_properties = input;
        self
    }
    /// <p>Contains properties to set on the table when enabling magnetic store writes.</p>
    pub fn get_magnetic_store_write_properties(&self) -> &::std::option::Option<crate::types::MagneticStoreWriteProperties> {
        &self.magnetic_store_write_properties
    }
    /// <p> The schema of the table. </p>
    pub fn schema(mut self, input: crate::types::Schema) -> Self {
        self.schema = ::std::option::Option::Some(input);
        self
    }
    /// <p> The schema of the table. </p>
    pub fn set_schema(mut self, input: ::std::option::Option<crate::types::Schema>) -> Self {
        self.schema = input;
        self
    }
    /// <p> The schema of the table. </p>
    pub fn get_schema(&self) -> &::std::option::Option<crate::types::Schema> {
        &self.schema
    }
    /// Consumes the builder and constructs a [`UpdateTableInput`](crate::operation::update_table::UpdateTableInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_table::UpdateTableInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_table::UpdateTableInput {
            database_name: self.database_name,
            table_name: self.table_name,
            retention_properties: self.retention_properties,
            magnetic_store_write_properties: self.magnetic_store_write_properties,
            schema: self.schema,
        })
    }
}
