// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ConflictExceptionReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let conflictexceptionreason = unimplemented!();
/// match conflictexceptionreason {
///     ConflictExceptionReason::CreateRegistrationVersionNotAllowed => { /* ... */ },
///     ConflictExceptionReason::DeletionProtectionEnabled => { /* ... */ },
///     ConflictExceptionReason::DestinationCountryBlockedByProtectConfiguration => { /* ... */ },
///     ConflictExceptionReason::DestinationPhoneNumberBlockedByProtectNumberOverride => { /* ... */ },
///     ConflictExceptionReason::DestinationPhoneNumberNotVerified => { /* ... */ },
///     ConflictExceptionReason::DestinationPhoneNumberOptedOut => { /* ... */ },
///     ConflictExceptionReason::DisassociateRegistrationNotAllowed => { /* ... */ },
///     ConflictExceptionReason::DiscardRegistrationVersionNotAllowed => { /* ... */ },
///     ConflictExceptionReason::EditRegistrationFieldValuesNotAllowed => { /* ... */ },
///     ConflictExceptionReason::EventDestinationMismatch => { /* ... */ },
///     ConflictExceptionReason::KeywordMismatch => { /* ... */ },
///     ConflictExceptionReason::LastPhoneNumber => { /* ... */ },
///     ConflictExceptionReason::MessageTypeMismatch => { /* ... */ },
///     ConflictExceptionReason::NoOriginationIdentitiesFound => { /* ... */ },
///     ConflictExceptionReason::NumberCapabilitiesMismatch => { /* ... */ },
///     ConflictExceptionReason::OptOutListMismatch => { /* ... */ },
///     ConflictExceptionReason::PhoneNumberAssociatedToPool => { /* ... */ },
///     ConflictExceptionReason::PhoneNumberAssociatedToRegistration => { /* ... */ },
///     ConflictExceptionReason::PhoneNumberNotAssociatedToPool => { /* ... */ },
///     ConflictExceptionReason::PhoneNumberNotInRegistrationRegion => { /* ... */ },
///     ConflictExceptionReason::ProtectConfigurationAssociatedWithConfigurationSet => { /* ... */ },
///     ConflictExceptionReason::ProtectConfigurationIsAccountDefault => { /* ... */ },
///     ConflictExceptionReason::ProtectConfigurationNotAssociatedWithConfigurationSet => { /* ... */ },
///     ConflictExceptionReason::RegistrationAlreadySubmitted => { /* ... */ },
///     ConflictExceptionReason::RegistrationNotComplete => { /* ... */ },
///     ConflictExceptionReason::ResourceAlreadyExists => { /* ... */ },
///     ConflictExceptionReason::ResourceDeletionNotAllowed => { /* ... */ },
///     ConflictExceptionReason::ResourceModificationNotAllowed => { /* ... */ },
///     ConflictExceptionReason::ResourceNotActive => { /* ... */ },
///     ConflictExceptionReason::ResourceNotEmpty => { /* ... */ },
///     ConflictExceptionReason::SelfManagedOptOutsMismatch => { /* ... */ },
///     ConflictExceptionReason::SenderIdAssociatedToPool => { /* ... */ },
///     ConflictExceptionReason::SubmitRegistrationVersionNotAllowed => { /* ... */ },
///     ConflictExceptionReason::TwoWayConfigMismatch => { /* ... */ },
///     ConflictExceptionReason::VerificationAlreadyComplete => { /* ... */ },
///     ConflictExceptionReason::VerificationCodeExpired => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `conflictexceptionreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ConflictExceptionReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ConflictExceptionReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ConflictExceptionReason::NewFeature` is defined.
/// Specifically, when `conflictexceptionreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ConflictExceptionReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ConflictExceptionReason {
    #[allow(missing_docs)] // documentation missing in model
    CreateRegistrationVersionNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    DeletionProtectionEnabled,
    #[allow(missing_docs)] // documentation missing in model
    DestinationCountryBlockedByProtectConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    DestinationPhoneNumberBlockedByProtectNumberOverride,
    #[allow(missing_docs)] // documentation missing in model
    DestinationPhoneNumberNotVerified,
    #[allow(missing_docs)] // documentation missing in model
    DestinationPhoneNumberOptedOut,
    #[allow(missing_docs)] // documentation missing in model
    DisassociateRegistrationNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    DiscardRegistrationVersionNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    EditRegistrationFieldValuesNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    EventDestinationMismatch,
    #[allow(missing_docs)] // documentation missing in model
    KeywordMismatch,
    #[allow(missing_docs)] // documentation missing in model
    LastPhoneNumber,
    #[allow(missing_docs)] // documentation missing in model
    MessageTypeMismatch,
    #[allow(missing_docs)] // documentation missing in model
    NoOriginationIdentitiesFound,
    #[allow(missing_docs)] // documentation missing in model
    NumberCapabilitiesMismatch,
    #[allow(missing_docs)] // documentation missing in model
    OptOutListMismatch,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberAssociatedToPool,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberAssociatedToRegistration,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberNotAssociatedToPool,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberNotInRegistrationRegion,
    #[allow(missing_docs)] // documentation missing in model
    ProtectConfigurationAssociatedWithConfigurationSet,
    #[allow(missing_docs)] // documentation missing in model
    ProtectConfigurationIsAccountDefault,
    #[allow(missing_docs)] // documentation missing in model
    ProtectConfigurationNotAssociatedWithConfigurationSet,
    #[allow(missing_docs)] // documentation missing in model
    RegistrationAlreadySubmitted,
    #[allow(missing_docs)] // documentation missing in model
    RegistrationNotComplete,
    #[allow(missing_docs)] // documentation missing in model
    ResourceAlreadyExists,
    #[allow(missing_docs)] // documentation missing in model
    ResourceDeletionNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    ResourceModificationNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotActive,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotEmpty,
    #[allow(missing_docs)] // documentation missing in model
    SelfManagedOptOutsMismatch,
    #[allow(missing_docs)] // documentation missing in model
    SenderIdAssociatedToPool,
    #[allow(missing_docs)] // documentation missing in model
    SubmitRegistrationVersionNotAllowed,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayConfigMismatch,
    #[allow(missing_docs)] // documentation missing in model
    VerificationAlreadyComplete,
    #[allow(missing_docs)] // documentation missing in model
    VerificationCodeExpired,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ConflictExceptionReason {
    fn from(s: &str) -> Self {
        match s {
            "CREATE_REGISTRATION_VERSION_NOT_ALLOWED" => ConflictExceptionReason::CreateRegistrationVersionNotAllowed,
            "DELETION_PROTECTION_ENABLED" => ConflictExceptionReason::DeletionProtectionEnabled,
            "DESTINATION_COUNTRY_BLOCKED_BY_PROTECT_CONFIGURATION" => ConflictExceptionReason::DestinationCountryBlockedByProtectConfiguration,
            "DESTINATION_PHONE_NUMBER_BLOCKED_BY_PROTECT_NUMBER_OVERRIDE" => {
                ConflictExceptionReason::DestinationPhoneNumberBlockedByProtectNumberOverride
            }
            "DESTINATION_PHONE_NUMBER_NOT_VERIFIED" => ConflictExceptionReason::DestinationPhoneNumberNotVerified,
            "DESTINATION_PHONE_NUMBER_OPTED_OUT" => ConflictExceptionReason::DestinationPhoneNumberOptedOut,
            "DISASSOCIATE_REGISTRATION_NOT_ALLOWED" => ConflictExceptionReason::DisassociateRegistrationNotAllowed,
            "DISCARD_REGISTRATION_VERSION_NOT_ALLOWED" => ConflictExceptionReason::DiscardRegistrationVersionNotAllowed,
            "EDIT_REGISTRATION_FIELD_VALUES_NOT_ALLOWED" => ConflictExceptionReason::EditRegistrationFieldValuesNotAllowed,
            "EVENT_DESTINATION_MISMATCH" => ConflictExceptionReason::EventDestinationMismatch,
            "KEYWORD_MISMATCH" => ConflictExceptionReason::KeywordMismatch,
            "LAST_PHONE_NUMBER" => ConflictExceptionReason::LastPhoneNumber,
            "MESSAGE_TYPE_MISMATCH" => ConflictExceptionReason::MessageTypeMismatch,
            "NO_ORIGINATION_IDENTITIES_FOUND" => ConflictExceptionReason::NoOriginationIdentitiesFound,
            "NUMBER_CAPABILITIES_MISMATCH" => ConflictExceptionReason::NumberCapabilitiesMismatch,
            "OPT_OUT_LIST_MISMATCH" => ConflictExceptionReason::OptOutListMismatch,
            "PHONE_NUMBER_ASSOCIATED_TO_POOL" => ConflictExceptionReason::PhoneNumberAssociatedToPool,
            "PHONE_NUMBER_ASSOCIATED_TO_REGISTRATION" => ConflictExceptionReason::PhoneNumberAssociatedToRegistration,
            "PHONE_NUMBER_NOT_ASSOCIATED_TO_POOL" => ConflictExceptionReason::PhoneNumberNotAssociatedToPool,
            "PHONE_NUMBER_NOT_IN_REGISTRATION_REGION" => ConflictExceptionReason::PhoneNumberNotInRegistrationRegion,
            "PROTECT_CONFIGURATION_ASSOCIATED_WITH_CONFIGURATION_SET" => ConflictExceptionReason::ProtectConfigurationAssociatedWithConfigurationSet,
            "PROTECT_CONFIGURATION_IS_ACCOUNT_DEFAULT" => ConflictExceptionReason::ProtectConfigurationIsAccountDefault,
            "PROTECT_CONFIGURATION_NOT_ASSOCIATED_WITH_CONFIGURATION_SET" => {
                ConflictExceptionReason::ProtectConfigurationNotAssociatedWithConfigurationSet
            }
            "REGISTRATION_ALREADY_SUBMITTED" => ConflictExceptionReason::RegistrationAlreadySubmitted,
            "REGISTRATION_NOT_COMPLETE" => ConflictExceptionReason::RegistrationNotComplete,
            "RESOURCE_ALREADY_EXISTS" => ConflictExceptionReason::ResourceAlreadyExists,
            "RESOURCE_DELETION_NOT_ALLOWED" => ConflictExceptionReason::ResourceDeletionNotAllowed,
            "RESOURCE_MODIFICATION_NOT_ALLOWED" => ConflictExceptionReason::ResourceModificationNotAllowed,
            "RESOURCE_NOT_ACTIVE" => ConflictExceptionReason::ResourceNotActive,
            "RESOURCE_NOT_EMPTY" => ConflictExceptionReason::ResourceNotEmpty,
            "SELF_MANAGED_OPT_OUTS_MISMATCH" => ConflictExceptionReason::SelfManagedOptOutsMismatch,
            "SENDER_ID_ASSOCIATED_TO_POOL" => ConflictExceptionReason::SenderIdAssociatedToPool,
            "SUBMIT_REGISTRATION_VERSION_NOT_ALLOWED" => ConflictExceptionReason::SubmitRegistrationVersionNotAllowed,
            "TWO_WAY_CONFIG_MISMATCH" => ConflictExceptionReason::TwoWayConfigMismatch,
            "VERIFICATION_ALREADY_COMPLETE" => ConflictExceptionReason::VerificationAlreadyComplete,
            "VERIFICATION_CODE_EXPIRED" => ConflictExceptionReason::VerificationCodeExpired,
            other => ConflictExceptionReason::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ConflictExceptionReason {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ConflictExceptionReason::from(s))
    }
}
impl ConflictExceptionReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ConflictExceptionReason::CreateRegistrationVersionNotAllowed => "CREATE_REGISTRATION_VERSION_NOT_ALLOWED",
            ConflictExceptionReason::DeletionProtectionEnabled => "DELETION_PROTECTION_ENABLED",
            ConflictExceptionReason::DestinationCountryBlockedByProtectConfiguration => "DESTINATION_COUNTRY_BLOCKED_BY_PROTECT_CONFIGURATION",
            ConflictExceptionReason::DestinationPhoneNumberBlockedByProtectNumberOverride => {
                "DESTINATION_PHONE_NUMBER_BLOCKED_BY_PROTECT_NUMBER_OVERRIDE"
            }
            ConflictExceptionReason::DestinationPhoneNumberNotVerified => "DESTINATION_PHONE_NUMBER_NOT_VERIFIED",
            ConflictExceptionReason::DestinationPhoneNumberOptedOut => "DESTINATION_PHONE_NUMBER_OPTED_OUT",
            ConflictExceptionReason::DisassociateRegistrationNotAllowed => "DISASSOCIATE_REGISTRATION_NOT_ALLOWED",
            ConflictExceptionReason::DiscardRegistrationVersionNotAllowed => "DISCARD_REGISTRATION_VERSION_NOT_ALLOWED",
            ConflictExceptionReason::EditRegistrationFieldValuesNotAllowed => "EDIT_REGISTRATION_FIELD_VALUES_NOT_ALLOWED",
            ConflictExceptionReason::EventDestinationMismatch => "EVENT_DESTINATION_MISMATCH",
            ConflictExceptionReason::KeywordMismatch => "KEYWORD_MISMATCH",
            ConflictExceptionReason::LastPhoneNumber => "LAST_PHONE_NUMBER",
            ConflictExceptionReason::MessageTypeMismatch => "MESSAGE_TYPE_MISMATCH",
            ConflictExceptionReason::NoOriginationIdentitiesFound => "NO_ORIGINATION_IDENTITIES_FOUND",
            ConflictExceptionReason::NumberCapabilitiesMismatch => "NUMBER_CAPABILITIES_MISMATCH",
            ConflictExceptionReason::OptOutListMismatch => "OPT_OUT_LIST_MISMATCH",
            ConflictExceptionReason::PhoneNumberAssociatedToPool => "PHONE_NUMBER_ASSOCIATED_TO_POOL",
            ConflictExceptionReason::PhoneNumberAssociatedToRegistration => "PHONE_NUMBER_ASSOCIATED_TO_REGISTRATION",
            ConflictExceptionReason::PhoneNumberNotAssociatedToPool => "PHONE_NUMBER_NOT_ASSOCIATED_TO_POOL",
            ConflictExceptionReason::PhoneNumberNotInRegistrationRegion => "PHONE_NUMBER_NOT_IN_REGISTRATION_REGION",
            ConflictExceptionReason::ProtectConfigurationAssociatedWithConfigurationSet => "PROTECT_CONFIGURATION_ASSOCIATED_WITH_CONFIGURATION_SET",
            ConflictExceptionReason::ProtectConfigurationIsAccountDefault => "PROTECT_CONFIGURATION_IS_ACCOUNT_DEFAULT",
            ConflictExceptionReason::ProtectConfigurationNotAssociatedWithConfigurationSet => {
                "PROTECT_CONFIGURATION_NOT_ASSOCIATED_WITH_CONFIGURATION_SET"
            }
            ConflictExceptionReason::RegistrationAlreadySubmitted => "REGISTRATION_ALREADY_SUBMITTED",
            ConflictExceptionReason::RegistrationNotComplete => "REGISTRATION_NOT_COMPLETE",
            ConflictExceptionReason::ResourceAlreadyExists => "RESOURCE_ALREADY_EXISTS",
            ConflictExceptionReason::ResourceDeletionNotAllowed => "RESOURCE_DELETION_NOT_ALLOWED",
            ConflictExceptionReason::ResourceModificationNotAllowed => "RESOURCE_MODIFICATION_NOT_ALLOWED",
            ConflictExceptionReason::ResourceNotActive => "RESOURCE_NOT_ACTIVE",
            ConflictExceptionReason::ResourceNotEmpty => "RESOURCE_NOT_EMPTY",
            ConflictExceptionReason::SelfManagedOptOutsMismatch => "SELF_MANAGED_OPT_OUTS_MISMATCH",
            ConflictExceptionReason::SenderIdAssociatedToPool => "SENDER_ID_ASSOCIATED_TO_POOL",
            ConflictExceptionReason::SubmitRegistrationVersionNotAllowed => "SUBMIT_REGISTRATION_VERSION_NOT_ALLOWED",
            ConflictExceptionReason::TwoWayConfigMismatch => "TWO_WAY_CONFIG_MISMATCH",
            ConflictExceptionReason::VerificationAlreadyComplete => "VERIFICATION_ALREADY_COMPLETE",
            ConflictExceptionReason::VerificationCodeExpired => "VERIFICATION_CODE_EXPIRED",
            ConflictExceptionReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CREATE_REGISTRATION_VERSION_NOT_ALLOWED",
            "DELETION_PROTECTION_ENABLED",
            "DESTINATION_COUNTRY_BLOCKED_BY_PROTECT_CONFIGURATION",
            "DESTINATION_PHONE_NUMBER_BLOCKED_BY_PROTECT_NUMBER_OVERRIDE",
            "DESTINATION_PHONE_NUMBER_NOT_VERIFIED",
            "DESTINATION_PHONE_NUMBER_OPTED_OUT",
            "DISASSOCIATE_REGISTRATION_NOT_ALLOWED",
            "DISCARD_REGISTRATION_VERSION_NOT_ALLOWED",
            "EDIT_REGISTRATION_FIELD_VALUES_NOT_ALLOWED",
            "EVENT_DESTINATION_MISMATCH",
            "KEYWORD_MISMATCH",
            "LAST_PHONE_NUMBER",
            "MESSAGE_TYPE_MISMATCH",
            "NO_ORIGINATION_IDENTITIES_FOUND",
            "NUMBER_CAPABILITIES_MISMATCH",
            "OPT_OUT_LIST_MISMATCH",
            "PHONE_NUMBER_ASSOCIATED_TO_POOL",
            "PHONE_NUMBER_ASSOCIATED_TO_REGISTRATION",
            "PHONE_NUMBER_NOT_ASSOCIATED_TO_POOL",
            "PHONE_NUMBER_NOT_IN_REGISTRATION_REGION",
            "PROTECT_CONFIGURATION_ASSOCIATED_WITH_CONFIGURATION_SET",
            "PROTECT_CONFIGURATION_IS_ACCOUNT_DEFAULT",
            "PROTECT_CONFIGURATION_NOT_ASSOCIATED_WITH_CONFIGURATION_SET",
            "REGISTRATION_ALREADY_SUBMITTED",
            "REGISTRATION_NOT_COMPLETE",
            "RESOURCE_ALREADY_EXISTS",
            "RESOURCE_DELETION_NOT_ALLOWED",
            "RESOURCE_MODIFICATION_NOT_ALLOWED",
            "RESOURCE_NOT_ACTIVE",
            "RESOURCE_NOT_EMPTY",
            "SELF_MANAGED_OPT_OUTS_MISMATCH",
            "SENDER_ID_ASSOCIATED_TO_POOL",
            "SUBMIT_REGISTRATION_VERSION_NOT_ALLOWED",
            "TWO_WAY_CONFIG_MISMATCH",
            "VERIFICATION_ALREADY_COMPLETE",
            "VERIFICATION_CODE_EXPIRED",
        ]
    }
}
impl ::std::convert::AsRef<str> for ConflictExceptionReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ConflictExceptionReason {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ConflictExceptionReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ConflictExceptionReason::CreateRegistrationVersionNotAllowed => write!(f, "CREATE_REGISTRATION_VERSION_NOT_ALLOWED"),
            ConflictExceptionReason::DeletionProtectionEnabled => write!(f, "DELETION_PROTECTION_ENABLED"),
            ConflictExceptionReason::DestinationCountryBlockedByProtectConfiguration => {
                write!(f, "DESTINATION_COUNTRY_BLOCKED_BY_PROTECT_CONFIGURATION")
            }
            ConflictExceptionReason::DestinationPhoneNumberBlockedByProtectNumberOverride => {
                write!(f, "DESTINATION_PHONE_NUMBER_BLOCKED_BY_PROTECT_NUMBER_OVERRIDE")
            }
            ConflictExceptionReason::DestinationPhoneNumberNotVerified => write!(f, "DESTINATION_PHONE_NUMBER_NOT_VERIFIED"),
            ConflictExceptionReason::DestinationPhoneNumberOptedOut => write!(f, "DESTINATION_PHONE_NUMBER_OPTED_OUT"),
            ConflictExceptionReason::DisassociateRegistrationNotAllowed => write!(f, "DISASSOCIATE_REGISTRATION_NOT_ALLOWED"),
            ConflictExceptionReason::DiscardRegistrationVersionNotAllowed => write!(f, "DISCARD_REGISTRATION_VERSION_NOT_ALLOWED"),
            ConflictExceptionReason::EditRegistrationFieldValuesNotAllowed => write!(f, "EDIT_REGISTRATION_FIELD_VALUES_NOT_ALLOWED"),
            ConflictExceptionReason::EventDestinationMismatch => write!(f, "EVENT_DESTINATION_MISMATCH"),
            ConflictExceptionReason::KeywordMismatch => write!(f, "KEYWORD_MISMATCH"),
            ConflictExceptionReason::LastPhoneNumber => write!(f, "LAST_PHONE_NUMBER"),
            ConflictExceptionReason::MessageTypeMismatch => write!(f, "MESSAGE_TYPE_MISMATCH"),
            ConflictExceptionReason::NoOriginationIdentitiesFound => write!(f, "NO_ORIGINATION_IDENTITIES_FOUND"),
            ConflictExceptionReason::NumberCapabilitiesMismatch => write!(f, "NUMBER_CAPABILITIES_MISMATCH"),
            ConflictExceptionReason::OptOutListMismatch => write!(f, "OPT_OUT_LIST_MISMATCH"),
            ConflictExceptionReason::PhoneNumberAssociatedToPool => write!(f, "PHONE_NUMBER_ASSOCIATED_TO_POOL"),
            ConflictExceptionReason::PhoneNumberAssociatedToRegistration => write!(f, "PHONE_NUMBER_ASSOCIATED_TO_REGISTRATION"),
            ConflictExceptionReason::PhoneNumberNotAssociatedToPool => write!(f, "PHONE_NUMBER_NOT_ASSOCIATED_TO_POOL"),
            ConflictExceptionReason::PhoneNumberNotInRegistrationRegion => write!(f, "PHONE_NUMBER_NOT_IN_REGISTRATION_REGION"),
            ConflictExceptionReason::ProtectConfigurationAssociatedWithConfigurationSet => {
                write!(f, "PROTECT_CONFIGURATION_ASSOCIATED_WITH_CONFIGURATION_SET")
            }
            ConflictExceptionReason::ProtectConfigurationIsAccountDefault => write!(f, "PROTECT_CONFIGURATION_IS_ACCOUNT_DEFAULT"),
            ConflictExceptionReason::ProtectConfigurationNotAssociatedWithConfigurationSet => {
                write!(f, "PROTECT_CONFIGURATION_NOT_ASSOCIATED_WITH_CONFIGURATION_SET")
            }
            ConflictExceptionReason::RegistrationAlreadySubmitted => write!(f, "REGISTRATION_ALREADY_SUBMITTED"),
            ConflictExceptionReason::RegistrationNotComplete => write!(f, "REGISTRATION_NOT_COMPLETE"),
            ConflictExceptionReason::ResourceAlreadyExists => write!(f, "RESOURCE_ALREADY_EXISTS"),
            ConflictExceptionReason::ResourceDeletionNotAllowed => write!(f, "RESOURCE_DELETION_NOT_ALLOWED"),
            ConflictExceptionReason::ResourceModificationNotAllowed => write!(f, "RESOURCE_MODIFICATION_NOT_ALLOWED"),
            ConflictExceptionReason::ResourceNotActive => write!(f, "RESOURCE_NOT_ACTIVE"),
            ConflictExceptionReason::ResourceNotEmpty => write!(f, "RESOURCE_NOT_EMPTY"),
            ConflictExceptionReason::SelfManagedOptOutsMismatch => write!(f, "SELF_MANAGED_OPT_OUTS_MISMATCH"),
            ConflictExceptionReason::SenderIdAssociatedToPool => write!(f, "SENDER_ID_ASSOCIATED_TO_POOL"),
            ConflictExceptionReason::SubmitRegistrationVersionNotAllowed => write!(f, "SUBMIT_REGISTRATION_VERSION_NOT_ALLOWED"),
            ConflictExceptionReason::TwoWayConfigMismatch => write!(f, "TWO_WAY_CONFIG_MISMATCH"),
            ConflictExceptionReason::VerificationAlreadyComplete => write!(f, "VERIFICATION_ALREADY_COMPLETE"),
            ConflictExceptionReason::VerificationCodeExpired => write!(f, "VERIFICATION_CODE_EXPIRED"),
            ConflictExceptionReason::Unknown(value) => write!(f, "{value}"),
        }
    }
}
