// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Displays the attributes associated with a single Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountAttribute {
    /// <p>The name of the account attribute.</p>
    pub name: crate::types::AccountAttributeName,
    /// <p>The value associated with the account attribute name.</p>
    pub value: ::std::string::String,
}
impl AccountAttribute {
    /// <p>The name of the account attribute.</p>
    pub fn name(&self) -> &crate::types::AccountAttributeName {
        &self.name
    }
    /// <p>The value associated with the account attribute name.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl AccountAttribute {
    /// Creates a new builder-style object to manufacture [`AccountAttribute`](crate::types::AccountAttribute).
    pub fn builder() -> crate::types::builders::AccountAttributeBuilder {
        crate::types::builders::AccountAttributeBuilder::default()
    }
}

/// A builder for [`AccountAttribute`](crate::types::AccountAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountAttributeBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AccountAttributeName>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl AccountAttributeBuilder {
    /// <p>The name of the account attribute.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AccountAttributeName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the account attribute.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AccountAttributeName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the account attribute.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AccountAttributeName> {
        &self.name
    }
    /// <p>The value associated with the account attribute name.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value associated with the account attribute name.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value associated with the account attribute name.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`AccountAttribute`](crate::types::AccountAttribute).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AccountAttributeBuilder::name)
    /// - [`value`](crate::types::builders::AccountAttributeBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountAttribute, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountAttribute {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AccountAttribute",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building AccountAttribute",
                )
            })?,
        })
    }
}
