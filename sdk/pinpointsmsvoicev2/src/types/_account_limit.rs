// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current resource quotas associated with an Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AccountLimit {
    /// <p>The name of the attribute to apply the account limit to.</p>
    pub name: crate::types::AccountLimitName,
    /// <p>The current amount that has been spent, in US dollars.</p>
    pub used: i64,
    /// <p>The Amazon Web Services set limit for that resource type, in US dollars.</p>
    pub max: i64,
}
impl AccountLimit {
    /// <p>The name of the attribute to apply the account limit to.</p>
    pub fn name(&self) -> &crate::types::AccountLimitName {
        &self.name
    }
    /// <p>The current amount that has been spent, in US dollars.</p>
    pub fn used(&self) -> i64 {
        self.used
    }
    /// <p>The Amazon Web Services set limit for that resource type, in US dollars.</p>
    pub fn max(&self) -> i64 {
        self.max
    }
}
impl AccountLimit {
    /// Creates a new builder-style object to manufacture [`AccountLimit`](crate::types::AccountLimit).
    pub fn builder() -> crate::types::builders::AccountLimitBuilder {
        crate::types::builders::AccountLimitBuilder::default()
    }
}

/// A builder for [`AccountLimit`](crate::types::AccountLimit).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AccountLimitBuilder {
    pub(crate) name: ::std::option::Option<crate::types::AccountLimitName>,
    pub(crate) used: ::std::option::Option<i64>,
    pub(crate) max: ::std::option::Option<i64>,
}
impl AccountLimitBuilder {
    /// <p>The name of the attribute to apply the account limit to.</p>
    /// This field is required.
    pub fn name(mut self, input: crate::types::AccountLimitName) -> Self {
        self.name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the attribute to apply the account limit to.</p>
    pub fn set_name(mut self, input: ::std::option::Option<crate::types::AccountLimitName>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the attribute to apply the account limit to.</p>
    pub fn get_name(&self) -> &::std::option::Option<crate::types::AccountLimitName> {
        &self.name
    }
    /// <p>The current amount that has been spent, in US dollars.</p>
    /// This field is required.
    pub fn used(mut self, input: i64) -> Self {
        self.used = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current amount that has been spent, in US dollars.</p>
    pub fn set_used(mut self, input: ::std::option::Option<i64>) -> Self {
        self.used = input;
        self
    }
    /// <p>The current amount that has been spent, in US dollars.</p>
    pub fn get_used(&self) -> &::std::option::Option<i64> {
        &self.used
    }
    /// <p>The Amazon Web Services set limit for that resource type, in US dollars.</p>
    /// This field is required.
    pub fn max(mut self, input: i64) -> Self {
        self.max = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Web Services set limit for that resource type, in US dollars.</p>
    pub fn set_max(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max = input;
        self
    }
    /// <p>The Amazon Web Services set limit for that resource type, in US dollars.</p>
    pub fn get_max(&self) -> &::std::option::Option<i64> {
        &self.max
    }
    /// Consumes the builder and constructs a [`AccountLimit`](crate::types::AccountLimit).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AccountLimitBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::AccountLimit, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AccountLimit {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AccountLimit",
                )
            })?,
            used: self.used.unwrap_or_default(),
            max: self.max.unwrap_or_default(),
        })
    }
}
