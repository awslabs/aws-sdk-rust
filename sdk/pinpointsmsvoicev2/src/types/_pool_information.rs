// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information for a pool in an Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PoolInformation {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    #[doc(hidden)]
    pub pool_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the pool.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>The current status of the pool.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PoolStatus>,
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>When set to true you can receive incoming text messages from your end recipients using the TwoWayChannelArn.</p>
    #[doc(hidden)]
    pub two_way_enabled: bool,
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    #[doc(hidden)]
    pub two_way_channel_arn: std::option::Option<std::string::String>,
    /// <p>When set to false, an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests. For more information see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/settings-sms-managing.html#settings-account-sms-self-managed-opt-out">Self-managed opt-outs</a> </p>
    #[doc(hidden)]
    pub self_managed_opt_outs_enabled: bool,
    /// <p>The name of the OptOutList associated with the pool.</p>
    #[doc(hidden)]
    pub opt_out_list_name: std::option::Option<std::string::String>,
    /// <p>Allows you to enable shared routes on your pool.</p>
    /// <p>By default, this is set to <code>False</code>. If you set this value to <code>True</code>, your messages are sent using phone numbers or sender IDs (depending on the country) that are shared with other Amazon Pinpoint users. In some countries, such as the United States, senders aren't allowed to use shared routes and must use a dedicated phone number or short code.</p>
    #[doc(hidden)]
    pub shared_routes_enabled: bool,
    /// <p>When set to true the pool can't be deleted.</p>
    #[doc(hidden)]
    pub deletion_protection_enabled: bool,
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PoolInformation {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn pool_arn(&self) -> std::option::Option<&str> {
        self.pool_arn.as_deref()
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>The current status of the pool.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::PoolStatus> {
        self.status.as_ref()
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>When set to true you can receive incoming text messages from your end recipients using the TwoWayChannelArn.</p>
    pub fn two_way_enabled(&self) -> bool {
        self.two_way_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(&self) -> std::option::Option<&str> {
        self.two_way_channel_arn.as_deref()
    }
    /// <p>When set to false, an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests. For more information see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/settings-sms-managing.html#settings-account-sms-self-managed-opt-out">Self-managed opt-outs</a> </p>
    pub fn self_managed_opt_outs_enabled(&self) -> bool {
        self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn opt_out_list_name(&self) -> std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>Allows you to enable shared routes on your pool.</p>
    /// <p>By default, this is set to <code>False</code>. If you set this value to <code>True</code>, your messages are sent using phone numbers or sender IDs (depending on the country) that are shared with other Amazon Pinpoint users. In some countries, such as the United States, senders aren't allowed to use shared routes and must use a dedicated phone number or short code.</p>
    pub fn shared_routes_enabled(&self) -> bool {
        self.shared_routes_enabled
    }
    /// <p>When set to true the pool can't be deleted.</p>
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl PoolInformation {
    /// Creates a new builder-style object to manufacture [`PoolInformation`](crate::types::PoolInformation).
    pub fn builder() -> crate::types::builders::PoolInformationBuilder {
        crate::types::builders::PoolInformationBuilder::default()
    }
}

/// A builder for [`PoolInformation`](crate::types::PoolInformation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PoolInformationBuilder {
    pub(crate) pool_arn: std::option::Option<std::string::String>,
    pub(crate) pool_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::PoolStatus>,
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) two_way_enabled: std::option::Option<bool>,
    pub(crate) two_way_channel_arn: std::option::Option<std::string::String>,
    pub(crate) self_managed_opt_outs_enabled: std::option::Option<bool>,
    pub(crate) opt_out_list_name: std::option::Option<std::string::String>,
    pub(crate) shared_routes_enabled: std::option::Option<bool>,
    pub(crate) deletion_protection_enabled: std::option::Option<bool>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl PoolInformationBuilder {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn pool_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn set_pool_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_arn = input;
        self
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The current status of the pool.</p>
    pub fn status(mut self, input: crate::types::PoolStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the pool.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::PoolStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// <p>When set to true you can receive incoming text messages from your end recipients using the TwoWayChannelArn.</p>
    pub fn two_way_enabled(mut self, input: bool) -> Self {
        self.two_way_enabled = Some(input);
        self
    }
    /// <p>When set to true you can receive incoming text messages from your end recipients using the TwoWayChannelArn.</p>
    pub fn set_two_way_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.two_way_enabled = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.two_way_channel_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn set_two_way_channel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.two_way_channel_arn = input;
        self
    }
    /// <p>When set to false, an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests. For more information see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/settings-sms-managing.html#settings-account-sms-self-managed-opt-out">Self-managed opt-outs</a> </p>
    pub fn self_managed_opt_outs_enabled(mut self, input: bool) -> Self {
        self.self_managed_opt_outs_enabled = Some(input);
        self
    }
    /// <p>When set to false, an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests. For more information see <a href="https://docs.aws.amazon.com/pinpoint/latest/userguide/settings-sms-managing.html#settings-account-sms-self-managed-opt-out">Self-managed opt-outs</a> </p>
    pub fn set_self_managed_opt_outs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.self_managed_opt_outs_enabled = input;
        self
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn opt_out_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.opt_out_list_name = Some(input.into());
        self
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn set_opt_out_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>Allows you to enable shared routes on your pool.</p>
    /// <p>By default, this is set to <code>False</code>. If you set this value to <code>True</code>, your messages are sent using phone numbers or sender IDs (depending on the country) that are shared with other Amazon Pinpoint users. In some countries, such as the United States, senders aren't allowed to use shared routes and must use a dedicated phone number or short code.</p>
    pub fn shared_routes_enabled(mut self, input: bool) -> Self {
        self.shared_routes_enabled = Some(input);
        self
    }
    /// <p>Allows you to enable shared routes on your pool.</p>
    /// <p>By default, this is set to <code>False</code>. If you set this value to <code>True</code>, your messages are sent using phone numbers or sender IDs (depending on the country) that are shared with other Amazon Pinpoint users. In some countries, such as the United States, senders aren't allowed to use shared routes and must use a dedicated phone number or short code.</p>
    pub fn set_shared_routes_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.shared_routes_enabled = input;
        self
    }
    /// <p>When set to true the pool can't be deleted.</p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = Some(input);
        self
    }
    /// <p>When set to true the pool can't be deleted.</p>
    pub fn set_deletion_protection_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`PoolInformation`](crate::types::PoolInformation).
    pub fn build(self) -> crate::types::PoolInformation {
        crate::types::PoolInformation {
            pool_arn: self.pool_arn,
            pool_id: self.pool_id,
            status: self.status,
            message_type: self.message_type,
            two_way_enabled: self.two_way_enabled.unwrap_or_default(),
            two_way_channel_arn: self.two_way_channel_arn,
            self_managed_opt_outs_enabled: self.self_managed_opt_outs_enabled.unwrap_or_default(),
            opt_out_list_name: self.opt_out_list_name,
            shared_routes_enabled: self.shared_routes_enabled.unwrap_or_default(),
            deletion_protection_enabled: self.deletion_protection_enabled.unwrap_or_default(),
            created_timestamp: self.created_timestamp,
        }
    }
}
