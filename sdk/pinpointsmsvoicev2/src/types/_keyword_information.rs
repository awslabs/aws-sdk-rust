// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The information for all keywords in a pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KeywordInformation {
    /// <p>The keyword as a string.</p>
    pub keyword: ::std::string::String,
    /// <p>A custom message that can be used with the keyword.</p>
    pub keyword_message: ::std::string::String,
    /// <p>The action to perform for the keyword.</p>
    pub keyword_action: crate::types::KeywordAction,
}
impl KeywordInformation {
    /// <p>The keyword as a string.</p>
    pub fn keyword(&self) -> &str {
        use std::ops::Deref;
        self.keyword.deref()
    }
    /// <p>A custom message that can be used with the keyword.</p>
    pub fn keyword_message(&self) -> &str {
        use std::ops::Deref;
        self.keyword_message.deref()
    }
    /// <p>The action to perform for the keyword.</p>
    pub fn keyword_action(&self) -> &crate::types::KeywordAction {
        &self.keyword_action
    }
}
impl KeywordInformation {
    /// Creates a new builder-style object to manufacture [`KeywordInformation`](crate::types::KeywordInformation).
    pub fn builder() -> crate::types::builders::KeywordInformationBuilder {
        crate::types::builders::KeywordInformationBuilder::default()
    }
}

/// A builder for [`KeywordInformation`](crate::types::KeywordInformation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KeywordInformationBuilder {
    pub(crate) keyword: ::std::option::Option<::std::string::String>,
    pub(crate) keyword_message: ::std::option::Option<::std::string::String>,
    pub(crate) keyword_action: ::std::option::Option<crate::types::KeywordAction>,
}
impl KeywordInformationBuilder {
    /// <p>The keyword as a string.</p>
    /// This field is required.
    pub fn keyword(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyword = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The keyword as a string.</p>
    pub fn set_keyword(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyword = input;
        self
    }
    /// <p>The keyword as a string.</p>
    pub fn get_keyword(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyword
    }
    /// <p>A custom message that can be used with the keyword.</p>
    /// This field is required.
    pub fn keyword_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.keyword_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A custom message that can be used with the keyword.</p>
    pub fn set_keyword_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.keyword_message = input;
        self
    }
    /// <p>A custom message that can be used with the keyword.</p>
    pub fn get_keyword_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.keyword_message
    }
    /// <p>The action to perform for the keyword.</p>
    /// This field is required.
    pub fn keyword_action(mut self, input: crate::types::KeywordAction) -> Self {
        self.keyword_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action to perform for the keyword.</p>
    pub fn set_keyword_action(mut self, input: ::std::option::Option<crate::types::KeywordAction>) -> Self {
        self.keyword_action = input;
        self
    }
    /// <p>The action to perform for the keyword.</p>
    pub fn get_keyword_action(&self) -> &::std::option::Option<crate::types::KeywordAction> {
        &self.keyword_action
    }
    /// Consumes the builder and constructs a [`KeywordInformation`](crate::types::KeywordInformation).
    /// This method will fail if any of the following fields are not set:
    /// - [`keyword`](crate::types::builders::KeywordInformationBuilder::keyword)
    /// - [`keyword_message`](crate::types::builders::KeywordInformationBuilder::keyword_message)
    /// - [`keyword_action`](crate::types::builders::KeywordInformationBuilder::keyword_action)
    pub fn build(self) -> ::std::result::Result<crate::types::KeywordInformation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KeywordInformation {
            keyword: self.keyword.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyword",
                    "keyword was not specified but it is required when building KeywordInformation",
                )
            })?,
            keyword_message: self.keyword_message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyword_message",
                    "keyword_message was not specified but it is required when building KeywordInformation",
                )
            })?,
            keyword_action: self.keyword_action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "keyword_action",
                    "keyword_action was not specified but it is required when building KeywordInformation",
                )
            })?,
        })
    }
}
