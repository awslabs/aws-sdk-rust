// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ValidationExceptionReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let validationexceptionreason = unimplemented!();
/// match validationexceptionreason {
///     ValidationExceptionReason::AttachmentTypeNotSupported => { /* ... */ },
///     ValidationExceptionReason::CannotAddOptedOutNumber => { /* ... */ },
///     ValidationExceptionReason::CannotParse => { /* ... */ },
///     ValidationExceptionReason::CountryCodeMismatch => { /* ... */ },
///     ValidationExceptionReason::DestinationCountryBlocked => { /* ... */ },
///     ValidationExceptionReason::FieldValidationFailed => { /* ... */ },
///     ValidationExceptionReason::InternationalSendingNotSupported => { /* ... */ },
///     ValidationExceptionReason::InvalidArn => { /* ... */ },
///     ValidationExceptionReason::InvalidFilterValues => { /* ... */ },
///     ValidationExceptionReason::InvalidIdentityForDestinationCountry => { /* ... */ },
///     ValidationExceptionReason::InvalidNextToken => { /* ... */ },
///     ValidationExceptionReason::InvalidParameter => { /* ... */ },
///     ValidationExceptionReason::InvalidRegistrationAssociation => { /* ... */ },
///     ValidationExceptionReason::InvalidRequest => { /* ... */ },
///     ValidationExceptionReason::MaximumSizeExceeded => { /* ... */ },
///     ValidationExceptionReason::MediaTypeNotSupported => { /* ... */ },
///     ValidationExceptionReason::MissingParameter => { /* ... */ },
///     ValidationExceptionReason::Other => { /* ... */ },
///     ValidationExceptionReason::ParametersCannotBeUsedTogether => { /* ... */ },
///     ValidationExceptionReason::PhoneNumberCannotBeOptedIn => { /* ... */ },
///     ValidationExceptionReason::PhoneNumberCannotBeReleased => { /* ... */ },
///     ValidationExceptionReason::PriceOverThreshold => { /* ... */ },
///     ValidationExceptionReason::RegistrationFieldCannotBeDeleted => { /* ... */ },
///     ValidationExceptionReason::RequestedSpendLimitHigherThanServiceLimit => { /* ... */ },
///     ValidationExceptionReason::ResourceNotAccessible => { /* ... */ },
///     ValidationExceptionReason::SenderIdNotRegistered => { /* ... */ },
///     ValidationExceptionReason::SenderIdNotSupported => { /* ... */ },
///     ValidationExceptionReason::SenderIdRequiresRegistration => { /* ... */ },
///     ValidationExceptionReason::TwoWayChannelNotPresent => { /* ... */ },
///     ValidationExceptionReason::TwoWayNotEnabled => { /* ... */ },
///     ValidationExceptionReason::TwoWayNotSupportedInCountry => { /* ... */ },
///     ValidationExceptionReason::TwoWayNotSupportedInRegion => { /* ... */ },
///     ValidationExceptionReason::TwoWayTopicNotPresent => { /* ... */ },
///     ValidationExceptionReason::UnknownOperation => { /* ... */ },
///     ValidationExceptionReason::UnknownRegistrationField => { /* ... */ },
///     ValidationExceptionReason::UnknownRegistrationSection => { /* ... */ },
///     ValidationExceptionReason::UnknownRegistrationType => { /* ... */ },
///     ValidationExceptionReason::UnknownRegistrationVersion => { /* ... */ },
///     ValidationExceptionReason::UnspecifiedParameterNotSupported => { /* ... */ },
///     ValidationExceptionReason::VerificationCodeMismatch => { /* ... */ },
///     ValidationExceptionReason::VoiceCapabilityNotAvailable => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `validationexceptionreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ValidationExceptionReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ValidationExceptionReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ValidationExceptionReason::NewFeature` is defined.
/// Specifically, when `validationexceptionreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ValidationExceptionReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ValidationExceptionReason {
    #[allow(missing_docs)] // documentation missing in model
    AttachmentTypeNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    CannotAddOptedOutNumber,
    #[allow(missing_docs)] // documentation missing in model
    CannotParse,
    #[allow(missing_docs)] // documentation missing in model
    CountryCodeMismatch,
    #[allow(missing_docs)] // documentation missing in model
    DestinationCountryBlocked,
    #[allow(missing_docs)] // documentation missing in model
    FieldValidationFailed,
    #[allow(missing_docs)] // documentation missing in model
    InternationalSendingNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    InvalidArn,
    #[allow(missing_docs)] // documentation missing in model
    InvalidFilterValues,
    #[allow(missing_docs)] // documentation missing in model
    InvalidIdentityForDestinationCountry,
    #[allow(missing_docs)] // documentation missing in model
    InvalidNextToken,
    #[allow(missing_docs)] // documentation missing in model
    InvalidParameter,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRegistrationAssociation,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRequest,
    #[allow(missing_docs)] // documentation missing in model
    MaximumSizeExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MediaTypeNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    MissingParameter,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    ParametersCannotBeUsedTogether,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberCannotBeOptedIn,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumberCannotBeReleased,
    #[allow(missing_docs)] // documentation missing in model
    PriceOverThreshold,
    #[allow(missing_docs)] // documentation missing in model
    RegistrationFieldCannotBeDeleted,
    #[allow(missing_docs)] // documentation missing in model
    RequestedSpendLimitHigherThanServiceLimit,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotAccessible,
    #[allow(missing_docs)] // documentation missing in model
    SenderIdNotRegistered,
    #[allow(missing_docs)] // documentation missing in model
    SenderIdNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    SenderIdRequiresRegistration,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayChannelNotPresent,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayNotEnabled,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayNotSupportedInCountry,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayNotSupportedInRegion,
    #[allow(missing_docs)] // documentation missing in model
    TwoWayTopicNotPresent,
    #[allow(missing_docs)] // documentation missing in model
    UnknownOperation,
    #[allow(missing_docs)] // documentation missing in model
    UnknownRegistrationField,
    #[allow(missing_docs)] // documentation missing in model
    UnknownRegistrationSection,
    #[allow(missing_docs)] // documentation missing in model
    UnknownRegistrationType,
    #[allow(missing_docs)] // documentation missing in model
    UnknownRegistrationVersion,
    #[allow(missing_docs)] // documentation missing in model
    UnspecifiedParameterNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    VerificationCodeMismatch,
    #[allow(missing_docs)] // documentation missing in model
    VoiceCapabilityNotAvailable,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ValidationExceptionReason {
    fn from(s: &str) -> Self {
        match s {
            "ATTACHMENT_TYPE_NOT_SUPPORTED" => ValidationExceptionReason::AttachmentTypeNotSupported,
            "CANNOT_ADD_OPTED_OUT_NUMBER" => ValidationExceptionReason::CannotAddOptedOutNumber,
            "CANNOT_PARSE" => ValidationExceptionReason::CannotParse,
            "COUNTRY_CODE_MISMATCH" => ValidationExceptionReason::CountryCodeMismatch,
            "DESTINATION_COUNTRY_BLOCKED" => ValidationExceptionReason::DestinationCountryBlocked,
            "FIELD_VALIDATION_FAILED" => ValidationExceptionReason::FieldValidationFailed,
            "INTERNATIONAL_SENDING_NOT_SUPPORTED" => ValidationExceptionReason::InternationalSendingNotSupported,
            "INVALID_ARN" => ValidationExceptionReason::InvalidArn,
            "INVALID_FILTER_VALUES" => ValidationExceptionReason::InvalidFilterValues,
            "INVALID_IDENTITY_FOR_DESTINATION_COUNTRY" => ValidationExceptionReason::InvalidIdentityForDestinationCountry,
            "INVALID_NEXT_TOKEN" => ValidationExceptionReason::InvalidNextToken,
            "INVALID_PARAMETER" => ValidationExceptionReason::InvalidParameter,
            "INVALID_REGISTRATION_ASSOCIATION" => ValidationExceptionReason::InvalidRegistrationAssociation,
            "INVALID_REQUEST" => ValidationExceptionReason::InvalidRequest,
            "MAXIMUM_SIZE_EXCEEDED" => ValidationExceptionReason::MaximumSizeExceeded,
            "MEDIA_TYPE_NOT_SUPPORTED" => ValidationExceptionReason::MediaTypeNotSupported,
            "MISSING_PARAMETER" => ValidationExceptionReason::MissingParameter,
            "OTHER" => ValidationExceptionReason::Other,
            "PARAMETERS_CANNOT_BE_USED_TOGETHER" => ValidationExceptionReason::ParametersCannotBeUsedTogether,
            "PHONE_NUMBER_CANNOT_BE_OPTED_IN" => ValidationExceptionReason::PhoneNumberCannotBeOptedIn,
            "PHONE_NUMBER_CANNOT_BE_RELEASED" => ValidationExceptionReason::PhoneNumberCannotBeReleased,
            "PRICE_OVER_THRESHOLD" => ValidationExceptionReason::PriceOverThreshold,
            "REGISTRATION_FIELD_CANNOT_BE_DELETED" => ValidationExceptionReason::RegistrationFieldCannotBeDeleted,
            "REQUESTED_SPEND_LIMIT_HIGHER_THAN_SERVICE_LIMIT" => ValidationExceptionReason::RequestedSpendLimitHigherThanServiceLimit,
            "RESOURCE_NOT_ACCESSIBLE" => ValidationExceptionReason::ResourceNotAccessible,
            "SENDER_ID_NOT_REGISTERED" => ValidationExceptionReason::SenderIdNotRegistered,
            "SENDER_ID_NOT_SUPPORTED" => ValidationExceptionReason::SenderIdNotSupported,
            "SENDER_ID_REQUIRES_REGISTRATION" => ValidationExceptionReason::SenderIdRequiresRegistration,
            "TWO_WAY_CHANNEL_NOT_PRESENT" => ValidationExceptionReason::TwoWayChannelNotPresent,
            "TWO_WAY_NOT_ENABLED" => ValidationExceptionReason::TwoWayNotEnabled,
            "TWO_WAY_NOT_SUPPORTED_IN_COUNTRY" => ValidationExceptionReason::TwoWayNotSupportedInCountry,
            "TWO_WAY_NOT_SUPPORTED_IN_REGION" => ValidationExceptionReason::TwoWayNotSupportedInRegion,
            "TWO_WAY_TOPIC_NOT_PRESENT" => ValidationExceptionReason::TwoWayTopicNotPresent,
            "UNKNOWN_OPERATION" => ValidationExceptionReason::UnknownOperation,
            "UNKNOWN_REGISTRATION_FIELD" => ValidationExceptionReason::UnknownRegistrationField,
            "UNKNOWN_REGISTRATION_SECTION" => ValidationExceptionReason::UnknownRegistrationSection,
            "UNKNOWN_REGISTRATION_TYPE" => ValidationExceptionReason::UnknownRegistrationType,
            "UNKNOWN_REGISTRATION_VERSION" => ValidationExceptionReason::UnknownRegistrationVersion,
            "UNSPECIFIED_PARAMETER_NOT_SUPPORTED" => ValidationExceptionReason::UnspecifiedParameterNotSupported,
            "VERIFICATION_CODE_MISMATCH" => ValidationExceptionReason::VerificationCodeMismatch,
            "VOICE_CAPABILITY_NOT_AVAILABLE" => ValidationExceptionReason::VoiceCapabilityNotAvailable,
            other => ValidationExceptionReason::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ValidationExceptionReason {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ValidationExceptionReason::from(s))
    }
}
impl ValidationExceptionReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ValidationExceptionReason::AttachmentTypeNotSupported => "ATTACHMENT_TYPE_NOT_SUPPORTED",
            ValidationExceptionReason::CannotAddOptedOutNumber => "CANNOT_ADD_OPTED_OUT_NUMBER",
            ValidationExceptionReason::CannotParse => "CANNOT_PARSE",
            ValidationExceptionReason::CountryCodeMismatch => "COUNTRY_CODE_MISMATCH",
            ValidationExceptionReason::DestinationCountryBlocked => "DESTINATION_COUNTRY_BLOCKED",
            ValidationExceptionReason::FieldValidationFailed => "FIELD_VALIDATION_FAILED",
            ValidationExceptionReason::InternationalSendingNotSupported => "INTERNATIONAL_SENDING_NOT_SUPPORTED",
            ValidationExceptionReason::InvalidArn => "INVALID_ARN",
            ValidationExceptionReason::InvalidFilterValues => "INVALID_FILTER_VALUES",
            ValidationExceptionReason::InvalidIdentityForDestinationCountry => "INVALID_IDENTITY_FOR_DESTINATION_COUNTRY",
            ValidationExceptionReason::InvalidNextToken => "INVALID_NEXT_TOKEN",
            ValidationExceptionReason::InvalidParameter => "INVALID_PARAMETER",
            ValidationExceptionReason::InvalidRegistrationAssociation => "INVALID_REGISTRATION_ASSOCIATION",
            ValidationExceptionReason::InvalidRequest => "INVALID_REQUEST",
            ValidationExceptionReason::MaximumSizeExceeded => "MAXIMUM_SIZE_EXCEEDED",
            ValidationExceptionReason::MediaTypeNotSupported => "MEDIA_TYPE_NOT_SUPPORTED",
            ValidationExceptionReason::MissingParameter => "MISSING_PARAMETER",
            ValidationExceptionReason::Other => "OTHER",
            ValidationExceptionReason::ParametersCannotBeUsedTogether => "PARAMETERS_CANNOT_BE_USED_TOGETHER",
            ValidationExceptionReason::PhoneNumberCannotBeOptedIn => "PHONE_NUMBER_CANNOT_BE_OPTED_IN",
            ValidationExceptionReason::PhoneNumberCannotBeReleased => "PHONE_NUMBER_CANNOT_BE_RELEASED",
            ValidationExceptionReason::PriceOverThreshold => "PRICE_OVER_THRESHOLD",
            ValidationExceptionReason::RegistrationFieldCannotBeDeleted => "REGISTRATION_FIELD_CANNOT_BE_DELETED",
            ValidationExceptionReason::RequestedSpendLimitHigherThanServiceLimit => "REQUESTED_SPEND_LIMIT_HIGHER_THAN_SERVICE_LIMIT",
            ValidationExceptionReason::ResourceNotAccessible => "RESOURCE_NOT_ACCESSIBLE",
            ValidationExceptionReason::SenderIdNotRegistered => "SENDER_ID_NOT_REGISTERED",
            ValidationExceptionReason::SenderIdNotSupported => "SENDER_ID_NOT_SUPPORTED",
            ValidationExceptionReason::SenderIdRequiresRegistration => "SENDER_ID_REQUIRES_REGISTRATION",
            ValidationExceptionReason::TwoWayChannelNotPresent => "TWO_WAY_CHANNEL_NOT_PRESENT",
            ValidationExceptionReason::TwoWayNotEnabled => "TWO_WAY_NOT_ENABLED",
            ValidationExceptionReason::TwoWayNotSupportedInCountry => "TWO_WAY_NOT_SUPPORTED_IN_COUNTRY",
            ValidationExceptionReason::TwoWayNotSupportedInRegion => "TWO_WAY_NOT_SUPPORTED_IN_REGION",
            ValidationExceptionReason::TwoWayTopicNotPresent => "TWO_WAY_TOPIC_NOT_PRESENT",
            ValidationExceptionReason::UnknownOperation => "UNKNOWN_OPERATION",
            ValidationExceptionReason::UnknownRegistrationField => "UNKNOWN_REGISTRATION_FIELD",
            ValidationExceptionReason::UnknownRegistrationSection => "UNKNOWN_REGISTRATION_SECTION",
            ValidationExceptionReason::UnknownRegistrationType => "UNKNOWN_REGISTRATION_TYPE",
            ValidationExceptionReason::UnknownRegistrationVersion => "UNKNOWN_REGISTRATION_VERSION",
            ValidationExceptionReason::UnspecifiedParameterNotSupported => "UNSPECIFIED_PARAMETER_NOT_SUPPORTED",
            ValidationExceptionReason::VerificationCodeMismatch => "VERIFICATION_CODE_MISMATCH",
            ValidationExceptionReason::VoiceCapabilityNotAvailable => "VOICE_CAPABILITY_NOT_AVAILABLE",
            ValidationExceptionReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ATTACHMENT_TYPE_NOT_SUPPORTED",
            "CANNOT_ADD_OPTED_OUT_NUMBER",
            "CANNOT_PARSE",
            "COUNTRY_CODE_MISMATCH",
            "DESTINATION_COUNTRY_BLOCKED",
            "FIELD_VALIDATION_FAILED",
            "INTERNATIONAL_SENDING_NOT_SUPPORTED",
            "INVALID_ARN",
            "INVALID_FILTER_VALUES",
            "INVALID_IDENTITY_FOR_DESTINATION_COUNTRY",
            "INVALID_NEXT_TOKEN",
            "INVALID_PARAMETER",
            "INVALID_REGISTRATION_ASSOCIATION",
            "INVALID_REQUEST",
            "MAXIMUM_SIZE_EXCEEDED",
            "MEDIA_TYPE_NOT_SUPPORTED",
            "MISSING_PARAMETER",
            "OTHER",
            "PARAMETERS_CANNOT_BE_USED_TOGETHER",
            "PHONE_NUMBER_CANNOT_BE_OPTED_IN",
            "PHONE_NUMBER_CANNOT_BE_RELEASED",
            "PRICE_OVER_THRESHOLD",
            "REGISTRATION_FIELD_CANNOT_BE_DELETED",
            "REQUESTED_SPEND_LIMIT_HIGHER_THAN_SERVICE_LIMIT",
            "RESOURCE_NOT_ACCESSIBLE",
            "SENDER_ID_NOT_REGISTERED",
            "SENDER_ID_NOT_SUPPORTED",
            "SENDER_ID_REQUIRES_REGISTRATION",
            "TWO_WAY_CHANNEL_NOT_PRESENT",
            "TWO_WAY_NOT_ENABLED",
            "TWO_WAY_NOT_SUPPORTED_IN_COUNTRY",
            "TWO_WAY_NOT_SUPPORTED_IN_REGION",
            "TWO_WAY_TOPIC_NOT_PRESENT",
            "UNKNOWN_OPERATION",
            "UNKNOWN_REGISTRATION_FIELD",
            "UNKNOWN_REGISTRATION_SECTION",
            "UNKNOWN_REGISTRATION_TYPE",
            "UNKNOWN_REGISTRATION_VERSION",
            "UNSPECIFIED_PARAMETER_NOT_SUPPORTED",
            "VERIFICATION_CODE_MISMATCH",
            "VOICE_CAPABILITY_NOT_AVAILABLE",
        ]
    }
}
impl ::std::convert::AsRef<str> for ValidationExceptionReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ValidationExceptionReason {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ValidationExceptionReason {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ValidationExceptionReason::AttachmentTypeNotSupported => write!(f, "ATTACHMENT_TYPE_NOT_SUPPORTED"),
            ValidationExceptionReason::CannotAddOptedOutNumber => write!(f, "CANNOT_ADD_OPTED_OUT_NUMBER"),
            ValidationExceptionReason::CannotParse => write!(f, "CANNOT_PARSE"),
            ValidationExceptionReason::CountryCodeMismatch => write!(f, "COUNTRY_CODE_MISMATCH"),
            ValidationExceptionReason::DestinationCountryBlocked => write!(f, "DESTINATION_COUNTRY_BLOCKED"),
            ValidationExceptionReason::FieldValidationFailed => write!(f, "FIELD_VALIDATION_FAILED"),
            ValidationExceptionReason::InternationalSendingNotSupported => write!(f, "INTERNATIONAL_SENDING_NOT_SUPPORTED"),
            ValidationExceptionReason::InvalidArn => write!(f, "INVALID_ARN"),
            ValidationExceptionReason::InvalidFilterValues => write!(f, "INVALID_FILTER_VALUES"),
            ValidationExceptionReason::InvalidIdentityForDestinationCountry => write!(f, "INVALID_IDENTITY_FOR_DESTINATION_COUNTRY"),
            ValidationExceptionReason::InvalidNextToken => write!(f, "INVALID_NEXT_TOKEN"),
            ValidationExceptionReason::InvalidParameter => write!(f, "INVALID_PARAMETER"),
            ValidationExceptionReason::InvalidRegistrationAssociation => write!(f, "INVALID_REGISTRATION_ASSOCIATION"),
            ValidationExceptionReason::InvalidRequest => write!(f, "INVALID_REQUEST"),
            ValidationExceptionReason::MaximumSizeExceeded => write!(f, "MAXIMUM_SIZE_EXCEEDED"),
            ValidationExceptionReason::MediaTypeNotSupported => write!(f, "MEDIA_TYPE_NOT_SUPPORTED"),
            ValidationExceptionReason::MissingParameter => write!(f, "MISSING_PARAMETER"),
            ValidationExceptionReason::Other => write!(f, "OTHER"),
            ValidationExceptionReason::ParametersCannotBeUsedTogether => write!(f, "PARAMETERS_CANNOT_BE_USED_TOGETHER"),
            ValidationExceptionReason::PhoneNumberCannotBeOptedIn => write!(f, "PHONE_NUMBER_CANNOT_BE_OPTED_IN"),
            ValidationExceptionReason::PhoneNumberCannotBeReleased => write!(f, "PHONE_NUMBER_CANNOT_BE_RELEASED"),
            ValidationExceptionReason::PriceOverThreshold => write!(f, "PRICE_OVER_THRESHOLD"),
            ValidationExceptionReason::RegistrationFieldCannotBeDeleted => write!(f, "REGISTRATION_FIELD_CANNOT_BE_DELETED"),
            ValidationExceptionReason::RequestedSpendLimitHigherThanServiceLimit => write!(f, "REQUESTED_SPEND_LIMIT_HIGHER_THAN_SERVICE_LIMIT"),
            ValidationExceptionReason::ResourceNotAccessible => write!(f, "RESOURCE_NOT_ACCESSIBLE"),
            ValidationExceptionReason::SenderIdNotRegistered => write!(f, "SENDER_ID_NOT_REGISTERED"),
            ValidationExceptionReason::SenderIdNotSupported => write!(f, "SENDER_ID_NOT_SUPPORTED"),
            ValidationExceptionReason::SenderIdRequiresRegistration => write!(f, "SENDER_ID_REQUIRES_REGISTRATION"),
            ValidationExceptionReason::TwoWayChannelNotPresent => write!(f, "TWO_WAY_CHANNEL_NOT_PRESENT"),
            ValidationExceptionReason::TwoWayNotEnabled => write!(f, "TWO_WAY_NOT_ENABLED"),
            ValidationExceptionReason::TwoWayNotSupportedInCountry => write!(f, "TWO_WAY_NOT_SUPPORTED_IN_COUNTRY"),
            ValidationExceptionReason::TwoWayNotSupportedInRegion => write!(f, "TWO_WAY_NOT_SUPPORTED_IN_REGION"),
            ValidationExceptionReason::TwoWayTopicNotPresent => write!(f, "TWO_WAY_TOPIC_NOT_PRESENT"),
            ValidationExceptionReason::UnknownOperation => write!(f, "UNKNOWN_OPERATION"),
            ValidationExceptionReason::UnknownRegistrationField => write!(f, "UNKNOWN_REGISTRATION_FIELD"),
            ValidationExceptionReason::UnknownRegistrationSection => write!(f, "UNKNOWN_REGISTRATION_SECTION"),
            ValidationExceptionReason::UnknownRegistrationType => write!(f, "UNKNOWN_REGISTRATION_TYPE"),
            ValidationExceptionReason::UnknownRegistrationVersion => write!(f, "UNKNOWN_REGISTRATION_VERSION"),
            ValidationExceptionReason::UnspecifiedParameterNotSupported => write!(f, "UNSPECIFIED_PARAMETER_NOT_SUPPORTED"),
            ValidationExceptionReason::VerificationCodeMismatch => write!(f, "VERIFICATION_CODE_MISMATCH"),
            ValidationExceptionReason::VoiceCapabilityNotAvailable => write!(f, "VOICE_CAPABILITY_NOT_AVAILABLE"),
            ValidationExceptionReason::Unknown(value) => write!(f, "{value}"),
        }
    }
}
