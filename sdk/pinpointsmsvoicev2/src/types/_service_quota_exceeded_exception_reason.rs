// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ServiceQuotaExceededExceptionReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let servicequotaexceededexceptionreason = unimplemented!();
/// match servicequotaexceededexceptionreason {
///     ServiceQuotaExceededExceptionReason::ConfigurationSetsPerAccount => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::DailyDestinationCallLimit => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::EventDestinationsPerConfigurationSet => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::KeywordsPerPhoneNumber => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::KeywordsPerPool => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForText => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForVoice => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::OptOutListsPerAccount => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::OriginationIdentitiesPerPool => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::PhoneNumbersPerAccount => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::PhoneNumbersPerRegistration => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::PoolsPerAccount => { /* ... */ },
///     ServiceQuotaExceededExceptionReason::TagsPerResource => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `servicequotaexceededexceptionreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ServiceQuotaExceededExceptionReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ServiceQuotaExceededExceptionReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ServiceQuotaExceededExceptionReason::NewFeature` is defined.
/// Specifically, when `servicequotaexceededexceptionreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ServiceQuotaExceededExceptionReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ServiceQuotaExceededExceptionReason {
    #[allow(missing_docs)] // documentation missing in model
    ConfigurationSetsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    DailyDestinationCallLimit,
    #[allow(missing_docs)] // documentation missing in model
    EventDestinationsPerConfigurationSet,
    #[allow(missing_docs)] // documentation missing in model
    KeywordsPerPhoneNumber,
    #[allow(missing_docs)] // documentation missing in model
    KeywordsPerPool,
    #[allow(missing_docs)] // documentation missing in model
    MonthlySpendLimitReachedForText,
    #[allow(missing_docs)] // documentation missing in model
    MonthlySpendLimitReachedForVoice,
    #[allow(missing_docs)] // documentation missing in model
    OptOutListsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    OriginationIdentitiesPerPool,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumbersPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    PhoneNumbersPerRegistration,
    #[allow(missing_docs)] // documentation missing in model
    PoolsPerAccount,
    #[allow(missing_docs)] // documentation missing in model
    TagsPerResource,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ServiceQuotaExceededExceptionReason {
    fn from(s: &str) -> Self {
        match s {
            "CONFIGURATION_SETS_PER_ACCOUNT" => {
                ServiceQuotaExceededExceptionReason::ConfigurationSetsPerAccount
            }
            "DAILY_DESTINATION_CALL_LIMIT" => {
                ServiceQuotaExceededExceptionReason::DailyDestinationCallLimit
            }
            "EVENT_DESTINATIONS_PER_CONFIGURATION_SET" => {
                ServiceQuotaExceededExceptionReason::EventDestinationsPerConfigurationSet
            }
            "KEYWORDS_PER_PHONE_NUMBER" => {
                ServiceQuotaExceededExceptionReason::KeywordsPerPhoneNumber
            }
            "KEYWORDS_PER_POOL" => ServiceQuotaExceededExceptionReason::KeywordsPerPool,
            "MONTHLY_SPEND_LIMIT_REACHED_FOR_TEXT" => {
                ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForText
            }
            "MONTHLY_SPEND_LIMIT_REACHED_FOR_VOICE" => {
                ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForVoice
            }
            "OPT_OUT_LISTS_PER_ACCOUNT" => {
                ServiceQuotaExceededExceptionReason::OptOutListsPerAccount
            }
            "ORIGINATION_IDENTITIES_PER_POOL" => {
                ServiceQuotaExceededExceptionReason::OriginationIdentitiesPerPool
            }
            "PHONE_NUMBERS_PER_ACCOUNT" => {
                ServiceQuotaExceededExceptionReason::PhoneNumbersPerAccount
            }
            "PHONE_NUMBERS_PER_REGISTRATION" => {
                ServiceQuotaExceededExceptionReason::PhoneNumbersPerRegistration
            }
            "POOLS_PER_ACCOUNT" => ServiceQuotaExceededExceptionReason::PoolsPerAccount,
            "TAGS_PER_RESOURCE" => ServiceQuotaExceededExceptionReason::TagsPerResource,
            other => ServiceQuotaExceededExceptionReason::Unknown(
                crate::primitives::UnknownVariantValue(other.to_owned()),
            ),
        }
    }
}
impl std::str::FromStr for ServiceQuotaExceededExceptionReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ServiceQuotaExceededExceptionReason::from(s))
    }
}
impl ServiceQuotaExceededExceptionReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ServiceQuotaExceededExceptionReason::ConfigurationSetsPerAccount => {
                "CONFIGURATION_SETS_PER_ACCOUNT"
            }
            ServiceQuotaExceededExceptionReason::DailyDestinationCallLimit => {
                "DAILY_DESTINATION_CALL_LIMIT"
            }
            ServiceQuotaExceededExceptionReason::EventDestinationsPerConfigurationSet => {
                "EVENT_DESTINATIONS_PER_CONFIGURATION_SET"
            }
            ServiceQuotaExceededExceptionReason::KeywordsPerPhoneNumber => {
                "KEYWORDS_PER_PHONE_NUMBER"
            }
            ServiceQuotaExceededExceptionReason::KeywordsPerPool => "KEYWORDS_PER_POOL",
            ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForText => {
                "MONTHLY_SPEND_LIMIT_REACHED_FOR_TEXT"
            }
            ServiceQuotaExceededExceptionReason::MonthlySpendLimitReachedForVoice => {
                "MONTHLY_SPEND_LIMIT_REACHED_FOR_VOICE"
            }
            ServiceQuotaExceededExceptionReason::OptOutListsPerAccount => {
                "OPT_OUT_LISTS_PER_ACCOUNT"
            }
            ServiceQuotaExceededExceptionReason::OriginationIdentitiesPerPool => {
                "ORIGINATION_IDENTITIES_PER_POOL"
            }
            ServiceQuotaExceededExceptionReason::PhoneNumbersPerAccount => {
                "PHONE_NUMBERS_PER_ACCOUNT"
            }
            ServiceQuotaExceededExceptionReason::PhoneNumbersPerRegistration => {
                "PHONE_NUMBERS_PER_REGISTRATION"
            }
            ServiceQuotaExceededExceptionReason::PoolsPerAccount => "POOLS_PER_ACCOUNT",
            ServiceQuotaExceededExceptionReason::TagsPerResource => "TAGS_PER_RESOURCE",
            ServiceQuotaExceededExceptionReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CONFIGURATION_SETS_PER_ACCOUNT",
            "DAILY_DESTINATION_CALL_LIMIT",
            "EVENT_DESTINATIONS_PER_CONFIGURATION_SET",
            "KEYWORDS_PER_PHONE_NUMBER",
            "KEYWORDS_PER_POOL",
            "MONTHLY_SPEND_LIMIT_REACHED_FOR_TEXT",
            "MONTHLY_SPEND_LIMIT_REACHED_FOR_VOICE",
            "OPT_OUT_LISTS_PER_ACCOUNT",
            "ORIGINATION_IDENTITIES_PER_POOL",
            "PHONE_NUMBERS_PER_ACCOUNT",
            "PHONE_NUMBERS_PER_REGISTRATION",
            "POOLS_PER_ACCOUNT",
            "TAGS_PER_RESOURCE",
        ]
    }
}
impl AsRef<str> for ServiceQuotaExceededExceptionReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
