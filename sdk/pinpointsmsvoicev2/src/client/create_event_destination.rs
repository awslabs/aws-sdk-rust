// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateEventDestination`](crate::client::fluent_builders::CreateEventDestination) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`configuration_set_name(impl Into<String>)`](crate::client::fluent_builders::CreateEventDestination::configuration_set_name) / [`set_configuration_set_name(Option<String>)`](crate::client::fluent_builders::CreateEventDestination::set_configuration_set_name): <p>Either the name of the configuration set or the configuration set ARN to apply event logging to. The ConfigurateSetName and ConfigurationSetArn can be found using the <code>DescribeConfigurationSets</code> action.</p>
    ///   - [`event_destination_name(impl Into<String>)`](crate::client::fluent_builders::CreateEventDestination::event_destination_name) / [`set_event_destination_name(Option<String>)`](crate::client::fluent_builders::CreateEventDestination::set_event_destination_name): <p>The name that identifies the event destination.</p>
    ///   - [`matching_event_types(Vec<EventType>)`](crate::client::fluent_builders::CreateEventDestination::matching_event_types) / [`set_matching_event_types(Option<Vec<EventType>>)`](crate::client::fluent_builders::CreateEventDestination::set_matching_event_types): <p>An array of event types that determine which events to log. If "ALL" is used, then Amazon Pinpoint logs every event type.</p>
    ///   - [`cloud_watch_logs_destination(CloudWatchLogsDestination)`](crate::client::fluent_builders::CreateEventDestination::cloud_watch_logs_destination) / [`set_cloud_watch_logs_destination(Option<CloudWatchLogsDestination>)`](crate::client::fluent_builders::CreateEventDestination::set_cloud_watch_logs_destination): <p>An object that contains information about an event destination for logging to Amazon CloudWatch logs.</p>
    ///   - [`kinesis_firehose_destination(KinesisFirehoseDestination)`](crate::client::fluent_builders::CreateEventDestination::kinesis_firehose_destination) / [`set_kinesis_firehose_destination(Option<KinesisFirehoseDestination>)`](crate::client::fluent_builders::CreateEventDestination::set_kinesis_firehose_destination): <p>An object that contains information about an event destination for logging to Amazon Kinesis Data Firehose.</p>
    ///   - [`sns_destination(SnsDestination)`](crate::client::fluent_builders::CreateEventDestination::sns_destination) / [`set_sns_destination(Option<SnsDestination>)`](crate::client::fluent_builders::CreateEventDestination::set_sns_destination): <p>An object that contains information about an event destination for logging to Amazon SNS.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateEventDestination::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateEventDestination::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    /// - On success, responds with [`CreateEventDestinationOutput`](crate::output::CreateEventDestinationOutput) with field(s):
    ///   - [`configuration_set_arn(Option<String>)`](crate::output::CreateEventDestinationOutput::configuration_set_arn): <p>The ARN of the configuration set.</p>
    ///   - [`configuration_set_name(Option<String>)`](crate::output::CreateEventDestinationOutput::configuration_set_name): <p>The name of the configuration set.</p>
    ///   - [`event_destination(Option<EventDestination>)`](crate::output::CreateEventDestinationOutput::event_destination): <p>The details of the destination where events are logged.</p>
    /// - On failure, responds with [`SdkError<CreateEventDestinationError>`](crate::error::CreateEventDestinationError)
    pub fn create_event_destination(
        &self,
    ) -> crate::client::fluent_builders::CreateEventDestination {
        crate::client::fluent_builders::CreateEventDestination::new(self.handle.clone())
    }
}
