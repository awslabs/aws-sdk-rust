// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn event_destination_correct_errors(
    mut builder: crate::types::builders::EventDestinationBuilder,
) -> crate::types::builders::EventDestinationBuilder {
    if builder.event_destination_name.is_none() {
        builder.event_destination_name = Some(Default::default())
    }
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    if builder.matching_event_types.is_none() {
        builder.matching_event_types = Some(Default::default())
    }
    builder
}

pub(crate) fn account_attribute_correct_errors(
    mut builder: crate::types::builders::AccountAttributeBuilder,
) -> crate::types::builders::AccountAttributeBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AccountAttributeName>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn account_limit_correct_errors(mut builder: crate::types::builders::AccountLimitBuilder) -> crate::types::builders::AccountLimitBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::AccountLimitName>().ok()
    }
    if builder.used.is_none() {
        builder.used = Some(Default::default())
    }
    if builder.max.is_none() {
        builder.max = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_logs_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchLogsDestinationBuilder,
) -> crate::types::builders::CloudWatchLogsDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.log_group_arn.is_none() {
        builder.log_group_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_set_information_correct_errors(
    mut builder: crate::types::builders::ConfigurationSetInformationBuilder,
) -> crate::types::builders::ConfigurationSetInformationBuilder {
    if builder.configuration_set_arn.is_none() {
        builder.configuration_set_arn = Some(Default::default())
    }
    if builder.configuration_set_name.is_none() {
        builder.configuration_set_name = Some(Default::default())
    }
    if builder.event_destinations.is_none() {
        builder.event_destinations = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn keyword_information_correct_errors(
    mut builder: crate::types::builders::KeywordInformationBuilder,
) -> crate::types::builders::KeywordInformationBuilder {
    if builder.keyword.is_none() {
        builder.keyword = Some(Default::default())
    }
    if builder.keyword_message.is_none() {
        builder.keyword_message = Some(Default::default())
    }
    if builder.keyword_action.is_none() {
        builder.keyword_action = "no value was set".parse::<crate::types::KeywordAction>().ok()
    }
    builder
}

pub(crate) fn kinesis_firehose_destination_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseDestinationBuilder,
) -> crate::types::builders::KinesisFirehoseDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.delivery_stream_arn.is_none() {
        builder.delivery_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn opt_out_list_information_correct_errors(
    mut builder: crate::types::builders::OptOutListInformationBuilder,
) -> crate::types::builders::OptOutListInformationBuilder {
    if builder.opt_out_list_arn.is_none() {
        builder.opt_out_list_arn = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn opted_out_number_information_correct_errors(
    mut builder: crate::types::builders::OptedOutNumberInformationBuilder,
) -> crate::types::builders::OptedOutNumberInformationBuilder {
    if builder.opted_out_number.is_none() {
        builder.opted_out_number = Some(Default::default())
    }
    if builder.opted_out_timestamp.is_none() {
        builder.opted_out_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_user_opted_out.is_none() {
        builder.end_user_opted_out = Some(Default::default())
    }
    builder
}

pub(crate) fn origination_identity_metadata_correct_errors(
    mut builder: crate::types::builders::OriginationIdentityMetadataBuilder,
) -> crate::types::builders::OriginationIdentityMetadataBuilder {
    if builder.origination_identity_arn.is_none() {
        builder.origination_identity_arn = Some(Default::default())
    }
    if builder.origination_identity.is_none() {
        builder.origination_identity = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.number_capabilities.is_none() {
        builder.number_capabilities = Some(Default::default())
    }
    builder
}

pub(crate) fn phone_number_information_correct_errors(
    mut builder: crate::types::builders::PhoneNumberInformationBuilder,
) -> crate::types::builders::PhoneNumberInformationBuilder {
    if builder.phone_number_arn.is_none() {
        builder.phone_number_arn = Some(Default::default())
    }
    if builder.phone_number.is_none() {
        builder.phone_number = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::NumberStatus>().ok()
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_type.is_none() {
        builder.message_type = "no value was set".parse::<crate::types::MessageType>().ok()
    }
    if builder.number_capabilities.is_none() {
        builder.number_capabilities = Some(Default::default())
    }
    if builder.number_type.is_none() {
        builder.number_type = "no value was set".parse::<crate::types::NumberType>().ok()
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    if builder.two_way_enabled.is_none() {
        builder.two_way_enabled = Some(Default::default())
    }
    if builder.self_managed_opt_outs_enabled.is_none() {
        builder.self_managed_opt_outs_enabled = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn pool_information_correct_errors(
    mut builder: crate::types::builders::PoolInformationBuilder,
) -> crate::types::builders::PoolInformationBuilder {
    if builder.pool_arn.is_none() {
        builder.pool_arn = Some(Default::default())
    }
    if builder.pool_id.is_none() {
        builder.pool_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PoolStatus>().ok()
    }
    if builder.message_type.is_none() {
        builder.message_type = "no value was set".parse::<crate::types::MessageType>().ok()
    }
    if builder.two_way_enabled.is_none() {
        builder.two_way_enabled = Some(Default::default())
    }
    if builder.self_managed_opt_outs_enabled.is_none() {
        builder.self_managed_opt_outs_enabled = Some(Default::default())
    }
    if builder.opt_out_list_name.is_none() {
        builder.opt_out_list_name = Some(Default::default())
    }
    if builder.shared_routes_enabled.is_none() {
        builder.shared_routes_enabled = Some(Default::default())
    }
    if builder.deletion_protection_enabled.is_none() {
        builder.deletion_protection_enabled = Some(Default::default())
    }
    if builder.created_timestamp.is_none() {
        builder.created_timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn sender_id_information_correct_errors(
    mut builder: crate::types::builders::SenderIdInformationBuilder,
) -> crate::types::builders::SenderIdInformationBuilder {
    if builder.sender_id_arn.is_none() {
        builder.sender_id_arn = Some(Default::default())
    }
    if builder.sender_id.is_none() {
        builder.sender_id = Some(Default::default())
    }
    if builder.iso_country_code.is_none() {
        builder.iso_country_code = Some(Default::default())
    }
    if builder.message_types.is_none() {
        builder.message_types = Some(Default::default())
    }
    if builder.monthly_leasing_price.is_none() {
        builder.monthly_leasing_price = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_destination_correct_errors(
    mut builder: crate::types::builders::SnsDestinationBuilder,
) -> crate::types::builders::SnsDestinationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn spend_limit_correct_errors(mut builder: crate::types::builders::SpendLimitBuilder) -> crate::types::builders::SpendLimitBuilder {
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::SpendLimitName>().ok()
    }
    if builder.enforced_limit.is_none() {
        builder.enforced_limit = Some(Default::default())
    }
    if builder.max_limit.is_none() {
        builder.max_limit = Some(Default::default())
    }
    if builder.overridden.is_none() {
        builder.overridden = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
