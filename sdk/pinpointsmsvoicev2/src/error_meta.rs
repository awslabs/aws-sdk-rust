// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The request was denied because you don't have sufficient permissions to access the resource.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Your request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time or it could be that the requested action isn't valid for the current state or configuration of the resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The API encountered an unexpected error and couldn't complete the request. You might be able to successfully issue the request again in the future.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>A requested resource couldn't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>An error that occurred because too many requests were sent during a certain amount of time.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>A validation exception for a field.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_origination_identity::AssociateOriginationIdentityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_origination_identity::AssociateOriginationIdentityError> for Error {
    fn from(err: crate::operation::associate_origination_identity::AssociateOriginationIdentityError) -> Self {
        match err {
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_origination_identity::AssociateOriginationIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_configuration_set::CreateConfigurationSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_configuration_set::CreateConfigurationSetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configuration_set::CreateConfigurationSetError> for Error {
    fn from(err: crate::operation::create_configuration_set::CreateConfigurationSetError) -> Self {
        match err {
            crate::operation::create_configuration_set::CreateConfigurationSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_configuration_set::CreateConfigurationSetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_configuration_set::CreateConfigurationSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_configuration_set::CreateConfigurationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_destination::CreateEventDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_destination::CreateEventDestinationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_event_destination::CreateEventDestinationError> for Error {
    fn from(err: crate::operation::create_event_destination::CreateEventDestinationError) -> Self {
        match err {
            crate::operation::create_event_destination::CreateEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_event_destination::CreateEventDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_event_destination::CreateEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_event_destination::CreateEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_event_destination::CreateEventDestinationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_event_destination::CreateEventDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_event_destination::CreateEventDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_event_destination::CreateEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_opt_out_list::CreateOptOutListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_opt_out_list::CreateOptOutListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_opt_out_list::CreateOptOutListError> for Error {
    fn from(err: crate::operation::create_opt_out_list::CreateOptOutListError) -> Self {
        match err {
            crate::operation::create_opt_out_list::CreateOptOutListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_opt_out_list::CreateOptOutListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_opt_out_list::CreateOptOutListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_opt_out_list::CreateOptOutListError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_opt_out_list::CreateOptOutListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_opt_out_list::CreateOptOutListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_opt_out_list::CreateOptOutListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_pool::CreatePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_pool::CreatePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_pool::CreatePoolError> for Error {
    fn from(err: crate::operation::create_pool::CreatePoolError) -> Self {
        match err {
            crate::operation::create_pool::CreatePoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_pool::CreatePoolError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_pool::CreatePoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_pool::CreatePoolError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_pool::CreatePoolError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_pool::CreatePoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_pool::CreatePoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_pool::CreatePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_configuration_set::DeleteConfigurationSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_configuration_set::DeleteConfigurationSetError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configuration_set::DeleteConfigurationSetError> for Error {
    fn from(err: crate::operation::delete_configuration_set::DeleteConfigurationSetError) -> Self {
        match err {
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError> for Error {
    fn from(err: crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError) -> Self {
        match err {
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_default_message_type::DeleteDefaultMessageTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError> for Error {
    fn from(err: crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError) -> Self {
        match err {
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_default_sender_id::DeleteDefaultSenderIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_destination::DeleteEventDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_destination::DeleteEventDestinationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_event_destination::DeleteEventDestinationError> for Error {
    fn from(err: crate::operation::delete_event_destination::DeleteEventDestinationError) -> Self {
        match err {
            crate::operation::delete_event_destination::DeleteEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_event_destination::DeleteEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_event_destination::DeleteEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_event_destination::DeleteEventDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_event_destination::DeleteEventDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_event_destination::DeleteEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_keyword::DeleteKeywordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_keyword::DeleteKeywordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_keyword::DeleteKeywordError> for Error {
    fn from(err: crate::operation::delete_keyword::DeleteKeywordError) -> Self {
        match err {
            crate::operation::delete_keyword::DeleteKeywordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_keyword::DeleteKeywordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_opted_out_number::DeleteOptedOutNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_opted_out_number::DeleteOptedOutNumberError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_opted_out_number::DeleteOptedOutNumberError> for Error {
    fn from(err: crate::operation::delete_opted_out_number::DeleteOptedOutNumberError) -> Self {
        match err {
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_opted_out_number::DeleteOptedOutNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_opt_out_list::DeleteOptOutListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_opt_out_list::DeleteOptOutListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_opt_out_list::DeleteOptOutListError> for Error {
    fn from(err: crate::operation::delete_opt_out_list::DeleteOptOutListError) -> Self {
        match err {
            crate::operation::delete_opt_out_list::DeleteOptOutListError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_opt_out_list::DeleteOptOutListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_pool::DeletePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_pool::DeletePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_pool::DeletePoolError> for Error {
    fn from(err: crate::operation::delete_pool::DeletePoolError) -> Self {
        match err {
            crate::operation::delete_pool::DeletePoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_pool::DeletePoolError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_pool::DeletePoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_pool::DeletePoolError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_pool::DeletePoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_pool::DeletePoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_pool::DeletePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_text_message_spend_limit_override::DeleteTextMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_voice_message_spend_limit_override::DeleteVoiceMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_account_attributes::DescribeAccountAttributesError> for Error {
    fn from(err: crate::operation::describe_account_attributes::DescribeAccountAttributesError) -> Self {
        match err {
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_limits::DescribeAccountLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_limits::DescribeAccountLimitsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_account_limits::DescribeAccountLimitsError> for Error {
    fn from(err: crate::operation::describe_account_limits::DescribeAccountLimitsError) -> Self {
        match err {
            crate::operation::describe_account_limits::DescribeAccountLimitsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_account_limits::DescribeAccountLimitsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_account_limits::DescribeAccountLimitsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_account_limits::DescribeAccountLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_account_limits::DescribeAccountLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_configuration_sets::DescribeConfigurationSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_configuration_sets::DescribeConfigurationSetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_configuration_sets::DescribeConfigurationSetsError> for Error {
    fn from(err: crate::operation::describe_configuration_sets::DescribeConfigurationSetsError) -> Self {
        match err {
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_configuration_sets::DescribeConfigurationSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_keywords::DescribeKeywordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_keywords::DescribeKeywordsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_keywords::DescribeKeywordsError> for Error {
    fn from(err: crate::operation::describe_keywords::DescribeKeywordsError) -> Self {
        match err {
            crate::operation::describe_keywords::DescribeKeywordsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_keywords::DescribeKeywordsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_keywords::DescribeKeywordsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_keywords::DescribeKeywordsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_keywords::DescribeKeywordsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_keywords::DescribeKeywordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError> for Error {
    fn from(err: crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError) -> Self {
        match err {
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_opt_out_lists::DescribeOptOutListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_opt_out_lists::DescribeOptOutListsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_opt_out_lists::DescribeOptOutListsError> for Error {
    fn from(err: crate::operation::describe_opt_out_lists::DescribeOptOutListsError) -> Self {
        match err {
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_opt_out_lists::DescribeOptOutListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_phone_numbers::DescribePhoneNumbersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_phone_numbers::DescribePhoneNumbersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_phone_numbers::DescribePhoneNumbersError> for Error {
    fn from(err: crate::operation::describe_phone_numbers::DescribePhoneNumbersError) -> Self {
        match err {
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_phone_numbers::DescribePhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_pools::DescribePoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_pools::DescribePoolsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_pools::DescribePoolsError> for Error {
    fn from(err: crate::operation::describe_pools::DescribePoolsError) -> Self {
        match err {
            crate::operation::describe_pools::DescribePoolsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_pools::DescribePoolsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_pools::DescribePoolsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_pools::DescribePoolsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_pools::DescribePoolsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_pools::DescribePoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_sender_ids::DescribeSenderIdsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_sender_ids::DescribeSenderIdsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_sender_ids::DescribeSenderIdsError> for Error {
    fn from(err: crate::operation::describe_sender_ids::DescribeSenderIdsError) -> Self {
        match err {
            crate::operation::describe_sender_ids::DescribeSenderIdsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_sender_ids::DescribeSenderIdsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_sender_ids::DescribeSenderIdsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_sender_ids::DescribeSenderIdsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_sender_ids::DescribeSenderIdsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_sender_ids::DescribeSenderIdsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_spend_limits::DescribeSpendLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_spend_limits::DescribeSpendLimitsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_spend_limits::DescribeSpendLimitsError> for Error {
    fn from(err: crate::operation::describe_spend_limits::DescribeSpendLimitsError) -> Self {
        match err {
            crate::operation::describe_spend_limits::DescribeSpendLimitsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_spend_limits::DescribeSpendLimitsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_spend_limits::DescribeSpendLimitsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_spend_limits::DescribeSpendLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_spend_limits::DescribeSpendLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError> for Error {
    fn from(err: crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError) -> Self {
        match err {
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_origination_identity::DisassociateOriginationIdentityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError> for Error {
    fn from(err: crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError) -> Self {
        match err {
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_keyword::PutKeywordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_keyword::PutKeywordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_keyword::PutKeywordError> for Error {
    fn from(err: crate::operation::put_keyword::PutKeywordError) -> Self {
        match err {
            crate::operation::put_keyword::PutKeywordError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_keyword::PutKeywordError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_keyword::PutKeywordError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_keyword::PutKeywordError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_keyword::PutKeywordError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_keyword::PutKeywordError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_keyword::PutKeywordError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_keyword::PutKeywordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_opted_out_number::PutOptedOutNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_opted_out_number::PutOptedOutNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_opted_out_number::PutOptedOutNumberError> for Error {
    fn from(err: crate::operation::put_opted_out_number::PutOptedOutNumberError) -> Self {
        match err {
            crate::operation::put_opted_out_number::PutOptedOutNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_opted_out_number::PutOptedOutNumberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_opted_out_number::PutOptedOutNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_opted_out_number::PutOptedOutNumberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_opted_out_number::PutOptedOutNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_opted_out_number::PutOptedOutNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::release_phone_number::ReleasePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::release_phone_number::ReleasePhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::release_phone_number::ReleasePhoneNumberError> for Error {
    fn from(err: crate::operation::release_phone_number::ReleasePhoneNumberError) -> Self {
        match err {
            crate::operation::release_phone_number::ReleasePhoneNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::release_phone_number::ReleasePhoneNumberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::release_phone_number::ReleasePhoneNumberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::release_phone_number::ReleasePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::release_phone_number::ReleasePhoneNumberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::release_phone_number::ReleasePhoneNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::release_phone_number::ReleasePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::request_phone_number::RequestPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::request_phone_number::RequestPhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::request_phone_number::RequestPhoneNumberError> for Error {
    fn from(err: crate::operation::request_phone_number::RequestPhoneNumberError) -> Self {
        match err {
            crate::operation::request_phone_number::RequestPhoneNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::request_phone_number::RequestPhoneNumberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::request_phone_number::RequestPhoneNumberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::request_phone_number::RequestPhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::request_phone_number::RequestPhoneNumberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::request_phone_number::RequestPhoneNumberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::request_phone_number::RequestPhoneNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::request_phone_number::RequestPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_text_message::SendTextMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_text_message::SendTextMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_text_message::SendTextMessageError> for Error {
    fn from(err: crate::operation::send_text_message::SendTextMessageError) -> Self {
        match err {
            crate::operation::send_text_message::SendTextMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_text_message::SendTextMessageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::send_text_message::SendTextMessageError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::send_text_message::SendTextMessageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::send_text_message::SendTextMessageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::send_text_message::SendTextMessageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::send_text_message::SendTextMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_text_message::SendTextMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_voice_message::SendVoiceMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::send_voice_message::SendVoiceMessageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_voice_message::SendVoiceMessageError> for Error {
    fn from(err: crate::operation::send_voice_message::SendVoiceMessageError) -> Self {
        match err {
            crate::operation::send_voice_message::SendVoiceMessageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::send_voice_message::SendVoiceMessageError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::send_voice_message::SendVoiceMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_default_message_type::SetDefaultMessageTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_default_message_type::SetDefaultMessageTypeError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_default_message_type::SetDefaultMessageTypeError> for Error {
    fn from(err: crate::operation::set_default_message_type::SetDefaultMessageTypeError) -> Self {
        match err {
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::set_default_message_type::SetDefaultMessageTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_default_sender_id::SetDefaultSenderIdError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::set_default_sender_id::SetDefaultSenderIdError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_default_sender_id::SetDefaultSenderIdError> for Error {
    fn from(err: crate::operation::set_default_sender_id::SetDefaultSenderIdError) -> Self {
        match err {
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::set_default_sender_id::SetDefaultSenderIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::set_text_message_spend_limit_override::SetTextMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::set_voice_message_spend_limit_override::SetVoiceMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_destination::UpdateEventDestinationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_event_destination::UpdateEventDestinationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_event_destination::UpdateEventDestinationError> for Error {
    fn from(err: crate::operation::update_event_destination::UpdateEventDestinationError) -> Self {
        match err {
            crate::operation::update_event_destination::UpdateEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_event_destination::UpdateEventDestinationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_event_destination::UpdateEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_event_destination::UpdateEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_event_destination::UpdateEventDestinationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_event_destination::UpdateEventDestinationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_event_destination::UpdateEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_phone_number::UpdatePhoneNumberError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_phone_number::UpdatePhoneNumberError> for Error {
    fn from(err: crate::operation::update_phone_number::UpdatePhoneNumberError) -> Self {
        match err {
            crate::operation::update_phone_number::UpdatePhoneNumberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_phone_number::UpdatePhoneNumberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_phone_number::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pool::UpdatePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_pool::UpdatePoolError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_pool::UpdatePoolError> for Error {
    fn from(err: crate::operation::update_pool::UpdatePoolError) -> Self {
        match err {
            crate::operation::update_pool::UpdatePoolError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_pool::UpdatePoolError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_pool::UpdatePoolError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_pool::UpdatePoolError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_pool::UpdatePoolError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_pool::UpdatePoolError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_pool::UpdatePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
