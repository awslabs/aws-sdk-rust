// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was denied because you don't have sufficient permissions to access the resource.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>Your request has conflicting operations. This can occur if you're trying to perform more than one operation on the same resource at the same time or it could be that the requested action isn't valid for the current state or configuration of the resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The API encountered an unexpected error and couldn't complete the request. You might be able to successfully issue the request again in the future.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>A requested resource couldn't be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request would cause a service quota to be exceeded.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>An error that occurred because too many requests were sent during a certain amount of time.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>A validation exception for a field.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateOriginationIdentityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateOriginationIdentityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateOriginationIdentityError> for Error {
    fn from(err: crate::error::AssociateOriginationIdentityError) -> Self {
        match err {
            crate::error::AssociateOriginationIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociateOriginationIdentityError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateOriginationIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::AssociateOriginationIdentityError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateOriginationIdentityError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::error::AssociateOriginationIdentityError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::AssociateOriginationIdentityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociateOriginationIdentityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConfigurationSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConfigurationSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConfigurationSetError> for Error {
    fn from(err: crate::error::CreateConfigurationSetError) -> Self {
        match err {
            crate::error::CreateConfigurationSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateConfigurationSetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateConfigurationSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateConfigurationSetError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateConfigurationSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateConfigurationSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventDestinationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventDestinationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventDestinationError> for Error {
    fn from(err: crate::error::CreateEventDestinationError) -> Self {
        match err {
            crate::error::CreateEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateEventDestinationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateEventDestinationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateEventDestinationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateEventDestinationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOptOutListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOptOutListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOptOutListError> for Error {
    fn from(err: crate::error::CreateOptOutListError) -> Self {
        match err {
            crate::error::CreateOptOutListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateOptOutListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateOptOutListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateOptOutListError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateOptOutListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateOptOutListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateOptOutListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePoolError> for Error {
    fn from(err: crate::error::CreatePoolError) -> Self {
        match err {
            crate::error::CreatePoolError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePoolError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreatePoolError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreatePoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreatePoolError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreatePoolError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreatePoolError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConfigurationSetError> for Error {
    fn from(err: crate::error::DeleteConfigurationSetError) -> Self {
        match err {
            crate::error::DeleteConfigurationSetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteConfigurationSetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteConfigurationSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteConfigurationSetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteConfigurationSetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDefaultMessageTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDefaultMessageTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDefaultMessageTypeError> for Error {
    fn from(err: crate::error::DeleteDefaultMessageTypeError) -> Self {
        match err {
            crate::error::DeleteDefaultMessageTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDefaultMessageTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDefaultMessageTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDefaultMessageTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDefaultMessageTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDefaultMessageTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDefaultSenderIdError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDefaultSenderIdError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDefaultSenderIdError> for Error {
    fn from(err: crate::error::DeleteDefaultSenderIdError) -> Self {
        match err {
            crate::error::DeleteDefaultSenderIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteDefaultSenderIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteDefaultSenderIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDefaultSenderIdError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteDefaultSenderIdError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDefaultSenderIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventDestinationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventDestinationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventDestinationError> for Error {
    fn from(err: crate::error::DeleteEventDestinationError) -> Self {
        match err {
            crate::error::DeleteEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteEventDestinationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteEventDestinationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteKeywordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteKeywordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteKeywordError> for Error {
    fn from(err: crate::error::DeleteKeywordError) -> Self {
        match err {
            crate::error::DeleteKeywordError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteKeywordError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteKeywordError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteKeywordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteKeywordError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteKeywordError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteKeywordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOptedOutNumberError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOptedOutNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOptedOutNumberError> for Error {
    fn from(err: crate::error::DeleteOptedOutNumberError) -> Self {
        match err {
            crate::error::DeleteOptedOutNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteOptedOutNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteOptedOutNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteOptedOutNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteOptedOutNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteOptedOutNumberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteOptedOutNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOptOutListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOptOutListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOptOutListError> for Error {
    fn from(err: crate::error::DeleteOptOutListError) -> Self {
        match err {
            crate::error::DeleteOptOutListError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteOptOutListError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteOptOutListError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteOptOutListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteOptOutListError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteOptOutListError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteOptOutListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePoolError> for Error {
    fn from(err: crate::error::DeletePoolError) -> Self {
        match err {
            crate::error::DeletePoolError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePoolError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePoolError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeletePoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePoolError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeletePoolError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteTextMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteTextMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTextMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::error::DeleteTextMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::error::DeleteTextMessageSpendLimitOverrideError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DeleteTextMessageSpendLimitOverrideError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeleteTextMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteTextMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteTextMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceMessageSpendLimitOverrideError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteVoiceMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVoiceMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::error::DeleteVoiceMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::error::DeleteVoiceMessageSpendLimitOverrideError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DeleteVoiceMessageSpendLimitOverrideError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::DeleteVoiceMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteVoiceMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteVoiceMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountAttributesError> for Error {
    fn from(err: crate::error::DescribeAccountAttributesError) -> Self {
        match err {
            crate::error::DescribeAccountAttributesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccountAttributesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeAccountAttributesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccountAttributesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeAccountAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountLimitsError> for Error {
    fn from(err: crate::error::DescribeAccountLimitsError) -> Self {
        match err {
            crate::error::DescribeAccountLimitsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeAccountLimitsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeAccountLimitsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeAccountLimitsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeAccountLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationSetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConfigurationSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConfigurationSetsError> for Error {
    fn from(err: crate::error::DescribeConfigurationSetsError) -> Self {
        match err {
            crate::error::DescribeConfigurationSetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeConfigurationSetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeConfigurationSetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeConfigurationSetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeConfigurationSetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeConfigurationSetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeKeywordsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeKeywordsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeKeywordsError> for Error {
    fn from(err: crate::error::DescribeKeywordsError) -> Self {
        match err {
            crate::error::DescribeKeywordsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeKeywordsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeKeywordsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeKeywordsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeKeywordsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeKeywordsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOptedOutNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOptedOutNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOptedOutNumbersError> for Error {
    fn from(err: crate::error::DescribeOptedOutNumbersError) -> Self {
        match err {
            crate::error::DescribeOptedOutNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeOptedOutNumbersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeOptedOutNumbersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeOptedOutNumbersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeOptedOutNumbersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeOptedOutNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOptOutListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOptOutListsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOptOutListsError> for Error {
    fn from(err: crate::error::DescribeOptOutListsError) -> Self {
        match err {
            crate::error::DescribeOptOutListsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeOptOutListsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeOptOutListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeOptOutListsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeOptOutListsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeOptOutListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePhoneNumbersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePhoneNumbersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePhoneNumbersError> for Error {
    fn from(err: crate::error::DescribePhoneNumbersError) -> Self {
        match err {
            crate::error::DescribePhoneNumbersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePhoneNumbersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePhoneNumbersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePhoneNumbersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePhoneNumbersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePhoneNumbersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribePoolsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePoolsError> for Error {
    fn from(err: crate::error::DescribePoolsError) -> Self {
        match err {
            crate::error::DescribePoolsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePoolsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribePoolsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePoolsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribePoolsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSenderIdsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSenderIdsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSenderIdsError> for Error {
    fn from(err: crate::error::DescribeSenderIdsError) -> Self {
        match err {
            crate::error::DescribeSenderIdsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeSenderIdsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSenderIdsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSenderIdsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSenderIdsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeSenderIdsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSpendLimitsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSpendLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSpendLimitsError> for Error {
    fn from(err: crate::error::DescribeSpendLimitsError) -> Self {
        match err {
            crate::error::DescribeSpendLimitsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeSpendLimitsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSpendLimitsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSpendLimitsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeSpendLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateOriginationIdentityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateOriginationIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateOriginationIdentityError> for Error {
    fn from(err: crate::error::DisassociateOriginationIdentityError) -> Self {
        match err {
            crate::error::DisassociateOriginationIdentityError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisassociateOriginationIdentityError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateOriginationIdentityError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisassociateOriginationIdentityError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateOriginationIdentityError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisassociateOriginationIdentityError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DisassociateOriginationIdentityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPoolOriginationIdentitiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPoolOriginationIdentitiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPoolOriginationIdentitiesError> for Error {
    fn from(err: crate::error::ListPoolOriginationIdentitiesError) -> Self {
        match err {
            crate::error::ListPoolOriginationIdentitiesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPoolOriginationIdentitiesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListPoolOriginationIdentitiesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPoolOriginationIdentitiesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListPoolOriginationIdentitiesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPoolOriginationIdentitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutKeywordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutKeywordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutKeywordError> for Error {
    fn from(err: crate::error::PutKeywordError) -> Self {
        match err {
            crate::error::PutKeywordError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutKeywordError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutKeywordError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutKeywordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutKeywordError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::PutKeywordError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutKeywordError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutKeywordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutOptedOutNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutOptedOutNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutOptedOutNumberError> for Error {
    fn from(err: crate::error::PutOptedOutNumberError) -> Self {
        match err {
            crate::error::PutOptedOutNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::PutOptedOutNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::PutOptedOutNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutOptedOutNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::PutOptedOutNumberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PutOptedOutNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReleasePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReleasePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReleasePhoneNumberError> for Error {
    fn from(err: crate::error::ReleasePhoneNumberError) -> Self {
        match err {
            crate::error::ReleasePhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReleasePhoneNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ReleasePhoneNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ReleasePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReleasePhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ReleasePhoneNumberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ReleasePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RequestPhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RequestPhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RequestPhoneNumberError> for Error {
    fn from(err: crate::error::RequestPhoneNumberError) -> Self {
        match err {
            crate::error::RequestPhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RequestPhoneNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RequestPhoneNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RequestPhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RequestPhoneNumberError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::RequestPhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RequestPhoneNumberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RequestPhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendTextMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SendTextMessageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendTextMessageError> for Error {
    fn from(err: crate::error::SendTextMessageError) -> Self {
        match err {
            crate::error::SendTextMessageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendTextMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SendTextMessageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendTextMessageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SendTextMessageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::SendTextMessageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendTextMessageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendTextMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendVoiceMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendVoiceMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendVoiceMessageError> for Error {
    fn from(err: crate::error::SendVoiceMessageError) -> Self {
        match err {
            crate::error::SendVoiceMessageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SendVoiceMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SendVoiceMessageError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SendVoiceMessageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SendVoiceMessageError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::SendVoiceMessageError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SendVoiceMessageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SendVoiceMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetDefaultMessageTypeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetDefaultMessageTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetDefaultMessageTypeError> for Error {
    fn from(err: crate::error::SetDefaultMessageTypeError) -> Self {
        match err {
            crate::error::SetDefaultMessageTypeError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetDefaultMessageTypeError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SetDefaultMessageTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetDefaultMessageTypeError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SetDefaultMessageTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SetDefaultMessageTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetDefaultSenderIdError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetDefaultSenderIdError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetDefaultSenderIdError> for Error {
    fn from(err: crate::error::SetDefaultSenderIdError) -> Self {
        match err {
            crate::error::SetDefaultSenderIdError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetDefaultSenderIdError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SetDefaultSenderIdError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetDefaultSenderIdError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SetDefaultSenderIdError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SetDefaultSenderIdError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::SetTextMessageSpendLimitOverrideError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::SetTextMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetTextMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::error::SetTextMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::error::SetTextMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetTextMessageSpendLimitOverrideError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SetTextMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SetTextMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SetTextMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::SetVoiceMessageSpendLimitOverrideError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::SetVoiceMessageSpendLimitOverrideError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetVoiceMessageSpendLimitOverrideError> for Error {
    fn from(err: crate::error::SetVoiceMessageSpendLimitOverrideError) -> Self {
        match err {
            crate::error::SetVoiceMessageSpendLimitOverrideError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::SetVoiceMessageSpendLimitOverrideError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::error::SetVoiceMessageSpendLimitOverrideError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SetVoiceMessageSpendLimitOverrideError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::SetVoiceMessageSpendLimitOverrideError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEventDestinationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEventDestinationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEventDestinationError> for Error {
    fn from(err: crate::error::UpdateEventDestinationError) -> Self {
        match err {
            crate::error::UpdateEventDestinationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateEventDestinationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateEventDestinationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateEventDestinationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateEventDestinationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateEventDestinationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdatePhoneNumberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePhoneNumberError> for Error {
    fn from(err: crate::error::UpdatePhoneNumberError) -> Self {
        match err {
            crate::error::UpdatePhoneNumberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePhoneNumberError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePhoneNumberError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdatePhoneNumberError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePhoneNumberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePhoneNumberError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePhoneNumberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePoolError> for Error {
    fn from(err: crate::error::UpdatePoolError) -> Self {
        match err {
            crate::error::UpdatePoolError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePoolError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdatePoolError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdatePoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePoolError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdatePoolError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
