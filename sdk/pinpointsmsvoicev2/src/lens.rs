// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_account_attributes_output_next_token(
    input: &crate::operation::describe_account_attributes::DescribeAccountAttributesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_account_limits_output_next_token(
    input: &crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_configuration_sets_output_next_token(
    input: &crate::operation::describe_configuration_sets::DescribeConfigurationSetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_keywords_output_next_token(
    input: &crate::operation::describe_keywords::DescribeKeywordsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_opt_out_lists_output_next_token(
    input: &crate::operation::describe_opt_out_lists::DescribeOptOutListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_opted_out_numbers_output_next_token(
    input: &crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_phone_numbers_output_next_token(
    input: &crate::operation::describe_phone_numbers::DescribePhoneNumbersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_pools_output_next_token(
    input: &crate::operation::describe_pools::DescribePoolsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_sender_ids_output_next_token(
    input: &crate::operation::describe_sender_ids::DescribeSenderIdsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_spend_limits_output_next_token(
    input: &crate::operation::describe_spend_limits::DescribeSpendLimitsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_pool_origination_identities_output_next_token(
    input: &crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_account_attributes_output_account_attributes(
    input: crate::operation::describe_account_attributes::DescribeAccountAttributesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AccountAttribute>> {
    let input = match input.account_attributes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_account_limits_output_account_limits(
    input: crate::operation::describe_account_limits::DescribeAccountLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AccountLimit>> {
    let input = match input.account_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_configuration_sets_output_configuration_sets(
    input: crate::operation::describe_configuration_sets::DescribeConfigurationSetsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ConfigurationSetInformation>> {
    let input = match input.configuration_sets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_keywords_output_keywords(
    input: crate::operation::describe_keywords::DescribeKeywordsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::KeywordInformation>> {
    let input = match input.keywords {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_opt_out_lists_output_opt_out_lists(
    input: crate::operation::describe_opt_out_lists::DescribeOptOutListsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OptOutListInformation>> {
    let input = match input.opt_out_lists {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_opted_out_numbers_output_opted_out_numbers(
    input: crate::operation::describe_opted_out_numbers::DescribeOptedOutNumbersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OptedOutNumberInformation>> {
    let input = match input.opted_out_numbers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_phone_numbers_output_phone_numbers(
    input: crate::operation::describe_phone_numbers::DescribePhoneNumbersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PhoneNumberInformation>> {
    let input = match input.phone_numbers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_pools_output_pools(
    input: crate::operation::describe_pools::DescribePoolsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PoolInformation>> {
    let input = match input.pools {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_sender_ids_output_sender_ids(
    input: crate::operation::describe_sender_ids::DescribeSenderIdsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SenderIdInformation>> {
    let input = match input.sender_ids {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_spend_limits_output_spend_limits(
    input: crate::operation::describe_spend_limits::DescribeSpendLimitsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SpendLimit>> {
    let input = match input.spend_limits {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_pool_origination_identities_output_origination_identities(
    input: crate::operation::list_pool_origination_identities::ListPoolOriginationIdentitiesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::OriginationIdentityMetadata>> {
    let input = match input.origination_identities {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
