// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RequestPhoneNumberOutput {
    /// <p>The Amazon Resource Name (ARN) of the requested phone number.</p>
    #[doc(hidden)]
    pub phone_number_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the new phone number.</p>
    #[doc(hidden)]
    pub phone_number_id: std::option::Option<std::string::String>,
    /// <p>The new phone number that was requested.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>The current status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NumberStatus>,
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    #[doc(hidden)]
    pub iso_country_code: std::option::Option<std::string::String>,
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>Indicates if the phone number will be used for text messages, voice messages or both. </p>
    #[doc(hidden)]
    pub number_capabilities: std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    /// <p>The type of number that was released.</p>
    #[doc(hidden)]
    pub number_type: std::option::Option<crate::types::RequestableNumberType>,
    /// <p>The monthly price, in US dollars, to lease the phone number.</p>
    #[doc(hidden)]
    pub monthly_leasing_price: std::option::Option<std::string::String>,
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    #[doc(hidden)]
    pub two_way_enabled: bool,
    /// <p>The ARN used to identify the two way channel.</p>
    #[doc(hidden)]
    pub two_way_channel_arn: std::option::Option<std::string::String>,
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    #[doc(hidden)]
    pub self_managed_opt_outs_enabled: bool,
    /// <p>The name of the OptOutList that is associated with the requested phone number.</p>
    #[doc(hidden)]
    pub opt_out_list_name: std::option::Option<std::string::String>,
    /// <p>By default this is set to false. When set to true the phone number can't be deleted. </p>
    #[doc(hidden)]
    pub deletion_protection_enabled: bool,
    /// <p>The unique identifier of the pool associated with the phone number </p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>An array of key and value pair tags that are associated with the phone number.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl RequestPhoneNumberOutput {
    /// <p>The Amazon Resource Name (ARN) of the requested phone number.</p>
    pub fn phone_number_arn(&self) -> std::option::Option<&str> {
        self.phone_number_arn.as_deref()
    }
    /// <p>The unique identifier of the new phone number.</p>
    pub fn phone_number_id(&self) -> std::option::Option<&str> {
        self.phone_number_id.as_deref()
    }
    /// <p>The new phone number that was requested.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The current status of the request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NumberStatus> {
        self.status.as_ref()
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn iso_country_code(&self) -> std::option::Option<&str> {
        self.iso_country_code.as_deref()
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>Indicates if the phone number will be used for text messages, voice messages or both. </p>
    pub fn number_capabilities(&self) -> std::option::Option<&[crate::types::NumberCapability]> {
        self.number_capabilities.as_deref()
    }
    /// <p>The type of number that was released.</p>
    pub fn number_type(&self) -> std::option::Option<&crate::types::RequestableNumberType> {
        self.number_type.as_ref()
    }
    /// <p>The monthly price, in US dollars, to lease the phone number.</p>
    pub fn monthly_leasing_price(&self) -> std::option::Option<&str> {
        self.monthly_leasing_price.as_deref()
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(&self) -> bool {
        self.two_way_enabled
    }
    /// <p>The ARN used to identify the two way channel.</p>
    pub fn two_way_channel_arn(&self) -> std::option::Option<&str> {
        self.two_way_channel_arn.as_deref()
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(&self) -> bool {
        self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList that is associated with the requested phone number.</p>
    pub fn opt_out_list_name(&self) -> std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>By default this is set to false. When set to true the phone number can't be deleted. </p>
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
    /// <p>The unique identifier of the pool associated with the phone number </p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>An array of key and value pair tags that are associated with the phone number.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for RequestPhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RequestPhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`RequestPhoneNumberOutput`](crate::operation::request_phone_number::RequestPhoneNumberOutput).
    pub fn builder(
    ) -> crate::operation::request_phone_number::builders::RequestPhoneNumberOutputBuilder {
        crate::operation::request_phone_number::builders::RequestPhoneNumberOutputBuilder::default()
    }
}

/// A builder for [`RequestPhoneNumberOutput`](crate::operation::request_phone_number::RequestPhoneNumberOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RequestPhoneNumberOutputBuilder {
    pub(crate) phone_number_arn: std::option::Option<std::string::String>,
    pub(crate) phone_number_id: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::NumberStatus>,
    pub(crate) iso_country_code: std::option::Option<std::string::String>,
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) number_capabilities:
        std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    pub(crate) number_type: std::option::Option<crate::types::RequestableNumberType>,
    pub(crate) monthly_leasing_price: std::option::Option<std::string::String>,
    pub(crate) two_way_enabled: std::option::Option<bool>,
    pub(crate) two_way_channel_arn: std::option::Option<std::string::String>,
    pub(crate) self_managed_opt_outs_enabled: std::option::Option<bool>,
    pub(crate) opt_out_list_name: std::option::Option<std::string::String>,
    pub(crate) deletion_protection_enabled: std::option::Option<bool>,
    pub(crate) pool_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl RequestPhoneNumberOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the requested phone number.</p>
    pub fn phone_number_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the requested phone number.</p>
    pub fn set_phone_number_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_arn = input;
        self
    }
    /// <p>The unique identifier of the new phone number.</p>
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the new phone number.</p>
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_id = input;
        self
    }
    /// <p>The new phone number that was requested.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The new phone number that was requested.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn status(mut self, input: crate::types::NumberStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::NumberStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn iso_country_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.iso_country_code = Some(input.into());
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn set_iso_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iso_country_code = input;
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// Appends an item to `number_capabilities`.
    ///
    /// To override the contents of this collection use [`set_number_capabilities`](Self::set_number_capabilities).
    ///
    /// <p>Indicates if the phone number will be used for text messages, voice messages or both. </p>
    pub fn number_capabilities(mut self, input: crate::types::NumberCapability) -> Self {
        let mut v = self.number_capabilities.unwrap_or_default();
        v.push(input);
        self.number_capabilities = Some(v);
        self
    }
    /// <p>Indicates if the phone number will be used for text messages, voice messages or both. </p>
    pub fn set_number_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    ) -> Self {
        self.number_capabilities = input;
        self
    }
    /// <p>The type of number that was released.</p>
    pub fn number_type(mut self, input: crate::types::RequestableNumberType) -> Self {
        self.number_type = Some(input);
        self
    }
    /// <p>The type of number that was released.</p>
    pub fn set_number_type(
        mut self,
        input: std::option::Option<crate::types::RequestableNumberType>,
    ) -> Self {
        self.number_type = input;
        self
    }
    /// <p>The monthly price, in US dollars, to lease the phone number.</p>
    pub fn monthly_leasing_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.monthly_leasing_price = Some(input.into());
        self
    }
    /// <p>The monthly price, in US dollars, to lease the phone number.</p>
    pub fn set_monthly_leasing_price(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monthly_leasing_price = input;
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(mut self, input: bool) -> Self {
        self.two_way_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn set_two_way_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.two_way_enabled = input;
        self
    }
    /// <p>The ARN used to identify the two way channel.</p>
    pub fn two_way_channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.two_way_channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN used to identify the two way channel.</p>
    pub fn set_two_way_channel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.two_way_channel_arn = input;
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(mut self, input: bool) -> Self {
        self.self_managed_opt_outs_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn set_self_managed_opt_outs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.self_managed_opt_outs_enabled = input;
        self
    }
    /// <p>The name of the OptOutList that is associated with the requested phone number.</p>
    pub fn opt_out_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.opt_out_list_name = Some(input.into());
        self
    }
    /// <p>The name of the OptOutList that is associated with the requested phone number.</p>
    pub fn set_opt_out_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>By default this is set to false. When set to true the phone number can't be deleted. </p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When set to true the phone number can't be deleted. </p>
    pub fn set_deletion_protection_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// <p>The unique identifier of the pool associated with the phone number </p>
    pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the pool associated with the phone number </p>
    pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of key and value pair tags that are associated with the phone number.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An array of key and value pair tags that are associated with the phone number.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RequestPhoneNumberOutput`](crate::operation::request_phone_number::RequestPhoneNumberOutput).
    pub fn build(self) -> crate::operation::request_phone_number::RequestPhoneNumberOutput {
        crate::operation::request_phone_number::RequestPhoneNumberOutput {
            phone_number_arn: self.phone_number_arn,
            phone_number_id: self.phone_number_id,
            phone_number: self.phone_number,
            status: self.status,
            iso_country_code: self.iso_country_code,
            message_type: self.message_type,
            number_capabilities: self.number_capabilities,
            number_type: self.number_type,
            monthly_leasing_price: self.monthly_leasing_price,
            two_way_enabled: self.two_way_enabled.unwrap_or_default(),
            two_way_channel_arn: self.two_way_channel_arn,
            self_managed_opt_outs_enabled: self.self_managed_opt_outs_enabled.unwrap_or_default(),
            opt_out_list_name: self.opt_out_list_name,
            deletion_protection_enabled: self.deletion_protection_enabled.unwrap_or_default(),
            pool_id: self.pool_id,
            tags: self.tags,
            created_timestamp: self.created_timestamp,
            _request_id: self._request_id,
        }
    }
}
