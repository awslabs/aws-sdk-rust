// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreatePoolOutput {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    #[doc(hidden)]
    pub pool_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the pool.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>The current status of the pool.</p>
    /// <ul>
    /// <li> <p>CREATING: The pool is currently being created and isn't yet available for use.</p> </li>
    /// <li> <p>ACTIVE: The pool is active and available for use.</p> </li>
    /// <li> <p>DELETING: The pool is being deleted.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PoolStatus>,
    /// <p>The type of message for the pool to use.</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    #[doc(hidden)]
    pub two_way_enabled: bool,
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    #[doc(hidden)]
    pub two_way_channel_arn: std::option::Option<std::string::String>,
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    #[doc(hidden)]
    pub self_managed_opt_outs_enabled: bool,
    /// <p>The name of the OptOutList associated with the pool.</p>
    #[doc(hidden)]
    pub opt_out_list_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether shared routes are enabled for the pool.</p>
    #[doc(hidden)]
    pub shared_routes_enabled: bool,
    /// <p>When set to true deletion protection is enabled. By default this is set to false. </p>
    #[doc(hidden)]
    pub deletion_protection_enabled: bool,
    /// <p>An array of tags (key and value pairs) associated with the pool.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreatePoolOutput {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn pool_arn(&self) -> std::option::Option<&str> {
        self.pool_arn.as_deref()
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>The current status of the pool.</p>
    /// <ul>
    /// <li> <p>CREATING: The pool is currently being created and isn't yet available for use.</p> </li>
    /// <li> <p>ACTIVE: The pool is active and available for use.</p> </li>
    /// <li> <p>DELETING: The pool is being deleted.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::PoolStatus> {
        self.status.as_ref()
    }
    /// <p>The type of message for the pool to use.</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(&self) -> bool {
        self.two_way_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(&self) -> std::option::Option<&str> {
        self.two_way_channel_arn.as_deref()
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(&self) -> bool {
        self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn opt_out_list_name(&self) -> std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>Indicates whether shared routes are enabled for the pool.</p>
    pub fn shared_routes_enabled(&self) -> bool {
        self.shared_routes_enabled
    }
    /// <p>When set to true deletion protection is enabled. By default this is set to false. </p>
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
    /// <p>An array of tags (key and value pairs) associated with the pool.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreatePoolOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreatePoolOutput {
    /// Creates a new builder-style object to manufacture [`CreatePoolOutput`](crate::operation::create_pool::CreatePoolOutput).
    pub fn builder() -> crate::operation::create_pool::builders::CreatePoolOutputBuilder {
        crate::operation::create_pool::builders::CreatePoolOutputBuilder::default()
    }
}

/// A builder for [`CreatePoolOutput`](crate::operation::create_pool::CreatePoolOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreatePoolOutputBuilder {
    pub(crate) pool_arn: std::option::Option<std::string::String>,
    pub(crate) pool_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::PoolStatus>,
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) two_way_enabled: std::option::Option<bool>,
    pub(crate) two_way_channel_arn: std::option::Option<std::string::String>,
    pub(crate) self_managed_opt_outs_enabled: std::option::Option<bool>,
    pub(crate) opt_out_list_name: std::option::Option<std::string::String>,
    pub(crate) shared_routes_enabled: std::option::Option<bool>,
    pub(crate) deletion_protection_enabled: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl CreatePoolOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn pool_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the pool.</p>
    pub fn set_pool_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_arn = input;
        self
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the pool.</p>
    pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The current status of the pool.</p>
    /// <ul>
    /// <li> <p>CREATING: The pool is currently being created and isn't yet available for use.</p> </li>
    /// <li> <p>ACTIVE: The pool is active and available for use.</p> </li>
    /// <li> <p>DELETING: The pool is being deleted.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::PoolStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the pool.</p>
    /// <ul>
    /// <li> <p>CREATING: The pool is currently being created and isn't yet available for use.</p> </li>
    /// <li> <p>ACTIVE: The pool is active and available for use.</p> </li>
    /// <li> <p>DELETING: The pool is being deleted.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::PoolStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The type of message for the pool to use.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The type of message for the pool to use.</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(mut self, input: bool) -> Self {
        self.two_way_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn set_two_way_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.two_way_enabled = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.two_way_channel_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn set_two_way_channel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.two_way_channel_arn = input;
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(mut self, input: bool) -> Self {
        self.self_managed_opt_outs_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn set_self_managed_opt_outs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.self_managed_opt_outs_enabled = input;
        self
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn opt_out_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.opt_out_list_name = Some(input.into());
        self
    }
    /// <p>The name of the OptOutList associated with the pool.</p>
    pub fn set_opt_out_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>Indicates whether shared routes are enabled for the pool.</p>
    pub fn shared_routes_enabled(mut self, input: bool) -> Self {
        self.shared_routes_enabled = Some(input);
        self
    }
    /// <p>Indicates whether shared routes are enabled for the pool.</p>
    pub fn set_shared_routes_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.shared_routes_enabled = input;
        self
    }
    /// <p>When set to true deletion protection is enabled. By default this is set to false. </p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = Some(input);
        self
    }
    /// <p>When set to true deletion protection is enabled. By default this is set to false. </p>
    pub fn set_deletion_protection_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of tags (key and value pairs) associated with the pool.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>An array of tags (key and value pairs) associated with the pool.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the pool was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreatePoolOutput`](crate::operation::create_pool::CreatePoolOutput).
    pub fn build(self) -> crate::operation::create_pool::CreatePoolOutput {
        crate::operation::create_pool::CreatePoolOutput {
            pool_arn: self.pool_arn,
            pool_id: self.pool_id,
            status: self.status,
            message_type: self.message_type,
            two_way_enabled: self.two_way_enabled.unwrap_or_default(),
            two_way_channel_arn: self.two_way_channel_arn,
            self_managed_opt_outs_enabled: self.self_managed_opt_outs_enabled.unwrap_or_default(),
            opt_out_list_name: self.opt_out_list_name,
            shared_routes_enabled: self.shared_routes_enabled.unwrap_or_default(),
            deletion_protection_enabled: self.deletion_protection_enabled.unwrap_or_default(),
            tags: self.tags,
            created_timestamp: self.created_timestamp,
            _request_id: self._request_id,
        }
    }
}
