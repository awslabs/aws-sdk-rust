// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePhoneNumberOutput {
    /// <p>The Amazon Resource Name (ARN) of the updated phone number.</p>
    #[doc(hidden)]
    pub phone_number_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the phone number.</p>
    #[doc(hidden)]
    pub phone_number_id: std::option::Option<std::string::String>,
    /// <p>The phone number that was updated.</p>
    #[doc(hidden)]
    pub phone_number: std::option::Option<std::string::String>,
    /// <p>The current status of the request.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::NumberStatus>,
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    #[doc(hidden)]
    pub iso_country_code: std::option::Option<std::string::String>,
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    #[doc(hidden)]
    pub message_type: std::option::Option<crate::types::MessageType>,
    /// <p>Specifies if the number could be used for text messages, voice or both.</p>
    #[doc(hidden)]
    pub number_capabilities: std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    /// <p>The type of number that was requested.</p>
    #[doc(hidden)]
    pub number_type: std::option::Option<crate::types::NumberType>,
    /// <p>The monthly leasing price of the phone number, in US dollars.</p>
    #[doc(hidden)]
    pub monthly_leasing_price: std::option::Option<std::string::String>,
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    #[doc(hidden)]
    pub two_way_enabled: bool,
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    #[doc(hidden)]
    pub two_way_channel_arn: std::option::Option<std::string::String>,
    /// <p>This is true if self managed opt-out are enabled.</p>
    #[doc(hidden)]
    pub self_managed_opt_outs_enabled: bool,
    /// <p>The name of the OptOutList associated with the phone number.</p>
    #[doc(hidden)]
    pub opt_out_list_name: std::option::Option<std::string::String>,
    /// <p>When set to true the phone number can't be deleted.</p>
    #[doc(hidden)]
    pub deletion_protection_enabled: bool,
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdatePhoneNumberOutput {
    /// <p>The Amazon Resource Name (ARN) of the updated phone number.</p>
    pub fn phone_number_arn(&self) -> std::option::Option<&str> {
        self.phone_number_arn.as_deref()
    }
    /// <p>The unique identifier of the phone number.</p>
    pub fn phone_number_id(&self) -> std::option::Option<&str> {
        self.phone_number_id.as_deref()
    }
    /// <p>The phone number that was updated.</p>
    pub fn phone_number(&self) -> std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The current status of the request.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::NumberStatus> {
        self.status.as_ref()
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn iso_country_code(&self) -> std::option::Option<&str> {
        self.iso_country_code.as_deref()
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(&self) -> std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>Specifies if the number could be used for text messages, voice or both.</p>
    pub fn number_capabilities(&self) -> std::option::Option<&[crate::types::NumberCapability]> {
        self.number_capabilities.as_deref()
    }
    /// <p>The type of number that was requested.</p>
    pub fn number_type(&self) -> std::option::Option<&crate::types::NumberType> {
        self.number_type.as_ref()
    }
    /// <p>The monthly leasing price of the phone number, in US dollars.</p>
    pub fn monthly_leasing_price(&self) -> std::option::Option<&str> {
        self.monthly_leasing_price.as_deref()
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(&self) -> bool {
        self.two_way_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(&self) -> std::option::Option<&str> {
        self.two_way_channel_arn.as_deref()
    }
    /// <p>This is true if self managed opt-out are enabled.</p>
    pub fn self_managed_opt_outs_enabled(&self) -> bool {
        self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList associated with the phone number.</p>
    pub fn opt_out_list_name(&self) -> std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>When set to true the phone number can't be deleted.</p>
    pub fn deletion_protection_enabled(&self) -> bool {
        self.deletion_protection_enabled
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdatePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdatePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`UpdatePhoneNumberOutput`](crate::operation::update_phone_number::UpdatePhoneNumberOutput).
    pub fn builder(
    ) -> crate::operation::update_phone_number::builders::UpdatePhoneNumberOutputBuilder {
        crate::operation::update_phone_number::builders::UpdatePhoneNumberOutputBuilder::default()
    }
}

/// A builder for [`UpdatePhoneNumberOutput`](crate::operation::update_phone_number::UpdatePhoneNumberOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePhoneNumberOutputBuilder {
    pub(crate) phone_number_arn: std::option::Option<std::string::String>,
    pub(crate) phone_number_id: std::option::Option<std::string::String>,
    pub(crate) phone_number: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::NumberStatus>,
    pub(crate) iso_country_code: std::option::Option<std::string::String>,
    pub(crate) message_type: std::option::Option<crate::types::MessageType>,
    pub(crate) number_capabilities:
        std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    pub(crate) number_type: std::option::Option<crate::types::NumberType>,
    pub(crate) monthly_leasing_price: std::option::Option<std::string::String>,
    pub(crate) two_way_enabled: std::option::Option<bool>,
    pub(crate) two_way_channel_arn: std::option::Option<std::string::String>,
    pub(crate) self_managed_opt_outs_enabled: std::option::Option<bool>,
    pub(crate) opt_out_list_name: std::option::Option<std::string::String>,
    pub(crate) deletion_protection_enabled: std::option::Option<bool>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl UpdatePhoneNumberOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the updated phone number.</p>
    pub fn phone_number_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the updated phone number.</p>
    pub fn set_phone_number_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_arn = input;
        self
    }
    /// <p>The unique identifier of the phone number.</p>
    pub fn phone_number_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the phone number.</p>
    pub fn set_phone_number_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number_id = input;
        self
    }
    /// <p>The phone number that was updated.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.phone_number = Some(input.into());
        self
    }
    /// <p>The phone number that was updated.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn status(mut self, input: crate::types::NumberStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::NumberStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn iso_country_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.iso_country_code = Some(input.into());
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region. </p>
    pub fn set_iso_country_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iso_country_code = input;
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = Some(input);
        self
    }
    /// <p>The type of message. Valid values are TRANSACTIONAL for messages that are critical or time-sensitive and PROMOTIONAL for messages that aren't critical or time-sensitive.</p>
    pub fn set_message_type(
        mut self,
        input: std::option::Option<crate::types::MessageType>,
    ) -> Self {
        self.message_type = input;
        self
    }
    /// Appends an item to `number_capabilities`.
    ///
    /// To override the contents of this collection use [`set_number_capabilities`](Self::set_number_capabilities).
    ///
    /// <p>Specifies if the number could be used for text messages, voice or both.</p>
    pub fn number_capabilities(mut self, input: crate::types::NumberCapability) -> Self {
        let mut v = self.number_capabilities.unwrap_or_default();
        v.push(input);
        self.number_capabilities = Some(v);
        self
    }
    /// <p>Specifies if the number could be used for text messages, voice or both.</p>
    pub fn set_number_capabilities(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NumberCapability>>,
    ) -> Self {
        self.number_capabilities = input;
        self
    }
    /// <p>The type of number that was requested.</p>
    pub fn number_type(mut self, input: crate::types::NumberType) -> Self {
        self.number_type = Some(input);
        self
    }
    /// <p>The type of number that was requested.</p>
    pub fn set_number_type(mut self, input: std::option::Option<crate::types::NumberType>) -> Self {
        self.number_type = input;
        self
    }
    /// <p>The monthly leasing price of the phone number, in US dollars.</p>
    pub fn monthly_leasing_price(mut self, input: impl Into<std::string::String>) -> Self {
        self.monthly_leasing_price = Some(input.into());
        self
    }
    /// <p>The monthly leasing price of the phone number, in US dollars.</p>
    pub fn set_monthly_leasing_price(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monthly_leasing_price = input;
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(mut self, input: bool) -> Self {
        self.two_way_enabled = Some(input);
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn set_two_way_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.two_way_enabled = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn two_way_channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.two_way_channel_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the two way channel.</p>
    pub fn set_two_way_channel_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.two_way_channel_arn = input;
        self
    }
    /// <p>This is true if self managed opt-out are enabled.</p>
    pub fn self_managed_opt_outs_enabled(mut self, input: bool) -> Self {
        self.self_managed_opt_outs_enabled = Some(input);
        self
    }
    /// <p>This is true if self managed opt-out are enabled.</p>
    pub fn set_self_managed_opt_outs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.self_managed_opt_outs_enabled = input;
        self
    }
    /// <p>The name of the OptOutList associated with the phone number.</p>
    pub fn opt_out_list_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.opt_out_list_name = Some(input.into());
        self
    }
    /// <p>The name of the OptOutList associated with the phone number.</p>
    pub fn set_opt_out_list_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>When set to true the phone number can't be deleted.</p>
    pub fn deletion_protection_enabled(mut self, input: bool) -> Self {
        self.deletion_protection_enabled = Some(input);
        self
    }
    /// <p>When set to true the phone number can't be deleted.</p>
    pub fn set_deletion_protection_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.deletion_protection_enabled = input;
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePhoneNumberOutput`](crate::operation::update_phone_number::UpdatePhoneNumberOutput).
    pub fn build(self) -> crate::operation::update_phone_number::UpdatePhoneNumberOutput {
        crate::operation::update_phone_number::UpdatePhoneNumberOutput {
            phone_number_arn: self.phone_number_arn,
            phone_number_id: self.phone_number_id,
            phone_number: self.phone_number,
            status: self.status,
            iso_country_code: self.iso_country_code,
            message_type: self.message_type,
            number_capabilities: self.number_capabilities,
            number_type: self.number_type,
            monthly_leasing_price: self.monthly_leasing_price,
            two_way_enabled: self.two_way_enabled.unwrap_or_default(),
            two_way_channel_arn: self.two_way_channel_arn,
            self_managed_opt_outs_enabled: self.self_managed_opt_outs_enabled.unwrap_or_default(),
            opt_out_list_name: self.opt_out_list_name,
            deletion_protection_enabled: self.deletion_protection_enabled.unwrap_or_default(),
            created_timestamp: self.created_timestamp,
            _request_id: self._request_id,
        }
    }
}
