// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReleasePhoneNumberOutput {
    /// <p>The PhoneNumberArn of the phone number that was released.</p>
    pub phone_number_arn: ::std::option::Option<::std::string::String>,
    /// <p>The PhoneNumberId of the phone number that was released.</p>
    pub phone_number_id: ::std::option::Option<::std::string::String>,
    /// <p>The phone number that was released.</p>
    pub phone_number: ::std::option::Option<::std::string::String>,
    /// <p>The current status of the request.</p>
    pub status: ::std::option::Option<crate::types::NumberStatus>,
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub iso_country_code: ::std::option::Option<::std::string::String>,
    /// <p>The message type that was associated with the phone number.</p>
    pub message_type: ::std::option::Option<crate::types::MessageType>,
    /// <p>Specifies if the number could be used for text messages, voice, or both.</p>
    pub number_capabilities: ::std::option::Option<::std::vec::Vec<crate::types::NumberCapability>>,
    /// <p>The type of number that was released.</p>
    pub number_type: ::std::option::Option<crate::types::NumberType>,
    /// <p>The monthly price of the phone number, in US dollars.</p>
    pub monthly_leasing_price: ::std::option::Option<::std::string::String>,
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub two_way_enabled: bool,
    /// <p>The Amazon Resource Name (ARN) of the TwoWayChannel.</p>
    pub two_way_channel_arn: ::std::option::Option<::std::string::String>,
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub self_managed_opt_outs_enabled: bool,
    /// <p>The name of the OptOutList that was associated with the phone number.</p>
    pub opt_out_list_name: ::std::option::Option<::std::string::String>,
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl ReleasePhoneNumberOutput {
    /// <p>The PhoneNumberArn of the phone number that was released.</p>
    pub fn phone_number_arn(&self) -> ::std::option::Option<&str> {
        self.phone_number_arn.as_deref()
    }
    /// <p>The PhoneNumberId of the phone number that was released.</p>
    pub fn phone_number_id(&self) -> ::std::option::Option<&str> {
        self.phone_number_id.as_deref()
    }
    /// <p>The phone number that was released.</p>
    pub fn phone_number(&self) -> ::std::option::Option<&str> {
        self.phone_number.as_deref()
    }
    /// <p>The current status of the request.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::NumberStatus> {
        self.status.as_ref()
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn iso_country_code(&self) -> ::std::option::Option<&str> {
        self.iso_country_code.as_deref()
    }
    /// <p>The message type that was associated with the phone number.</p>
    pub fn message_type(&self) -> ::std::option::Option<&crate::types::MessageType> {
        self.message_type.as_ref()
    }
    /// <p>Specifies if the number could be used for text messages, voice, or both.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.number_capabilities.is_none()`.
    pub fn number_capabilities(&self) -> &[crate::types::NumberCapability] {
        self.number_capabilities.as_deref().unwrap_or_default()
    }
    /// <p>The type of number that was released.</p>
    pub fn number_type(&self) -> ::std::option::Option<&crate::types::NumberType> {
        self.number_type.as_ref()
    }
    /// <p>The monthly price of the phone number, in US dollars.</p>
    pub fn monthly_leasing_price(&self) -> ::std::option::Option<&str> {
        self.monthly_leasing_price.as_deref()
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(&self) -> bool {
        self.two_way_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the TwoWayChannel.</p>
    pub fn two_way_channel_arn(&self) -> ::std::option::Option<&str> {
        self.two_way_channel_arn.as_deref()
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(&self) -> bool {
        self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList that was associated with the phone number.</p>
    pub fn opt_out_list_name(&self) -> ::std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for ReleasePhoneNumberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ReleasePhoneNumberOutput {
    /// Creates a new builder-style object to manufacture [`ReleasePhoneNumberOutput`](crate::operation::release_phone_number::ReleasePhoneNumberOutput).
    pub fn builder() -> crate::operation::release_phone_number::builders::ReleasePhoneNumberOutputBuilder {
        crate::operation::release_phone_number::builders::ReleasePhoneNumberOutputBuilder::default()
    }
}

/// A builder for [`ReleasePhoneNumberOutput`](crate::operation::release_phone_number::ReleasePhoneNumberOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReleasePhoneNumberOutputBuilder {
    pub(crate) phone_number_arn: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number_id: ::std::option::Option<::std::string::String>,
    pub(crate) phone_number: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::NumberStatus>,
    pub(crate) iso_country_code: ::std::option::Option<::std::string::String>,
    pub(crate) message_type: ::std::option::Option<crate::types::MessageType>,
    pub(crate) number_capabilities: ::std::option::Option<::std::vec::Vec<crate::types::NumberCapability>>,
    pub(crate) number_type: ::std::option::Option<crate::types::NumberType>,
    pub(crate) monthly_leasing_price: ::std::option::Option<::std::string::String>,
    pub(crate) two_way_enabled: ::std::option::Option<bool>,
    pub(crate) two_way_channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) self_managed_opt_outs_enabled: ::std::option::Option<bool>,
    pub(crate) opt_out_list_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl ReleasePhoneNumberOutputBuilder {
    /// <p>The PhoneNumberArn of the phone number that was released.</p>
    pub fn phone_number_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PhoneNumberArn of the phone number that was released.</p>
    pub fn set_phone_number_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number_arn = input;
        self
    }
    /// <p>The PhoneNumberArn of the phone number that was released.</p>
    pub fn get_phone_number_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number_arn
    }
    /// <p>The PhoneNumberId of the phone number that was released.</p>
    pub fn phone_number_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PhoneNumberId of the phone number that was released.</p>
    pub fn set_phone_number_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number_id = input;
        self
    }
    /// <p>The PhoneNumberId of the phone number that was released.</p>
    pub fn get_phone_number_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number_id
    }
    /// <p>The phone number that was released.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.phone_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The phone number that was released.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.phone_number = input;
        self
    }
    /// <p>The phone number that was released.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.phone_number
    }
    /// <p>The current status of the request.</p>
    pub fn status(mut self, input: crate::types::NumberStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::NumberStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::NumberStatus> {
        &self.status
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn iso_country_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iso_country_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn set_iso_country_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iso_country_code = input;
        self
    }
    /// <p>The two-character code, in ISO 3166-1 alpha-2 format, for the country or region.</p>
    pub fn get_iso_country_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.iso_country_code
    }
    /// <p>The message type that was associated with the phone number.</p>
    pub fn message_type(mut self, input: crate::types::MessageType) -> Self {
        self.message_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message type that was associated with the phone number.</p>
    pub fn set_message_type(mut self, input: ::std::option::Option<crate::types::MessageType>) -> Self {
        self.message_type = input;
        self
    }
    /// <p>The message type that was associated with the phone number.</p>
    pub fn get_message_type(&self) -> &::std::option::Option<crate::types::MessageType> {
        &self.message_type
    }
    /// Appends an item to `number_capabilities`.
    ///
    /// To override the contents of this collection use [`set_number_capabilities`](Self::set_number_capabilities).
    ///
    /// <p>Specifies if the number could be used for text messages, voice, or both.</p>
    pub fn number_capabilities(mut self, input: crate::types::NumberCapability) -> Self {
        let mut v = self.number_capabilities.unwrap_or_default();
        v.push(input);
        self.number_capabilities = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies if the number could be used for text messages, voice, or both.</p>
    pub fn set_number_capabilities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NumberCapability>>) -> Self {
        self.number_capabilities = input;
        self
    }
    /// <p>Specifies if the number could be used for text messages, voice, or both.</p>
    pub fn get_number_capabilities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NumberCapability>> {
        &self.number_capabilities
    }
    /// <p>The type of number that was released.</p>
    pub fn number_type(mut self, input: crate::types::NumberType) -> Self {
        self.number_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of number that was released.</p>
    pub fn set_number_type(mut self, input: ::std::option::Option<crate::types::NumberType>) -> Self {
        self.number_type = input;
        self
    }
    /// <p>The type of number that was released.</p>
    pub fn get_number_type(&self) -> &::std::option::Option<crate::types::NumberType> {
        &self.number_type
    }
    /// <p>The monthly price of the phone number, in US dollars.</p>
    pub fn monthly_leasing_price(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monthly_leasing_price = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The monthly price of the phone number, in US dollars.</p>
    pub fn set_monthly_leasing_price(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monthly_leasing_price = input;
        self
    }
    /// <p>The monthly price of the phone number, in US dollars.</p>
    pub fn get_monthly_leasing_price(&self) -> &::std::option::Option<::std::string::String> {
        &self.monthly_leasing_price
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn two_way_enabled(mut self, input: bool) -> Self {
        self.two_way_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn set_two_way_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.two_way_enabled = input;
        self
    }
    /// <p>By default this is set to false. When set to true you can receive incoming text messages from your end recipients.</p>
    pub fn get_two_way_enabled(&self) -> &::std::option::Option<bool> {
        &self.two_way_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the TwoWayChannel.</p>
    pub fn two_way_channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.two_way_channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the TwoWayChannel.</p>
    pub fn set_two_way_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.two_way_channel_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the TwoWayChannel.</p>
    pub fn get_two_way_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.two_way_channel_arn
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn self_managed_opt_outs_enabled(mut self, input: bool) -> Self {
        self.self_managed_opt_outs_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn set_self_managed_opt_outs_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.self_managed_opt_outs_enabled = input;
        self
    }
    /// <p>By default this is set to false. When an end recipient sends a message that begins with HELP or STOP to one of your dedicated numbers, Amazon Pinpoint automatically replies with a customizable message and adds the end recipient to the OptOutList. When set to true you're responsible for responding to HELP and STOP requests. You're also responsible for tracking and honoring opt-out requests.</p>
    pub fn get_self_managed_opt_outs_enabled(&self) -> &::std::option::Option<bool> {
        &self.self_managed_opt_outs_enabled
    }
    /// <p>The name of the OptOutList that was associated with the phone number.</p>
    pub fn opt_out_list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.opt_out_list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the OptOutList that was associated with the phone number.</p>
    pub fn set_opt_out_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>The name of the OptOutList that was associated with the phone number.</p>
    pub fn get_opt_out_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.opt_out_list_name
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time when the phone number was created, in <a href="https://www.epochconverter.com/">UNIX epoch time</a> format.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ReleasePhoneNumberOutput`](crate::operation::release_phone_number::ReleasePhoneNumberOutput).
    pub fn build(self) -> crate::operation::release_phone_number::ReleasePhoneNumberOutput {
        crate::operation::release_phone_number::ReleasePhoneNumberOutput {
            phone_number_arn: self.phone_number_arn,
            phone_number_id: self.phone_number_id,
            phone_number: self.phone_number,
            status: self.status,
            iso_country_code: self.iso_country_code,
            message_type: self.message_type,
            number_capabilities: self.number_capabilities,
            number_type: self.number_type,
            monthly_leasing_price: self.monthly_leasing_price,
            two_way_enabled: self.two_way_enabled.unwrap_or_default(),
            two_way_channel_arn: self.two_way_channel_arn,
            self_managed_opt_outs_enabled: self.self_managed_opt_outs_enabled.unwrap_or_default(),
            opt_out_list_name: self.opt_out_list_name,
            created_timestamp: self.created_timestamp,
            _request_id: self._request_id,
        }
    }
}
