// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribePhoneNumbersInput {
    /// <p>The unique identifier of phone numbers to find information about. This is an array of strings that can be either the PhoneNumberId or PhoneNumberArn.</p>
    pub phone_number_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An array of PhoneNumberFilter objects to filter the results.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberFilter>>,
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return per each request.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl DescribePhoneNumbersInput {
    /// <p>The unique identifier of phone numbers to find information about. This is an array of strings that can be either the PhoneNumberId or PhoneNumberArn.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.phone_number_ids.is_none()`.
    pub fn phone_number_ids(&self) -> &[::std::string::String] {
        self.phone_number_ids.as_deref().unwrap_or_default()
    }
    /// <p>An array of PhoneNumberFilter objects to filter the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::PhoneNumberFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl DescribePhoneNumbersInput {
    /// Creates a new builder-style object to manufacture [`DescribePhoneNumbersInput`](crate::operation::describe_phone_numbers::DescribePhoneNumbersInput).
    pub fn builder() -> crate::operation::describe_phone_numbers::builders::DescribePhoneNumbersInputBuilder {
        crate::operation::describe_phone_numbers::builders::DescribePhoneNumbersInputBuilder::default()
    }
}

/// A builder for [`DescribePhoneNumbersInput`](crate::operation::describe_phone_numbers::DescribePhoneNumbersInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribePhoneNumbersInputBuilder {
    pub(crate) phone_number_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberFilter>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl DescribePhoneNumbersInputBuilder {
    /// Appends an item to `phone_number_ids`.
    ///
    /// To override the contents of this collection use [`set_phone_number_ids`](Self::set_phone_number_ids).
    ///
    /// <p>The unique identifier of phone numbers to find information about. This is an array of strings that can be either the PhoneNumberId or PhoneNumberArn.</p>
    pub fn phone_number_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.phone_number_ids.unwrap_or_default();
        v.push(input.into());
        self.phone_number_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique identifier of phone numbers to find information about. This is an array of strings that can be either the PhoneNumberId or PhoneNumberArn.</p>
    pub fn set_phone_number_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.phone_number_ids = input;
        self
    }
    /// <p>The unique identifier of phone numbers to find information about. This is an array of strings that can be either the PhoneNumberId or PhoneNumberArn.</p>
    pub fn get_phone_number_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.phone_number_ids
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of PhoneNumberFilter objects to filter the results.</p>
    pub fn filters(mut self, input: crate::types::PhoneNumberFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of PhoneNumberFilter objects to filter the results.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>An array of PhoneNumberFilter objects to filter the results.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhoneNumberFilter>> {
        &self.filters
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results. You don't need to supply a value for this field in the initial request.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return per each request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`DescribePhoneNumbersInput`](crate::operation::describe_phone_numbers::DescribePhoneNumbersInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_phone_numbers::DescribePhoneNumbersInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_phone_numbers::DescribePhoneNumbersInput {
            phone_number_ids: self.phone_number_ids,
            filters: self.filters,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
