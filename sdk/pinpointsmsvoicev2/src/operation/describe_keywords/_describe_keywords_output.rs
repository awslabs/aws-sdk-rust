// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeKeywordsOutput {
    /// <p>The PhoneNumberArn or PoolArn that is associated with the OriginationIdentity. </p>
    pub origination_identity_arn: ::std::option::Option<::std::string::String>,
    /// <p>The PhoneNumberId or PoolId that is associated with the OriginationIdentity.</p>
    pub origination_identity: ::std::option::Option<::std::string::String>,
    /// <p>An array of KeywordInformation objects that contain the results.</p>
    pub keywords: ::std::option::Option<::std::vec::Vec<crate::types::KeywordInformation>>,
    /// <p>The token to be used for the next set of paginated results. If this field is empty then there are no more results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeKeywordsOutput {
    /// <p>The PhoneNumberArn or PoolArn that is associated with the OriginationIdentity. </p>
    pub fn origination_identity_arn(&self) -> ::std::option::Option<&str> {
        self.origination_identity_arn.as_deref()
    }
    /// <p>The PhoneNumberId or PoolId that is associated with the OriginationIdentity.</p>
    pub fn origination_identity(&self) -> ::std::option::Option<&str> {
        self.origination_identity.as_deref()
    }
    /// <p>An array of KeywordInformation objects that contain the results.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.keywords.is_none()`.
    pub fn keywords(&self) -> &[crate::types::KeywordInformation] {
        self.keywords.as_deref().unwrap_or_default()
    }
    /// <p>The token to be used for the next set of paginated results. If this field is empty then there are no more results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeKeywordsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeKeywordsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeKeywordsOutput`](crate::operation::describe_keywords::DescribeKeywordsOutput).
    pub fn builder() -> crate::operation::describe_keywords::builders::DescribeKeywordsOutputBuilder {
        crate::operation::describe_keywords::builders::DescribeKeywordsOutputBuilder::default()
    }
}

/// A builder for [`DescribeKeywordsOutput`](crate::operation::describe_keywords::DescribeKeywordsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeKeywordsOutputBuilder {
    pub(crate) origination_identity_arn: ::std::option::Option<::std::string::String>,
    pub(crate) origination_identity: ::std::option::Option<::std::string::String>,
    pub(crate) keywords: ::std::option::Option<::std::vec::Vec<crate::types::KeywordInformation>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeKeywordsOutputBuilder {
    /// <p>The PhoneNumberArn or PoolArn that is associated with the OriginationIdentity. </p>
    pub fn origination_identity_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origination_identity_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PhoneNumberArn or PoolArn that is associated with the OriginationIdentity. </p>
    pub fn set_origination_identity_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origination_identity_arn = input;
        self
    }
    /// <p>The PhoneNumberArn or PoolArn that is associated with the OriginationIdentity. </p>
    pub fn get_origination_identity_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.origination_identity_arn
    }
    /// <p>The PhoneNumberId or PoolId that is associated with the OriginationIdentity.</p>
    pub fn origination_identity(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origination_identity = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The PhoneNumberId or PoolId that is associated with the OriginationIdentity.</p>
    pub fn set_origination_identity(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origination_identity = input;
        self
    }
    /// <p>The PhoneNumberId or PoolId that is associated with the OriginationIdentity.</p>
    pub fn get_origination_identity(&self) -> &::std::option::Option<::std::string::String> {
        &self.origination_identity
    }
    /// Appends an item to `keywords`.
    ///
    /// To override the contents of this collection use [`set_keywords`](Self::set_keywords).
    ///
    /// <p>An array of KeywordInformation objects that contain the results.</p>
    pub fn keywords(mut self, input: crate::types::KeywordInformation) -> Self {
        let mut v = self.keywords.unwrap_or_default();
        v.push(input);
        self.keywords = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of KeywordInformation objects that contain the results.</p>
    pub fn set_keywords(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KeywordInformation>>) -> Self {
        self.keywords = input;
        self
    }
    /// <p>An array of KeywordInformation objects that contain the results.</p>
    pub fn get_keywords(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KeywordInformation>> {
        &self.keywords
    }
    /// <p>The token to be used for the next set of paginated results. If this field is empty then there are no more results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to be used for the next set of paginated results. If this field is empty then there are no more results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to be used for the next set of paginated results. If this field is empty then there are no more results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeKeywordsOutput`](crate::operation::describe_keywords::DescribeKeywordsOutput).
    pub fn build(self) -> crate::operation::describe_keywords::DescribeKeywordsOutput {
        crate::operation::describe_keywords::DescribeKeywordsOutput {
            origination_identity_arn: self.origination_identity_arn,
            origination_identity: self.origination_identity,
            keywords: self.keywords,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
