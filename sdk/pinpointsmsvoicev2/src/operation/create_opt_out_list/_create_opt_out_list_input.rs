// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateOptOutListInput {
    /// <p>The name of the new OptOutList.</p>
    pub opt_out_list_name: ::std::option::Option<::std::string::String>,
    /// <p>An array of tags (key and value pairs) to associate with the new OptOutList.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl CreateOptOutListInput {
    /// <p>The name of the new OptOutList.</p>
    pub fn opt_out_list_name(&self) -> ::std::option::Option<&str> {
        self.opt_out_list_name.as_deref()
    }
    /// <p>An array of tags (key and value pairs) to associate with the new OptOutList.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateOptOutListInput {
    /// Creates a new builder-style object to manufacture [`CreateOptOutListInput`](crate::operation::create_opt_out_list::CreateOptOutListInput).
    pub fn builder() -> crate::operation::create_opt_out_list::builders::CreateOptOutListInputBuilder {
        crate::operation::create_opt_out_list::builders::CreateOptOutListInputBuilder::default()
    }
}

/// A builder for [`CreateOptOutListInput`](crate::operation::create_opt_out_list::CreateOptOutListInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateOptOutListInputBuilder {
    pub(crate) opt_out_list_name: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl CreateOptOutListInputBuilder {
    /// <p>The name of the new OptOutList.</p>
    /// This field is required.
    pub fn opt_out_list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.opt_out_list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new OptOutList.</p>
    pub fn set_opt_out_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.opt_out_list_name = input;
        self
    }
    /// <p>The name of the new OptOutList.</p>
    pub fn get_opt_out_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.opt_out_list_name
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of tags (key and value pairs) to associate with the new OptOutList.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of tags (key and value pairs) to associate with the new OptOutList.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of tags (key and value pairs) to associate with the new OptOutList.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. If you don't specify a client token, a randomly generated token is used for the request to ensure idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`CreateOptOutListInput`](crate::operation::create_opt_out_list::CreateOptOutListInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_opt_out_list::CreateOptOutListInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_opt_out_list::CreateOptOutListInput {
            opt_out_list_name: self.opt_out_list_name,
            tags: self.tags,
            client_token: self.client_token,
        })
    }
}
