// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendVoiceMessageInput {
    /// <p>The destination phone number in E.164 format.</p>
    #[doc(hidden)]
    pub destination_phone_number: std::option::Option<std::string::String>,
    /// <p>The origination identity to use for the voice call. This can be the PhoneNumber, PhoneNumberId, PhoneNumberArn, PoolId, or PoolArn.</p>
    #[doc(hidden)]
    pub origination_identity: std::option::Option<std::string::String>,
    /// <p>The text to convert to a voice message.</p>
    #[doc(hidden)]
    pub message_body: std::option::Option<std::string::String>,
    /// <p>Specifies if the MessageBody field contains text or <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">speech synthesis markup language (SSML)</a>.</p>
    /// <ul>
    /// <li> <p>TEXT: This is the default value. When used the maximum character limit is 3000.</p> </li>
    /// <li> <p>SSML: When used the maximum character limit is 6000 including SSML tagging.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub message_body_text_type: std::option::Option<crate::types::VoiceMessageBodyTextType>,
    /// <p>The voice for the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly</a> service to use. By default this is set to "MATTHEW".</p>
    #[doc(hidden)]
    pub voice_id: std::option::Option<crate::types::VoiceId>,
    /// <p>The name of the configuration set to use. This can be either the ConfigurationSetName or ConfigurationSetArn.</p>
    #[doc(hidden)]
    pub configuration_set_name: std::option::Option<std::string::String>,
    /// <p>The maximum amount to spend per voice message, in US dollars.</p>
    #[doc(hidden)]
    pub max_price_per_minute: std::option::Option<std::string::String>,
    /// <p>How long the voice message is valid for. By default this is 72 hours.</p>
    #[doc(hidden)]
    pub time_to_live: std::option::Option<i32>,
    /// <p>You can specify custom data in this field. If you do, that data is logged to the event destination.</p>
    #[doc(hidden)]
    pub context:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>When set to true, the message is checked and validated, but isn't sent to the end recipient.</p>
    #[doc(hidden)]
    pub dry_run: bool,
}
impl SendVoiceMessageInput {
    /// <p>The destination phone number in E.164 format.</p>
    pub fn destination_phone_number(&self) -> std::option::Option<&str> {
        self.destination_phone_number.as_deref()
    }
    /// <p>The origination identity to use for the voice call. This can be the PhoneNumber, PhoneNumberId, PhoneNumberArn, PoolId, or PoolArn.</p>
    pub fn origination_identity(&self) -> std::option::Option<&str> {
        self.origination_identity.as_deref()
    }
    /// <p>The text to convert to a voice message.</p>
    pub fn message_body(&self) -> std::option::Option<&str> {
        self.message_body.as_deref()
    }
    /// <p>Specifies if the MessageBody field contains text or <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">speech synthesis markup language (SSML)</a>.</p>
    /// <ul>
    /// <li> <p>TEXT: This is the default value. When used the maximum character limit is 3000.</p> </li>
    /// <li> <p>SSML: When used the maximum character limit is 6000 including SSML tagging.</p> </li>
    /// </ul>
    pub fn message_body_text_type(
        &self,
    ) -> std::option::Option<&crate::types::VoiceMessageBodyTextType> {
        self.message_body_text_type.as_ref()
    }
    /// <p>The voice for the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly</a> service to use. By default this is set to "MATTHEW".</p>
    pub fn voice_id(&self) -> std::option::Option<&crate::types::VoiceId> {
        self.voice_id.as_ref()
    }
    /// <p>The name of the configuration set to use. This can be either the ConfigurationSetName or ConfigurationSetArn.</p>
    pub fn configuration_set_name(&self) -> std::option::Option<&str> {
        self.configuration_set_name.as_deref()
    }
    /// <p>The maximum amount to spend per voice message, in US dollars.</p>
    pub fn max_price_per_minute(&self) -> std::option::Option<&str> {
        self.max_price_per_minute.as_deref()
    }
    /// <p>How long the voice message is valid for. By default this is 72 hours.</p>
    pub fn time_to_live(&self) -> std::option::Option<i32> {
        self.time_to_live
    }
    /// <p>You can specify custom data in this field. If you do, that data is logged to the event destination.</p>
    pub fn context(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.context.as_ref()
    }
    /// <p>When set to true, the message is checked and validated, but isn't sent to the end recipient.</p>
    pub fn dry_run(&self) -> bool {
        self.dry_run
    }
}
impl SendVoiceMessageInput {
    /// Creates a new builder-style object to manufacture [`SendVoiceMessageInput`](crate::operation::send_voice_message::SendVoiceMessageInput).
    pub fn builder() -> crate::operation::send_voice_message::builders::SendVoiceMessageInputBuilder
    {
        crate::operation::send_voice_message::builders::SendVoiceMessageInputBuilder::default()
    }
}

/// A builder for [`SendVoiceMessageInput`](crate::operation::send_voice_message::SendVoiceMessageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendVoiceMessageInputBuilder {
    pub(crate) destination_phone_number: std::option::Option<std::string::String>,
    pub(crate) origination_identity: std::option::Option<std::string::String>,
    pub(crate) message_body: std::option::Option<std::string::String>,
    pub(crate) message_body_text_type: std::option::Option<crate::types::VoiceMessageBodyTextType>,
    pub(crate) voice_id: std::option::Option<crate::types::VoiceId>,
    pub(crate) configuration_set_name: std::option::Option<std::string::String>,
    pub(crate) max_price_per_minute: std::option::Option<std::string::String>,
    pub(crate) time_to_live: std::option::Option<i32>,
    pub(crate) context:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) dry_run: std::option::Option<bool>,
}
impl SendVoiceMessageInputBuilder {
    /// <p>The destination phone number in E.164 format.</p>
    pub fn destination_phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_phone_number = Some(input.into());
        self
    }
    /// <p>The destination phone number in E.164 format.</p>
    pub fn set_destination_phone_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_phone_number = input;
        self
    }
    /// <p>The origination identity to use for the voice call. This can be the PhoneNumber, PhoneNumberId, PhoneNumberArn, PoolId, or PoolArn.</p>
    pub fn origination_identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.origination_identity = Some(input.into());
        self
    }
    /// <p>The origination identity to use for the voice call. This can be the PhoneNumber, PhoneNumberId, PhoneNumberArn, PoolId, or PoolArn.</p>
    pub fn set_origination_identity(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.origination_identity = input;
        self
    }
    /// <p>The text to convert to a voice message.</p>
    pub fn message_body(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_body = Some(input.into());
        self
    }
    /// <p>The text to convert to a voice message.</p>
    pub fn set_message_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_body = input;
        self
    }
    /// <p>Specifies if the MessageBody field contains text or <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">speech synthesis markup language (SSML)</a>.</p>
    /// <ul>
    /// <li> <p>TEXT: This is the default value. When used the maximum character limit is 3000.</p> </li>
    /// <li> <p>SSML: When used the maximum character limit is 6000 including SSML tagging.</p> </li>
    /// </ul>
    pub fn message_body_text_type(mut self, input: crate::types::VoiceMessageBodyTextType) -> Self {
        self.message_body_text_type = Some(input);
        self
    }
    /// <p>Specifies if the MessageBody field contains text or <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">speech synthesis markup language (SSML)</a>.</p>
    /// <ul>
    /// <li> <p>TEXT: This is the default value. When used the maximum character limit is 3000.</p> </li>
    /// <li> <p>SSML: When used the maximum character limit is 6000 including SSML tagging.</p> </li>
    /// </ul>
    pub fn set_message_body_text_type(
        mut self,
        input: std::option::Option<crate::types::VoiceMessageBodyTextType>,
    ) -> Self {
        self.message_body_text_type = input;
        self
    }
    /// <p>The voice for the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly</a> service to use. By default this is set to "MATTHEW".</p>
    pub fn voice_id(mut self, input: crate::types::VoiceId) -> Self {
        self.voice_id = Some(input);
        self
    }
    /// <p>The voice for the <a href="https://docs.aws.amazon.com/polly/latest/dg/what-is.html">Amazon Polly</a> service to use. By default this is set to "MATTHEW".</p>
    pub fn set_voice_id(mut self, input: std::option::Option<crate::types::VoiceId>) -> Self {
        self.voice_id = input;
        self
    }
    /// <p>The name of the configuration set to use. This can be either the ConfigurationSetName or ConfigurationSetArn.</p>
    pub fn configuration_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.configuration_set_name = Some(input.into());
        self
    }
    /// <p>The name of the configuration set to use. This can be either the ConfigurationSetName or ConfigurationSetArn.</p>
    pub fn set_configuration_set_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.configuration_set_name = input;
        self
    }
    /// <p>The maximum amount to spend per voice message, in US dollars.</p>
    pub fn max_price_per_minute(mut self, input: impl Into<std::string::String>) -> Self {
        self.max_price_per_minute = Some(input.into());
        self
    }
    /// <p>The maximum amount to spend per voice message, in US dollars.</p>
    pub fn set_max_price_per_minute(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.max_price_per_minute = input;
        self
    }
    /// <p>How long the voice message is valid for. By default this is 72 hours.</p>
    pub fn time_to_live(mut self, input: i32) -> Self {
        self.time_to_live = Some(input);
        self
    }
    /// <p>How long the voice message is valid for. By default this is 72 hours.</p>
    pub fn set_time_to_live(mut self, input: std::option::Option<i32>) -> Self {
        self.time_to_live = input;
        self
    }
    /// Adds a key-value pair to `context`.
    ///
    /// To override the contents of this collection use [`set_context`](Self::set_context).
    ///
    /// <p>You can specify custom data in this field. If you do, that data is logged to the event destination.</p>
    pub fn context(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.context.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.context = Some(hash_map);
        self
    }
    /// <p>You can specify custom data in this field. If you do, that data is logged to the event destination.</p>
    pub fn set_context(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.context = input;
        self
    }
    /// <p>When set to true, the message is checked and validated, but isn't sent to the end recipient.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = Some(input);
        self
    }
    /// <p>When set to true, the message is checked and validated, but isn't sent to the end recipient.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// Consumes the builder and constructs a [`SendVoiceMessageInput`](crate::operation::send_voice_message::SendVoiceMessageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::send_voice_message::SendVoiceMessageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::send_voice_message::SendVoiceMessageInput {
                destination_phone_number: self.destination_phone_number,
                origination_identity: self.origination_identity,
                message_body: self.message_body,
                message_body_text_type: self.message_body_text_type,
                voice_id: self.voice_id,
                configuration_set_name: self.configuration_set_name,
                max_price_per_minute: self.max_price_per_minute,
                time_to_live: self.time_to_live,
                context: self.context,
                dry_run: self.dry_run.unwrap_or_default(),
            },
        )
    }
}
