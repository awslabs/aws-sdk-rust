// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_origination_identity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateOriginationIdentityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.pool_id {
        object.key("PoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_2.as_str());
    }
    if let Some(var_3) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_3.as_str());
    }
    if let Some(var_4) = &input.client_token {
        object.key("ClientToken").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_configuration_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConfigurationSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("Tags").start_array();
        for item_8 in var_6 {
            {
                let mut object_9 = array_7.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.client_token {
        object.key("ClientToken").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_event_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEventDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.event_destination_name {
        object.key("EventDestinationName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.matching_event_types {
        let mut array_14 = object.key("MatchingEventTypes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.cloud_watch_logs_destination {
        let mut object_17 = object.key("CloudWatchLogsDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_logs_destination(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.kinesis_firehose_destination {
        let mut object_19 = object.key("KinesisFirehoseDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_destination(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.sns_destination {
        let mut object_21 = object.key("SnsDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_destination(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.client_token {
        object.key("ClientToken").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_opt_out_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateOptOutListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_23.as_str());
    }
    if let Some(var_24) = &input.tags {
        let mut array_25 = object.key("Tags").start_array();
        for item_26 in var_24 {
            {
                let mut object_27 = array_25.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_27, item_26)?;
                object_27.finish();
            }
        }
        array_25.finish();
    }
    if let Some(var_28) = &input.client_token {
        object.key("ClientToken").string(var_28.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreatePoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_29) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_29.as_str());
    }
    if let Some(var_30) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_30.as_str());
    }
    if let Some(var_31) = &input.message_type {
        object.key("MessageType").string(var_31.as_str());
    }
    if let Some(var_32) = &input.deletion_protection_enabled {
        object.key("DeletionProtectionEnabled").boolean(*var_32);
    }
    if let Some(var_33) = &input.tags {
        let mut array_34 = object.key("Tags").start_array();
        for item_35 in var_33 {
            {
                let mut object_36 = array_34.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_36, item_35)?;
                object_36.finish();
            }
        }
        array_34.finish();
    }
    if let Some(var_37) = &input.client_token {
        object.key("ClientToken").string(var_37.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_configuration_set_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConfigurationSetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_38) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_38.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_default_message_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDefaultMessageTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_39.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_default_sender_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteDefaultSenderIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_40) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_40.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_event_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteEventDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_41) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_41.as_str());
    }
    if let Some(var_42) = &input.event_destination_name {
        object.key("EventDestinationName").string(var_42.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_keyword_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteKeywordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_43) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_43.as_str());
    }
    if let Some(var_44) = &input.keyword {
        object.key("Keyword").string(var_44.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_opted_out_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOptedOutNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_45.as_str());
    }
    if let Some(var_46) = &input.opted_out_number {
        object.key("OptedOutNumber").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_opt_out_list_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteOptOutListInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeletePoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.pool_id {
        object.key("PoolId").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_account_attributes_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49.as_str());
    }
    if let Some(var_50) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_50).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_account_limits_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAccountLimitsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_51) = &input.next_token {
        object.key("NextToken").string(var_51.as_str());
    }
    if let Some(var_52) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_52).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_configuration_sets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeConfigurationSetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.configuration_set_names {
        let mut array_54 = object.key("ConfigurationSetNames").start_array();
        for item_55 in var_53 {
            {
                array_54.value().string(item_55.as_str());
            }
        }
        array_54.finish();
    }
    if let Some(var_56) = &input.filters {
        let mut array_57 = object.key("Filters").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_crate_model_configuration_set_filter(
                    &mut object_59,
                    item_58,
                )?;
                object_59.finish();
            }
        }
        array_57.finish();
    }
    if let Some(var_60) = &input.next_token {
        object.key("NextToken").string(var_60.as_str());
    }
    if let Some(var_61) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_keywords_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeKeywordsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_62.as_str());
    }
    if let Some(var_63) = &input.keywords {
        let mut array_64 = object.key("Keywords").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.filters {
        let mut array_67 = object.key("Filters").start_array();
        for item_68 in var_66 {
            {
                let mut object_69 = array_67.value().start_object();
                crate::json_ser::serialize_structure_crate_model_keyword_filter(
                    &mut object_69,
                    item_68,
                )?;
                object_69.finish();
            }
        }
        array_67.finish();
    }
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70.as_str());
    }
    if let Some(var_71) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_71).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_opted_out_numbers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOptedOutNumbersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.opted_out_numbers {
        let mut array_74 = object.key("OptedOutNumbers").start_array();
        for item_75 in var_73 {
            {
                array_74.value().string(item_75.as_str());
            }
        }
        array_74.finish();
    }
    if let Some(var_76) = &input.filters {
        let mut array_77 = object.key("Filters").start_array();
        for item_78 in var_76 {
            {
                let mut object_79 = array_77.value().start_object();
                crate::json_ser::serialize_structure_crate_model_opted_out_filter(
                    &mut object_79,
                    item_78,
                )?;
                object_79.finish();
            }
        }
        array_77.finish();
    }
    if let Some(var_80) = &input.next_token {
        object.key("NextToken").string(var_80.as_str());
    }
    if let Some(var_81) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_81).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_opt_out_lists_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeOptOutListsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_82) = &input.opt_out_list_names {
        let mut array_83 = object.key("OptOutListNames").start_array();
        for item_84 in var_82 {
            {
                array_83.value().string(item_84.as_str());
            }
        }
        array_83.finish();
    }
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85.as_str());
    }
    if let Some(var_86) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_86).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_phone_numbers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePhoneNumbersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_87) = &input.phone_number_ids {
        let mut array_88 = object.key("PhoneNumberIds").start_array();
        for item_89 in var_87 {
            {
                array_88.value().string(item_89.as_str());
            }
        }
        array_88.finish();
    }
    if let Some(var_90) = &input.filters {
        let mut array_91 = object.key("Filters").start_array();
        for item_92 in var_90 {
            {
                let mut object_93 = array_91.value().start_object();
                crate::json_ser::serialize_structure_crate_model_phone_number_filter(
                    &mut object_93,
                    item_92,
                )?;
                object_93.finish();
            }
        }
        array_91.finish();
    }
    if let Some(var_94) = &input.next_token {
        object.key("NextToken").string(var_94.as_str());
    }
    if let Some(var_95) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_95).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_pools_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribePoolsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_96) = &input.pool_ids {
        let mut array_97 = object.key("PoolIds").start_array();
        for item_98 in var_96 {
            {
                array_97.value().string(item_98.as_str());
            }
        }
        array_97.finish();
    }
    if let Some(var_99) = &input.filters {
        let mut array_100 = object.key("Filters").start_array();
        for item_101 in var_99 {
            {
                let mut object_102 = array_100.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pool_filter(
                    &mut object_102,
                    item_101,
                )?;
                object_102.finish();
            }
        }
        array_100.finish();
    }
    if let Some(var_103) = &input.next_token {
        object.key("NextToken").string(var_103.as_str());
    }
    if let Some(var_104) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_104).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_sender_ids_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSenderIdsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.sender_ids {
        let mut array_106 = object.key("SenderIds").start_array();
        for item_107 in var_105 {
            {
                let mut object_108 = array_106.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sender_id_and_country(
                    &mut object_108,
                    item_107,
                )?;
                object_108.finish();
            }
        }
        array_106.finish();
    }
    if let Some(var_109) = &input.filters {
        let mut array_110 = object.key("Filters").start_array();
        for item_111 in var_109 {
            {
                let mut object_112 = array_110.value().start_object();
                crate::json_ser::serialize_structure_crate_model_sender_id_filter(
                    &mut object_112,
                    item_111,
                )?;
                object_112.finish();
            }
        }
        array_110.finish();
    }
    if let Some(var_113) = &input.next_token {
        object.key("NextToken").string(var_113.as_str());
    }
    if let Some(var_114) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_114).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_spend_limits_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSpendLimitsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_115) = &input.next_token {
        object.key("NextToken").string(var_115.as_str());
    }
    if let Some(var_116) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_116).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_origination_identity_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateOriginationIdentityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_117) = &input.pool_id {
        object.key("PoolId").string(var_117.as_str());
    }
    if let Some(var_118) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_118.as_str());
    }
    if let Some(var_119) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_119.as_str());
    }
    if let Some(var_120) = &input.client_token {
        object.key("ClientToken").string(var_120.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_pool_origination_identities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListPoolOriginationIdentitiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_121) = &input.pool_id {
        object.key("PoolId").string(var_121.as_str());
    }
    if let Some(var_122) = &input.filters {
        let mut array_123 = object.key("Filters").start_array();
        for item_124 in var_122 {
            {
                let mut object_125 = array_123.value().start_object();
                crate::json_ser::serialize_structure_crate_model_pool_origination_identities_filter(&mut object_125, item_124)?;
                object_125.finish();
            }
        }
        array_123.finish();
    }
    if let Some(var_126) = &input.next_token {
        object.key("NextToken").string(var_126.as_str());
    }
    if let Some(var_127) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_128) = &input.resource_arn {
        object.key("ResourceArn").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_keyword_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutKeywordInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_129.as_str());
    }
    if let Some(var_130) = &input.keyword {
        object.key("Keyword").string(var_130.as_str());
    }
    if let Some(var_131) = &input.keyword_message {
        object.key("KeywordMessage").string(var_131.as_str());
    }
    if let Some(var_132) = &input.keyword_action {
        object.key("KeywordAction").string(var_132.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_opted_out_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutOptedOutNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_133) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_133.as_str());
    }
    if let Some(var_134) = &input.opted_out_number {
        object.key("OptedOutNumber").string(var_134.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_release_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ReleasePhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_135) = &input.phone_number_id {
        object.key("PhoneNumberId").string(var_135.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_request_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RequestPhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_136) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_136.as_str());
    }
    if let Some(var_137) = &input.message_type {
        object.key("MessageType").string(var_137.as_str());
    }
    if let Some(var_138) = &input.number_capabilities {
        let mut array_139 = object.key("NumberCapabilities").start_array();
        for item_140 in var_138 {
            {
                array_139.value().string(item_140.as_str());
            }
        }
        array_139.finish();
    }
    if let Some(var_141) = &input.number_type {
        object.key("NumberType").string(var_141.as_str());
    }
    if let Some(var_142) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_142.as_str());
    }
    if let Some(var_143) = &input.pool_id {
        object.key("PoolId").string(var_143.as_str());
    }
    if let Some(var_144) = &input.registration_id {
        object.key("RegistrationId").string(var_144.as_str());
    }
    if let Some(var_145) = &input.deletion_protection_enabled {
        object.key("DeletionProtectionEnabled").boolean(*var_145);
    }
    if let Some(var_146) = &input.tags {
        let mut array_147 = object.key("Tags").start_array();
        for item_148 in var_146 {
            {
                let mut object_149 = array_147.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_149, item_148)?;
                object_149.finish();
            }
        }
        array_147.finish();
    }
    if let Some(var_150) = &input.client_token {
        object.key("ClientToken").string(var_150.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_text_message_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendTextMessageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_151) = &input.destination_phone_number {
        object
            .key("DestinationPhoneNumber")
            .string(var_151.as_str());
    }
    if let Some(var_152) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_152.as_str());
    }
    if let Some(var_153) = &input.message_body {
        object.key("MessageBody").string(var_153.as_str());
    }
    if let Some(var_154) = &input.message_type {
        object.key("MessageType").string(var_154.as_str());
    }
    if let Some(var_155) = &input.keyword {
        object.key("Keyword").string(var_155.as_str());
    }
    if let Some(var_156) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_156.as_str());
    }
    if let Some(var_157) = &input.max_price {
        object.key("MaxPrice").string(var_157.as_str());
    }
    if let Some(var_158) = &input.time_to_live {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_158).into()),
        );
    }
    if let Some(var_159) = &input.context {
        let mut object_160 = object.key("Context").start_object();
        for (key_161, value_162) in var_159 {
            {
                object_160.key(key_161).string(value_162.as_str());
            }
        }
        object_160.finish();
    }
    if let Some(var_163) = &input.destination_country_parameters {
        let mut object_164 = object.key("DestinationCountryParameters").start_object();
        for (key_165, value_166) in var_163 {
            {
                object_164.key(key_165.as_str()).string(value_166.as_str());
            }
        }
        object_164.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_send_voice_message_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SendVoiceMessageInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_167) = &input.destination_phone_number {
        object
            .key("DestinationPhoneNumber")
            .string(var_167.as_str());
    }
    if let Some(var_168) = &input.origination_identity {
        object.key("OriginationIdentity").string(var_168.as_str());
    }
    if let Some(var_169) = &input.message_body {
        object.key("MessageBody").string(var_169.as_str());
    }
    if let Some(var_170) = &input.message_body_text_type {
        object.key("MessageBodyTextType").string(var_170.as_str());
    }
    if let Some(var_171) = &input.voice_id {
        object.key("VoiceId").string(var_171.as_str());
    }
    if let Some(var_172) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_172.as_str());
    }
    if let Some(var_173) = &input.max_price_per_minute {
        object.key("MaxPricePerMinute").string(var_173.as_str());
    }
    if let Some(var_174) = &input.time_to_live {
        object.key("TimeToLive").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_174).into()),
        );
    }
    if let Some(var_175) = &input.context {
        let mut object_176 = object.key("Context").start_object();
        for (key_177, value_178) in var_175 {
            {
                object_176.key(key_177).string(value_178.as_str());
            }
        }
        object_176.finish();
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_default_message_type_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetDefaultMessageTypeInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_179) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_179.as_str());
    }
    if let Some(var_180) = &input.message_type {
        object.key("MessageType").string(var_180.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_default_sender_id_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetDefaultSenderIdInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_181) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_181.as_str());
    }
    if let Some(var_182) = &input.sender_id {
        object.key("SenderId").string(var_182.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_text_message_spend_limit_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetTextMessageSpendLimitOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_183) = &input.monthly_limit {
        object.key("MonthlyLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_183).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_set_voice_message_spend_limit_override_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetVoiceMessageSpendLimitOverrideInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_184) = &input.monthly_limit {
        object.key("MonthlyLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_184).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_185) = &input.resource_arn {
        object.key("ResourceArn").string(var_185.as_str());
    }
    if let Some(var_186) = &input.tags {
        let mut array_187 = object.key("Tags").start_array();
        for item_188 in var_186 {
            {
                let mut object_189 = array_187.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_189, item_188)?;
                object_189.finish();
            }
        }
        array_187.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_190) = &input.resource_arn {
        object.key("ResourceArn").string(var_190.as_str());
    }
    if let Some(var_191) = &input.tag_keys {
        let mut array_192 = object.key("TagKeys").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193.as_str());
            }
        }
        array_192.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_event_destination_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEventDestinationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_194) = &input.configuration_set_name {
        object.key("ConfigurationSetName").string(var_194.as_str());
    }
    if let Some(var_195) = &input.event_destination_name {
        object.key("EventDestinationName").string(var_195.as_str());
    }
    if let Some(var_196) = &input.enabled {
        object.key("Enabled").boolean(*var_196);
    }
    if let Some(var_197) = &input.matching_event_types {
        let mut array_198 = object.key("MatchingEventTypes").start_array();
        for item_199 in var_197 {
            {
                array_198.value().string(item_199.as_str());
            }
        }
        array_198.finish();
    }
    if let Some(var_200) = &input.cloud_watch_logs_destination {
        let mut object_201 = object.key("CloudWatchLogsDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_cloud_watch_logs_destination(
            &mut object_201,
            var_200,
        )?;
        object_201.finish();
    }
    if let Some(var_202) = &input.kinesis_firehose_destination {
        let mut object_203 = object.key("KinesisFirehoseDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_kinesis_firehose_destination(
            &mut object_203,
            var_202,
        )?;
        object_203.finish();
    }
    if let Some(var_204) = &input.sns_destination {
        let mut object_205 = object.key("SnsDestination").start_object();
        crate::json_ser::serialize_structure_crate_model_sns_destination(&mut object_205, var_204)?;
        object_205.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_phone_number_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePhoneNumberInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_206) = &input.phone_number_id {
        object.key("PhoneNumberId").string(var_206.as_str());
    }
    if let Some(var_207) = &input.two_way_enabled {
        object.key("TwoWayEnabled").boolean(*var_207);
    }
    if let Some(var_208) = &input.two_way_channel_arn {
        object.key("TwoWayChannelArn").string(var_208.as_str());
    }
    if let Some(var_209) = &input.self_managed_opt_outs_enabled {
        object.key("SelfManagedOptOutsEnabled").boolean(*var_209);
    }
    if let Some(var_210) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_210.as_str());
    }
    if let Some(var_211) = &input.deletion_protection_enabled {
        object.key("DeletionProtectionEnabled").boolean(*var_211);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdatePoolInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_212) = &input.pool_id {
        object.key("PoolId").string(var_212.as_str());
    }
    if let Some(var_213) = &input.two_way_enabled {
        object.key("TwoWayEnabled").boolean(*var_213);
    }
    if let Some(var_214) = &input.two_way_channel_arn {
        object.key("TwoWayChannelArn").string(var_214.as_str());
    }
    if let Some(var_215) = &input.self_managed_opt_outs_enabled {
        object.key("SelfManagedOptOutsEnabled").boolean(*var_215);
    }
    if let Some(var_216) = &input.opt_out_list_name {
        object.key("OptOutListName").string(var_216.as_str());
    }
    if let Some(var_217) = &input.shared_routes_enabled {
        object.key("SharedRoutesEnabled").boolean(*var_217);
    }
    if let Some(var_218) = &input.deletion_protection_enabled {
        object.key("DeletionProtectionEnabled").boolean(*var_218);
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_219) = &input.key {
        object.key("Key").string(var_219.as_str());
    }
    if let Some(var_220) = &input.value {
        object.key("Value").string(var_220.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_cloud_watch_logs_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLogsDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_221) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_221.as_str());
    }
    if let Some(var_222) = &input.log_group_arn {
        object.key("LogGroupArn").string(var_222.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_kinesis_firehose_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_223) = &input.iam_role_arn {
        object.key("IamRoleArn").string(var_223.as_str());
    }
    if let Some(var_224) = &input.delivery_stream_arn {
        object.key("DeliveryStreamArn").string(var_224.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sns_destination(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SnsDestination,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_225) = &input.topic_arn {
        object.key("TopicArn").string(var_225.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_configuration_set_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConfigurationSetFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_226) = &input.name {
        object.key("Name").string(var_226.as_str());
    }
    if let Some(var_227) = &input.values {
        let mut array_228 = object.key("Values").start_array();
        for item_229 in var_227 {
            {
                array_228.value().string(item_229.as_str());
            }
        }
        array_228.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_keyword_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KeywordFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_230) = &input.name {
        object.key("Name").string(var_230.as_str());
    }
    if let Some(var_231) = &input.values {
        let mut array_232 = object.key("Values").start_array();
        for item_233 in var_231 {
            {
                array_232.value().string(item_233.as_str());
            }
        }
        array_232.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_opted_out_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OptedOutFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_234) = &input.name {
        object.key("Name").string(var_234.as_str());
    }
    if let Some(var_235) = &input.values {
        let mut array_236 = object.key("Values").start_array();
        for item_237 in var_235 {
            {
                array_236.value().string(item_237.as_str());
            }
        }
        array_236.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_phone_number_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PhoneNumberFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_238) = &input.name {
        object.key("Name").string(var_238.as_str());
    }
    if let Some(var_239) = &input.values {
        let mut array_240 = object.key("Values").start_array();
        for item_241 in var_239 {
            {
                array_240.value().string(item_241.as_str());
            }
        }
        array_240.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pool_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PoolFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_242) = &input.name {
        object.key("Name").string(var_242.as_str());
    }
    if let Some(var_243) = &input.values {
        let mut array_244 = object.key("Values").start_array();
        for item_245 in var_243 {
            {
                array_244.value().string(item_245.as_str());
            }
        }
        array_244.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sender_id_and_country(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SenderIdAndCountry,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_246) = &input.sender_id {
        object.key("SenderId").string(var_246.as_str());
    }
    if let Some(var_247) = &input.iso_country_code {
        object.key("IsoCountryCode").string(var_247.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_sender_id_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SenderIdFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_248) = &input.name {
        object.key("Name").string(var_248.as_str());
    }
    if let Some(var_249) = &input.values {
        let mut array_250 = object.key("Values").start_array();
        for item_251 in var_249 {
            {
                array_250.value().string(item_251.as_str());
            }
        }
        array_250.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_pool_origination_identities_filter(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PoolOriginationIdentitiesFilter,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_252) = &input.name {
        object.key("Name").string(var_252.as_str());
    }
    if let Some(var_253) = &input.values {
        let mut array_254 = object.key("Values").start_array();
        for item_255 in var_253 {
            {
                array_254.value().string(item_255.as_str());
            }
        }
        array_254.finish();
    }
    Ok(())
}
