// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_report_definition(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ReportDefinition,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("ReportName").string(input.report_name.as_str());
    }
    {
        object.key("TimeUnit").string(input.time_unit.as_str());
    }
    {
        object.key("Format").string(input.format.as_str());
    }
    {
        object.key("Compression").string(input.compression.as_str());
    }
    {
        let mut array_1 = object.key("AdditionalSchemaElements").start_array();
        for item_2 in &input.additional_schema_elements {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    {
        object.key("S3Bucket").string(input.s3_bucket.as_str());
    }
    {
        object.key("S3Prefix").string(input.s3_prefix.as_str());
    }
    {
        object.key("S3Region").string(input.s3_region.as_str());
    }
    if let Some(var_3) = &input.additional_artifacts {
        let mut array_4 = object.key("AdditionalArtifacts").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.refresh_closed_reports {
        object.key("RefreshClosedReports").boolean(*var_6);
    }
    if let Some(var_7) = &input.report_versioning {
        object.key("ReportVersioning").string(var_7.as_str());
    }
    if let Some(var_8) = &input.billing_view_arn {
        object.key("BillingViewArn").string(var_8.as_str());
    }
    Ok(())
}

pub(crate) fn de_report_definition<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ReportDefinition>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ReportDefinitionBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ReportName" => {
                            builder = builder.set_report_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "TimeUnit" => {
                            builder = builder.set_time_unit(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TimeUnit::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Format" => {
                            builder = builder.set_format(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ReportFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Compression" => {
                            builder = builder.set_compression(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CompressionFormat::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AdditionalSchemaElements" => {
                            builder = builder
                                .set_additional_schema_elements(crate::protocol_serde::shape_schema_element_list::de_schema_element_list(tokens)?);
                        }
                        "S3Bucket" => {
                            builder = builder.set_s3_bucket(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "S3Prefix" => {
                            builder = builder.set_s3_prefix(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "S3Region" => {
                            builder = builder.set_s3_region(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AwsRegion::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "AdditionalArtifacts" => {
                            builder = builder.set_additional_artifacts(
                                crate::protocol_serde::shape_additional_artifact_list::de_additional_artifact_list(tokens)?,
                            );
                        }
                        "RefreshClosedReports" => {
                            builder = builder.set_refresh_closed_reports(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ReportVersioning" => {
                            builder = builder.set_report_versioning(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ReportVersioning::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BillingViewArn" => {
                            builder = builder.set_billing_view_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::report_definition_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
