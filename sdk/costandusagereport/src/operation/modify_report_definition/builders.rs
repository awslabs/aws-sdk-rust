// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_report_definition::_modify_report_definition_output::ModifyReportDefinitionOutputBuilder;

pub use crate::operation::modify_report_definition::_modify_report_definition_input::ModifyReportDefinitionInputBuilder;

impl crate::operation::modify_report_definition::builders::ModifyReportDefinitionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_report_definition::ModifyReportDefinitionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_report_definition::ModifyReportDefinitionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_report_definition();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyReportDefinition`.
///
/// <p>Allows you to programmatically update your report preferences.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyReportDefinitionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_report_definition::builders::ModifyReportDefinitionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_report_definition::ModifyReportDefinitionOutput,
        crate::operation::modify_report_definition::ModifyReportDefinitionError,
    > for ModifyReportDefinitionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_report_definition::ModifyReportDefinitionOutput,
            crate::operation::modify_report_definition::ModifyReportDefinitionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyReportDefinitionFluentBuilder {
    /// Creates a new `ModifyReportDefinition`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyReportDefinition as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_report_definition::builders::ModifyReportDefinitionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_report_definition::ModifyReportDefinitionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_report_definition::ModifyReportDefinitionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_report_definition::ModifyReportDefinition::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_report_definition::ModifyReportDefinition::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_report_definition::ModifyReportDefinitionOutput,
        crate::operation::modify_report_definition::ModifyReportDefinitionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the report that you want to create. The name must be unique, is case sensitive, and can't include spaces.</p>
    pub fn report_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.report_name(input.into());
        self
    }
    /// <p>The name of the report that you want to create. The name must be unique, is case sensitive, and can't include spaces.</p>
    pub fn set_report_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_report_name(input);
        self
    }
    /// <p>The name of the report that you want to create. The name must be unique, is case sensitive, and can't include spaces.</p>
    pub fn get_report_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_report_name()
    }
    /// <p>The definition of Amazon Web Services Cost and Usage Report. You can specify the report name, time unit, report format, compression format, S3 bucket, additional artifacts, and schema elements in the definition.</p>
    pub fn report_definition(mut self, input: crate::types::ReportDefinition) -> Self {
        self.inner = self.inner.report_definition(input);
        self
    }
    /// <p>The definition of Amazon Web Services Cost and Usage Report. You can specify the report name, time unit, report format, compression format, S3 bucket, additional artifacts, and schema elements in the definition.</p>
    pub fn set_report_definition(mut self, input: ::std::option::Option<crate::types::ReportDefinition>) -> Self {
        self.inner = self.inner.set_report_definition(input);
        self
    }
    /// <p>The definition of Amazon Web Services Cost and Usage Report. You can specify the report name, time unit, report format, compression format, S3 bucket, additional artifacts, and schema elements in the definition.</p>
    pub fn get_report_definition(&self) -> &::std::option::Option<crate::types::ReportDefinition> {
        self.inner.get_report_definition()
    }
}
