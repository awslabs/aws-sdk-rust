// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Deletes the specified report.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteReportDefinition {
    _private: (),
}
impl DeleteReportDefinition {
    /// Creates a new builder-style object to manufacture [`DeleteReportDefinitionInput`](crate::input::DeleteReportDefinitionInput)
    pub fn builder() -> crate::input::delete_report_definition_input::Builder {
        crate::input::delete_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteReportDefinition {
    type Output = std::result::Result<
        crate::output::DeleteReportDefinitionOutput,
        crate::error::DeleteReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_report_definition_error(response)
        } else {
            crate::operation_deser::parse_delete_report_definition_response(response)
        }
    }
}

/// <p>Lists the AWS Cost and Usage reports available to this account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeReportDefinitions {
    _private: (),
}
impl DescribeReportDefinitions {
    /// Creates a new builder-style object to manufacture [`DescribeReportDefinitionsInput`](crate::input::DescribeReportDefinitionsInput)
    pub fn builder() -> crate::input::describe_report_definitions_input::Builder {
        crate::input::describe_report_definitions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeReportDefinitions {
    type Output = std::result::Result<
        crate::output::DescribeReportDefinitionsOutput,
        crate::error::DescribeReportDefinitionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_report_definitions_error(response)
        } else {
            crate::operation_deser::parse_describe_report_definitions_response(response)
        }
    }
}

/// <p>Allows you to programatically update your report preferences.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ModifyReportDefinition {
    _private: (),
}
impl ModifyReportDefinition {
    /// Creates a new builder-style object to manufacture [`ModifyReportDefinitionInput`](crate::input::ModifyReportDefinitionInput)
    pub fn builder() -> crate::input::modify_report_definition_input::Builder {
        crate::input::modify_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ModifyReportDefinition {
    type Output = std::result::Result<
        crate::output::ModifyReportDefinitionOutput,
        crate::error::ModifyReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_modify_report_definition_error(response)
        } else {
            crate::operation_deser::parse_modify_report_definition_response(response)
        }
    }
}

/// <p>Creates a new report using the description that you provide.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutReportDefinition {
    _private: (),
}
impl PutReportDefinition {
    /// Creates a new builder-style object to manufacture [`PutReportDefinitionInput`](crate::input::PutReportDefinitionInput)
    pub fn builder() -> crate::input::put_report_definition_input::Builder {
        crate::input::put_report_definition_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutReportDefinition {
    type Output = std::result::Result<
        crate::output::PutReportDefinitionOutput,
        crate::error::PutReportDefinitionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_report_definition_error(response)
        } else {
            crate::operation_deser::parse_put_report_definition_response(response)
        }
    }
}
