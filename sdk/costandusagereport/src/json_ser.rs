// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_delete_report_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReportDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.report_name {
        object.key("ReportName").string(var_1.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_report_definitions_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReportDefinitionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_2) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.next_token {
        object.key("NextToken").string(var_3.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_modify_report_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ModifyReportDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.report_name {
        object.key("ReportName").string(var_4.as_str());
    }
    if let Some(var_5) = &input.report_definition {
        let mut object_6 = object.key("ReportDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_report_definition(&mut object_6, var_5)?;
        object_6.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_put_report_definition_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutReportDefinitionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_7) = &input.report_definition {
        let mut object_8 = object.key("ReportDefinition").start_object();
        crate::json_ser::serialize_structure_crate_model_report_definition(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_report_definition(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReportDefinition,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_9) = &input.report_name {
        object.key("ReportName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.time_unit {
        object.key("TimeUnit").string(var_10.as_str());
    }
    if let Some(var_11) = &input.format {
        object.key("Format").string(var_11.as_str());
    }
    if let Some(var_12) = &input.compression {
        object.key("Compression").string(var_12.as_str());
    }
    if let Some(var_13) = &input.additional_schema_elements {
        let mut array_14 = object.key("AdditionalSchemaElements").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.s3_bucket {
        object.key("S3Bucket").string(var_16.as_str());
    }
    if let Some(var_17) = &input.s3_prefix {
        object.key("S3Prefix").string(var_17.as_str());
    }
    if let Some(var_18) = &input.s3_region {
        object.key("S3Region").string(var_18.as_str());
    }
    if let Some(var_19) = &input.additional_artifacts {
        let mut array_20 = object.key("AdditionalArtifacts").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.refresh_closed_reports {
        object.key("RefreshClosedReports").boolean(*var_22);
    }
    if let Some(var_23) = &input.report_versioning {
        object.key("ReportVersioning").string(var_23.as_str());
    }
    if let Some(var_24) = &input.billing_view_arn {
        object.key("BillingViewArn").string(var_24.as_str());
    }
    Ok(())
}
