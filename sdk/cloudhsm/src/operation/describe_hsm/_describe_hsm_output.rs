// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the output of the <code>DescribeHsm</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeHsmOutput {
    /// <p>The ARN of the HSM.</p>
    pub hsm_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the HSM.</p>
    pub status: ::std::option::Option<crate::types::HsmStatus>,
    /// <p>Contains additional information about the status of the HSM.</p>
    pub status_details: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone that the HSM is in.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the elastic network interface (ENI) attached to the HSM.</p>
    pub eni_id: ::std::option::Option<::std::string::String>,
    /// <p>The IP address assigned to the HSM's ENI.</p>
    pub eni_ip: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of subscription for the HSM.</p>
    /// <ul>
    /// <li> <p> <b>PRODUCTION</b> - The HSM is being used in a production environment.</p> </li>
    /// <li> <p> <b>TRIAL</b> - The HSM is being used in a product trial.</p> </li>
    /// </ul>
    pub subscription_type: ::std::option::Option<crate::types::SubscriptionType>,
    /// <p>The subscription start date.</p>
    pub subscription_start_date: ::std::option::Option<::std::string::String>,
    /// <p>The subscription end date.</p>
    pub subscription_end_date: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the VPC that the HSM is in.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the subnet that the HSM is in.</p>
    pub subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the IAM role assigned to the HSM.</p>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The serial number of the HSM.</p>
    pub serial_number: ::std::option::Option<::std::string::String>,
    /// <p>The name of the HSM vendor.</p>
    pub vendor_name: ::std::option::Option<::std::string::String>,
    /// <p>The HSM model type.</p>
    pub hsm_type: ::std::option::Option<::std::string::String>,
    /// <p>The HSM software version.</p>
    pub software_version: ::std::option::Option<::std::string::String>,
    /// <p>The public SSH key.</p>
    pub ssh_public_key: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the SSH key was last updated.</p>
    pub ssh_key_last_updated: ::std::option::Option<::std::string::String>,
    /// <p>The URI of the certificate server.</p>
    pub server_cert_uri: ::std::option::Option<::std::string::String>,
    /// <p>The date and time that the server certificate was last updated.</p>
    pub server_cert_last_updated: ::std::option::Option<::std::string::String>,
    /// <p>The list of partitions on the HSM.</p>
    pub partitions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeHsmOutput {
    /// <p>The ARN of the HSM.</p>
    pub fn hsm_arn(&self) -> ::std::option::Option<&str> {
        self.hsm_arn.as_deref()
    }
    /// <p>The status of the HSM.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::HsmStatus> {
        self.status.as_ref()
    }
    /// <p>Contains additional information about the status of the HSM.</p>
    pub fn status_details(&self) -> ::std::option::Option<&str> {
        self.status_details.as_deref()
    }
    /// <p>The Availability Zone that the HSM is in.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The identifier of the elastic network interface (ENI) attached to the HSM.</p>
    pub fn eni_id(&self) -> ::std::option::Option<&str> {
        self.eni_id.as_deref()
    }
    /// <p>The IP address assigned to the HSM's ENI.</p>
    pub fn eni_ip(&self) -> ::std::option::Option<&str> {
        self.eni_ip.as_deref()
    }
    /// <p>Specifies the type of subscription for the HSM.</p>
    /// <ul>
    /// <li> <p> <b>PRODUCTION</b> - The HSM is being used in a production environment.</p> </li>
    /// <li> <p> <b>TRIAL</b> - The HSM is being used in a product trial.</p> </li>
    /// </ul>
    pub fn subscription_type(&self) -> ::std::option::Option<&crate::types::SubscriptionType> {
        self.subscription_type.as_ref()
    }
    /// <p>The subscription start date.</p>
    pub fn subscription_start_date(&self) -> ::std::option::Option<&str> {
        self.subscription_start_date.as_deref()
    }
    /// <p>The subscription end date.</p>
    pub fn subscription_end_date(&self) -> ::std::option::Option<&str> {
        self.subscription_end_date.as_deref()
    }
    /// <p>The identifier of the VPC that the HSM is in.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The identifier of the subnet that the HSM is in.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&str> {
        self.subnet_id.as_deref()
    }
    /// <p>The ARN of the IAM role assigned to the HSM.</p>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The serial number of the HSM.</p>
    pub fn serial_number(&self) -> ::std::option::Option<&str> {
        self.serial_number.as_deref()
    }
    /// <p>The name of the HSM vendor.</p>
    pub fn vendor_name(&self) -> ::std::option::Option<&str> {
        self.vendor_name.as_deref()
    }
    /// <p>The HSM model type.</p>
    pub fn hsm_type(&self) -> ::std::option::Option<&str> {
        self.hsm_type.as_deref()
    }
    /// <p>The HSM software version.</p>
    pub fn software_version(&self) -> ::std::option::Option<&str> {
        self.software_version.as_deref()
    }
    /// <p>The public SSH key.</p>
    pub fn ssh_public_key(&self) -> ::std::option::Option<&str> {
        self.ssh_public_key.as_deref()
    }
    /// <p>The date and time that the SSH key was last updated.</p>
    pub fn ssh_key_last_updated(&self) -> ::std::option::Option<&str> {
        self.ssh_key_last_updated.as_deref()
    }
    /// <p>The URI of the certificate server.</p>
    pub fn server_cert_uri(&self) -> ::std::option::Option<&str> {
        self.server_cert_uri.as_deref()
    }
    /// <p>The date and time that the server certificate was last updated.</p>
    pub fn server_cert_last_updated(&self) -> ::std::option::Option<&str> {
        self.server_cert_last_updated.as_deref()
    }
    /// <p>The list of partitions on the HSM.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.partitions.is_none()`.
    pub fn partitions(&self) -> &[::std::string::String] {
        self.partitions.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeHsmOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeHsmOutput {
    /// Creates a new builder-style object to manufacture [`DescribeHsmOutput`](crate::operation::describe_hsm::DescribeHsmOutput).
    pub fn builder() -> crate::operation::describe_hsm::builders::DescribeHsmOutputBuilder {
        crate::operation::describe_hsm::builders::DescribeHsmOutputBuilder::default()
    }
}

/// A builder for [`DescribeHsmOutput`](crate::operation::describe_hsm::DescribeHsmOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeHsmOutputBuilder {
    pub(crate) hsm_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::HsmStatus>,
    pub(crate) status_details: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) eni_id: ::std::option::Option<::std::string::String>,
    pub(crate) eni_ip: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_type: ::std::option::Option<crate::types::SubscriptionType>,
    pub(crate) subscription_start_date: ::std::option::Option<::std::string::String>,
    pub(crate) subscription_end_date: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) serial_number: ::std::option::Option<::std::string::String>,
    pub(crate) vendor_name: ::std::option::Option<::std::string::String>,
    pub(crate) hsm_type: ::std::option::Option<::std::string::String>,
    pub(crate) software_version: ::std::option::Option<::std::string::String>,
    pub(crate) ssh_public_key: ::std::option::Option<::std::string::String>,
    pub(crate) ssh_key_last_updated: ::std::option::Option<::std::string::String>,
    pub(crate) server_cert_uri: ::std::option::Option<::std::string::String>,
    pub(crate) server_cert_last_updated: ::std::option::Option<::std::string::String>,
    pub(crate) partitions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeHsmOutputBuilder {
    /// <p>The ARN of the HSM.</p>
    pub fn hsm_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hsm_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the HSM.</p>
    pub fn set_hsm_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hsm_arn = input;
        self
    }
    /// <p>The ARN of the HSM.</p>
    pub fn get_hsm_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.hsm_arn
    }
    /// <p>The status of the HSM.</p>
    pub fn status(mut self, input: crate::types::HsmStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the HSM.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::HsmStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the HSM.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::HsmStatus> {
        &self.status
    }
    /// <p>Contains additional information about the status of the HSM.</p>
    pub fn status_details(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_details = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains additional information about the status of the HSM.</p>
    pub fn set_status_details(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_details = input;
        self
    }
    /// <p>Contains additional information about the status of the HSM.</p>
    pub fn get_status_details(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_details
    }
    /// <p>The Availability Zone that the HSM is in.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone that the HSM is in.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone that the HSM is in.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The identifier of the elastic network interface (ENI) attached to the HSM.</p>
    pub fn eni_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eni_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the elastic network interface (ENI) attached to the HSM.</p>
    pub fn set_eni_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eni_id = input;
        self
    }
    /// <p>The identifier of the elastic network interface (ENI) attached to the HSM.</p>
    pub fn get_eni_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.eni_id
    }
    /// <p>The IP address assigned to the HSM's ENI.</p>
    pub fn eni_ip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eni_ip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP address assigned to the HSM's ENI.</p>
    pub fn set_eni_ip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eni_ip = input;
        self
    }
    /// <p>The IP address assigned to the HSM's ENI.</p>
    pub fn get_eni_ip(&self) -> &::std::option::Option<::std::string::String> {
        &self.eni_ip
    }
    /// <p>Specifies the type of subscription for the HSM.</p>
    /// <ul>
    /// <li> <p> <b>PRODUCTION</b> - The HSM is being used in a production environment.</p> </li>
    /// <li> <p> <b>TRIAL</b> - The HSM is being used in a product trial.</p> </li>
    /// </ul>
    pub fn subscription_type(mut self, input: crate::types::SubscriptionType) -> Self {
        self.subscription_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of subscription for the HSM.</p>
    /// <ul>
    /// <li> <p> <b>PRODUCTION</b> - The HSM is being used in a production environment.</p> </li>
    /// <li> <p> <b>TRIAL</b> - The HSM is being used in a product trial.</p> </li>
    /// </ul>
    pub fn set_subscription_type(mut self, input: ::std::option::Option<crate::types::SubscriptionType>) -> Self {
        self.subscription_type = input;
        self
    }
    /// <p>Specifies the type of subscription for the HSM.</p>
    /// <ul>
    /// <li> <p> <b>PRODUCTION</b> - The HSM is being used in a production environment.</p> </li>
    /// <li> <p> <b>TRIAL</b> - The HSM is being used in a product trial.</p> </li>
    /// </ul>
    pub fn get_subscription_type(&self) -> &::std::option::Option<crate::types::SubscriptionType> {
        &self.subscription_type
    }
    /// <p>The subscription start date.</p>
    pub fn subscription_start_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_start_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subscription start date.</p>
    pub fn set_subscription_start_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_start_date = input;
        self
    }
    /// <p>The subscription start date.</p>
    pub fn get_subscription_start_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_start_date
    }
    /// <p>The subscription end date.</p>
    pub fn subscription_end_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_end_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subscription end date.</p>
    pub fn set_subscription_end_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_end_date = input;
        self
    }
    /// <p>The subscription end date.</p>
    pub fn get_subscription_end_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_end_date
    }
    /// <p>The identifier of the VPC that the HSM is in.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the VPC that the HSM is in.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The identifier of the VPC that the HSM is in.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The identifier of the subnet that the HSM is in.</p>
    pub fn subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the subnet that the HSM is in.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The identifier of the subnet that the HSM is in.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_id
    }
    /// <p>The ARN of the IAM role assigned to the HSM.</p>
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role assigned to the HSM.</p>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The ARN of the IAM role assigned to the HSM.</p>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The serial number of the HSM.</p>
    pub fn serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.serial_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The serial number of the HSM.</p>
    pub fn set_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.serial_number = input;
        self
    }
    /// <p>The serial number of the HSM.</p>
    pub fn get_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.serial_number
    }
    /// <p>The name of the HSM vendor.</p>
    pub fn vendor_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vendor_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the HSM vendor.</p>
    pub fn set_vendor_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vendor_name = input;
        self
    }
    /// <p>The name of the HSM vendor.</p>
    pub fn get_vendor_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.vendor_name
    }
    /// <p>The HSM model type.</p>
    pub fn hsm_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.hsm_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HSM model type.</p>
    pub fn set_hsm_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.hsm_type = input;
        self
    }
    /// <p>The HSM model type.</p>
    pub fn get_hsm_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.hsm_type
    }
    /// <p>The HSM software version.</p>
    pub fn software_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.software_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HSM software version.</p>
    pub fn set_software_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.software_version = input;
        self
    }
    /// <p>The HSM software version.</p>
    pub fn get_software_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.software_version
    }
    /// <p>The public SSH key.</p>
    pub fn ssh_public_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssh_public_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public SSH key.</p>
    pub fn set_ssh_public_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssh_public_key = input;
        self
    }
    /// <p>The public SSH key.</p>
    pub fn get_ssh_public_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssh_public_key
    }
    /// <p>The date and time that the SSH key was last updated.</p>
    pub fn ssh_key_last_updated(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssh_key_last_updated = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the SSH key was last updated.</p>
    pub fn set_ssh_key_last_updated(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssh_key_last_updated = input;
        self
    }
    /// <p>The date and time that the SSH key was last updated.</p>
    pub fn get_ssh_key_last_updated(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssh_key_last_updated
    }
    /// <p>The URI of the certificate server.</p>
    pub fn server_cert_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_cert_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI of the certificate server.</p>
    pub fn set_server_cert_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_cert_uri = input;
        self
    }
    /// <p>The URI of the certificate server.</p>
    pub fn get_server_cert_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_cert_uri
    }
    /// <p>The date and time that the server certificate was last updated.</p>
    pub fn server_cert_last_updated(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_cert_last_updated = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time that the server certificate was last updated.</p>
    pub fn set_server_cert_last_updated(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_cert_last_updated = input;
        self
    }
    /// <p>The date and time that the server certificate was last updated.</p>
    pub fn get_server_cert_last_updated(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_cert_last_updated
    }
    /// Appends an item to `partitions`.
    ///
    /// To override the contents of this collection use [`set_partitions`](Self::set_partitions).
    ///
    /// <p>The list of partitions on the HSM.</p>
    pub fn partitions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.partitions.unwrap_or_default();
        v.push(input.into());
        self.partitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of partitions on the HSM.</p>
    pub fn set_partitions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.partitions = input;
        self
    }
    /// <p>The list of partitions on the HSM.</p>
    pub fn get_partitions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.partitions
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeHsmOutput`](crate::operation::describe_hsm::DescribeHsmOutput).
    pub fn build(self) -> crate::operation::describe_hsm::DescribeHsmOutput {
        crate::operation::describe_hsm::DescribeHsmOutput {
            hsm_arn: self.hsm_arn,
            status: self.status,
            status_details: self.status_details,
            availability_zone: self.availability_zone,
            eni_id: self.eni_id,
            eni_ip: self.eni_ip,
            subscription_type: self.subscription_type,
            subscription_start_date: self.subscription_start_date,
            subscription_end_date: self.subscription_end_date,
            vpc_id: self.vpc_id,
            subnet_id: self.subnet_id,
            iam_role_arn: self.iam_role_arn,
            serial_number: self.serial_number,
            vendor_name: self.vendor_name,
            hsm_type: self.hsm_type,
            software_version: self.software_version,
            ssh_public_key: self.ssh_public_key,
            ssh_key_last_updated: self.ssh_key_last_updated,
            server_cert_uri: self.server_cert_uri,
            server_cert_last_updated: self.server_cert_last_updated,
            partitions: self.partitions,
            _request_id: self._request_id,
        }
    }
}
