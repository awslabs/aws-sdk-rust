// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Indicates that an internal error occurred.</p>
    CloudHsmInternalException(crate::error::CloudHsmInternalException),
    /// <p>Indicates that an exception occurred in the AWS CloudHSM service.</p>
    CloudHsmServiceException(crate::error::CloudHsmServiceException),
    /// <p>Indicates that one or more of the request parameters are not valid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CloudHsmInternalException(inner) => inner.fmt(f),
            Error::CloudHsmServiceException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::AddTagsToResourceError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::AddTagsToResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHapgError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateHapgError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHapgError> for Error {
    fn from(err: crate::error::CreateHapgError) -> Self {
        match err {
            crate::error::CreateHapgError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::CreateHapgError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CreateHapgError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateHapgError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateHsmError> for Error {
    fn from(err: crate::error::CreateHsmError) -> Self {
        match err {
            crate::error::CreateHsmError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::CreateHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CreateHsmError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLunaClientError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLunaClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLunaClientError> for Error {
    fn from(err: crate::error::CreateLunaClientError) -> Self {
        match err {
            crate::error::CreateLunaClientError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::CreateLunaClientError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::CreateLunaClientError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateLunaClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHapgError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteHapgError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHapgError> for Error {
    fn from(err: crate::error::DeleteHapgError) -> Self {
        match err {
            crate::error::DeleteHapgError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DeleteHapgError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteHapgError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteHapgError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteHsmError> for Error {
    fn from(err: crate::error::DeleteHsmError) -> Self {
        match err {
            crate::error::DeleteHsmError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DeleteHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteHsmError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLunaClientError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLunaClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLunaClientError> for Error {
    fn from(err: crate::error::DeleteLunaClientError) -> Self {
        match err {
            crate::error::DeleteLunaClientError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DeleteLunaClientError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DeleteLunaClientError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteLunaClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeHapgError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeHapgError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeHapgError> for Error {
    fn from(err: crate::error::DescribeHapgError) -> Self {
        match err {
            crate::error::DescribeHapgError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DescribeHapgError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DescribeHapgError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeHapgError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeHsmError> for Error {
    fn from(err: crate::error::DescribeHsmError) -> Self {
        match err {
            crate::error::DescribeHsmError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DescribeHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DescribeHsmError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLunaClientError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLunaClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLunaClientError> for Error {
    fn from(err: crate::error::DescribeLunaClientError) -> Self {
        match err {
            crate::error::DescribeLunaClientError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::DescribeLunaClientError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::DescribeLunaClientError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeLunaClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetConfigError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetConfigError> for Error {
    fn from(err: crate::error::GetConfigError) -> Self {
        match err {
            crate::error::GetConfigError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::GetConfigError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::GetConfigError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::GetConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAvailableZonesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAvailableZonesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAvailableZonesError> for Error {
    fn from(err: crate::error::ListAvailableZonesError) -> Self {
        match err {
            crate::error::ListAvailableZonesError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ListAvailableZonesError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListAvailableZonesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListAvailableZonesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHapgsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListHapgsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHapgsError> for Error {
    fn from(err: crate::error::ListHapgsError) -> Self {
        match err {
            crate::error::ListHapgsError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ListHapgsError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListHapgsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListHapgsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListHsmsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListHsmsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListHsmsError> for Error {
    fn from(err: crate::error::ListHsmsError) -> Self {
        match err {
            crate::error::ListHsmsError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ListHsmsError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListHsmsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListHsmsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLunaClientsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLunaClientsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLunaClientsError> for Error {
    fn from(err: crate::error::ListLunaClientsError) -> Self {
        match err {
            crate::error::ListLunaClientsError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ListLunaClientsError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListLunaClientsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListLunaClientsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ListTagsForResourceError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyHapgError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyHapgError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyHapgError> for Error {
    fn from(err: crate::error::ModifyHapgError) -> Self {
        match err {
            crate::error::ModifyHapgError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ModifyHapgError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ModifyHapgError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ModifyHapgError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyHsmError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyHsmError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyHsmError> for Error {
    fn from(err: crate::error::ModifyHsmError) -> Self {
        match err {
            crate::error::ModifyHsmError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::ModifyHsmError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ModifyHsmError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ModifyHsmError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyLunaClientError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyLunaClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyLunaClientError> for Error {
    fn from(err: crate::error::ModifyLunaClientError) -> Self {
        match err {
            crate::error::ModifyLunaClientError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::ModifyLunaClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::CloudHsmInternalException(inner) => {
                Error::CloudHsmInternalException(inner)
            }
            crate::error::RemoveTagsFromResourceError::CloudHsmServiceException(inner) => {
                Error::CloudHsmServiceException(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::CloudHsmInternalException(e) => e.request_id(),
            Self::CloudHsmServiceException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
