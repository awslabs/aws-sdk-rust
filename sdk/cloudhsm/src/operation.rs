// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AddTagsToResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_tags_to_resource`](crate::client::fluent_builders::AddTagsToResource).
///
/// `ParseStrictResponse` impl for `AddTagsToResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddTagsToResource {
    _private: (),
}
impl AddTagsToResource {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput).
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
    /// Creates a new `AddTagsToResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddTagsToResource {
    type Output = std::result::Result<
        crate::output::AddTagsToResourceOutput,
        crate::error::AddTagsToResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_add_tags_to_resource::de_add_tags_to_resource_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_add_tags_to_resource::de_add_tags_to_resource_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateHapg`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_hapg`](crate::client::fluent_builders::CreateHapg).
///
/// `ParseStrictResponse` impl for `CreateHapg`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateHapg {
    _private: (),
}
impl CreateHapg {
    /// Creates a new builder-style object to manufacture [`CreateHapgInput`](crate::input::CreateHapgInput).
    pub fn builder() -> crate::input::create_hapg_input::Builder {
        crate::input::create_hapg_input::Builder::default()
    }
    /// Creates a new `CreateHapg` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateHapg {
    type Output =
        std::result::Result<crate::output::CreateHapgOutput, crate::error::CreateHapgError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_hapg::de_create_hapg_http_error(response)
        } else {
            crate::protocol_serde::shape_create_hapg::de_create_hapg_http_response(response)
        }
    }
}

/// Operation shape for `CreateHsm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_hsm`](crate::client::fluent_builders::CreateHsm).
///
/// `ParseStrictResponse` impl for `CreateHsm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateHsm {
    _private: (),
}
impl CreateHsm {
    /// Creates a new builder-style object to manufacture [`CreateHsmInput`](crate::input::CreateHsmInput).
    pub fn builder() -> crate::input::create_hsm_input::Builder {
        crate::input::create_hsm_input::Builder::default()
    }
    /// Creates a new `CreateHsm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateHsm {
    type Output = std::result::Result<crate::output::CreateHsmOutput, crate::error::CreateHsmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_hsm::de_create_hsm_http_error(response)
        } else {
            crate::protocol_serde::shape_create_hsm::de_create_hsm_http_response(response)
        }
    }
}

/// Operation shape for `CreateLunaClient`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_luna_client`](crate::client::fluent_builders::CreateLunaClient).
///
/// `ParseStrictResponse` impl for `CreateLunaClient`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLunaClient {
    _private: (),
}
impl CreateLunaClient {
    /// Creates a new builder-style object to manufacture [`CreateLunaClientInput`](crate::input::CreateLunaClientInput).
    pub fn builder() -> crate::input::create_luna_client_input::Builder {
        crate::input::create_luna_client_input::Builder::default()
    }
    /// Creates a new `CreateLunaClient` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLunaClient {
    type Output = std::result::Result<
        crate::output::CreateLunaClientOutput,
        crate::error::CreateLunaClientError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_luna_client::de_create_luna_client_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_luna_client::de_create_luna_client_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteHapg`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_hapg`](crate::client::fluent_builders::DeleteHapg).
///
/// `ParseStrictResponse` impl for `DeleteHapg`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteHapg {
    _private: (),
}
impl DeleteHapg {
    /// Creates a new builder-style object to manufacture [`DeleteHapgInput`](crate::input::DeleteHapgInput).
    pub fn builder() -> crate::input::delete_hapg_input::Builder {
        crate::input::delete_hapg_input::Builder::default()
    }
    /// Creates a new `DeleteHapg` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteHapg {
    type Output =
        std::result::Result<crate::output::DeleteHapgOutput, crate::error::DeleteHapgError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_hapg::de_delete_hapg_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_hapg::de_delete_hapg_http_response(response)
        }
    }
}

/// Operation shape for `DeleteHsm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_hsm`](crate::client::fluent_builders::DeleteHsm).
///
/// `ParseStrictResponse` impl for `DeleteHsm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteHsm {
    _private: (),
}
impl DeleteHsm {
    /// Creates a new builder-style object to manufacture [`DeleteHsmInput`](crate::input::DeleteHsmInput).
    pub fn builder() -> crate::input::delete_hsm_input::Builder {
        crate::input::delete_hsm_input::Builder::default()
    }
    /// Creates a new `DeleteHsm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteHsm {
    type Output = std::result::Result<crate::output::DeleteHsmOutput, crate::error::DeleteHsmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_hsm::de_delete_hsm_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_hsm::de_delete_hsm_http_response(response)
        }
    }
}

/// Operation shape for `DeleteLunaClient`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_luna_client`](crate::client::fluent_builders::DeleteLunaClient).
///
/// `ParseStrictResponse` impl for `DeleteLunaClient`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteLunaClient {
    _private: (),
}
impl DeleteLunaClient {
    /// Creates a new builder-style object to manufacture [`DeleteLunaClientInput`](crate::input::DeleteLunaClientInput).
    pub fn builder() -> crate::input::delete_luna_client_input::Builder {
        crate::input::delete_luna_client_input::Builder::default()
    }
    /// Creates a new `DeleteLunaClient` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLunaClient {
    type Output = std::result::Result<
        crate::output::DeleteLunaClientOutput,
        crate::error::DeleteLunaClientError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_luna_client::de_delete_luna_client_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_luna_client::de_delete_luna_client_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeHapg`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_hapg`](crate::client::fluent_builders::DescribeHapg).
///
/// `ParseStrictResponse` impl for `DescribeHapg`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeHapg {
    _private: (),
}
impl DescribeHapg {
    /// Creates a new builder-style object to manufacture [`DescribeHapgInput`](crate::input::DescribeHapgInput).
    pub fn builder() -> crate::input::describe_hapg_input::Builder {
        crate::input::describe_hapg_input::Builder::default()
    }
    /// Creates a new `DescribeHapg` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeHapg {
    type Output =
        std::result::Result<crate::output::DescribeHapgOutput, crate::error::DescribeHapgError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_hapg::de_describe_hapg_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_hapg::de_describe_hapg_http_response(response)
        }
    }
}

/// Operation shape for `DescribeHsm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_hsm`](crate::client::fluent_builders::DescribeHsm).
///
/// `ParseStrictResponse` impl for `DescribeHsm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeHsm {
    _private: (),
}
impl DescribeHsm {
    /// Creates a new builder-style object to manufacture [`DescribeHsmInput`](crate::input::DescribeHsmInput).
    pub fn builder() -> crate::input::describe_hsm_input::Builder {
        crate::input::describe_hsm_input::Builder::default()
    }
    /// Creates a new `DescribeHsm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeHsm {
    type Output =
        std::result::Result<crate::output::DescribeHsmOutput, crate::error::DescribeHsmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_hsm::de_describe_hsm_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_hsm::de_describe_hsm_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLunaClient`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_luna_client`](crate::client::fluent_builders::DescribeLunaClient).
///
/// `ParseStrictResponse` impl for `DescribeLunaClient`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLunaClient {
    _private: (),
}
impl DescribeLunaClient {
    /// Creates a new builder-style object to manufacture [`DescribeLunaClientInput`](crate::input::DescribeLunaClientInput).
    pub fn builder() -> crate::input::describe_luna_client_input::Builder {
        crate::input::describe_luna_client_input::Builder::default()
    }
    /// Creates a new `DescribeLunaClient` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLunaClient {
    type Output = std::result::Result<
        crate::output::DescribeLunaClientOutput,
        crate::error::DescribeLunaClientError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_luna_client::de_describe_luna_client_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_luna_client::de_describe_luna_client_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_config`](crate::client::fluent_builders::GetConfig).
///
/// `ParseStrictResponse` impl for `GetConfig`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetConfig {
    _private: (),
}
impl GetConfig {
    /// Creates a new builder-style object to manufacture [`GetConfigInput`](crate::input::GetConfigInput).
    pub fn builder() -> crate::input::get_config_input::Builder {
        crate::input::get_config_input::Builder::default()
    }
    /// Creates a new `GetConfig` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetConfig {
    type Output = std::result::Result<crate::output::GetConfigOutput, crate::error::GetConfigError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_config::de_get_config_http_error(response)
        } else {
            crate::protocol_serde::shape_get_config::de_get_config_http_response(response)
        }
    }
}

/// Operation shape for `ListAvailableZones`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_available_zones`](crate::client::fluent_builders::ListAvailableZones).
///
/// `ParseStrictResponse` impl for `ListAvailableZones`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAvailableZones {
    _private: (),
}
impl ListAvailableZones {
    /// Creates a new builder-style object to manufacture [`ListAvailableZonesInput`](crate::input::ListAvailableZonesInput).
    pub fn builder() -> crate::input::list_available_zones_input::Builder {
        crate::input::list_available_zones_input::Builder::default()
    }
    /// Creates a new `ListAvailableZones` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAvailableZones {
    type Output = std::result::Result<
        crate::output::ListAvailableZonesOutput,
        crate::error::ListAvailableZonesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_available_zones::de_list_available_zones_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_available_zones::de_list_available_zones_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListHapgs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_hapgs`](crate::client::fluent_builders::ListHapgs).
///
/// `ParseStrictResponse` impl for `ListHapgs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListHapgs {
    _private: (),
}
impl ListHapgs {
    /// Creates a new builder-style object to manufacture [`ListHapgsInput`](crate::input::ListHapgsInput).
    pub fn builder() -> crate::input::list_hapgs_input::Builder {
        crate::input::list_hapgs_input::Builder::default()
    }
    /// Creates a new `ListHapgs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListHapgs {
    type Output = std::result::Result<crate::output::ListHapgsOutput, crate::error::ListHapgsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_hapgs::de_list_hapgs_http_error(response)
        } else {
            crate::protocol_serde::shape_list_hapgs::de_list_hapgs_http_response(response)
        }
    }
}

/// Operation shape for `ListHsms`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_hsms`](crate::client::fluent_builders::ListHsms).
///
/// `ParseStrictResponse` impl for `ListHsms`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListHsms {
    _private: (),
}
impl ListHsms {
    /// Creates a new builder-style object to manufacture [`ListHsmsInput`](crate::input::ListHsmsInput).
    pub fn builder() -> crate::input::list_hsms_input::Builder {
        crate::input::list_hsms_input::Builder::default()
    }
    /// Creates a new `ListHsms` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListHsms {
    type Output = std::result::Result<crate::output::ListHsmsOutput, crate::error::ListHsmsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_hsms::de_list_hsms_http_error(response)
        } else {
            crate::protocol_serde::shape_list_hsms::de_list_hsms_http_response(response)
        }
    }
}

/// Operation shape for `ListLunaClients`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_luna_clients`](crate::client::fluent_builders::ListLunaClients).
///
/// `ParseStrictResponse` impl for `ListLunaClients`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListLunaClients {
    _private: (),
}
impl ListLunaClients {
    /// Creates a new builder-style object to manufacture [`ListLunaClientsInput`](crate::input::ListLunaClientsInput).
    pub fn builder() -> crate::input::list_luna_clients_input::Builder {
        crate::input::list_luna_clients_input::Builder::default()
    }
    /// Creates a new `ListLunaClients` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListLunaClients {
    type Output = std::result::Result<
        crate::output::ListLunaClientsOutput,
        crate::error::ListLunaClientsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_luna_clients::de_list_luna_clients_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_luna_clients::de_list_luna_clients_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ModifyHapg`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`modify_hapg`](crate::client::fluent_builders::ModifyHapg).
///
/// `ParseStrictResponse` impl for `ModifyHapg`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ModifyHapg {
    _private: (),
}
impl ModifyHapg {
    /// Creates a new builder-style object to manufacture [`ModifyHapgInput`](crate::input::ModifyHapgInput).
    pub fn builder() -> crate::input::modify_hapg_input::Builder {
        crate::input::modify_hapg_input::Builder::default()
    }
    /// Creates a new `ModifyHapg` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ModifyHapg {
    type Output =
        std::result::Result<crate::output::ModifyHapgOutput, crate::error::ModifyHapgError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_modify_hapg::de_modify_hapg_http_error(response)
        } else {
            crate::protocol_serde::shape_modify_hapg::de_modify_hapg_http_response(response)
        }
    }
}

/// Operation shape for `ModifyHsm`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`modify_hsm`](crate::client::fluent_builders::ModifyHsm).
///
/// `ParseStrictResponse` impl for `ModifyHsm`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ModifyHsm {
    _private: (),
}
impl ModifyHsm {
    /// Creates a new builder-style object to manufacture [`ModifyHsmInput`](crate::input::ModifyHsmInput).
    pub fn builder() -> crate::input::modify_hsm_input::Builder {
        crate::input::modify_hsm_input::Builder::default()
    }
    /// Creates a new `ModifyHsm` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ModifyHsm {
    type Output = std::result::Result<crate::output::ModifyHsmOutput, crate::error::ModifyHsmError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_modify_hsm::de_modify_hsm_http_error(response)
        } else {
            crate::protocol_serde::shape_modify_hsm::de_modify_hsm_http_response(response)
        }
    }
}

/// Operation shape for `ModifyLunaClient`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`modify_luna_client`](crate::client::fluent_builders::ModifyLunaClient).
///
/// `ParseStrictResponse` impl for `ModifyLunaClient`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ModifyLunaClient {
    _private: (),
}
impl ModifyLunaClient {
    /// Creates a new builder-style object to manufacture [`ModifyLunaClientInput`](crate::input::ModifyLunaClientInput).
    pub fn builder() -> crate::input::modify_luna_client_input::Builder {
        crate::input::modify_luna_client_input::Builder::default()
    }
    /// Creates a new `ModifyLunaClient` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ModifyLunaClient {
    type Output = std::result::Result<
        crate::output::ModifyLunaClientOutput,
        crate::error::ModifyLunaClientError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_modify_luna_client::de_modify_luna_client_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_modify_luna_client::de_modify_luna_client_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveTagsFromResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_tags_from_resource`](crate::client::fluent_builders::RemoveTagsFromResource).
///
/// `ParseStrictResponse` impl for `RemoveTagsFromResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveTagsFromResource {
    _private: (),
}
impl RemoveTagsFromResource {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput).
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
    /// Creates a new `RemoveTagsFromResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveTagsFromResource {
    type Output = std::result::Result<
        crate::output::RemoveTagsFromResourceOutput,
        crate::error::RemoveTagsFromResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_tags_from_resource::de_remove_tags_from_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_tags_from_resource::de_remove_tags_from_resource_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
