// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_tags_to_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::AddTagsToResourceOutput, crate::error::AddTagsToResourceError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::AddTagsToResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::AddTagsToResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::AddTagsToResourceError {
                meta: generic,
                kind: crate::error::AddTagsToResourceErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::AddTagsToResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::AddTagsToResourceError {
            meta: generic,
            kind: crate::error::AddTagsToResourceErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::AddTagsToResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::AddTagsToResourceError {
            meta: generic,
            kind: crate::error::AddTagsToResourceErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::AddTagsToResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::AddTagsToResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_add_tags_to_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::AddTagsToResourceOutput, crate::error::AddTagsToResourceError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::add_tags_to_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_add_tags_to_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::AddTagsToResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hapg_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHapgOutput, crate::error::CreateHapgError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateHapgError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHapgError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::CreateHapgError {
                meta: generic,
                kind: crate::error::CreateHapgErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::CreateHapgError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::CreateHapgError {
            meta: generic,
            kind: crate::error::CreateHapgErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CreateHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::CreateHapgError {
            meta: generic,
            kind: crate::error::CreateHapgErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CreateHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateHapgError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hapg_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHapgOutput, crate::error::CreateHapgError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hapg_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_create_hapg(response.body().as_ref(), output)
            .map_err(crate::error::CreateHapgError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hsm_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHsmOutput, crate::error::CreateHsmError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateHsmError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateHsmError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::CreateHsmError {
                meta: generic,
                kind: crate::error::CreateHsmErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::CreateHsmError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::CreateHsmError {
            meta: generic,
            kind: crate::error::CreateHsmErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CreateHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::CreateHsmError {
            meta: generic,
            kind: crate::error::CreateHsmErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CreateHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateHsmError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_hsm_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateHsmOutput, crate::error::CreateHsmError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_hsm_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_create_hsm(response.body().as_ref(), output)
            .map_err(crate::error::CreateHsmError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_luna_client_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateLunaClientOutput, crate::error::CreateLunaClientError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::CreateLunaClientError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateLunaClientError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::CreateLunaClientError {
                meta: generic,
                kind: crate::error::CreateLunaClientErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::CreateLunaClientError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::CreateLunaClientError {
            meta: generic,
            kind: crate::error::CreateLunaClientErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CreateLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::CreateLunaClientError {
            meta: generic,
            kind: crate::error::CreateLunaClientErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::CreateLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::CreateLunaClientError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_luna_client_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::CreateLunaClientOutput, crate::error::CreateLunaClientError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_luna_client_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_create_luna_client(response.body().as_ref(), output)
                .map_err(crate::error::CreateLunaClientError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hapg_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHapgOutput, crate::error::DeleteHapgError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteHapgError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteHapgError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DeleteHapgError {
                meta: generic,
                kind: crate::error::DeleteHapgErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DeleteHapgError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DeleteHapgError {
            meta: generic,
            kind: crate::error::DeleteHapgErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DeleteHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DeleteHapgError {
            meta: generic,
            kind: crate::error::DeleteHapgErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteHapgError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hapg_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHapgOutput, crate::error::DeleteHapgError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_hapg_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_delete_hapg(response.body().as_ref(), output)
            .map_err(crate::error::DeleteHapgError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hsm_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHsmOutput, crate::error::DeleteHsmError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteHsmError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteHsmError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DeleteHsmError {
                meta: generic,
                kind: crate::error::DeleteHsmErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DeleteHsmError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DeleteHsmError {
            meta: generic,
            kind: crate::error::DeleteHsmErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DeleteHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DeleteHsmError {
            meta: generic,
            kind: crate::error::DeleteHsmErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteHsmError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_hsm_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteHsmOutput, crate::error::DeleteHsmError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_hsm_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_delete_hsm(response.body().as_ref(), output)
            .map_err(crate::error::DeleteHsmError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_luna_client_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteLunaClientOutput, crate::error::DeleteLunaClientError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DeleteLunaClientError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteLunaClientError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DeleteLunaClientError {
                meta: generic,
                kind: crate::error::DeleteLunaClientErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DeleteLunaClientError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DeleteLunaClientError {
            meta: generic,
            kind: crate::error::DeleteLunaClientErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DeleteLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DeleteLunaClientError {
            meta: generic,
            kind: crate::error::DeleteLunaClientErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DeleteLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DeleteLunaClientError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_luna_client_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DeleteLunaClientOutput, crate::error::DeleteLunaClientError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_luna_client_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_delete_luna_client(response.body().as_ref(), output)
                .map_err(crate::error::DeleteLunaClientError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_hapg_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHapgOutput, crate::error::DescribeHapgError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeHapgError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeHapgError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DescribeHapgError {
                meta: generic,
                kind: crate::error::DescribeHapgErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeHapgError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DescribeHapgError {
            meta: generic,
            kind: crate::error::DescribeHapgErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DescribeHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DescribeHapgError {
            meta: generic,
            kind: crate::error::DescribeHapgErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeHapgError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_hapg_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHapgOutput, crate::error::DescribeHapgError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_hapg_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_hapg(response.body().as_ref(), output)
            .map_err(crate::error::DescribeHapgError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_hsm_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHsmOutput, crate::error::DescribeHsmError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeHsmError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeHsmError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DescribeHsmError {
                meta: generic,
                kind: crate::error::DescribeHsmErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeHsmError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DescribeHsmError {
            meta: generic,
            kind: crate::error::DescribeHsmErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DescribeHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DescribeHsmError {
            meta: generic,
            kind: crate::error::DescribeHsmErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeHsmError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_hsm_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::DescribeHsmOutput, crate::error::DescribeHsmError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_hsm_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_hsm(response.body().as_ref(), output)
            .map_err(crate::error::DescribeHsmError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_luna_client_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeLunaClientOutput,
    crate::error::DescribeLunaClientError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::DescribeLunaClientError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeLunaClientError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::DescribeLunaClientError {
                meta: generic,
                kind: crate::error::DescribeLunaClientErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::DescribeLunaClientError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::DescribeLunaClientError {
            meta: generic,
            kind: crate::error::DescribeLunaClientErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DescribeLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::DescribeLunaClientError {
            meta: generic,
            kind: crate::error::DescribeLunaClientErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::DescribeLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::DescribeLunaClientError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_luna_client_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeLunaClientOutput,
    crate::error::DescribeLunaClientError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_luna_client_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_describe_luna_client(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeLunaClientError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetConfigOutput, crate::error::GetConfigError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetConfigError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::GetConfigError {
                meta: generic,
                kind: crate::error::GetConfigErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetConfigError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::GetConfigError {
            meta: generic,
            kind: crate::error::GetConfigErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::GetConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::GetConfigError {
            meta: generic,
            kind: crate::error::GetConfigErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::GetConfigOutput, crate::error::GetConfigError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_config_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_config(response.body().as_ref(), output)
            .map_err(crate::error::GetConfigError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_available_zones_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAvailableZonesOutput,
    crate::error::ListAvailableZonesError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListAvailableZonesError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListAvailableZonesError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ListAvailableZonesError {
                meta: generic,
                kind: crate::error::ListAvailableZonesErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListAvailableZonesError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ListAvailableZonesError {
            meta: generic,
            kind: crate::error::ListAvailableZonesErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ListAvailableZonesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ListAvailableZonesError {
            meta: generic,
            kind: crate::error::ListAvailableZonesErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListAvailableZonesError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListAvailableZonesError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_available_zones_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListAvailableZonesOutput,
    crate::error::ListAvailableZonesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_available_zones_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_available_zones(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListAvailableZonesError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hapgs_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHapgsOutput, crate::error::ListHapgsError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListHapgsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListHapgsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ListHapgsError {
                meta: generic,
                kind: crate::error::ListHapgsErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListHapgsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ListHapgsError {
            meta: generic,
            kind: crate::error::ListHapgsErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ListHapgsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ListHapgsError {
            meta: generic,
            kind: crate::error::ListHapgsErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListHapgsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListHapgsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hapgs_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHapgsOutput, crate::error::ListHapgsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_hapgs_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_hapgs(response.body().as_ref(), output)
            .map_err(crate::error::ListHapgsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hsms_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHsmsOutput, crate::error::ListHsmsError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListHsmsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListHsmsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ListHsmsError {
                meta: generic,
                kind: crate::error::ListHsmsErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListHsmsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ListHsmsError {
            meta: generic,
            kind: crate::error::ListHsmsErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ListHsmsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ListHsmsError {
            meta: generic,
            kind: crate::error::ListHsmsErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListHsmsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListHsmsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_hsms_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListHsmsOutput, crate::error::ListHsmsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_hsms_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_hsms(response.body().as_ref(), output)
            .map_err(crate::error::ListHsmsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_luna_clients_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListLunaClientsOutput, crate::error::ListLunaClientsError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListLunaClientsError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListLunaClientsError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ListLunaClientsError {
                meta: generic,
                kind: crate::error::ListLunaClientsErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListLunaClientsError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ListLunaClientsError {
            meta: generic,
            kind: crate::error::ListLunaClientsErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ListLunaClientsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ListLunaClientsError {
            meta: generic,
            kind: crate::error::ListLunaClientsErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListLunaClientsError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListLunaClientsError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_luna_clients_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ListLunaClientsOutput, crate::error::ListLunaClientsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_luna_clients_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_list_luna_clients(response.body().as_ref(), output)
                .map_err(crate::error::ListLunaClientsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ListTagsForResourceError {
                meta: generic,
                kind: crate::error::ListTagsForResourceErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ListTagsForResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::ListTagsForResourceOutput,
    crate::error::ListTagsForResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_list_tags_for_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_hapg_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyHapgOutput, crate::error::ModifyHapgError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ModifyHapgError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ModifyHapgError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ModifyHapgError {
                meta: generic,
                kind: crate::error::ModifyHapgErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ModifyHapgError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ModifyHapgError {
            meta: generic,
            kind: crate::error::ModifyHapgErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ModifyHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ModifyHapgError {
            meta: generic,
            kind: crate::error::ModifyHapgErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ModifyHapgError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ModifyHapgError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_hapg_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyHapgOutput, crate::error::ModifyHapgError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::modify_hapg_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_modify_hapg(response.body().as_ref(), output)
            .map_err(crate::error::ModifyHapgError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_hsm_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyHsmOutput, crate::error::ModifyHsmError> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ModifyHsmError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ModifyHsmError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::ModifyHsmError {
                meta: generic,
                kind: crate::error::ModifyHsmErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::ModifyHsmError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::ModifyHsmError {
            meta: generic,
            kind: crate::error::ModifyHsmErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ModifyHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::ModifyHsmError {
            meta: generic,
            kind: crate::error::ModifyHsmErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::ModifyHsmError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ModifyHsmError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_hsm_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyHsmOutput, crate::error::ModifyHsmError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::modify_hsm_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_modify_hsm(response.body().as_ref(), output)
            .map_err(crate::error::ModifyHsmError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_luna_client_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyLunaClientOutput, crate::error::ModifyLunaClientError>
{
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::ModifyLunaClientError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ModifyLunaClientError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmServiceException" => crate::error::ModifyLunaClientError {
            meta: generic,
            kind: crate::error::ModifyLunaClientErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::ModifyLunaClientError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::ModifyLunaClientError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_modify_luna_client_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::ModifyLunaClientOutput, crate::error::ModifyLunaClientError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::modify_luna_client_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::deser_operation_modify_luna_client(response.body().as_ref(), output)
                .map_err(crate::error::ModifyLunaClientError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_remove_tags_from_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RemoveTagsFromResourceOutput,
    crate::error::RemoveTagsFromResourceError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::RemoveTagsFromResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::RemoveTagsFromResourceError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudHsmInternalException" => {
            crate::error::RemoveTagsFromResourceError {
                meta: generic,
                kind: crate::error::RemoveTagsFromResourceErrorKind::CloudHsmInternalException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::cloud_hsm_internal_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_cloud_hsm_internal_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::RemoveTagsFromResourceError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "CloudHsmServiceException" => crate::error::RemoveTagsFromResourceError {
            meta: generic,
            kind: crate::error::RemoveTagsFromResourceErrorKind::CloudHsmServiceException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::cloud_hsm_service_exception::Builder::default();
                    let _ = response;
                    output =
                        crate::json_deser::deser_structure_cloud_hsm_service_exceptionjson_err(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::RemoveTagsFromResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidRequestException" => crate::error::RemoveTagsFromResourceError {
            meta: generic,
            kind: crate::error::RemoveTagsFromResourceErrorKind::InvalidRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_request_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_request_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::RemoveTagsFromResourceError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::RemoveTagsFromResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_remove_tags_from_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::RemoveTagsFromResourceOutput,
    crate::error::RemoveTagsFromResourceError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::remove_tags_from_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_remove_tags_from_resource(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::RemoveTagsFromResourceError::unhandled)?;
        output.build()
    })
}
