// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the agent and session, alongside the agent's reasoning process and results from calling API actions and querying knowledge bases and metadata about the trace. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct TracePart {
    /// <p>The unique identifier of the agent.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the alias of the agent.</p>
    pub agent_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the session with the agent.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>The version of the agent.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub trace: ::std::option::Option<crate::types::Trace>,
}
impl TracePart {
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn agent_alias_id(&self) -> ::std::option::Option<&str> {
        self.agent_alias_id.as_deref()
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The version of the agent.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn trace(&self) -> ::std::option::Option<&crate::types::Trace> {
        self.trace.as_ref()
    }
}
impl ::std::fmt::Debug for TracePart {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TracePart");
        formatter.field("agent_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_id", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_version", &"*** Sensitive Data Redacted ***");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl TracePart {
    /// Creates a new builder-style object to manufacture [`TracePart`](crate::types::TracePart).
    pub fn builder() -> crate::types::builders::TracePartBuilder {
        crate::types::builders::TracePartBuilder::default()
    }
}

/// A builder for [`TracePart`](crate::types::TracePart).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct TracePartBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) trace: ::std::option::Option<crate::types::Trace>,
}
impl TracePartBuilder {
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_id = input;
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_id
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session with the agent.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>The version of the agent.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the agent.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the agent.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn trace(mut self, input: crate::types::Trace) -> Self {
        self.trace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn set_trace(mut self, input: ::std::option::Option<crate::types::Trace>) -> Self {
        self.trace = input;
        self
    }
    /// <p>Contains one part of the agent's reasoning process and results from calling API actions and querying knowledge bases. You can use the trace to understand how the agent arrived at the response it provided the customer. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-enablement">Trace enablement</a>.</p>
    pub fn get_trace(&self) -> &::std::option::Option<crate::types::Trace> {
        &self.trace
    }
    /// Consumes the builder and constructs a [`TracePart`](crate::types::TracePart).
    pub fn build(self) -> crate::types::TracePart {
        crate::types::TracePart {
            agent_id: self.agent_id,
            agent_alias_id: self.agent_alias_id,
            session_id: self.session_id,
            agent_version: self.agent_version,
            trace: self.trace,
        }
    }
}
impl ::std::fmt::Debug for TracePartBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("TracePartBuilder");
        formatter.field("agent_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_alias_id", &"*** Sensitive Data Redacted ***");
        formatter.field("session_id", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_version", &"*** Sensitive Data Redacted ***");
        formatter.field("trace", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
