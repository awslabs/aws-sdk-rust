// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the policy assessment used in the Guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailTopicPolicyAssessment {
    /// <p>The topic details of the policy assessment used in the Guardrail.</p>
    pub topics: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailTopic>>,
}
impl GuardrailTopicPolicyAssessment {
    /// <p>The topic details of the policy assessment used in the Guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.topics.is_none()`.
    pub fn topics(&self) -> &[crate::types::GuardrailTopic] {
        self.topics.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GuardrailTopicPolicyAssessment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopicPolicyAssessment");
        formatter.field("topics", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailTopicPolicyAssessment {
    /// Creates a new builder-style object to manufacture [`GuardrailTopicPolicyAssessment`](crate::types::GuardrailTopicPolicyAssessment).
    pub fn builder() -> crate::types::builders::GuardrailTopicPolicyAssessmentBuilder {
        crate::types::builders::GuardrailTopicPolicyAssessmentBuilder::default()
    }
}

/// A builder for [`GuardrailTopicPolicyAssessment`](crate::types::GuardrailTopicPolicyAssessment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailTopicPolicyAssessmentBuilder {
    pub(crate) topics: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailTopic>>,
}
impl GuardrailTopicPolicyAssessmentBuilder {
    /// Appends an item to `topics`.
    ///
    /// To override the contents of this collection use [`set_topics`](Self::set_topics).
    ///
    /// <p>The topic details of the policy assessment used in the Guardrail.</p>
    pub fn topics(mut self, input: crate::types::GuardrailTopic) -> Self {
        let mut v = self.topics.unwrap_or_default();
        v.push(input);
        self.topics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The topic details of the policy assessment used in the Guardrail.</p>
    pub fn set_topics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailTopic>>) -> Self {
        self.topics = input;
        self
    }
    /// <p>The topic details of the policy assessment used in the Guardrail.</p>
    pub fn get_topics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailTopic>> {
        &self.topics
    }
    /// Consumes the builder and constructs a [`GuardrailTopicPolicyAssessment`](crate::types::GuardrailTopicPolicyAssessment).
    pub fn build(self) -> crate::types::GuardrailTopicPolicyAssessment {
        crate::types::GuardrailTopicPolicyAssessment { topics: self.topics }
    }
}
impl ::std::fmt::Debug for GuardrailTopicPolicyAssessmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopicPolicyAssessmentBuilder");
        formatter.field("topics", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
