// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information to return from the action group that the agent has predicted to invoke.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_ResponseSyntax">Retrieve response</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ReturnControlPayload {
    /// <p>A list of objects that contain information about the parameters and inputs that need to be sent into the API operation or function, based on what the agent determines from its session with the user.</p>
    pub invocation_inputs: ::std::option::Option<::std::vec::Vec<crate::types::InvocationInputMember>>,
    /// <p>The identifier of the action group invocation.</p>
    pub invocation_id: ::std::option::Option<::std::string::String>,
}
impl ReturnControlPayload {
    /// <p>A list of objects that contain information about the parameters and inputs that need to be sent into the API operation or function, based on what the agent determines from its session with the user.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.invocation_inputs.is_none()`.
    pub fn invocation_inputs(&self) -> &[crate::types::InvocationInputMember] {
        self.invocation_inputs.as_deref().unwrap_or_default()
    }
    /// <p>The identifier of the action group invocation.</p>
    pub fn invocation_id(&self) -> ::std::option::Option<&str> {
        self.invocation_id.as_deref()
    }
}
impl ::std::fmt::Debug for ReturnControlPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReturnControlPayload");
        formatter.field("invocation_inputs", &"*** Sensitive Data Redacted ***");
        formatter.field("invocation_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ReturnControlPayload {
    /// Creates a new builder-style object to manufacture [`ReturnControlPayload`](crate::types::ReturnControlPayload).
    pub fn builder() -> crate::types::builders::ReturnControlPayloadBuilder {
        crate::types::builders::ReturnControlPayloadBuilder::default()
    }
}

/// A builder for [`ReturnControlPayload`](crate::types::ReturnControlPayload).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ReturnControlPayloadBuilder {
    pub(crate) invocation_inputs: ::std::option::Option<::std::vec::Vec<crate::types::InvocationInputMember>>,
    pub(crate) invocation_id: ::std::option::Option<::std::string::String>,
}
impl ReturnControlPayloadBuilder {
    /// Appends an item to `invocation_inputs`.
    ///
    /// To override the contents of this collection use [`set_invocation_inputs`](Self::set_invocation_inputs).
    ///
    /// <p>A list of objects that contain information about the parameters and inputs that need to be sent into the API operation or function, based on what the agent determines from its session with the user.</p>
    pub fn invocation_inputs(mut self, input: crate::types::InvocationInputMember) -> Self {
        let mut v = self.invocation_inputs.unwrap_or_default();
        v.push(input);
        self.invocation_inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects that contain information about the parameters and inputs that need to be sent into the API operation or function, based on what the agent determines from its session with the user.</p>
    pub fn set_invocation_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InvocationInputMember>>) -> Self {
        self.invocation_inputs = input;
        self
    }
    /// <p>A list of objects that contain information about the parameters and inputs that need to be sent into the API operation or function, based on what the agent determines from its session with the user.</p>
    pub fn get_invocation_inputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InvocationInputMember>> {
        &self.invocation_inputs
    }
    /// <p>The identifier of the action group invocation.</p>
    pub fn invocation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.invocation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the action group invocation.</p>
    pub fn set_invocation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.invocation_id = input;
        self
    }
    /// <p>The identifier of the action group invocation.</p>
    pub fn get_invocation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.invocation_id
    }
    /// Consumes the builder and constructs a [`ReturnControlPayload`](crate::types::ReturnControlPayload).
    pub fn build(self) -> crate::types::ReturnControlPayload {
        crate::types::ReturnControlPayload {
            invocation_inputs: self.invocation_inputs,
            invocation_id: self.invocation_id,
        }
    }
}
impl ::std::fmt::Debug for ReturnControlPayloadBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ReturnControlPayloadBuilder");
        formatter.field("invocation_inputs", &"*** Sensitive Data Redacted ***");
        formatter.field("invocation_id", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
