// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the API operation that was called from the action group and the response body that was returned.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p>In the <code>returnControlInvocationResults</code> of the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_RequestSyntax">Retrieve request</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ApiResult {
    /// <p>The action group that the API operation belongs to.</p>
    pub action_group: ::std::string::String,
    /// <p>The HTTP method for the API operation.</p>
    pub http_method: ::std::option::Option<::std::string::String>,
    /// <p>The path to the API operation.</p>
    pub api_path: ::std::option::Option<::std::string::String>,
    /// <p>The response body from the API operation. The key of the object is the content type. The response may be returned directly or from the Lambda function.</p>
    pub response_body: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ContentBody>>,
    /// <p>http status code from API execution response (for example: 200, 400, 500).</p>
    pub http_status_code: ::std::option::Option<i32>,
    /// <p>Controls the final response state returned to end user when API/Function execution failed. When this state is FAILURE, the request would fail with dependency failure exception. When this state is REPROMPT, the API/function response will be sent to model for re-prompt</p>
    pub response_state: ::std::option::Option<crate::types::ResponseState>,
}
impl ApiResult {
    /// <p>The action group that the API operation belongs to.</p>
    pub fn action_group(&self) -> &str {
        use std::ops::Deref;
        self.action_group.deref()
    }
    /// <p>The HTTP method for the API operation.</p>
    pub fn http_method(&self) -> ::std::option::Option<&str> {
        self.http_method.as_deref()
    }
    /// <p>The path to the API operation.</p>
    pub fn api_path(&self) -> ::std::option::Option<&str> {
        self.api_path.as_deref()
    }
    /// <p>The response body from the API operation. The key of the object is the content type. The response may be returned directly or from the Lambda function.</p>
    pub fn response_body(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::ContentBody>> {
        self.response_body.as_ref()
    }
    /// <p>http status code from API execution response (for example: 200, 400, 500).</p>
    pub fn http_status_code(&self) -> ::std::option::Option<i32> {
        self.http_status_code
    }
    /// <p>Controls the final response state returned to end user when API/Function execution failed. When this state is FAILURE, the request would fail with dependency failure exception. When this state is REPROMPT, the API/function response will be sent to model for re-prompt</p>
    pub fn response_state(&self) -> ::std::option::Option<&crate::types::ResponseState> {
        self.response_state.as_ref()
    }
}
impl ::std::fmt::Debug for ApiResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ApiResult");
        formatter.field("action_group", &self.action_group);
        formatter.field("http_method", &self.http_method);
        formatter.field("api_path", &"*** Sensitive Data Redacted ***");
        formatter.field("response_body", &self.response_body);
        formatter.field("http_status_code", &self.http_status_code);
        formatter.field("response_state", &self.response_state);
        formatter.finish()
    }
}
impl ApiResult {
    /// Creates a new builder-style object to manufacture [`ApiResult`](crate::types::ApiResult).
    pub fn builder() -> crate::types::builders::ApiResultBuilder {
        crate::types::builders::ApiResultBuilder::default()
    }
}

/// A builder for [`ApiResult`](crate::types::ApiResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ApiResultBuilder {
    pub(crate) action_group: ::std::option::Option<::std::string::String>,
    pub(crate) http_method: ::std::option::Option<::std::string::String>,
    pub(crate) api_path: ::std::option::Option<::std::string::String>,
    pub(crate) response_body: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ContentBody>>,
    pub(crate) http_status_code: ::std::option::Option<i32>,
    pub(crate) response_state: ::std::option::Option<crate::types::ResponseState>,
}
impl ApiResultBuilder {
    /// <p>The action group that the API operation belongs to.</p>
    /// This field is required.
    pub fn action_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The action group that the API operation belongs to.</p>
    pub fn set_action_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group = input;
        self
    }
    /// <p>The action group that the API operation belongs to.</p>
    pub fn get_action_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group
    }
    /// <p>The HTTP method for the API operation.</p>
    pub fn http_method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.http_method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The HTTP method for the API operation.</p>
    pub fn set_http_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.http_method = input;
        self
    }
    /// <p>The HTTP method for the API operation.</p>
    pub fn get_http_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.http_method
    }
    /// <p>The path to the API operation.</p>
    pub fn api_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the API operation.</p>
    pub fn set_api_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_path = input;
        self
    }
    /// <p>The path to the API operation.</p>
    pub fn get_api_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_path
    }
    /// Adds a key-value pair to `response_body`.
    ///
    /// To override the contents of this collection use [`set_response_body`](Self::set_response_body).
    ///
    /// <p>The response body from the API operation. The key of the object is the content type. The response may be returned directly or from the Lambda function.</p>
    pub fn response_body(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::ContentBody) -> Self {
        let mut hash_map = self.response_body.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.response_body = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The response body from the API operation. The key of the object is the content type. The response may be returned directly or from the Lambda function.</p>
    pub fn set_response_body(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ContentBody>>,
    ) -> Self {
        self.response_body = input;
        self
    }
    /// <p>The response body from the API operation. The key of the object is the content type. The response may be returned directly or from the Lambda function.</p>
    pub fn get_response_body(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::ContentBody>> {
        &self.response_body
    }
    /// <p>http status code from API execution response (for example: 200, 400, 500).</p>
    pub fn http_status_code(mut self, input: i32) -> Self {
        self.http_status_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>http status code from API execution response (for example: 200, 400, 500).</p>
    pub fn set_http_status_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.http_status_code = input;
        self
    }
    /// <p>http status code from API execution response (for example: 200, 400, 500).</p>
    pub fn get_http_status_code(&self) -> &::std::option::Option<i32> {
        &self.http_status_code
    }
    /// <p>Controls the final response state returned to end user when API/Function execution failed. When this state is FAILURE, the request would fail with dependency failure exception. When this state is REPROMPT, the API/function response will be sent to model for re-prompt</p>
    pub fn response_state(mut self, input: crate::types::ResponseState) -> Self {
        self.response_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Controls the final response state returned to end user when API/Function execution failed. When this state is FAILURE, the request would fail with dependency failure exception. When this state is REPROMPT, the API/function response will be sent to model for re-prompt</p>
    pub fn set_response_state(mut self, input: ::std::option::Option<crate::types::ResponseState>) -> Self {
        self.response_state = input;
        self
    }
    /// <p>Controls the final response state returned to end user when API/Function execution failed. When this state is FAILURE, the request would fail with dependency failure exception. When this state is REPROMPT, the API/function response will be sent to model for re-prompt</p>
    pub fn get_response_state(&self) -> &::std::option::Option<crate::types::ResponseState> {
        &self.response_state
    }
    /// Consumes the builder and constructs a [`ApiResult`](crate::types::ApiResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_group`](crate::types::builders::ApiResultBuilder::action_group)
    pub fn build(self) -> ::std::result::Result<crate::types::ApiResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApiResult {
            action_group: self.action_group.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_group",
                    "action_group was not specified but it is required when building ApiResult",
                )
            })?,
            http_method: self.http_method,
            api_path: self.api_path,
            response_body: self.response_body,
            http_status_code: self.http_status_code,
            response_state: self.response_state,
        })
    }
}
impl ::std::fmt::Debug for ApiResultBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ApiResultBuilder");
        formatter.field("action_group", &self.action_group);
        formatter.field("http_method", &self.http_method);
        formatter.field("api_path", &"*** Sensitive Data Redacted ***");
        formatter.field("response_body", &self.response_body);
        formatter.field("http_status_code", &self.http_status_code);
        formatter.field("response_state", &self.response_state);
        formatter.finish()
    }
}
