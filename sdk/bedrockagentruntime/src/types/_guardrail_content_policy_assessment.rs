// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the policy assessment in the Guardrails filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailContentPolicyAssessment {
    /// <p>The filter details of the policy assessment used in the Guardrails filter.</p>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>,
}
impl GuardrailContentPolicyAssessment {
    /// <p>The filter details of the policy assessment used in the Guardrails filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::GuardrailContentFilter] {
        self.filters.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GuardrailContentPolicyAssessment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentPolicyAssessment");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailContentPolicyAssessment {
    /// Creates a new builder-style object to manufacture [`GuardrailContentPolicyAssessment`](crate::types::GuardrailContentPolicyAssessment).
    pub fn builder() -> crate::types::builders::GuardrailContentPolicyAssessmentBuilder {
        crate::types::builders::GuardrailContentPolicyAssessmentBuilder::default()
    }
}

/// A builder for [`GuardrailContentPolicyAssessment`](crate::types::GuardrailContentPolicyAssessment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailContentPolicyAssessmentBuilder {
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>,
}
impl GuardrailContentPolicyAssessmentBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>The filter details of the policy assessment used in the Guardrails filter.</p>
    pub fn filters(mut self, input: crate::types::GuardrailContentFilter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter details of the policy assessment used in the Guardrails filter.</p>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>The filter details of the policy assessment used in the Guardrails filter.</p>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailContentFilter>> {
        &self.filters
    }
    /// Consumes the builder and constructs a [`GuardrailContentPolicyAssessment`](crate::types::GuardrailContentPolicyAssessment).
    pub fn build(self) -> crate::types::GuardrailContentPolicyAssessment {
        crate::types::GuardrailContentPolicyAssessment { filters: self.filters }
    }
}
impl ::std::fmt::Debug for GuardrailContentPolicyAssessmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentPolicyAssessmentBuilder");
        formatter.field("filters", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
