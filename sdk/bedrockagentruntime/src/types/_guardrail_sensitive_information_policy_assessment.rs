// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the sensitive policy assessment used in the Guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailSensitiveInformationPolicyAssessment {
    /// <p>The details of the PII entities used in the sensitive policy assessment for the Guardrail.</p>
    pub pii_entities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityFilter>>,
    /// <p>The details of the regexes used in the sensitive policy assessment for the Guardrail.</p>
    pub regexes: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexFilter>>,
}
impl GuardrailSensitiveInformationPolicyAssessment {
    /// <p>The details of the PII entities used in the sensitive policy assessment for the Guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pii_entities.is_none()`.
    pub fn pii_entities(&self) -> &[crate::types::GuardrailPiiEntityFilter] {
        self.pii_entities.as_deref().unwrap_or_default()
    }
    /// <p>The details of the regexes used in the sensitive policy assessment for the Guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regexes.is_none()`.
    pub fn regexes(&self) -> &[crate::types::GuardrailRegexFilter] {
        self.regexes.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GuardrailSensitiveInformationPolicyAssessment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailSensitiveInformationPolicyAssessment");
        formatter.field("pii_entities", &"*** Sensitive Data Redacted ***");
        formatter.field("regexes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailSensitiveInformationPolicyAssessment {
    /// Creates a new builder-style object to manufacture [`GuardrailSensitiveInformationPolicyAssessment`](crate::types::GuardrailSensitiveInformationPolicyAssessment).
    pub fn builder() -> crate::types::builders::GuardrailSensitiveInformationPolicyAssessmentBuilder {
        crate::types::builders::GuardrailSensitiveInformationPolicyAssessmentBuilder::default()
    }
}

/// A builder for [`GuardrailSensitiveInformationPolicyAssessment`](crate::types::GuardrailSensitiveInformationPolicyAssessment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailSensitiveInformationPolicyAssessmentBuilder {
    pub(crate) pii_entities: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityFilter>>,
    pub(crate) regexes: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexFilter>>,
}
impl GuardrailSensitiveInformationPolicyAssessmentBuilder {
    /// Appends an item to `pii_entities`.
    ///
    /// To override the contents of this collection use [`set_pii_entities`](Self::set_pii_entities).
    ///
    /// <p>The details of the PII entities used in the sensitive policy assessment for the Guardrail.</p>
    pub fn pii_entities(mut self, input: crate::types::GuardrailPiiEntityFilter) -> Self {
        let mut v = self.pii_entities.unwrap_or_default();
        v.push(input);
        self.pii_entities = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details of the PII entities used in the sensitive policy assessment for the Guardrail.</p>
    pub fn set_pii_entities(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityFilter>>) -> Self {
        self.pii_entities = input;
        self
    }
    /// <p>The details of the PII entities used in the sensitive policy assessment for the Guardrail.</p>
    pub fn get_pii_entities(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailPiiEntityFilter>> {
        &self.pii_entities
    }
    /// Appends an item to `regexes`.
    ///
    /// To override the contents of this collection use [`set_regexes`](Self::set_regexes).
    ///
    /// <p>The details of the regexes used in the sensitive policy assessment for the Guardrail.</p>
    pub fn regexes(mut self, input: crate::types::GuardrailRegexFilter) -> Self {
        let mut v = self.regexes.unwrap_or_default();
        v.push(input);
        self.regexes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The details of the regexes used in the sensitive policy assessment for the Guardrail.</p>
    pub fn set_regexes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexFilter>>) -> Self {
        self.regexes = input;
        self
    }
    /// <p>The details of the regexes used in the sensitive policy assessment for the Guardrail.</p>
    pub fn get_regexes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailRegexFilter>> {
        &self.regexes
    }
    /// Consumes the builder and constructs a [`GuardrailSensitiveInformationPolicyAssessment`](crate::types::GuardrailSensitiveInformationPolicyAssessment).
    pub fn build(self) -> crate::types::GuardrailSensitiveInformationPolicyAssessment {
        crate::types::GuardrailSensitiveInformationPolicyAssessment {
            pii_entities: self.pii_entities,
            regexes: self.regexes,
        }
    }
}
impl ::std::fmt::Debug for GuardrailSensitiveInformationPolicyAssessmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailSensitiveInformationPolicyAssessmentBuilder");
        formatter.field("pii_entities", &"*** Sensitive Data Redacted ***");
        formatter.field("regexes", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
