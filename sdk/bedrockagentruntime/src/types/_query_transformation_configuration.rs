// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>To split up the prompt and retrieve multiple sources, set the transformation type to <code>QUERY_DECOMPOSITION</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct QueryTransformationConfiguration {
    /// <p>The type of transformation to apply to the prompt.</p>
    pub r#type: crate::types::QueryTransformationType,
}
impl QueryTransformationConfiguration {
    /// <p>The type of transformation to apply to the prompt.</p>
    pub fn r#type(&self) -> &crate::types::QueryTransformationType {
        &self.r#type
    }
}
impl QueryTransformationConfiguration {
    /// Creates a new builder-style object to manufacture [`QueryTransformationConfiguration`](crate::types::QueryTransformationConfiguration).
    pub fn builder() -> crate::types::builders::QueryTransformationConfigurationBuilder {
        crate::types::builders::QueryTransformationConfigurationBuilder::default()
    }
}

/// A builder for [`QueryTransformationConfiguration`](crate::types::QueryTransformationConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct QueryTransformationConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::QueryTransformationType>,
}
impl QueryTransformationConfigurationBuilder {
    /// <p>The type of transformation to apply to the prompt.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::QueryTransformationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of transformation to apply to the prompt.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::QueryTransformationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of transformation to apply to the prompt.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::QueryTransformationType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`QueryTransformationConfiguration`](crate::types::QueryTransformationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::QueryTransformationConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::QueryTransformationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::QueryTransformationConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building QueryTransformationConfiguration",
                )
            })?,
        })
    }
}
