// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details for a specific topic defined in the Guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailTopic {
    /// <p>The name details on a specific topic in the Guardrail.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type details on a specific topic in the Guardrail.</p>
    pub r#type: ::std::option::Option<crate::types::GuardrailTopicType>,
    /// <p>The action details on a specific topic in the Guardrail.</p>
    pub action: ::std::option::Option<crate::types::GuardrailTopicPolicyAction>,
}
impl GuardrailTopic {
    /// <p>The name details on a specific topic in the Guardrail.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type details on a specific topic in the Guardrail.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GuardrailTopicType> {
        self.r#type.as_ref()
    }
    /// <p>The action details on a specific topic in the Guardrail.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::GuardrailTopicPolicyAction> {
        self.action.as_ref()
    }
}
impl ::std::fmt::Debug for GuardrailTopic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopic");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailTopic {
    /// Creates a new builder-style object to manufacture [`GuardrailTopic`](crate::types::GuardrailTopic).
    pub fn builder() -> crate::types::builders::GuardrailTopicBuilder {
        crate::types::builders::GuardrailTopicBuilder::default()
    }
}

/// A builder for [`GuardrailTopic`](crate::types::GuardrailTopic).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailTopicBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailTopicType>,
    pub(crate) action: ::std::option::Option<crate::types::GuardrailTopicPolicyAction>,
}
impl GuardrailTopicBuilder {
    /// <p>The name details on a specific topic in the Guardrail.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name details on a specific topic in the Guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name details on a specific topic in the Guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type details on a specific topic in the Guardrail.</p>
    pub fn r#type(mut self, input: crate::types::GuardrailTopicType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type details on a specific topic in the Guardrail.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailTopicType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type details on a specific topic in the Guardrail.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailTopicType> {
        &self.r#type
    }
    /// <p>The action details on a specific topic in the Guardrail.</p>
    pub fn action(mut self, input: crate::types::GuardrailTopicPolicyAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action details on a specific topic in the Guardrail.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::GuardrailTopicPolicyAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action details on a specific topic in the Guardrail.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::GuardrailTopicPolicyAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`GuardrailTopic`](crate::types::GuardrailTopic).
    pub fn build(self) -> crate::types::GuardrailTopic {
        crate::types::GuardrailTopic {
            name: self.name,
            r#type: self.r#type,
            action: self.action,
        }
    }
}
impl ::std::fmt::Debug for GuardrailTopicBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopicBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
