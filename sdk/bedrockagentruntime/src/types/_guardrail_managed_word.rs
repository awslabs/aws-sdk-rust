// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The managed word details for the filter in the Guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailManagedWord {
    /// <p>The match details for the managed word filter in the Guardrail.</p>
    pub r#match: ::std::option::Option<::std::string::String>,
    /// <p>The type details for the managed word filter in the Guardrail.</p>
    pub r#type: ::std::option::Option<crate::types::GuardrailManagedWordType>,
    /// <p>The action details for the managed word filter in the Guardrail.</p>
    pub action: ::std::option::Option<crate::types::GuardrailWordPolicyAction>,
}
impl GuardrailManagedWord {
    /// <p>The match details for the managed word filter in the Guardrail.</p>
    pub fn r#match(&self) -> ::std::option::Option<&str> {
        self.r#match.as_deref()
    }
    /// <p>The type details for the managed word filter in the Guardrail.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GuardrailManagedWordType> {
        self.r#type.as_ref()
    }
    /// <p>The action details for the managed word filter in the Guardrail.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::GuardrailWordPolicyAction> {
        self.action.as_ref()
    }
}
impl ::std::fmt::Debug for GuardrailManagedWord {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailManagedWord");
        formatter.field("r#match", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailManagedWord {
    /// Creates a new builder-style object to manufacture [`GuardrailManagedWord`](crate::types::GuardrailManagedWord).
    pub fn builder() -> crate::types::builders::GuardrailManagedWordBuilder {
        crate::types::builders::GuardrailManagedWordBuilder::default()
    }
}

/// A builder for [`GuardrailManagedWord`](crate::types::GuardrailManagedWord).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailManagedWordBuilder {
    pub(crate) r#match: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailManagedWordType>,
    pub(crate) action: ::std::option::Option<crate::types::GuardrailWordPolicyAction>,
}
impl GuardrailManagedWordBuilder {
    /// <p>The match details for the managed word filter in the Guardrail.</p>
    pub fn r#match(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#match = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The match details for the managed word filter in the Guardrail.</p>
    pub fn set_match(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#match = input;
        self
    }
    /// <p>The match details for the managed word filter in the Guardrail.</p>
    pub fn get_match(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#match
    }
    /// <p>The type details for the managed word filter in the Guardrail.</p>
    pub fn r#type(mut self, input: crate::types::GuardrailManagedWordType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type details for the managed word filter in the Guardrail.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailManagedWordType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type details for the managed word filter in the Guardrail.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailManagedWordType> {
        &self.r#type
    }
    /// <p>The action details for the managed word filter in the Guardrail.</p>
    pub fn action(mut self, input: crate::types::GuardrailWordPolicyAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action details for the managed word filter in the Guardrail.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::GuardrailWordPolicyAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action details for the managed word filter in the Guardrail.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::GuardrailWordPolicyAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`GuardrailManagedWord`](crate::types::GuardrailManagedWord).
    pub fn build(self) -> crate::types::GuardrailManagedWord {
        crate::types::GuardrailManagedWord {
            r#match: self.r#match,
            r#type: self.r#type,
            action: self.action,
        }
    }
}
impl ::std::fmt::Debug for GuardrailManagedWordBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailManagedWordBuilder");
        formatter.field("r#match", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
