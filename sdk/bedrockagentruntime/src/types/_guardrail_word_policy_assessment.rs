// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The assessment details for words defined in the Guardrail filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailWordPolicyAssessment {
    /// <p>The custom word details for words defined in the Guardrail filter.</p>
    pub custom_words: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailCustomWord>>,
    /// <p>The managed word lists for words defined in the Guardrail filter.</p>
    pub managed_word_lists: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWord>>,
}
impl GuardrailWordPolicyAssessment {
    /// <p>The custom word details for words defined in the Guardrail filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_words.is_none()`.
    pub fn custom_words(&self) -> &[crate::types::GuardrailCustomWord] {
        self.custom_words.as_deref().unwrap_or_default()
    }
    /// <p>The managed word lists for words defined in the Guardrail filter.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.managed_word_lists.is_none()`.
    pub fn managed_word_lists(&self) -> &[crate::types::GuardrailManagedWord] {
        self.managed_word_lists.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for GuardrailWordPolicyAssessment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailWordPolicyAssessment");
        formatter.field("custom_words", &"*** Sensitive Data Redacted ***");
        formatter.field("managed_word_lists", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailWordPolicyAssessment {
    /// Creates a new builder-style object to manufacture [`GuardrailWordPolicyAssessment`](crate::types::GuardrailWordPolicyAssessment).
    pub fn builder() -> crate::types::builders::GuardrailWordPolicyAssessmentBuilder {
        crate::types::builders::GuardrailWordPolicyAssessmentBuilder::default()
    }
}

/// A builder for [`GuardrailWordPolicyAssessment`](crate::types::GuardrailWordPolicyAssessment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailWordPolicyAssessmentBuilder {
    pub(crate) custom_words: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailCustomWord>>,
    pub(crate) managed_word_lists: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWord>>,
}
impl GuardrailWordPolicyAssessmentBuilder {
    /// Appends an item to `custom_words`.
    ///
    /// To override the contents of this collection use [`set_custom_words`](Self::set_custom_words).
    ///
    /// <p>The custom word details for words defined in the Guardrail filter.</p>
    pub fn custom_words(mut self, input: crate::types::GuardrailCustomWord) -> Self {
        let mut v = self.custom_words.unwrap_or_default();
        v.push(input);
        self.custom_words = ::std::option::Option::Some(v);
        self
    }
    /// <p>The custom word details for words defined in the Guardrail filter.</p>
    pub fn set_custom_words(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailCustomWord>>) -> Self {
        self.custom_words = input;
        self
    }
    /// <p>The custom word details for words defined in the Guardrail filter.</p>
    pub fn get_custom_words(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailCustomWord>> {
        &self.custom_words
    }
    /// Appends an item to `managed_word_lists`.
    ///
    /// To override the contents of this collection use [`set_managed_word_lists`](Self::set_managed_word_lists).
    ///
    /// <p>The managed word lists for words defined in the Guardrail filter.</p>
    pub fn managed_word_lists(mut self, input: crate::types::GuardrailManagedWord) -> Self {
        let mut v = self.managed_word_lists.unwrap_or_default();
        v.push(input);
        self.managed_word_lists = ::std::option::Option::Some(v);
        self
    }
    /// <p>The managed word lists for words defined in the Guardrail filter.</p>
    pub fn set_managed_word_lists(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWord>>) -> Self {
        self.managed_word_lists = input;
        self
    }
    /// <p>The managed word lists for words defined in the Guardrail filter.</p>
    pub fn get_managed_word_lists(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWord>> {
        &self.managed_word_lists
    }
    /// Consumes the builder and constructs a [`GuardrailWordPolicyAssessment`](crate::types::GuardrailWordPolicyAssessment).
    pub fn build(self) -> crate::types::GuardrailWordPolicyAssessment {
        crate::types::GuardrailWordPolicyAssessment {
            custom_words: self.custom_words,
            managed_word_lists: self.managed_word_lists,
        }
    }
}
impl ::std::fmt::Debug for GuardrailWordPolicyAssessmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailWordPolicyAssessmentBuilder");
        formatter.field("custom_words", &"*** Sensitive Data Redacted ***");
        formatter.field("managed_word_lists", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
