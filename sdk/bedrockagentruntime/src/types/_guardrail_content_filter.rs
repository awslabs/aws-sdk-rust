// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the content filter used in the Guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailContentFilter {
    /// <p>The type of content detected in the filter by the Guardrail.</p>
    pub r#type: ::std::option::Option<crate::types::GuardrailContentFilterType>,
    /// <p>The confidence level regarding the content detected in the filter by the Guardrail.</p>
    pub confidence: ::std::option::Option<crate::types::GuardrailContentFilterConfidence>,
    /// <p>The action placed on the content by the Guardrail filter.</p>
    pub action: ::std::option::Option<crate::types::GuardrailContentPolicyAction>,
}
impl GuardrailContentFilter {
    /// <p>The type of content detected in the filter by the Guardrail.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GuardrailContentFilterType> {
        self.r#type.as_ref()
    }
    /// <p>The confidence level regarding the content detected in the filter by the Guardrail.</p>
    pub fn confidence(&self) -> ::std::option::Option<&crate::types::GuardrailContentFilterConfidence> {
        self.confidence.as_ref()
    }
    /// <p>The action placed on the content by the Guardrail filter.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::GuardrailContentPolicyAction> {
        self.action.as_ref()
    }
}
impl ::std::fmt::Debug for GuardrailContentFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentFilter");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("confidence", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailContentFilter {
    /// Creates a new builder-style object to manufacture [`GuardrailContentFilter`](crate::types::GuardrailContentFilter).
    pub fn builder() -> crate::types::builders::GuardrailContentFilterBuilder {
        crate::types::builders::GuardrailContentFilterBuilder::default()
    }
}

/// A builder for [`GuardrailContentFilter`](crate::types::GuardrailContentFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailContentFilterBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailContentFilterType>,
    pub(crate) confidence: ::std::option::Option<crate::types::GuardrailContentFilterConfidence>,
    pub(crate) action: ::std::option::Option<crate::types::GuardrailContentPolicyAction>,
}
impl GuardrailContentFilterBuilder {
    /// <p>The type of content detected in the filter by the Guardrail.</p>
    pub fn r#type(mut self, input: crate::types::GuardrailContentFilterType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of content detected in the filter by the Guardrail.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailContentFilterType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of content detected in the filter by the Guardrail.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailContentFilterType> {
        &self.r#type
    }
    /// <p>The confidence level regarding the content detected in the filter by the Guardrail.</p>
    pub fn confidence(mut self, input: crate::types::GuardrailContentFilterConfidence) -> Self {
        self.confidence = ::std::option::Option::Some(input);
        self
    }
    /// <p>The confidence level regarding the content detected in the filter by the Guardrail.</p>
    pub fn set_confidence(mut self, input: ::std::option::Option<crate::types::GuardrailContentFilterConfidence>) -> Self {
        self.confidence = input;
        self
    }
    /// <p>The confidence level regarding the content detected in the filter by the Guardrail.</p>
    pub fn get_confidence(&self) -> &::std::option::Option<crate::types::GuardrailContentFilterConfidence> {
        &self.confidence
    }
    /// <p>The action placed on the content by the Guardrail filter.</p>
    pub fn action(mut self, input: crate::types::GuardrailContentPolicyAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action placed on the content by the Guardrail filter.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::GuardrailContentPolicyAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action placed on the content by the Guardrail filter.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::GuardrailContentPolicyAction> {
        &self.action
    }
    /// Consumes the builder and constructs a [`GuardrailContentFilter`](crate::types::GuardrailContentFilter).
    pub fn build(self) -> crate::types::GuardrailContentFilter {
        crate::types::GuardrailContentFilter {
            r#type: self.r#type,
            confidence: self.confidence,
            action: self.action,
        }
    }
}
impl ::std::fmt::Debug for GuardrailContentFilterBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailContentFilterBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("confidence", &"*** Sensitive Data Redacted ***");
        formatter.field("action", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
