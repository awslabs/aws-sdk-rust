// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Assessment details of the content analyzed by Guardrails.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailAssessment {
    /// <p>Topic policy details of the Guardrail.</p>
    pub topic_policy: ::std::option::Option<crate::types::GuardrailTopicPolicyAssessment>,
    /// <p>Content policy details of the Guardrail.</p>
    pub content_policy: ::std::option::Option<crate::types::GuardrailContentPolicyAssessment>,
    /// <p>Word policy details of the Guardrail.</p>
    pub word_policy: ::std::option::Option<crate::types::GuardrailWordPolicyAssessment>,
    /// <p>Sensitive Information policy details of Guardrail.</p>
    pub sensitive_information_policy: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyAssessment>,
}
impl GuardrailAssessment {
    /// <p>Topic policy details of the Guardrail.</p>
    pub fn topic_policy(&self) -> ::std::option::Option<&crate::types::GuardrailTopicPolicyAssessment> {
        self.topic_policy.as_ref()
    }
    /// <p>Content policy details of the Guardrail.</p>
    pub fn content_policy(&self) -> ::std::option::Option<&crate::types::GuardrailContentPolicyAssessment> {
        self.content_policy.as_ref()
    }
    /// <p>Word policy details of the Guardrail.</p>
    pub fn word_policy(&self) -> ::std::option::Option<&crate::types::GuardrailWordPolicyAssessment> {
        self.word_policy.as_ref()
    }
    /// <p>Sensitive Information policy details of Guardrail.</p>
    pub fn sensitive_information_policy(&self) -> ::std::option::Option<&crate::types::GuardrailSensitiveInformationPolicyAssessment> {
        self.sensitive_information_policy.as_ref()
    }
}
impl ::std::fmt::Debug for GuardrailAssessment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailAssessment");
        formatter.field("topic_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("content_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("word_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("sensitive_information_policy", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GuardrailAssessment {
    /// Creates a new builder-style object to manufacture [`GuardrailAssessment`](crate::types::GuardrailAssessment).
    pub fn builder() -> crate::types::builders::GuardrailAssessmentBuilder {
        crate::types::builders::GuardrailAssessmentBuilder::default()
    }
}

/// A builder for [`GuardrailAssessment`](crate::types::GuardrailAssessment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailAssessmentBuilder {
    pub(crate) topic_policy: ::std::option::Option<crate::types::GuardrailTopicPolicyAssessment>,
    pub(crate) content_policy: ::std::option::Option<crate::types::GuardrailContentPolicyAssessment>,
    pub(crate) word_policy: ::std::option::Option<crate::types::GuardrailWordPolicyAssessment>,
    pub(crate) sensitive_information_policy: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyAssessment>,
}
impl GuardrailAssessmentBuilder {
    /// <p>Topic policy details of the Guardrail.</p>
    pub fn topic_policy(mut self, input: crate::types::GuardrailTopicPolicyAssessment) -> Self {
        self.topic_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Topic policy details of the Guardrail.</p>
    pub fn set_topic_policy(mut self, input: ::std::option::Option<crate::types::GuardrailTopicPolicyAssessment>) -> Self {
        self.topic_policy = input;
        self
    }
    /// <p>Topic policy details of the Guardrail.</p>
    pub fn get_topic_policy(&self) -> &::std::option::Option<crate::types::GuardrailTopicPolicyAssessment> {
        &self.topic_policy
    }
    /// <p>Content policy details of the Guardrail.</p>
    pub fn content_policy(mut self, input: crate::types::GuardrailContentPolicyAssessment) -> Self {
        self.content_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Content policy details of the Guardrail.</p>
    pub fn set_content_policy(mut self, input: ::std::option::Option<crate::types::GuardrailContentPolicyAssessment>) -> Self {
        self.content_policy = input;
        self
    }
    /// <p>Content policy details of the Guardrail.</p>
    pub fn get_content_policy(&self) -> &::std::option::Option<crate::types::GuardrailContentPolicyAssessment> {
        &self.content_policy
    }
    /// <p>Word policy details of the Guardrail.</p>
    pub fn word_policy(mut self, input: crate::types::GuardrailWordPolicyAssessment) -> Self {
        self.word_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Word policy details of the Guardrail.</p>
    pub fn set_word_policy(mut self, input: ::std::option::Option<crate::types::GuardrailWordPolicyAssessment>) -> Self {
        self.word_policy = input;
        self
    }
    /// <p>Word policy details of the Guardrail.</p>
    pub fn get_word_policy(&self) -> &::std::option::Option<crate::types::GuardrailWordPolicyAssessment> {
        &self.word_policy
    }
    /// <p>Sensitive Information policy details of Guardrail.</p>
    pub fn sensitive_information_policy(mut self, input: crate::types::GuardrailSensitiveInformationPolicyAssessment) -> Self {
        self.sensitive_information_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sensitive Information policy details of Guardrail.</p>
    pub fn set_sensitive_information_policy(
        mut self,
        input: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyAssessment>,
    ) -> Self {
        self.sensitive_information_policy = input;
        self
    }
    /// <p>Sensitive Information policy details of Guardrail.</p>
    pub fn get_sensitive_information_policy(&self) -> &::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyAssessment> {
        &self.sensitive_information_policy
    }
    /// Consumes the builder and constructs a [`GuardrailAssessment`](crate::types::GuardrailAssessment).
    pub fn build(self) -> crate::types::GuardrailAssessment {
        crate::types::GuardrailAssessment {
            topic_policy: self.topic_policy,
            content_policy: self.content_policy,
            word_policy: self.word_policy,
            sensitive_information_policy: self.sensitive_information_policy,
        }
    }
}
impl ::std::fmt::Debug for GuardrailAssessmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailAssessmentBuilder");
        formatter.field("topic_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("content_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("word_policy", &"*** Sensitive Data Redacted ***");
        formatter.field("sensitive_information_policy", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
