// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the body of the API response.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p>In the <code>returnControlInvocationResults</code> field of the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_RequestSyntax">Retrieve request</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContentBody {
    /// <p>The body of the API response.</p>
    pub body: ::std::option::Option<::std::string::String>,
}
impl ContentBody {
    /// <p>The body of the API response.</p>
    pub fn body(&self) -> ::std::option::Option<&str> {
        self.body.as_deref()
    }
}
impl ContentBody {
    /// Creates a new builder-style object to manufacture [`ContentBody`](crate::types::ContentBody).
    pub fn builder() -> crate::types::builders::ContentBodyBuilder {
        crate::types::builders::ContentBodyBuilder::default()
    }
}

/// A builder for [`ContentBody`](crate::types::ContentBody).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContentBodyBuilder {
    pub(crate) body: ::std::option::Option<::std::string::String>,
}
impl ContentBodyBuilder {
    /// <p>The body of the API response.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The body of the API response.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>The body of the API response.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.body
    }
    /// Consumes the builder and constructs a [`ContentBody`](crate::types::ContentBody).
    pub fn build(self) -> crate::types::ContentBody {
        crate::types::ContentBody { body: self.body }
    }
}
