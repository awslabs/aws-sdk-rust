// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the data source location.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_Retrieve.html#API_agent-runtime_Retrieve_ResponseSyntax">Retrieve response</a> – in the <code>location</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_RetrieveAndGenerate.html#API_agent-runtime_RetrieveAndGenerate_ResponseSyntax">RetrieveAndGenerate response</a> – in the <code>location</code> field</p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeAgent.html#API_agent-runtime_InvokeAgent_ResponseSyntax">InvokeAgent response</a> – in the <code>locatino</code> field</p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RetrievalResultLocation {
    /// <p>The type of data source location.</p>
    pub r#type: crate::types::RetrievalResultLocationType,
    /// <p>The S3 data source location.</p>
    pub s3_location: ::std::option::Option<crate::types::RetrievalResultS3Location>,
    /// <p>The web URL/URLs data source location.</p>
    pub web_location: ::std::option::Option<crate::types::RetrievalResultWebLocation>,
    /// <p>The Confluence data source location.</p>
    pub confluence_location: ::std::option::Option<crate::types::RetrievalResultConfluenceLocation>,
    /// <p>The Salesforce data source location.</p>
    pub salesforce_location: ::std::option::Option<crate::types::RetrievalResultSalesforceLocation>,
    /// <p>The SharePoint data source location.</p>
    pub share_point_location: ::std::option::Option<crate::types::RetrievalResultSharePointLocation>,
}
impl RetrievalResultLocation {
    /// <p>The type of data source location.</p>
    pub fn r#type(&self) -> &crate::types::RetrievalResultLocationType {
        &self.r#type
    }
    /// <p>The S3 data source location.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::RetrievalResultS3Location> {
        self.s3_location.as_ref()
    }
    /// <p>The web URL/URLs data source location.</p>
    pub fn web_location(&self) -> ::std::option::Option<&crate::types::RetrievalResultWebLocation> {
        self.web_location.as_ref()
    }
    /// <p>The Confluence data source location.</p>
    pub fn confluence_location(&self) -> ::std::option::Option<&crate::types::RetrievalResultConfluenceLocation> {
        self.confluence_location.as_ref()
    }
    /// <p>The Salesforce data source location.</p>
    pub fn salesforce_location(&self) -> ::std::option::Option<&crate::types::RetrievalResultSalesforceLocation> {
        self.salesforce_location.as_ref()
    }
    /// <p>The SharePoint data source location.</p>
    pub fn share_point_location(&self) -> ::std::option::Option<&crate::types::RetrievalResultSharePointLocation> {
        self.share_point_location.as_ref()
    }
}
impl ::std::fmt::Debug for RetrievalResultLocation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultLocation");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("s3_location", &"*** Sensitive Data Redacted ***");
        formatter.field("web_location", &"*** Sensitive Data Redacted ***");
        formatter.field("confluence_location", &"*** Sensitive Data Redacted ***");
        formatter.field("salesforce_location", &"*** Sensitive Data Redacted ***");
        formatter.field("share_point_location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RetrievalResultLocation {
    /// Creates a new builder-style object to manufacture [`RetrievalResultLocation`](crate::types::RetrievalResultLocation).
    pub fn builder() -> crate::types::builders::RetrievalResultLocationBuilder {
        crate::types::builders::RetrievalResultLocationBuilder::default()
    }
}

/// A builder for [`RetrievalResultLocation`](crate::types::RetrievalResultLocation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct RetrievalResultLocationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::RetrievalResultLocationType>,
    pub(crate) s3_location: ::std::option::Option<crate::types::RetrievalResultS3Location>,
    pub(crate) web_location: ::std::option::Option<crate::types::RetrievalResultWebLocation>,
    pub(crate) confluence_location: ::std::option::Option<crate::types::RetrievalResultConfluenceLocation>,
    pub(crate) salesforce_location: ::std::option::Option<crate::types::RetrievalResultSalesforceLocation>,
    pub(crate) share_point_location: ::std::option::Option<crate::types::RetrievalResultSharePointLocation>,
}
impl RetrievalResultLocationBuilder {
    /// <p>The type of data source location.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RetrievalResultLocationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data source location.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RetrievalResultLocationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of data source location.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RetrievalResultLocationType> {
        &self.r#type
    }
    /// <p>The S3 data source location.</p>
    pub fn s3_location(mut self, input: crate::types::RetrievalResultS3Location) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 data source location.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultS3Location>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The S3 data source location.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::RetrievalResultS3Location> {
        &self.s3_location
    }
    /// <p>The web URL/URLs data source location.</p>
    pub fn web_location(mut self, input: crate::types::RetrievalResultWebLocation) -> Self {
        self.web_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The web URL/URLs data source location.</p>
    pub fn set_web_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultWebLocation>) -> Self {
        self.web_location = input;
        self
    }
    /// <p>The web URL/URLs data source location.</p>
    pub fn get_web_location(&self) -> &::std::option::Option<crate::types::RetrievalResultWebLocation> {
        &self.web_location
    }
    /// <p>The Confluence data source location.</p>
    pub fn confluence_location(mut self, input: crate::types::RetrievalResultConfluenceLocation) -> Self {
        self.confluence_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Confluence data source location.</p>
    pub fn set_confluence_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultConfluenceLocation>) -> Self {
        self.confluence_location = input;
        self
    }
    /// <p>The Confluence data source location.</p>
    pub fn get_confluence_location(&self) -> &::std::option::Option<crate::types::RetrievalResultConfluenceLocation> {
        &self.confluence_location
    }
    /// <p>The Salesforce data source location.</p>
    pub fn salesforce_location(mut self, input: crate::types::RetrievalResultSalesforceLocation) -> Self {
        self.salesforce_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Salesforce data source location.</p>
    pub fn set_salesforce_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultSalesforceLocation>) -> Self {
        self.salesforce_location = input;
        self
    }
    /// <p>The Salesforce data source location.</p>
    pub fn get_salesforce_location(&self) -> &::std::option::Option<crate::types::RetrievalResultSalesforceLocation> {
        &self.salesforce_location
    }
    /// <p>The SharePoint data source location.</p>
    pub fn share_point_location(mut self, input: crate::types::RetrievalResultSharePointLocation) -> Self {
        self.share_point_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SharePoint data source location.</p>
    pub fn set_share_point_location(mut self, input: ::std::option::Option<crate::types::RetrievalResultSharePointLocation>) -> Self {
        self.share_point_location = input;
        self
    }
    /// <p>The SharePoint data source location.</p>
    pub fn get_share_point_location(&self) -> &::std::option::Option<crate::types::RetrievalResultSharePointLocation> {
        &self.share_point_location
    }
    /// Consumes the builder and constructs a [`RetrievalResultLocation`](crate::types::RetrievalResultLocation).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::RetrievalResultLocationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::RetrievalResultLocation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RetrievalResultLocation {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RetrievalResultLocation",
                )
            })?,
            s3_location: self.s3_location,
            web_location: self.web_location,
            confluence_location: self.confluence_location,
            salesforce_location: self.salesforce_location,
            share_point_location: self.share_point_location,
        })
    }
}
impl ::std::fmt::Debug for RetrievalResultLocationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RetrievalResultLocationBuilder");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.field("s3_location", &"*** Sensitive Data Redacted ***");
        formatter.field("web_location", &"*** Sensitive Data Redacted ***");
        formatter.field("confluence_location", &"*** Sensitive Data Redacted ***");
        formatter.field("salesforce_location", &"*** Sensitive Data Redacted ***");
        formatter.field("share_point_location", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
