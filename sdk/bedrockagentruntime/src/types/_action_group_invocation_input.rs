// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the action group being invoked. For more information about the possible structures, see the InvocationInput tab in <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-orchestration.html">OrchestrationTrace</a> in the Amazon Bedrock User Guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ActionGroupInvocationInput {
    /// <p>The name of the action group.</p>
    pub action_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The API method being used, based off the action group.</p>
    pub verb: ::std::option::Option<::std::string::String>,
    /// <p>The path to the API to call, based off the action group.</p>
    pub api_path: ::std::option::Option<::std::string::String>,
    /// <p>The parameters in the Lambda input event.</p>
    pub parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    /// <p>The parameters in the request body for the Lambda input event.</p>
    pub request_body: ::std::option::Option<crate::types::RequestBody>,
    /// <p>The function in the action group to call.</p>
    pub function: ::std::option::Option<::std::string::String>,
}
impl ActionGroupInvocationInput {
    /// <p>The name of the action group.</p>
    pub fn action_group_name(&self) -> ::std::option::Option<&str> {
        self.action_group_name.as_deref()
    }
    /// <p>The API method being used, based off the action group.</p>
    pub fn verb(&self) -> ::std::option::Option<&str> {
        self.verb.as_deref()
    }
    /// <p>The path to the API to call, based off the action group.</p>
    pub fn api_path(&self) -> ::std::option::Option<&str> {
        self.api_path.as_deref()
    }
    /// <p>The parameters in the Lambda input event.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.parameters.is_none()`.
    pub fn parameters(&self) -> &[crate::types::Parameter] {
        self.parameters.as_deref().unwrap_or_default()
    }
    /// <p>The parameters in the request body for the Lambda input event.</p>
    pub fn request_body(&self) -> ::std::option::Option<&crate::types::RequestBody> {
        self.request_body.as_ref()
    }
    /// <p>The function in the action group to call.</p>
    pub fn function(&self) -> ::std::option::Option<&str> {
        self.function.as_deref()
    }
}
impl ::std::fmt::Debug for ActionGroupInvocationInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActionGroupInvocationInput");
        formatter.field("action_group_name", &"*** Sensitive Data Redacted ***");
        formatter.field("verb", &"*** Sensitive Data Redacted ***");
        formatter.field("api_path", &"*** Sensitive Data Redacted ***");
        formatter.field("parameters", &self.parameters);
        formatter.field("request_body", &self.request_body);
        formatter.field("function", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ActionGroupInvocationInput {
    /// Creates a new builder-style object to manufacture [`ActionGroupInvocationInput`](crate::types::ActionGroupInvocationInput).
    pub fn builder() -> crate::types::builders::ActionGroupInvocationInputBuilder {
        crate::types::builders::ActionGroupInvocationInputBuilder::default()
    }
}

/// A builder for [`ActionGroupInvocationInput`](crate::types::ActionGroupInvocationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ActionGroupInvocationInputBuilder {
    pub(crate) action_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) verb: ::std::option::Option<::std::string::String>,
    pub(crate) api_path: ::std::option::Option<::std::string::String>,
    pub(crate) parameters: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>,
    pub(crate) request_body: ::std::option::Option<crate::types::RequestBody>,
    pub(crate) function: ::std::option::Option<::std::string::String>,
}
impl ActionGroupInvocationInputBuilder {
    /// <p>The name of the action group.</p>
    pub fn action_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the action group.</p>
    pub fn set_action_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_group_name = input;
        self
    }
    /// <p>The name of the action group.</p>
    pub fn get_action_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_group_name
    }
    /// <p>The API method being used, based off the action group.</p>
    pub fn verb(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.verb = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The API method being used, based off the action group.</p>
    pub fn set_verb(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.verb = input;
        self
    }
    /// <p>The API method being used, based off the action group.</p>
    pub fn get_verb(&self) -> &::std::option::Option<::std::string::String> {
        &self.verb
    }
    /// <p>The path to the API to call, based off the action group.</p>
    pub fn api_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.api_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path to the API to call, based off the action group.</p>
    pub fn set_api_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.api_path = input;
        self
    }
    /// <p>The path to the API to call, based off the action group.</p>
    pub fn get_api_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.api_path
    }
    /// Appends an item to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>The parameters in the Lambda input event.</p>
    pub fn parameters(mut self, input: crate::types::Parameter) -> Self {
        let mut v = self.parameters.unwrap_or_default();
        v.push(input);
        self.parameters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The parameters in the Lambda input event.</p>
    pub fn set_parameters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Parameter>>) -> Self {
        self.parameters = input;
        self
    }
    /// <p>The parameters in the Lambda input event.</p>
    pub fn get_parameters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Parameter>> {
        &self.parameters
    }
    /// <p>The parameters in the request body for the Lambda input event.</p>
    pub fn request_body(mut self, input: crate::types::RequestBody) -> Self {
        self.request_body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parameters in the request body for the Lambda input event.</p>
    pub fn set_request_body(mut self, input: ::std::option::Option<crate::types::RequestBody>) -> Self {
        self.request_body = input;
        self
    }
    /// <p>The parameters in the request body for the Lambda input event.</p>
    pub fn get_request_body(&self) -> &::std::option::Option<crate::types::RequestBody> {
        &self.request_body
    }
    /// <p>The function in the action group to call.</p>
    pub fn function(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.function = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The function in the action group to call.</p>
    pub fn set_function(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.function = input;
        self
    }
    /// <p>The function in the action group to call.</p>
    pub fn get_function(&self) -> &::std::option::Option<::std::string::String> {
        &self.function
    }
    /// Consumes the builder and constructs a [`ActionGroupInvocationInput`](crate::types::ActionGroupInvocationInput).
    pub fn build(self) -> crate::types::ActionGroupInvocationInput {
        crate::types::ActionGroupInvocationInput {
            action_group_name: self.action_group_name,
            verb: self.verb,
            api_path: self.api_path,
            parameters: self.parameters,
            request_body: self.request_body,
            function: self.function,
        }
    }
}
impl ::std::fmt::Debug for ActionGroupInvocationInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ActionGroupInvocationInputBuilder");
        formatter.field("action_group_name", &"*** Sensitive Data Redacted ***");
        formatter.field("verb", &"*** Sensitive Data Redacted ***");
        formatter.field("api_path", &"*** Sensitive Data Redacted ***");
        formatter.field("parameters", &self.parameters);
        formatter.field("request_body", &self.request_body);
        formatter.field("function", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
