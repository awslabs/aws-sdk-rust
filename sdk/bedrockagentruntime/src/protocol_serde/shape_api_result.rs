// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_api_result(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ApiResult,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("actionGroup").string(input.action_group.as_str());
    }
    if let Some(var_1) = &input.http_method {
        object.key("httpMethod").string(var_1.as_str());
    }
    if let Some(var_2) = &input.api_path {
        object.key("apiPath").string(var_2.as_str());
    }
    if let Some(var_3) = &input.confirmation_state {
        object.key("confirmationState").string(var_3.as_str());
    }
    if let Some(var_4) = &input.response_state {
        object.key("responseState").string(var_4.as_str());
    }
    if let Some(var_5) = &input.http_status_code {
        object.key("httpStatusCode").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.response_body {
        #[allow(unused_mut)]
        let mut object_7 = object.key("responseBody").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_content_body::ser_content_body(&mut object_10, value_9)?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_11) = &input.agent_id {
        object.key("agentId").string(var_11.as_str());
    }
    Ok(())
}

pub(crate) fn de_api_result<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::ApiResult>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ApiResultBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "actionGroup" => {
                            builder = builder.set_action_group(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "httpMethod" => {
                            builder = builder.set_http_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "apiPath" => {
                            builder = builder.set_api_path(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "confirmationState" => {
                            builder = builder.set_confirmation_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ConfirmationState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "responseState" => {
                            builder = builder.set_response_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ResponseState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "httpStatusCode" => {
                            builder = builder.set_http_status_code(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "responseBody" => {
                            builder = builder.set_response_body(crate::protocol_serde::shape_response_body::de_response_body(tokens)?);
                        }
                        "agentId" => {
                            builder = builder.set_agent_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::api_result_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
