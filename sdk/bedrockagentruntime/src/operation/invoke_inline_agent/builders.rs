// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::invoke_inline_agent::_invoke_inline_agent_output::InvokeInlineAgentOutputBuilder;

pub use crate::operation::invoke_inline_agent::_invoke_inline_agent_input::InvokeInlineAgentInputBuilder;

impl crate::operation::invoke_inline_agent::builders::InvokeInlineAgentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::invoke_inline_agent::InvokeInlineAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::invoke_inline_agent::InvokeInlineAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.invoke_inline_agent();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `InvokeInlineAgent`.
///
/// <p>Invokes an inline Amazon Bedrock agent using the configurations you provide with the request.</p>
/// <ul>
/// <li>
/// <p>Specify the following fields for security purposes.</p>
/// <ul>
/// <li>
/// <p>(Optional) <code>customerEncryptionKeyArn</code> – The Amazon Resource Name (ARN) of a KMS key to encrypt the creation of the agent.</p></li>
/// <li>
/// <p>(Optional) <code>idleSessionTTLinSeconds</code> – Specify the number of seconds for which the agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p></li>
/// </ul></li>
/// <li>
/// <p>To override the default prompt behavior for agent orchestration and to use advanced prompts, include a <code>promptOverrideConfiguration</code> object. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p></li>
/// <li>
/// <p>The agent instructions will not be honored if your agent has only one knowledge base, uses default prompts, has no action group, and user input is disabled.</p></li>
/// </ul><note>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct InvokeInlineAgentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::invoke_inline_agent::builders::InvokeInlineAgentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::invoke_inline_agent::InvokeInlineAgentOutput,
        crate::operation::invoke_inline_agent::InvokeInlineAgentError,
    > for InvokeInlineAgentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::invoke_inline_agent::InvokeInlineAgentOutput,
            crate::operation::invoke_inline_agent::InvokeInlineAgentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl InvokeInlineAgentFluentBuilder {
    /// Creates a new `InvokeInlineAgentFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the InvokeInlineAgent as a reference.
    pub fn as_input(&self) -> &crate::operation::invoke_inline_agent::builders::InvokeInlineAgentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_inline_agent::InvokeInlineAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::invoke_inline_agent::InvokeInlineAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::invoke_inline_agent::InvokeInlineAgent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        let mut output = crate::operation::invoke_inline_agent::InvokeInlineAgent::orchestrate(&runtime_plugins, input).await?;

        // Converts any error encountered beyond this point into an `SdkError` response error
        // with an `HttpResponse`. However, since we have already exited the `orchestrate`
        // function, the original `HttpResponse` is no longer available and cannot be restored.
        // This means that header information from the original response has been lost.
        //
        // Note that the response body would have been consumed by the deserializer
        // regardless, even if the initial message was hypothetically processed during
        // the orchestrator's deserialization phase but later resulted in an error.
        fn response_error(
            err: impl ::std::convert::Into<::aws_smithy_runtime_api::box_error::BoxError>,
        ) -> ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::invoke_inline_agent::InvokeInlineAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        > {
            ::aws_smithy_runtime_api::client::result::SdkError::response_error(
                err,
                ::aws_smithy_runtime_api::client::orchestrator::HttpResponse::new(
                    ::aws_smithy_runtime_api::http::StatusCode::try_from(200).expect("valid successful code"),
                    ::aws_smithy_types::body::SdkBody::empty(),
                ),
            )
        }

        let message = output.completion.try_recv_initial_response().await.map_err(response_error)?;

        match message {
            ::std::option::Option::Some(_message) => ::std::result::Result::Ok(output),
            ::std::option::Option::None => ::std::result::Result::Ok(output),
        }
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::invoke_inline_agent::InvokeInlineAgentOutput,
        crate::operation::invoke_inline_agent::InvokeInlineAgentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.customer_encryption_key_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_customer_encryption_key_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services KMS key to use to encrypt your inline agent.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_customer_encryption_key_arn()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.foundation_model(input.into());
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_foundation_model(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-ids.html#model-ids-arns">model identifier (ID)</a> of the model to use for orchestration by the inline agent. For example, <code>meta.llama3-1-70b-instruct-v1:0</code>.</p>
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_foundation_model()
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.instruction(input.into());
        self
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_instruction(input);
        self
    }
    /// <p>The instructions that tell the inline agent what it should do and how it should interact with users.</p>
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_instruction()
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_session_ttl_in_seconds(input);
        self
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_session_ttl_in_seconds(input);
        self
    }
    /// <p>The number of seconds for which the inline agent should maintain session information. After this time expires, the subsequent <code>InvokeInlineAgent</code> request begins a new session.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and the data provided before the timeout is deleted.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_idle_session_ttl_in_seconds()
    }
    ///
    /// Appends an item to `actionGroups`.
    ///
    /// To override the contents of this collection use [`set_action_groups`](Self::set_action_groups).
    ///
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn action_groups(mut self, input: crate::types::AgentActionGroup) -> Self {
        self.inner = self.inner.action_groups(input);
        self
    }
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn set_action_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>>) -> Self {
        self.inner = self.inner.set_action_groups(input);
        self
    }
    /// <p>A list of action groups with each action group defining the action the inline agent needs to carry out.</p>
    pub fn get_action_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentActionGroup>> {
        self.inner.get_action_groups()
    }
    ///
    /// Appends an item to `knowledgeBases`.
    ///
    /// To override the contents of this collection use [`set_knowledge_bases`](Self::set_knowledge_bases).
    ///
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn knowledge_bases(mut self, input: crate::types::KnowledgeBase) -> Self {
        self.inner = self.inner.knowledge_bases(input);
        self
    }
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn set_knowledge_bases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>>) -> Self {
        self.inner = self.inner.set_knowledge_bases(input);
        self
    }
    /// <p>Contains information of the knowledge bases to associate with.</p>
    pub fn get_knowledge_bases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KnowledgeBase>> {
        self.inner.get_knowledge_bases()
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn guardrail_configuration(mut self, input: crate::types::GuardrailConfigurationWithArn) -> Self {
        self.inner = self.inner.guardrail_configuration(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn set_guardrail_configuration(mut self, input: ::std::option::Option<crate::types::GuardrailConfigurationWithArn>) -> Self {
        self.inner = self.inner.set_guardrail_configuration(input);
        self
    }
    /// <p>The <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html">guardrails</a> to assign to the inline agent.</p>
    pub fn get_guardrail_configuration(&self) -> &::std::option::Option<crate::types::GuardrailConfigurationWithArn> {
        self.inner.get_guardrail_configuration()
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.inner = self.inner.prompt_override_configuration(input);
        self
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.inner = self.inner.set_prompt_override_configuration(input);
        self
    }
    /// <p>Configurations for advanced prompts used to override the default prompts to enhance the accuracy of the inline agent.</p>
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        self.inner.get_prompt_override_configuration()
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn agent_collaboration(mut self, input: crate::types::AgentCollaboration) -> Self {
        self.inner = self.inner.agent_collaboration(input);
        self
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn set_agent_collaboration(mut self, input: ::std::option::Option<crate::types::AgentCollaboration>) -> Self {
        self.inner = self.inner.set_agent_collaboration(input);
        self
    }
    /// <p>Defines how the inline collaborator agent handles information across multiple collaborator agents to coordinate a final response. The inline collaborator agent can also be the supervisor.</p>
    pub fn get_agent_collaboration(&self) -> &::std::option::Option<crate::types::AgentCollaboration> {
        self.inner.get_agent_collaboration()
    }
    ///
    /// Appends an item to `collaboratorConfigurations`.
    ///
    /// To override the contents of this collection use [`set_collaborator_configurations`](Self::set_collaborator_configurations).
    ///
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn collaborator_configurations(mut self, input: crate::types::CollaboratorConfiguration) -> Self {
        self.inner = self.inner.collaborator_configurations(input);
        self
    }
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn set_collaborator_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>>) -> Self {
        self.inner = self.inner.set_collaborator_configurations(input);
        self
    }
    /// <p>Settings for an inline agent collaborator called with <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent-runtime_InvokeInlineAgent.html">InvokeInlineAgent</a>.</p>
    pub fn get_collaborator_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CollaboratorConfiguration>> {
        self.inner.get_collaborator_configurations()
    }
    /// <p>The name for the agent.</p>
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_name(input.into());
        self
    }
    /// <p>The name for the agent.</p>
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_name(input);
        self
    }
    /// <p>The name for the agent.</p>
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_name()
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_id()
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn end_session(mut self, input: bool) -> Self {
        self.inner = self.inner.end_session(input);
        self
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_end_session(input);
        self
    }
    /// <p>Specifies whether to end the session with the inline agent or not.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<bool> {
        self.inner.get_end_session()
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn enable_trace(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_trace(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn set_enable_trace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_trace(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/trace-events.html">Using trace</a>.</p>
    pub fn get_enable_trace(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_trace()
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn input_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input_text(input.into());
        self
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn set_input_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_input_text(input);
        self
    }
    /// <p>The prompt text to send to the agent.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn get_input_text(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_input_text()
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn streaming_configurations(mut self, input: crate::types::StreamingConfigurations) -> Self {
        self.inner = self.inner.streaming_configurations(input);
        self
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn set_streaming_configurations(mut self, input: ::std::option::Option<crate::types::StreamingConfigurations>) -> Self {
        self.inner = self.inner.set_streaming_configurations(input);
        self
    }
    /// <p>Specifies the configurations for streaming.</p><note>
    /// <p>To use agent streaming, you need permissions to perform the <code>bedrock:InvokeModelWithResponseStream</code> action.</p>
    /// </note>
    pub fn get_streaming_configurations(&self) -> &::std::option::Option<crate::types::StreamingConfigurations> {
        self.inner.get_streaming_configurations()
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn prompt_creation_configurations(mut self, input: crate::types::PromptCreationConfigurations) -> Self {
        self.inner = self.inner.prompt_creation_configurations(input);
        self
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn set_prompt_creation_configurations(mut self, input: ::std::option::Option<crate::types::PromptCreationConfigurations>) -> Self {
        self.inner = self.inner.set_prompt_creation_configurations(input);
        self
    }
    /// <p>Specifies parameters that control how the service populates the agent prompt for an <code>InvokeInlineAgent</code> request. You can control which aspects of previous invocations in the same agent session the service uses to populate the agent prompt. This gives you more granular control over the contextual history that is used to process the current request.</p>
    pub fn get_prompt_creation_configurations(&self) -> &::std::option::Option<crate::types::PromptCreationConfigurations> {
        self.inner.get_prompt_creation_configurations()
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn inline_session_state(mut self, input: crate::types::InlineSessionState) -> Self {
        self.inner = self.inner.inline_session_state(input);
        self
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn set_inline_session_state(mut self, input: ::std::option::Option<crate::types::InlineSessionState>) -> Self {
        self.inner = self.inner.set_inline_session_state(input);
        self
    }
    /// <p>Parameters that specify the various attributes of a sessions. You can include attributes for the session or prompt or, if you configured an action group to return control, results from invocation of the action group. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p><note>
    /// <p>If you include <code>returnControlInvocationResults</code> in the <code>sessionState</code> field, the <code>inputText</code> field will be ignored.</p>
    /// </note>
    pub fn get_inline_session_state(&self) -> &::std::option::Option<crate::types::InlineSessionState> {
        self.inner.get_inline_session_state()
    }
    ///
    /// Appends an item to `collaborators`.
    ///
    /// To override the contents of this collection use [`set_collaborators`](Self::set_collaborators).
    ///
    /// <p>List of collaborator inline agents.</p>
    pub fn collaborators(mut self, input: crate::types::Collaborator) -> Self {
        self.inner = self.inner.collaborators(input);
        self
    }
    /// <p>List of collaborator inline agents.</p>
    pub fn set_collaborators(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Collaborator>>) -> Self {
        self.inner = self.inner.set_collaborators(input);
        self
    }
    /// <p>List of collaborator inline agents.</p>
    pub fn get_collaborators(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Collaborator>> {
        self.inner.get_collaborators()
    }
    /// <p>Model settings for the request.</p>
    pub fn bedrock_model_configurations(mut self, input: crate::types::InlineBedrockModelConfigurations) -> Self {
        self.inner = self.inner.bedrock_model_configurations(input);
        self
    }
    /// <p>Model settings for the request.</p>
    pub fn set_bedrock_model_configurations(mut self, input: ::std::option::Option<crate::types::InlineBedrockModelConfigurations>) -> Self {
        self.inner = self.inner.set_bedrock_model_configurations(input);
        self
    }
    /// <p>Model settings for the request.</p>
    pub fn get_bedrock_model_configurations(&self) -> &::std::option::Option<crate::types::InlineBedrockModelConfigurations> {
        self.inner.get_bedrock_model_configurations()
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn orchestration_type(mut self, input: crate::types::OrchestrationType) -> Self {
        self.inner = self.inner.orchestration_type(input);
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn set_orchestration_type(mut self, input: ::std::option::Option<crate::types::OrchestrationType>) -> Self {
        self.inner = self.inner.set_orchestration_type(input);
        self
    }
    /// <p>Specifies the type of orchestration strategy for the agent. This is set to DEFAULT orchestration type, by default.</p>
    pub fn get_orchestration_type(&self) -> &::std::option::Option<crate::types::OrchestrationType> {
        self.inner.get_orchestration_type()
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn custom_orchestration(mut self, input: crate::types::CustomOrchestration) -> Self {
        self.inner = self.inner.custom_orchestration(input);
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn set_custom_orchestration(mut self, input: ::std::option::Option<crate::types::CustomOrchestration>) -> Self {
        self.inner = self.inner.set_custom_orchestration(input);
        self
    }
    /// <p>Contains details of the custom orchestration configured for the agent.</p>
    pub fn get_custom_orchestration(&self) -> &::std::option::Option<crate::types::CustomOrchestration> {
        self.inner.get_custom_orchestration()
    }
}
