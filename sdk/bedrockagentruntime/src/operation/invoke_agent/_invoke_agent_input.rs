// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct InvokeAgentInput {
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub session_state: ::std::option::Option<crate::types::SessionState>,
    /// <p>The unique identifier of the agent to use.</p>
    pub agent_id: ::std::option::Option<::std::string::String>,
    /// <p>The alias of the agent to use.</p>
    pub agent_alias_id: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub session_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub end_session: ::std::option::Option<bool>,
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub enable_trace: ::std::option::Option<bool>,
    /// <p>The prompt text to send the agent.</p>
    pub input_text: ::std::option::Option<::std::string::String>,
}
impl InvokeAgentInput {
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn session_state(&self) -> ::std::option::Option<&crate::types::SessionState> {
        self.session_state.as_ref()
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn agent_id(&self) -> ::std::option::Option<&str> {
        self.agent_id.as_deref()
    }
    /// <p>The alias of the agent to use.</p>
    pub fn agent_alias_id(&self) -> ::std::option::Option<&str> {
        self.agent_alias_id.as_deref()
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn session_id(&self) -> ::std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn end_session(&self) -> ::std::option::Option<bool> {
        self.end_session
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn enable_trace(&self) -> ::std::option::Option<bool> {
        self.enable_trace
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn input_text(&self) -> ::std::option::Option<&str> {
        self.input_text.as_deref()
    }
}
impl ::std::fmt::Debug for InvokeAgentInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeAgentInput");
        formatter.field("session_state", &self.session_state);
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_alias_id", &self.agent_alias_id);
        formatter.field("session_id", &self.session_id);
        formatter.field("end_session", &self.end_session);
        formatter.field("enable_trace", &self.enable_trace);
        formatter.field("input_text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl InvokeAgentInput {
    /// Creates a new builder-style object to manufacture [`InvokeAgentInput`](crate::operation::invoke_agent::InvokeAgentInput).
    pub fn builder() -> crate::operation::invoke_agent::builders::InvokeAgentInputBuilder {
        crate::operation::invoke_agent::builders::InvokeAgentInputBuilder::default()
    }
}

/// A builder for [`InvokeAgentInput`](crate::operation::invoke_agent::InvokeAgentInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct InvokeAgentInputBuilder {
    pub(crate) session_state: ::std::option::Option<crate::types::SessionState>,
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) session_id: ::std::option::Option<::std::string::String>,
    pub(crate) end_session: ::std::option::Option<bool>,
    pub(crate) enable_trace: ::std::option::Option<bool>,
    pub(crate) input_text: ::std::option::Option<::std::string::String>,
}
impl InvokeAgentInputBuilder {
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn session_state(mut self, input: crate::types::SessionState) -> Self {
        self.session_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn set_session_state(mut self, input: ::std::option::Option<crate::types::SessionState>) -> Self {
        self.session_state = input;
        self
    }
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn get_session_state(&self) -> &::std::option::Option<crate::types::SessionState> {
        &self.session_state
    }
    /// <p>The unique identifier of the agent to use.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The alias of the agent to use.</p>
    /// This field is required.
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias of the agent to use.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_id = input;
        self
    }
    /// <p>The alias of the agent to use.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_id
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    /// This field is required.
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_id
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn end_session(mut self, input: bool) -> Self {
        self.end_session = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<bool>) -> Self {
        self.end_session = input;
        self
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<bool> {
        &self.end_session
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn enable_trace(mut self, input: bool) -> Self {
        self.enable_trace = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn set_enable_trace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_trace = input;
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn get_enable_trace(&self) -> &::std::option::Option<bool> {
        &self.enable_trace
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn input_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn set_input_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_text = input;
        self
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn get_input_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_text
    }
    /// Consumes the builder and constructs a [`InvokeAgentInput`](crate::operation::invoke_agent::InvokeAgentInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::invoke_agent::InvokeAgentInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::invoke_agent::InvokeAgentInput {
            session_state: self.session_state,
            agent_id: self.agent_id,
            agent_alias_id: self.agent_alias_id,
            session_id: self.session_id,
            end_session: self.end_session,
            enable_trace: self.enable_trace,
            input_text: self.input_text,
        })
    }
}
impl ::std::fmt::Debug for InvokeAgentInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("InvokeAgentInputBuilder");
        formatter.field("session_state", &self.session_state);
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_alias_id", &self.agent_alias_id);
        formatter.field("session_id", &self.session_id);
        formatter.field("end_session", &self.end_session);
        formatter.field("enable_trace", &self.enable_trace);
        formatter.field("input_text", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
