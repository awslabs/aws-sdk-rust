// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::invoke_agent::_invoke_agent_output::InvokeAgentOutputBuilder;

pub use crate::operation::invoke_agent::_invoke_agent_input::InvokeAgentInputBuilder;

impl crate::operation::invoke_agent::builders::InvokeAgentInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::invoke_agent::InvokeAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::invoke_agent::InvokeAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.invoke_agent();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `InvokeAgent`.
///
/// <p>Sends a prompt for the agent to process and respond to. Use return control event type for function calling.</p><note>
/// <p>The CLI doesn't support <code>InvokeAgent</code>.</p>
/// </note>
/// <ul>
/// <li>
/// <p>To continue the same conversation with an agent, use the same <code>sessionId</code> value in the request.</p></li>
/// <li>
/// <p>To activate trace enablement, turn <code>enableTrace</code> to <code>true</code>. Trace enablement helps you follow the agent's reasoning process that led it to the information it processed, the actions it took, and the final result it yielded. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p></li>
/// <li>
/// <p>End a conversation by setting <code>endSession</code> to <code>true</code>.</p></li>
/// <li>
/// <p>In the <code>sessionState</code> object, you can include attributes for the session or prompt or parameters returned from the action group.</p></li>
/// <li>
/// <p>Use return control event type for function calling.</p></li>
/// </ul>
/// <p>The response is returned in the <code>bytes</code> field of the <code>chunk</code> object.</p>
/// <ul>
/// <li>
/// <p>The <code>attribution</code> object contains citations for parts of the response.</p></li>
/// <li>
/// <p>If you set <code>enableTrace</code> to <code>true</code> in the request, you can trace the agent's steps and reasoning process that led it to the response.</p></li>
/// <li>
/// <p>Errors are also surfaced in the response.</p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct InvokeAgentFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::invoke_agent::builders::InvokeAgentInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::invoke_agent::InvokeAgentOutput,
        crate::operation::invoke_agent::InvokeAgentError,
    > for InvokeAgentFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::invoke_agent::InvokeAgentOutput,
            crate::operation::invoke_agent::InvokeAgentError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl InvokeAgentFluentBuilder {
    /// Creates a new `InvokeAgent`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the InvokeAgent as a reference.
    pub fn as_input(&self) -> &crate::operation::invoke_agent::builders::InvokeAgentInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::invoke_agent::InvokeAgentOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::invoke_agent::InvokeAgentError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::invoke_agent::InvokeAgent::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::invoke_agent::InvokeAgent::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::invoke_agent::InvokeAgentOutput,
        crate::operation::invoke_agent::InvokeAgentError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn session_state(mut self, input: crate::types::SessionState) -> Self {
        self.inner = self.inner.session_state(input);
        self
    }
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn set_session_state(mut self, input: ::std::option::Option<crate::types::SessionState>) -> Self {
        self.inner = self.inner.set_session_state(input);
        self
    }
    /// <p>Contains parameters that specify various attributes of the session. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-session-state.html">Control session context</a>.</p>
    pub fn get_session_state(&self) -> &::std::option::Option<crate::types::SessionState> {
        self.inner.get_session_state()
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_id(input.into());
        self
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_id(input);
        self
    }
    /// <p>The unique identifier of the agent to use.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_id()
    }
    /// <p>The alias of the agent to use.</p>
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_alias_id(input.into());
        self
    }
    /// <p>The alias of the agent to use.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_agent_alias_id(input);
        self
    }
    /// <p>The alias of the agent to use.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_agent_alias_id()
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The unique identifier of the session. Use the same value across requests to continue the same conversation.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_id()
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn end_session(mut self, input: bool) -> Self {
        self.inner = self.inner.end_session(input);
        self
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn set_end_session(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_end_session(input);
        self
    }
    /// <p>Specifies whether to end the session with the agent or not.</p>
    pub fn get_end_session(&self) -> &::std::option::Option<bool> {
        self.inner.get_end_session()
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn enable_trace(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_trace(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn set_enable_trace(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_trace(input);
        self
    }
    /// <p>Specifies whether to turn on the trace or not to track the agent's reasoning process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/agents-test.html#trace-events">Trace enablement</a>.</p>
    pub fn get_enable_trace(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_trace()
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn input_text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.input_text(input.into());
        self
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn set_input_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_input_text(input);
        self
    }
    /// <p>The prompt text to send the agent.</p>
    pub fn get_input_text(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_input_text()
    }
}
