// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::retrieve_and_generate_stream::_retrieve_and_generate_stream_output::RetrieveAndGenerateStreamOutputBuilder;

pub use crate::operation::retrieve_and_generate_stream::_retrieve_and_generate_stream_input::RetrieveAndGenerateStreamInputBuilder;

impl crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.retrieve_and_generate_stream();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RetrieveAndGenerateStream`.
///
/// <p>Queries a knowledge base and generates responses based on the retrieved results, with output in streaming format.</p><note>
/// <p>The CLI doesn't support streaming operations in Amazon Bedrock, including <code>InvokeModelWithResponseStream</code>.</p>
/// </note>
/// <p>This operation requires permission for the <code> bedrock:RetrieveAndGenerate</code> action.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RetrieveAndGenerateStreamFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamOutput,
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
    > for RetrieveAndGenerateStreamFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamOutput,
            crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RetrieveAndGenerateStreamFluentBuilder {
    /// Creates a new `RetrieveAndGenerateStreamFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RetrieveAndGenerateStream as a reference.
    pub fn as_input(&self) -> &crate::operation::retrieve_and_generate_stream::builders::RetrieveAndGenerateStreamInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStream::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        let mut output = crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStream::orchestrate(&runtime_plugins, input).await?;

        // Converts any error encountered beyond this point into an `SdkError` response error
        // with an `HttpResponse`. However, since we have already exited the `orchestrate`
        // function, the original `HttpResponse` is no longer available and cannot be restored.
        // This means that header information from the original response has been lost.
        //
        // Note that the response body would have been consumed by the deserializer
        // regardless, even if the initial message was hypothetically processed during
        // the orchestrator's deserialization phase but later resulted in an error.
        fn response_error(
            err: impl ::std::convert::Into<::aws_smithy_runtime_api::box_error::BoxError>,
        ) -> ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        > {
            ::aws_smithy_runtime_api::client::result::SdkError::response_error(
                err,
                ::aws_smithy_runtime_api::client::orchestrator::HttpResponse::new(
                    ::aws_smithy_runtime_api::http::StatusCode::try_from(200).expect("valid successful code"),
                    ::aws_smithy_types::body::SdkBody::empty(),
                ),
            )
        }

        let message = output.stream.try_recv_initial_response().await.map_err(response_error)?;

        match message {
            ::std::option::Option::Some(_message) => ::std::result::Result::Ok(output),
            ::std::option::Option::None => ::std::result::Result::Ok(output),
        }
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamOutput,
        crate::operation::retrieve_and_generate_stream::RetrieveAndGenerateStreamError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn session_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.session_id(input.into());
        self
    }
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn set_session_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_session_id(input);
        self
    }
    /// <p>The unique identifier of the session. When you first make a <code>RetrieveAndGenerate</code> request, Amazon Bedrock automatically generates this value. You must reuse this value for all subsequent requests in the same conversational session. This value allows Amazon Bedrock to maintain context and knowledge from previous interactions. You can't explicitly set the <code>sessionId</code> yourself.</p>
    pub fn get_session_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_session_id()
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn input(mut self, input: crate::types::RetrieveAndGenerateInput) -> Self {
        self.inner = self.inner.input(input);
        self
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn set_input(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateInput>) -> Self {
        self.inner = self.inner.set_input(input);
        self
    }
    /// <p>Contains the query to be made to the knowledge base.</p>
    pub fn get_input(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateInput> {
        self.inner.get_input()
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn retrieve_and_generate_configuration(mut self, input: crate::types::RetrieveAndGenerateConfiguration) -> Self {
        self.inner = self.inner.retrieve_and_generate_configuration(input);
        self
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn set_retrieve_and_generate_configuration(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateConfiguration>) -> Self {
        self.inner = self.inner.set_retrieve_and_generate_configuration(input);
        self
    }
    /// <p>Contains configurations for the knowledge base query and retrieval process. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/kb-test-config.html">Query configurations</a>.</p>
    pub fn get_retrieve_and_generate_configuration(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateConfiguration> {
        self.inner.get_retrieve_and_generate_configuration()
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn session_configuration(mut self, input: crate::types::RetrieveAndGenerateSessionConfiguration) -> Self {
        self.inner = self.inner.session_configuration(input);
        self
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn set_session_configuration(mut self, input: ::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration>) -> Self {
        self.inner = self.inner.set_session_configuration(input);
        self
    }
    /// <p>Contains details about the session with the knowledge base.</p>
    pub fn get_session_configuration(&self) -> &::std::option::Option<crate::types::RetrieveAndGenerateSessionConfiguration> {
        self.inner.get_session_configuration()
    }
}
