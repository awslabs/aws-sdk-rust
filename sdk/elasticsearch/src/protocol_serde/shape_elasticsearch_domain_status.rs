// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_elasticsearch_domain_status<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ElasticsearchDomainStatus>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ElasticsearchDomainStatusBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "DomainId" => {
                            builder = builder.set_domain_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "DomainName" => {
                            builder = builder.set_domain_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ARN" => {
                            builder = builder.set_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Created" => {
                            builder = builder.set_created(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Deleted" => {
                            builder = builder.set_deleted(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "Endpoint" => {
                            builder = builder.set_endpoint(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "Endpoints" => {
                            builder = builder.set_endpoints(crate::protocol_serde::shape_endpoints_map::de_endpoints_map(tokens)?);
                        }
                        "Processing" => {
                            builder = builder.set_processing(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "UpgradeProcessing" => {
                            builder = builder.set_upgrade_processing(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "ElasticsearchVersion" => {
                            builder = builder.set_elasticsearch_version(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ElasticsearchClusterConfig" => {
                            builder = builder.set_elasticsearch_cluster_config(
                                crate::protocol_serde::shape_elasticsearch_cluster_config::de_elasticsearch_cluster_config(tokens)?,
                            );
                        }
                        "EBSOptions" => {
                            builder = builder.set_ebs_options(crate::protocol_serde::shape_ebs_options::de_ebs_options(tokens)?);
                        }
                        "AccessPolicies" => {
                            builder = builder.set_access_policies(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SnapshotOptions" => {
                            builder = builder.set_snapshot_options(crate::protocol_serde::shape_snapshot_options::de_snapshot_options(tokens)?);
                        }
                        "VPCOptions" => {
                            builder = builder.set_vpc_options(crate::protocol_serde::shape_vpc_derived_info::de_vpc_derived_info(tokens)?);
                        }
                        "CognitoOptions" => {
                            builder = builder.set_cognito_options(crate::protocol_serde::shape_cognito_options::de_cognito_options(tokens)?);
                        }
                        "EncryptionAtRestOptions" => {
                            builder = builder.set_encryption_at_rest_options(
                                crate::protocol_serde::shape_encryption_at_rest_options::de_encryption_at_rest_options(tokens)?,
                            );
                        }
                        "NodeToNodeEncryptionOptions" => {
                            builder = builder.set_node_to_node_encryption_options(
                                crate::protocol_serde::shape_node_to_node_encryption_options::de_node_to_node_encryption_options(tokens)?,
                            );
                        }
                        "AdvancedOptions" => {
                            builder = builder.set_advanced_options(crate::protocol_serde::shape_advanced_options::de_advanced_options(tokens)?);
                        }
                        "LogPublishingOptions" => {
                            builder = builder
                                .set_log_publishing_options(crate::protocol_serde::shape_log_publishing_options::de_log_publishing_options(tokens)?);
                        }
                        "ServiceSoftwareOptions" => {
                            builder = builder.set_service_software_options(
                                crate::protocol_serde::shape_service_software_options::de_service_software_options(tokens)?,
                            );
                        }
                        "DomainEndpointOptions" => {
                            builder = builder.set_domain_endpoint_options(
                                crate::protocol_serde::shape_domain_endpoint_options::de_domain_endpoint_options(tokens)?,
                            );
                        }
                        "AdvancedSecurityOptions" => {
                            builder = builder.set_advanced_security_options(
                                crate::protocol_serde::shape_advanced_security_options::de_advanced_security_options(tokens)?,
                            );
                        }
                        "AutoTuneOptions" => {
                            builder = builder.set_auto_tune_options(
                                crate::protocol_serde::shape_auto_tune_options_output::de_auto_tune_options_output(tokens)?,
                            );
                        }
                        "ChangeProgressDetails" => {
                            builder = builder.set_change_progress_details(
                                crate::protocol_serde::shape_change_progress_details::de_change_progress_details(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::elasticsearch_domain_status_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
