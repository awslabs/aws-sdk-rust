// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Container for response returned by <code> <code>GetUpgradeHistory</code> </code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUpgradeHistoryOutput {
    /// <p> A list of <code> <code>UpgradeHistory</code> </code> objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of <code> <code>GetUpgradeHistoryResponse</code> </code> object. </p>
    #[doc(hidden)]
    pub upgrade_histories: std::option::Option<std::vec::Vec<crate::types::UpgradeHistory>>,
    /// <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetUpgradeHistoryOutput {
    /// <p> A list of <code> <code>UpgradeHistory</code> </code> objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of <code> <code>GetUpgradeHistoryResponse</code> </code> object. </p>
    pub fn upgrade_histories(&self) -> std::option::Option<&[crate::types::UpgradeHistory]> {
        self.upgrade_histories.as_deref()
    }
    /// <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetUpgradeHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetUpgradeHistoryOutput {
    /// Creates a new builder-style object to manufacture [`GetUpgradeHistoryOutput`](crate::operation::get_upgrade_history::GetUpgradeHistoryOutput).
    pub fn builder(
    ) -> crate::operation::get_upgrade_history::builders::GetUpgradeHistoryOutputBuilder {
        crate::operation::get_upgrade_history::builders::GetUpgradeHistoryOutputBuilder::default()
    }
}

/// A builder for [`GetUpgradeHistoryOutput`](crate::operation::get_upgrade_history::GetUpgradeHistoryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetUpgradeHistoryOutputBuilder {
    pub(crate) upgrade_histories: std::option::Option<std::vec::Vec<crate::types::UpgradeHistory>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetUpgradeHistoryOutputBuilder {
    /// Appends an item to `upgrade_histories`.
    ///
    /// To override the contents of this collection use [`set_upgrade_histories`](Self::set_upgrade_histories).
    ///
    /// <p> A list of <code> <code>UpgradeHistory</code> </code> objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of <code> <code>GetUpgradeHistoryResponse</code> </code> object. </p>
    pub fn upgrade_histories(mut self, input: crate::types::UpgradeHistory) -> Self {
        let mut v = self.upgrade_histories.unwrap_or_default();
        v.push(input);
        self.upgrade_histories = Some(v);
        self
    }
    /// <p> A list of <code> <code>UpgradeHistory</code> </code> objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of <code> <code>GetUpgradeHistoryResponse</code> </code> object. </p>
    pub fn set_upgrade_histories(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UpgradeHistory>>,
    ) -> Self {
        self.upgrade_histories = input;
        self
    }
    /// <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetUpgradeHistoryOutput`](crate::operation::get_upgrade_history::GetUpgradeHistoryOutput).
    pub fn build(self) -> crate::operation::get_upgrade_history::GetUpgradeHistoryOutput {
        crate::operation::get_upgrade_history::GetUpgradeHistoryOutput {
            upgrade_histories: self.upgrade_histories,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
