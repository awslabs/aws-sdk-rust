// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Container for request parameters to <code> <code>UpdatePackage</code> </code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdatePackageInput {
    /// <p>Unique identifier for the package.</p>
    #[doc(hidden)]
    pub package_id: std::option::Option<std::string::String>,
    /// <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
    #[doc(hidden)]
    pub package_source: std::option::Option<crate::types::PackageSource>,
    /// <p>New description of the package.</p>
    #[doc(hidden)]
    pub package_description: std::option::Option<std::string::String>,
    /// <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    #[doc(hidden)]
    pub commit_message: std::option::Option<std::string::String>,
}
impl UpdatePackageInput {
    /// <p>Unique identifier for the package.</p>
    pub fn package_id(&self) -> std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
    pub fn package_source(&self) -> std::option::Option<&crate::types::PackageSource> {
        self.package_source.as_ref()
    }
    /// <p>New description of the package.</p>
    pub fn package_description(&self) -> std::option::Option<&str> {
        self.package_description.as_deref()
    }
    /// <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn commit_message(&self) -> std::option::Option<&str> {
        self.commit_message.as_deref()
    }
}
impl UpdatePackageInput {
    /// Creates a new builder-style object to manufacture [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn builder() -> crate::operation::update_package::builders::UpdatePackageInputBuilder {
        crate::operation::update_package::builders::UpdatePackageInputBuilder::default()
    }
}

/// A builder for [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdatePackageInputBuilder {
    pub(crate) package_id: std::option::Option<std::string::String>,
    pub(crate) package_source: std::option::Option<crate::types::PackageSource>,
    pub(crate) package_description: std::option::Option<std::string::String>,
    pub(crate) commit_message: std::option::Option<std::string::String>,
}
impl UpdatePackageInputBuilder {
    /// <p>Unique identifier for the package.</p>
    pub fn package_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for the package.</p>
    pub fn set_package_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
    pub fn package_source(mut self, input: crate::types::PackageSource) -> Self {
        self.package_source = Some(input);
        self
    }
    /// <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
    pub fn set_package_source(
        mut self,
        input: std::option::Option<crate::types::PackageSource>,
    ) -> Self {
        self.package_source = input;
        self
    }
    /// <p>New description of the package.</p>
    pub fn package_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_description = Some(input.into());
        self
    }
    /// <p>New description of the package.</p>
    pub fn set_package_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.package_description = input;
        self
    }
    /// <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn commit_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.commit_message = Some(input.into());
        self
    }
    /// <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn set_commit_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.commit_message = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_package::UpdatePackageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_package::UpdatePackageInput {
            package_id: self.package_id,
            package_source: self.package_source,
            package_description: self.package_description,
            commit_message: self.commit_message,
        })
    }
}
