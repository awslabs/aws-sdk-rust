// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code><code>DescribeElasticsearchDomains</code></code> operation. By default, the API returns the status of all Elasticsearch domains.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeElasticsearchDomainsInput {
    /// <p>The Elasticsearch domains for which you want information.</p>
    #[doc(hidden)]
    pub domain_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeElasticsearchDomainsInput {
    /// <p>The Elasticsearch domains for which you want information.</p>
    pub fn domain_names(&self) -> std::option::Option<&[std::string::String]> {
        self.domain_names.as_deref()
    }
}
impl DescribeElasticsearchDomainsInput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticsearchDomainsInput`](crate::operation::describe_elasticsearch_domains::DescribeElasticsearchDomainsInput).
    pub fn builder() -> crate::operation::describe_elasticsearch_domains::builders::DescribeElasticsearchDomainsInputBuilder{
        crate::operation::describe_elasticsearch_domains::builders::DescribeElasticsearchDomainsInputBuilder::default()
    }
}

/// A builder for [`DescribeElasticsearchDomainsInput`](crate::operation::describe_elasticsearch_domains::DescribeElasticsearchDomainsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeElasticsearchDomainsInputBuilder {
    pub(crate) domain_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeElasticsearchDomainsInputBuilder {
    /// Appends an item to `domain_names`.
    ///
    /// To override the contents of this collection use [`set_domain_names`](Self::set_domain_names).
    ///
    /// <p>The Elasticsearch domains for which you want information.</p>
    pub fn domain_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.domain_names.unwrap_or_default();
        v.push(input.into());
        self.domain_names = Some(v);
        self
    }
    /// <p>The Elasticsearch domains for which you want information.</p>
    pub fn set_domain_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.domain_names = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeElasticsearchDomainsInput`](crate::operation::describe_elasticsearch_domains::DescribeElasticsearchDomainsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_elasticsearch_domains::DescribeElasticsearchDomainsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_elasticsearch_domains::DescribeElasticsearchDomainsInput {
                domain_names: self.domain_names,
            },
        )
    }
}
