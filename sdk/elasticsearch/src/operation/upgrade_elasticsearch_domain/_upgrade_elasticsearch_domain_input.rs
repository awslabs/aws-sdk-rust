// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Container for request parameters to <code> <code>UpgradeElasticsearchDomain</code> </code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradeElasticsearchDomainInput {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    #[doc(hidden)]
    pub target_version: std::option::Option<std::string::String>,
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    #[doc(hidden)]
    pub perform_check_only: std::option::Option<bool>,
}
impl UpgradeElasticsearchDomainInput {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn target_version(&self) -> std::option::Option<&str> {
        self.target_version.as_deref()
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn perform_check_only(&self) -> std::option::Option<bool> {
        self.perform_check_only
    }
}
impl UpgradeElasticsearchDomainInput {
    /// Creates a new builder-style object to manufacture [`UpgradeElasticsearchDomainInput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainInput).
    pub fn builder() -> crate::operation::upgrade_elasticsearch_domain::builders::UpgradeElasticsearchDomainInputBuilder{
        crate::operation::upgrade_elasticsearch_domain::builders::UpgradeElasticsearchDomainInputBuilder::default()
    }
}

/// A builder for [`UpgradeElasticsearchDomainInput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpgradeElasticsearchDomainInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) target_version: std::option::Option<std::string::String>,
    pub(crate) perform_check_only: std::option::Option<bool>,
}
impl UpgradeElasticsearchDomainInputBuilder {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn target_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_version = Some(input.into());
        self
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn set_target_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_version = input;
        self
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn perform_check_only(mut self, input: bool) -> Self {
        self.perform_check_only = Some(input);
        self
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn set_perform_check_only(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_check_only = input;
        self
    }
    /// Consumes the builder and constructs a [`UpgradeElasticsearchDomainInput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainInput {
                domain_name: self.domain_name,
                target_version: self.target_version,
                perform_check_only: self.perform_check_only,
            },
        )
    }
}
