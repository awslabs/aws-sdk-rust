// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Container for response returned by <code> <code>UpgradeElasticsearchDomain</code> </code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradeElasticsearchDomainOutput {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    #[doc(hidden)]
    pub target_version: std::option::Option<std::string::String>,
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    #[doc(hidden)]
    pub perform_check_only: std::option::Option<bool>,
    /// <p>Specifies change details of the domain configuration change.</p>
    #[doc(hidden)]
    pub change_progress_details: std::option::Option<crate::types::ChangeProgressDetails>,
    _request_id: Option<String>,
}
impl UpgradeElasticsearchDomainOutput {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn target_version(&self) -> std::option::Option<&str> {
        self.target_version.as_deref()
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn perform_check_only(&self) -> std::option::Option<bool> {
        self.perform_check_only
    }
    /// <p>Specifies change details of the domain configuration change.</p>
    pub fn change_progress_details(
        &self,
    ) -> std::option::Option<&crate::types::ChangeProgressDetails> {
        self.change_progress_details.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpgradeElasticsearchDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpgradeElasticsearchDomainOutput {
    /// Creates a new builder-style object to manufacture [`UpgradeElasticsearchDomainOutput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainOutput).
    pub fn builder() -> crate::operation::upgrade_elasticsearch_domain::builders::UpgradeElasticsearchDomainOutputBuilder{
        crate::operation::upgrade_elasticsearch_domain::builders::UpgradeElasticsearchDomainOutputBuilder::default()
    }
}

/// A builder for [`UpgradeElasticsearchDomainOutput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpgradeElasticsearchDomainOutputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) target_version: std::option::Option<std::string::String>,
    pub(crate) perform_check_only: std::option::Option<bool>,
    pub(crate) change_progress_details: std::option::Option<crate::types::ChangeProgressDetails>,
    _request_id: Option<String>,
}
impl UpgradeElasticsearchDomainOutputBuilder {
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn target_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_version = Some(input.into());
        self
    }
    /// <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    pub fn set_target_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_version = input;
        self
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn perform_check_only(mut self, input: bool) -> Self {
        self.perform_check_only = Some(input);
        self
    }
    /// <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    pub fn set_perform_check_only(mut self, input: std::option::Option<bool>) -> Self {
        self.perform_check_only = input;
        self
    }
    /// <p>Specifies change details of the domain configuration change.</p>
    pub fn change_progress_details(mut self, input: crate::types::ChangeProgressDetails) -> Self {
        self.change_progress_details = Some(input);
        self
    }
    /// <p>Specifies change details of the domain configuration change.</p>
    pub fn set_change_progress_details(
        mut self,
        input: std::option::Option<crate::types::ChangeProgressDetails>,
    ) -> Self {
        self.change_progress_details = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpgradeElasticsearchDomainOutput`](crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainOutput).
    pub fn build(
        self,
    ) -> crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainOutput {
        crate::operation::upgrade_elasticsearch_domain::UpgradeElasticsearchDomainOutput {
            domain_name: self.domain_name,
            target_version: self.target_version,
            perform_check_only: self.perform_check_only,
            change_progress_details: self.change_progress_details,
            _request_id: self._request_id,
        }
    }
}
