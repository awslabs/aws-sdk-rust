// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Container for the parameters to <code> <code>DescribeElasticsearchInstanceTypeLimits</code> </code> operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeElasticsearchInstanceTypeLimitsInput {
    /// <p> DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <code>Limits</code> </code> for existing domain. </p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p> The instance type for an Elasticsearch cluster for which Elasticsearch <code> <code>Limits</code> </code> are needed. </p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::EsPartitionInstanceType>,
    /// <p> Version of Elasticsearch for which <code> <code>Limits</code> </code> are needed. </p>
    #[doc(hidden)]
    pub elasticsearch_version: std::option::Option<std::string::String>,
}
impl DescribeElasticsearchInstanceTypeLimitsInput {
    /// <p> DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <code>Limits</code> </code> for existing domain. </p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p> The instance type for an Elasticsearch cluster for which Elasticsearch <code> <code>Limits</code> </code> are needed. </p>
    pub fn instance_type(&self) -> std::option::Option<&crate::types::EsPartitionInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p> Version of Elasticsearch for which <code> <code>Limits</code> </code> are needed. </p>
    pub fn elasticsearch_version(&self) -> std::option::Option<&str> {
        self.elasticsearch_version.as_deref()
    }
}
impl DescribeElasticsearchInstanceTypeLimitsInput {
    /// Creates a new builder-style object to manufacture [`DescribeElasticsearchInstanceTypeLimitsInput`](crate::operation::describe_elasticsearch_instance_type_limits::DescribeElasticsearchInstanceTypeLimitsInput).
    pub fn builder() -> crate::operation::describe_elasticsearch_instance_type_limits::builders::DescribeElasticsearchInstanceTypeLimitsInputBuilder{
        crate::operation::describe_elasticsearch_instance_type_limits::builders::DescribeElasticsearchInstanceTypeLimitsInputBuilder::default()
    }
}

/// A builder for [`DescribeElasticsearchInstanceTypeLimitsInput`](crate::operation::describe_elasticsearch_instance_type_limits::DescribeElasticsearchInstanceTypeLimitsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeElasticsearchInstanceTypeLimitsInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<crate::types::EsPartitionInstanceType>,
    pub(crate) elasticsearch_version: std::option::Option<std::string::String>,
}
impl DescribeElasticsearchInstanceTypeLimitsInputBuilder {
    /// <p> DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <code>Limits</code> </code> for existing domain. </p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p> DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <code>Limits</code> </code> for existing domain. </p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p> The instance type for an Elasticsearch cluster for which Elasticsearch <code> <code>Limits</code> </code> are needed. </p>
    pub fn instance_type(mut self, input: crate::types::EsPartitionInstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p> The instance type for an Elasticsearch cluster for which Elasticsearch <code> <code>Limits</code> </code> are needed. </p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::EsPartitionInstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p> Version of Elasticsearch for which <code> <code>Limits</code> </code> are needed. </p>
    pub fn elasticsearch_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.elasticsearch_version = Some(input.into());
        self
    }
    /// <p> Version of Elasticsearch for which <code> <code>Limits</code> </code> are needed. </p>
    pub fn set_elasticsearch_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.elasticsearch_version = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeElasticsearchInstanceTypeLimitsInput`](crate::operation::describe_elasticsearch_instance_type_limits::DescribeElasticsearchInstanceTypeLimitsInput).
    pub fn build(self) -> Result<crate::operation::describe_elasticsearch_instance_type_limits::DescribeElasticsearchInstanceTypeLimitsInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::describe_elasticsearch_instance_type_limits::DescribeElasticsearchInstanceTypeLimitsInput {
                domain_name: self.domain_name
                ,
                instance_type: self.instance_type
                ,
                elasticsearch_version: self.elasticsearch_version
                ,
            }
        )
    }
}
