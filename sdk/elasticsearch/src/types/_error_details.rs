// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ErrorDetails {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub error_type: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl ErrorDetails {
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_type(&self) -> std::option::Option<&str> {
        self.error_type.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl ErrorDetails {
    /// Creates a new builder-style object to manufacture [`ErrorDetails`](crate::types::ErrorDetails).
    pub fn builder() -> crate::types::builders::ErrorDetailsBuilder {
        crate::types::builders::ErrorDetailsBuilder::default()
    }
}

/// A builder for [`ErrorDetails`](crate::types::ErrorDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ErrorDetailsBuilder {
    pub(crate) error_type: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl ErrorDetailsBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_type = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_error_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_type = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ErrorDetails`](crate::types::ErrorDetails).
    pub fn build(self) -> crate::types::ErrorDetails {
        crate::types::ErrorDetails {
            error_type: self.error_type,
            error_message: self.error_message,
        }
    }
}
