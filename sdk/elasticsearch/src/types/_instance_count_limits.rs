// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> InstanceCountLimits represents the limits on number of instances that be created in Amazon Elasticsearch for given InstanceType. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceCountLimits {
    /// <p> Minimum number of Instances that can be instantiated for given InstanceType. </p>
    #[doc(hidden)]
    pub minimum_instance_count: i32,
    /// <p> Maximum number of Instances that can be instantiated for given InstanceType. </p>
    #[doc(hidden)]
    pub maximum_instance_count: i32,
}
impl InstanceCountLimits {
    /// <p> Minimum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn minimum_instance_count(&self) -> i32 {
        self.minimum_instance_count
    }
    /// <p> Maximum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn maximum_instance_count(&self) -> i32 {
        self.maximum_instance_count
    }
}
impl InstanceCountLimits {
    /// Creates a new builder-style object to manufacture [`InstanceCountLimits`](crate::types::InstanceCountLimits).
    pub fn builder() -> crate::types::builders::InstanceCountLimitsBuilder {
        crate::types::builders::InstanceCountLimitsBuilder::default()
    }
}

/// A builder for [`InstanceCountLimits`](crate::types::InstanceCountLimits).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceCountLimitsBuilder {
    pub(crate) minimum_instance_count: std::option::Option<i32>,
    pub(crate) maximum_instance_count: std::option::Option<i32>,
}
impl InstanceCountLimitsBuilder {
    /// <p> Minimum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn minimum_instance_count(mut self, input: i32) -> Self {
        self.minimum_instance_count = Some(input);
        self
    }
    /// <p> Minimum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn set_minimum_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_instance_count = input;
        self
    }
    /// <p> Maximum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn maximum_instance_count(mut self, input: i32) -> Self {
        self.maximum_instance_count = Some(input);
        self
    }
    /// <p> Maximum number of Instances that can be instantiated for given InstanceType. </p>
    pub fn set_maximum_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.maximum_instance_count = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceCountLimits`](crate::types::InstanceCountLimits).
    pub fn build(self) -> crate::types::InstanceCountLimits {
        crate::types::InstanceCountLimits {
            minimum_instance_count: self.minimum_instance_count.unwrap_or_default(),
            maximum_instance_count: self.maximum_instance_count.unwrap_or_default(),
        }
    }
}
