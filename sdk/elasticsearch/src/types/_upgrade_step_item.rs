// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single step of the Upgrade or Upgrade Eligibility Check workflow.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpgradeStepItem {
    /// <p> Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through: </p>
    /// <ul>
    /// <li>PreUpgradeCheck</li>
    /// <li>Snapshot</li>
    /// <li>Upgrade</li>
    /// </ul>
    /// <p></p>
    #[doc(hidden)]
    pub upgrade_step: std::option::Option<crate::types::UpgradeStep>,
    /// <p> The status of a particular step during an upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li>In Progress</li>
    /// <li>Succeeded</li>
    /// <li>Succeeded with Issues</li>
    /// <li>Failed</li>
    /// </ul>
    /// <p></p>
    #[doc(hidden)]
    pub upgrade_step_status: std::option::Option<crate::types::UpgradeStatus>,
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    #[doc(hidden)]
    pub issues: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Floating point value representing progress percentage of a particular step.</p>
    #[doc(hidden)]
    pub progress_percent: std::option::Option<f64>,
}
impl UpgradeStepItem {
    /// <p> Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through: </p>
    /// <ul>
    /// <li>PreUpgradeCheck</li>
    /// <li>Snapshot</li>
    /// <li>Upgrade</li>
    /// </ul>
    /// <p></p>
    pub fn upgrade_step(&self) -> std::option::Option<&crate::types::UpgradeStep> {
        self.upgrade_step.as_ref()
    }
    /// <p> The status of a particular step during an upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li>In Progress</li>
    /// <li>Succeeded</li>
    /// <li>Succeeded with Issues</li>
    /// <li>Failed</li>
    /// </ul>
    /// <p></p>
    pub fn upgrade_step_status(&self) -> std::option::Option<&crate::types::UpgradeStatus> {
        self.upgrade_step_status.as_ref()
    }
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn issues(&self) -> std::option::Option<&[std::string::String]> {
        self.issues.as_deref()
    }
    /// <p>The Floating point value representing progress percentage of a particular step.</p>
    pub fn progress_percent(&self) -> std::option::Option<f64> {
        self.progress_percent
    }
}
impl UpgradeStepItem {
    /// Creates a new builder-style object to manufacture [`UpgradeStepItem`](crate::types::UpgradeStepItem).
    pub fn builder() -> crate::types::builders::UpgradeStepItemBuilder {
        crate::types::builders::UpgradeStepItemBuilder::default()
    }
}

/// A builder for [`UpgradeStepItem`](crate::types::UpgradeStepItem).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpgradeStepItemBuilder {
    pub(crate) upgrade_step: std::option::Option<crate::types::UpgradeStep>,
    pub(crate) upgrade_step_status: std::option::Option<crate::types::UpgradeStatus>,
    pub(crate) issues: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) progress_percent: std::option::Option<f64>,
}
impl UpgradeStepItemBuilder {
    /// <p> Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through: </p>
    /// <ul>
    /// <li>PreUpgradeCheck</li>
    /// <li>Snapshot</li>
    /// <li>Upgrade</li>
    /// </ul>
    /// <p></p>
    pub fn upgrade_step(mut self, input: crate::types::UpgradeStep) -> Self {
        self.upgrade_step = Some(input);
        self
    }
    /// <p> Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through: </p>
    /// <ul>
    /// <li>PreUpgradeCheck</li>
    /// <li>Snapshot</li>
    /// <li>Upgrade</li>
    /// </ul>
    /// <p></p>
    pub fn set_upgrade_step(
        mut self,
        input: std::option::Option<crate::types::UpgradeStep>,
    ) -> Self {
        self.upgrade_step = input;
        self
    }
    /// <p> The status of a particular step during an upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li>In Progress</li>
    /// <li>Succeeded</li>
    /// <li>Succeeded with Issues</li>
    /// <li>Failed</li>
    /// </ul>
    /// <p></p>
    pub fn upgrade_step_status(mut self, input: crate::types::UpgradeStatus) -> Self {
        self.upgrade_step_status = Some(input);
        self
    }
    /// <p> The status of a particular step during an upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li>In Progress</li>
    /// <li>Succeeded</li>
    /// <li>Succeeded with Issues</li>
    /// <li>Failed</li>
    /// </ul>
    /// <p></p>
    pub fn set_upgrade_step_status(
        mut self,
        input: std::option::Option<crate::types::UpgradeStatus>,
    ) -> Self {
        self.upgrade_step_status = input;
        self
    }
    /// Appends an item to `issues`.
    ///
    /// To override the contents of this collection use [`set_issues`](Self::set_issues).
    ///
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn issues(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.issues.unwrap_or_default();
        v.push(input.into());
        self.issues = Some(v);
        self
    }
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn set_issues(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.issues = input;
        self
    }
    /// <p>The Floating point value representing progress percentage of a particular step.</p>
    pub fn progress_percent(mut self, input: f64) -> Self {
        self.progress_percent = Some(input);
        self
    }
    /// <p>The Floating point value representing progress percentage of a particular step.</p>
    pub fn set_progress_percent(mut self, input: std::option::Option<f64>) -> Self {
        self.progress_percent = input;
        self
    }
    /// Consumes the builder and constructs a [`UpgradeStepItem`](crate::types::UpgradeStepItem).
    pub fn build(self) -> crate::types::UpgradeStepItem {
        crate::types::UpgradeStepItem {
            upgrade_step: self.upgrade_step,
            upgrade_step_status: self.upgrade_step_status,
            issues: self.issues,
            progress_percent: self.progress_percent,
        }
    }
}
