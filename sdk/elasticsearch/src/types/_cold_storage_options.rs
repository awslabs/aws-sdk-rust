// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the configuration for cold storage options such as enabled</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ColdStorageOptions {
    /// <p>Enable cold storage option. Accepted values true or false</p>
    pub enabled: bool,
}
impl ColdStorageOptions {
    /// <p>Enable cold storage option. Accepted values true or false</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
}
impl ColdStorageOptions {
    /// Creates a new builder-style object to manufacture [`ColdStorageOptions`](crate::types::ColdStorageOptions).
    pub fn builder() -> crate::types::builders::ColdStorageOptionsBuilder {
        crate::types::builders::ColdStorageOptionsBuilder::default()
    }
}

/// A builder for [`ColdStorageOptions`](crate::types::ColdStorageOptions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ColdStorageOptionsBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
}
impl ColdStorageOptionsBuilder {
    /// <p>Enable cold storage option. Accepted values true or false</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enable cold storage option. Accepted values true or false</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Enable cold storage option. Accepted values true or false</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Consumes the builder and constructs a [`ColdStorageOptions`](crate::types::ColdStorageOptions).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::ColdStorageOptionsBuilder::enabled)
    pub fn build(self) -> ::std::result::Result<crate::types::ColdStorageOptions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ColdStorageOptions {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building ColdStorageOptions",
                )
            })?,
        })
    }
}
