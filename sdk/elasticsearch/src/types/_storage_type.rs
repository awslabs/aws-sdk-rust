// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>StorageTypes represents the list of storage related types and their attributes that are available for given InstanceType. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StorageType {
    /// <p> Type of the storage. List of available storage options: </p>
    /// <ol>
    /// <li>instance</li> Inbuilt storage available for the given Instance
    /// <li>ebs</li> Elastic block storage that would be attached to the given Instance
    /// </ol>
    /// <p></p>
    #[doc(hidden)]
    pub storage_type_name: std::option::Option<std::string::String>,
    /// <p> SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes </p>
    /// <ol>
    /// <li>standard</li>
    /// <li>gp2</li>
    /// <li>gp3</li>
    /// <li>io1</li>
    /// </ol> Refer <code><code>VolumeType</code></code> for more information regarding above EBS storage options.
    /// <p></p>
    #[doc(hidden)]
    pub storage_sub_type_name: std::option::Option<std::string::String>,
    /// <p>List of limits that are applicable for given storage type. </p>
    #[doc(hidden)]
    pub storage_type_limits: std::option::Option<std::vec::Vec<crate::types::StorageTypeLimit>>,
}
impl StorageType {
    /// <p> Type of the storage. List of available storage options: </p>
    /// <ol>
    /// <li>instance</li> Inbuilt storage available for the given Instance
    /// <li>ebs</li> Elastic block storage that would be attached to the given Instance
    /// </ol>
    /// <p></p>
    pub fn storage_type_name(&self) -> std::option::Option<&str> {
        self.storage_type_name.as_deref()
    }
    /// <p> SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes </p>
    /// <ol>
    /// <li>standard</li>
    /// <li>gp2</li>
    /// <li>gp3</li>
    /// <li>io1</li>
    /// </ol> Refer <code><code>VolumeType</code></code> for more information regarding above EBS storage options.
    /// <p></p>
    pub fn storage_sub_type_name(&self) -> std::option::Option<&str> {
        self.storage_sub_type_name.as_deref()
    }
    /// <p>List of limits that are applicable for given storage type. </p>
    pub fn storage_type_limits(&self) -> std::option::Option<&[crate::types::StorageTypeLimit]> {
        self.storage_type_limits.as_deref()
    }
}
impl StorageType {
    /// Creates a new builder-style object to manufacture [`StorageType`](crate::types::StorageType).
    pub fn builder() -> crate::types::builders::StorageTypeBuilder {
        crate::types::builders::StorageTypeBuilder::default()
    }
}

/// A builder for [`StorageType`](crate::types::StorageType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StorageTypeBuilder {
    pub(crate) storage_type_name: std::option::Option<std::string::String>,
    pub(crate) storage_sub_type_name: std::option::Option<std::string::String>,
    pub(crate) storage_type_limits:
        std::option::Option<std::vec::Vec<crate::types::StorageTypeLimit>>,
}
impl StorageTypeBuilder {
    /// <p> Type of the storage. List of available storage options: </p>
    /// <ol>
    /// <li>instance</li> Inbuilt storage available for the given Instance
    /// <li>ebs</li> Elastic block storage that would be attached to the given Instance
    /// </ol>
    /// <p></p>
    pub fn storage_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_type_name = Some(input.into());
        self
    }
    /// <p> Type of the storage. List of available storage options: </p>
    /// <ol>
    /// <li>instance</li> Inbuilt storage available for the given Instance
    /// <li>ebs</li> Elastic block storage that would be attached to the given Instance
    /// </ol>
    /// <p></p>
    pub fn set_storage_type_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.storage_type_name = input;
        self
    }
    /// <p> SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes </p>
    /// <ol>
    /// <li>standard</li>
    /// <li>gp2</li>
    /// <li>gp3</li>
    /// <li>io1</li>
    /// </ol> Refer <code><code>VolumeType</code></code> for more information regarding above EBS storage options.
    /// <p></p>
    pub fn storage_sub_type_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_sub_type_name = Some(input.into());
        self
    }
    /// <p> SubType of the given storage type. List of available sub-storage options: For "instance" storageType we wont have any storageSubType, in case of "ebs" storageType we will have following valid storageSubTypes </p>
    /// <ol>
    /// <li>standard</li>
    /// <li>gp2</li>
    /// <li>gp3</li>
    /// <li>io1</li>
    /// </ol> Refer <code><code>VolumeType</code></code> for more information regarding above EBS storage options.
    /// <p></p>
    pub fn set_storage_sub_type_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.storage_sub_type_name = input;
        self
    }
    /// Appends an item to `storage_type_limits`.
    ///
    /// To override the contents of this collection use [`set_storage_type_limits`](Self::set_storage_type_limits).
    ///
    /// <p>List of limits that are applicable for given storage type. </p>
    pub fn storage_type_limits(mut self, input: crate::types::StorageTypeLimit) -> Self {
        let mut v = self.storage_type_limits.unwrap_or_default();
        v.push(input);
        self.storage_type_limits = Some(v);
        self
    }
    /// <p>List of limits that are applicable for given storage type. </p>
    pub fn set_storage_type_limits(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::StorageTypeLimit>>,
    ) -> Self {
        self.storage_type_limits = input;
        self
    }
    /// Consumes the builder and constructs a [`StorageType`](crate::types::StorageType).
    pub fn build(self) -> crate::types::StorageType {
        crate::types::StorageType {
            storage_type_name: self.storage_type_name,
            storage_sub_type_name: self.storage_sub_type_name,
            storage_type_limits: self.storage_type_limits,
        }
    }
}
