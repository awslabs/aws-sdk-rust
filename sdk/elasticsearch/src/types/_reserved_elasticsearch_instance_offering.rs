// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a reserved Elasticsearch instance offering.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservedElasticsearchInstanceOffering {
    /// <p>The Elasticsearch reserved instance offering identifier.</p>
    #[doc(hidden)]
    pub reserved_elasticsearch_instance_offering_id: std::option::Option<std::string::String>,
    /// <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
    #[doc(hidden)]
    pub elasticsearch_instance_type: std::option::Option<crate::types::EsPartitionInstanceType>,
    /// <p>The duration, in seconds, for which the offering will reserve the Elasticsearch instance.</p>
    #[doc(hidden)]
    pub duration: i32,
    /// <p>The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. </p>
    #[doc(hidden)]
    pub fixed_price: std::option::Option<f64>,
    /// <p>The rate you are charged for each hour the domain that is using the offering is running.</p>
    #[doc(hidden)]
    pub usage_price: std::option::Option<f64>,
    /// <p>The currency code for the reserved Elasticsearch instance offering.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>Payment option for the reserved Elasticsearch instance offering</p>
    #[doc(hidden)]
    pub payment_option:
        std::option::Option<crate::types::ReservedElasticsearchInstancePaymentOption>,
    /// <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
    #[doc(hidden)]
    pub recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
}
impl ReservedElasticsearchInstanceOffering {
    /// <p>The Elasticsearch reserved instance offering identifier.</p>
    pub fn reserved_elasticsearch_instance_offering_id(&self) -> std::option::Option<&str> {
        self.reserved_elasticsearch_instance_offering_id.as_deref()
    }
    /// <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
    pub fn elasticsearch_instance_type(
        &self,
    ) -> std::option::Option<&crate::types::EsPartitionInstanceType> {
        self.elasticsearch_instance_type.as_ref()
    }
    /// <p>The duration, in seconds, for which the offering will reserve the Elasticsearch instance.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. </p>
    pub fn fixed_price(&self) -> std::option::Option<f64> {
        self.fixed_price
    }
    /// <p>The rate you are charged for each hour the domain that is using the offering is running.</p>
    pub fn usage_price(&self) -> std::option::Option<f64> {
        self.usage_price
    }
    /// <p>The currency code for the reserved Elasticsearch instance offering.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>Payment option for the reserved Elasticsearch instance offering</p>
    pub fn payment_option(
        &self,
    ) -> std::option::Option<&crate::types::ReservedElasticsearchInstancePaymentOption> {
        self.payment_option.as_ref()
    }
    /// <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
    pub fn recurring_charges(&self) -> std::option::Option<&[crate::types::RecurringCharge]> {
        self.recurring_charges.as_deref()
    }
}
impl ReservedElasticsearchInstanceOffering {
    /// Creates a new builder-style object to manufacture [`ReservedElasticsearchInstanceOffering`](crate::types::ReservedElasticsearchInstanceOffering).
    pub fn builder() -> crate::types::builders::ReservedElasticsearchInstanceOfferingBuilder {
        crate::types::builders::ReservedElasticsearchInstanceOfferingBuilder::default()
    }
}

/// A builder for [`ReservedElasticsearchInstanceOffering`](crate::types::ReservedElasticsearchInstanceOffering).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservedElasticsearchInstanceOfferingBuilder {
    pub(crate) reserved_elasticsearch_instance_offering_id:
        std::option::Option<std::string::String>,
    pub(crate) elasticsearch_instance_type:
        std::option::Option<crate::types::EsPartitionInstanceType>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) fixed_price: std::option::Option<f64>,
    pub(crate) usage_price: std::option::Option<f64>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) payment_option:
        std::option::Option<crate::types::ReservedElasticsearchInstancePaymentOption>,
    pub(crate) recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
}
impl ReservedElasticsearchInstanceOfferingBuilder {
    /// <p>The Elasticsearch reserved instance offering identifier.</p>
    pub fn reserved_elasticsearch_instance_offering_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.reserved_elasticsearch_instance_offering_id = Some(input.into());
        self
    }
    /// <p>The Elasticsearch reserved instance offering identifier.</p>
    pub fn set_reserved_elasticsearch_instance_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_elasticsearch_instance_offering_id = input;
        self
    }
    /// <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
    pub fn elasticsearch_instance_type(
        mut self,
        input: crate::types::EsPartitionInstanceType,
    ) -> Self {
        self.elasticsearch_instance_type = Some(input);
        self
    }
    /// <p>The Elasticsearch instance type offered by the reserved instance offering.</p>
    pub fn set_elasticsearch_instance_type(
        mut self,
        input: std::option::Option<crate::types::EsPartitionInstanceType>,
    ) -> Self {
        self.elasticsearch_instance_type = input;
        self
    }
    /// <p>The duration, in seconds, for which the offering will reserve the Elasticsearch instance.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration, in seconds, for which the offering will reserve the Elasticsearch instance.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. </p>
    pub fn fixed_price(mut self, input: f64) -> Self {
        self.fixed_price = Some(input);
        self
    }
    /// <p>The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. </p>
    pub fn set_fixed_price(mut self, input: std::option::Option<f64>) -> Self {
        self.fixed_price = input;
        self
    }
    /// <p>The rate you are charged for each hour the domain that is using the offering is running.</p>
    pub fn usage_price(mut self, input: f64) -> Self {
        self.usage_price = Some(input);
        self
    }
    /// <p>The rate you are charged for each hour the domain that is using the offering is running.</p>
    pub fn set_usage_price(mut self, input: std::option::Option<f64>) -> Self {
        self.usage_price = input;
        self
    }
    /// <p>The currency code for the reserved Elasticsearch instance offering.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code for the reserved Elasticsearch instance offering.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>Payment option for the reserved Elasticsearch instance offering</p>
    pub fn payment_option(
        mut self,
        input: crate::types::ReservedElasticsearchInstancePaymentOption,
    ) -> Self {
        self.payment_option = Some(input);
        self
    }
    /// <p>Payment option for the reserved Elasticsearch instance offering</p>
    pub fn set_payment_option(
        mut self,
        input: std::option::Option<crate::types::ReservedElasticsearchInstancePaymentOption>,
    ) -> Self {
        self.payment_option = input;
        self
    }
    /// Appends an item to `recurring_charges`.
    ///
    /// To override the contents of this collection use [`set_recurring_charges`](Self::set_recurring_charges).
    ///
    /// <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
    pub fn recurring_charges(mut self, input: crate::types::RecurringCharge) -> Self {
        let mut v = self.recurring_charges.unwrap_or_default();
        v.push(input);
        self.recurring_charges = Some(v);
        self
    }
    /// <p>The charge to your account regardless of whether you are creating any domains using the instance offering.</p>
    pub fn set_recurring_charges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    ) -> Self {
        self.recurring_charges = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservedElasticsearchInstanceOffering`](crate::types::ReservedElasticsearchInstanceOffering).
    pub fn build(self) -> crate::types::ReservedElasticsearchInstanceOffering {
        crate::types::ReservedElasticsearchInstanceOffering {
            reserved_elasticsearch_instance_offering_id: self
                .reserved_elasticsearch_instance_offering_id,
            elasticsearch_instance_type: self.elasticsearch_instance_type,
            duration: self.duration.unwrap_or_default(),
            fixed_price: self.fixed_price,
            usage_price: self.usage_price,
            currency_code: self.currency_code,
            payment_option: self.payment_option,
            recurring_charges: self.recurring_charges,
        }
    }
}
