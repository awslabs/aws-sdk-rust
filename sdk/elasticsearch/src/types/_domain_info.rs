// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainInfo {
    /// <p> Specifies the <code>DomainName</code>.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p> Specifies the <code>EngineType</code> of the domain.</p>
    #[doc(hidden)]
    pub engine_type: std::option::Option<crate::types::EngineType>,
}
impl DomainInfo {
    /// <p> Specifies the <code>DomainName</code>.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p> Specifies the <code>EngineType</code> of the domain.</p>
    pub fn engine_type(&self) -> std::option::Option<&crate::types::EngineType> {
        self.engine_type.as_ref()
    }
}
impl DomainInfo {
    /// Creates a new builder-style object to manufacture [`DomainInfo`](crate::types::DomainInfo).
    pub fn builder() -> crate::types::builders::DomainInfoBuilder {
        crate::types::builders::DomainInfoBuilder::default()
    }
}

/// A builder for [`DomainInfo`](crate::types::DomainInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainInfoBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) engine_type: std::option::Option<crate::types::EngineType>,
}
impl DomainInfoBuilder {
    /// <p> Specifies the <code>DomainName</code>.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p> Specifies the <code>DomainName</code>.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p> Specifies the <code>EngineType</code> of the domain.</p>
    pub fn engine_type(mut self, input: crate::types::EngineType) -> Self {
        self.engine_type = Some(input);
        self
    }
    /// <p> Specifies the <code>EngineType</code> of the domain.</p>
    pub fn set_engine_type(mut self, input: std::option::Option<crate::types::EngineType>) -> Self {
        self.engine_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainInfo`](crate::types::DomainInfo).
    pub fn build(self) -> crate::types::DomainInfo {
        crate::types::DomainInfo {
            domain_name: self.domain_name,
            engine_type: self.engine_type,
        }
    }
}
