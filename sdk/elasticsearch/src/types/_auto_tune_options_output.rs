// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the Auto-Tune options: the Auto-Tune desired state for the domain and list of maintenance schedules.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoTuneOptionsOutput {
    /// <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::AutoTuneState>,
    /// <p>Specifies the error message while enabling or disabling the Auto-Tune.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl AutoTuneOptionsOutput {
    /// <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::AutoTuneState> {
        self.state.as_ref()
    }
    /// <p>Specifies the error message while enabling or disabling the Auto-Tune.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl AutoTuneOptionsOutput {
    /// Creates a new builder-style object to manufacture [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
    pub fn builder() -> crate::types::builders::AutoTuneOptionsOutputBuilder {
        crate::types::builders::AutoTuneOptionsOutputBuilder::default()
    }
}

/// A builder for [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoTuneOptionsOutputBuilder {
    pub(crate) state: std::option::Option<crate::types::AutoTuneState>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl AutoTuneOptionsOutputBuilder {
    /// <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
    pub fn state(mut self, input: crate::types::AutoTuneState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>Specifies the <code>AutoTuneState</code> for the Elasticsearch domain.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::AutoTuneState>) -> Self {
        self.state = input;
        self
    }
    /// <p>Specifies the error message while enabling or disabling the Auto-Tune.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>Specifies the error message while enabling or disabling the Auto-Tune.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoTuneOptionsOutput`](crate::types::AutoTuneOptionsOutput).
    pub fn build(self) -> crate::types::AutoTuneOptionsOutput {
        crate::types::AutoTuneOptionsOutput {
            state: self.state,
            error_message: self.error_message,
        }
    }
}
