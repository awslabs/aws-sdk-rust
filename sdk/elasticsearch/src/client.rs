// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Elasticsearch Service
///
/// Client for invoking operations on Amazon Elasticsearch Service. Each operation on Amazon Elasticsearch Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_elasticsearch::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_elasticsearch::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_elasticsearch::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AcceptInboundCrossClusterSearchConnection`](crate::client::fluent_builders::AcceptInboundCrossClusterSearchConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cross_cluster_search_connection_id(impl Into<String>)`](crate::client::fluent_builders::AcceptInboundCrossClusterSearchConnection::cross_cluster_search_connection_id) / [`set_cross_cluster_search_connection_id(Option<String>)`](crate::client::fluent_builders::AcceptInboundCrossClusterSearchConnection::set_cross_cluster_search_connection_id): <p>The id of the inbound connection that you want to accept.</p>
    /// - On success, responds with [`AcceptInboundCrossClusterSearchConnectionOutput`](crate::output::AcceptInboundCrossClusterSearchConnectionOutput) with field(s):
    ///   - [`cross_cluster_search_connection(Option<InboundCrossClusterSearchConnection>)`](crate::output::AcceptInboundCrossClusterSearchConnectionOutput::cross_cluster_search_connection): <p>Specifies the <code><code>InboundCrossClusterSearchConnection</code></code> of accepted inbound connection. </p>
    /// - On failure, responds with [`SdkError<AcceptInboundCrossClusterSearchConnectionError>`](crate::error::AcceptInboundCrossClusterSearchConnectionError)
    pub fn accept_inbound_cross_cluster_search_connection(
        &self,
    ) -> crate::client::fluent_builders::AcceptInboundCrossClusterSearchConnection {
        crate::client::fluent_builders::AcceptInboundCrossClusterSearchConnection::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`AddTags`](crate::client::fluent_builders::AddTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::AddTags::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::AddTags::set_arn): <p> Specify the <code>ARN</code> for which you want to add the tags.</p>
    ///   - [`tag_list(Vec<Tag>)`](crate::client::fluent_builders::AddTags::tag_list) / [`set_tag_list(Option<Vec<Tag>>)`](crate::client::fluent_builders::AddTags::set_tag_list): <p> List of <code>Tag</code> that need to be added for the Elasticsearch domain. </p>
    /// - On success, responds with [`AddTagsOutput`](crate::output::AddTagsOutput)

    /// - On failure, responds with [`SdkError<AddTagsError>`](crate::error::AddTagsError)
    pub fn add_tags(&self) -> crate::client::fluent_builders::AddTags {
        crate::client::fluent_builders::AddTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AssociatePackage`](crate::client::fluent_builders::AssociatePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::AssociatePackage::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::AssociatePackage::set_package_id): <p>Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.</p>
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::AssociatePackage::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::AssociatePackage::set_domain_name): <p>Name of the domain that you want to associate the package with.</p>
    /// - On success, responds with [`AssociatePackageOutput`](crate::output::AssociatePackageOutput) with field(s):
    ///   - [`domain_package_details(Option<DomainPackageDetails>)`](crate::output::AssociatePackageOutput::domain_package_details): <p><code>DomainPackageDetails</code></p>
    /// - On failure, responds with [`SdkError<AssociatePackageError>`](crate::error::AssociatePackageError)
    pub fn associate_package(&self) -> crate::client::fluent_builders::AssociatePackage {
        crate::client::fluent_builders::AssociatePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AuthorizeVpcEndpointAccess`](crate::client::fluent_builders::AuthorizeVpcEndpointAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::AuthorizeVpcEndpointAccess::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::AuthorizeVpcEndpointAccess::set_domain_name): <p>The name of the OpenSearch Service domain to provide access to.</p>
    ///   - [`account(impl Into<String>)`](crate::client::fluent_builders::AuthorizeVpcEndpointAccess::account) / [`set_account(Option<String>)`](crate::client::fluent_builders::AuthorizeVpcEndpointAccess::set_account): <p>The account ID to grant access to.</p>
    /// - On success, responds with [`AuthorizeVpcEndpointAccessOutput`](crate::output::AuthorizeVpcEndpointAccessOutput) with field(s):
    ///   - [`authorized_principal(Option<AuthorizedPrincipal>)`](crate::output::AuthorizeVpcEndpointAccessOutput::authorized_principal): <p>Information about the account or service that was provided access to the domain.</p>
    /// - On failure, responds with [`SdkError<AuthorizeVpcEndpointAccessError>`](crate::error::AuthorizeVpcEndpointAccessError)
    pub fn authorize_vpc_endpoint_access(
        &self,
    ) -> crate::client::fluent_builders::AuthorizeVpcEndpointAccess {
        crate::client::fluent_builders::AuthorizeVpcEndpointAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CancelElasticsearchServiceSoftwareUpdate`](crate::client::fluent_builders::CancelElasticsearchServiceSoftwareUpdate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::CancelElasticsearchServiceSoftwareUpdate::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::CancelElasticsearchServiceSoftwareUpdate::set_domain_name): <p>The name of the domain that you want to stop the latest service software update on.</p>
    /// - On success, responds with [`CancelElasticsearchServiceSoftwareUpdateOutput`](crate::output::CancelElasticsearchServiceSoftwareUpdateOutput) with field(s):
    ///   - [`service_software_options(Option<ServiceSoftwareOptions>)`](crate::output::CancelElasticsearchServiceSoftwareUpdateOutput::service_software_options): <p>The current status of the Elasticsearch service software update.</p>
    /// - On failure, responds with [`SdkError<CancelElasticsearchServiceSoftwareUpdateError>`](crate::error::CancelElasticsearchServiceSoftwareUpdateError)
    pub fn cancel_elasticsearch_service_software_update(
        &self,
    ) -> crate::client::fluent_builders::CancelElasticsearchServiceSoftwareUpdate {
        crate::client::fluent_builders::CancelElasticsearchServiceSoftwareUpdate::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`CreateElasticsearchDomain`](crate::client::fluent_builders::CreateElasticsearchDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_domain_name): <p>The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a lowercase letter and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    ///   - [`elasticsearch_version(impl Into<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::elasticsearch_version) / [`set_elasticsearch_version(Option<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_elasticsearch_version): <p>String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomains" target="_blank">Creating Elasticsearch Domains</a> in the <i>Amazon Elasticsearch Service Developer Guide</i>.</p>
    ///   - [`elasticsearch_cluster_config(ElasticsearchClusterConfig)`](crate::client::fluent_builders::CreateElasticsearchDomain::elasticsearch_cluster_config) / [`set_elasticsearch_cluster_config(Option<ElasticsearchClusterConfig>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_elasticsearch_cluster_config): <p>Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. </p>
    ///   - [`ebs_options(EbsOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::ebs_options) / [`set_ebs_options(Option<EbsOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_ebs_options): <p>Options to enable, disable and specify the type and size of EBS storage volumes. </p>
    ///   - [`access_policies(impl Into<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::access_policies) / [`set_access_policies(Option<String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_access_policies): <p> IAM access policy as a JSON-formatted string.</p>
    ///   - [`snapshot_options(SnapshotOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::snapshot_options) / [`set_snapshot_options(Option<SnapshotOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_snapshot_options): <p>Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. </p>
    ///   - [`vpc_options(VpcOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::vpc_options) / [`set_vpc_options(Option<VpcOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_vpc_options): <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i></p>
    ///   - [`cognito_options(CognitoOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::cognito_options) / [`set_cognito_options(Option<CognitoOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_cognito_options): <p>Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
    ///   - [`encryption_at_rest_options(EncryptionAtRestOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::encryption_at_rest_options) / [`set_encryption_at_rest_options(Option<EncryptionAtRestOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_encryption_at_rest_options): <p>Specifies the Encryption At Rest Options.</p>
    ///   - [`node_to_node_encryption_options(NodeToNodeEncryptionOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::node_to_node_encryption_options) / [`set_node_to_node_encryption_options(Option<NodeToNodeEncryptionOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_node_to_node_encryption_options): <p>Specifies the NodeToNodeEncryptionOptions.</p>
    ///   - [`advanced_options(HashMap<String, String>)`](crate::client::fluent_builders::CreateElasticsearchDomain::advanced_options) / [`set_advanced_options(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_advanced_options): <p> Option to allow references to indices in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. By default, the value is <code>true</code>. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options</a> for more information.</p>
    ///   - [`log_publishing_options(HashMap<LogType, LogPublishingOption>)`](crate::client::fluent_builders::CreateElasticsearchDomain::log_publishing_options) / [`set_log_publishing_options(Option<HashMap<LogType, LogPublishingOption>>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_log_publishing_options): <p>Map of <code>LogType</code> and <code>LogPublishingOption</code>, each containing options to publish a given type of Elasticsearch log.</p>
    ///   - [`domain_endpoint_options(DomainEndpointOptions)`](crate::client::fluent_builders::CreateElasticsearchDomain::domain_endpoint_options) / [`set_domain_endpoint_options(Option<DomainEndpointOptions>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_domain_endpoint_options): <p>Options to specify configuration that will be applied to the domain endpoint.</p>
    ///   - [`advanced_security_options(AdvancedSecurityOptionsInput)`](crate::client::fluent_builders::CreateElasticsearchDomain::advanced_security_options) / [`set_advanced_security_options(Option<AdvancedSecurityOptionsInput>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_advanced_security_options): <p>Specifies advanced security options.</p>
    ///   - [`auto_tune_options(AutoTuneOptionsInput)`](crate::client::fluent_builders::CreateElasticsearchDomain::auto_tune_options) / [`set_auto_tune_options(Option<AutoTuneOptionsInput>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_auto_tune_options): <p>Specifies Auto-Tune options.</p>
    ///   - [`tag_list(Vec<Tag>)`](crate::client::fluent_builders::CreateElasticsearchDomain::tag_list) / [`set_tag_list(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateElasticsearchDomain::set_tag_list): <p>A list of <code>Tag</code> added during domain creation.</p>
    /// - On success, responds with [`CreateElasticsearchDomainOutput`](crate::output::CreateElasticsearchDomainOutput) with field(s):
    ///   - [`domain_status(Option<ElasticsearchDomainStatus>)`](crate::output::CreateElasticsearchDomainOutput::domain_status): <p>The status of the newly created Elasticsearch domain. </p>
    /// - On failure, responds with [`SdkError<CreateElasticsearchDomainError>`](crate::error::CreateElasticsearchDomainError)
    pub fn create_elasticsearch_domain(
        &self,
    ) -> crate::client::fluent_builders::CreateElasticsearchDomain {
        crate::client::fluent_builders::CreateElasticsearchDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateOutboundCrossClusterSearchConnection`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_domain_info(DomainInformation)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::source_domain_info) / [`set_source_domain_info(Option<DomainInformation>)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::set_source_domain_info): <p>Specifies the <code><code>DomainInformation</code></code> for the source Elasticsearch domain.</p>
    ///   - [`destination_domain_info(DomainInformation)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::destination_domain_info) / [`set_destination_domain_info(Option<DomainInformation>)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::set_destination_domain_info): <p>Specifies the <code><code>DomainInformation</code></code> for the destination Elasticsearch domain.</p>
    ///   - [`connection_alias(impl Into<String>)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::connection_alias) / [`set_connection_alias(Option<String>)`](crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::set_connection_alias): <p>Specifies the connection alias that will be used by the customer for this connection.</p>
    /// - On success, responds with [`CreateOutboundCrossClusterSearchConnectionOutput`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput) with field(s):
    ///   - [`source_domain_info(Option<DomainInformation>)`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput::source_domain_info): <p>Specifies the <code><code>DomainInformation</code></code> for the source Elasticsearch domain.</p>
    ///   - [`destination_domain_info(Option<DomainInformation>)`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput::destination_domain_info): <p>Specifies the <code><code>DomainInformation</code></code> for the destination Elasticsearch domain.</p>
    ///   - [`connection_alias(Option<String>)`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput::connection_alias): <p>Specifies the connection alias provided during the create connection request.</p>
    ///   - [`connection_status(Option<OutboundCrossClusterSearchConnectionStatus>)`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput::connection_status): <p>Specifies the <code><code>OutboundCrossClusterSearchConnectionStatus</code></code> for the newly created connection.</p>
    ///   - [`cross_cluster_search_connection_id(Option<String>)`](crate::output::CreateOutboundCrossClusterSearchConnectionOutput::cross_cluster_search_connection_id): <p>Unique id for the created outbound connection, which is used for subsequent operations on connection.</p>
    /// - On failure, responds with [`SdkError<CreateOutboundCrossClusterSearchConnectionError>`](crate::error::CreateOutboundCrossClusterSearchConnectionError)
    pub fn create_outbound_cross_cluster_search_connection(
        &self,
    ) -> crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection {
        crate::client::fluent_builders::CreateOutboundCrossClusterSearchConnection::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`CreatePackage`](crate::client::fluent_builders::CreatePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_name(impl Into<String>)`](crate::client::fluent_builders::CreatePackage::package_name) / [`set_package_name(Option<String>)`](crate::client::fluent_builders::CreatePackage::set_package_name): <p>Unique identifier for the package.</p>
    ///   - [`package_type(PackageType)`](crate::client::fluent_builders::CreatePackage::package_type) / [`set_package_type(Option<PackageType>)`](crate::client::fluent_builders::CreatePackage::set_package_type): <p>Type of package. Currently supports only TXT-DICTIONARY.</p>
    ///   - [`package_description(impl Into<String>)`](crate::client::fluent_builders::CreatePackage::package_description) / [`set_package_description(Option<String>)`](crate::client::fluent_builders::CreatePackage::set_package_description): <p>Description of the package.</p>
    ///   - [`package_source(PackageSource)`](crate::client::fluent_builders::CreatePackage::package_source) / [`set_package_source(Option<PackageSource>)`](crate::client::fluent_builders::CreatePackage::set_package_source): <p>The customer S3 location <code>PackageSource</code> for importing the package.</p>
    /// - On success, responds with [`CreatePackageOutput`](crate::output::CreatePackageOutput) with field(s):
    ///   - [`package_details(Option<PackageDetails>)`](crate::output::CreatePackageOutput::package_details): <p>Information about the package <code>PackageDetails</code>.</p>
    /// - On failure, responds with [`SdkError<CreatePackageError>`](crate::error::CreatePackageError)
    pub fn create_package(&self) -> crate::client::fluent_builders::CreatePackage {
        crate::client::fluent_builders::CreatePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateVpcEndpoint`](crate::client::fluent_builders::CreateVpcEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_arn(impl Into<String>)`](crate::client::fluent_builders::CreateVpcEndpoint::domain_arn) / [`set_domain_arn(Option<String>)`](crate::client::fluent_builders::CreateVpcEndpoint::set_domain_arn): <p>The Amazon Resource Name (ARN) of the domain to grant access to.</p>
    ///   - [`vpc_options(VpcOptions)`](crate::client::fluent_builders::CreateVpcEndpoint::vpc_options) / [`set_vpc_options(Option<VpcOptions>)`](crate::client::fluent_builders::CreateVpcEndpoint::set_vpc_options): <p>Options to specify the subnets and security groups for the endpoint.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CreateVpcEndpoint::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CreateVpcEndpoint::set_client_token): <p>Unique, case-sensitive identifier to ensure idempotency of the request.</p>
    /// - On success, responds with [`CreateVpcEndpointOutput`](crate::output::CreateVpcEndpointOutput) with field(s):
    ///   - [`vpc_endpoint(Option<VpcEndpoint>)`](crate::output::CreateVpcEndpointOutput::vpc_endpoint): <p>Information about the newly created VPC endpoint.</p>
    /// - On failure, responds with [`SdkError<CreateVpcEndpointError>`](crate::error::CreateVpcEndpointError)
    pub fn create_vpc_endpoint(&self) -> crate::client::fluent_builders::CreateVpcEndpoint {
        crate::client::fluent_builders::CreateVpcEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteElasticsearchDomain`](crate::client::fluent_builders::DeleteElasticsearchDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DeleteElasticsearchDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DeleteElasticsearchDomain::set_domain_name): <p>The name of the Elasticsearch domain that you want to permanently delete.</p>
    /// - On success, responds with [`DeleteElasticsearchDomainOutput`](crate::output::DeleteElasticsearchDomainOutput) with field(s):
    ///   - [`domain_status(Option<ElasticsearchDomainStatus>)`](crate::output::DeleteElasticsearchDomainOutput::domain_status): <p>The status of the Elasticsearch domain being deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteElasticsearchDomainError>`](crate::error::DeleteElasticsearchDomainError)
    pub fn delete_elasticsearch_domain(
        &self,
    ) -> crate::client::fluent_builders::DeleteElasticsearchDomain {
        crate::client::fluent_builders::DeleteElasticsearchDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteElasticsearchServiceRole`](crate::client::fluent_builders::DeleteElasticsearchServiceRole) operation.
    ///
    /// - The fluent builder takes no input, just [`send`](crate::client::fluent_builders::DeleteElasticsearchServiceRole::send) it.

    /// - On success, responds with [`DeleteElasticsearchServiceRoleOutput`](crate::output::DeleteElasticsearchServiceRoleOutput)

    /// - On failure, responds with [`SdkError<DeleteElasticsearchServiceRoleError>`](crate::error::DeleteElasticsearchServiceRoleError)
    pub fn delete_elasticsearch_service_role(
        &self,
    ) -> crate::client::fluent_builders::DeleteElasticsearchServiceRole {
        crate::client::fluent_builders::DeleteElasticsearchServiceRole::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteInboundCrossClusterSearchConnection`](crate::client::fluent_builders::DeleteInboundCrossClusterSearchConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cross_cluster_search_connection_id(impl Into<String>)`](crate::client::fluent_builders::DeleteInboundCrossClusterSearchConnection::cross_cluster_search_connection_id) / [`set_cross_cluster_search_connection_id(Option<String>)`](crate::client::fluent_builders::DeleteInboundCrossClusterSearchConnection::set_cross_cluster_search_connection_id): <p>The id of the inbound connection that you want to permanently delete.</p>
    /// - On success, responds with [`DeleteInboundCrossClusterSearchConnectionOutput`](crate::output::DeleteInboundCrossClusterSearchConnectionOutput) with field(s):
    ///   - [`cross_cluster_search_connection(Option<InboundCrossClusterSearchConnection>)`](crate::output::DeleteInboundCrossClusterSearchConnectionOutput::cross_cluster_search_connection): <p>Specifies the <code><code>InboundCrossClusterSearchConnection</code></code> of deleted inbound connection. </p>
    /// - On failure, responds with [`SdkError<DeleteInboundCrossClusterSearchConnectionError>`](crate::error::DeleteInboundCrossClusterSearchConnectionError)
    pub fn delete_inbound_cross_cluster_search_connection(
        &self,
    ) -> crate::client::fluent_builders::DeleteInboundCrossClusterSearchConnection {
        crate::client::fluent_builders::DeleteInboundCrossClusterSearchConnection::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteOutboundCrossClusterSearchConnection`](crate::client::fluent_builders::DeleteOutboundCrossClusterSearchConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cross_cluster_search_connection_id(impl Into<String>)`](crate::client::fluent_builders::DeleteOutboundCrossClusterSearchConnection::cross_cluster_search_connection_id) / [`set_cross_cluster_search_connection_id(Option<String>)`](crate::client::fluent_builders::DeleteOutboundCrossClusterSearchConnection::set_cross_cluster_search_connection_id): <p>The id of the outbound connection that you want to permanently delete.</p>
    /// - On success, responds with [`DeleteOutboundCrossClusterSearchConnectionOutput`](crate::output::DeleteOutboundCrossClusterSearchConnectionOutput) with field(s):
    ///   - [`cross_cluster_search_connection(Option<OutboundCrossClusterSearchConnection>)`](crate::output::DeleteOutboundCrossClusterSearchConnectionOutput::cross_cluster_search_connection): <p>Specifies the <code><code>OutboundCrossClusterSearchConnection</code></code> of deleted outbound connection. </p>
    /// - On failure, responds with [`SdkError<DeleteOutboundCrossClusterSearchConnectionError>`](crate::error::DeleteOutboundCrossClusterSearchConnectionError)
    pub fn delete_outbound_cross_cluster_search_connection(
        &self,
    ) -> crate::client::fluent_builders::DeleteOutboundCrossClusterSearchConnection {
        crate::client::fluent_builders::DeleteOutboundCrossClusterSearchConnection::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeletePackage`](crate::client::fluent_builders::DeletePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::DeletePackage::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::DeletePackage::set_package_id): <p>Internal ID of the package that you want to delete. Use <code>DescribePackages</code> to find this value.</p>
    /// - On success, responds with [`DeletePackageOutput`](crate::output::DeletePackageOutput) with field(s):
    ///   - [`package_details(Option<PackageDetails>)`](crate::output::DeletePackageOutput::package_details): <p><code>PackageDetails</code></p>
    /// - On failure, responds with [`SdkError<DeletePackageError>`](crate::error::DeletePackageError)
    pub fn delete_package(&self) -> crate::client::fluent_builders::DeletePackage {
        crate::client::fluent_builders::DeletePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteVpcEndpoint`](crate::client::fluent_builders::DeleteVpcEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vpc_endpoint_id(impl Into<String>)`](crate::client::fluent_builders::DeleteVpcEndpoint::vpc_endpoint_id) / [`set_vpc_endpoint_id(Option<String>)`](crate::client::fluent_builders::DeleteVpcEndpoint::set_vpc_endpoint_id): <p>The unique identifier of the endpoint to be deleted.</p>
    /// - On success, responds with [`DeleteVpcEndpointOutput`](crate::output::DeleteVpcEndpointOutput) with field(s):
    ///   - [`vpc_endpoint_summary(Option<VpcEndpointSummary>)`](crate::output::DeleteVpcEndpointOutput::vpc_endpoint_summary): <p>Information about the deleted endpoint, including its current status (<code>DELETING</code> or <code>DELETE_FAILED</code>).</p>
    /// - On failure, responds with [`SdkError<DeleteVpcEndpointError>`](crate::error::DeleteVpcEndpointError)
    pub fn delete_vpc_endpoint(&self) -> crate::client::fluent_builders::DeleteVpcEndpoint {
        crate::client::fluent_builders::DeleteVpcEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDomainAutoTunes`](crate::client::fluent_builders::DescribeDomainAutoTunes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeDomainAutoTunes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DescribeDomainAutoTunes::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DescribeDomainAutoTunes::set_domain_name): <p>Specifies the domain name for which you want Auto-Tune action details.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeDomainAutoTunes::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeDomainAutoTunes::set_max_results): <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeDomainAutoTunes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeDomainAutoTunes::set_next_token): <p>NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
    /// - On success, responds with [`DescribeDomainAutoTunesOutput`](crate::output::DescribeDomainAutoTunesOutput) with field(s):
    ///   - [`auto_tunes(Option<Vec<AutoTune>>)`](crate::output::DescribeDomainAutoTunesOutput::auto_tunes): <p>Specifies the list of setting adjustments that Auto-Tune has made to the domain. See the <a href="https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/auto-tune.html" target="_blank">Developer Guide</a> for more information.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeDomainAutoTunesOutput::next_token): <p>Specifies an identifier to allow retrieval of paginated results.</p>
    /// - On failure, responds with [`SdkError<DescribeDomainAutoTunesError>`](crate::error::DescribeDomainAutoTunesError)
    pub fn describe_domain_auto_tunes(
        &self,
    ) -> crate::client::fluent_builders::DescribeDomainAutoTunes {
        crate::client::fluent_builders::DescribeDomainAutoTunes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDomainChangeProgress`](crate::client::fluent_builders::DescribeDomainChangeProgress) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DescribeDomainChangeProgress::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DescribeDomainChangeProgress::set_domain_name): <p>The domain you want to get the progress information about.</p>
    ///   - [`change_id(impl Into<String>)`](crate::client::fluent_builders::DescribeDomainChangeProgress::change_id) / [`set_change_id(Option<String>)`](crate::client::fluent_builders::DescribeDomainChangeProgress::set_change_id): <p>The specific change ID for which you want to get progress information. This is an optional parameter. If omitted, the service returns information about the most recent configuration change. </p>
    /// - On success, responds with [`DescribeDomainChangeProgressOutput`](crate::output::DescribeDomainChangeProgressOutput) with field(s):
    ///   - [`change_progress_status(Option<ChangeProgressStatusDetails>)`](crate::output::DescribeDomainChangeProgressOutput::change_progress_status): <p>Progress information for the configuration change that is requested in the <code>DescribeDomainChangeProgress</code> request. </p>
    /// - On failure, responds with [`SdkError<DescribeDomainChangeProgressError>`](crate::error::DescribeDomainChangeProgressError)
    pub fn describe_domain_change_progress(
        &self,
    ) -> crate::client::fluent_builders::DescribeDomainChangeProgress {
        crate::client::fluent_builders::DescribeDomainChangeProgress::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeElasticsearchDomain`](crate::client::fluent_builders::DescribeElasticsearchDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DescribeElasticsearchDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DescribeElasticsearchDomain::set_domain_name): <p>The name of the Elasticsearch domain for which you want information.</p>
    /// - On success, responds with [`DescribeElasticsearchDomainOutput`](crate::output::DescribeElasticsearchDomainOutput) with field(s):
    ///   - [`domain_status(Option<ElasticsearchDomainStatus>)`](crate::output::DescribeElasticsearchDomainOutput::domain_status): <p>The current status of the Elasticsearch domain.</p>
    /// - On failure, responds with [`SdkError<DescribeElasticsearchDomainError>`](crate::error::DescribeElasticsearchDomainError)
    pub fn describe_elasticsearch_domain(
        &self,
    ) -> crate::client::fluent_builders::DescribeElasticsearchDomain {
        crate::client::fluent_builders::DescribeElasticsearchDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeElasticsearchDomainConfig`](crate::client::fluent_builders::DescribeElasticsearchDomainConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DescribeElasticsearchDomainConfig::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DescribeElasticsearchDomainConfig::set_domain_name): <p>The Elasticsearch domain that you want to get information about.</p>
    /// - On success, responds with [`DescribeElasticsearchDomainConfigOutput`](crate::output::DescribeElasticsearchDomainConfigOutput) with field(s):
    ///   - [`domain_config(Option<ElasticsearchDomainConfig>)`](crate::output::DescribeElasticsearchDomainConfigOutput::domain_config): <p>The configuration information of the domain requested in the <code>DescribeElasticsearchDomainConfig</code> request.</p>
    /// - On failure, responds with [`SdkError<DescribeElasticsearchDomainConfigError>`](crate::error::DescribeElasticsearchDomainConfigError)
    pub fn describe_elasticsearch_domain_config(
        &self,
    ) -> crate::client::fluent_builders::DescribeElasticsearchDomainConfig {
        crate::client::fluent_builders::DescribeElasticsearchDomainConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeElasticsearchDomains`](crate::client::fluent_builders::DescribeElasticsearchDomains) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_names(Vec<String>)`](crate::client::fluent_builders::DescribeElasticsearchDomains::domain_names) / [`set_domain_names(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeElasticsearchDomains::set_domain_names): <p>The Elasticsearch domains for which you want information.</p>
    /// - On success, responds with [`DescribeElasticsearchDomainsOutput`](crate::output::DescribeElasticsearchDomainsOutput) with field(s):
    ///   - [`domain_status_list(Option<Vec<ElasticsearchDomainStatus>>)`](crate::output::DescribeElasticsearchDomainsOutput::domain_status_list): <p>The status of the domains requested in the <code>DescribeElasticsearchDomains</code> request.</p>
    /// - On failure, responds with [`SdkError<DescribeElasticsearchDomainsError>`](crate::error::DescribeElasticsearchDomainsError)
    pub fn describe_elasticsearch_domains(
        &self,
    ) -> crate::client::fluent_builders::DescribeElasticsearchDomains {
        crate::client::fluent_builders::DescribeElasticsearchDomains::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeElasticsearchInstanceTypeLimits`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::set_domain_name): <p> DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch <code> <code>Limits</code> </code> for existing domain. </p>
    ///   - [`instance_type(EsPartitionInstanceType)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::instance_type) / [`set_instance_type(Option<EsPartitionInstanceType>)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::set_instance_type): <p> The instance type for an Elasticsearch cluster for which Elasticsearch <code> <code>Limits</code> </code> are needed. </p>
    ///   - [`elasticsearch_version(impl Into<String>)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::elasticsearch_version) / [`set_elasticsearch_version(Option<String>)`](crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::set_elasticsearch_version): <p> Version of Elasticsearch for which <code> <code>Limits</code> </code> are needed. </p>
    /// - On success, responds with [`DescribeElasticsearchInstanceTypeLimitsOutput`](crate::output::DescribeElasticsearchInstanceTypeLimitsOutput) with field(s):
    ///   - [`limits_by_role(Option<HashMap<String, Limits>>)`](crate::output::DescribeElasticsearchInstanceTypeLimitsOutput::limits_by_role): <p> Map of Role of the Instance and Limits that are applicable. Role performed by given Instance in Elasticsearch can be one of the following: </p> <ul>   <li>data: If the given InstanceType is used as data node</li>   <li>master: If the given InstanceType is used as master node</li>   <li>ultra_warm: If the given InstanceType is used as warm node</li>  </ul>  <p></p>
    /// - On failure, responds with [`SdkError<DescribeElasticsearchInstanceTypeLimitsError>`](crate::error::DescribeElasticsearchInstanceTypeLimitsError)
    pub fn describe_elasticsearch_instance_type_limits(
        &self,
    ) -> crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits {
        crate::client::fluent_builders::DescribeElasticsearchInstanceTypeLimits::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeInboundCrossClusterSearchConnections`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::set_filters): <p> A list of filters used to match properties for inbound cross-cluster search connection. Available <code><code>Filter</code></code> names for this operation are: </p> <ul>   <li>cross-cluster-search-connection-id</li>   <li>source-domain-info.domain-name</li>   <li>source-domain-info.owner-id</li>   <li>source-domain-info.region</li>   <li>destination-domain-info.domain-name</li>  </ul>  <p></p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::set_max_results): <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::set_next_token): <p> NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
    /// - On success, responds with [`DescribeInboundCrossClusterSearchConnectionsOutput`](crate::output::DescribeInboundCrossClusterSearchConnectionsOutput) with field(s):
    ///   - [`cross_cluster_search_connections(Option<Vec<InboundCrossClusterSearchConnection>>)`](crate::output::DescribeInboundCrossClusterSearchConnectionsOutput::cross_cluster_search_connections): <p>Consists of list of <code><code>InboundCrossClusterSearchConnection</code></code> matching the specified filter criteria.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeInboundCrossClusterSearchConnectionsOutput::next_token): <p>If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results. </p>
    /// - On failure, responds with [`SdkError<DescribeInboundCrossClusterSearchConnectionsError>`](crate::error::DescribeInboundCrossClusterSearchConnectionsError)
    pub fn describe_inbound_cross_cluster_search_connections(
        &self,
    ) -> crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections {
        crate::client::fluent_builders::DescribeInboundCrossClusterSearchConnections::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeOutboundCrossClusterSearchConnections`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::set_filters): <p> A list of filters used to match properties for outbound cross-cluster search connection. Available <code><code>Filter</code></code> names for this operation are: </p> <ul>   <li>cross-cluster-search-connection-id</li>   <li>destination-domain-info.domain-name</li>   <li>destination-domain-info.owner-id</li>   <li>destination-domain-info.region</li>   <li>source-domain-info.domain-name</li>  </ul>  <p></p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::set_max_results): <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::set_next_token): <p> NextToken is sent in case the earlier API call results contain the NextToken. It is used for pagination.</p>
    /// - On success, responds with [`DescribeOutboundCrossClusterSearchConnectionsOutput`](crate::output::DescribeOutboundCrossClusterSearchConnectionsOutput) with field(s):
    ///   - [`cross_cluster_search_connections(Option<Vec<OutboundCrossClusterSearchConnection>>)`](crate::output::DescribeOutboundCrossClusterSearchConnectionsOutput::cross_cluster_search_connections): <p>Consists of list of <code><code>OutboundCrossClusterSearchConnection</code></code> matching the specified filter criteria.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeOutboundCrossClusterSearchConnectionsOutput::next_token): <p>If more results are available and NextToken is present, make the next request to the same API with the received NextToken to paginate the remaining results. </p>
    /// - On failure, responds with [`SdkError<DescribeOutboundCrossClusterSearchConnectionsError>`](crate::error::DescribeOutboundCrossClusterSearchConnectionsError)
    pub fn describe_outbound_cross_cluster_search_connections(
        &self,
    ) -> crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections {
        crate::client::fluent_builders::DescribeOutboundCrossClusterSearchConnections::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribePackages`](crate::client::fluent_builders::DescribePackages) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribePackages::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filters(Vec<DescribePackagesFilter>)`](crate::client::fluent_builders::DescribePackages::filters) / [`set_filters(Option<Vec<DescribePackagesFilter>>)`](crate::client::fluent_builders::DescribePackages::set_filters): <p>Only returns packages that match the <code>DescribePackagesFilterList</code> values.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribePackages::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribePackages::set_max_results): <p>Limits results to a maximum number of packages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribePackages::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribePackages::set_next_token): <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
    /// - On success, responds with [`DescribePackagesOutput`](crate::output::DescribePackagesOutput) with field(s):
    ///   - [`package_details_list(Option<Vec<PackageDetails>>)`](crate::output::DescribePackagesOutput::package_details_list): <p>List of <code>PackageDetails</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribePackagesOutput::next_token): (undocumented)
    /// - On failure, responds with [`SdkError<DescribePackagesError>`](crate::error::DescribePackagesError)
    pub fn describe_packages(&self) -> crate::client::fluent_builders::DescribePackages {
        crate::client::fluent_builders::DescribePackages::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeReservedElasticsearchInstanceOfferings`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reserved_elasticsearch_instance_offering_id(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::reserved_elasticsearch_instance_offering_id) / [`set_reserved_elasticsearch_instance_offering_id(Option<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::set_reserved_elasticsearch_instance_offering_id): <p>The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::set_max_results): <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::set_next_token): <p>NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.</p>
    /// - On success, responds with [`DescribeReservedElasticsearchInstanceOfferingsOutput`](crate::output::DescribeReservedElasticsearchInstanceOfferingsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeReservedElasticsearchInstanceOfferingsOutput::next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    ///   - [`reserved_elasticsearch_instance_offerings(Option<Vec<ReservedElasticsearchInstanceOffering>>)`](crate::output::DescribeReservedElasticsearchInstanceOfferingsOutput::reserved_elasticsearch_instance_offerings): <p>List of reserved Elasticsearch instance offerings</p>
    /// - On failure, responds with [`SdkError<DescribeReservedElasticsearchInstanceOfferingsError>`](crate::error::DescribeReservedElasticsearchInstanceOfferingsError)
    pub fn describe_reserved_elasticsearch_instance_offerings(
        &self,
    ) -> crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings {
        crate::client::fluent_builders::DescribeReservedElasticsearchInstanceOfferings::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeReservedElasticsearchInstances`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`reserved_elasticsearch_instance_id(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::reserved_elasticsearch_instance_id) / [`set_reserved_elasticsearch_instance_id(Option<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::set_reserved_elasticsearch_instance_id): <p>The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::set_max_results): <p>Set this value to limit the number of results returned. If not specified, defaults to 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeReservedElasticsearchInstances::set_next_token): <p>NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.</p>
    /// - On success, responds with [`DescribeReservedElasticsearchInstancesOutput`](crate::output::DescribeReservedElasticsearchInstancesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::DescribeReservedElasticsearchInstancesOutput::next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    ///   - [`reserved_elasticsearch_instances(Option<Vec<ReservedElasticsearchInstance>>)`](crate::output::DescribeReservedElasticsearchInstancesOutput::reserved_elasticsearch_instances): <p>List of reserved Elasticsearch instances.</p>
    /// - On failure, responds with [`SdkError<DescribeReservedElasticsearchInstancesError>`](crate::error::DescribeReservedElasticsearchInstancesError)
    pub fn describe_reserved_elasticsearch_instances(
        &self,
    ) -> crate::client::fluent_builders::DescribeReservedElasticsearchInstances {
        crate::client::fluent_builders::DescribeReservedElasticsearchInstances::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeVpcEndpoints`](crate::client::fluent_builders::DescribeVpcEndpoints) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vpc_endpoint_ids(Vec<String>)`](crate::client::fluent_builders::DescribeVpcEndpoints::vpc_endpoint_ids) / [`set_vpc_endpoint_ids(Option<Vec<String>>)`](crate::client::fluent_builders::DescribeVpcEndpoints::set_vpc_endpoint_ids): <p>The unique identifiers of the endpoints to get information about.</p>
    /// - On success, responds with [`DescribeVpcEndpointsOutput`](crate::output::DescribeVpcEndpointsOutput) with field(s):
    ///   - [`vpc_endpoints(Option<Vec<VpcEndpoint>>)`](crate::output::DescribeVpcEndpointsOutput::vpc_endpoints): <p>Information about each requested VPC endpoint.</p>
    ///   - [`vpc_endpoint_errors(Option<Vec<VpcEndpointError>>)`](crate::output::DescribeVpcEndpointsOutput::vpc_endpoint_errors): <p>Any errors associated with the request.</p>
    /// - On failure, responds with [`SdkError<DescribeVpcEndpointsError>`](crate::error::DescribeVpcEndpointsError)
    pub fn describe_vpc_endpoints(&self) -> crate::client::fluent_builders::DescribeVpcEndpoints {
        crate::client::fluent_builders::DescribeVpcEndpoints::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DissociatePackage`](crate::client::fluent_builders::DissociatePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::DissociatePackage::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::DissociatePackage::set_package_id): <p>Internal ID of the package that you want to associate with a domain. Use <code>DescribePackages</code> to find this value.</p>
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::DissociatePackage::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::DissociatePackage::set_domain_name): <p>Name of the domain that you want to associate the package with.</p>
    /// - On success, responds with [`DissociatePackageOutput`](crate::output::DissociatePackageOutput) with field(s):
    ///   - [`domain_package_details(Option<DomainPackageDetails>)`](crate::output::DissociatePackageOutput::domain_package_details): <p><code>DomainPackageDetails</code></p>
    /// - On failure, responds with [`SdkError<DissociatePackageError>`](crate::error::DissociatePackageError)
    pub fn dissociate_package(&self) -> crate::client::fluent_builders::DissociatePackage {
        crate::client::fluent_builders::DissociatePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCompatibleElasticsearchVersions`](crate::client::fluent_builders::GetCompatibleElasticsearchVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::GetCompatibleElasticsearchVersions::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::GetCompatibleElasticsearchVersions::set_domain_name): <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    /// - On success, responds with [`GetCompatibleElasticsearchVersionsOutput`](crate::output::GetCompatibleElasticsearchVersionsOutput) with field(s):
    ///   - [`compatible_elasticsearch_versions(Option<Vec<CompatibleVersionsMap>>)`](crate::output::GetCompatibleElasticsearchVersionsOutput::compatible_elasticsearch_versions): <p> A map of compatible Elasticsearch versions returned as part of the <code> <code>GetCompatibleElasticsearchVersions</code> </code> operation. </p>
    /// - On failure, responds with [`SdkError<GetCompatibleElasticsearchVersionsError>`](crate::error::GetCompatibleElasticsearchVersionsError)
    pub fn get_compatible_elasticsearch_versions(
        &self,
    ) -> crate::client::fluent_builders::GetCompatibleElasticsearchVersions {
        crate::client::fluent_builders::GetCompatibleElasticsearchVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPackageVersionHistory`](crate::client::fluent_builders::GetPackageVersionHistory) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetPackageVersionHistory::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionHistory::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::GetPackageVersionHistory::set_package_id): <p>Returns an audit history of versions of the package.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetPackageVersionHistory::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetPackageVersionHistory::set_max_results): <p>Limits results to a maximum number of versions.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionHistory::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetPackageVersionHistory::set_next_token): <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
    /// - On success, responds with [`GetPackageVersionHistoryOutput`](crate::output::GetPackageVersionHistoryOutput) with field(s):
    ///   - [`package_id(Option<String>)`](crate::output::GetPackageVersionHistoryOutput::package_id): (undocumented)
    ///   - [`package_version_history_list(Option<Vec<PackageVersionHistory>>)`](crate::output::GetPackageVersionHistoryOutput::package_version_history_list): <p>List of <code>PackageVersionHistory</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::GetPackageVersionHistoryOutput::next_token): (undocumented)
    /// - On failure, responds with [`SdkError<GetPackageVersionHistoryError>`](crate::error::GetPackageVersionHistoryError)
    pub fn get_package_version_history(
        &self,
    ) -> crate::client::fluent_builders::GetPackageVersionHistory {
        crate::client::fluent_builders::GetPackageVersionHistory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetUpgradeHistory`](crate::client::fluent_builders::GetUpgradeHistory) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::GetUpgradeHistory::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::GetUpgradeHistory::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::GetUpgradeHistory::set_domain_name): <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::GetUpgradeHistory::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::GetUpgradeHistory::set_max_results): <p> Set this value to limit the number of results returned. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::GetUpgradeHistory::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::GetUpgradeHistory::set_next_token): <p> Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results. </p>
    /// - On success, responds with [`GetUpgradeHistoryOutput`](crate::output::GetUpgradeHistoryOutput) with field(s):
    ///   - [`upgrade_histories(Option<Vec<UpgradeHistory>>)`](crate::output::GetUpgradeHistoryOutput::upgrade_histories): <p> A list of <code> <code>UpgradeHistory</code> </code> objects corresponding to each Upgrade or Upgrade Eligibility Check performed on a domain returned as part of <code> <code>GetUpgradeHistoryResponse</code> </code> object. </p>
    ///   - [`next_token(Option<String>)`](crate::output::GetUpgradeHistoryOutput::next_token): <p>Pagination token that needs to be supplied to the next call to get the next page of results</p>
    /// - On failure, responds with [`SdkError<GetUpgradeHistoryError>`](crate::error::GetUpgradeHistoryError)
    pub fn get_upgrade_history(&self) -> crate::client::fluent_builders::GetUpgradeHistory {
        crate::client::fluent_builders::GetUpgradeHistory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetUpgradeStatus`](crate::client::fluent_builders::GetUpgradeStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::GetUpgradeStatus::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::GetUpgradeStatus::set_domain_name): <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    /// - On success, responds with [`GetUpgradeStatusOutput`](crate::output::GetUpgradeStatusOutput) with field(s):
    ///   - [`upgrade_step(Option<UpgradeStep>)`](crate::output::GetUpgradeStatusOutput::upgrade_step): <p> Represents one of 3 steps that an Upgrade or Upgrade Eligibility Check does through: </p> <ul>   <li>PreUpgradeCheck</li>   <li>Snapshot</li>   <li>Upgrade</li>  </ul>  <p></p>
    ///   - [`step_status(Option<UpgradeStatus>)`](crate::output::GetUpgradeStatusOutput::step_status): <p> One of 4 statuses that a step can go through returned as part of the <code> <code>GetUpgradeStatusResponse</code> </code> object. The status can take one of the following values: </p> <ul>   <li>In Progress</li>   <li>Succeeded</li>   <li>Succeeded with Issues</li>   <li>Failed</li>  </ul>  <p></p>
    ///   - [`upgrade_name(Option<String>)`](crate::output::GetUpgradeStatusOutput::upgrade_name): <p>A string that describes the update briefly</p>
    /// - On failure, responds with [`SdkError<GetUpgradeStatusError>`](crate::error::GetUpgradeStatusError)
    pub fn get_upgrade_status(&self) -> crate::client::fluent_builders::GetUpgradeStatus {
        crate::client::fluent_builders::GetUpgradeStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomainNames`](crate::client::fluent_builders::ListDomainNames) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`engine_type(EngineType)`](crate::client::fluent_builders::ListDomainNames::engine_type) / [`set_engine_type(Option<EngineType>)`](crate::client::fluent_builders::ListDomainNames::set_engine_type): <p> Optional parameter to filter the output by domain engine type. Acceptable values are 'Elasticsearch' and 'OpenSearch'. </p>
    /// - On success, responds with [`ListDomainNamesOutput`](crate::output::ListDomainNamesOutput) with field(s):
    ///   - [`domain_names(Option<Vec<DomainInfo>>)`](crate::output::ListDomainNamesOutput::domain_names): <p>List of domain names and respective engine types.</p>
    /// - On failure, responds with [`SdkError<ListDomainNamesError>`](crate::error::ListDomainNamesError)
    pub fn list_domain_names(&self) -> crate::client::fluent_builders::ListDomainNames {
        crate::client::fluent_builders::ListDomainNames::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomainsForPackage`](crate::client::fluent_builders::ListDomainsForPackage) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDomainsForPackage::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::ListDomainsForPackage::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::ListDomainsForPackage::set_package_id): <p>The package for which to list domains.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDomainsForPackage::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListDomainsForPackage::set_max_results): <p>Limits results to a maximum number of domains.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDomainsForPackage::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDomainsForPackage::set_next_token): <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
    /// - On success, responds with [`ListDomainsForPackageOutput`](crate::output::ListDomainsForPackageOutput) with field(s):
    ///   - [`domain_package_details_list(Option<Vec<DomainPackageDetails>>)`](crate::output::ListDomainsForPackageOutput::domain_package_details_list): <p>List of <code>DomainPackageDetails</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDomainsForPackageOutput::next_token): (undocumented)
    /// - On failure, responds with [`SdkError<ListDomainsForPackageError>`](crate::error::ListDomainsForPackageError)
    pub fn list_domains_for_package(
        &self,
    ) -> crate::client::fluent_builders::ListDomainsForPackage {
        crate::client::fluent_builders::ListDomainsForPackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListElasticsearchInstanceTypes`](crate::client::fluent_builders::ListElasticsearchInstanceTypes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`elasticsearch_version(impl Into<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::elasticsearch_version) / [`set_elasticsearch_version(Option<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::set_elasticsearch_version): <p>Version of Elasticsearch for which list of supported elasticsearch instance types are needed. </p>
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::set_domain_name): <p>DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::set_max_results): <p> Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListElasticsearchInstanceTypes::set_next_token): <p>NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. </p>
    /// - On success, responds with [`ListElasticsearchInstanceTypesOutput`](crate::output::ListElasticsearchInstanceTypesOutput) with field(s):
    ///   - [`elasticsearch_instance_types(Option<Vec<EsPartitionInstanceType>>)`](crate::output::ListElasticsearchInstanceTypesOutput::elasticsearch_instance_types): <p> List of instance types supported by Amazon Elasticsearch service for given <code> <code>ElasticsearchVersion</code> </code> </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListElasticsearchInstanceTypesOutput::next_token): <p>In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results. </p>
    /// - On failure, responds with [`SdkError<ListElasticsearchInstanceTypesError>`](crate::error::ListElasticsearchInstanceTypesError)
    pub fn list_elasticsearch_instance_types(
        &self,
    ) -> crate::client::fluent_builders::ListElasticsearchInstanceTypes {
        crate::client::fluent_builders::ListElasticsearchInstanceTypes::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListElasticsearchVersions`](crate::client::fluent_builders::ListElasticsearchVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListElasticsearchVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListElasticsearchVersions::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListElasticsearchVersions::set_max_results): <p> Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListElasticsearchVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListElasticsearchVersions::set_next_token): <p> Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results. </p>
    /// - On success, responds with [`ListElasticsearchVersionsOutput`](crate::output::ListElasticsearchVersionsOutput) with field(s):
    ///   - [`elasticsearch_versions(Option<Vec<String>>)`](crate::output::ListElasticsearchVersionsOutput::elasticsearch_versions): <p>List of supported elastic search versions. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListElasticsearchVersionsOutput::next_token): <p> Paginated APIs accepts NextToken input to returns next page results and provides a NextToken output in the response which can be used by the client to retrieve more results. </p>
    /// - On failure, responds with [`SdkError<ListElasticsearchVersionsError>`](crate::error::ListElasticsearchVersionsError)
    pub fn list_elasticsearch_versions(
        &self,
    ) -> crate::client::fluent_builders::ListElasticsearchVersions {
        crate::client::fluent_builders::ListElasticsearchVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPackagesForDomain`](crate::client::fluent_builders::ListPackagesForDomain) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPackagesForDomain::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::ListPackagesForDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::ListPackagesForDomain::set_domain_name): <p>The name of the domain for which you want to list associated packages.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPackagesForDomain::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListPackagesForDomain::set_max_results): <p>Limits results to a maximum number of packages.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPackagesForDomain::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPackagesForDomain::set_next_token): <p>Used for pagination. Only necessary if a previous API call includes a non-null NextToken value. If provided, returns results for the next page.</p>
    /// - On success, responds with [`ListPackagesForDomainOutput`](crate::output::ListPackagesForDomainOutput) with field(s):
    ///   - [`domain_package_details_list(Option<Vec<DomainPackageDetails>>)`](crate::output::ListPackagesForDomainOutput::domain_package_details_list): <p>List of <code>DomainPackageDetails</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPackagesForDomainOutput::next_token): <p>Pagination token that needs to be supplied to the next call to get the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListPackagesForDomainError>`](crate::error::ListPackagesForDomainError)
    pub fn list_packages_for_domain(
        &self,
    ) -> crate::client::fluent_builders::ListPackagesForDomain {
        crate::client::fluent_builders::ListPackagesForDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTags`](crate::client::fluent_builders::ListTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::ListTags::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::ListTags::set_arn): <p> Specify the <code>ARN</code> for the Elasticsearch domain to which the tags are attached that you want to view.</p>
    /// - On success, responds with [`ListTagsOutput`](crate::output::ListTagsOutput) with field(s):
    ///   - [`tag_list(Option<Vec<Tag>>)`](crate::output::ListTagsOutput::tag_list): <p> List of <code>Tag</code> for the requested Elasticsearch domain.</p>
    /// - On failure, responds with [`SdkError<ListTagsError>`](crate::error::ListTagsError)
    pub fn list_tags(&self) -> crate::client::fluent_builders::ListTags {
        crate::client::fluent_builders::ListTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVpcEndpointAccess`](crate::client::fluent_builders::ListVpcEndpointAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::ListVpcEndpointAccess::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::ListVpcEndpointAccess::set_domain_name): <p>The name of the OpenSearch Service domain to retrieve access information for.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVpcEndpointAccess::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVpcEndpointAccess::set_next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    /// - On success, responds with [`ListVpcEndpointAccessOutput`](crate::output::ListVpcEndpointAccessOutput) with field(s):
    ///   - [`authorized_principal_list(Option<Vec<AuthorizedPrincipal>>)`](crate::output::ListVpcEndpointAccessOutput::authorized_principal_list): <p>List of <code>AuthorizedPrincipal</code> describing the details of the permissions to manage VPC endpoints against the specified domain.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVpcEndpointAccessOutput::next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    /// - On failure, responds with [`SdkError<ListVpcEndpointAccessError>`](crate::error::ListVpcEndpointAccessError)
    pub fn list_vpc_endpoint_access(
        &self,
    ) -> crate::client::fluent_builders::ListVpcEndpointAccess {
        crate::client::fluent_builders::ListVpcEndpointAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVpcEndpoints`](crate::client::fluent_builders::ListVpcEndpoints) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVpcEndpoints::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVpcEndpoints::set_next_token): <p>Identifier to allow retrieval of paginated results.</p>
    /// - On success, responds with [`ListVpcEndpointsOutput`](crate::output::ListVpcEndpointsOutput) with field(s):
    ///   - [`vpc_endpoint_summary_list(Option<Vec<VpcEndpointSummary>>)`](crate::output::ListVpcEndpointsOutput::vpc_endpoint_summary_list): <p>Information about each endpoint.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVpcEndpointsOutput::next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    /// - On failure, responds with [`SdkError<ListVpcEndpointsError>`](crate::error::ListVpcEndpointsError)
    pub fn list_vpc_endpoints(&self) -> crate::client::fluent_builders::ListVpcEndpoints {
        crate::client::fluent_builders::ListVpcEndpoints::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListVpcEndpointsForDomain`](crate::client::fluent_builders::ListVpcEndpointsForDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::ListVpcEndpointsForDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::ListVpcEndpointsForDomain::set_domain_name): <p>Name of the ElasticSearch domain whose VPC endpoints are to be listed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListVpcEndpointsForDomain::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListVpcEndpointsForDomain::set_next_token): <p>Provides an identifier to allow retrieval of paginated results.</p>
    /// - On success, responds with [`ListVpcEndpointsForDomainOutput`](crate::output::ListVpcEndpointsForDomainOutput) with field(s):
    ///   - [`vpc_endpoint_summary_list(Option<Vec<VpcEndpointSummary>>)`](crate::output::ListVpcEndpointsForDomainOutput::vpc_endpoint_summary_list): <p>Provides list of <code>VpcEndpointSummary</code> summarizing details of the VPC endpoints.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListVpcEndpointsForDomainOutput::next_token): <p>Information about each endpoint associated with the domain.</p>
    /// - On failure, responds with [`SdkError<ListVpcEndpointsForDomainError>`](crate::error::ListVpcEndpointsForDomainError)
    pub fn list_vpc_endpoints_for_domain(
        &self,
    ) -> crate::client::fluent_builders::ListVpcEndpointsForDomain {
        crate::client::fluent_builders::ListVpcEndpointsForDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PurchaseReservedElasticsearchInstanceOffering`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reserved_elasticsearch_instance_offering_id(impl Into<String>)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::reserved_elasticsearch_instance_offering_id) / [`set_reserved_elasticsearch_instance_offering_id(Option<String>)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::set_reserved_elasticsearch_instance_offering_id): <p>The ID of the reserved Elasticsearch instance offering to purchase.</p>
    ///   - [`reservation_name(impl Into<String>)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::reservation_name) / [`set_reservation_name(Option<String>)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::set_reservation_name): <p>A customer-specified identifier to track this reservation.</p>
    ///   - [`instance_count(i32)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::instance_count) / [`set_instance_count(i32)`](crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::set_instance_count): <p>The number of Elasticsearch instances to reserve.</p>
    /// - On success, responds with [`PurchaseReservedElasticsearchInstanceOfferingOutput`](crate::output::PurchaseReservedElasticsearchInstanceOfferingOutput) with field(s):
    ///   - [`reserved_elasticsearch_instance_id(Option<String>)`](crate::output::PurchaseReservedElasticsearchInstanceOfferingOutput::reserved_elasticsearch_instance_id): <p>Details of the reserved Elasticsearch instance which was purchased.</p>
    ///   - [`reservation_name(Option<String>)`](crate::output::PurchaseReservedElasticsearchInstanceOfferingOutput::reservation_name): <p>The customer-specified identifier used to track this reservation.</p>
    /// - On failure, responds with [`SdkError<PurchaseReservedElasticsearchInstanceOfferingError>`](crate::error::PurchaseReservedElasticsearchInstanceOfferingError)
    pub fn purchase_reserved_elasticsearch_instance_offering(
        &self,
    ) -> crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering {
        crate::client::fluent_builders::PurchaseReservedElasticsearchInstanceOffering::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`RejectInboundCrossClusterSearchConnection`](crate::client::fluent_builders::RejectInboundCrossClusterSearchConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cross_cluster_search_connection_id(impl Into<String>)`](crate::client::fluent_builders::RejectInboundCrossClusterSearchConnection::cross_cluster_search_connection_id) / [`set_cross_cluster_search_connection_id(Option<String>)`](crate::client::fluent_builders::RejectInboundCrossClusterSearchConnection::set_cross_cluster_search_connection_id): <p>The id of the inbound connection that you want to reject.</p>
    /// - On success, responds with [`RejectInboundCrossClusterSearchConnectionOutput`](crate::output::RejectInboundCrossClusterSearchConnectionOutput) with field(s):
    ///   - [`cross_cluster_search_connection(Option<InboundCrossClusterSearchConnection>)`](crate::output::RejectInboundCrossClusterSearchConnectionOutput::cross_cluster_search_connection): <p>Specifies the <code><code>InboundCrossClusterSearchConnection</code></code> of rejected inbound connection. </p>
    /// - On failure, responds with [`SdkError<RejectInboundCrossClusterSearchConnectionError>`](crate::error::RejectInboundCrossClusterSearchConnectionError)
    pub fn reject_inbound_cross_cluster_search_connection(
        &self,
    ) -> crate::client::fluent_builders::RejectInboundCrossClusterSearchConnection {
        crate::client::fluent_builders::RejectInboundCrossClusterSearchConnection::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`RemoveTags`](crate::client::fluent_builders::RemoveTags) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`arn(impl Into<String>)`](crate::client::fluent_builders::RemoveTags::arn) / [`set_arn(Option<String>)`](crate::client::fluent_builders::RemoveTags::set_arn): <p>Specifies the <code>ARN</code> for the Elasticsearch domain from which you want to delete the specified tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::RemoveTags::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::RemoveTags::set_tag_keys): <p>Specifies the <code>TagKey</code> list which you want to remove from the Elasticsearch domain.</p>
    /// - On success, responds with [`RemoveTagsOutput`](crate::output::RemoveTagsOutput)

    /// - On failure, responds with [`SdkError<RemoveTagsError>`](crate::error::RemoveTagsError)
    pub fn remove_tags(&self) -> crate::client::fluent_builders::RemoveTags {
        crate::client::fluent_builders::RemoveTags::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RevokeVpcEndpointAccess`](crate::client::fluent_builders::RevokeVpcEndpointAccess) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::RevokeVpcEndpointAccess::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::RevokeVpcEndpointAccess::set_domain_name): <p>The name of the OpenSearch Service domain.</p>
    ///   - [`account(impl Into<String>)`](crate::client::fluent_builders::RevokeVpcEndpointAccess::account) / [`set_account(Option<String>)`](crate::client::fluent_builders::RevokeVpcEndpointAccess::set_account): <p>The account ID to revoke access from.</p>
    /// - On success, responds with [`RevokeVpcEndpointAccessOutput`](crate::output::RevokeVpcEndpointAccessOutput)

    /// - On failure, responds with [`SdkError<RevokeVpcEndpointAccessError>`](crate::error::RevokeVpcEndpointAccessError)
    pub fn revoke_vpc_endpoint_access(
        &self,
    ) -> crate::client::fluent_builders::RevokeVpcEndpointAccess {
        crate::client::fluent_builders::RevokeVpcEndpointAccess::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartElasticsearchServiceSoftwareUpdate`](crate::client::fluent_builders::StartElasticsearchServiceSoftwareUpdate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::StartElasticsearchServiceSoftwareUpdate::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::StartElasticsearchServiceSoftwareUpdate::set_domain_name): <p>The name of the domain that you want to update to the latest service software.</p>
    /// - On success, responds with [`StartElasticsearchServiceSoftwareUpdateOutput`](crate::output::StartElasticsearchServiceSoftwareUpdateOutput) with field(s):
    ///   - [`service_software_options(Option<ServiceSoftwareOptions>)`](crate::output::StartElasticsearchServiceSoftwareUpdateOutput::service_software_options): <p>The current status of the Elasticsearch service software update.</p>
    /// - On failure, responds with [`SdkError<StartElasticsearchServiceSoftwareUpdateError>`](crate::error::StartElasticsearchServiceSoftwareUpdateError)
    pub fn start_elasticsearch_service_software_update(
        &self,
    ) -> crate::client::fluent_builders::StartElasticsearchServiceSoftwareUpdate {
        crate::client::fluent_builders::StartElasticsearchServiceSoftwareUpdate::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`UpdateElasticsearchDomainConfig`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_domain_name): <p>The name of the Elasticsearch domain that you are updating. </p>
    ///   - [`elasticsearch_cluster_config(ElasticsearchClusterConfig)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::elasticsearch_cluster_config) / [`set_elasticsearch_cluster_config(Option<ElasticsearchClusterConfig>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_elasticsearch_cluster_config): <p>The type and number of instances to instantiate for the domain cluster.</p>
    ///   - [`ebs_options(EbsOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::ebs_options) / [`set_ebs_options(Option<EbsOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_ebs_options): <p>Specify the type and size of the EBS volume that you want to use. </p>
    ///   - [`snapshot_options(SnapshotOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::snapshot_options) / [`set_snapshot_options(Option<SnapshotOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_snapshot_options): <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours. </p>
    ///   - [`vpc_options(VpcOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::vpc_options) / [`set_vpc_options(Option<VpcOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_vpc_options): <p>Options to specify the subnets and security groups for VPC endpoint. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-vpc.html#es-creating-vpc" target="_blank">Creating a VPC</a> in <i>VPC Endpoints for Amazon Elasticsearch Service Domains</i></p>
    ///   - [`cognito_options(CognitoOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::cognito_options) / [`set_cognito_options(Option<CognitoOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_cognito_options): <p>Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-cognito-auth.html" target="_blank">Amazon Cognito Authentication for Kibana</a>.</p>
    ///   - [`advanced_options(HashMap<String, String>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::advanced_options) / [`set_advanced_options(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_advanced_options): <p>Modifies the advanced option to allow references to indices in an HTTP request body. Must be <code>false</code> when configuring access to individual sub-resources. By default, the value is <code>true</code>. See <a href="http://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options" target="_blank">Configuration Advanced Options</a> for more information.</p>
    ///   - [`access_policies(impl Into<String>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::access_policies) / [`set_access_policies(Option<String>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_access_policies): <p>IAM access policy as a JSON-formatted string.</p>
    ///   - [`log_publishing_options(HashMap<LogType, LogPublishingOption>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::log_publishing_options) / [`set_log_publishing_options(Option<HashMap<LogType, LogPublishingOption>>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_log_publishing_options): <p>Map of <code>LogType</code> and <code>LogPublishingOption</code>, each containing options to publish a given type of Elasticsearch log.</p>
    ///   - [`domain_endpoint_options(DomainEndpointOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::domain_endpoint_options) / [`set_domain_endpoint_options(Option<DomainEndpointOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_domain_endpoint_options): <p>Options to specify configuration that will be applied to the domain endpoint.</p>
    ///   - [`advanced_security_options(AdvancedSecurityOptionsInput)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::advanced_security_options) / [`set_advanced_security_options(Option<AdvancedSecurityOptionsInput>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_advanced_security_options): <p>Specifies advanced security options.</p>
    ///   - [`node_to_node_encryption_options(NodeToNodeEncryptionOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::node_to_node_encryption_options) / [`set_node_to_node_encryption_options(Option<NodeToNodeEncryptionOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_node_to_node_encryption_options): <p>Specifies the NodeToNodeEncryptionOptions.</p>
    ///   - [`encryption_at_rest_options(EncryptionAtRestOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::encryption_at_rest_options) / [`set_encryption_at_rest_options(Option<EncryptionAtRestOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_encryption_at_rest_options): <p>Specifies the Encryption At Rest Options.</p>
    ///   - [`auto_tune_options(AutoTuneOptions)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::auto_tune_options) / [`set_auto_tune_options(Option<AutoTuneOptions>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_auto_tune_options): <p>Specifies Auto-Tune options.</p>
    ///   - [`dry_run(bool)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::dry_run) / [`set_dry_run(Option<bool>)`](crate::client::fluent_builders::UpdateElasticsearchDomainConfig::set_dry_run): <p> This flag, when set to True, specifies whether the <code>UpdateElasticsearchDomain</code> request should return the results of validation checks without actually applying the change. This flag, when set to True, specifies the deployment mechanism through which the update shall be applied on the domain. This will not actually perform the Update. </p>
    /// - On success, responds with [`UpdateElasticsearchDomainConfigOutput`](crate::output::UpdateElasticsearchDomainConfigOutput) with field(s):
    ///   - [`domain_config(Option<ElasticsearchDomainConfig>)`](crate::output::UpdateElasticsearchDomainConfigOutput::domain_config): <p>The status of the updated Elasticsearch domain. </p>
    ///   - [`dry_run_results(Option<DryRunResults>)`](crate::output::UpdateElasticsearchDomainConfigOutput::dry_run_results): <p>Contains result of DryRun. </p>
    /// - On failure, responds with [`SdkError<UpdateElasticsearchDomainConfigError>`](crate::error::UpdateElasticsearchDomainConfigError)
    pub fn update_elasticsearch_domain_config(
        &self,
    ) -> crate::client::fluent_builders::UpdateElasticsearchDomainConfig {
        crate::client::fluent_builders::UpdateElasticsearchDomainConfig::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePackage`](crate::client::fluent_builders::UpdatePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`package_id(impl Into<String>)`](crate::client::fluent_builders::UpdatePackage::package_id) / [`set_package_id(Option<String>)`](crate::client::fluent_builders::UpdatePackage::set_package_id): <p>Unique identifier for the package.</p>
    ///   - [`package_source(PackageSource)`](crate::client::fluent_builders::UpdatePackage::package_source) / [`set_package_source(Option<PackageSource>)`](crate::client::fluent_builders::UpdatePackage::set_package_source): <p>The S3 location for importing the package specified as <code>S3BucketName</code> and <code>S3Key</code></p>
    ///   - [`package_description(impl Into<String>)`](crate::client::fluent_builders::UpdatePackage::package_description) / [`set_package_description(Option<String>)`](crate::client::fluent_builders::UpdatePackage::set_package_description): <p>New description of the package.</p>
    ///   - [`commit_message(impl Into<String>)`](crate::client::fluent_builders::UpdatePackage::commit_message) / [`set_commit_message(Option<String>)`](crate::client::fluent_builders::UpdatePackage::set_commit_message): <p>An info message for the new version which will be shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    /// - On success, responds with [`UpdatePackageOutput`](crate::output::UpdatePackageOutput) with field(s):
    ///   - [`package_details(Option<PackageDetails>)`](crate::output::UpdatePackageOutput::package_details): <p>Information about the package <code>PackageDetails</code>.</p>
    /// - On failure, responds with [`SdkError<UpdatePackageError>`](crate::error::UpdatePackageError)
    pub fn update_package(&self) -> crate::client::fluent_builders::UpdatePackage {
        crate::client::fluent_builders::UpdatePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateVpcEndpoint`](crate::client::fluent_builders::UpdateVpcEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`vpc_endpoint_id(impl Into<String>)`](crate::client::fluent_builders::UpdateVpcEndpoint::vpc_endpoint_id) / [`set_vpc_endpoint_id(Option<String>)`](crate::client::fluent_builders::UpdateVpcEndpoint::set_vpc_endpoint_id): <p>Unique identifier of the VPC endpoint to be updated.</p>
    ///   - [`vpc_options(VpcOptions)`](crate::client::fluent_builders::UpdateVpcEndpoint::vpc_options) / [`set_vpc_options(Option<VpcOptions>)`](crate::client::fluent_builders::UpdateVpcEndpoint::set_vpc_options): <p>The security groups and/or subnets to add, remove, or modify.</p>
    /// - On success, responds with [`UpdateVpcEndpointOutput`](crate::output::UpdateVpcEndpointOutput) with field(s):
    ///   - [`vpc_endpoint(Option<VpcEndpoint>)`](crate::output::UpdateVpcEndpointOutput::vpc_endpoint): <p>The endpoint to be updated.</p>
    /// - On failure, responds with [`SdkError<UpdateVpcEndpointError>`](crate::error::UpdateVpcEndpointError)
    pub fn update_vpc_endpoint(&self) -> crate::client::fluent_builders::UpdateVpcEndpoint {
        crate::client::fluent_builders::UpdateVpcEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpgradeElasticsearchDomain`](crate::client::fluent_builders::UpgradeElasticsearchDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain_name(impl Into<String>)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::domain_name) / [`set_domain_name(Option<String>)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::set_domain_name): <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    ///   - [`target_version(impl Into<String>)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::target_version) / [`set_target_version(Option<String>)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::set_target_version): <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    ///   - [`perform_check_only(bool)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::perform_check_only) / [`set_perform_check_only(Option<bool>)`](crate::client::fluent_builders::UpgradeElasticsearchDomain::set_perform_check_only): <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    /// - On success, responds with [`UpgradeElasticsearchDomainOutput`](crate::output::UpgradeElasticsearchDomainOutput) with field(s):
    ///   - [`domain_name(Option<String>)`](crate::output::UpgradeElasticsearchDomainOutput::domain_name): <p>The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).</p>
    ///   - [`target_version(Option<String>)`](crate::output::UpgradeElasticsearchDomainOutput::target_version): <p>The version of Elasticsearch that you intend to upgrade the domain to.</p>
    ///   - [`perform_check_only(Option<bool>)`](crate::output::UpgradeElasticsearchDomainOutput::perform_check_only): <p> This flag, when set to True, indicates that an Upgrade Eligibility Check needs to be performed. This will not actually perform the Upgrade. </p>
    ///   - [`change_progress_details(Option<ChangeProgressDetails>)`](crate::output::UpgradeElasticsearchDomainOutput::change_progress_details): <p>Specifies change details of the domain configuration change.</p>
    /// - On failure, responds with [`SdkError<UpgradeElasticsearchDomainError>`](crate::error::UpgradeElasticsearchDomainError)
    pub fn upgrade_elasticsearch_domain(
        &self,
    ) -> crate::client::fluent_builders::UpgradeElasticsearchDomain {
        crate::client::fluent_builders::UpgradeElasticsearchDomain::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
