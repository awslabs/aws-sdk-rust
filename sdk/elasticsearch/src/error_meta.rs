// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An error occurred while processing the request.</p>
    BaseException(crate::error::BaseException),
    /// <p>An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An error occured because the client wanted to access a not supported operation. Gives http status code of 409.</p>
    DisabledOperationException(crate::error::DisabledOperationException),
    /// <p>The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.</p>
    InternalException(crate::error::InternalException),
    /// <p>The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400. </p>
    InvalidPaginationTokenException(crate::error::InvalidPaginationTokenException),
    /// <p>An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.</p>
    InvalidTypeException(crate::error::InvalidTypeException),
    /// <p>An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>An exception for creating a resource that already exists. Gives http status code of 400.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>An exception for missing / invalid input fields. Gives http status code of 400.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BaseException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DisabledOperationException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AcceptInboundCrossClusterSearchConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AcceptInboundCrossClusterSearchConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptInboundCrossClusterSearchConnectionError> for Error {
    fn from(err: crate::error::AcceptInboundCrossClusterSearchConnectionError) -> Self {
        match err {
            crate::error::AcceptInboundCrossClusterSearchConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::AcceptInboundCrossClusterSearchConnectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::AcceptInboundCrossClusterSearchConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AcceptInboundCrossClusterSearchConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::AddTagsError::InternalException(inner) => Error::InternalException(inner),
            crate::error::AddTagsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociatePackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePackageError> for Error {
    fn from(err: crate::error::AssociatePackageError) -> Self {
        match err {
            crate::error::AssociatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::AssociatePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AssociatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AuthorizeVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AuthorizeVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AuthorizeVpcEndpointAccessError> for Error {
    fn from(err: crate::error::AuthorizeVpcEndpointAccessError) -> Self {
        match err {
            crate::error::AuthorizeVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CancelElasticsearchServiceSoftwareUpdateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CancelElasticsearchServiceSoftwareUpdateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelElasticsearchServiceSoftwareUpdateError> for Error {
    fn from(err: crate::error::CancelElasticsearchServiceSoftwareUpdateError) -> Self {
        match err {
            crate::error::CancelElasticsearchServiceSoftwareUpdateError::BaseException(inner) => Error::BaseException(inner),
            crate::error::CancelElasticsearchServiceSoftwareUpdateError::InternalException(inner) => Error::InternalException(inner),
            crate::error::CancelElasticsearchServiceSoftwareUpdateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CancelElasticsearchServiceSoftwareUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CancelElasticsearchServiceSoftwareUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateElasticsearchDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateElasticsearchDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateElasticsearchDomainError> for Error {
    fn from(err: crate::error::CreateElasticsearchDomainError) -> Self {
        match err {
            crate::error::CreateElasticsearchDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::CreateElasticsearchDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::CreateElasticsearchDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateElasticsearchDomainError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::CreateElasticsearchDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateElasticsearchDomainError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateElasticsearchDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateElasticsearchDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateOutboundCrossClusterSearchConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateOutboundCrossClusterSearchConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOutboundCrossClusterSearchConnectionError> for Error {
    fn from(err: crate::error::CreateOutboundCrossClusterSearchConnectionError) -> Self {
        match err {
            crate::error::CreateOutboundCrossClusterSearchConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::CreateOutboundCrossClusterSearchConnectionError::InternalException(inner) => Error::InternalException(inner),
            crate::error::CreateOutboundCrossClusterSearchConnectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateOutboundCrossClusterSearchConnectionError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateOutboundCrossClusterSearchConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePackageError> for Error {
    fn from(err: crate::error::CreatePackageError) -> Self {
        match err {
            crate::error::CreatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::CreatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreatePackageError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::CreatePackageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePackageError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcEndpointError> for Error {
    fn from(err: crate::error::CreateVpcEndpointError) -> Self {
        match err {
            crate::error::CreateVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::CreateVpcEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::CreateVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateVpcEndpointError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVpcEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteElasticsearchDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteElasticsearchDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteElasticsearchDomainError> for Error {
    fn from(err: crate::error::DeleteElasticsearchDomainError) -> Self {
        match err {
            crate::error::DeleteElasticsearchDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteElasticsearchDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteElasticsearchDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteElasticsearchDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteElasticsearchDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteElasticsearchServiceRoleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteElasticsearchServiceRoleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteElasticsearchServiceRoleError> for Error {
    fn from(err: crate::error::DeleteElasticsearchServiceRoleError) -> Self {
        match err {
            crate::error::DeleteElasticsearchServiceRoleError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteElasticsearchServiceRoleError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteElasticsearchServiceRoleError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteElasticsearchServiceRoleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteInboundCrossClusterSearchConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteInboundCrossClusterSearchConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInboundCrossClusterSearchConnectionError> for Error {
    fn from(err: crate::error::DeleteInboundCrossClusterSearchConnectionError) -> Self {
        match err {
            crate::error::DeleteInboundCrossClusterSearchConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DeleteInboundCrossClusterSearchConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteInboundCrossClusterSearchConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteOutboundCrossClusterSearchConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteOutboundCrossClusterSearchConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOutboundCrossClusterSearchConnectionError> for Error {
    fn from(err: crate::error::DeleteOutboundCrossClusterSearchConnectionError) -> Self {
        match err {
            crate::error::DeleteOutboundCrossClusterSearchConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DeleteOutboundCrossClusterSearchConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteOutboundCrossClusterSearchConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePackageError> for Error {
    fn from(err: crate::error::DeletePackageError) -> Self {
        match err {
            crate::error::DeletePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DeletePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeletePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVpcEndpointError> for Error {
    fn from(err: crate::error::DeleteVpcEndpointError) -> Self {
        match err {
            crate::error::DeleteVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DeleteVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteVpcEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainAutoTunesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainAutoTunesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainAutoTunesError> for Error {
    fn from(err: crate::error::DescribeDomainAutoTunesError) -> Self {
        match err {
            crate::error::DescribeDomainAutoTunesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainChangeProgressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainChangeProgressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainChangeProgressError> for Error {
    fn from(err: crate::error::DescribeDomainChangeProgressError) -> Self {
        match err {
            crate::error::DescribeDomainChangeProgressError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeElasticsearchDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeElasticsearchDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeElasticsearchDomainError> for Error {
    fn from(err: crate::error::DescribeElasticsearchDomainError) -> Self {
        match err {
            crate::error::DescribeElasticsearchDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeElasticsearchDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeElasticsearchDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeElasticsearchDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeElasticsearchDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeElasticsearchDomainConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeElasticsearchDomainConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeElasticsearchDomainConfigError> for Error {
    fn from(err: crate::error::DescribeElasticsearchDomainConfigError) -> Self {
        match err {
            crate::error::DescribeElasticsearchDomainConfigError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeElasticsearchDomainConfigError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeElasticsearchDomainConfigError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeElasticsearchDomainConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeElasticsearchDomainConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeElasticsearchDomainsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeElasticsearchDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeElasticsearchDomainsError> for Error {
    fn from(err: crate::error::DescribeElasticsearchDomainsError) -> Self {
        match err {
            crate::error::DescribeElasticsearchDomainsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeElasticsearchDomainsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeElasticsearchDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeElasticsearchDomainsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeElasticsearchInstanceTypeLimitsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeElasticsearchInstanceTypeLimitsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeElasticsearchInstanceTypeLimitsError> for Error {
    fn from(err: crate::error::DescribeElasticsearchInstanceTypeLimitsError) -> Self {
        match err {
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::InternalException(inner) => Error::InternalException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeElasticsearchInstanceTypeLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeInboundCrossClusterSearchConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeInboundCrossClusterSearchConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInboundCrossClusterSearchConnectionsError> for Error {
    fn from(err: crate::error::DescribeInboundCrossClusterSearchConnectionsError) -> Self {
        match err {
            crate::error::DescribeInboundCrossClusterSearchConnectionsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DescribeInboundCrossClusterSearchConnectionsError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::error::DescribeInboundCrossClusterSearchConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeOutboundCrossClusterSearchConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOutboundCrossClusterSearchConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOutboundCrossClusterSearchConnectionsError> for Error {
    fn from(err: crate::error::DescribeOutboundCrossClusterSearchConnectionsError) -> Self {
        match err {
            crate::error::DescribeOutboundCrossClusterSearchConnectionsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DescribeOutboundCrossClusterSearchConnectionsError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::error::DescribeOutboundCrossClusterSearchConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePackagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePackagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePackagesError> for Error {
    fn from(err: crate::error::DescribePackagesError) -> Self {
        match err {
            crate::error::DescribePackagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePackagesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribePackagesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribePackagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePackagesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedElasticsearchInstanceOfferingsError> for Error {
    fn from(err: crate::error::DescribeReservedElasticsearchInstanceOfferingsError) -> Self {
        match err {
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError::InternalException(inner) => Error::InternalException(inner),
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeReservedElasticsearchInstanceOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedElasticsearchInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedElasticsearchInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedElasticsearchInstancesError> for Error {
    fn from(err: crate::error::DescribeReservedElasticsearchInstancesError) -> Self {
        match err {
            crate::error::DescribeReservedElasticsearchInstancesError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::DescribeReservedElasticsearchInstancesError::InternalException(inner) => Error::InternalException(inner),
            crate::error::DescribeReservedElasticsearchInstancesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeReservedElasticsearchInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeReservedElasticsearchInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVpcEndpointsError> for Error {
    fn from(err: crate::error::DescribeVpcEndpointsError) -> Self {
        match err {
            crate::error::DescribeVpcEndpointsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeVpcEndpointsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeVpcEndpointsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeVpcEndpointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DissociatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DissociatePackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DissociatePackageError> for Error {
    fn from(err: crate::error::DissociatePackageError) -> Self {
        match err {
            crate::error::DissociatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DissociatePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DissociatePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DissociatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DissociatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DissociatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DissociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::GetCompatibleElasticsearchVersionsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetCompatibleElasticsearchVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCompatibleElasticsearchVersionsError> for Error {
    fn from(err: crate::error::GetCompatibleElasticsearchVersionsError) -> Self {
        match err {
            crate::error::GetCompatibleElasticsearchVersionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetCompatibleElasticsearchVersionsError::DisabledOperationException(
                inner,
            ) => Error::DisabledOperationException(inner),
            crate::error::GetCompatibleElasticsearchVersionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetCompatibleElasticsearchVersionsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetCompatibleElasticsearchVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCompatibleElasticsearchVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPackageVersionHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPackageVersionHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPackageVersionHistoryError> for Error {
    fn from(err: crate::error::GetPackageVersionHistoryError) -> Self {
        match err {
            crate::error::GetPackageVersionHistoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetPackageVersionHistoryError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetPackageVersionHistoryError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetPackageVersionHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetPackageVersionHistoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetPackageVersionHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUpgradeHistoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUpgradeHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUpgradeHistoryError> for Error {
    fn from(err: crate::error::GetUpgradeHistoryError) -> Self {
        match err {
            crate::error::GetUpgradeHistoryError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetUpgradeHistoryError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::GetUpgradeHistoryError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetUpgradeHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUpgradeHistoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUpgradeHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUpgradeStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUpgradeStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUpgradeStatusError> for Error {
    fn from(err: crate::error::GetUpgradeStatusError) -> Self {
        match err {
            crate::error::GetUpgradeStatusError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetUpgradeStatusError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::GetUpgradeStatusError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetUpgradeStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUpgradeStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUpgradeStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainNamesError> for Error {
    fn from(err: crate::error::ListDomainNamesError) -> Self {
        match err {
            crate::error::ListDomainNamesError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListDomainNamesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainsForPackageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDomainsForPackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainsForPackageError> for Error {
    fn from(err: crate::error::ListDomainsForPackageError) -> Self {
        match err {
            crate::error::ListDomainsForPackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDomainsForPackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListDomainsForPackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListDomainsForPackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDomainsForPackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDomainsForPackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListElasticsearchInstanceTypesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListElasticsearchInstanceTypesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListElasticsearchInstanceTypesError> for Error {
    fn from(err: crate::error::ListElasticsearchInstanceTypesError) -> Self {
        match err {
            crate::error::ListElasticsearchInstanceTypesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListElasticsearchInstanceTypesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListElasticsearchInstanceTypesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListElasticsearchInstanceTypesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListElasticsearchInstanceTypesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListElasticsearchVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListElasticsearchVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListElasticsearchVersionsError> for Error {
    fn from(err: crate::error::ListElasticsearchVersionsError) -> Self {
        match err {
            crate::error::ListElasticsearchVersionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListElasticsearchVersionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListElasticsearchVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListElasticsearchVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListElasticsearchVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPackagesForDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPackagesForDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPackagesForDomainError> for Error {
    fn from(err: crate::error::ListPackagesForDomainError) -> Self {
        match err {
            crate::error::ListPackagesForDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPackagesForDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListPackagesForDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListPackagesForDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPackagesForDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPackagesForDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointAccessError> for Error {
    fn from(err: crate::error::ListVpcEndpointAccessError) -> Self {
        match err {
            crate::error::ListVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointsError> for Error {
    fn from(err: crate::error::ListVpcEndpointsError) -> Self {
        match err {
            crate::error::ListVpcEndpointsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsForDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsForDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointsForDomainError> for Error {
    fn from(err: crate::error::ListVpcEndpointsForDomainError) -> Self {
        match err {
            crate::error::ListVpcEndpointsForDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseReservedElasticsearchInstanceOfferingError> for Error {
    fn from(err: crate::error::PurchaseReservedElasticsearchInstanceOfferingError) -> Self {
        match err {
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::InternalException(inner) => Error::InternalException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::PurchaseReservedElasticsearchInstanceOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RejectInboundCrossClusterSearchConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RejectInboundCrossClusterSearchConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectInboundCrossClusterSearchConnectionError> for Error {
    fn from(err: crate::error::RejectInboundCrossClusterSearchConnectionError) -> Self {
        match err {
            crate::error::RejectInboundCrossClusterSearchConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::error::RejectInboundCrossClusterSearchConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::RejectInboundCrossClusterSearchConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err {
            crate::error::RemoveTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::RemoveTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::RemoveTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RemoveTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokeVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RevokeVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeVpcEndpointAccessError> for Error {
    fn from(err: crate::error::RevokeVpcEndpointAccessError) -> Self {
        match err {
            crate::error::RevokeVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::StartElasticsearchServiceSoftwareUpdateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartElasticsearchServiceSoftwareUpdateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartElasticsearchServiceSoftwareUpdateError> for Error {
    fn from(err: crate::error::StartElasticsearchServiceSoftwareUpdateError) -> Self {
        match err {
            crate::error::StartElasticsearchServiceSoftwareUpdateError::BaseException(inner) => Error::BaseException(inner),
            crate::error::StartElasticsearchServiceSoftwareUpdateError::InternalException(inner) => Error::InternalException(inner),
            crate::error::StartElasticsearchServiceSoftwareUpdateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::StartElasticsearchServiceSoftwareUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::StartElasticsearchServiceSoftwareUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateElasticsearchDomainConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateElasticsearchDomainConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateElasticsearchDomainConfigError> for Error {
    fn from(err: crate::error::UpdateElasticsearchDomainConfigError) -> Self {
        match err {
            crate::error::UpdateElasticsearchDomainConfigError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateElasticsearchDomainConfigError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateElasticsearchDomainConfigError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateElasticsearchDomainConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateElasticsearchDomainConfigError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateElasticsearchDomainConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateElasticsearchDomainConfigError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePackageError> for Error {
    fn from(err: crate::error::UpdatePackageError) -> Self {
        match err {
            crate::error::UpdatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::UpdatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdatePackageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVpcEndpointError> for Error {
    fn from(err: crate::error::UpdateVpcEndpointError) -> Self {
        match err {
            crate::error::UpdateVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateVpcEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpdateVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateVpcEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateVpcEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpgradeElasticsearchDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpgradeElasticsearchDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpgradeElasticsearchDomainError> for Error {
    fn from(err: crate::error::UpgradeElasticsearchDomainError) -> Self {
        match err {
            crate::error::UpgradeElasticsearchDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpgradeElasticsearchDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpgradeElasticsearchDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpgradeElasticsearchDomainError::ResourceAlreadyExistsException(
                inner,
            ) => Error::ResourceAlreadyExistsException(inner),
            crate::error::UpgradeElasticsearchDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpgradeElasticsearchDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpgradeElasticsearchDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BaseException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DisabledOperationException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
