// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p></p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p></p>
    ChannelNotBroadcasting(crate::types::error::ChannelNotBroadcasting),
    /// <p></p>
    ConflictException(crate::types::error::ConflictException),
    /// <p></p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p></p>
    PendingVerification(crate::types::error::PendingVerification),
    /// <p></p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p></p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p></p>
    StreamUnavailable(crate::types::error::StreamUnavailable),
    /// <p></p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p></p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ChannelNotBroadcasting(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::PendingVerification(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::StreamUnavailable(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_get_channel::BatchGetChannelError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_get_channel::BatchGetChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_channel::BatchGetChannelError> for Error {
    fn from(err: crate::operation::batch_get_channel::BatchGetChannelError) -> Self {
        match err {
            crate::operation::batch_get_channel::BatchGetChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_get_stream_key::BatchGetStreamKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_get_stream_key::BatchGetStreamKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_stream_key::BatchGetStreamKeyError> for Error {
    fn from(err: crate::operation::batch_get_stream_key::BatchGetStreamKeyError) -> Self {
        match err {
            crate::operation::batch_get_stream_key::BatchGetStreamKeyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_channel::CreateChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_channel::CreateChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_channel::CreateChannelError> for Error {
    fn from(err: crate::operation::create_channel::CreateChannelError) -> Self {
        match err {
            crate::operation::create_channel::CreateChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_channel::CreateChannelError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::create_channel::CreateChannelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_channel::CreateChannelError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_channel::CreateChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_channel::CreateChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_recording_configuration::CreateRecordingConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::create_recording_configuration::CreateRecordingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_recording_configuration::CreateRecordingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_stream_key::CreateStreamKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_stream_key::CreateStreamKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stream_key::CreateStreamKeyError> for Error {
    fn from(err: crate::operation::create_stream_key::CreateStreamKeyError) -> Self {
        match err {
            crate::operation::create_stream_key::CreateStreamKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_stream_key::CreateStreamKeyError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::create_stream_key::CreateStreamKeyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_stream_key::CreateStreamKeyError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_stream_key::CreateStreamKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_stream_key::CreateStreamKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_channel::DeleteChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_channel::DeleteChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_channel::DeleteChannelError> for Error {
    fn from(err: crate::operation::delete_channel::DeleteChannelError) -> Self {
        match err {
            crate::operation::delete_channel::DeleteChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_channel::DeleteChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_channel::DeleteChannelError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::delete_channel::DeleteChannelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_channel::DeleteChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_channel::DeleteChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError> for Error {
    fn from(err: crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError) -> Self {
        match err {
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_playback_key_pair::DeletePlaybackKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_recording_configuration::DeleteRecordingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_stream_key::DeleteStreamKeyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_stream_key::DeleteStreamKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stream_key::DeleteStreamKeyError> for Error {
    fn from(err: crate::operation::delete_stream_key::DeleteStreamKeyError) -> Self {
        match err {
            crate::operation::delete_stream_key::DeleteStreamKeyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_stream_key::DeleteStreamKeyError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::delete_stream_key::DeleteStreamKeyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_stream_key::DeleteStreamKeyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_stream_key::DeleteStreamKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_channel::GetChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_channel::GetChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_channel::GetChannelError> for Error {
    fn from(err: crate::operation::get_channel::GetChannelError) -> Self {
        match err {
            crate::operation::get_channel::GetChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_channel::GetChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_channel::GetChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_channel::GetChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_playback_key_pair::GetPlaybackKeyPairError> for Error {
    fn from(err: crate::operation::get_playback_key_pair::GetPlaybackKeyPairError) -> Self {
        match err {
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_playback_key_pair::GetPlaybackKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_recording_configuration::GetRecordingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_recording_configuration::GetRecordingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_recording_configuration::GetRecordingConfigurationError> for Error {
    fn from(
        err: crate::operation::get_recording_configuration::GetRecordingConfigurationError,
    ) -> Self {
        match err {
            crate::operation::get_recording_configuration::GetRecordingConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_recording_configuration::GetRecordingConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_recording_configuration::GetRecordingConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_recording_configuration::GetRecordingConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_recording_configuration::GetRecordingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_stream::GetStreamError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_stream::GetStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stream::GetStreamError> for Error {
    fn from(err: crate::operation::get_stream::GetStreamError) -> Self {
        match err {
            crate::operation::get_stream::GetStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_stream::GetStreamError::ChannelNotBroadcasting(inner) => {
                Error::ChannelNotBroadcasting(inner)
            }
            crate::operation::get_stream::GetStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_stream::GetStreamError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_stream::GetStreamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_stream_key::GetStreamKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_stream_key::GetStreamKeyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stream_key::GetStreamKeyError> for Error {
    fn from(err: crate::operation::get_stream_key::GetStreamKeyError) -> Self {
        match err {
            crate::operation::get_stream_key::GetStreamKeyError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_stream_key::GetStreamKeyError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stream_key::GetStreamKeyError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_stream_key::GetStreamKeyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_stream_session::GetStreamSessionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_stream_session::GetStreamSessionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stream_session::GetStreamSessionError> for Error {
    fn from(err: crate::operation::get_stream_session::GetStreamSessionError) -> Self {
        match err {
            crate::operation::get_stream_session::GetStreamSessionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_stream_session::GetStreamSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError> for Error {
    fn from(err: crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError) -> Self {
        match err {
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::PendingVerification(inner) => Error::PendingVerification(inner),
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::import_playback_key_pair::ImportPlaybackKeyPairError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_channels::ListChannelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_channels::ListChannelsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_channels::ListChannelsError> for Error {
    fn from(err: crate::operation::list_channels::ListChannelsError) -> Self {
        match err {
            crate::operation::list_channels::ListChannelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_channels::ListChannelsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::list_channels::ListChannelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_channels::ListChannelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError> for Error {
    fn from(err: crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError) -> Self {
        match err {
            crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_playback_key_pairs::ListPlaybackKeyPairsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_recording_configurations::ListRecordingConfigurationsError>
    for Error
{
    fn from(
        err: crate::operation::list_recording_configurations::ListRecordingConfigurationsError,
    ) -> Self {
        match err {
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_recording_configurations::ListRecordingConfigurationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stream_keys::ListStreamKeysError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stream_keys::ListStreamKeysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stream_keys::ListStreamKeysError> for Error {
    fn from(err: crate::operation::list_stream_keys::ListStreamKeysError) -> Self {
        match err {
            crate::operation::list_stream_keys::ListStreamKeysError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_stream_keys::ListStreamKeysError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_stream_keys::ListStreamKeysError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_stream_keys::ListStreamKeysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_streams::ListStreamsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_streams::ListStreamsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_streams::ListStreamsError> for Error {
    fn from(err: crate::operation::list_streams::ListStreamsError) -> Self {
        match err {
            crate::operation::list_streams::ListStreamsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_streams::ListStreamsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_streams::ListStreamsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_stream_sessions::ListStreamSessionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_stream_sessions::ListStreamSessionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_stream_sessions::ListStreamSessionsError> for Error {
    fn from(err: crate::operation::list_stream_sessions::ListStreamSessionsError) -> Self {
        match err {
            crate::operation::list_stream_sessions::ListStreamSessionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_stream_sessions::ListStreamSessionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_metadata::PutMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::put_metadata::PutMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_metadata::PutMetadataError> for Error {
    fn from(err: crate::operation::put_metadata::PutMetadataError) -> Self {
        match err {
            crate::operation::put_metadata::PutMetadataError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_metadata::PutMetadataError::ChannelNotBroadcasting(inner) => {
                Error::ChannelNotBroadcasting(inner)
            }
            crate::operation::put_metadata::PutMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_metadata::PutMetadataError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_metadata::PutMetadataError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_metadata::PutMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::stop_stream::StopStreamError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::stop_stream::StopStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_stream::StopStreamError> for Error {
    fn from(err: crate::operation::stop_stream::StopStreamError) -> Self {
        match err {
            crate::operation::stop_stream::StopStreamError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::stop_stream::StopStreamError::ChannelNotBroadcasting(inner) => {
                Error::ChannelNotBroadcasting(inner)
            }
            crate::operation::stop_stream::StopStreamError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::stop_stream::StopStreamError::StreamUnavailable(inner) => {
                Error::StreamUnavailable(inner)
            }
            crate::operation::stop_stream::StopStreamError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::stop_stream::StopStreamError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_channel::UpdateChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_channel::UpdateChannelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_channel::UpdateChannelError> for Error {
    fn from(err: crate::operation::update_channel::UpdateChannelError) -> Self {
        match err {
            crate::operation::update_channel::UpdateChannelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_channel::UpdateChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_channel::UpdateChannelError::PendingVerification(inner) => {
                Error::PendingVerification(inner)
            }
            crate::operation::update_channel::UpdateChannelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_channel::UpdateChannelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_channel::UpdateChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ChannelNotBroadcasting(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::PendingVerification(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::StreamUnavailable(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
