// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a stream.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamSummary {
    /// <p>Channel ARN for the stream.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    #[doc(hidden)]
    pub stream_id: std::option::Option<std::string::String>,
    /// <p>The stream’s state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::StreamState>,
    /// <p>The stream’s health.</p>
    #[doc(hidden)]
    pub health: std::option::Option<crate::types::StreamHealth>,
    /// <p>A count of concurrent views of the stream. Typically, a new view appears in <code>viewerCount</code> within 15 seconds of when video playback starts and a view is removed from <code>viewerCount</code> within 1 minute of when video playback ends. A value of -1 indicates that the request timed out; in this case, retry.</p>
    #[doc(hidden)]
    pub viewer_count: i64,
    /// <p>Time of the stream’s start. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. </p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl StreamSummary {
    /// <p>Channel ARN for the stream.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn stream_id(&self) -> std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// <p>The stream’s state.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::StreamState> {
        self.state.as_ref()
    }
    /// <p>The stream’s health.</p>
    pub fn health(&self) -> std::option::Option<&crate::types::StreamHealth> {
        self.health.as_ref()
    }
    /// <p>A count of concurrent views of the stream. Typically, a new view appears in <code>viewerCount</code> within 15 seconds of when video playback starts and a view is removed from <code>viewerCount</code> within 1 minute of when video playback ends. A value of -1 indicates that the request timed out; in this case, retry.</p>
    pub fn viewer_count(&self) -> i64 {
        self.viewer_count
    }
    /// <p>Time of the stream’s start. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. </p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
}
impl StreamSummary {
    /// Creates a new builder-style object to manufacture [`StreamSummary`](crate::types::StreamSummary).
    pub fn builder() -> crate::types::builders::StreamSummaryBuilder {
        crate::types::builders::StreamSummaryBuilder::default()
    }
}

/// A builder for [`StreamSummary`](crate::types::StreamSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamSummaryBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) stream_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::StreamState>,
    pub(crate) health: std::option::Option<crate::types::StreamHealth>,
    pub(crate) viewer_count: std::option::Option<i64>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl StreamSummaryBuilder {
    /// <p>Channel ARN for the stream.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>Channel ARN for the stream.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>The stream’s state.</p>
    pub fn state(mut self, input: crate::types::StreamState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The stream’s state.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::StreamState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The stream’s health.</p>
    pub fn health(mut self, input: crate::types::StreamHealth) -> Self {
        self.health = Some(input);
        self
    }
    /// <p>The stream’s health.</p>
    pub fn set_health(mut self, input: std::option::Option<crate::types::StreamHealth>) -> Self {
        self.health = input;
        self
    }
    /// <p>A count of concurrent views of the stream. Typically, a new view appears in <code>viewerCount</code> within 15 seconds of when video playback starts and a view is removed from <code>viewerCount</code> within 1 minute of when video playback ends. A value of -1 indicates that the request timed out; in this case, retry.</p>
    pub fn viewer_count(mut self, input: i64) -> Self {
        self.viewer_count = Some(input);
        self
    }
    /// <p>A count of concurrent views of the stream. Typically, a new view appears in <code>viewerCount</code> within 15 seconds of when video playback starts and a view is removed from <code>viewerCount</code> within 1 minute of when video playback ends. A value of -1 indicates that the request timed out; in this case, retry.</p>
    pub fn set_viewer_count(mut self, input: std::option::Option<i64>) -> Self {
        self.viewer_count = input;
        self
    }
    /// <p>Time of the stream’s start. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. </p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>Time of the stream’s start. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. </p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamSummary`](crate::types::StreamSummary).
    pub fn build(self) -> crate::types::StreamSummary {
        crate::types::StreamSummary {
            channel_arn: self.channel_arn,
            stream_id: self.stream_id,
            state: self.state,
            health: self.health,
            viewer_count: self.viewer_count.unwrap_or_default(),
            start_time: self.start_time,
        }
    }
}
