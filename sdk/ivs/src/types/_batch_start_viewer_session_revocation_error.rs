// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error for a request in the batch for BatchStartViewerSessionRevocation. Each error is related to a specific channel-ARN and viewer-ID pair.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchStartViewerSessionRevocationError {
    /// <p>Channel ARN.</p>
    pub channel_arn: ::std::string::String,
    /// <p>The ID of the viewer session to revoke.</p>
    pub viewer_id: ::std::string::String,
    /// <p>Error code.</p>
    pub code: ::std::option::Option<::std::string::String>,
    /// <p>Error message, determined by the application.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl BatchStartViewerSessionRevocationError {
    /// <p>Channel ARN.</p>
    pub fn channel_arn(&self) -> &str {
        use std::ops::Deref;
        self.channel_arn.deref()
    }
    /// <p>The ID of the viewer session to revoke.</p>
    pub fn viewer_id(&self) -> &str {
        use std::ops::Deref;
        self.viewer_id.deref()
    }
    /// <p>Error code.</p>
    pub fn code(&self) -> ::std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>Error message, determined by the application.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl BatchStartViewerSessionRevocationError {
    /// Creates a new builder-style object to manufacture [`BatchStartViewerSessionRevocationError`](crate::types::BatchStartViewerSessionRevocationError).
    pub fn builder() -> crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder {
        crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder::default()
    }
}

/// A builder for [`BatchStartViewerSessionRevocationError`](crate::types::BatchStartViewerSessionRevocationError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchStartViewerSessionRevocationErrorBuilder {
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) viewer_id: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl BatchStartViewerSessionRevocationErrorBuilder {
    /// <p>Channel ARN.</p>
    /// This field is required.
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Channel ARN.</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>Channel ARN.</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// <p>The ID of the viewer session to revoke.</p>
    /// This field is required.
    pub fn viewer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.viewer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the viewer session to revoke.</p>
    pub fn set_viewer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.viewer_id = input;
        self
    }
    /// <p>The ID of the viewer session to revoke.</p>
    pub fn get_viewer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.viewer_id
    }
    /// <p>Error code.</p>
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>Error code.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>Error message, determined by the application.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Error message, determined by the application.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Error message, determined by the application.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`BatchStartViewerSessionRevocationError`](crate::types::BatchStartViewerSessionRevocationError).
    /// This method will fail if any of the following fields are not set:
    /// - [`channel_arn`](crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder::channel_arn)
    /// - [`viewer_id`](crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder::viewer_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::BatchStartViewerSessionRevocationError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchStartViewerSessionRevocationError {
            channel_arn: self.channel_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "channel_arn",
                    "channel_arn was not specified but it is required when building BatchStartViewerSessionRevocationError",
                )
            })?,
            viewer_id: self.viewer_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "viewer_id",
                    "viewer_id was not specified but it is required when building BatchStartViewerSessionRevocationError",
                )
            })?,
            code: self.code,
            message: self.message,
        })
    }
}
