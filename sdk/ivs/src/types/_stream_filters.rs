// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying the stream attribute on which to filter.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamFilters {
    /// <p>The stream’s health.</p>
    #[doc(hidden)]
    pub health: std::option::Option<crate::types::StreamHealth>,
}
impl StreamFilters {
    /// <p>The stream’s health.</p>
    pub fn health(&self) -> std::option::Option<&crate::types::StreamHealth> {
        self.health.as_ref()
    }
}
impl StreamFilters {
    /// Creates a new builder-style object to manufacture [`StreamFilters`](crate::types::StreamFilters).
    pub fn builder() -> crate::types::builders::StreamFiltersBuilder {
        crate::types::builders::StreamFiltersBuilder::default()
    }
}

/// A builder for [`StreamFilters`](crate::types::StreamFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamFiltersBuilder {
    pub(crate) health: std::option::Option<crate::types::StreamHealth>,
}
impl StreamFiltersBuilder {
    /// <p>The stream’s health.</p>
    pub fn health(mut self, input: crate::types::StreamHealth) -> Self {
        self.health = Some(input);
        self
    }
    /// <p>The stream’s health.</p>
    pub fn set_health(mut self, input: std::option::Option<crate::types::StreamHealth>) -> Self {
        self.health = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamFilters`](crate::types::StreamFilters).
    pub fn build(self) -> crate::types::StreamFilters {
        crate::types::StreamFilters {
            health: self.health,
        }
    }
}
