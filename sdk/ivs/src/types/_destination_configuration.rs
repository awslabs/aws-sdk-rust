// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A complex type that describes a location where recorded videos will be stored. Each member represents a type of destination configuration. For recording, you define one and only one type of destination configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DestinationConfiguration {
    /// <p>An S3 destination configuration where recorded videos will be stored.</p>
    #[doc(hidden)]
    pub s3: std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl DestinationConfiguration {
    /// <p>An S3 destination configuration where recorded videos will be stored.</p>
    pub fn s3(&self) -> std::option::Option<&crate::types::S3DestinationConfiguration> {
        self.s3.as_ref()
    }
}
impl DestinationConfiguration {
    /// Creates a new builder-style object to manufacture [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn builder() -> crate::types::builders::DestinationConfigurationBuilder {
        crate::types::builders::DestinationConfigurationBuilder::default()
    }
}

/// A builder for [`DestinationConfiguration`](crate::types::DestinationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationConfigurationBuilder {
    pub(crate) s3: std::option::Option<crate::types::S3DestinationConfiguration>,
}
impl DestinationConfigurationBuilder {
    /// <p>An S3 destination configuration where recorded videos will be stored.</p>
    pub fn s3(mut self, input: crate::types::S3DestinationConfiguration) -> Self {
        self.s3 = Some(input);
        self
    }
    /// <p>An S3 destination configuration where recorded videos will be stored.</p>
    pub fn set_s3(
        mut self,
        input: std::option::Option<crate::types::S3DestinationConfiguration>,
    ) -> Self {
        self.s3 = input;
        self
    }
    /// Consumes the builder and constructs a [`DestinationConfiguration`](crate::types::DestinationConfiguration).
    pub fn build(self) -> crate::types::DestinationConfiguration {
        crate::types::DestinationConfiguration { s3: self.s3 }
    }
}
