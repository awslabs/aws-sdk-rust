// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object that captures the Amazon IVS configuration that the customer provisioned, the ingest configurations that the broadcaster used, and the most recent Amazon IVS stream events it encountered.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamSession {
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub stream_id: ::std::option::Option<::std::string::String>,
    /// <p>Time when the channel went live. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Time when the channel went offline. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. For live streams, this is <code>NULL</code>.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The properties of the channel at the time of going live.</p>
    pub channel: ::std::option::Option<crate::types::Channel>,
    /// <p>The properties of the incoming RTMP stream for the stream.</p>
    pub ingest_configuration: ::std::option::Option<crate::types::IngestConfiguration>,
    /// <p>The properties of recording the live stream.</p>
    pub recording_configuration: ::std::option::Option<crate::types::RecordingConfiguration>,
    /// <p>List of Amazon IVS events that the stream encountered. The list is sorted by most recent events and contains up to 500 events. For Amazon IVS events, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">Using Amazon EventBridge with Amazon IVS</a>.</p>
    pub truncated_events: ::std::option::Option<::std::vec::Vec<crate::types::StreamEvent>>,
}
impl StreamSession {
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn stream_id(&self) -> ::std::option::Option<&str> {
        self.stream_id.as_deref()
    }
    /// <p>Time when the channel went live. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>Time when the channel went offline. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. For live streams, this is <code>NULL</code>.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The properties of the channel at the time of going live.</p>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::Channel> {
        self.channel.as_ref()
    }
    /// <p>The properties of the incoming RTMP stream for the stream.</p>
    pub fn ingest_configuration(&self) -> ::std::option::Option<&crate::types::IngestConfiguration> {
        self.ingest_configuration.as_ref()
    }
    /// <p>The properties of recording the live stream.</p>
    pub fn recording_configuration(&self) -> ::std::option::Option<&crate::types::RecordingConfiguration> {
        self.recording_configuration.as_ref()
    }
    /// <p>List of Amazon IVS events that the stream encountered. The list is sorted by most recent events and contains up to 500 events. For Amazon IVS events, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">Using Amazon EventBridge with Amazon IVS</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.truncated_events.is_none()`.
    pub fn truncated_events(&self) -> &[crate::types::StreamEvent] {
        self.truncated_events.as_deref().unwrap_or_default()
    }
}
impl StreamSession {
    /// Creates a new builder-style object to manufacture [`StreamSession`](crate::types::StreamSession).
    pub fn builder() -> crate::types::builders::StreamSessionBuilder {
        crate::types::builders::StreamSessionBuilder::default()
    }
}

/// A builder for [`StreamSession`](crate::types::StreamSession).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StreamSessionBuilder {
    pub(crate) stream_id: ::std::option::Option<::std::string::String>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) channel: ::std::option::Option<crate::types::Channel>,
    pub(crate) ingest_configuration: ::std::option::Option<crate::types::IngestConfiguration>,
    pub(crate) recording_configuration: ::std::option::Option<crate::types::RecordingConfiguration>,
    pub(crate) truncated_events: ::std::option::Option<::std::vec::Vec<crate::types::StreamEvent>>,
}
impl StreamSessionBuilder {
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn stream_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn set_stream_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel.</p>
    pub fn get_stream_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_id
    }
    /// <p>Time when the channel went live. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time when the channel went live. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>Time when the channel went live. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>Time when the channel went offline. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. For live streams, this is <code>NULL</code>.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Time when the channel went offline. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. For live streams, this is <code>NULL</code>.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>Time when the channel went offline. This is an ISO 8601 timestamp; <i>note that this is returned as a string</i>. For live streams, this is <code>NULL</code>.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The properties of the channel at the time of going live.</p>
    pub fn channel(mut self, input: crate::types::Channel) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The properties of the channel at the time of going live.</p>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::Channel>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The properties of the channel at the time of going live.</p>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::Channel> {
        &self.channel
    }
    /// <p>The properties of the incoming RTMP stream for the stream.</p>
    pub fn ingest_configuration(mut self, input: crate::types::IngestConfiguration) -> Self {
        self.ingest_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The properties of the incoming RTMP stream for the stream.</p>
    pub fn set_ingest_configuration(mut self, input: ::std::option::Option<crate::types::IngestConfiguration>) -> Self {
        self.ingest_configuration = input;
        self
    }
    /// <p>The properties of the incoming RTMP stream for the stream.</p>
    pub fn get_ingest_configuration(&self) -> &::std::option::Option<crate::types::IngestConfiguration> {
        &self.ingest_configuration
    }
    /// <p>The properties of recording the live stream.</p>
    pub fn recording_configuration(mut self, input: crate::types::RecordingConfiguration) -> Self {
        self.recording_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The properties of recording the live stream.</p>
    pub fn set_recording_configuration(mut self, input: ::std::option::Option<crate::types::RecordingConfiguration>) -> Self {
        self.recording_configuration = input;
        self
    }
    /// <p>The properties of recording the live stream.</p>
    pub fn get_recording_configuration(&self) -> &::std::option::Option<crate::types::RecordingConfiguration> {
        &self.recording_configuration
    }
    /// Appends an item to `truncated_events`.
    ///
    /// To override the contents of this collection use [`set_truncated_events`](Self::set_truncated_events).
    ///
    /// <p>List of Amazon IVS events that the stream encountered. The list is sorted by most recent events and contains up to 500 events. For Amazon IVS events, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">Using Amazon EventBridge with Amazon IVS</a>.</p>
    pub fn truncated_events(mut self, input: crate::types::StreamEvent) -> Self {
        let mut v = self.truncated_events.unwrap_or_default();
        v.push(input);
        self.truncated_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of Amazon IVS events that the stream encountered. The list is sorted by most recent events and contains up to 500 events. For Amazon IVS events, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">Using Amazon EventBridge with Amazon IVS</a>.</p>
    pub fn set_truncated_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StreamEvent>>) -> Self {
        self.truncated_events = input;
        self
    }
    /// <p>List of Amazon IVS events that the stream encountered. The list is sorted by most recent events and contains up to 500 events. For Amazon IVS events, see <a href="https://docs.aws.amazon.com/ivs/latest/userguide/eventbridge.html">Using Amazon EventBridge with Amazon IVS</a>.</p>
    pub fn get_truncated_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamEvent>> {
        &self.truncated_events
    }
    /// Consumes the builder and constructs a [`StreamSession`](crate::types::StreamSession).
    pub fn build(self) -> crate::types::StreamSession {
        crate::types::StreamSession {
            stream_id: self.stream_id,
            start_time: self.start_time,
            end_time: self.end_time,
            channel: self.channel,
            ingest_configuration: self.ingest_configuration,
            recording_configuration: self.recording_configuration,
            truncated_events: self.truncated_events,
        }
    }
}
