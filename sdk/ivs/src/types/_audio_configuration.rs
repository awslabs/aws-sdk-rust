// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object specifying a streamâ€™s audio configuration, as set up by the broadcaster (usually in an encoder). This is part of the <code>IngestConfiguration</code> object and used for monitoring stream health.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AudioConfiguration {
    /// <p>Codec used for the audio encoding.</p>
    #[doc(hidden)]
    pub codec: std::option::Option<std::string::String>,
    /// <p>The expected ingest bitrate (bits per second). This is configured in the encoder.</p>
    #[doc(hidden)]
    pub target_bitrate: i64,
    /// <p>Number of audio samples recorded per second.</p>
    #[doc(hidden)]
    pub sample_rate: i64,
    /// <p>Number of audio channels.</p>
    #[doc(hidden)]
    pub channels: i64,
}
impl AudioConfiguration {
    /// <p>Codec used for the audio encoding.</p>
    pub fn codec(&self) -> std::option::Option<&str> {
        self.codec.as_deref()
    }
    /// <p>The expected ingest bitrate (bits per second). This is configured in the encoder.</p>
    pub fn target_bitrate(&self) -> i64 {
        self.target_bitrate
    }
    /// <p>Number of audio samples recorded per second.</p>
    pub fn sample_rate(&self) -> i64 {
        self.sample_rate
    }
    /// <p>Number of audio channels.</p>
    pub fn channels(&self) -> i64 {
        self.channels
    }
}
impl AudioConfiguration {
    /// Creates a new builder-style object to manufacture [`AudioConfiguration`](crate::types::AudioConfiguration).
    pub fn builder() -> crate::types::builders::AudioConfigurationBuilder {
        crate::types::builders::AudioConfigurationBuilder::default()
    }
}

/// A builder for [`AudioConfiguration`](crate::types::AudioConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AudioConfigurationBuilder {
    pub(crate) codec: std::option::Option<std::string::String>,
    pub(crate) target_bitrate: std::option::Option<i64>,
    pub(crate) sample_rate: std::option::Option<i64>,
    pub(crate) channels: std::option::Option<i64>,
}
impl AudioConfigurationBuilder {
    /// <p>Codec used for the audio encoding.</p>
    pub fn codec(mut self, input: impl Into<std::string::String>) -> Self {
        self.codec = Some(input.into());
        self
    }
    /// <p>Codec used for the audio encoding.</p>
    pub fn set_codec(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.codec = input;
        self
    }
    /// <p>The expected ingest bitrate (bits per second). This is configured in the encoder.</p>
    pub fn target_bitrate(mut self, input: i64) -> Self {
        self.target_bitrate = Some(input);
        self
    }
    /// <p>The expected ingest bitrate (bits per second). This is configured in the encoder.</p>
    pub fn set_target_bitrate(mut self, input: std::option::Option<i64>) -> Self {
        self.target_bitrate = input;
        self
    }
    /// <p>Number of audio samples recorded per second.</p>
    pub fn sample_rate(mut self, input: i64) -> Self {
        self.sample_rate = Some(input);
        self
    }
    /// <p>Number of audio samples recorded per second.</p>
    pub fn set_sample_rate(mut self, input: std::option::Option<i64>) -> Self {
        self.sample_rate = input;
        self
    }
    /// <p>Number of audio channels.</p>
    pub fn channels(mut self, input: i64) -> Self {
        self.channels = Some(input);
        self
    }
    /// <p>Number of audio channels.</p>
    pub fn set_channels(mut self, input: std::option::Option<i64>) -> Self {
        self.channels = input;
        self
    }
    /// Consumes the builder and constructs a [`AudioConfiguration`](crate::types::AudioConfiguration).
    pub fn build(self) -> crate::types::AudioConfiguration {
        crate::types::AudioConfiguration {
            codec: self.codec,
            target_bitrate: self.target_bitrate.unwrap_or_default(),
            sample_rate: self.sample_rate.unwrap_or_default(),
            channels: self.channels.unwrap_or_default(),
        }
    }
}
