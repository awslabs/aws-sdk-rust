// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn list_channels_output_correct_errors(
    mut builder: crate::operation::list_channels::builders::ListChannelsOutputBuilder,
) -> crate::operation::list_channels::builders::ListChannelsOutputBuilder {
    if builder.channels.is_none() {
        builder.channels = Some(Default::default())
    }
    builder
}

pub(crate) fn list_playback_key_pairs_output_correct_errors(
    mut builder: crate::operation::list_playback_key_pairs::builders::ListPlaybackKeyPairsOutputBuilder,
) -> crate::operation::list_playback_key_pairs::builders::ListPlaybackKeyPairsOutputBuilder {
    if builder.key_pairs.is_none() {
        builder.key_pairs = Some(Default::default())
    }
    builder
}

pub(crate) fn list_recording_configurations_output_correct_errors(
    mut builder: crate::operation::list_recording_configurations::builders::ListRecordingConfigurationsOutputBuilder,
) -> crate::operation::list_recording_configurations::builders::ListRecordingConfigurationsOutputBuilder {
    if builder.recording_configurations.is_none() {
        builder.recording_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn list_stream_keys_output_correct_errors(
    mut builder: crate::operation::list_stream_keys::builders::ListStreamKeysOutputBuilder,
) -> crate::operation::list_stream_keys::builders::ListStreamKeysOutputBuilder {
    if builder.stream_keys.is_none() {
        builder.stream_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn list_stream_sessions_output_correct_errors(
    mut builder: crate::operation::list_stream_sessions::builders::ListStreamSessionsOutputBuilder,
) -> crate::operation::list_stream_sessions::builders::ListStreamSessionsOutputBuilder {
    if builder.stream_sessions.is_none() {
        builder.stream_sessions = Some(Default::default())
    }
    builder
}

pub(crate) fn list_streams_output_correct_errors(
    mut builder: crate::operation::list_streams::builders::ListStreamsOutputBuilder,
) -> crate::operation::list_streams::builders::ListStreamsOutputBuilder {
    if builder.streams.is_none() {
        builder.streams = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tags_for_resource_output_correct_errors(
    mut builder: crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder,
) -> crate::operation::list_tags_for_resource::builders::ListTagsForResourceOutputBuilder {
    if builder.tags.is_none() {
        builder.tags = Some(Default::default())
    }
    builder
}

pub(crate) fn recording_configuration_correct_errors(
    mut builder: crate::types::builders::RecordingConfigurationBuilder,
) -> crate::types::builders::RecordingConfigurationBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.destination_configuration.is_none() {
        builder.destination_configuration = {
            let builder = crate::types::builders::DestinationConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::RecordingConfigurationState>().ok()
    }
    builder
}

pub(crate) fn batch_start_viewer_session_revocation_error_correct_errors(
    mut builder: crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder,
) -> crate::types::builders::BatchStartViewerSessionRevocationErrorBuilder {
    if builder.channel_arn.is_none() {
        builder.channel_arn = Some(Default::default())
    }
    if builder.viewer_id.is_none() {
        builder.viewer_id = Some(Default::default())
    }
    builder
}

pub(crate) fn recording_configuration_summary_correct_errors(
    mut builder: crate::types::builders::RecordingConfigurationSummaryBuilder,
) -> crate::types::builders::RecordingConfigurationSummaryBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.destination_configuration.is_none() {
        builder.destination_configuration = {
            let builder = crate::types::builders::DestinationConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::RecordingConfigurationState>().ok()
    }
    builder
}

pub(crate) fn s3_destination_configuration_correct_errors(
    mut builder: crate::types::builders::S3DestinationConfigurationBuilder,
) -> crate::types::builders::S3DestinationConfigurationBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}
