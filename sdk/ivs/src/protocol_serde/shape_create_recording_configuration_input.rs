// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_recording_configuration_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_recording_configuration::CreateRecordingConfigurationInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.destination_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("destinationConfiguration").start_object();
        crate::protocol_serde::shape_destination_configuration::ser_destination_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.name {
        object.key("name").string(var_3.as_str());
    }
    if let Some(var_4) = &input.recording_reconnect_window_seconds {
        object.key("recordingReconnectWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.rendition_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("renditionConfiguration").start_object();
        crate::protocol_serde::shape_rendition_configuration::ser_rendition_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9.as_str()).string(value_10.as_str());
            }
        }
        object_8.finish();
    }
    if let Some(var_11) = &input.thumbnail_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("thumbnailConfiguration").start_object();
        crate::protocol_serde::shape_thumbnail_configuration::ser_thumbnail_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
