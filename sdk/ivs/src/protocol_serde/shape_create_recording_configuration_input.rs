// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_recording_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_recording_configuration::CreateRecordingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.destination_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("destinationConfiguration").start_object();
        crate::protocol_serde::shape_destination_configuration::ser_destination_configuration(
            &mut object_2,
            var_1,
        )?;
        object_2.finish();
    }
    if let Some(var_3) = &input.name {
        object.key("name").string(var_3.as_str());
    }
    if input.recording_reconnect_window_seconds != 0 {
        object.key("recordingReconnectWindowSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.recording_reconnect_window_seconds).into()),
        );
    }
    if let Some(var_4) = &input.tags {
        #[allow(unused_mut)]
        let mut object_5 = object.key("tags").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.thumbnail_configuration {
        #[allow(unused_mut)]
        let mut object_9 = object.key("thumbnailConfiguration").start_object();
        crate::protocol_serde::shape_thumbnail_configuration::ser_thumbnail_configuration(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    Ok(())
}
