// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamsInput {
    /// <p>Filters the stream list to match the specified criterion.</p>
    #[doc(hidden)]
    pub filter_by: std::option::Option<crate::types::StreamFilters>,
    /// <p>The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Maximum number of streams to return. Default: 100.</p>
    #[doc(hidden)]
    pub max_results: i32,
}
impl ListStreamsInput {
    /// <p>Filters the stream list to match the specified criterion.</p>
    pub fn filter_by(&self) -> std::option::Option<&crate::types::StreamFilters> {
        self.filter_by.as_ref()
    }
    /// <p>The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of streams to return. Default: 100.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
}
impl ListStreamsInput {
    /// Creates a new builder-style object to manufacture [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
    pub fn builder() -> crate::operation::list_streams::builders::ListStreamsInputBuilder {
        crate::operation::list_streams::builders::ListStreamsInputBuilder::default()
    }
}

/// A builder for [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListStreamsInputBuilder {
    pub(crate) filter_by: std::option::Option<crate::types::StreamFilters>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListStreamsInputBuilder {
    /// <p>Filters the stream list to match the specified criterion.</p>
    pub fn filter_by(mut self, input: crate::types::StreamFilters) -> Self {
        self.filter_by = Some(input);
        self
    }
    /// <p>Filters the stream list to match the specified criterion.</p>
    pub fn set_filter_by(
        mut self,
        input: std::option::Option<crate::types::StreamFilters>,
    ) -> Self {
        self.filter_by = input;
        self
    }
    /// <p>The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The first stream to retrieve. This is used for pagination; see the <code>nextToken</code> response field.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Maximum number of streams to return. Default: 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Maximum number of streams to return. Default: 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListStreamsInput`](crate::operation::list_streams::ListStreamsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_streams::ListStreamsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_streams::ListStreamsInput {
            filter_by: self.filter_by,
            next_token: self.next_token,
            max_results: self.max_results.unwrap_or_default(),
        })
    }
}
