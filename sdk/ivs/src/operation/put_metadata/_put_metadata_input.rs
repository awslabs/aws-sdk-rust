// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutMetadataInput {
    /// <p>ARN of the channel into which metadata is inserted. This channel must have an active stream.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>Metadata to insert into the stream. Maximum: 1 KB per request.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
}
impl PutMetadataInput {
    /// <p>ARN of the channel into which metadata is inserted. This channel must have an active stream.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>Metadata to insert into the stream. Maximum: 1 KB per request.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
}
impl std::fmt::Debug for PutMetadataInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetadataInput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PutMetadataInput {
    /// Creates a new builder-style object to manufacture [`PutMetadataInput`](crate::operation::put_metadata::PutMetadataInput).
    pub fn builder() -> crate::operation::put_metadata::builders::PutMetadataInputBuilder {
        crate::operation::put_metadata::builders::PutMetadataInputBuilder::default()
    }
}

/// A builder for [`PutMetadataInput`](crate::operation::put_metadata::PutMetadataInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PutMetadataInputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<std::string::String>,
}
impl PutMetadataInputBuilder {
    /// <p>ARN of the channel into which metadata is inserted. This channel must have an active stream.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>ARN of the channel into which metadata is inserted. This channel must have an active stream.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>Metadata to insert into the stream. Maximum: 1 KB per request.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>Metadata to insert into the stream. Maximum: 1 KB per request.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`PutMetadataInput`](crate::operation::put_metadata::PutMetadataInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_metadata::PutMetadataInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_metadata::PutMetadataInput {
            channel_arn: self.channel_arn,
            metadata: self.metadata,
        })
    }
}
impl std::fmt::Debug for PutMetadataInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutMetadataInputBuilder");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
