// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStreamSessionInput {
    /// <p>ARN of the channel resource</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.</p>
    #[doc(hidden)]
    pub stream_id: std::option::Option<std::string::String>,
}
impl GetStreamSessionInput {
    /// <p>ARN of the channel resource</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.</p>
    pub fn stream_id(&self) -> std::option::Option<&str> {
        self.stream_id.as_deref()
    }
}
impl GetStreamSessionInput {
    /// Creates a new builder-style object to manufacture [`GetStreamSessionInput`](crate::operation::get_stream_session::GetStreamSessionInput).
    pub fn builder() -> crate::operation::get_stream_session::builders::GetStreamSessionInputBuilder
    {
        crate::operation::get_stream_session::builders::GetStreamSessionInputBuilder::default()
    }
}

/// A builder for [`GetStreamSessionInput`](crate::operation::get_stream_session::GetStreamSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetStreamSessionInputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) stream_id: std::option::Option<std::string::String>,
}
impl GetStreamSessionInputBuilder {
    /// <p>ARN of the channel resource</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>ARN of the channel resource</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.</p>
    pub fn stream_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.stream_id = Some(input.into());
        self
    }
    /// <p>Unique identifier for a live or previously live stream in the specified channel. If no <code>streamId</code> is provided, this returns the most recent stream session for the channel, if it exists.</p>
    pub fn set_stream_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stream_id = input;
        self
    }
    /// Consumes the builder and constructs a [`GetStreamSessionInput`](crate::operation::get_stream_session::GetStreamSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_stream_session::GetStreamSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_stream_session::GetStreamSessionInput {
                channel_arn: self.channel_arn,
                stream_id: self.stream_id,
            },
        )
    }
}
