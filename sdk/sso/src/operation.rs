// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Returns the STS short-term credentials for a given role name that is assigned to the
/// user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRoleCredentials {
    _private: (),
}
impl GetRoleCredentials {
    /// Creates a new builder-style object to manufacture [`GetRoleCredentialsInput`](crate::input::GetRoleCredentialsInput)
    pub fn builder() -> crate::input::get_role_credentials_input::Builder {
        crate::input::get_role_credentials_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRoleCredentials {
    type Output = std::result::Result<
        crate::output::GetRoleCredentialsOutput,
        crate::error::GetRoleCredentialsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_role_credentials_error(response)
        } else {
            crate::operation_deser::parse_get_role_credentials_response(response)
        }
    }
}

/// <p>Lists all roles that are assigned to the user for a given AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccountRoles {
    _private: (),
}
impl ListAccountRoles {
    /// Creates a new builder-style object to manufacture [`ListAccountRolesInput`](crate::input::ListAccountRolesInput)
    pub fn builder() -> crate::input::list_account_roles_input::Builder {
        crate::input::list_account_roles_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccountRoles {
    type Output = std::result::Result<
        crate::output::ListAccountRolesOutput,
        crate::error::ListAccountRolesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_account_roles_error(response)
        } else {
            crate::operation_deser::parse_list_account_roles_response(response)
        }
    }
}

/// <p>Lists all AWS accounts assigned to the user. These AWS accounts are assigned by the
/// administrator of the account. For more information, see <a href="https://docs.aws.amazon.com/singlesignon/latest/userguide/useraccess.html#assignusers">Assign User Access</a> in the <i>AWS SSO User Guide</i>. This operation
/// returns a paginated response.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListAccounts {
    _private: (),
}
impl ListAccounts {
    /// Creates a new builder-style object to manufacture [`ListAccountsInput`](crate::input::ListAccountsInput)
    pub fn builder() -> crate::input::list_accounts_input::Builder {
        crate::input::list_accounts_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListAccounts {
    type Output =
        std::result::Result<crate::output::ListAccountsOutput, crate::error::ListAccountsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_accounts_error(response)
        } else {
            crate::operation_deser::parse_list_accounts_response(response)
        }
    }
}

/// <p>Removes the client- and server-side session that is associated with the user.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Logout {
    _private: (),
}
impl Logout {
    /// Creates a new builder-style object to manufacture [`LogoutInput`](crate::input::LogoutInput)
    pub fn builder() -> crate::input::logout_input::Builder {
        crate::input::logout_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for Logout {
    type Output = std::result::Result<crate::output::LogoutOutput, crate::error::LogoutError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_logout_error(response)
        } else {
            crate::operation_deser::parse_logout_response(response)
        }
    }
}
