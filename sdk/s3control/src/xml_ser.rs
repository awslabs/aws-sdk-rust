// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_access_point_input(
    input: &crate::input::CreateAccessPointInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.bucket {
        let mut inner_writer = scope
            .start_el("Bucket")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_1.as_ref());
    }
    if let Some(var_2) = &input.public_access_block_configuration {
        let inner_writer = scope
            .start_el("PublicAccessBlockConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_public_access_block_configuration(&var_2, inner_writer)
    }
    if let Some(var_3) = &input.vpc_configuration {
        let inner_writer = scope
            .start_el("VpcConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_vpc_configuration(&var_3, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_create_access_point_for_object_lambda_input(
    input: &crate::input::CreateAccessPointForObjectLambdaInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_4) = &input.configuration {
        let inner_writer = scope
            .start_el("Configuration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_object_lambda_configuration(&var_4, inner_writer)
    }
    scope.finish();
}

pub fn serialize_member_create_bucket_input_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
) -> Result<smithy_http::body::SdkBody, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("CreateBucketConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_create_bucket_configuration(&&input, root)
    }
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_structure_create_job_input(
    input: &crate::input::CreateJobInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_5) = &input.client_request_token {
        let mut inner_writer = scope
            .start_el("ClientRequestToken")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_5.as_ref());
    }
    if let Some(var_6) = &input.confirmation_required {
        let mut inner_writer = scope
            .start_el("ConfirmationRequired")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_6).encode());
    }
    if let Some(var_7) = &input.description {
        let mut inner_writer = scope
            .start_el("Description")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_7.as_ref());
    }
    if let Some(var_8) = &input.manifest {
        let inner_writer = scope
            .start_el("Manifest")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_job_manifest(&var_8, inner_writer)
    }
    if let Some(var_9) = &input.operation {
        let inner_writer = scope
            .start_el("Operation")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_job_operation(&var_9, inner_writer)
    }
    if let Some(var_10) = &input.priority {
        let mut inner_writer = scope
            .start_el("Priority")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_10).encode());
    }
    if let Some(var_11) = &input.report {
        let inner_writer = scope
            .start_el("Report")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_job_report(&var_11, inner_writer)
    }
    if let Some(var_12) = &input.role_arn {
        let mut inner_writer = scope
            .start_el("RoleArn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_12.as_ref());
    }
    if let Some(var_13) = &input.tags {
        let mut inner_writer = scope
            .start_el("Tags")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_14 in var_13 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_14, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_put_access_point_configuration_for_object_lambda_input(
    input: &crate::input::PutAccessPointConfigurationForObjectLambdaInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_15) = &input.configuration {
        let inner_writer = scope
            .start_el("Configuration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_object_lambda_configuration(&var_15, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_put_access_point_policy_input(
    input: &crate::input::PutAccessPointPolicyInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_16) = &input.policy {
        let mut inner_writer = scope
            .start_el("Policy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_16.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_put_access_point_policy_for_object_lambda_input(
    input: &crate::input::PutAccessPointPolicyForObjectLambdaInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_17) = &input.policy {
        let mut inner_writer = scope
            .start_el("Policy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_17.as_ref());
    }
    scope.finish();
}

pub fn serialize_member_put_bucket_lifecycle_configuration_input_lifecycle_configuration(
    input: &crate::model::LifecycleConfiguration,
) -> Result<smithy_http::body::SdkBody, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("LifecycleConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_lifecycle_configuration(&&input, root)
    }
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_structure_put_bucket_policy_input(
    input: &crate::input::PutBucketPolicyInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_18) = &input.policy {
        let mut inner_writer = scope
            .start_el("Policy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_18.as_ref());
    }
    scope.finish();
}

pub fn serialize_member_put_bucket_tagging_input_tagging(
    input: &crate::model::Tagging,
) -> Result<smithy_http::body::SdkBody, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("Tagging")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_tagging(&&input, root)
    }
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_structure_put_job_tagging_input(
    input: &crate::input::PutJobTaggingInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_19) = &input.tags {
        let mut inner_writer = scope
            .start_el("Tags")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_20 in var_19 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_20, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_member_put_public_access_block_input_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
) -> Result<smithy_http::body::SdkBody, String> {
    let mut out = String::new();
    {
        let mut writer = smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("PublicAccessBlockConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_public_access_block_configuration(&&input, root)
    }
    Ok(smithy_http::body::SdkBody::from(out))
}

pub fn serialize_structure_put_storage_lens_configuration_input(
    input: &crate::input::PutStorageLensConfigurationInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_21) = &input.storage_lens_configuration {
        let inner_writer = scope
            .start_el("StorageLensConfiguration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_storage_lens_configuration(&var_21, inner_writer)
    }
    if let Some(var_22) = &input.tags {
        let mut inner_writer = scope
            .start_el("Tags")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_23 in var_22 {
            {
                let inner_writer = inner_writer
                    .start_el("Tag")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_storage_lens_tag(&list_item_23, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_put_storage_lens_configuration_tagging_input(
    input: &crate::input::PutStorageLensConfigurationTaggingInput,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_24) = &input.tags {
        let mut inner_writer = scope
            .start_el("Tags")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_25 in var_24 {
            {
                let inner_writer = inner_writer
                    .start_el("Tag")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_storage_lens_tag(&list_item_25, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_public_access_block_configuration(
    input: &crate::model::PublicAccessBlockConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.block_public_acls {
        let mut inner_writer = scope
            .start_el("BlockPublicAcls")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.block_public_acls).encode());
    }
    if input.ignore_public_acls {
        let mut inner_writer = scope
            .start_el("IgnorePublicAcls")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer
            .data(smithy_types::primitive::Encoder::from(input.ignore_public_acls).encode());
    }
    if input.block_public_policy {
        let mut inner_writer = scope
            .start_el("BlockPublicPolicy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer
            .data(smithy_types::primitive::Encoder::from(input.block_public_policy).encode());
    }
    if input.restrict_public_buckets {
        let mut inner_writer = scope
            .start_el("RestrictPublicBuckets")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer
            .data(smithy_types::primitive::Encoder::from(input.restrict_public_buckets).encode());
    }
    scope.finish();
}

pub fn serialize_structure_vpc_configuration(
    input: &crate::model::VpcConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_26) = &input.vpc_id {
        let mut inner_writer = scope
            .start_el("VpcId")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_26.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_object_lambda_configuration(
    input: &crate::model::ObjectLambdaConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_27) = &input.supporting_access_point {
        let mut inner_writer = scope
            .start_el("SupportingAccessPoint")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_27.as_ref());
    }
    if input.cloud_watch_metrics_enabled {
        let mut inner_writer = scope
            .start_el("CloudWatchMetricsEnabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            smithy_types::primitive::Encoder::from(input.cloud_watch_metrics_enabled).encode(),
        );
    }
    if let Some(var_28) = &input.allowed_features {
        let mut inner_writer = scope
            .start_el("AllowedFeatures")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_29 in var_28 {
            {
                let mut inner_writer = inner_writer
                    .start_el("AllowedFeature")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_29.as_str());
            }
        }
    }
    if let Some(var_30) = &input.transformation_configurations {
        let mut inner_writer = scope
            .start_el("TransformationConfigurations")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_31 in var_30 {
            {
                let inner_writer = inner_writer
                    .start_el("TransformationConfiguration")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_object_lambda_transformation_configuration(
                    &list_item_31,
                    inner_writer,
                )
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_create_bucket_configuration(
    input: &crate::model::CreateBucketConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_32) = &input.location_constraint {
        let mut inner_writer = scope
            .start_el("LocationConstraint")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_32.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_job_manifest(
    input: &crate::model::JobManifest,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_33) = &input.spec {
        let inner_writer = scope
            .start_el("Spec")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_job_manifest_spec(&var_33, inner_writer)
    }
    if let Some(var_34) = &input.location {
        let inner_writer = scope
            .start_el("Location")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_job_manifest_location(&var_34, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_job_operation(
    input: &crate::model::JobOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_35) = &input.lambda_invoke {
        let inner_writer = scope
            .start_el("LambdaInvoke")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_lambda_invoke_operation(&var_35, inner_writer)
    }
    if let Some(var_36) = &input.s3_put_object_copy {
        let inner_writer = scope
            .start_el("S3PutObjectCopy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_copy_object_operation(&var_36, inner_writer)
    }
    if let Some(var_37) = &input.s3_put_object_acl {
        let inner_writer = scope
            .start_el("S3PutObjectAcl")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_set_object_acl_operation(&var_37, inner_writer)
    }
    if let Some(var_38) = &input.s3_put_object_tagging {
        let inner_writer = scope
            .start_el("S3PutObjectTagging")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_set_object_tagging_operation(&var_38, inner_writer)
    }
    if let Some(var_39) = &input.s3_delete_object_tagging {
        let inner_writer = scope
            .start_el("S3DeleteObjectTagging")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_delete_object_tagging_operation(
            &var_39,
            inner_writer,
        )
    }
    if let Some(var_40) = &input.s3_initiate_restore_object {
        let inner_writer = scope
            .start_el("S3InitiateRestoreObject")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_initiate_restore_object_operation(
            &var_40,
            inner_writer,
        )
    }
    if let Some(var_41) = &input.s3_put_object_legal_hold {
        let inner_writer = scope
            .start_el("S3PutObjectLegalHold")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_set_object_legal_hold_operation(
            &var_41,
            inner_writer,
        )
    }
    if let Some(var_42) = &input.s3_put_object_retention {
        let inner_writer = scope
            .start_el("S3PutObjectRetention")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_set_object_retention_operation(&var_42, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_job_report(
    input: &crate::model::JobReport,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_43) = &input.bucket {
        let mut inner_writer = scope
            .start_el("Bucket")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_43.as_ref());
    }
    if let Some(var_44) = &input.format {
        let mut inner_writer = scope
            .start_el("Format")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_44.as_str());
    }
    {
        let mut inner_writer = scope
            .start_el("Enabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.enabled).encode());
    }
    if let Some(var_45) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_45.as_ref());
    }
    if let Some(var_46) = &input.report_scope {
        let mut inner_writer = scope
            .start_el("ReportScope")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_46.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_tag(
    input: &crate::model::S3Tag,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_47) = &input.key {
        let mut inner_writer = scope
            .start_el("Key")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_47.as_ref());
    }
    if let Some(var_48) = &input.value {
        let mut inner_writer = scope
            .start_el("Value")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_48.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_lifecycle_configuration(
    input: &crate::model::LifecycleConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_49) = &input.rules {
        let mut inner_writer = scope
            .start_el("Rules")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_50 in var_49 {
            {
                let inner_writer = inner_writer
                    .start_el("Rule")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_lifecycle_rule(&list_item_50, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_tagging(
    input: &crate::model::Tagging,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_51) = &input.tag_set {
        let mut inner_writer = scope
            .start_el("TagSet")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_52 in var_51 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_52, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_storage_lens_configuration(
    input: &crate::model::StorageLensConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_53) = &input.id {
        let mut inner_writer = scope
            .start_el("Id")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_53.as_ref());
    }
    if let Some(var_54) = &input.account_level {
        let inner_writer = scope
            .start_el("AccountLevel")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_account_level(&var_54, inner_writer)
    }
    if let Some(var_55) = &input.include {
        let inner_writer = scope
            .start_el("Include")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_include(&var_55, inner_writer)
    }
    if let Some(var_56) = &input.exclude {
        let inner_writer = scope
            .start_el("Exclude")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_exclude(&var_56, inner_writer)
    }
    if let Some(var_57) = &input.data_export {
        let inner_writer = scope
            .start_el("DataExport")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_storage_lens_data_export(&var_57, inner_writer)
    }
    {
        let mut inner_writer = scope
            .start_el("IsEnabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_58) = &input.aws_org {
        let inner_writer = scope
            .start_el("AwsOrg")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_storage_lens_aws_org(&var_58, inner_writer)
    }
    if let Some(var_59) = &input.storage_lens_arn {
        let mut inner_writer = scope
            .start_el("StorageLensArn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_59.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_storage_lens_tag(
    input: &crate::model::StorageLensTag,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_60) = &input.key {
        let mut inner_writer = scope
            .start_el("Key")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_60.as_ref());
    }
    if let Some(var_61) = &input.value {
        let mut inner_writer = scope
            .start_el("Value")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_61.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_object_lambda_transformation_configuration(
    input: &crate::model::ObjectLambdaTransformationConfiguration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_62) = &input.actions {
        let mut inner_writer = scope
            .start_el("Actions")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_63 in var_62 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Action")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_63.as_str());
            }
        }
    }
    if let Some(var_64) = &input.content_transformation {
        let inner_writer = scope
            .start_el("ContentTransformation")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_union_object_lambda_content_transformation(&var_64, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_job_manifest_spec(
    input: &crate::model::JobManifestSpec,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_65) = &input.format {
        let mut inner_writer = scope
            .start_el("Format")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_65.as_str());
    }
    if let Some(var_66) = &input.fields {
        let mut inner_writer = scope
            .start_el("Fields")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_67 in var_66 {
            {
                let mut inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_67.as_str());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_job_manifest_location(
    input: &crate::model::JobManifestLocation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_68) = &input.object_arn {
        let mut inner_writer = scope
            .start_el("ObjectArn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_68.as_ref());
    }
    if let Some(var_69) = &input.object_version_id {
        let mut inner_writer = scope
            .start_el("ObjectVersionId")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_69.as_ref());
    }
    if let Some(var_70) = &input.e_tag {
        let mut inner_writer = scope
            .start_el("ETag")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_70.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_lambda_invoke_operation(
    input: &crate::model::LambdaInvokeOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_71) = &input.function_arn {
        let mut inner_writer = scope
            .start_el("FunctionArn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_71.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_s3_copy_object_operation(
    input: &crate::model::S3CopyObjectOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_72) = &input.target_resource {
        let mut inner_writer = scope
            .start_el("TargetResource")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_72.as_ref());
    }
    if let Some(var_73) = &input.canned_access_control_list {
        let mut inner_writer = scope
            .start_el("CannedAccessControlList")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_73.as_str());
    }
    if let Some(var_74) = &input.access_control_grants {
        let mut inner_writer = scope
            .start_el("AccessControlGrants")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_75 in var_74 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_grant(&list_item_75, inner_writer)
            }
        }
    }
    if let Some(var_76) = &input.metadata_directive {
        let mut inner_writer = scope
            .start_el("MetadataDirective")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_76.as_str());
    }
    if let Some(var_77) = &input.modified_since_constraint {
        let mut inner_writer = scope
            .start_el("ModifiedSinceConstraint")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_77.fmt(smithy_types::instant::Format::DateTime).as_ref());
    }
    if let Some(var_78) = &input.new_object_metadata {
        let inner_writer = scope
            .start_el("NewObjectMetadata")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_object_metadata(&var_78, inner_writer)
    }
    if let Some(var_79) = &input.new_object_tagging {
        let mut inner_writer = scope
            .start_el("NewObjectTagging")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_80 in var_79 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_80, inner_writer)
            }
        }
    }
    if let Some(var_81) = &input.redirect_location {
        let mut inner_writer = scope
            .start_el("RedirectLocation")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_81.as_ref());
    }
    if input.requester_pays {
        let mut inner_writer = scope
            .start_el("RequesterPays")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.requester_pays).encode());
    }
    if let Some(var_82) = &input.storage_class {
        let mut inner_writer = scope
            .start_el("StorageClass")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_82.as_str());
    }
    if let Some(var_83) = &input.un_modified_since_constraint {
        let mut inner_writer = scope
            .start_el("UnModifiedSinceConstraint")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_83.fmt(smithy_types::instant::Format::DateTime).as_ref());
    }
    if let Some(var_84) = &input.sse_aws_kms_key_id {
        let mut inner_writer = scope
            .start_el("SSEAwsKmsKeyId")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_84.as_ref());
    }
    if let Some(var_85) = &input.target_key_prefix {
        let mut inner_writer = scope
            .start_el("TargetKeyPrefix")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_85.as_ref());
    }
    if let Some(var_86) = &input.object_lock_legal_hold_status {
        let mut inner_writer = scope
            .start_el("ObjectLockLegalHoldStatus")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_86.as_str());
    }
    if let Some(var_87) = &input.object_lock_mode {
        let mut inner_writer = scope
            .start_el("ObjectLockMode")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_87.as_str());
    }
    if let Some(var_88) = &input.object_lock_retain_until_date {
        let mut inner_writer = scope
            .start_el("ObjectLockRetainUntilDate")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_88.fmt(smithy_types::instant::Format::DateTime).as_ref());
    }
    if input.bucket_key_enabled {
        let mut inner_writer = scope
            .start_el("BucketKeyEnabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer
            .data(smithy_types::primitive::Encoder::from(input.bucket_key_enabled).encode());
    }
    scope.finish();
}

pub fn serialize_structure_s3_set_object_acl_operation(
    input: &crate::model::S3SetObjectAclOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_89) = &input.access_control_policy {
        let inner_writer = scope
            .start_el("AccessControlPolicy")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_access_control_policy(&var_89, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_s3_set_object_tagging_operation(
    input: &crate::model::S3SetObjectTaggingOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_90) = &input.tag_set {
        let mut inner_writer = scope
            .start_el("TagSet")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_91 in var_90 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_91, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_s3_delete_object_tagging_operation(
    input: &crate::model::S3DeleteObjectTaggingOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
}

pub fn serialize_structure_s3_initiate_restore_object_operation(
    input: &crate::model::S3InitiateRestoreObjectOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_92) = &input.expiration_in_days {
        let mut inner_writer = scope
            .start_el("ExpirationInDays")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_92).encode());
    }
    if let Some(var_93) = &input.glacier_job_tier {
        let mut inner_writer = scope
            .start_el("GlacierJobTier")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_93.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_set_object_legal_hold_operation(
    input: &crate::model::S3SetObjectLegalHoldOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_94) = &input.legal_hold {
        let inner_writer = scope
            .start_el("LegalHold")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_object_lock_legal_hold(&var_94, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_s3_set_object_retention_operation(
    input: &crate::model::S3SetObjectRetentionOperation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_95) = &input.bypass_governance_retention {
        let mut inner_writer = scope
            .start_el("BypassGovernanceRetention")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_95).encode());
    }
    if let Some(var_96) = &input.retention {
        let inner_writer = scope
            .start_el("Retention")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_retention(&var_96, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_lifecycle_rule(
    input: &crate::model::LifecycleRule,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_97) = &input.expiration {
        let inner_writer = scope
            .start_el("Expiration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_lifecycle_expiration(&var_97, inner_writer)
    }
    if let Some(var_98) = &input.id {
        let mut inner_writer = scope
            .start_el("ID")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_98.as_ref());
    }
    if let Some(var_99) = &input.filter {
        let inner_writer = scope
            .start_el("Filter")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_lifecycle_rule_filter(&var_99, inner_writer)
    }
    if let Some(var_100) = &input.status {
        let mut inner_writer = scope
            .start_el("Status")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_100.as_str());
    }
    if let Some(var_101) = &input.transitions {
        let mut inner_writer = scope
            .start_el("Transitions")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_102 in var_101 {
            {
                let inner_writer = inner_writer
                    .start_el("Transition")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_transition(&list_item_102, inner_writer)
            }
        }
    }
    if let Some(var_103) = &input.noncurrent_version_transitions {
        let mut inner_writer = scope
            .start_el("NoncurrentVersionTransitions")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_104 in var_103 {
            {
                let inner_writer = inner_writer
                    .start_el("NoncurrentVersionTransition")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_noncurrent_version_transition(
                    &list_item_104,
                    inner_writer,
                )
            }
        }
    }
    if let Some(var_105) = &input.noncurrent_version_expiration {
        let inner_writer = scope
            .start_el("NoncurrentVersionExpiration")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_noncurrent_version_expiration(&var_105, inner_writer)
    }
    if let Some(var_106) = &input.abort_incomplete_multipart_upload {
        let inner_writer = scope
            .start_el("AbortIncompleteMultipartUpload")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_abort_incomplete_multipart_upload(
            &var_106,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_account_level(
    input: &crate::model::AccountLevel,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_107) = &input.activity_metrics {
        let inner_writer = scope
            .start_el("ActivityMetrics")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_activity_metrics(&var_107, inner_writer)
    }
    if let Some(var_108) = &input.bucket_level {
        let inner_writer = scope
            .start_el("BucketLevel")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_bucket_level(&var_108, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_include(
    input: &crate::model::Include,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_109) = &input.buckets {
        let mut inner_writer = scope
            .start_el("Buckets")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_110 in var_109 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Arn")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_110.as_ref());
            }
        }
    }
    if let Some(var_111) = &input.regions {
        let mut inner_writer = scope
            .start_el("Regions")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_112 in var_111 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Region")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_112.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_exclude(
    input: &crate::model::Exclude,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_113) = &input.buckets {
        let mut inner_writer = scope
            .start_el("Buckets")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_114 in var_113 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Arn")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_114.as_ref());
            }
        }
    }
    if let Some(var_115) = &input.regions {
        let mut inner_writer = scope
            .start_el("Regions")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_116 in var_115 {
            {
                let mut inner_writer = inner_writer
                    .start_el("Region")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(list_item_116.as_ref());
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_storage_lens_data_export(
    input: &crate::model::StorageLensDataExport,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_117) = &input.s3_bucket_destination {
        let inner_writer = scope
            .start_el("S3BucketDestination")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_bucket_destination(&var_117, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_storage_lens_aws_org(
    input: &crate::model::StorageLensAwsOrg,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_118) = &input.arn {
        let mut inner_writer = scope
            .start_el("Arn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_118.as_ref());
    }
    scope.finish();
}

pub fn serialize_union_object_lambda_content_transformation(
    input: &crate::model::ObjectLambdaContentTransformation,
    writer: smithy_xml::encode::ElWriter,
) {
    let mut scope_writer = writer.finish();
    match input {
        crate::model::ObjectLambdaContentTransformation::AwsLambda(inner) => {
            let inner_writer = scope_writer
                .start_el("AwsLambda")
                .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
            crate::xml_ser::serialize_structure_aws_lambda_transformation(&inner, inner_writer)
        }
    }
}

pub fn serialize_structure_s3_grant(
    input: &crate::model::S3Grant,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_119) = &input.grantee {
        let inner_writer = scope
            .start_el("Grantee")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_grantee(&var_119, inner_writer)
    }
    if let Some(var_120) = &input.permission {
        let mut inner_writer = scope
            .start_el("Permission")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_120.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_object_metadata(
    input: &crate::model::S3ObjectMetadata,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_121) = &input.cache_control {
        let mut inner_writer = scope
            .start_el("CacheControl")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_121.as_ref());
    }
    if let Some(var_122) = &input.content_disposition {
        let mut inner_writer = scope
            .start_el("ContentDisposition")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_122.as_ref());
    }
    if let Some(var_123) = &input.content_encoding {
        let mut inner_writer = scope
            .start_el("ContentEncoding")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_123.as_ref());
    }
    if let Some(var_124) = &input.content_language {
        let mut inner_writer = scope
            .start_el("ContentLanguage")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_124.as_ref());
    }
    if let Some(var_125) = &input.user_metadata {
        let mut inner_writer = scope
            .start_el("UserMetadata")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for (key_126, value_127) in var_125 {
            let mut entry = inner_writer.start_el("entry").finish();
            {
                let mut inner_writer = entry
                    .start_el("key")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(key_126.as_ref());
            }
            {
                let mut inner_writer = entry
                    .start_el("value")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
                    .finish();
                inner_writer.data(value_127.as_ref());
            }
        }
    }
    if let Some(var_128) = &input.content_length {
        let mut inner_writer = scope
            .start_el("ContentLength")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(*var_128).encode());
    }
    if let Some(var_129) = &input.content_md5 {
        let mut inner_writer = scope
            .start_el("ContentMD5")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_129.as_ref());
    }
    if let Some(var_130) = &input.content_type {
        let mut inner_writer = scope
            .start_el("ContentType")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_130.as_ref());
    }
    if let Some(var_131) = &input.http_expires_date {
        let mut inner_writer = scope
            .start_el("HttpExpiresDate")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            var_131
                .fmt(smithy_types::instant::Format::DateTime)
                .as_ref(),
        );
    }
    if input.requester_charged {
        let mut inner_writer = scope
            .start_el("RequesterCharged")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.requester_charged).encode());
    }
    if let Some(var_132) = &input.sse_algorithm {
        let mut inner_writer = scope
            .start_el("SSEAlgorithm")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_132.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_access_control_policy(
    input: &crate::model::S3AccessControlPolicy,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_133) = &input.access_control_list {
        let inner_writer = scope
            .start_el("AccessControlList")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_access_control_list(&var_133, inner_writer)
    }
    if let Some(var_134) = &input.canned_access_control_list {
        let mut inner_writer = scope
            .start_el("CannedAccessControlList")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_134.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_object_lock_legal_hold(
    input: &crate::model::S3ObjectLockLegalHold,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_135) = &input.status {
        let mut inner_writer = scope
            .start_el("Status")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_135.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_s3_retention(
    input: &crate::model::S3Retention,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_136) = &input.retain_until_date {
        let mut inner_writer = scope
            .start_el("RetainUntilDate")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            var_136
                .fmt(smithy_types::instant::Format::DateTime)
                .as_ref(),
        );
    }
    if let Some(var_137) = &input.mode {
        let mut inner_writer = scope
            .start_el("Mode")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_137.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_lifecycle_expiration(
    input: &crate::model::LifecycleExpiration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_138) = &input.date {
        let mut inner_writer = scope
            .start_el("Date")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            var_138
                .fmt(smithy_types::instant::Format::DateTime)
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope
            .start_el("Days")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if input.expired_object_delete_marker {
        let mut inner_writer = scope
            .start_el("ExpiredObjectDeleteMarker")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            smithy_types::primitive::Encoder::from(input.expired_object_delete_marker).encode(),
        );
    }
    scope.finish();
}

pub fn serialize_structure_lifecycle_rule_filter(
    input: &crate::model::LifecycleRuleFilter,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_139) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_139.as_ref());
    }
    if let Some(var_140) = &input.tag {
        let inner_writer = scope
            .start_el("Tag")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_tag(&var_140, inner_writer)
    }
    if let Some(var_141) = &input.and {
        let inner_writer = scope
            .start_el("And")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_lifecycle_rule_and_operator(&var_141, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_transition(
    input: &crate::model::Transition,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_142) = &input.date {
        let mut inner_writer = scope
            .start_el("Date")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            var_142
                .fmt(smithy_types::instant::Format::DateTime)
                .as_ref(),
        );
    }
    if input.days != 0 {
        let mut inner_writer = scope
            .start_el("Days")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.days).encode());
    }
    if let Some(var_143) = &input.storage_class {
        let mut inner_writer = scope
            .start_el("StorageClass")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_143.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_noncurrent_version_transition(
    input: &crate::model::NoncurrentVersionTransition,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope
            .start_el("NoncurrentDays")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    if let Some(var_144) = &input.storage_class {
        let mut inner_writer = scope
            .start_el("StorageClass")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_144.as_str());
    }
    scope.finish();
}

pub fn serialize_structure_noncurrent_version_expiration(
    input: &crate::model::NoncurrentVersionExpiration,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.noncurrent_days != 0 {
        let mut inner_writer = scope
            .start_el("NoncurrentDays")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.noncurrent_days).encode());
    }
    scope.finish();
}

pub fn serialize_structure_abort_incomplete_multipart_upload(
    input: &crate::model::AbortIncompleteMultipartUpload,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.days_after_initiation != 0 {
        let mut inner_writer = scope
            .start_el("DaysAfterInitiation")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer
            .data(smithy_types::primitive::Encoder::from(input.days_after_initiation).encode());
    }
    scope.finish();
}

pub fn serialize_structure_activity_metrics(
    input: &crate::model::ActivityMetrics,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope
            .start_el("IsEnabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    scope.finish();
}

pub fn serialize_structure_bucket_level(
    input: &crate::model::BucketLevel,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_145) = &input.activity_metrics {
        let inner_writer = scope
            .start_el("ActivityMetrics")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_activity_metrics(&var_145, inner_writer)
    }
    if let Some(var_146) = &input.prefix_level {
        let inner_writer = scope
            .start_el("PrefixLevel")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_prefix_level(&var_146, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_s3_bucket_destination(
    input: &crate::model::S3BucketDestination,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_147) = &input.format {
        let mut inner_writer = scope
            .start_el("Format")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_147.as_str());
    }
    if let Some(var_148) = &input.output_schema_version {
        let mut inner_writer = scope
            .start_el("OutputSchemaVersion")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_148.as_str());
    }
    if let Some(var_149) = &input.account_id {
        let mut inner_writer = scope
            .start_el("AccountId")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_149.as_ref());
    }
    if let Some(var_150) = &input.arn {
        let mut inner_writer = scope
            .start_el("Arn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_150.as_ref());
    }
    if let Some(var_151) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_151.as_ref());
    }
    if let Some(var_152) = &input.encryption {
        let inner_writer = scope
            .start_el("Encryption")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_storage_lens_data_export_encryption(
            &var_152,
            inner_writer,
        )
    }
    scope.finish();
}

pub fn serialize_structure_aws_lambda_transformation(
    input: &crate::model::AwsLambdaTransformation,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_153) = &input.function_arn {
        let mut inner_writer = scope
            .start_el("FunctionArn")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_153.as_ref());
    }
    if let Some(var_154) = &input.function_payload {
        let mut inner_writer = scope
            .start_el("FunctionPayload")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_154.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_s3_grantee(
    input: &crate::model::S3Grantee,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_155) = &input.type_identifier {
        let mut inner_writer = scope
            .start_el("TypeIdentifier")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_155.as_str());
    }
    if let Some(var_156) = &input.identifier {
        let mut inner_writer = scope
            .start_el("Identifier")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_156.as_ref());
    }
    if let Some(var_157) = &input.display_name {
        let mut inner_writer = scope
            .start_el("DisplayName")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_157.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_s3_access_control_list(
    input: &crate::model::S3AccessControlList,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_158) = &input.owner {
        let inner_writer = scope
            .start_el("Owner")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_s3_object_owner(&var_158, inner_writer)
    }
    if let Some(var_159) = &input.grants {
        let mut inner_writer = scope
            .start_el("Grants")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_160 in var_159 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_grant(&list_item_160, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_lifecycle_rule_and_operator(
    input: &crate::model::LifecycleRuleAndOperator,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_161) = &input.prefix {
        let mut inner_writer = scope
            .start_el("Prefix")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_161.as_ref());
    }
    if let Some(var_162) = &input.tags {
        let mut inner_writer = scope
            .start_el("Tags")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        for list_item_163 in var_162 {
            {
                let inner_writer = inner_writer
                    .start_el("member")
                    .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
                crate::xml_ser::serialize_structure_s3_tag(&list_item_163, inner_writer)
            }
        }
    }
    scope.finish();
}

pub fn serialize_structure_prefix_level(
    input: &crate::model::PrefixLevel,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_164) = &input.storage_metrics {
        let inner_writer = scope
            .start_el("StorageMetrics")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_prefix_level_storage_metrics(&var_164, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_storage_lens_data_export_encryption(
    input: &crate::model::StorageLensDataExportEncryption,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_165) = &input.sses3 {
        let inner_writer = scope
            .start_el("SSE-S3")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_sses3(&var_165, inner_writer)
    }
    if let Some(var_166) = &input.ssekms {
        let inner_writer = scope
            .start_el("SSE-KMS")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_ssekms(&var_166, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_s3_object_owner(
    input: &crate::model::S3ObjectOwner,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_167) = &input.id {
        let mut inner_writer = scope
            .start_el("ID")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_167.as_ref());
    }
    if let Some(var_168) = &input.display_name {
        let mut inner_writer = scope
            .start_el("DisplayName")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_168.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_prefix_level_storage_metrics(
    input: &crate::model::PrefixLevelStorageMetrics,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if input.is_enabled {
        let mut inner_writer = scope
            .start_el("IsEnabled")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.is_enabled).encode());
    }
    if let Some(var_169) = &input.selection_criteria {
        let inner_writer = scope
            .start_el("SelectionCriteria")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::xml_ser::serialize_structure_selection_criteria(&var_169, inner_writer)
    }
    scope.finish();
}

pub fn serialize_structure_sses3(
    input: &crate::model::Sses3,
    writer: smithy_xml::encode::ElWriter,
) {
    let _ = input;
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    scope.finish();
}

pub fn serialize_structure_ssekms(
    input: &crate::model::Ssekms,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_170) = &input.key_id {
        let mut inner_writer = scope
            .start_el("KeyId")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_170.as_ref());
    }
    scope.finish();
}

pub fn serialize_structure_selection_criteria(
    input: &crate::model::SelectionCriteria,
    writer: smithy_xml::encode::ElWriter,
) {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_171) = &input.delimiter {
        let mut inner_writer = scope
            .start_el("Delimiter")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(var_171.as_ref());
    }
    if input.max_depth != 0 {
        let mut inner_writer = scope
            .start_el("MaxDepth")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(smithy_types::primitive::Encoder::from(input.max_depth).encode());
    }
    if input.min_storage_bytes_percentage != 0.0 {
        let mut inner_writer = scope
            .start_el("MinStorageBytesPercentage")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None)
            .finish();
        inner_writer.data(
            smithy_types::primitive::Encoder::from(input.min_storage_bytes_percentage).encode(),
        );
    }
    scope.finish();
}
