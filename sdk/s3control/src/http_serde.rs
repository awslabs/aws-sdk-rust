// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn add_headers_create_access_point(
    input: &crate::input::CreateAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_1) = &input.account_id {
        let formatted_2 = AsRef::<str>::as_ref(inner_1);
        if !formatted_2.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_2;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_access_point_for_object_lambda(
    input: &crate::input::CreateAccessPointForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_3) = &input.account_id {
        let formatted_4 = AsRef::<str>::as_ref(inner_3);
        if !formatted_4.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_4;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_bucket(
    input: &crate::input::CreateBucketInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_5) = &input.acl {
        let formatted_6 = AsRef::<str>::as_ref(inner_5);
        if !formatted_6.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_6;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "acl",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-acl", header_value);
        }
    }
    if let Some(inner_7) = &input.grant_full_control {
        let formatted_8 = AsRef::<str>::as_ref(inner_7);
        if !formatted_8.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_8;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "grant_full_control",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-grant-full-control", header_value);
        }
    }
    if let Some(inner_9) = &input.grant_read {
        let formatted_10 = AsRef::<str>::as_ref(inner_9);
        if !formatted_10.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_10;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "grant_read",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-grant-read", header_value);
        }
    }
    if let Some(inner_11) = &input.grant_read_acp {
        let formatted_12 = AsRef::<str>::as_ref(inner_11);
        if !formatted_12.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_12;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "grant_read_acp",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-grant-read-acp", header_value);
        }
    }
    if let Some(inner_13) = &input.grant_write {
        let formatted_14 = AsRef::<str>::as_ref(inner_13);
        if !formatted_14.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_14;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "grant_write",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-grant-write", header_value);
        }
    }
    if let Some(inner_15) = &input.grant_write_acp {
        let formatted_16 = AsRef::<str>::as_ref(inner_15);
        if !formatted_16.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_16;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "grant_write_acp",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-grant-write-acp", header_value);
        }
    }
    if input.object_lock_enabled_for_bucket {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.object_lock_enabled_for_bucket);
        let formatted_17 = encoder.encode();
        if !formatted_17.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_17;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "object_lock_enabled_for_bucket",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-bucket-object-lock-enabled", header_value);
        }
    }
    if let Some(inner_18) = &input.outpost_id {
        let formatted_19 = AsRef::<str>::as_ref(inner_18);
        if !formatted_19.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_19;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "outpost_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-outpost-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_job(
    input: &crate::input::CreateJobInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_20) = &input.account_id {
        let formatted_21 = AsRef::<str>::as_ref(inner_20);
        if !formatted_21.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_21;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_create_multi_region_access_point(
    input: &crate::input::CreateMultiRegionAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_22) = &input.account_id {
        let formatted_23 = AsRef::<str>::as_ref(inner_22);
        if !formatted_23.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_23;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_access_point(
    input: &crate::input::DeleteAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_24) = &input.account_id {
        let formatted_25 = AsRef::<str>::as_ref(inner_24);
        if !formatted_25.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_25;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_access_point_for_object_lambda(
    input: &crate::input::DeleteAccessPointForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_26) = &input.account_id {
        let formatted_27 = AsRef::<str>::as_ref(inner_26);
        if !formatted_27.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_27;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_access_point_policy(
    input: &crate::input::DeleteAccessPointPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_28) = &input.account_id {
        let formatted_29 = AsRef::<str>::as_ref(inner_28);
        if !formatted_29.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_29;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_access_point_policy_for_object_lambda(
    input: &crate::input::DeleteAccessPointPolicyForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_30) = &input.account_id {
        let formatted_31 = AsRef::<str>::as_ref(inner_30);
        if !formatted_31.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_31;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_bucket(
    input: &crate::input::DeleteBucketInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_32) = &input.account_id {
        let formatted_33 = AsRef::<str>::as_ref(inner_32);
        if !formatted_33.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_33;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_bucket_lifecycle_configuration(
    input: &crate::input::DeleteBucketLifecycleConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_34) = &input.account_id {
        let formatted_35 = AsRef::<str>::as_ref(inner_34);
        if !formatted_35.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_35;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_bucket_policy(
    input: &crate::input::DeleteBucketPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_36) = &input.account_id {
        let formatted_37 = AsRef::<str>::as_ref(inner_36);
        if !formatted_37.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_37;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_bucket_tagging(
    input: &crate::input::DeleteBucketTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_38) = &input.account_id {
        let formatted_39 = AsRef::<str>::as_ref(inner_38);
        if !formatted_39.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_39;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_job_tagging(
    input: &crate::input::DeleteJobTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_40) = &input.account_id {
        let formatted_41 = AsRef::<str>::as_ref(inner_40);
        if !formatted_41.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_41;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_multi_region_access_point(
    input: &crate::input::DeleteMultiRegionAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_42) = &input.account_id {
        let formatted_43 = AsRef::<str>::as_ref(inner_42);
        if !formatted_43.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_43;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_public_access_block(
    input: &crate::input::DeletePublicAccessBlockInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_44) = &input.account_id {
        let formatted_45 = AsRef::<str>::as_ref(inner_44);
        if !formatted_45.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_45;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_storage_lens_configuration(
    input: &crate::input::DeleteStorageLensConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_46) = &input.account_id {
        let formatted_47 = AsRef::<str>::as_ref(inner_46);
        if !formatted_47.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_47;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_delete_storage_lens_configuration_tagging(
    input: &crate::input::DeleteStorageLensConfigurationTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_48) = &input.account_id {
        let formatted_49 = AsRef::<str>::as_ref(inner_48);
        if !formatted_49.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_49;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_describe_job(
    input: &crate::input::DescribeJobInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_50) = &input.account_id {
        let formatted_51 = AsRef::<str>::as_ref(inner_50);
        if !formatted_51.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_51;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_describe_multi_region_access_point_operation(
    input: &crate::input::DescribeMultiRegionAccessPointOperationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_52) = &input.account_id {
        let formatted_53 = AsRef::<str>::as_ref(inner_52);
        if !formatted_53.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_53;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point(
    input: &crate::input::GetAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_54) = &input.account_id {
        let formatted_55 = AsRef::<str>::as_ref(inner_54);
        if !formatted_55.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_55;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_configuration_for_object_lambda(
    input: &crate::input::GetAccessPointConfigurationForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_56) = &input.account_id {
        let formatted_57 = AsRef::<str>::as_ref(inner_56);
        if !formatted_57.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_57;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_for_object_lambda(
    input: &crate::input::GetAccessPointForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_58) = &input.account_id {
        let formatted_59 = AsRef::<str>::as_ref(inner_58);
        if !formatted_59.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_59;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_policy(
    input: &crate::input::GetAccessPointPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_60) = &input.account_id {
        let formatted_61 = AsRef::<str>::as_ref(inner_60);
        if !formatted_61.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_61;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_policy_for_object_lambda(
    input: &crate::input::GetAccessPointPolicyForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_62) = &input.account_id {
        let formatted_63 = AsRef::<str>::as_ref(inner_62);
        if !formatted_63.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_63;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_policy_status(
    input: &crate::input::GetAccessPointPolicyStatusInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_64) = &input.account_id {
        let formatted_65 = AsRef::<str>::as_ref(inner_64);
        if !formatted_65.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_65;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_access_point_policy_status_for_object_lambda(
    input: &crate::input::GetAccessPointPolicyStatusForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_66) = &input.account_id {
        let formatted_67 = AsRef::<str>::as_ref(inner_66);
        if !formatted_67.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_67;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_bucket(
    input: &crate::input::GetBucketInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_68) = &input.account_id {
        let formatted_69 = AsRef::<str>::as_ref(inner_68);
        if !formatted_69.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_69;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_bucket_lifecycle_configuration(
    input: &crate::input::GetBucketLifecycleConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_70) = &input.account_id {
        let formatted_71 = AsRef::<str>::as_ref(inner_70);
        if !formatted_71.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_71;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_bucket_policy(
    input: &crate::input::GetBucketPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_72) = &input.account_id {
        let formatted_73 = AsRef::<str>::as_ref(inner_72);
        if !formatted_73.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_73;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_bucket_tagging(
    input: &crate::input::GetBucketTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_74) = &input.account_id {
        let formatted_75 = AsRef::<str>::as_ref(inner_74);
        if !formatted_75.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_75;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_job_tagging(
    input: &crate::input::GetJobTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_76) = &input.account_id {
        let formatted_77 = AsRef::<str>::as_ref(inner_76);
        if !formatted_77.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_77;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_multi_region_access_point(
    input: &crate::input::GetMultiRegionAccessPointInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_78) = &input.account_id {
        let formatted_79 = AsRef::<str>::as_ref(inner_78);
        if !formatted_79.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_79;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_multi_region_access_point_policy(
    input: &crate::input::GetMultiRegionAccessPointPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_80) = &input.account_id {
        let formatted_81 = AsRef::<str>::as_ref(inner_80);
        if !formatted_81.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_81;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_multi_region_access_point_policy_status(
    input: &crate::input::GetMultiRegionAccessPointPolicyStatusInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_82) = &input.account_id {
        let formatted_83 = AsRef::<str>::as_ref(inner_82);
        if !formatted_83.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_83;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_public_access_block(
    input: &crate::input::GetPublicAccessBlockInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_84) = &input.account_id {
        let formatted_85 = AsRef::<str>::as_ref(inner_84);
        if !formatted_85.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_85;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_storage_lens_configuration(
    input: &crate::input::GetStorageLensConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_86) = &input.account_id {
        let formatted_87 = AsRef::<str>::as_ref(inner_86);
        if !formatted_87.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_87;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_get_storage_lens_configuration_tagging(
    input: &crate::input::GetStorageLensConfigurationTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_88) = &input.account_id {
        let formatted_89 = AsRef::<str>::as_ref(inner_88);
        if !formatted_89.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_89;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_access_points(
    input: &crate::input::ListAccessPointsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_90) = &input.account_id {
        let formatted_91 = AsRef::<str>::as_ref(inner_90);
        if !formatted_91.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_91;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_access_points_for_object_lambda(
    input: &crate::input::ListAccessPointsForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_92) = &input.account_id {
        let formatted_93 = AsRef::<str>::as_ref(inner_92);
        if !formatted_93.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_93;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_jobs(
    input: &crate::input::ListJobsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_94) = &input.account_id {
        let formatted_95 = AsRef::<str>::as_ref(inner_94);
        if !formatted_95.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_95;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_multi_region_access_points(
    input: &crate::input::ListMultiRegionAccessPointsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_96) = &input.account_id {
        let formatted_97 = AsRef::<str>::as_ref(inner_96);
        if !formatted_97.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_97;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_regional_buckets(
    input: &crate::input::ListRegionalBucketsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_98) = &input.account_id {
        let formatted_99 = AsRef::<str>::as_ref(inner_98);
        if !formatted_99.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_99;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    if let Some(inner_100) = &input.outpost_id {
        let formatted_101 = AsRef::<str>::as_ref(inner_100);
        if !formatted_101.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_101;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "outpost_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-outpost-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_list_storage_lens_configurations(
    input: &crate::input::ListStorageLensConfigurationsInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_102) = &input.account_id {
        let formatted_103 = AsRef::<str>::as_ref(inner_102);
        if !formatted_103.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_103;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_access_point_configuration_for_object_lambda(
    input: &crate::input::PutAccessPointConfigurationForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_104) = &input.account_id {
        let formatted_105 = AsRef::<str>::as_ref(inner_104);
        if !formatted_105.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_105;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_access_point_policy(
    input: &crate::input::PutAccessPointPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_106) = &input.account_id {
        let formatted_107 = AsRef::<str>::as_ref(inner_106);
        if !formatted_107.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_107;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_access_point_policy_for_object_lambda(
    input: &crate::input::PutAccessPointPolicyForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_108) = &input.account_id {
        let formatted_109 = AsRef::<str>::as_ref(inner_108);
        if !formatted_109.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_109;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_bucket_lifecycle_configuration(
    input: &crate::input::PutBucketLifecycleConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_110) = &input.account_id {
        let formatted_111 = AsRef::<str>::as_ref(inner_110);
        if !formatted_111.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_111;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_bucket_policy(
    input: &crate::input::PutBucketPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_112) = &input.account_id {
        let formatted_113 = AsRef::<str>::as_ref(inner_112);
        if !formatted_113.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_113;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    if input.confirm_remove_self_bucket_access {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.confirm_remove_self_bucket_access);
        let formatted_114 = encoder.encode();
        if !formatted_114.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_114;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "confirm_remove_self_bucket_access",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-confirm-remove-self-bucket-access", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_bucket_tagging(
    input: &crate::input::PutBucketTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_115) = &input.account_id {
        let formatted_116 = AsRef::<str>::as_ref(inner_115);
        if !formatted_116.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_116;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_job_tagging(
    input: &crate::input::PutJobTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_117) = &input.account_id {
        let formatted_118 = AsRef::<str>::as_ref(inner_117);
        if !formatted_118.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_118;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_multi_region_access_point_policy(
    input: &crate::input::PutMultiRegionAccessPointPolicyInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_119) = &input.account_id {
        let formatted_120 = AsRef::<str>::as_ref(inner_119);
        if !formatted_120.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_120;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_public_access_block(
    input: &crate::input::PutPublicAccessBlockInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_121) = &input.account_id {
        let formatted_122 = AsRef::<str>::as_ref(inner_121);
        if !formatted_122.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_122;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_storage_lens_configuration(
    input: &crate::input::PutStorageLensConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_123) = &input.account_id {
        let formatted_124 = AsRef::<str>::as_ref(inner_123);
        if !formatted_124.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_124;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_put_storage_lens_configuration_tagging(
    input: &crate::input::PutStorageLensConfigurationTaggingInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_125) = &input.account_id {
        let formatted_126 = AsRef::<str>::as_ref(inner_125);
        if !formatted_126.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_126;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_job_priority(
    input: &crate::input::UpdateJobPriorityInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_127) = &input.account_id {
        let formatted_128 = AsRef::<str>::as_ref(inner_127);
        if !formatted_128.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_128;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn add_headers_update_job_status(
    input: &crate::input::UpdateJobStatusInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_129) = &input.account_id {
        let formatted_130 = AsRef::<str>::as_ref(inner_129);
        if !formatted_130.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_130;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "account_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn deser_header_create_bucket_create_bucket_output_location(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("Location").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_public_access_block_get_public_access_block_output_public_access_block_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::PublicAccessBlockConfiguration>,
    crate::error::GetPublicAccessBlockError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_s3control_synthetic_get_public_access_block_output_public_access_block_configuration(body).map_err(crate::error::GetPublicAccessBlockError::unhandled)
    }).transpose()
}

pub fn deser_payload_get_storage_lens_configuration_get_storage_lens_configuration_output_storage_lens_configuration(
    body: &[u8],
) -> std::result::Result<
    std::option::Option<crate::model::StorageLensConfiguration>,
    crate::error::GetStorageLensConfigurationError,
> {
    (!body.is_empty()).then(||{
        crate::xml_deser::deser_member_com_amazonaws_s3control_synthetic_get_storage_lens_configuration_output_storage_lens_configuration(body).map_err(crate::error::GetStorageLensConfigurationError::unhandled)
    }).transpose()
}
