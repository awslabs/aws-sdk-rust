// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn get_bucket_tagging_output_correct_errors(
    mut builder: crate::operation::get_bucket_tagging::builders::GetBucketTaggingOutputBuilder,
) -> crate::operation::get_bucket_tagging::builders::GetBucketTaggingOutputBuilder {
    if builder.tag_set.is_none() {
        builder.tag_set = Some(Default::default())
    }
    builder
}

pub(crate) fn update_job_priority_output_correct_errors(
    mut builder: crate::operation::update_job_priority::builders::UpdateJobPriorityOutputBuilder,
) -> crate::operation::update_job_priority::builders::UpdateJobPriorityOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    builder
}

pub(crate) fn list_storage_lens_configuration_entry_correct_errors(
    mut builder: crate::types::builders::ListStorageLensConfigurationEntryBuilder,
) -> crate::types::builders::ListStorageLensConfigurationEntryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.storage_lens_arn.is_none() {
        builder.storage_lens_arn = Some(Default::default())
    }
    if builder.home_region.is_none() {
        builder.home_region = Some(Default::default())
    }
    builder
}

pub(crate) fn object_lambda_configuration_correct_errors(
    mut builder: crate::types::builders::ObjectLambdaConfigurationBuilder,
) -> crate::types::builders::ObjectLambdaConfigurationBuilder {
    if builder.supporting_access_point.is_none() {
        builder.supporting_access_point = Some(Default::default())
    }
    if builder.transformation_configurations.is_none() {
        builder.transformation_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn replication_configuration_correct_errors(
    mut builder: crate::types::builders::ReplicationConfigurationBuilder,
) -> crate::types::builders::ReplicationConfigurationBuilder {
    if builder.role.is_none() {
        builder.role = Some(Default::default())
    }
    if builder.rules.is_none() {
        builder.rules = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationBuilder,
) -> crate::types::builders::VpcConfigurationBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    builder
}

pub(crate) fn access_point_correct_errors(mut builder: crate::types::builders::AccessPointBuilder) -> crate::types::builders::AccessPointBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_origin.is_none() {
        builder.network_origin = "no value was set".parse::<crate::types::NetworkOrigin>().ok()
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn job_manifest_correct_errors(mut builder: crate::types::builders::JobManifestBuilder) -> crate::types::builders::JobManifestBuilder {
    if builder.spec.is_none() {
        builder.spec = {
            let builder = crate::types::builders::JobManifestSpecBuilder::default();
            crate::serde_util::job_manifest_spec_correct_errors(builder).build().ok()
        }
    }
    if builder.location.is_none() {
        builder.location = {
            let builder = crate::types::builders::JobManifestLocationBuilder::default();
            crate::serde_util::job_manifest_location_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn job_report_correct_errors(mut builder: crate::types::builders::JobReportBuilder) -> crate::types::builders::JobReportBuilder {
    if builder.enabled.is_none() {
        builder.enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn lifecycle_rule_correct_errors(
    mut builder: crate::types::builders::LifecycleRuleBuilder,
) -> crate::types::builders::LifecycleRuleBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExpirationStatus>().ok()
    }
    builder
}

pub(crate) fn multi_region_access_point_route_correct_errors(
    mut builder: crate::types::builders::MultiRegionAccessPointRouteBuilder,
) -> crate::types::builders::MultiRegionAccessPointRouteBuilder {
    if builder.traffic_dial_percentage.is_none() {
        builder.traffic_dial_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn object_lambda_access_point_correct_errors(
    mut builder: crate::types::builders::ObjectLambdaAccessPointBuilder,
) -> crate::types::builders::ObjectLambdaAccessPointBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn regional_bucket_correct_errors(
    mut builder: crate::types::builders::RegionalBucketBuilder,
) -> crate::types::builders::RegionalBucketBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.public_access_block_enabled.is_none() {
        builder.public_access_block_enabled = Some(Default::default())
    }
    if builder.creation_date.is_none() {
        builder.creation_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_tag_correct_errors(mut builder: crate::types::builders::S3TagBuilder) -> crate::types::builders::S3TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_lens_configuration_correct_errors(
    mut builder: crate::types::builders::StorageLensConfigurationBuilder,
) -> crate::types::builders::StorageLensConfigurationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.account_level.is_none() {
        builder.account_level = {
            let builder = crate::types::builders::AccountLevelBuilder::default();
            Some(crate::serde_util::account_level_correct_errors(builder).build())
        }
    }
    if builder.is_enabled.is_none() {
        builder.is_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn storage_lens_tag_correct_errors(
    mut builder: crate::types::builders::StorageLensTagBuilder,
) -> crate::types::builders::StorageLensTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn account_level_correct_errors(mut builder: crate::types::builders::AccountLevelBuilder) -> crate::types::builders::AccountLevelBuilder {
    if builder.bucket_level.is_none() {
        builder.bucket_level = {
            let builder = crate::types::builders::BucketLevelBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_multi_region_access_point_input_correct_errors(
    mut builder: crate::types::builders::CreateMultiRegionAccessPointInputBuilder,
) -> crate::types::builders::CreateMultiRegionAccessPointInputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.regions.is_none() {
        builder.regions = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_multi_region_access_point_input_correct_errors(
    mut builder: crate::types::builders::DeleteMultiRegionAccessPointInputBuilder,
) -> crate::types::builders::DeleteMultiRegionAccessPointInputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn job_manifest_location_correct_errors(
    mut builder: crate::types::builders::JobManifestLocationBuilder,
) -> crate::types::builders::JobManifestLocationBuilder {
    if builder.object_arn.is_none() {
        builder.object_arn = Some(Default::default())
    }
    if builder.e_tag.is_none() {
        builder.e_tag = Some(Default::default())
    }
    builder
}

pub(crate) fn job_manifest_spec_correct_errors(
    mut builder: crate::types::builders::JobManifestSpecBuilder,
) -> crate::types::builders::JobManifestSpecBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::JobManifestFormat>().ok()
    }
    builder
}

pub(crate) fn object_lambda_transformation_configuration_correct_errors(
    mut builder: crate::types::builders::ObjectLambdaTransformationConfigurationBuilder,
) -> crate::types::builders::ObjectLambdaTransformationConfigurationBuilder {
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    if builder.content_transformation.is_none() {
        builder.content_transformation = Some(crate::types::ObjectLambdaContentTransformation::Unknown)
    }
    builder
}

pub(crate) fn put_multi_region_access_point_policy_input_correct_errors(
    mut builder: crate::types::builders::PutMultiRegionAccessPointPolicyInputBuilder,
) -> crate::types::builders::PutMultiRegionAccessPointPolicyInputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.policy.is_none() {
        builder.policy = Some(Default::default())
    }
    builder
}

pub(crate) fn replication_rule_correct_errors(
    mut builder: crate::types::builders::ReplicationRuleBuilder,
) -> crate::types::builders::ReplicationRuleBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReplicationRuleStatus>().ok()
    }
    if builder.destination.is_none() {
        builder.destination = {
            let builder = crate::types::builders::DestinationBuilder::default();
            crate::serde_util::destination_correct_errors(builder).build().ok()
        }
    }
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_job_manifest_generator_correct_errors(
    mut builder: crate::types::builders::S3JobManifestGeneratorBuilder,
) -> crate::types::builders::S3JobManifestGeneratorBuilder {
    if builder.source_bucket.is_none() {
        builder.source_bucket = Some(Default::default())
    }
    if builder.enable_manifest_output.is_none() {
        builder.enable_manifest_output = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_set_object_legal_hold_operation_correct_errors(
    mut builder: crate::types::builders::S3SetObjectLegalHoldOperationBuilder,
) -> crate::types::builders::S3SetObjectLegalHoldOperationBuilder {
    if builder.legal_hold.is_none() {
        builder.legal_hold = {
            let builder = crate::types::builders::S3ObjectLockLegalHoldBuilder::default();
            crate::serde_util::s3_object_lock_legal_hold_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn s3_set_object_retention_operation_correct_errors(
    mut builder: crate::types::builders::S3SetObjectRetentionOperationBuilder,
) -> crate::types::builders::S3SetObjectRetentionOperationBuilder {
    if builder.retention.is_none() {
        builder.retention = {
            let builder = crate::types::builders::S3RetentionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn storage_lens_aws_org_correct_errors(
    mut builder: crate::types::builders::StorageLensAwsOrgBuilder,
) -> crate::types::builders::StorageLensAwsOrgBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_metrics_correct_errors(
    mut builder: crate::types::builders::CloudWatchMetricsBuilder,
) -> crate::types::builders::CloudWatchMetricsBuilder {
    if builder.is_enabled.is_none() {
        builder.is_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_marker_replication_correct_errors(
    mut builder: crate::types::builders::DeleteMarkerReplicationBuilder,
) -> crate::types::builders::DeleteMarkerReplicationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DeleteMarkerReplicationStatus>().ok()
    }
    builder
}

pub(crate) fn destination_correct_errors(mut builder: crate::types::builders::DestinationBuilder) -> crate::types::builders::DestinationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn existing_object_replication_correct_errors(
    mut builder: crate::types::builders::ExistingObjectReplicationBuilder,
) -> crate::types::builders::ExistingObjectReplicationBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExistingObjectReplicationStatus>().ok()
    }
    builder
}

pub(crate) fn s3_bucket_destination_correct_errors(
    mut builder: crate::types::builders::S3BucketDestinationBuilder,
) -> crate::types::builders::S3BucketDestinationBuilder {
    if builder.format.is_none() {
        builder.format = "no value was set".parse::<crate::types::Format>().ok()
    }
    if builder.output_schema_version.is_none() {
        builder.output_schema_version = "no value was set".parse::<crate::types::OutputSchemaVersion>().ok()
    }
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_manifest_output_location_correct_errors(
    mut builder: crate::types::builders::S3ManifestOutputLocationBuilder,
) -> crate::types::builders::S3ManifestOutputLocationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.manifest_format.is_none() {
        builder.manifest_format = "no value was set".parse::<crate::types::GeneratedManifestFormat>().ok()
    }
    builder
}

pub(crate) fn s3_object_lock_legal_hold_correct_errors(
    mut builder: crate::types::builders::S3ObjectLockLegalHoldBuilder,
) -> crate::types::builders::S3ObjectLockLegalHoldBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::S3ObjectLockLegalHoldStatus>().ok()
    }
    builder
}

pub(crate) fn access_control_translation_correct_errors(
    mut builder: crate::types::builders::AccessControlTranslationBuilder,
) -> crate::types::builders::AccessControlTranslationBuilder {
    if builder.owner.is_none() {
        builder.owner = "no value was set".parse::<crate::types::OwnerOverride>().ok()
    }
    builder
}

pub(crate) fn aws_lambda_transformation_correct_errors(
    mut builder: crate::types::builders::AwsLambdaTransformationBuilder,
) -> crate::types::builders::AwsLambdaTransformationBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn metrics_correct_errors(mut builder: crate::types::builders::MetricsBuilder) -> crate::types::builders::MetricsBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::MetricsStatus>().ok()
    }
    builder
}

pub(crate) fn prefix_level_correct_errors(mut builder: crate::types::builders::PrefixLevelBuilder) -> crate::types::builders::PrefixLevelBuilder {
    if builder.storage_metrics.is_none() {
        builder.storage_metrics = {
            let builder = crate::types::builders::PrefixLevelStorageMetricsBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn region_correct_errors(mut builder: crate::types::builders::RegionBuilder) -> crate::types::builders::RegionBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn replica_modifications_correct_errors(
    mut builder: crate::types::builders::ReplicaModificationsBuilder,
) -> crate::types::builders::ReplicaModificationsBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReplicaModificationsStatus>().ok()
    }
    builder
}

pub(crate) fn replication_time_correct_errors(
    mut builder: crate::types::builders::ReplicationTimeBuilder,
) -> crate::types::builders::ReplicationTimeBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ReplicationTimeStatus>().ok()
    }
    if builder.time.is_none() {
        builder.time = {
            let builder = crate::types::builders::ReplicationTimeValueBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn s3_access_control_list_correct_errors(
    mut builder: crate::types::builders::S3AccessControlListBuilder,
) -> crate::types::builders::S3AccessControlListBuilder {
    if builder.owner.is_none() {
        builder.owner = {
            let builder = crate::types::builders::S3ObjectOwnerBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sse_kms_encrypted_objects_correct_errors(
    mut builder: crate::types::builders::SseKmsEncryptedObjectsBuilder,
) -> crate::types::builders::SseKmsEncryptedObjectsBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::SseKmsEncryptedObjectsStatus>().ok()
    }
    builder
}

pub(crate) fn ssekms_correct_errors(mut builder: crate::types::builders::SsekmsBuilder) -> crate::types::builders::SsekmsBuilder {
    if builder.key_id.is_none() {
        builder.key_id = Some(Default::default())
    }
    builder
}

pub(crate) fn ssekms_encryption_correct_errors(
    mut builder: crate::types::builders::SsekmsEncryptionBuilder,
) -> crate::types::builders::SsekmsEncryptionBuilder {
    if builder.key_id.is_none() {
        builder.key_id = Some(Default::default())
    }
    builder
}
