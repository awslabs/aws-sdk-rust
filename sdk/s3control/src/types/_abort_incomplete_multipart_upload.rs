// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for abort incomplete multipart upload</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AbortIncompleteMultipartUpload {
    /// <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload to the Outposts bucket.</p>
    #[doc(hidden)]
    pub days_after_initiation: i32,
}
impl AbortIncompleteMultipartUpload {
    /// <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload to the Outposts bucket.</p>
    pub fn days_after_initiation(&self) -> i32 {
        self.days_after_initiation
    }
}
impl AbortIncompleteMultipartUpload {
    /// Creates a new builder-style object to manufacture [`AbortIncompleteMultipartUpload`](crate::types::AbortIncompleteMultipartUpload).
    pub fn builder() -> crate::types::builders::AbortIncompleteMultipartUploadBuilder {
        crate::types::builders::AbortIncompleteMultipartUploadBuilder::default()
    }
}

/// A builder for [`AbortIncompleteMultipartUpload`](crate::types::AbortIncompleteMultipartUpload).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AbortIncompleteMultipartUploadBuilder {
    pub(crate) days_after_initiation: std::option::Option<i32>,
}
impl AbortIncompleteMultipartUploadBuilder {
    /// <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload to the Outposts bucket.</p>
    pub fn days_after_initiation(mut self, input: i32) -> Self {
        self.days_after_initiation = Some(input);
        self
    }
    /// <p>Specifies the number of days after which Amazon S3 aborts an incomplete multipart upload to the Outposts bucket.</p>
    pub fn set_days_after_initiation(mut self, input: std::option::Option<i32>) -> Self {
        self.days_after_initiation = input;
        self
    }
    /// Consumes the builder and constructs a [`AbortIncompleteMultipartUpload`](crate::types::AbortIncompleteMultipartUpload).
    pub fn build(self) -> crate::types::AbortIncompleteMultipartUpload {
        crate::types::AbortIncompleteMultipartUpload {
            days_after_initiation: self.days_after_initiation.unwrap_or_default(),
        }
    }
}
