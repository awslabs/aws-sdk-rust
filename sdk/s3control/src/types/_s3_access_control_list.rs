// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3AccessControlList {
    /// <p></p>
    #[doc(hidden)]
    pub owner: std::option::Option<crate::types::S3ObjectOwner>,
    /// <p></p>
    #[doc(hidden)]
    pub grants: std::option::Option<std::vec::Vec<crate::types::S3Grant>>,
}
impl S3AccessControlList {
    /// <p></p>
    pub fn owner(&self) -> std::option::Option<&crate::types::S3ObjectOwner> {
        self.owner.as_ref()
    }
    /// <p></p>
    pub fn grants(&self) -> std::option::Option<&[crate::types::S3Grant]> {
        self.grants.as_deref()
    }
}
impl S3AccessControlList {
    /// Creates a new builder-style object to manufacture [`S3AccessControlList`](crate::types::S3AccessControlList).
    pub fn builder() -> crate::types::builders::S3AccessControlListBuilder {
        crate::types::builders::S3AccessControlListBuilder::default()
    }
}

/// A builder for [`S3AccessControlList`](crate::types::S3AccessControlList).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3AccessControlListBuilder {
    pub(crate) owner: std::option::Option<crate::types::S3ObjectOwner>,
    pub(crate) grants: std::option::Option<std::vec::Vec<crate::types::S3Grant>>,
}
impl S3AccessControlListBuilder {
    /// <p></p>
    pub fn owner(mut self, input: crate::types::S3ObjectOwner) -> Self {
        self.owner = Some(input);
        self
    }
    /// <p></p>
    pub fn set_owner(mut self, input: std::option::Option<crate::types::S3ObjectOwner>) -> Self {
        self.owner = input;
        self
    }
    /// Appends an item to `grants`.
    ///
    /// To override the contents of this collection use [`set_grants`](Self::set_grants).
    ///
    /// <p></p>
    pub fn grants(mut self, input: crate::types::S3Grant) -> Self {
        let mut v = self.grants.unwrap_or_default();
        v.push(input);
        self.grants = Some(v);
        self
    }
    /// <p></p>
    pub fn set_grants(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::S3Grant>>,
    ) -> Self {
        self.grants = input;
        self
    }
    /// Consumes the builder and constructs a [`S3AccessControlList`](crate::types::S3AccessControlList).
    pub fn build(self) -> crate::types::S3AccessControlList {
        crate::types::S3AccessControlList {
            owner: self.owner,
            grants: self.grants,
        }
    }
}
