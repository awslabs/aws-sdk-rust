// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Location details for where the generated manifest should be written.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ManifestOutputLocation {
    /// <p>The Account ID that owns the bucket the generated manifest is written to.</p>
    pub expected_manifest_bucket_owner: ::std::option::Option<::std::string::String>,
    /// <p>The bucket ARN the generated manifest should be written to.</p>
    pub bucket: ::std::string::String,
    /// <p>Prefix identifying one or more objects to which the manifest applies.</p>
    pub manifest_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Specifies what encryption should be used when the generated manifest objects are written.</p>
    pub manifest_encryption: ::std::option::Option<crate::types::GeneratedManifestEncryption>,
    /// <p>The format of the generated manifest.</p>
    pub manifest_format: crate::types::GeneratedManifestFormat,
}
impl S3ManifestOutputLocation {
    /// <p>The Account ID that owns the bucket the generated manifest is written to.</p>
    pub fn expected_manifest_bucket_owner(&self) -> ::std::option::Option<&str> {
        self.expected_manifest_bucket_owner.as_deref()
    }
    /// <p>The bucket ARN the generated manifest should be written to.</p>
    pub fn bucket(&self) -> &str {
        use std::ops::Deref;
        self.bucket.deref()
    }
    /// <p>Prefix identifying one or more objects to which the manifest applies.</p>
    pub fn manifest_prefix(&self) -> ::std::option::Option<&str> {
        self.manifest_prefix.as_deref()
    }
    /// <p>Specifies what encryption should be used when the generated manifest objects are written.</p>
    pub fn manifest_encryption(&self) -> ::std::option::Option<&crate::types::GeneratedManifestEncryption> {
        self.manifest_encryption.as_ref()
    }
    /// <p>The format of the generated manifest.</p>
    pub fn manifest_format(&self) -> &crate::types::GeneratedManifestFormat {
        &self.manifest_format
    }
}
impl S3ManifestOutputLocation {
    /// Creates a new builder-style object to manufacture [`S3ManifestOutputLocation`](crate::types::S3ManifestOutputLocation).
    pub fn builder() -> crate::types::builders::S3ManifestOutputLocationBuilder {
        crate::types::builders::S3ManifestOutputLocationBuilder::default()
    }
}

/// A builder for [`S3ManifestOutputLocation`](crate::types::S3ManifestOutputLocation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ManifestOutputLocationBuilder {
    pub(crate) expected_manifest_bucket_owner: ::std::option::Option<::std::string::String>,
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) manifest_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) manifest_encryption: ::std::option::Option<crate::types::GeneratedManifestEncryption>,
    pub(crate) manifest_format: ::std::option::Option<crate::types::GeneratedManifestFormat>,
}
impl S3ManifestOutputLocationBuilder {
    /// <p>The Account ID that owns the bucket the generated manifest is written to.</p>
    pub fn expected_manifest_bucket_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_manifest_bucket_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Account ID that owns the bucket the generated manifest is written to.</p>
    pub fn set_expected_manifest_bucket_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_manifest_bucket_owner = input;
        self
    }
    /// <p>The Account ID that owns the bucket the generated manifest is written to.</p>
    pub fn get_expected_manifest_bucket_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_manifest_bucket_owner
    }
    /// <p>The bucket ARN the generated manifest should be written to.</p>
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The bucket ARN the generated manifest should be written to.</p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The bucket ARN the generated manifest should be written to.</p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>Prefix identifying one or more objects to which the manifest applies.</p>
    pub fn manifest_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.manifest_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Prefix identifying one or more objects to which the manifest applies.</p>
    pub fn set_manifest_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.manifest_prefix = input;
        self
    }
    /// <p>Prefix identifying one or more objects to which the manifest applies.</p>
    pub fn get_manifest_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.manifest_prefix
    }
    /// <p>Specifies what encryption should be used when the generated manifest objects are written.</p>
    pub fn manifest_encryption(mut self, input: crate::types::GeneratedManifestEncryption) -> Self {
        self.manifest_encryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies what encryption should be used when the generated manifest objects are written.</p>
    pub fn set_manifest_encryption(mut self, input: ::std::option::Option<crate::types::GeneratedManifestEncryption>) -> Self {
        self.manifest_encryption = input;
        self
    }
    /// <p>Specifies what encryption should be used when the generated manifest objects are written.</p>
    pub fn get_manifest_encryption(&self) -> &::std::option::Option<crate::types::GeneratedManifestEncryption> {
        &self.manifest_encryption
    }
    /// <p>The format of the generated manifest.</p>
    /// This field is required.
    pub fn manifest_format(mut self, input: crate::types::GeneratedManifestFormat) -> Self {
        self.manifest_format = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the generated manifest.</p>
    pub fn set_manifest_format(mut self, input: ::std::option::Option<crate::types::GeneratedManifestFormat>) -> Self {
        self.manifest_format = input;
        self
    }
    /// <p>The format of the generated manifest.</p>
    pub fn get_manifest_format(&self) -> &::std::option::Option<crate::types::GeneratedManifestFormat> {
        &self.manifest_format
    }
    /// Consumes the builder and constructs a [`S3ManifestOutputLocation`](crate::types::S3ManifestOutputLocation).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket`](crate::types::builders::S3ManifestOutputLocationBuilder::bucket)
    /// - [`manifest_format`](crate::types::builders::S3ManifestOutputLocationBuilder::manifest_format)
    pub fn build(self) -> ::std::result::Result<crate::types::S3ManifestOutputLocation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3ManifestOutputLocation {
            expected_manifest_bucket_owner: self.expected_manifest_bucket_owner,
            bucket: self.bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket",
                    "bucket was not specified but it is required when building S3ManifestOutputLocation",
                )
            })?,
            manifest_prefix: self.manifest_prefix,
            manifest_encryption: self.manifest_encryption,
            manifest_format: self.manifest_format.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "manifest_format",
                    "manifest_format was not specified but it is required when building S3ManifestOutputLocation",
                )
            })?,
        })
    }
}
