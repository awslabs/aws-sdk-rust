// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Part of <code>ListStorageLensConfigurationResult</code>. Each entry includes the description of the S3 Storage Lens configuration, its home Region, whether it is enabled, its Amazon Resource Name (ARN), and config ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListStorageLensConfigurationEntry {
    /// <p>A container for the S3 Storage Lens configuration ID.</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the S3 Storage Lens configuration. This property is read-only.</p>
    pub storage_lens_arn: ::std::string::String,
    /// <p>A container for the S3 Storage Lens home Region. Your metrics data is stored and retained in your designated S3 Storage Lens home Region.</p>
    pub home_region: ::std::string::String,
    /// <p>A container for whether the S3 Storage Lens configuration is enabled. This property is required.</p>
    pub is_enabled: bool,
}
impl ListStorageLensConfigurationEntry {
    /// <p>A container for the S3 Storage Lens configuration ID.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the S3 Storage Lens configuration. This property is read-only.</p>
    pub fn storage_lens_arn(&self) -> &str {
        use std::ops::Deref;
        self.storage_lens_arn.deref()
    }
    /// <p>A container for the S3 Storage Lens home Region. Your metrics data is stored and retained in your designated S3 Storage Lens home Region.</p>
    pub fn home_region(&self) -> &str {
        use std::ops::Deref;
        self.home_region.deref()
    }
    /// <p>A container for whether the S3 Storage Lens configuration is enabled. This property is required.</p>
    pub fn is_enabled(&self) -> bool {
        self.is_enabled
    }
}
impl ListStorageLensConfigurationEntry {
    /// Creates a new builder-style object to manufacture [`ListStorageLensConfigurationEntry`](crate::types::ListStorageLensConfigurationEntry).
    pub fn builder() -> crate::types::builders::ListStorageLensConfigurationEntryBuilder {
        crate::types::builders::ListStorageLensConfigurationEntryBuilder::default()
    }
}

/// A builder for [`ListStorageLensConfigurationEntry`](crate::types::ListStorageLensConfigurationEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListStorageLensConfigurationEntryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_lens_arn: ::std::option::Option<::std::string::String>,
    pub(crate) home_region: ::std::option::Option<::std::string::String>,
    pub(crate) is_enabled: ::std::option::Option<bool>,
}
impl ListStorageLensConfigurationEntryBuilder {
    /// <p>A container for the S3 Storage Lens configuration ID.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A container for the S3 Storage Lens configuration ID.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>A container for the S3 Storage Lens configuration ID.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the S3 Storage Lens configuration. This property is read-only.</p>
    /// This field is required.
    pub fn storage_lens_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_lens_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the S3 Storage Lens configuration. This property is read-only.</p>
    pub fn set_storage_lens_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_lens_arn = input;
        self
    }
    /// <p>The ARN of the S3 Storage Lens configuration. This property is read-only.</p>
    pub fn get_storage_lens_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_lens_arn
    }
    /// <p>A container for the S3 Storage Lens home Region. Your metrics data is stored and retained in your designated S3 Storage Lens home Region.</p>
    /// This field is required.
    pub fn home_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.home_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A container for the S3 Storage Lens home Region. Your metrics data is stored and retained in your designated S3 Storage Lens home Region.</p>
    pub fn set_home_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.home_region = input;
        self
    }
    /// <p>A container for the S3 Storage Lens home Region. Your metrics data is stored and retained in your designated S3 Storage Lens home Region.</p>
    pub fn get_home_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.home_region
    }
    /// <p>A container for whether the S3 Storage Lens configuration is enabled. This property is required.</p>
    pub fn is_enabled(mut self, input: bool) -> Self {
        self.is_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>A container for whether the S3 Storage Lens configuration is enabled. This property is required.</p>
    pub fn set_is_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_enabled = input;
        self
    }
    /// <p>A container for whether the S3 Storage Lens configuration is enabled. This property is required.</p>
    pub fn get_is_enabled(&self) -> &::std::option::Option<bool> {
        &self.is_enabled
    }
    /// Consumes the builder and constructs a [`ListStorageLensConfigurationEntry`](crate::types::ListStorageLensConfigurationEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ListStorageLensConfigurationEntryBuilder::id)
    /// - [`storage_lens_arn`](crate::types::builders::ListStorageLensConfigurationEntryBuilder::storage_lens_arn)
    /// - [`home_region`](crate::types::builders::ListStorageLensConfigurationEntryBuilder::home_region)
    pub fn build(self) -> ::std::result::Result<crate::types::ListStorageLensConfigurationEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListStorageLensConfigurationEntry {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ListStorageLensConfigurationEntry",
                )
            })?,
            storage_lens_arn: self.storage_lens_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "storage_lens_arn",
                    "storage_lens_arn was not specified but it is required when building ListStorageLensConfigurationEntry",
                )
            })?,
            home_region: self.home_region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "home_region",
                    "home_region was not specified but it is required when building ListStorageLensConfigurationEntry",
                )
            })?,
            is_enabled: self.is_enabled.unwrap_or_default(),
        })
    }
}
