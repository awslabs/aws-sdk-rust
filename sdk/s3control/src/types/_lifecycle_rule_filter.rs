// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The container for the filter of the lifecycle rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LifecycleRuleFilter {
    /// <p>Prefix identifying one or more objects to which the rule applies.</p> <important>
    /// <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints"> XML related object key constraints</a>.</p>
    /// </important>
    #[doc(hidden)]
    pub prefix: std::option::Option<std::string::String>,
    /// <p>A container for a key-value name pair.</p>
    #[doc(hidden)]
    pub tag: std::option::Option<crate::types::S3Tag>,
    /// <p>The container for the <code>AND</code> condition for the lifecycle rule.</p>
    #[doc(hidden)]
    pub and: std::option::Option<crate::types::LifecycleRuleAndOperator>,
    /// <p>Minimum object size to which the rule applies.</p>
    #[doc(hidden)]
    pub object_size_greater_than: std::option::Option<i64>,
    /// <p>Maximum object size to which the rule applies.</p>
    #[doc(hidden)]
    pub object_size_less_than: std::option::Option<i64>,
}
impl LifecycleRuleFilter {
    /// <p>Prefix identifying one or more objects to which the rule applies.</p> <important>
    /// <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints"> XML related object key constraints</a>.</p>
    /// </important>
    pub fn prefix(&self) -> std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p>A container for a key-value name pair.</p>
    pub fn tag(&self) -> std::option::Option<&crate::types::S3Tag> {
        self.tag.as_ref()
    }
    /// <p>The container for the <code>AND</code> condition for the lifecycle rule.</p>
    pub fn and(&self) -> std::option::Option<&crate::types::LifecycleRuleAndOperator> {
        self.and.as_ref()
    }
    /// <p>Minimum object size to which the rule applies.</p>
    pub fn object_size_greater_than(&self) -> std::option::Option<i64> {
        self.object_size_greater_than
    }
    /// <p>Maximum object size to which the rule applies.</p>
    pub fn object_size_less_than(&self) -> std::option::Option<i64> {
        self.object_size_less_than
    }
}
impl LifecycleRuleFilter {
    /// Creates a new builder-style object to manufacture [`LifecycleRuleFilter`](crate::types::LifecycleRuleFilter).
    pub fn builder() -> crate::types::builders::LifecycleRuleFilterBuilder {
        crate::types::builders::LifecycleRuleFilterBuilder::default()
    }
}

/// A builder for [`LifecycleRuleFilter`](crate::types::LifecycleRuleFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LifecycleRuleFilterBuilder {
    pub(crate) prefix: std::option::Option<std::string::String>,
    pub(crate) tag: std::option::Option<crate::types::S3Tag>,
    pub(crate) and: std::option::Option<crate::types::LifecycleRuleAndOperator>,
    pub(crate) object_size_greater_than: std::option::Option<i64>,
    pub(crate) object_size_less_than: std::option::Option<i64>,
}
impl LifecycleRuleFilterBuilder {
    /// <p>Prefix identifying one or more objects to which the rule applies.</p> <important>
    /// <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints"> XML related object key constraints</a>.</p>
    /// </important>
    pub fn prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix = Some(input.into());
        self
    }
    /// <p>Prefix identifying one or more objects to which the rule applies.</p> <important>
    /// <p>Replacement must be made for object keys containing special characters (such as carriage returns) when using XML requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html#object-key-xml-related-constraints"> XML related object key constraints</a>.</p>
    /// </important>
    pub fn set_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>A container for a key-value name pair.</p>
    pub fn tag(mut self, input: crate::types::S3Tag) -> Self {
        self.tag = Some(input);
        self
    }
    /// <p>A container for a key-value name pair.</p>
    pub fn set_tag(mut self, input: std::option::Option<crate::types::S3Tag>) -> Self {
        self.tag = input;
        self
    }
    /// <p>The container for the <code>AND</code> condition for the lifecycle rule.</p>
    pub fn and(mut self, input: crate::types::LifecycleRuleAndOperator) -> Self {
        self.and = Some(input);
        self
    }
    /// <p>The container for the <code>AND</code> condition for the lifecycle rule.</p>
    pub fn set_and(
        mut self,
        input: std::option::Option<crate::types::LifecycleRuleAndOperator>,
    ) -> Self {
        self.and = input;
        self
    }
    /// <p>Minimum object size to which the rule applies.</p>
    pub fn object_size_greater_than(mut self, input: i64) -> Self {
        self.object_size_greater_than = Some(input);
        self
    }
    /// <p>Minimum object size to which the rule applies.</p>
    pub fn set_object_size_greater_than(mut self, input: std::option::Option<i64>) -> Self {
        self.object_size_greater_than = input;
        self
    }
    /// <p>Maximum object size to which the rule applies.</p>
    pub fn object_size_less_than(mut self, input: i64) -> Self {
        self.object_size_less_than = Some(input);
        self
    }
    /// <p>Maximum object size to which the rule applies.</p>
    pub fn set_object_size_less_than(mut self, input: std::option::Option<i64>) -> Self {
        self.object_size_less_than = input;
        self
    }
    /// Consumes the builder and constructs a [`LifecycleRuleFilter`](crate::types::LifecycleRuleFilter).
    pub fn build(self) -> crate::types::LifecycleRuleFilter {
        crate::types::LifecycleRuleFilter {
            prefix: self.prefix,
            tag: self.tag,
            and: self.and,
            object_size_greater_than: self.object_size_greater_than,
            object_size_less_than: self.object_size_less_than,
        }
    }
}
