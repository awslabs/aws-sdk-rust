// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3ObjectMetadata {
    /// <p></p>
    #[doc(hidden)]
    pub cache_control: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub content_disposition: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub content_encoding: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub content_language: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub user_metadata:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p></p>
    #[doc(hidden)]
    pub content_length: std::option::Option<i64>,
    /// <p></p>
    #[doc(hidden)]
    pub content_md5: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub http_expires_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p></p>
    #[doc(hidden)]
    pub requester_charged: bool,
    /// <p></p>
    #[doc(hidden)]
    pub sse_algorithm: std::option::Option<crate::types::S3SseAlgorithm>,
}
impl S3ObjectMetadata {
    /// <p></p>
    pub fn cache_control(&self) -> std::option::Option<&str> {
        self.cache_control.as_deref()
    }
    /// <p></p>
    pub fn content_disposition(&self) -> std::option::Option<&str> {
        self.content_disposition.as_deref()
    }
    /// <p></p>
    pub fn content_encoding(&self) -> std::option::Option<&str> {
        self.content_encoding.as_deref()
    }
    /// <p></p>
    pub fn content_language(&self) -> std::option::Option<&str> {
        self.content_language.as_deref()
    }
    /// <p></p>
    pub fn user_metadata(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.user_metadata.as_ref()
    }
    /// <p></p>
    pub fn content_length(&self) -> std::option::Option<i64> {
        self.content_length
    }
    /// <p></p>
    pub fn content_md5(&self) -> std::option::Option<&str> {
        self.content_md5.as_deref()
    }
    /// <p></p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
    /// <p></p>
    pub fn http_expires_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.http_expires_date.as_ref()
    }
    /// <p></p>
    pub fn requester_charged(&self) -> bool {
        self.requester_charged
    }
    /// <p></p>
    pub fn sse_algorithm(&self) -> std::option::Option<&crate::types::S3SseAlgorithm> {
        self.sse_algorithm.as_ref()
    }
}
impl S3ObjectMetadata {
    /// Creates a new builder-style object to manufacture [`S3ObjectMetadata`](crate::types::S3ObjectMetadata).
    pub fn builder() -> crate::types::builders::S3ObjectMetadataBuilder {
        crate::types::builders::S3ObjectMetadataBuilder::default()
    }
}

/// A builder for [`S3ObjectMetadata`](crate::types::S3ObjectMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ObjectMetadataBuilder {
    pub(crate) cache_control: std::option::Option<std::string::String>,
    pub(crate) content_disposition: std::option::Option<std::string::String>,
    pub(crate) content_encoding: std::option::Option<std::string::String>,
    pub(crate) content_language: std::option::Option<std::string::String>,
    pub(crate) user_metadata:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) content_length: std::option::Option<i64>,
    pub(crate) content_md5: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    pub(crate) http_expires_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) requester_charged: std::option::Option<bool>,
    pub(crate) sse_algorithm: std::option::Option<crate::types::S3SseAlgorithm>,
}
impl S3ObjectMetadataBuilder {
    /// <p></p>
    pub fn cache_control(mut self, input: impl Into<std::string::String>) -> Self {
        self.cache_control = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_cache_control(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cache_control = input;
        self
    }
    /// <p></p>
    pub fn content_disposition(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_disposition = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_disposition(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.content_disposition = input;
        self
    }
    /// <p></p>
    pub fn content_encoding(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_encoding = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_encoding(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_encoding = input;
        self
    }
    /// <p></p>
    pub fn content_language(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_language = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_language = input;
        self
    }
    /// Adds a key-value pair to `user_metadata`.
    ///
    /// To override the contents of this collection use [`set_user_metadata`](Self::set_user_metadata).
    ///
    /// <p></p>
    pub fn user_metadata(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.user_metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.user_metadata = Some(hash_map);
        self
    }
    /// <p></p>
    pub fn set_user_metadata(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.user_metadata = input;
        self
    }
    /// <p></p>
    pub fn content_length(mut self, input: i64) -> Self {
        self.content_length = Some(input);
        self
    }
    /// <p></p>
    pub fn set_content_length(mut self, input: std::option::Option<i64>) -> Self {
        self.content_length = input;
        self
    }
    /// <p></p>
    pub fn content_md5(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_md5 = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_md5(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_md5 = input;
        self
    }
    /// <p></p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p></p>
    pub fn http_expires_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.http_expires_date = Some(input);
        self
    }
    /// <p></p>
    pub fn set_http_expires_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.http_expires_date = input;
        self
    }
    /// <p></p>
    pub fn requester_charged(mut self, input: bool) -> Self {
        self.requester_charged = Some(input);
        self
    }
    /// <p></p>
    pub fn set_requester_charged(mut self, input: std::option::Option<bool>) -> Self {
        self.requester_charged = input;
        self
    }
    /// <p></p>
    pub fn sse_algorithm(mut self, input: crate::types::S3SseAlgorithm) -> Self {
        self.sse_algorithm = Some(input);
        self
    }
    /// <p></p>
    pub fn set_sse_algorithm(
        mut self,
        input: std::option::Option<crate::types::S3SseAlgorithm>,
    ) -> Self {
        self.sse_algorithm = input;
        self
    }
    /// Consumes the builder and constructs a [`S3ObjectMetadata`](crate::types::S3ObjectMetadata).
    pub fn build(self) -> crate::types::S3ObjectMetadata {
        crate::types::S3ObjectMetadata {
            cache_control: self.cache_control,
            content_disposition: self.content_disposition,
            content_encoding: self.content_encoding,
            content_language: self.content_language,
            user_metadata: self.user_metadata,
            content_length: self.content_length,
            content_md5: self.content_md5,
            content_type: self.content_type,
            http_expires_date: self.http_expires_date,
            requester_charged: self.requester_charged.unwrap_or_default(),
            sse_algorithm: self.sse_algorithm,
        }
    }
}
