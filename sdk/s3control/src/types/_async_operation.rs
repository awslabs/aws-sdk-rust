// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for the information about an asynchronous operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AsyncOperation {
    /// <p>The time that the request was sent to the service.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The specific operation for the asynchronous request.</p>
    #[doc(hidden)]
    pub operation: std::option::Option<crate::types::AsyncOperationName>,
    /// <p>The request token associated with the request.</p>
    #[doc(hidden)]
    pub request_token_arn: std::option::Option<std::string::String>,
    /// <p>The parameters associated with the request.</p>
    #[doc(hidden)]
    pub request_parameters: std::option::Option<crate::types::AsyncRequestParameters>,
    /// <p>The current status of the request.</p>
    #[doc(hidden)]
    pub request_status: std::option::Option<std::string::String>,
    /// <p>The details of the response.</p>
    #[doc(hidden)]
    pub response_details: std::option::Option<crate::types::AsyncResponseDetails>,
}
impl AsyncOperation {
    /// <p>The time that the request was sent to the service.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The specific operation for the asynchronous request.</p>
    pub fn operation(&self) -> std::option::Option<&crate::types::AsyncOperationName> {
        self.operation.as_ref()
    }
    /// <p>The request token associated with the request.</p>
    pub fn request_token_arn(&self) -> std::option::Option<&str> {
        self.request_token_arn.as_deref()
    }
    /// <p>The parameters associated with the request.</p>
    pub fn request_parameters(&self) -> std::option::Option<&crate::types::AsyncRequestParameters> {
        self.request_parameters.as_ref()
    }
    /// <p>The current status of the request.</p>
    pub fn request_status(&self) -> std::option::Option<&str> {
        self.request_status.as_deref()
    }
    /// <p>The details of the response.</p>
    pub fn response_details(&self) -> std::option::Option<&crate::types::AsyncResponseDetails> {
        self.response_details.as_ref()
    }
}
impl AsyncOperation {
    /// Creates a new builder-style object to manufacture [`AsyncOperation`](crate::types::AsyncOperation).
    pub fn builder() -> crate::types::builders::AsyncOperationBuilder {
        crate::types::builders::AsyncOperationBuilder::default()
    }
}

/// A builder for [`AsyncOperation`](crate::types::AsyncOperation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AsyncOperationBuilder {
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) operation: std::option::Option<crate::types::AsyncOperationName>,
    pub(crate) request_token_arn: std::option::Option<std::string::String>,
    pub(crate) request_parameters: std::option::Option<crate::types::AsyncRequestParameters>,
    pub(crate) request_status: std::option::Option<std::string::String>,
    pub(crate) response_details: std::option::Option<crate::types::AsyncResponseDetails>,
}
impl AsyncOperationBuilder {
    /// <p>The time that the request was sent to the service.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time that the request was sent to the service.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The specific operation for the asynchronous request.</p>
    pub fn operation(mut self, input: crate::types::AsyncOperationName) -> Self {
        self.operation = Some(input);
        self
    }
    /// <p>The specific operation for the asynchronous request.</p>
    pub fn set_operation(
        mut self,
        input: std::option::Option<crate::types::AsyncOperationName>,
    ) -> Self {
        self.operation = input;
        self
    }
    /// <p>The request token associated with the request.</p>
    pub fn request_token_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_token_arn = Some(input.into());
        self
    }
    /// <p>The request token associated with the request.</p>
    pub fn set_request_token_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.request_token_arn = input;
        self
    }
    /// <p>The parameters associated with the request.</p>
    pub fn request_parameters(mut self, input: crate::types::AsyncRequestParameters) -> Self {
        self.request_parameters = Some(input);
        self
    }
    /// <p>The parameters associated with the request.</p>
    pub fn set_request_parameters(
        mut self,
        input: std::option::Option<crate::types::AsyncRequestParameters>,
    ) -> Self {
        self.request_parameters = input;
        self
    }
    /// <p>The current status of the request.</p>
    pub fn request_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_status = Some(input.into());
        self
    }
    /// <p>The current status of the request.</p>
    pub fn set_request_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_status = input;
        self
    }
    /// <p>The details of the response.</p>
    pub fn response_details(mut self, input: crate::types::AsyncResponseDetails) -> Self {
        self.response_details = Some(input);
        self
    }
    /// <p>The details of the response.</p>
    pub fn set_response_details(
        mut self,
        input: std::option::Option<crate::types::AsyncResponseDetails>,
    ) -> Self {
        self.response_details = input;
        self
    }
    /// Consumes the builder and constructs a [`AsyncOperation`](crate::types::AsyncOperation).
    pub fn build(self) -> crate::types::AsyncOperation {
        crate::types::AsyncOperation {
            creation_time: self.creation_time,
            operation: self.operation,
            request_token_arn: self.request_token_arn,
            request_parameters: self.request_parameters,
            request_status: self.request_status,
            response_details: self.response_details,
        }
    }
}
