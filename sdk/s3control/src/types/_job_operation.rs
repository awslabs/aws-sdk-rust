// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The operation that you want this job to perform on every object listed in the manifest. For more information about the available operations, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-operations.html">Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobOperation {
    /// <p>Directs the specified job to invoke an Lambda function on every object in the manifest.</p>
    #[doc(hidden)]
    pub lambda_invoke: std::option::Option<crate::types::LambdaInvokeOperation>,
    /// <p>Directs the specified job to run a PUT Copy object call on every object in the manifest.</p>
    #[doc(hidden)]
    pub s3_put_object_copy: std::option::Option<crate::types::S3CopyObjectOperation>,
    /// <p>Directs the specified job to run a <code>PutObjectAcl</code> call on every object in the manifest.</p>
    #[doc(hidden)]
    pub s3_put_object_acl: std::option::Option<crate::types::S3SetObjectAclOperation>,
    /// <p>Directs the specified job to run a PUT Object tagging call on every object in the manifest.</p>
    #[doc(hidden)]
    pub s3_put_object_tagging: std::option::Option<crate::types::S3SetObjectTaggingOperation>,
    /// <p>Directs the specified job to execute a DELETE Object tagging call on every object in the manifest.</p>
    #[doc(hidden)]
    pub s3_delete_object_tagging: std::option::Option<crate::types::S3DeleteObjectTaggingOperation>,
    /// <p>Directs the specified job to initiate restore requests for every archived object in the manifest.</p>
    #[doc(hidden)]
    pub s3_initiate_restore_object:
        std::option::Option<crate::types::S3InitiateRestoreObjectOperation>,
    /// <p>Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes every object to the underlying <code>PutObjectLegalHold</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    #[doc(hidden)]
    pub s3_put_object_legal_hold: std::option::Option<crate::types::S3SetObjectLegalHoldOperation>,
    /// <p>Contains the configuration parameters for the Object Lock retention action for an S3 Batch Operations job. Batch Operations passes every object to the underlying <code>PutObjectRetention</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    #[doc(hidden)]
    pub s3_put_object_retention: std::option::Option<crate::types::S3SetObjectRetentionOperation>,
    /// <p>Directs the specified job to invoke <code>ReplicateObject</code> on every object in the job's manifest.</p>
    #[doc(hidden)]
    pub s3_replicate_object: std::option::Option<crate::types::S3ReplicateObjectOperation>,
}
impl JobOperation {
    /// <p>Directs the specified job to invoke an Lambda function on every object in the manifest.</p>
    pub fn lambda_invoke(&self) -> std::option::Option<&crate::types::LambdaInvokeOperation> {
        self.lambda_invoke.as_ref()
    }
    /// <p>Directs the specified job to run a PUT Copy object call on every object in the manifest.</p>
    pub fn s3_put_object_copy(&self) -> std::option::Option<&crate::types::S3CopyObjectOperation> {
        self.s3_put_object_copy.as_ref()
    }
    /// <p>Directs the specified job to run a <code>PutObjectAcl</code> call on every object in the manifest.</p>
    pub fn s3_put_object_acl(&self) -> std::option::Option<&crate::types::S3SetObjectAclOperation> {
        self.s3_put_object_acl.as_ref()
    }
    /// <p>Directs the specified job to run a PUT Object tagging call on every object in the manifest.</p>
    pub fn s3_put_object_tagging(
        &self,
    ) -> std::option::Option<&crate::types::S3SetObjectTaggingOperation> {
        self.s3_put_object_tagging.as_ref()
    }
    /// <p>Directs the specified job to execute a DELETE Object tagging call on every object in the manifest.</p>
    pub fn s3_delete_object_tagging(
        &self,
    ) -> std::option::Option<&crate::types::S3DeleteObjectTaggingOperation> {
        self.s3_delete_object_tagging.as_ref()
    }
    /// <p>Directs the specified job to initiate restore requests for every archived object in the manifest.</p>
    pub fn s3_initiate_restore_object(
        &self,
    ) -> std::option::Option<&crate::types::S3InitiateRestoreObjectOperation> {
        self.s3_initiate_restore_object.as_ref()
    }
    /// <p>Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes every object to the underlying <code>PutObjectLegalHold</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn s3_put_object_legal_hold(
        &self,
    ) -> std::option::Option<&crate::types::S3SetObjectLegalHoldOperation> {
        self.s3_put_object_legal_hold.as_ref()
    }
    /// <p>Contains the configuration parameters for the Object Lock retention action for an S3 Batch Operations job. Batch Operations passes every object to the underlying <code>PutObjectRetention</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn s3_put_object_retention(
        &self,
    ) -> std::option::Option<&crate::types::S3SetObjectRetentionOperation> {
        self.s3_put_object_retention.as_ref()
    }
    /// <p>Directs the specified job to invoke <code>ReplicateObject</code> on every object in the job's manifest.</p>
    pub fn s3_replicate_object(
        &self,
    ) -> std::option::Option<&crate::types::S3ReplicateObjectOperation> {
        self.s3_replicate_object.as_ref()
    }
}
impl JobOperation {
    /// Creates a new builder-style object to manufacture [`JobOperation`](crate::types::JobOperation).
    pub fn builder() -> crate::types::builders::JobOperationBuilder {
        crate::types::builders::JobOperationBuilder::default()
    }
}

/// A builder for [`JobOperation`](crate::types::JobOperation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobOperationBuilder {
    pub(crate) lambda_invoke: std::option::Option<crate::types::LambdaInvokeOperation>,
    pub(crate) s3_put_object_copy: std::option::Option<crate::types::S3CopyObjectOperation>,
    pub(crate) s3_put_object_acl: std::option::Option<crate::types::S3SetObjectAclOperation>,
    pub(crate) s3_put_object_tagging:
        std::option::Option<crate::types::S3SetObjectTaggingOperation>,
    pub(crate) s3_delete_object_tagging:
        std::option::Option<crate::types::S3DeleteObjectTaggingOperation>,
    pub(crate) s3_initiate_restore_object:
        std::option::Option<crate::types::S3InitiateRestoreObjectOperation>,
    pub(crate) s3_put_object_legal_hold:
        std::option::Option<crate::types::S3SetObjectLegalHoldOperation>,
    pub(crate) s3_put_object_retention:
        std::option::Option<crate::types::S3SetObjectRetentionOperation>,
    pub(crate) s3_replicate_object: std::option::Option<crate::types::S3ReplicateObjectOperation>,
}
impl JobOperationBuilder {
    /// <p>Directs the specified job to invoke an Lambda function on every object in the manifest.</p>
    pub fn lambda_invoke(mut self, input: crate::types::LambdaInvokeOperation) -> Self {
        self.lambda_invoke = Some(input);
        self
    }
    /// <p>Directs the specified job to invoke an Lambda function on every object in the manifest.</p>
    pub fn set_lambda_invoke(
        mut self,
        input: std::option::Option<crate::types::LambdaInvokeOperation>,
    ) -> Self {
        self.lambda_invoke = input;
        self
    }
    /// <p>Directs the specified job to run a PUT Copy object call on every object in the manifest.</p>
    pub fn s3_put_object_copy(mut self, input: crate::types::S3CopyObjectOperation) -> Self {
        self.s3_put_object_copy = Some(input);
        self
    }
    /// <p>Directs the specified job to run a PUT Copy object call on every object in the manifest.</p>
    pub fn set_s3_put_object_copy(
        mut self,
        input: std::option::Option<crate::types::S3CopyObjectOperation>,
    ) -> Self {
        self.s3_put_object_copy = input;
        self
    }
    /// <p>Directs the specified job to run a <code>PutObjectAcl</code> call on every object in the manifest.</p>
    pub fn s3_put_object_acl(mut self, input: crate::types::S3SetObjectAclOperation) -> Self {
        self.s3_put_object_acl = Some(input);
        self
    }
    /// <p>Directs the specified job to run a <code>PutObjectAcl</code> call on every object in the manifest.</p>
    pub fn set_s3_put_object_acl(
        mut self,
        input: std::option::Option<crate::types::S3SetObjectAclOperation>,
    ) -> Self {
        self.s3_put_object_acl = input;
        self
    }
    /// <p>Directs the specified job to run a PUT Object tagging call on every object in the manifest.</p>
    pub fn s3_put_object_tagging(
        mut self,
        input: crate::types::S3SetObjectTaggingOperation,
    ) -> Self {
        self.s3_put_object_tagging = Some(input);
        self
    }
    /// <p>Directs the specified job to run a PUT Object tagging call on every object in the manifest.</p>
    pub fn set_s3_put_object_tagging(
        mut self,
        input: std::option::Option<crate::types::S3SetObjectTaggingOperation>,
    ) -> Self {
        self.s3_put_object_tagging = input;
        self
    }
    /// <p>Directs the specified job to execute a DELETE Object tagging call on every object in the manifest.</p>
    pub fn s3_delete_object_tagging(
        mut self,
        input: crate::types::S3DeleteObjectTaggingOperation,
    ) -> Self {
        self.s3_delete_object_tagging = Some(input);
        self
    }
    /// <p>Directs the specified job to execute a DELETE Object tagging call on every object in the manifest.</p>
    pub fn set_s3_delete_object_tagging(
        mut self,
        input: std::option::Option<crate::types::S3DeleteObjectTaggingOperation>,
    ) -> Self {
        self.s3_delete_object_tagging = input;
        self
    }
    /// <p>Directs the specified job to initiate restore requests for every archived object in the manifest.</p>
    pub fn s3_initiate_restore_object(
        mut self,
        input: crate::types::S3InitiateRestoreObjectOperation,
    ) -> Self {
        self.s3_initiate_restore_object = Some(input);
        self
    }
    /// <p>Directs the specified job to initiate restore requests for every archived object in the manifest.</p>
    pub fn set_s3_initiate_restore_object(
        mut self,
        input: std::option::Option<crate::types::S3InitiateRestoreObjectOperation>,
    ) -> Self {
        self.s3_initiate_restore_object = input;
        self
    }
    /// <p>Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes every object to the underlying <code>PutObjectLegalHold</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn s3_put_object_legal_hold(
        mut self,
        input: crate::types::S3SetObjectLegalHoldOperation,
    ) -> Self {
        self.s3_put_object_legal_hold = Some(input);
        self
    }
    /// <p>Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes every object to the underlying <code>PutObjectLegalHold</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_s3_put_object_legal_hold(
        mut self,
        input: std::option::Option<crate::types::S3SetObjectLegalHoldOperation>,
    ) -> Self {
        self.s3_put_object_legal_hold = input;
        self
    }
    /// <p>Contains the configuration parameters for the Object Lock retention action for an S3 Batch Operations job. Batch Operations passes every object to the underlying <code>PutObjectRetention</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn s3_put_object_retention(
        mut self,
        input: crate::types::S3SetObjectRetentionOperation,
    ) -> Self {
        self.s3_put_object_retention = Some(input);
        self
    }
    /// <p>Contains the configuration parameters for the Object Lock retention action for an S3 Batch Operations job. Batch Operations passes every object to the underlying <code>PutObjectRetention</code> API. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-retention-date.html">Using S3 Object Lock retention with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_s3_put_object_retention(
        mut self,
        input: std::option::Option<crate::types::S3SetObjectRetentionOperation>,
    ) -> Self {
        self.s3_put_object_retention = input;
        self
    }
    /// <p>Directs the specified job to invoke <code>ReplicateObject</code> on every object in the job's manifest.</p>
    pub fn s3_replicate_object(mut self, input: crate::types::S3ReplicateObjectOperation) -> Self {
        self.s3_replicate_object = Some(input);
        self
    }
    /// <p>Directs the specified job to invoke <code>ReplicateObject</code> on every object in the job's manifest.</p>
    pub fn set_s3_replicate_object(
        mut self,
        input: std::option::Option<crate::types::S3ReplicateObjectOperation>,
    ) -> Self {
        self.s3_replicate_object = input;
        self
    }
    /// Consumes the builder and constructs a [`JobOperation`](crate::types::JobOperation).
    pub fn build(self) -> crate::types::JobOperation {
        crate::types::JobOperation {
            lambda_invoke: self.lambda_invoke,
            s3_put_object_copy: self.s3_put_object_copy,
            s3_put_object_acl: self.s3_put_object_acl,
            s3_put_object_tagging: self.s3_put_object_tagging,
            s3_delete_object_tagging: self.s3_delete_object_tagging,
            s3_initiate_restore_object: self.s3_initiate_restore_object,
            s3_put_object_legal_hold: self.s3_put_object_legal_hold,
            s3_put_object_retention: self.s3_put_object_retention,
            s3_replicate_object: self.s3_replicate_object,
        }
    }
}
