// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error details for the failed asynchronous operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AsyncErrorDetails {
    /// <p>A string that uniquely identifies the error condition.</p>
    #[doc(hidden)]
    pub code: std::option::Option<std::string::String>,
    /// <p>A generic description of the error condition in English.</p>
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>The identifier of the resource associated with the error.</p>
    #[doc(hidden)]
    pub resource: std::option::Option<std::string::String>,
    /// <p>The ID of the request associated with the error.</p>
    #[doc(hidden)]
    pub request_id: std::option::Option<std::string::String>,
}
impl AsyncErrorDetails {
    /// <p>A string that uniquely identifies the error condition.</p>
    pub fn code(&self) -> std::option::Option<&str> {
        self.code.as_deref()
    }
    /// <p>A generic description of the error condition in English.</p>
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
    /// <p>The identifier of the resource associated with the error.</p>
    pub fn resource(&self) -> std::option::Option<&str> {
        self.resource.as_deref()
    }
    /// <p>The ID of the request associated with the error.</p>
    pub fn request_id(&self) -> std::option::Option<&str> {
        self.request_id.as_deref()
    }
}
impl AsyncErrorDetails {
    /// Creates a new builder-style object to manufacture [`AsyncErrorDetails`](crate::types::AsyncErrorDetails).
    pub fn builder() -> crate::types::builders::AsyncErrorDetailsBuilder {
        crate::types::builders::AsyncErrorDetailsBuilder::default()
    }
}

/// A builder for [`AsyncErrorDetails`](crate::types::AsyncErrorDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AsyncErrorDetailsBuilder {
    pub(crate) code: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) resource: std::option::Option<std::string::String>,
    pub(crate) request_id: std::option::Option<std::string::String>,
}
impl AsyncErrorDetailsBuilder {
    /// <p>A string that uniquely identifies the error condition.</p>
    pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
        self.code = Some(input.into());
        self
    }
    /// <p>A string that uniquely identifies the error condition.</p>
    pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>A generic description of the error condition in English.</p>
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    /// <p>A generic description of the error condition in English.</p>
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>The identifier of the resource associated with the error.</p>
    pub fn resource(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource = Some(input.into());
        self
    }
    /// <p>The identifier of the resource associated with the error.</p>
    pub fn set_resource(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The ID of the request associated with the error.</p>
    pub fn request_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.request_id = Some(input.into());
        self
    }
    /// <p>The ID of the request associated with the error.</p>
    pub fn set_request_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.request_id = input;
        self
    }
    /// Consumes the builder and constructs a [`AsyncErrorDetails`](crate::types::AsyncErrorDetails).
    pub fn build(self) -> crate::types::AsyncErrorDetails {
        crate::types::AsyncErrorDetails {
            code: self.code,
            message: self.message,
            resource: self.resource,
            request_id: self.request_id,
        }
    }
}
