// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration information for a job's manifest.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct JobManifest {
    /// <p>Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.</p>
    pub spec: ::std::option::Option<crate::types::JobManifestSpec>,
    /// <p>Contains the information required to locate the specified job's manifest.</p>
    pub location: ::std::option::Option<crate::types::JobManifestLocation>,
}
impl JobManifest {
    /// <p>Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.</p>
    pub fn spec(&self) -> ::std::option::Option<&crate::types::JobManifestSpec> {
        self.spec.as_ref()
    }
    /// <p>Contains the information required to locate the specified job's manifest.</p>
    pub fn location(&self) -> ::std::option::Option<&crate::types::JobManifestLocation> {
        self.location.as_ref()
    }
}
impl JobManifest {
    /// Creates a new builder-style object to manufacture [`JobManifest`](crate::types::JobManifest).
    pub fn builder() -> crate::types::builders::JobManifestBuilder {
        crate::types::builders::JobManifestBuilder::default()
    }
}

/// A builder for [`JobManifest`](crate::types::JobManifest).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct JobManifestBuilder {
    pub(crate) spec: ::std::option::Option<crate::types::JobManifestSpec>,
    pub(crate) location: ::std::option::Option<crate::types::JobManifestLocation>,
}
impl JobManifestBuilder {
    /// <p>Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.</p>
    /// This field is required.
    pub fn spec(mut self, input: crate::types::JobManifestSpec) -> Self {
        self.spec = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.</p>
    pub fn set_spec(mut self, input: ::std::option::Option<crate::types::JobManifestSpec>) -> Self {
        self.spec = input;
        self
    }
    /// <p>Describes the format of the specified job's manifest. If the manifest is in CSV format, also describes the columns contained within the manifest.</p>
    pub fn get_spec(&self) -> &::std::option::Option<crate::types::JobManifestSpec> {
        &self.spec
    }
    /// <p>Contains the information required to locate the specified job's manifest.</p>
    /// This field is required.
    pub fn location(mut self, input: crate::types::JobManifestLocation) -> Self {
        self.location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the information required to locate the specified job's manifest.</p>
    pub fn set_location(mut self, input: ::std::option::Option<crate::types::JobManifestLocation>) -> Self {
        self.location = input;
        self
    }
    /// <p>Contains the information required to locate the specified job's manifest.</p>
    pub fn get_location(&self) -> &::std::option::Option<crate::types::JobManifestLocation> {
        &self.location
    }
    /// Consumes the builder and constructs a [`JobManifest`](crate::types::JobManifest).
    pub fn build(self) -> crate::types::JobManifest {
        crate::types::JobManifest {
            spec: self.spec,
            location: self.location,
        }
    }
}
