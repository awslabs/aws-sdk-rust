// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An access point with an attached Lambda function used to access transformed data from an Amazon S3 bucket.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ObjectLambdaAccessPoint {
    /// <p>The name of the Object Lambda Access Point.</p>
    pub name: ::std::string::String,
    /// <p>Specifies the ARN for the Object Lambda Access Point.</p>
    pub object_lambda_access_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>The alias of the Object Lambda Access Point.</p>
    pub alias: ::std::option::Option<crate::types::ObjectLambdaAccessPointAlias>,
}
impl ObjectLambdaAccessPoint {
    /// <p>The name of the Object Lambda Access Point.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Specifies the ARN for the Object Lambda Access Point.</p>
    pub fn object_lambda_access_point_arn(&self) -> ::std::option::Option<&str> {
        self.object_lambda_access_point_arn.as_deref()
    }
    /// <p>The alias of the Object Lambda Access Point.</p>
    pub fn alias(&self) -> ::std::option::Option<&crate::types::ObjectLambdaAccessPointAlias> {
        self.alias.as_ref()
    }
}
impl ObjectLambdaAccessPoint {
    /// Creates a new builder-style object to manufacture [`ObjectLambdaAccessPoint`](crate::types::ObjectLambdaAccessPoint).
    pub fn builder() -> crate::types::builders::ObjectLambdaAccessPointBuilder {
        crate::types::builders::ObjectLambdaAccessPointBuilder::default()
    }
}

/// A builder for [`ObjectLambdaAccessPoint`](crate::types::ObjectLambdaAccessPoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ObjectLambdaAccessPointBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) object_lambda_access_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) alias: ::std::option::Option<crate::types::ObjectLambdaAccessPointAlias>,
}
impl ObjectLambdaAccessPointBuilder {
    /// <p>The name of the Object Lambda Access Point.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Object Lambda Access Point.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Object Lambda Access Point.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies the ARN for the Object Lambda Access Point.</p>
    pub fn object_lambda_access_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.object_lambda_access_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ARN for the Object Lambda Access Point.</p>
    pub fn set_object_lambda_access_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.object_lambda_access_point_arn = input;
        self
    }
    /// <p>Specifies the ARN for the Object Lambda Access Point.</p>
    pub fn get_object_lambda_access_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.object_lambda_access_point_arn
    }
    /// <p>The alias of the Object Lambda Access Point.</p>
    pub fn alias(mut self, input: crate::types::ObjectLambdaAccessPointAlias) -> Self {
        self.alias = ::std::option::Option::Some(input);
        self
    }
    /// <p>The alias of the Object Lambda Access Point.</p>
    pub fn set_alias(mut self, input: ::std::option::Option<crate::types::ObjectLambdaAccessPointAlias>) -> Self {
        self.alias = input;
        self
    }
    /// <p>The alias of the Object Lambda Access Point.</p>
    pub fn get_alias(&self) -> &::std::option::Option<crate::types::ObjectLambdaAccessPointAlias> {
        &self.alias
    }
    /// Consumes the builder and constructs a [`ObjectLambdaAccessPoint`](crate::types::ObjectLambdaAccessPoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ObjectLambdaAccessPointBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ObjectLambdaAccessPoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ObjectLambdaAccessPoint {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ObjectLambdaAccessPoint",
                )
            })?,
            object_lambda_access_point_arn: self.object_lambda_access_point_arn,
            alias: self.alias,
        })
    }
}
