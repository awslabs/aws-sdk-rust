// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A filter that you can use to specify whether replica modification sync is enabled. S3 on Outposts replica modification sync can help you keep object metadata synchronized between replicas and source objects. By default, S3 on Outposts replicates metadata from the source objects to the replicas only. When replica modification sync is enabled, S3 on Outposts replicates metadata changes made to the replica copies back to the source object, making the replication bidirectional.</p>
/// <p>To replicate object metadata modifications on replicas, you can specify this element and set the <code>Status</code> of this element to <code>Enabled</code>.</p> <note>
/// <p>You must enable replica modification sync on the source and destination buckets to replicate replica metadata changes between the source and the replicas.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicaModifications {
    /// <p>Specifies whether S3 on Outposts replicates modifications to object metadata on replicas.</p>
    pub status: crate::types::ReplicaModificationsStatus,
}
impl ReplicaModifications {
    /// <p>Specifies whether S3 on Outposts replicates modifications to object metadata on replicas.</p>
    pub fn status(&self) -> &crate::types::ReplicaModificationsStatus {
        &self.status
    }
}
impl ReplicaModifications {
    /// Creates a new builder-style object to manufacture [`ReplicaModifications`](crate::types::ReplicaModifications).
    pub fn builder() -> crate::types::builders::ReplicaModificationsBuilder {
        crate::types::builders::ReplicaModificationsBuilder::default()
    }
}

/// A builder for [`ReplicaModifications`](crate::types::ReplicaModifications).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicaModificationsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::ReplicaModificationsStatus>,
}
impl ReplicaModificationsBuilder {
    /// <p>Specifies whether S3 on Outposts replicates modifications to object metadata on replicas.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ReplicaModificationsStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether S3 on Outposts replicates modifications to object metadata on replicas.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ReplicaModificationsStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies whether S3 on Outposts replicates modifications to object metadata on replicas.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ReplicaModificationsStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`ReplicaModifications`](crate::types::ReplicaModifications).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::ReplicaModificationsBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::ReplicaModifications, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReplicaModifications {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ReplicaModifications",
                )
            })?,
        })
    }
}
