// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the configuration for an S3 Object Lock legal hold operation that an S3 Batch Operations job passes to every object to the underlying <code>PutObjectLegalHold</code> API operation. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/batch-ops-legal-hold.html">Using S3 Object Lock legal hold with S3 Batch Operations</a> in the <i>Amazon S3 User Guide</i>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3SetObjectLegalHoldOperation {
    /// <p>Contains the Object Lock legal hold status to be applied to all objects in the Batch Operations job.</p>
    pub legal_hold: ::std::option::Option<crate::types::S3ObjectLockLegalHold>,
}
impl S3SetObjectLegalHoldOperation {
    /// <p>Contains the Object Lock legal hold status to be applied to all objects in the Batch Operations job.</p>
    pub fn legal_hold(&self) -> ::std::option::Option<&crate::types::S3ObjectLockLegalHold> {
        self.legal_hold.as_ref()
    }
}
impl S3SetObjectLegalHoldOperation {
    /// Creates a new builder-style object to manufacture [`S3SetObjectLegalHoldOperation`](crate::types::S3SetObjectLegalHoldOperation).
    pub fn builder() -> crate::types::builders::S3SetObjectLegalHoldOperationBuilder {
        crate::types::builders::S3SetObjectLegalHoldOperationBuilder::default()
    }
}

/// A builder for [`S3SetObjectLegalHoldOperation`](crate::types::S3SetObjectLegalHoldOperation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3SetObjectLegalHoldOperationBuilder {
    pub(crate) legal_hold: ::std::option::Option<crate::types::S3ObjectLockLegalHold>,
}
impl S3SetObjectLegalHoldOperationBuilder {
    /// <p>Contains the Object Lock legal hold status to be applied to all objects in the Batch Operations job.</p>
    /// This field is required.
    pub fn legal_hold(mut self, input: crate::types::S3ObjectLockLegalHold) -> Self {
        self.legal_hold = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the Object Lock legal hold status to be applied to all objects in the Batch Operations job.</p>
    pub fn set_legal_hold(mut self, input: ::std::option::Option<crate::types::S3ObjectLockLegalHold>) -> Self {
        self.legal_hold = input;
        self
    }
    /// <p>Contains the Object Lock legal hold status to be applied to all objects in the Batch Operations job.</p>
    pub fn get_legal_hold(&self) -> &::std::option::Option<crate::types::S3ObjectLockLegalHold> {
        &self.legal_hold
    }
    /// Consumes the builder and constructs a [`S3SetObjectLegalHoldOperation`](crate::types::S3SetObjectLegalHoldOperation).
    pub fn build(self) -> crate::types::S3SetObjectLegalHoldOperation {
        crate::types::S3SetObjectLegalHoldOperation { legal_hold: self.legal_hold }
    }
}
