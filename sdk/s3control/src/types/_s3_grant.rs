// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Grant {
    /// <p></p>
    #[doc(hidden)]
    pub grantee: std::option::Option<crate::types::S3Grantee>,
    /// <p></p>
    #[doc(hidden)]
    pub permission: std::option::Option<crate::types::S3Permission>,
}
impl S3Grant {
    /// <p></p>
    pub fn grantee(&self) -> std::option::Option<&crate::types::S3Grantee> {
        self.grantee.as_ref()
    }
    /// <p></p>
    pub fn permission(&self) -> std::option::Option<&crate::types::S3Permission> {
        self.permission.as_ref()
    }
}
impl S3Grant {
    /// Creates a new builder-style object to manufacture [`S3Grant`](crate::types::S3Grant).
    pub fn builder() -> crate::types::builders::S3GrantBuilder {
        crate::types::builders::S3GrantBuilder::default()
    }
}

/// A builder for [`S3Grant`](crate::types::S3Grant).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3GrantBuilder {
    pub(crate) grantee: std::option::Option<crate::types::S3Grantee>,
    pub(crate) permission: std::option::Option<crate::types::S3Permission>,
}
impl S3GrantBuilder {
    /// <p></p>
    pub fn grantee(mut self, input: crate::types::S3Grantee) -> Self {
        self.grantee = Some(input);
        self
    }
    /// <p></p>
    pub fn set_grantee(mut self, input: std::option::Option<crate::types::S3Grantee>) -> Self {
        self.grantee = input;
        self
    }
    /// <p></p>
    pub fn permission(mut self, input: crate::types::S3Permission) -> Self {
        self.permission = Some(input);
        self
    }
    /// <p></p>
    pub fn set_permission(
        mut self,
        input: std::option::Option<crate::types::S3Permission>,
    ) -> Self {
        self.permission = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Grant`](crate::types::S3Grant).
    pub fn build(self) -> crate::types::S3Grant {
        crate::types::S3Grant {
            grantee: self.grantee,
            permission: self.permission,
        }
    }
}
