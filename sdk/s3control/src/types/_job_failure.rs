// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>If this job failed, this element indicates why the job failed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobFailure {
    /// <p>The failure code, if any, for the specified job.</p>
    #[doc(hidden)]
    pub failure_code: std::option::Option<std::string::String>,
    /// <p>The failure reason, if any, for the specified job.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
}
impl JobFailure {
    /// <p>The failure code, if any, for the specified job.</p>
    pub fn failure_code(&self) -> std::option::Option<&str> {
        self.failure_code.as_deref()
    }
    /// <p>The failure reason, if any, for the specified job.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl JobFailure {
    /// Creates a new builder-style object to manufacture [`JobFailure`](crate::types::JobFailure).
    pub fn builder() -> crate::types::builders::JobFailureBuilder {
        crate::types::builders::JobFailureBuilder::default()
    }
}

/// A builder for [`JobFailure`](crate::types::JobFailure).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobFailureBuilder {
    pub(crate) failure_code: std::option::Option<std::string::String>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
}
impl JobFailureBuilder {
    /// <p>The failure code, if any, for the specified job.</p>
    pub fn failure_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_code = Some(input.into());
        self
    }
    /// <p>The failure code, if any, for the specified job.</p>
    pub fn set_failure_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure reason, if any, for the specified job.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The failure reason, if any, for the specified job.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`JobFailure`](crate::types::JobFailure).
    pub fn build(self) -> crate::types::JobFailure {
        crate::types::JobFailure {
            failure_code: self.failure_code,
            failure_reason: self.failure_reason,
        }
    }
}
