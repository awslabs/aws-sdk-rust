// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for enabling Amazon CloudWatch publishing for S3 Storage Lens metrics.</p>
/// <p>For more information about publishing S3 Storage Lens metrics to CloudWatch, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/storage_lens_view_metrics_cloudwatch.html">Monitor S3 Storage Lens metrics in CloudWatch</a> in the <i>Amazon S3 User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CloudWatchMetrics {
    /// <p>A container that indicates whether CloudWatch publishing for S3 Storage Lens metrics is enabled. A value of <code>true</code> indicates that CloudWatch publishing for S3 Storage Lens metrics is enabled.</p>
    #[doc(hidden)]
    pub is_enabled: bool,
}
impl CloudWatchMetrics {
    /// <p>A container that indicates whether CloudWatch publishing for S3 Storage Lens metrics is enabled. A value of <code>true</code> indicates that CloudWatch publishing for S3 Storage Lens metrics is enabled.</p>
    pub fn is_enabled(&self) -> bool {
        self.is_enabled
    }
}
impl CloudWatchMetrics {
    /// Creates a new builder-style object to manufacture [`CloudWatchMetrics`](crate::types::CloudWatchMetrics).
    pub fn builder() -> crate::types::builders::CloudWatchMetricsBuilder {
        crate::types::builders::CloudWatchMetricsBuilder::default()
    }
}

/// A builder for [`CloudWatchMetrics`](crate::types::CloudWatchMetrics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CloudWatchMetricsBuilder {
    pub(crate) is_enabled: std::option::Option<bool>,
}
impl CloudWatchMetricsBuilder {
    /// <p>A container that indicates whether CloudWatch publishing for S3 Storage Lens metrics is enabled. A value of <code>true</code> indicates that CloudWatch publishing for S3 Storage Lens metrics is enabled.</p>
    pub fn is_enabled(mut self, input: bool) -> Self {
        self.is_enabled = Some(input);
        self
    }
    /// <p>A container that indicates whether CloudWatch publishing for S3 Storage Lens metrics is enabled. A value of <code>true</code> indicates that CloudWatch publishing for S3 Storage Lens metrics is enabled.</p>
    pub fn set_is_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.is_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`CloudWatchMetrics`](crate::types::CloudWatchMetrics).
    pub fn build(self) -> crate::types::CloudWatchMetrics {
        crate::types::CloudWatchMetrics {
            is_enabled: self.is_enabled.unwrap_or_default(),
        }
    }
}
