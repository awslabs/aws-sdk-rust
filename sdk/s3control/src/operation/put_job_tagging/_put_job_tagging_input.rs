// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutJobTaggingInput {
    /// <p>The Amazon Web Services account ID associated with the S3 Batch Operations job.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID for the S3 Batch Operations job whose tags you want to replace.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The set of tags to associate with the S3 Batch Operations job.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>,
}
impl PutJobTaggingInput {
    /// <p>The Amazon Web Services account ID associated with the S3 Batch Operations job.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The ID for the S3 Batch Operations job whose tags you want to replace.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The set of tags to associate with the S3 Batch Operations job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::S3Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PutJobTaggingInput {
    /// Creates a new builder-style object to manufacture [`PutJobTaggingInput`](crate::operation::put_job_tagging::PutJobTaggingInput).
    pub fn builder() -> crate::operation::put_job_tagging::builders::PutJobTaggingInputBuilder {
        crate::operation::put_job_tagging::builders::PutJobTaggingInputBuilder::default()
    }
}

/// A builder for [`PutJobTaggingInput`](crate::operation::put_job_tagging::PutJobTaggingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutJobTaggingInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>,
}
impl PutJobTaggingInputBuilder {
    /// <p>The Amazon Web Services account ID associated with the S3 Batch Operations job.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID associated with the S3 Batch Operations job.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID associated with the S3 Batch Operations job.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The ID for the S3 Batch Operations job whose tags you want to replace.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the S3 Batch Operations job whose tags you want to replace.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID for the S3 Batch Operations job whose tags you want to replace.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The set of tags to associate with the S3 Batch Operations job.</p>
    pub fn tags(mut self, input: crate::types::S3Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of tags to associate with the S3 Batch Operations job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::S3Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The set of tags to associate with the S3 Batch Operations job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::S3Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PutJobTaggingInput`](crate::operation::put_job_tagging::PutJobTaggingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_job_tagging::PutJobTaggingInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_job_tagging::PutJobTaggingInput {
            account_id: self.account_id,
            job_id: self.job_id,
            tags: self.tags,
        })
    }
}
