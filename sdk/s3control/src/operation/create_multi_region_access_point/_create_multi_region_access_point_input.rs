// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateMultiRegionAccessPointInput {
    /// <p>The Amazon Web Services account ID for the owner of the Multi-Region Access Point. The owner of the Multi-Region Access Point also must own the underlying buckets.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>An idempotency token used to identify the request and guarantee that requests are unique.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>A container element containing details about the Multi-Region Access Point.</p>
    pub details: ::std::option::Option<crate::types::CreateMultiRegionAccessPointInput>,
}
impl CreateMultiRegionAccessPointInput {
    /// <p>The Amazon Web Services account ID for the owner of the Multi-Region Access Point. The owner of the Multi-Region Access Point also must own the underlying buckets.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>An idempotency token used to identify the request and guarantee that requests are unique.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>A container element containing details about the Multi-Region Access Point.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::CreateMultiRegionAccessPointInput> {
        self.details.as_ref()
    }
}
impl CreateMultiRegionAccessPointInput {
    /// Creates a new builder-style object to manufacture [`CreateMultiRegionAccessPointInput`](crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput).
    pub fn builder() -> crate::operation::create_multi_region_access_point::builders::CreateMultiRegionAccessPointInputBuilder {
        crate::operation::create_multi_region_access_point::builders::CreateMultiRegionAccessPointInputBuilder::default()
    }
}

/// A builder for [`CreateMultiRegionAccessPointInput`](crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateMultiRegionAccessPointInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) details: ::std::option::Option<crate::types::CreateMultiRegionAccessPointInput>,
}
impl CreateMultiRegionAccessPointInputBuilder {
    /// <p>The Amazon Web Services account ID for the owner of the Multi-Region Access Point. The owner of the Multi-Region Access Point also must own the underlying buckets.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID for the owner of the Multi-Region Access Point. The owner of the Multi-Region Access Point also must own the underlying buckets.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID for the owner of the Multi-Region Access Point. The owner of the Multi-Region Access Point also must own the underlying buckets.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>An idempotency token used to identify the request and guarantee that requests are unique.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An idempotency token used to identify the request and guarantee that requests are unique.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>An idempotency token used to identify the request and guarantee that requests are unique.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>A container element containing details about the Multi-Region Access Point.</p>
    /// This field is required.
    pub fn details(mut self, input: crate::types::CreateMultiRegionAccessPointInput) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A container element containing details about the Multi-Region Access Point.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::CreateMultiRegionAccessPointInput>) -> Self {
        self.details = input;
        self
    }
    /// <p>A container element containing details about the Multi-Region Access Point.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::CreateMultiRegionAccessPointInput> {
        &self.details
    }
    /// Consumes the builder and constructs a [`CreateMultiRegionAccessPointInput`](crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput {
            account_id: self.account_id,
            client_token: self.client_token,
            details: self.details,
        })
    }
}
