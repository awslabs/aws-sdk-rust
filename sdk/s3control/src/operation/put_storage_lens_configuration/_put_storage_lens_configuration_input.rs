// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutStorageLensConfigurationInput {
    /// <p>The ID of the S3 Storage Lens configuration.</p>
    pub config_id: ::std::option::Option<::std::string::String>,
    /// <p>The account ID of the requester.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The S3 Storage Lens configuration.</p>
    pub storage_lens_configuration: ::std::option::Option<crate::types::StorageLensConfiguration>,
    /// <p>The tag set of the S3 Storage Lens configuration.</p> <note>
    /// <p>You can set up to a maximum of 50 tags.</p>
    /// </note>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::StorageLensTag>>,
}
impl PutStorageLensConfigurationInput {
    /// <p>The ID of the S3 Storage Lens configuration.</p>
    pub fn config_id(&self) -> ::std::option::Option<&str> {
        self.config_id.as_deref()
    }
    /// <p>The account ID of the requester.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The S3 Storage Lens configuration.</p>
    pub fn storage_lens_configuration(&self) -> ::std::option::Option<&crate::types::StorageLensConfiguration> {
        self.storage_lens_configuration.as_ref()
    }
    /// <p>The tag set of the S3 Storage Lens configuration.</p> <note>
    /// <p>You can set up to a maximum of 50 tags.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::StorageLensTag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl PutStorageLensConfigurationInput {
    /// Creates a new builder-style object to manufacture [`PutStorageLensConfigurationInput`](crate::operation::put_storage_lens_configuration::PutStorageLensConfigurationInput).
    pub fn builder() -> crate::operation::put_storage_lens_configuration::builders::PutStorageLensConfigurationInputBuilder {
        crate::operation::put_storage_lens_configuration::builders::PutStorageLensConfigurationInputBuilder::default()
    }
}

/// A builder for [`PutStorageLensConfigurationInput`](crate::operation::put_storage_lens_configuration::PutStorageLensConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutStorageLensConfigurationInputBuilder {
    pub(crate) config_id: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_lens_configuration: ::std::option::Option<crate::types::StorageLensConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::StorageLensTag>>,
}
impl PutStorageLensConfigurationInputBuilder {
    /// <p>The ID of the S3 Storage Lens configuration.</p>
    /// This field is required.
    pub fn config_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.config_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the S3 Storage Lens configuration.</p>
    pub fn set_config_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.config_id = input;
        self
    }
    /// <p>The ID of the S3 Storage Lens configuration.</p>
    pub fn get_config_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.config_id
    }
    /// <p>The account ID of the requester.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of the requester.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID of the requester.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The S3 Storage Lens configuration.</p>
    /// This field is required.
    pub fn storage_lens_configuration(mut self, input: crate::types::StorageLensConfiguration) -> Self {
        self.storage_lens_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 Storage Lens configuration.</p>
    pub fn set_storage_lens_configuration(mut self, input: ::std::option::Option<crate::types::StorageLensConfiguration>) -> Self {
        self.storage_lens_configuration = input;
        self
    }
    /// <p>The S3 Storage Lens configuration.</p>
    pub fn get_storage_lens_configuration(&self) -> &::std::option::Option<crate::types::StorageLensConfiguration> {
        &self.storage_lens_configuration
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tag set of the S3 Storage Lens configuration.</p> <note>
    /// <p>You can set up to a maximum of 50 tags.</p>
    /// </note>
    pub fn tags(mut self, input: crate::types::StorageLensTag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tag set of the S3 Storage Lens configuration.</p> <note>
    /// <p>You can set up to a maximum of 50 tags.</p>
    /// </note>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StorageLensTag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tag set of the S3 Storage Lens configuration.</p> <note>
    /// <p>You can set up to a maximum of 50 tags.</p>
    /// </note>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StorageLensTag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`PutStorageLensConfigurationInput`](crate::operation::put_storage_lens_configuration::PutStorageLensConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_storage_lens_configuration::PutStorageLensConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_storage_lens_configuration::PutStorageLensConfigurationInput {
            config_id: self.config_id,
            account_id: self.account_id,
            storage_lens_configuration: self.storage_lens_configuration,
            tags: self.tags,
        })
    }
}
