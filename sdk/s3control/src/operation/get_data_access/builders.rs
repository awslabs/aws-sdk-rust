// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_data_access::_get_data_access_output::GetDataAccessOutputBuilder;

pub use crate::operation::get_data_access::_get_data_access_input::GetDataAccessInputBuilder;

impl crate::operation::get_data_access::builders::GetDataAccessInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_data_access::GetDataAccessOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_access::GetDataAccessError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_data_access();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetDataAccess`.
///
/// <p>Returns a temporary access credential from S3 Access Grants to the grantee or client application. The <a href="https://docs.aws.amazon.com/STS/latest/APIReference/API_Credentials.html">temporary credential</a> is an Amazon Web Services STS token that grants them access to the S3 data.</p>
/// <dl>
/// <dt>
/// Permissions
/// </dt>
/// <dd>
/// <p>You must have the <code>s3:GetDataAccess</code> permission to use this operation.</p>
/// </dd>
/// <dt>
/// Additional Permissions
/// </dt>
/// <dd>
/// <p>The IAM role that S3 Access Grants assumes must have the following permissions specified in the trust policy when registering the location: <code>sts:AssumeRole</code>, for directory users or groups <code>sts:SetContext</code>, and for IAM users or roles <code>sts:SetSourceIdentity</code>.</p>
/// </dd>
/// </dl>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetDataAccessFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_data_access::builders::GetDataAccessInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_data_access::GetDataAccessOutput,
        crate::operation::get_data_access::GetDataAccessError,
    > for GetDataAccessFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_data_access::GetDataAccessOutput,
            crate::operation::get_data_access::GetDataAccessError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetDataAccessFluentBuilder {
    /// Creates a new `GetDataAccess`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetDataAccess as a reference.
    pub fn as_input(&self) -> &crate::operation::get_data_access::builders::GetDataAccessInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_data_access::GetDataAccessOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_data_access::GetDataAccessError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_data_access::GetDataAccess::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_data_access::GetDataAccess::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_data_access::GetDataAccessOutput,
        crate::operation::get_data_access::GetDataAccessError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the Amazon Web Services account that is making this request.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that is making this request.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The ID of the Amazon Web Services account that is making this request.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_account_id()
    }
    /// <p>The S3 URI path of the data to which you are requesting temporary access credentials. If the requesting account has an access grant for this data, S3 Access Grants vends temporary access credentials in the response.</p>
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.target(input.into());
        self
    }
    /// <p>The S3 URI path of the data to which you are requesting temporary access credentials. If the requesting account has an access grant for this data, S3 Access Grants vends temporary access credentials in the response.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_target(input);
        self
    }
    /// <p>The S3 URI path of the data to which you are requesting temporary access credentials. If the requesting account has an access grant for this data, S3 Access Grants vends temporary access credentials in the response.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_target()
    }
    /// <p>The type of permission granted to your S3 data, which can be set to one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> – Grant read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> – Grant write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> – Grant both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn permission(mut self, input: crate::types::Permission) -> Self {
        self.inner = self.inner.permission(input);
        self
    }
    /// <p>The type of permission granted to your S3 data, which can be set to one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> – Grant read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> – Grant write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> – Grant both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn set_permission(mut self, input: ::std::option::Option<crate::types::Permission>) -> Self {
        self.inner = self.inner.set_permission(input);
        self
    }
    /// <p>The type of permission granted to your S3 data, which can be set to one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>READ</code> – Grant read-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>WRITE</code> – Grant write-only access to the S3 data.</p></li>
    /// <li>
    /// <p><code>READWRITE</code> – Grant both read and write access to the S3 data.</p></li>
    /// </ul>
    pub fn get_permission(&self) -> &::std::option::Option<crate::types::Permission> {
        self.inner.get_permission()
    }
    /// <p>The session duration, in seconds, of the temporary access credential that S3 Access Grants vends to the grantee or client application. The default value is 1 hour, but the grantee can specify a range from 900 seconds (15 minutes) up to 43200 seconds (12 hours). If the grantee requests a value higher than this maximum, the operation fails.</p>
    pub fn duration_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.duration_seconds(input);
        self
    }
    /// <p>The session duration, in seconds, of the temporary access credential that S3 Access Grants vends to the grantee or client application. The default value is 1 hour, but the grantee can specify a range from 900 seconds (15 minutes) up to 43200 seconds (12 hours). If the grantee requests a value higher than this maximum, the operation fails.</p>
    pub fn set_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_duration_seconds(input);
        self
    }
    /// <p>The session duration, in seconds, of the temporary access credential that S3 Access Grants vends to the grantee or client application. The default value is 1 hour, but the grantee can specify a range from 900 seconds (15 minutes) up to 43200 seconds (12 hours). If the grantee requests a value higher than this maximum, the operation fails.</p>
    pub fn get_duration_seconds(&self) -> &::std::option::Option<i32> {
        self.inner.get_duration_seconds()
    }
    /// <p>The scope of the temporary access credential that S3 Access Grants vends to the grantee or client application.</p>
    /// <ul>
    /// <li>
    /// <p><code>Default</code> – The scope of the returned temporary access token is the scope of the grant that is closest to the target scope.</p></li>
    /// <li>
    /// <p><code>Minimal</code> – The scope of the returned temporary access token is the same as the requested target scope as long as the requested scope is the same as or a subset of the grant scope.</p></li>
    /// </ul>
    pub fn privilege(mut self, input: crate::types::Privilege) -> Self {
        self.inner = self.inner.privilege(input);
        self
    }
    /// <p>The scope of the temporary access credential that S3 Access Grants vends to the grantee or client application.</p>
    /// <ul>
    /// <li>
    /// <p><code>Default</code> – The scope of the returned temporary access token is the scope of the grant that is closest to the target scope.</p></li>
    /// <li>
    /// <p><code>Minimal</code> – The scope of the returned temporary access token is the same as the requested target scope as long as the requested scope is the same as or a subset of the grant scope.</p></li>
    /// </ul>
    pub fn set_privilege(mut self, input: ::std::option::Option<crate::types::Privilege>) -> Self {
        self.inner = self.inner.set_privilege(input);
        self
    }
    /// <p>The scope of the temporary access credential that S3 Access Grants vends to the grantee or client application.</p>
    /// <ul>
    /// <li>
    /// <p><code>Default</code> – The scope of the returned temporary access token is the scope of the grant that is closest to the target scope.</p></li>
    /// <li>
    /// <p><code>Minimal</code> – The scope of the returned temporary access token is the same as the requested target scope as long as the requested scope is the same as or a subset of the grant scope.</p></li>
    /// </ul>
    pub fn get_privilege(&self) -> &::std::option::Option<crate::types::Privilege> {
        self.inner.get_privilege()
    }
    /// <p>The type of <code>Target</code>. The only possible value is <code>Object</code>. Pass this value if the target data that you would like to access is a path to an object. Do not pass this value if the target data is a bucket or a bucket and a prefix.</p>
    pub fn target_type(mut self, input: crate::types::S3PrefixType) -> Self {
        self.inner = self.inner.target_type(input);
        self
    }
    /// <p>The type of <code>Target</code>. The only possible value is <code>Object</code>. Pass this value if the target data that you would like to access is a path to an object. Do not pass this value if the target data is a bucket or a bucket and a prefix.</p>
    pub fn set_target_type(mut self, input: ::std::option::Option<crate::types::S3PrefixType>) -> Self {
        self.inner = self.inner.set_target_type(input);
        self
    }
    /// <p>The type of <code>Target</code>. The only possible value is <code>Object</code>. Pass this value if the target data that you would like to access is a path to an object. Do not pass this value if the target data is a bucket or a bucket and a prefix.</p>
    pub fn get_target_type(&self) -> &::std::option::Option<crate::types::S3PrefixType> {
        self.inner.get_target_type()
    }
}
