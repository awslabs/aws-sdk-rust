// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetAccessPointPolicyStatusForObjectLambda`](crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda::set_account_id): <p>The account ID for the account that owns the specified Object Lambda Access Point.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda::set_name): <p>The name of the Object Lambda Access Point.</p>
    /// - On success, responds with [`GetAccessPointPolicyStatusForObjectLambdaOutput`](crate::output::GetAccessPointPolicyStatusForObjectLambdaOutput) with field(s):
    ///   - [`policy_status(Option<PolicyStatus>)`](crate::output::GetAccessPointPolicyStatusForObjectLambdaOutput::policy_status): <p>Indicates whether this access point policy is public. For more information about how Amazon S3 evaluates policies to determine whether they are public, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status">The Meaning of "Public"</a> in the <i>Amazon S3 User Guide</i>. </p>
    /// - On failure, responds with [`SdkError<GetAccessPointPolicyStatusForObjectLambdaError>`](crate::error::GetAccessPointPolicyStatusForObjectLambdaError)
    pub fn get_access_point_policy_status_for_object_lambda(
        &self,
    ) -> crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda {
        crate::client::fluent_builders::GetAccessPointPolicyStatusForObjectLambda::new(
            self.handle.clone(),
        )
    }
}
