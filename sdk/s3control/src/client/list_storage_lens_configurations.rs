// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListStorageLensConfigurations`](crate::client::fluent_builders::ListStorageLensConfigurations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListStorageLensConfigurations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::ListStorageLensConfigurations::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::ListStorageLensConfigurations::set_account_id): <p>The account ID of the requester.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListStorageLensConfigurations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListStorageLensConfigurations::set_next_token): <p>A pagination token to request the next page of results.</p>
    /// - On success, responds with [`ListStorageLensConfigurationsOutput`](crate::output::ListStorageLensConfigurationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListStorageLensConfigurationsOutput::next_token): <p>If the request produced more than the maximum number of S3 Storage Lens configuration results, you can pass this value into a subsequent request to retrieve the next page of results.</p>
    ///   - [`storage_lens_configuration_list(Option<Vec<ListStorageLensConfigurationEntry>>)`](crate::output::ListStorageLensConfigurationsOutput::storage_lens_configuration_list): <p>A list of S3 Storage Lens configurations.</p>
    /// - On failure, responds with [`SdkError<ListStorageLensConfigurationsError>`](crate::error::ListStorageLensConfigurationsError)
    pub fn list_storage_lens_configurations(
        &self,
    ) -> crate::client::fluent_builders::ListStorageLensConfigurations {
        crate::client::fluent_builders::ListStorageLensConfigurations::new(self.handle.clone())
    }
}
