// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetStorageLensConfigurationTagging`](crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`config_id(impl Into<String>)`](crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder::config_id) / [`set_config_id(Option<String>)`](crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder::set_config_id): <p>The ID of the Amazon S3 Storage Lens configuration.</p>
    ///   - [`account_id(impl Into<String>)`](crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder::set_account_id): <p>The account ID of the requester.</p>
    /// - On success, responds with [`GetStorageLensConfigurationTaggingOutput`](crate::operation::get_storage_lens_configuration_tagging::GetStorageLensConfigurationTaggingOutput) with field(s):
    ///   - [`tags(Option<Vec<StorageLensTag>>)`](crate::operation::get_storage_lens_configuration_tagging::GetStorageLensConfigurationTaggingOutput::tags): <p>The tags of S3 Storage Lens configuration requested.</p>
    /// - On failure, responds with [`SdkError<GetStorageLensConfigurationTaggingError>`](crate::operation::get_storage_lens_configuration_tagging::GetStorageLensConfigurationTaggingError)
    pub fn get_storage_lens_configuration_tagging(&self) -> crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder{
        crate::operation::get_storage_lens_configuration_tagging::builders::GetStorageLensConfigurationTaggingFluentBuilder::new(self.handle.clone())
    }
}
