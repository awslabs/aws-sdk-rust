// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_job_manifest_generator(
    input: &crate::types::S3JobManifestGenerator,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.expected_bucket_owner {
        let mut inner_writer = scope.start_el("ExpectedBucketOwner").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.source_bucket {
        let mut inner_writer = scope.start_el("SourceBucket").finish();
        inner_writer.data(var_2.as_str());
    }
    if let Some(var_3) = &input.manifest_output_location {
        let inner_writer = scope.start_el("ManifestOutputLocation");
        crate::protocol_serde::shape_s3_manifest_output_location::ser_s3_manifest_output_location(
            var_3,
            inner_writer,
        )?
    }
    if let Some(var_4) = &input.filter {
        let inner_writer = scope.start_el("Filter");
        crate::protocol_serde::shape_job_manifest_generator_filter::ser_job_manifest_generator_filter(var_4, inner_writer)?
    }
    {
        let mut inner_writer = scope.start_el("EnableManifestOutput").finish();
        inner_writer.data(
            aws_smithy_types::primitive::Encoder::from(input.enable_manifest_output).encode(),
        );
    }
    scope.finish();
    Ok(())
}

pub fn de_s3_job_manifest_generator(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::S3JobManifestGenerator, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::S3JobManifestGenerator::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("ExpectedBucketOwner") /* ExpectedBucketOwner com.amazonaws.s3control#S3JobManifestGenerator$ExpectedBucketOwner */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_expected_bucket_owner(var_5);
            }
            ,
            s if s.matches("SourceBucket") /* SourceBucket com.amazonaws.s3control#S3JobManifestGenerator$SourceBucket */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_bucket(var_6);
            }
            ,
            s if s.matches("ManifestOutputLocation") /* ManifestOutputLocation com.amazonaws.s3control#S3JobManifestGenerator$ManifestOutputLocation */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_s3_manifest_output_location::de_s3_manifest_output_location(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_manifest_output_location(var_7);
            }
            ,
            s if s.matches("Filter") /* Filter com.amazonaws.s3control#S3JobManifestGenerator$Filter */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_job_manifest_generator_filter::de_job_manifest_generator_filter(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_filter(var_8);
            }
            ,
            s if s.matches("EnableManifestOutput") /* EnableManifestOutput com.amazonaws.s3control#S3JobManifestGenerator$EnableManifestOutput */ =>  {
                let var_9 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.s3control#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enable_manifest_output(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
