// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_set_object_legal_hold_operation(
    input: &crate::types::S3SetObjectLegalHoldOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.legal_hold {
        let inner_writer = scope.start_el("LegalHold");
        crate::protocol_serde::shape_s3_object_lock_legal_hold::ser_s3_object_lock_legal_hold(
            var_1,
            inner_writer,
        )?
    }
    scope.finish();
    Ok(())
}

pub fn de_s3_set_object_legal_hold_operation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::S3SetObjectLegalHoldOperation, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::S3SetObjectLegalHoldOperation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("LegalHold") /* LegalHold com.amazonaws.s3control#S3SetObjectLegalHoldOperation$LegalHold */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_s3_object_lock_legal_hold::de_s3_object_lock_legal_hold(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_legal_hold(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
