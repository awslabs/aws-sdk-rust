// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lifecycle_rule_filter(
    input: &crate::types::LifecycleRuleFilter,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::protocol_serde::shape_s3_tag::ser_s3_tag(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::protocol_serde::shape_lifecycle_rule_and_operator::ser_lifecycle_rule_and_operator(
            var_3,
            inner_writer,
        )?
    }
    if let Some(var_4) = &input.object_size_greater_than {
        let mut inner_writer = scope.start_el("ObjectSizeGreaterThan").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_4).encode());
    }
    if let Some(var_5) = &input.object_size_less_than {
        let mut inner_writer = scope.start_el("ObjectSizeLessThan").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_5).encode());
    }
    scope.finish();
    Ok(())
}

pub fn de_lifecycle_rule_filter(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::LifecycleRuleFilter, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::LifecycleRuleFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3control#LifecycleRuleFilter$Prefix */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_6);
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3control#LifecycleRuleFilter$Tag */ =>  {
                let var_7 =
                    Some(
                        crate::protocol_serde::shape_s3_tag::de_s3_tag(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag(var_7);
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3control#LifecycleRuleFilter$And */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_lifecycle_rule_and_operator::de_lifecycle_rule_and_operator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_and(var_8);
            }
            ,
            s if s.matches("ObjectSizeGreaterThan") /* ObjectSizeGreaterThan com.amazonaws.s3control#LifecycleRuleFilter$ObjectSizeGreaterThan */ =>  {
                let var_9 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3control#ObjectSizeGreaterThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_greater_than(var_9);
            }
            ,
            s if s.matches("ObjectSizeLessThan") /* ObjectSizeLessThan com.amazonaws.s3control#LifecycleRuleFilter$ObjectSizeLessThan */ =>  {
                let var_10 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3control#ObjectSizeLessThanBytes`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_object_size_less_than(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
