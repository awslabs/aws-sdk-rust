// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_object_metadata(
    input: &crate::types::S3ObjectMetadata,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.cache_control {
        let mut inner_writer = scope.start_el("CacheControl").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.content_disposition {
        let mut inner_writer = scope.start_el("ContentDisposition").finish();
        inner_writer.data(var_2.as_str());
    }
    if let Some(var_3) = &input.content_encoding {
        let mut inner_writer = scope.start_el("ContentEncoding").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.content_language {
        let mut inner_writer = scope.start_el("ContentLanguage").finish();
        inner_writer.data(var_4.as_str());
    }
    if let Some(var_5) = &input.user_metadata {
        let mut inner_writer = scope.start_el("UserMetadata").finish();
        for (key_6, value_7) in var_5 {
            let mut entry = inner_writer.start_el("entry").finish();
            {
                let mut inner_writer = entry.start_el("key").finish();
                inner_writer.data(key_6.as_str());
            }
            {
                let mut inner_writer = entry.start_el("value").finish();
                inner_writer.data(value_7.as_str());
            }
        }
    }
    if let Some(var_8) = &input.content_length {
        let mut inner_writer = scope.start_el("ContentLength").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_8).encode());
    }
    if let Some(var_9) = &input.content_md5 {
        let mut inner_writer = scope.start_el("ContentMD5").finish();
        inner_writer.data(var_9.as_str());
    }
    if let Some(var_10) = &input.content_type {
        let mut inner_writer = scope.start_el("ContentType").finish();
        inner_writer.data(var_10.as_str());
    }
    if let Some(var_11) = &input.http_expires_date {
        let mut inner_writer = scope.start_el("HttpExpiresDate").finish();
        inner_writer.data(
            var_11
                .fmt(aws_smithy_types::date_time::Format::DateTimeWithOffset)?
                .as_ref(),
        );
    }
    if input.requester_charged {
        let mut inner_writer = scope.start_el("RequesterCharged").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.requester_charged).encode());
    }
    if let Some(var_12) = &input.sse_algorithm {
        let mut inner_writer = scope.start_el("SSEAlgorithm").finish();
        inner_writer.data(var_12.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn de_s3_object_metadata(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::S3ObjectMetadata, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::S3ObjectMetadata::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CacheControl") /* CacheControl com.amazonaws.s3control#S3ObjectMetadata$CacheControl */ =>  {
                let var_13 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_cache_control(var_13);
            }
            ,
            s if s.matches("ContentDisposition") /* ContentDisposition com.amazonaws.s3control#S3ObjectMetadata$ContentDisposition */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_content_disposition(var_14);
            }
            ,
            s if s.matches("ContentEncoding") /* ContentEncoding com.amazonaws.s3control#S3ObjectMetadata$ContentEncoding */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_content_encoding(var_15);
            }
            ,
            s if s.matches("ContentLanguage") /* ContentLanguage com.amazonaws.s3control#S3ObjectMetadata$ContentLanguage */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_content_language(var_16);
            }
            ,
            s if s.matches("UserMetadata") /* UserMetadata com.amazonaws.s3control#S3ObjectMetadata$UserMetadata */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_s3_user_metadata::de_s3_user_metadata(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_user_metadata(var_17);
            }
            ,
            s if s.matches("ContentLength") /* ContentLength com.amazonaws.s3control#S3ObjectMetadata$ContentLength */ =>  {
                let var_18 =
                    Some(
                         {
                            <i64 as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (long: `com.amazonaws.s3control#S3ContentLength`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_content_length(var_18);
            }
            ,
            s if s.matches("ContentMD5") /* ContentMD5 com.amazonaws.s3control#S3ObjectMetadata$ContentMD5 */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_content_md5(var_19);
            }
            ,
            s if s.matches("ContentType") /* ContentType com.amazonaws.s3control#S3ObjectMetadata$ContentType */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_content_type(var_20);
            }
            ,
            s if s.matches("HttpExpiresDate") /* HttpExpiresDate com.amazonaws.s3control#S3ObjectMetadata$HttpExpiresDate */ =>  {
                let var_21 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_http_expires_date(var_21);
            }
            ,
            s if s.matches("RequesterCharged") /* RequesterCharged com.amazonaws.s3control#S3ObjectMetadata$RequesterCharged */ =>  {
                let var_22 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.s3control#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_charged(var_22);
            }
            ,
            s if s.matches("SSEAlgorithm") /* SSEAlgorithm com.amazonaws.s3control#S3ObjectMetadata$SSEAlgorithm */ =>  {
                let var_23 =
                    Some(
                        Result::<crate::types::S3SseAlgorithm, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3SseAlgorithm::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_sse_algorithm(var_23);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
