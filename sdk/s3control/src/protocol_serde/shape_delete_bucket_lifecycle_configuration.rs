// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_delete_bucket_lifecycle_configuration_headers(
    input: &crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.account_id {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "account_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_bucket_lifecycle_configuration_http_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationOutput, crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationError>{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_bucket_lifecycle_configuration_http_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationOutput, crate::operation::delete_bucket_lifecycle_configuration::DeleteBucketLifecycleConfigurationError>{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_bucket_lifecycle_configuration::builders::DeleteBucketLifecycleConfigurationOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
