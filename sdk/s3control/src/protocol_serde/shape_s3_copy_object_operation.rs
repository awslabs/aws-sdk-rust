// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_s3_copy_object_operation(
    input: &crate::types::S3CopyObjectOperation,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.target_resource {
        let mut inner_writer = scope.start_el("TargetResource").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.canned_access_control_list {
        let mut inner_writer = scope.start_el("CannedAccessControlList").finish();
        inner_writer.data(var_2.as_str());
    }
    if let Some(var_3) = &input.access_control_grants {
        let mut inner_writer = scope.start_el("AccessControlGrants").finish();
        for list_item_4 in var_3 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::protocol_serde::shape_s3_grant::ser_s3_grant(list_item_4, inner_writer)?
            }
        }
    }
    if let Some(var_5) = &input.metadata_directive {
        let mut inner_writer = scope.start_el("MetadataDirective").finish();
        inner_writer.data(var_5.as_str());
    }
    if let Some(var_6) = &input.modified_since_constraint {
        let mut inner_writer = scope.start_el("ModifiedSinceConstraint").finish();
        inner_writer.data(
            var_6
                .fmt(aws_smithy_types::date_time::Format::DateTimeWithOffset)?
                .as_ref(),
        );
    }
    if let Some(var_7) = &input.new_object_metadata {
        let inner_writer = scope.start_el("NewObjectMetadata");
        crate::protocol_serde::shape_s3_object_metadata::ser_s3_object_metadata(
            var_7,
            inner_writer,
        )?
    }
    if let Some(var_8) = &input.new_object_tagging {
        let mut inner_writer = scope.start_el("NewObjectTagging").finish();
        for list_item_9 in var_8 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::protocol_serde::shape_s3_tag::ser_s3_tag(list_item_9, inner_writer)?
            }
        }
    }
    if let Some(var_10) = &input.redirect_location {
        let mut inner_writer = scope.start_el("RedirectLocation").finish();
        inner_writer.data(var_10.as_str());
    }
    if input.requester_pays {
        let mut inner_writer = scope.start_el("RequesterPays").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.requester_pays).encode());
    }
    if let Some(var_11) = &input.storage_class {
        let mut inner_writer = scope.start_el("StorageClass").finish();
        inner_writer.data(var_11.as_str());
    }
    if let Some(var_12) = &input.un_modified_since_constraint {
        let mut inner_writer = scope.start_el("UnModifiedSinceConstraint").finish();
        inner_writer.data(
            var_12
                .fmt(aws_smithy_types::date_time::Format::DateTimeWithOffset)?
                .as_ref(),
        );
    }
    if let Some(var_13) = &input.sse_aws_kms_key_id {
        let mut inner_writer = scope.start_el("SSEAwsKmsKeyId").finish();
        inner_writer.data(var_13.as_str());
    }
    if let Some(var_14) = &input.target_key_prefix {
        let mut inner_writer = scope.start_el("TargetKeyPrefix").finish();
        inner_writer.data(var_14.as_str());
    }
    if let Some(var_15) = &input.object_lock_legal_hold_status {
        let mut inner_writer = scope.start_el("ObjectLockLegalHoldStatus").finish();
        inner_writer.data(var_15.as_str());
    }
    if let Some(var_16) = &input.object_lock_mode {
        let mut inner_writer = scope.start_el("ObjectLockMode").finish();
        inner_writer.data(var_16.as_str());
    }
    if let Some(var_17) = &input.object_lock_retain_until_date {
        let mut inner_writer = scope.start_el("ObjectLockRetainUntilDate").finish();
        inner_writer.data(
            var_17
                .fmt(aws_smithy_types::date_time::Format::DateTimeWithOffset)?
                .as_ref(),
        );
    }
    if input.bucket_key_enabled {
        let mut inner_writer = scope.start_el("BucketKeyEnabled").finish();
        inner_writer
            .data(aws_smithy_types::primitive::Encoder::from(input.bucket_key_enabled).encode());
    }
    if let Some(var_18) = &input.checksum_algorithm {
        let mut inner_writer = scope.start_el("ChecksumAlgorithm").finish();
        inner_writer.data(var_18.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn de_s3_copy_object_operation(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::S3CopyObjectOperation, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::S3CopyObjectOperation::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("TargetResource") /* TargetResource com.amazonaws.s3control#S3CopyObjectOperation$TargetResource */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_resource(var_19);
            }
            ,
            s if s.matches("CannedAccessControlList") /* CannedAccessControlList com.amazonaws.s3control#S3CopyObjectOperation$CannedAccessControlList */ =>  {
                let var_20 =
                    Some(
                        Result::<crate::types::S3CannedAccessControlList, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3CannedAccessControlList::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_canned_access_control_list(var_20);
            }
            ,
            s if s.matches("AccessControlGrants") /* AccessControlGrants com.amazonaws.s3control#S3CopyObjectOperation$AccessControlGrants */ =>  {
                let var_21 =
                    Some(
                        crate::protocol_serde::shape_s3_grant_list::de_s3_grant_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_access_control_grants(var_21);
            }
            ,
            s if s.matches("MetadataDirective") /* MetadataDirective com.amazonaws.s3control#S3CopyObjectOperation$MetadataDirective */ =>  {
                let var_22 =
                    Some(
                        Result::<crate::types::S3MetadataDirective, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3MetadataDirective::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_metadata_directive(var_22);
            }
            ,
            s if s.matches("ModifiedSinceConstraint") /* ModifiedSinceConstraint com.amazonaws.s3control#S3CopyObjectOperation$ModifiedSinceConstraint */ =>  {
                let var_23 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_modified_since_constraint(var_23);
            }
            ,
            s if s.matches("NewObjectMetadata") /* NewObjectMetadata com.amazonaws.s3control#S3CopyObjectOperation$NewObjectMetadata */ =>  {
                let var_24 =
                    Some(
                        crate::protocol_serde::shape_s3_object_metadata::de_s3_object_metadata(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_new_object_metadata(var_24);
            }
            ,
            s if s.matches("NewObjectTagging") /* NewObjectTagging com.amazonaws.s3control#S3CopyObjectOperation$NewObjectTagging */ =>  {
                let var_25 =
                    Some(
                        crate::protocol_serde::shape_s3_tag_set::de_s3_tag_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_new_object_tagging(var_25);
            }
            ,
            s if s.matches("RedirectLocation") /* RedirectLocation com.amazonaws.s3control#S3CopyObjectOperation$RedirectLocation */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_redirect_location(var_26);
            }
            ,
            s if s.matches("RequesterPays") /* RequesterPays com.amazonaws.s3control#S3CopyObjectOperation$RequesterPays */ =>  {
                let var_27 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.s3control#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_requester_pays(var_27);
            }
            ,
            s if s.matches("StorageClass") /* StorageClass com.amazonaws.s3control#S3CopyObjectOperation$StorageClass */ =>  {
                let var_28 =
                    Some(
                        Result::<crate::types::S3StorageClass, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3StorageClass::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_storage_class(var_28);
            }
            ,
            s if s.matches("UnModifiedSinceConstraint") /* UnModifiedSinceConstraint com.amazonaws.s3control#S3CopyObjectOperation$UnModifiedSinceConstraint */ =>  {
                let var_29 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_un_modified_since_constraint(var_29);
            }
            ,
            s if s.matches("SSEAwsKmsKeyId") /* SSEAwsKmsKeyId com.amazonaws.s3control#S3CopyObjectOperation$SSEAwsKmsKeyId */ =>  {
                let var_30 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_sse_aws_kms_key_id(var_30);
            }
            ,
            s if s.matches("TargetKeyPrefix") /* TargetKeyPrefix com.amazonaws.s3control#S3CopyObjectOperation$TargetKeyPrefix */ =>  {
                let var_31 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_target_key_prefix(var_31);
            }
            ,
            s if s.matches("ObjectLockLegalHoldStatus") /* ObjectLockLegalHoldStatus com.amazonaws.s3control#S3CopyObjectOperation$ObjectLockLegalHoldStatus */ =>  {
                let var_32 =
                    Some(
                        Result::<crate::types::S3ObjectLockLegalHoldStatus, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3ObjectLockLegalHoldStatus::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_object_lock_legal_hold_status(var_32);
            }
            ,
            s if s.matches("ObjectLockMode") /* ObjectLockMode com.amazonaws.s3control#S3CopyObjectOperation$ObjectLockMode */ =>  {
                let var_33 =
                    Some(
                        Result::<crate::types::S3ObjectLockMode, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3ObjectLockMode::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_object_lock_mode(var_33);
            }
            ,
            s if s.matches("ObjectLockRetainUntilDate") /* ObjectLockRetainUntilDate com.amazonaws.s3control#S3CopyObjectOperation$ObjectLockRetainUntilDate */ =>  {
                let var_34 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#TimeStamp`)"))
                        ?
                    )
                ;
                builder = builder.set_object_lock_retain_until_date(var_34);
            }
            ,
            s if s.matches("BucketKeyEnabled") /* BucketKeyEnabled com.amazonaws.s3control#S3CopyObjectOperation$BucketKeyEnabled */ =>  {
                let var_35 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.s3control#Boolean`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_bucket_key_enabled(var_35);
            }
            ,
            s if s.matches("ChecksumAlgorithm") /* ChecksumAlgorithm com.amazonaws.s3control#S3CopyObjectOperation$ChecksumAlgorithm */ =>  {
                let var_36 =
                    Some(
                        Result::<crate::types::S3ChecksumAlgorithm, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            crate::types::S3ChecksumAlgorithm::from(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                        )
                        ?
                    )
                ;
                builder = builder.set_checksum_algorithm(var_36);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
