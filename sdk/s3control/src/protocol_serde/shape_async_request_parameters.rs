// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn de_async_request_parameters(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::AsyncRequestParameters, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::AsyncRequestParameters::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("CreateMultiRegionAccessPointRequest") /* CreateMultiRegionAccessPointRequest com.amazonaws.s3control#AsyncRequestParameters$CreateMultiRegionAccessPointRequest */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_create_multi_region_access_point_input::de_create_multi_region_access_point_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_create_multi_region_access_point_request(var_1);
            }
            ,
            s if s.matches("DeleteMultiRegionAccessPointRequest") /* DeleteMultiRegionAccessPointRequest com.amazonaws.s3control#AsyncRequestParameters$DeleteMultiRegionAccessPointRequest */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_delete_multi_region_access_point_input::de_delete_multi_region_access_point_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delete_multi_region_access_point_request(var_2);
            }
            ,
            s if s.matches("PutMultiRegionAccessPointPolicyRequest") /* PutMultiRegionAccessPointPolicyRequest com.amazonaws.s3control#AsyncRequestParameters$PutMultiRegionAccessPointPolicyRequest */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_put_multi_region_access_point_policy_input::de_put_multi_region_access_point_policy_input(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_put_multi_region_access_point_policy_request(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
