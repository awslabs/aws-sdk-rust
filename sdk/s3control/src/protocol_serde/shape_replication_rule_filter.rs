// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_replication_rule_filter(
    input: &crate::types::ReplicationRuleFilter,
    writer: ::aws_smithy_xml::encode::ElWriter,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.prefix {
        let mut inner_writer = scope.start_el("Prefix").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.tag {
        let inner_writer = scope.start_el("Tag");
        crate::protocol_serde::shape_s3_tag::ser_s3_tag(var_2, inner_writer)?
    }
    if let Some(var_3) = &input.and {
        let inner_writer = scope.start_el("And");
        crate::protocol_serde::shape_replication_rule_and_operator::ser_replication_rule_and_operator(var_3, inner_writer)?
    }
    scope.finish();
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_replication_rule_filter(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::ReplicationRuleFilter, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::ReplicationRuleFilter::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Prefix") /* Prefix com.amazonaws.s3control#ReplicationRuleFilter$Prefix */ =>  {
                let var_4 =
                    Some(
                        Result::<::std::string::String, ::aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            ::aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_prefix(var_4);
            }
            ,
            s if s.matches("Tag") /* Tag com.amazonaws.s3control#ReplicationRuleFilter$Tag */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_s3_tag::de_s3_tag(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tag(var_5);
            }
            ,
            s if s.matches("And") /* And com.amazonaws.s3control#ReplicationRuleFilter$And */ =>  {
                let var_6 =
                    Some(
                        crate::protocol_serde::shape_replication_rule_and_operator::de_replication_rule_and_operator(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_and(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
