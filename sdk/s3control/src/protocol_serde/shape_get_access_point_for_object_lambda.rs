// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_access_point_for_object_lambda_headers(
    input: &crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.account_id {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "account_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_access_point_for_object_lambda_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaOutput,
    crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_get_access_point_for_object_lambda_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaOutput,
    crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::get_access_point_for_object_lambda::builders::GetAccessPointForObjectLambdaOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_get_access_point_for_object_lambda::de_get_access_point_for_object_lambda(response.body().as_ref(), output).map_err(crate::operation::get_access_point_for_object_lambda::GetAccessPointForObjectLambdaError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_get_access_point_for_object_lambda(inp: &[u8], mut builder: crate::operation::get_access_point_for_object_lambda::builders::GetAccessPointForObjectLambdaOutputBuilder) -> Result<crate::operation::get_access_point_for_object_lambda::builders::GetAccessPointForObjectLambdaOutputBuilder, aws_smithy_xml::decode::XmlDecodeError>{
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !start_el.matches("GetAccessPointForObjectLambdaResult") {
        return Err(
                                aws_smithy_xml::decode::XmlDecodeError::custom(
                                    format!("encountered invalid XML root: expected GetAccessPointForObjectLambdaResult but got {:?}. This is likely a bug in the SDK.", start_el)
                                )
                            );
    }
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("PublicAccessBlockConfiguration") /* PublicAccessBlockConfiguration com.amazonaws.s3control.synthetic#GetAccessPointForObjectLambdaOutput$PublicAccessBlockConfiguration */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_public_access_block_configuration::de_public_access_block_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_public_access_block_configuration(var_3);
            }
            ,
            s if s.matches("CreationDate") /* CreationDate com.amazonaws.s3control.synthetic#GetAccessPointForObjectLambdaOutput$CreationDate */ =>  {
                let var_4 =
                    Some(
                        aws_smithy_types::DateTime::from_str(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , aws_smithy_types::date_time::Format::DateTimeWithOffset
                        )
                        .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (timestamp: `com.amazonaws.s3control#CreationDate`)"))
                        ?
                    )
                ;
                builder = builder.set_creation_date(var_4);
            }
            ,
            s if s.matches("Name") /* Name com.amazonaws.s3control.synthetic#GetAccessPointForObjectLambdaOutput$Name */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}
