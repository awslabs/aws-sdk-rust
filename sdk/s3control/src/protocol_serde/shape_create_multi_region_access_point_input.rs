// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_multi_region_access_point_input_input(
    input: &crate::operation::create_multi_region_access_point::CreateMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::protocol_serde::shape_create_multi_region_access_point_input::ser_create_multi_region_access_point_input(var_2, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn ser_create_multi_region_access_point_input(
    input: &crate::types::CreateMultiRegionAccessPointInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_3) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.public_access_block {
        let inner_writer = scope.start_el("PublicAccessBlock");
        crate::protocol_serde::shape_public_access_block_configuration::ser_public_access_block_configuration(var_4, inner_writer)?
    }
    if let Some(var_5) = &input.regions {
        let mut inner_writer = scope.start_el("Regions").finish();
        for list_item_6 in var_5 {
            {
                let inner_writer = inner_writer.start_el("Region");
                crate::protocol_serde::shape_region::ser_region(list_item_6, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}

pub fn de_create_multi_region_access_point_input(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CreateMultiRegionAccessPointInput, aws_smithy_xml::decode::XmlDecodeError>
{
    #[allow(unused_mut)]
    let mut builder = crate::types::CreateMultiRegionAccessPointInput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.s3control#CreateMultiRegionAccessPointInput$Name */ =>  {
                let var_7 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_7);
            }
            ,
            s if s.matches("PublicAccessBlock") /* PublicAccessBlock com.amazonaws.s3control#CreateMultiRegionAccessPointInput$PublicAccessBlock */ =>  {
                let var_8 =
                    Some(
                        crate::protocol_serde::shape_public_access_block_configuration::de_public_access_block_configuration(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_public_access_block(var_8);
            }
            ,
            s if s.matches("Regions") /* Regions com.amazonaws.s3control#CreateMultiRegionAccessPointInput$Regions */ =>  {
                let var_9 =
                    Some(
                        crate::protocol_serde::shape_region_creation_list::de_region_creation_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_regions(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
