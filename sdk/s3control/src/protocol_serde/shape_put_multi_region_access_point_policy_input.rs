// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_multi_region_access_point_policy_input_input(
    input: &crate::operation::put_multi_region_access_point_policy::PutMultiRegionAccessPointPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.client_token {
        let mut inner_writer = scope.start_el("ClientToken").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.details {
        let inner_writer = scope.start_el("Details");
        crate::protocol_serde::shape_put_multi_region_access_point_policy_input::ser_put_multi_region_access_point_policy_input(var_2, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn ser_put_multi_region_access_point_policy_input(
    input: &crate::types::PutMultiRegionAccessPointPolicyInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_3) = &input.name {
        let mut inner_writer = scope.start_el("Name").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.policy {
        let mut inner_writer = scope.start_el("Policy").finish();
        inner_writer.data(var_4.as_str());
    }
    scope.finish();
    Ok(())
}

pub fn de_put_multi_region_access_point_policy_input(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<
    crate::types::PutMultiRegionAccessPointPolicyInput,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    #[allow(unused_mut)]
    let mut builder = crate::types::PutMultiRegionAccessPointPolicyInput::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.s3control#PutMultiRegionAccessPointPolicyInput$Name */ =>  {
                let var_5 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_5);
            }
            ,
            s if s.matches("Policy") /* Policy com.amazonaws.s3control#PutMultiRegionAccessPointPolicyInput$Policy */ =>  {
                let var_6 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_policy(var_6);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
