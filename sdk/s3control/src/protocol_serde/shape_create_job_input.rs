// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_job_input_input(
    input: &crate::operation::create_job::CreateJobInput,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(var_1) = &input.client_request_token {
        let mut inner_writer = scope.start_el("ClientRequestToken").finish();
        inner_writer.data(var_1.as_str());
    }
    if let Some(var_2) = &input.confirmation_required {
        let mut inner_writer = scope.start_el("ConfirmationRequired").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_2).encode());
    }
    if let Some(var_3) = &input.description {
        let mut inner_writer = scope.start_el("Description").finish();
        inner_writer.data(var_3.as_str());
    }
    if let Some(var_4) = &input.manifest {
        let inner_writer = scope.start_el("Manifest");
        crate::protocol_serde::shape_job_manifest::ser_job_manifest(var_4, inner_writer)?
    }
    if let Some(var_5) = &input.manifest_generator {
        let inner_writer = scope.start_el("ManifestGenerator");
        crate::protocol_serde::shape_job_manifest_generator::ser_job_manifest_generator(
            var_5,
            inner_writer,
        )?
    }
    if let Some(var_6) = &input.operation {
        let inner_writer = scope.start_el("Operation");
        crate::protocol_serde::shape_job_operation::ser_job_operation(var_6, inner_writer)?
    }
    if let Some(var_7) = &input.priority {
        let mut inner_writer = scope.start_el("Priority").finish();
        inner_writer.data(aws_smithy_types::primitive::Encoder::from(*var_7).encode());
    }
    if let Some(var_8) = &input.report {
        let inner_writer = scope.start_el("Report");
        crate::protocol_serde::shape_job_report::ser_job_report(var_8, inner_writer)?
    }
    if let Some(var_9) = &input.role_arn {
        let mut inner_writer = scope.start_el("RoleArn").finish();
        inner_writer.data(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        let mut inner_writer = scope.start_el("Tags").finish();
        for list_item_11 in var_10 {
            {
                let inner_writer = inner_writer.start_el("member");
                crate::protocol_serde::shape_s3_tag::ser_s3_tag(list_item_11, inner_writer)?
            }
        }
    }
    scope.finish();
    Ok(())
}
