// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_storage_lens_data_export_encryption(
    input: &crate::types::StorageLensDataExportEncryption,
    writer: aws_smithy_xml::encode::ElWriter,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope = writer.finish();
    if let Some(_var_1) = &input.sses3 {
        scope.start_el("SSE-S3").finish();
    }
    if let Some(var_2) = &input.ssekms {
        let inner_writer = scope.start_el("SSE-KMS");
        crate::protocol_serde::shape_ssekms::ser_ssekms(var_2, inner_writer)?
    }
    scope.finish();
    Ok(())
}

pub fn de_storage_lens_data_export_encryption(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::StorageLensDataExportEncryption, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::StorageLensDataExportEncryption::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("SSE-S3") /* SSES3 com.amazonaws.s3control#StorageLensDataExportEncryption$SSES3 */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_sses3::de_sses3(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sses3(var_3);
            }
            ,
            s if s.matches("SSE-KMS") /* SSEKMS com.amazonaws.s3control#StorageLensDataExportEncryption$SSEKMS */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_ssekms::de_ssekms(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_ssekms(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
