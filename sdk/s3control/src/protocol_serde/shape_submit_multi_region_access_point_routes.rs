// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_submit_multi_region_access_point_routes_headers(
    input: &crate::input::SubmitMultiRegionAccessPointRoutesInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::error::BuildError> {
    if let Some(inner_1) = &input.account_id {
        let formatted_2 = inner_1.as_str();
        if !formatted_2.is_empty() {
            let header_value = formatted_2;
            let header_value: http::HeaderValue = header_value.parse().map_err(|err| {
                aws_smithy_http::operation::error::BuildError::invalid_field(
                    "account_id",
                    format!(
                        "`{}` cannot be used as a header value: {}",
                        &header_value, err
                    ),
                )
            })?;
            builder = builder.header("x-amz-account-id", header_value);
        }
    }
    Ok(builder)
}

pub fn ser_submit_multi_region_access_point_routes_op_input(
    input: &crate::input::SubmitMultiRegionAccessPointRoutesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    {
        let mut writer = aws_smithy_xml::encode::XmlWriter::new(&mut out);
        #[allow(unused_mut)]
        let mut root = writer
            .start_el("SubmitMultiRegionAccessPointRoutesRequest")
            .write_ns("http://awss3control.amazonaws.com/doc/2018-08-20/", None);
        crate::protocol_serde::shape_submit_multi_region_access_point_routes_input::ser_submit_multi_region_access_point_routes_input_input(input, root)?
    }
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_submit_multi_region_access_point_routes_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SubmitMultiRegionAccessPointRoutesOutput,
    crate::error::SubmitMultiRegionAccessPointRoutesError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::error::SubmitMultiRegionAccessPointRoutesError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    Err(crate::error::SubmitMultiRegionAccessPointRoutesError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_submit_multi_region_access_point_routes_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SubmitMultiRegionAccessPointRoutesOutput,
    crate::error::SubmitMultiRegionAccessPointRoutesError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::submit_multi_region_access_point_routes_output::Builder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
