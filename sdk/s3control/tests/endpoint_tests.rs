// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#![cfg(feature = "test-util")]
#[::tokio::test]
async fn operation_input_test_get_access_point_1() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_2() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_3() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_4() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_5() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_6() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_7() {
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_8() {
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_9() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_10() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_11() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_12() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_13() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_14() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_15() {
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_16() {
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_17() {
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts-fips.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_18() {
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts-fips.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_19() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_20() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_21() {
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_22() {
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_23() {
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_24() {
    /* builtIns: {
        "AWS::Region": "af-south-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_25() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_26() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_27() {
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_28() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_29() {
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-control.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-control.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_30() {
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_31() {
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control.us-east-2.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_32() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_33() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_34() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("999999999999".to_owned()))
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`) [Account ID set inline and in ARN and they do not match@us-west-2]");
    assert!(
                                    format!("{:?}", error).contains("Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`)"),
                                    "expected error to contain `Invalid ARN: the accountId specified in the ARN (`123456789012`) does not match the parameter (`999999999999`)` but it was {:?}", error
                                );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_35() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com"),
        "expected URI to start with `https://123456789012.control.vpce-1a2b3c4d-5e6f.s3.us-west-2.vpce.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_36() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_37() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_38() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_39() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_bucket_40() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_bucket()
            .set_bucket(::std::option::Option::Some("blah".to_owned()))
            .set_outpost_id(::std::option::Option::Some("123".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://beta.example.com"),
        "expected URI to start with `https://beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_41() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_42() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_43() {
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_44() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_45() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_46() {
    /* builtIns: {
        "AWS::Region": "cn-north-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-cn:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.cn-north-1.amazonaws.com.cn"),
        "expected URI to start with `https://s3-outposts.cn-north-1.amazonaws.com.cn` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_47() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_48() {
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_49() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_50() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_create_access_point_51() {
    /* builtIns: {
        "AWS::Region": "af-south-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("af-south-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .create_access_point()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:af-south-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.af-south-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.af-south-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_52() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_53() {
    /* builtIns: {
        "AWS::Region": "us-gov-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-gov-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-gov-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_54() {
    /* builtIns: {
        "AWS::Region": "us-gov-west-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-gov-west-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws-us-gov:s3-outposts:us-gov-west-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-gov-west-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-gov-west-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_55() {
    /* builtIns: {
        "AWS::Region": "us-east-2",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts-fips.us-east-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts-fips.us-east-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_56() {
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_57() {
    /* builtIns: {
        "AWS::Region": "us-east-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("/?invalid&not-host*label".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: AccountId must only contain a-z, A-Z, 0-9 and `-`. [invalid account id prefix @us-east-1]");
    assert!(
        format!("{:?}", error).contains("AccountId must only contain a-z, A-Z, 0-9 and `-`."),
        "expected error to contain `AccountId must only contain a-z, A-Z, 0-9 and `-`.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_58() {
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control-fips.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control-fips.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_59() {
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true,
        "AWS::UseDualStack": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        let builder = builder.use_dual_stack(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.s3-control-fips.dualstack.us-east-1.amazonaws.com"),
        "expected URI to start with `https://123456789012.s3-control-fips.dualstack.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_60() {
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.example.com"),
        "expected URI to start with `https://123456789012.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_61() {
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("/?invalid&not-host*label".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err(
        "expected error: AccountId must only contain a-z, A-Z, 0-9 and `-`. [RequiresAccountId with invalid AccountId and custom endpoint]",
    );
    assert!(
        format!("{:?}", error).contains("AccountId must only contain a-z, A-Z, 0-9 and `-`."),
        "expected error to contain `AccountId must only contain a-z, A-Z, 0-9 and `-`.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_62() {
    /* builtIns: {
        "AWS::Region": "us-east-1",
        "AWS::UseFIPS": true,
        "SDK::Endpoint": "https://example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-1"));
        let builder = builder.use_fips(true);
        let builder = builder.endpoint_url("https://example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.example.com"),
        "expected URI to start with `https://123456789012.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_63() {
    /* builtIns: {
        "AWS::Region": "us-east-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-east-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .set_account_id(::std::option::Option::Some("/?invalid&not-host*label".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err(
        "expected error: AccountId must only contain a-z, A-Z, 0-9 and `-`. [ListRegionalBuckets + OutpostId with invalid accountId set.]",
    );
    assert!(
        format!("{:?}", error).contains("AccountId must only contain a-z, A-Z, 0-9 and `-`."),
        "expected error to contain `AccountId must only contain a-z, A-Z, 0-9 and `-`.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_64() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://123456789012.beta.example.com"),
        "expected URI to start with `https://123456789012.beta.example.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_65() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some("apname".to_owned()))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid Configuration: DualStack and custom endpoint are not supported [DualStack + Custom endpoint is not supported(non-arn)]");
    assert!(
        format!("{:?}", error).contains("Invalid Configuration: DualStack and custom endpoint are not supported"),
        "expected error to contain `Invalid Configuration: DualStack and custom endpoint are not supported` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_66() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::UseDualStack": true,
        "SDK::Endpoint": "https://beta.example.com"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_dual_stack(true);
        let builder = builder.endpoint_url("https://beta.example.com");
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: Outpost buckets do not support dual-stack [get bucket with endpoint_url and dualstack is not supported@us-west-2]");
    assert!(
        format!("{:?}", error).contains("Invalid configuration: Outpost buckets do not support dual-stack"),
        "expected error to contain `Invalid configuration: Outpost buckets do not support dual-stack` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_67() {
    /* builtIns: {
        "AWS::Region": "cn-north-1",
        "AWS::UseFIPS": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("cn-north-1"));
        let builder = builder.use_fips(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_outpost_id(::std::option::Option::Some("op-123".to_owned()))
            .set_account_id(::std::option::Option::Some("0123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Partition does not support FIPS [ListRegionalBuckets + OutpostId with fips in CN.]");
    assert!(
        format!("{:?}", error).contains("Partition does not support FIPS"),
        "expected error to contain `Partition does not support FIPS` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_list_regional_buckets_68() {
    /* builtIns: {
        "AWS::Region": "us-west-1"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-1"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .list_regional_buckets()
            .set_outpost_id(::std::option::Option::Some("?outpost/invalid+".to_owned()))
            .set_account_id(::std::option::Option::Some("0123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: OutpostId must only contain a-z, A-Z, 0-9 and `-`. [ListRegionalBuckets + invalid OutpostId.]");
    assert!(
        format!("{:?}", error).contains("OutpostId must only contain a-z, A-Z, 0-9 and `-`."),
        "expected error to contain `OutpostId must only contain a-z, A-Z, 0-9 and `-`.` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_69() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                    format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                    "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_70() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Accesspoint ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                    format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                    "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_71() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "SDK::Endpoint": "https://beta.example.com",
        "AWS::S3Control::UseArnRegion": false
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.endpoint_url("https://beta.example.com");
        let builder = builder.use_arn_region(false);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false` [Outpost Bucket ARN with arn region and client region mismatch with UseArnRegion=false]");
    assert!(
                                    format!("{:?}", error).contains("Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`"),
                                    "expected error to contain `Invalid configuration: region from ARN `us-east-1` does not match client region `us-west-2` and UseArnRegion is `false`` but it was {:?}", error
                                );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_72() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_73() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_74() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-east-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-east-1.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-east-1.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_75() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Outpost Bucket ARN with partition mismatch with UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_access_point_76() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Accesspoint ARN with partition mismatch and UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_delete_access_point_77() {
    /* builtIns: {
        "AWS::Region": "us-west-2",
        "AWS::S3Control::UseArnRegion": true
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        let builder = builder.use_arn_region(true);
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .delete_access_point()
            .set_name(::std::option::Option::Some(
                "arn:aws:s3-outposts:cn-north-1:123456789012:outpost:op-01234567890123456:accesspoint:myaccesspoint".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    rcvr.expect_no_request();
    let error = _result.expect_err("expected error: Client was configured for partition `aws` but ARN has `aws-cn` [Accesspoint ARN with partition mismatch and UseArnRegion=true]");
    assert!(
        format!("{:?}", error).contains("Client was configured for partition `aws` but ARN has `aws-cn`"),
        "expected error to contain `Client was configured for partition `aws` but ARN has `aws-cn`` but it was {:?}",
        error
    );
}

#[::tokio::test]
async fn operation_input_test_get_bucket_versioning_78() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .get_bucket_versioning()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}

#[::tokio::test]
async fn operation_input_test_put_bucket_versioning_79() {
    /* builtIns: {
        "AWS::Region": "us-west-2"
    } */
    /* clientParams: {} */
    let (http_client, rcvr) = ::aws_smithy_runtime::client::http::test_util::capture_request(None);
    let conf = {
        #[allow(unused_mut)]
        let mut builder = aws_sdk_s3control::Config::builder().with_test_defaults().http_client(http_client);
        let builder = builder.region(::aws_types::region::Region::new("us-west-2"));
        builder.build()
    };
    let client = aws_sdk_s3control::Client::from_conf(conf);
    let _result = dbg!(
        client
            .put_bucket_versioning()
            .set_bucket(::std::option::Option::Some(
                "arn:aws:s3-outposts:us-west-2:123456789012:outpost:op-01234567890123456:bucket:mybucket".to_owned()
            ))
            .set_account_id(::std::option::Option::Some("123456789012".to_owned()))
            .set_versioning_configuration(::std::option::Option::Some(
                aws_sdk_s3control::types::VersioningConfiguration::builder()
                    .set_status(::std::option::Option::Some(
                        "Enabled"
                            .parse::<aws_sdk_s3control::types::BucketVersioningStatus>()
                            .expect("static value validated to member")
                    ))
                    .build()
            ))
            .send()
            .await
    );
    let req = rcvr.expect_request();
    let uri = req.uri().to_string();
    assert!(
        uri.starts_with("https://s3-outposts.us-west-2.amazonaws.com"),
        "expected URI to start with `https://s3-outposts.us-west-2.amazonaws.com` but it was `{}`",
        uri
    );
}
