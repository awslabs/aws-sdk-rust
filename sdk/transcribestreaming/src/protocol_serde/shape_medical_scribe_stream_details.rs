// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_medical_scribe_stream_details<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::MedicalScribeStreamDetails>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::MedicalScribeStreamDetailsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "SessionId" => {
                            builder = builder.set_session_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "StreamCreatedAt" => {
                            builder = builder.set_stream_created_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "StreamEndedAt" => {
                            builder = builder.set_stream_ended_at(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "LanguageCode" => {
                            builder = builder.set_language_code(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MedicalScribeLanguageCode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "MediaSampleRateHertz" => {
                            builder = builder.set_media_sample_rate_hertz(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "MediaEncoding" => {
                            builder = builder.set_media_encoding(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MedicalScribeMediaEncoding::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "VocabularyName" => {
                            builder = builder.set_vocabulary_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterName" => {
                            builder = builder.set_vocabulary_filter_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "VocabularyFilterMethod" => {
                            builder = builder.set_vocabulary_filter_method(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::MedicalScribeVocabularyFilterMethod::from(u.as_ref()))
                                    })
                                    .transpose()?,
                            );
                        }
                        "ResourceAccessRoleArn" => {
                            builder = builder.set_resource_access_role_arn(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ChannelDefinitions" => {
                            builder = builder.set_channel_definitions(
                                crate::protocol_serde::shape_medical_scribe_channel_definitions::de_medical_scribe_channel_definitions(tokens)?,
                            );
                        }
                        "EncryptionSettings" => {
                            builder = builder.set_encryption_settings(
                                crate::protocol_serde::shape_medical_scribe_encryption_settings::de_medical_scribe_encryption_settings(tokens)?,
                            );
                        }
                        "StreamStatus" => {
                            builder = builder.set_stream_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::MedicalScribeStreamStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PostStreamAnalyticsSettings" => {
                            builder = builder.set_post_stream_analytics_settings(
                                    crate::protocol_serde::shape_medical_scribe_post_stream_analytics_settings::de_medical_scribe_post_stream_analytics_settings(tokens)?
                                );
                        }
                        "PostStreamAnalyticsResult" => {
                            builder = builder.set_post_stream_analytics_result(
                                    crate::protocol_serde::shape_medical_scribe_post_stream_analytics_result::de_medical_scribe_post_stream_analytics_result(tokens)?
                                );
                        }
                        "MedicalScribeContextProvided" => {
                            builder = builder
                                .set_medical_scribe_context_provided(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
