// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn add_headers_start_medical_stream_transcription(
    input: &crate::input::StartMedicalStreamTranscriptionInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_1) = &input.language_code {
        let formatted_2 = AsRef::<str>::as_ref(inner_1);
        if !formatted_2.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_2;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "language_code",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-language-code", header_value);
        }
    }
    if let Some(inner_3) = &input.media_sample_rate_hertz {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(*inner_3);
        let formatted_4 = encoder.encode();
        if !formatted_4.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_4;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "media_sample_rate_hertz",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-sample-rate", header_value);
        }
    }
    if let Some(inner_5) = &input.media_encoding {
        let formatted_6 = AsRef::<str>::as_ref(inner_5);
        if !formatted_6.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_6;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "media_encoding",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-media-encoding", header_value);
        }
    }
    if let Some(inner_7) = &input.vocabulary_name {
        let formatted_8 = AsRef::<str>::as_ref(inner_7);
        if !formatted_8.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_8;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "vocabulary_name",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-vocabulary-name", header_value);
        }
    }
    if let Some(inner_9) = &input.specialty {
        let formatted_10 = AsRef::<str>::as_ref(inner_9);
        if !formatted_10.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_10;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "specialty",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-specialty", header_value);
        }
    }
    if let Some(inner_11) = &input.r#type {
        let formatted_12 = AsRef::<str>::as_ref(inner_11);
        if !formatted_12.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_12;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "r#type",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-type", header_value);
        }
    }
    if input.show_speaker_label {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.show_speaker_label);
        let formatted_13 = encoder.encode();
        if !formatted_13.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_13;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "show_speaker_label",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-show-speaker-label", header_value);
        }
    }
    if let Some(inner_14) = &input.session_id {
        let formatted_15 = AsRef::<str>::as_ref(inner_14);
        if !formatted_15.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_15;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "session_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-session-id", header_value);
        }
    }
    if input.enable_channel_identification {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.enable_channel_identification);
        let formatted_16 = encoder.encode();
        if !formatted_16.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_16;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "enable_channel_identification",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header(
                "x-amzn-transcribe-enable-channel-identification",
                header_value,
            );
        }
    }
    if let Some(inner_17) = &input.number_of_channels {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(*inner_17);
        let formatted_18 = encoder.encode();
        if !formatted_18.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_18;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "number_of_channels",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-number-of-channels", header_value);
        }
    }
    if let Some(inner_19) = &input.content_identification_type {
        let formatted_20 = AsRef::<str>::as_ref(inner_19);
        if !formatted_20.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_20;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "content_identification_type",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header(
                "x-amzn-transcribe-content-identification-type",
                header_value,
            );
        }
    }
    Ok(builder)
}

pub fn add_headers_start_stream_transcription(
    input: &crate::input::StartStreamTranscriptionInput,
    mut builder: http::request::Builder,
) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError> {
    if let Some(inner_21) = &input.language_code {
        let formatted_22 = AsRef::<str>::as_ref(inner_21);
        if !formatted_22.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_22;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "language_code",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-language-code", header_value);
        }
    }
    if let Some(inner_23) = &input.media_sample_rate_hertz {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(*inner_23);
        let formatted_24 = encoder.encode();
        if !formatted_24.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_24;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "media_sample_rate_hertz",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-sample-rate", header_value);
        }
    }
    if let Some(inner_25) = &input.media_encoding {
        let formatted_26 = AsRef::<str>::as_ref(inner_25);
        if !formatted_26.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_26;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "media_encoding",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-media-encoding", header_value);
        }
    }
    if let Some(inner_27) = &input.vocabulary_name {
        let formatted_28 = AsRef::<str>::as_ref(inner_27);
        if !formatted_28.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_28;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "vocabulary_name",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-vocabulary-name", header_value);
        }
    }
    if let Some(inner_29) = &input.session_id {
        let formatted_30 = AsRef::<str>::as_ref(inner_29);
        if !formatted_30.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_30;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "session_id",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-session-id", header_value);
        }
    }
    if let Some(inner_31) = &input.vocabulary_filter_name {
        let formatted_32 = AsRef::<str>::as_ref(inner_31);
        if !formatted_32.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_32;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "vocabulary_filter_name",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-vocabulary-filter-name", header_value);
        }
    }
    if let Some(inner_33) = &input.vocabulary_filter_method {
        let formatted_34 = AsRef::<str>::as_ref(inner_33);
        if !formatted_34.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_34;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "vocabulary_filter_method",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-vocabulary-filter-method", header_value);
        }
    }
    if input.show_speaker_label {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.show_speaker_label);
        let formatted_35 = encoder.encode();
        if !formatted_35.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_35;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "show_speaker_label",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-show-speaker-label", header_value);
        }
    }
    if input.enable_channel_identification {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.enable_channel_identification);
        let formatted_36 = encoder.encode();
        if !formatted_36.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_36;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "enable_channel_identification",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header(
                "x-amzn-transcribe-enable-channel-identification",
                header_value,
            );
        }
    }
    if let Some(inner_37) = &input.number_of_channels {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(*inner_37);
        let formatted_38 = encoder.encode();
        if !formatted_38.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_38;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "number_of_channels",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-number-of-channels", header_value);
        }
    }
    if input.enable_partial_results_stabilization {
        let mut encoder =
            aws_smithy_types::primitive::Encoder::from(input.enable_partial_results_stabilization);
        let formatted_39 = encoder.encode();
        if !formatted_39.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_39;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "enable_partial_results_stabilization",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header(
                "x-amzn-transcribe-enable-partial-results-stabilization",
                header_value,
            );
        }
    }
    if let Some(inner_40) = &input.partial_results_stability {
        let formatted_41 = AsRef::<str>::as_ref(inner_40);
        if !formatted_41.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_41;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "partial_results_stability",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-partial-results-stability", header_value);
        }
    }
    if let Some(inner_42) = &input.content_identification_type {
        let formatted_43 = AsRef::<str>::as_ref(inner_42);
        if !formatted_43.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_43;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "content_identification_type",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header(
                "x-amzn-transcribe-content-identification-type",
                header_value,
            );
        }
    }
    if let Some(inner_44) = &input.content_redaction_type {
        let formatted_45 = AsRef::<str>::as_ref(inner_44);
        if !formatted_45.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_45;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "content_redaction_type",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-content-redaction-type", header_value);
        }
    }
    if let Some(inner_46) = &input.pii_entity_types {
        let formatted_47 = AsRef::<str>::as_ref(inner_46);
        if !formatted_47.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_47;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "pii_entity_types",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-pii-entity-types", header_value);
        }
    }
    if let Some(inner_48) = &input.language_model_name {
        let formatted_49 = AsRef::<str>::as_ref(inner_48);
        if !formatted_49.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_49;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "language_model_name",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-language-model-name", header_value);
        }
    }
    if input.identify_language {
        let mut encoder = aws_smithy_types::primitive::Encoder::from(input.identify_language);
        let formatted_50 = encoder.encode();
        if !formatted_50.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_50;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "identify_language",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-identify-language", header_value);
        }
    }
    if let Some(inner_51) = &input.language_options {
        let formatted_52 = AsRef::<str>::as_ref(inner_51);
        if !formatted_52.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_52;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "language_options",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-language-options", header_value);
        }
    }
    if let Some(inner_53) = &input.preferred_language {
        let formatted_54 = AsRef::<str>::as_ref(inner_53);
        if !formatted_54.is_empty() {
            use std::convert::TryFrom;
            let header_value = formatted_54;
            let header_value =
                http::header::HeaderValue::try_from(&*header_value).map_err(|err| {
                    aws_smithy_http::operation::BuildError::InvalidField {
                        field: "preferred_language",
                        details: format!(
                            "`{}` cannot be used as a header value: {}",
                            &header_value, err
                        ),
                    }
                })?;
            builder = builder.header("x-amzn-transcribe-preferred-language", header_value);
        }
    }
    Ok(builder)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_content_identification_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::MedicalContentIdentificationType>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-content-identification-type")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_enable_channel_identification(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-enable-channel-identification")
        .iter();
    let var_55 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_55.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_55.len()),
        ))
    } else {
        let mut var_55 = var_55;
        Ok(var_55.pop())
    }
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_language_code(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::LanguageCode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-transcribe-language-code").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_media_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::MediaEncoding>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-media-encoding")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_media_sample_rate_hertz(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-sample-rate").iter();
    let var_56 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_56.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_56.len()),
        ))
    } else {
        let mut var_56 = var_56;
        Ok(var_56.pop())
    }
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_number_of_channels(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-number-of-channels")
        .iter();
    let var_57 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_57.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_57.len()),
        ))
    } else {
        let mut var_57 = var_57;
        Ok(var_57.pop())
    }
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_request_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-request-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_session_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-transcribe-session-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_show_speaker_label(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-show-speaker-label")
        .iter();
    let var_58 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_58.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_58.len()),
        ))
    } else {
        let mut var_58 = var_58;
        Ok(var_58.pop())
    }
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_specialty(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::Specialty>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-transcribe-specialty").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_start_medical_stream_transcription_start_medical_stream_transcription_output_transcript_result_stream(
    body: &mut aws_smithy_http::body::SdkBody,
) -> std::result::Result<
    aws_smithy_http::event_stream::Receiver<
        crate::model::MedicalTranscriptResultStream,
        crate::error::StartMedicalStreamTranscriptionError,
    >,
    crate::error::StartMedicalStreamTranscriptionError,
> {
    let unmarshaller = crate::event_stream_serde::MedicalTranscriptResultStreamUnmarshaller::new();
    let body = std::mem::replace(body, aws_smithy_http::body::SdkBody::taken());
    Ok(aws_smithy_http::event_stream::Receiver::new(
        unmarshaller,
        body,
    ))
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<crate::model::Type>, aws_smithy_http::header::ParseError>
{
    let headers = header_map.get_all("x-amzn-transcribe-type").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_medical_stream_transcription_start_medical_stream_transcription_output_vocabulary_name(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-vocabulary-name")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_content_identification_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ContentIdentificationType>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-content-identification-type")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_content_redaction_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::ContentRedactionType>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-content-redaction-type")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_enable_channel_identification(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-enable-channel-identification")
        .iter();
    let var_59 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_59.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_59.len()),
        ))
    } else {
        let mut var_59 = var_59;
        Ok(var_59.pop())
    }
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_enable_partial_results_stabilization(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-enable-partial-results-stabilization")
        .iter();
    let var_60 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_60.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_60.len()),
        ))
    } else {
        let mut var_60 = var_60;
        Ok(var_60.pop())
    }
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_identify_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-identify-language")
        .iter();
    let var_61 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_61.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_61.len()),
        ))
    } else {
        let mut var_61 = var_61;
        Ok(var_61.pop())
    }
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_language_code(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::LanguageCode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-transcribe-language-code").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_language_model_name(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-language-model-name")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_language_options(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-language-options")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_media_encoding(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::MediaEncoding>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-media-encoding")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_media_sample_rate_hertz(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map.get_all("x-amzn-transcribe-sample-rate").iter();
    let var_62 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_62.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_62.len()),
        ))
    } else {
        let mut var_62 = var_62;
        Ok(var_62.pop())
    }
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_number_of_channels(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<i32>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-number-of-channels")
        .iter();
    let var_63 = aws_smithy_http::header::read_many_primitive::<i32>(headers)?;
    if var_63.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_63.len()),
        ))
    } else {
        let mut var_63 = var_63;
        Ok(var_63.pop())
    }
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_partial_results_stability(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::PartialResultsStability>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-partial-results-stability")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_pii_entity_types(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-pii-entity-types")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_preferred_language(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::LanguageCode>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-preferred-language")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_request_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-request-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_session_id(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map.get_all("x-amzn-transcribe-session-id").iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_show_speaker_label(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<bool>, aws_smithy_http::header::ParseError> {
    let headers = header_map
        .get_all("x-amzn-transcribe-show-speaker-label")
        .iter();
    let var_64 = aws_smithy_http::header::read_many_primitive::<bool>(headers)?;
    if var_64.len() > 1 {
        Err(aws_smithy_http::header::ParseError::new_with_message(
            format!("expected one item but found {}", var_64.len()),
        ))
    } else {
        let mut var_64 = var_64;
        Ok(var_64.pop())
    }
}

pub fn deser_payload_start_stream_transcription_start_stream_transcription_output_transcript_result_stream(
    body: &mut aws_smithy_http::body::SdkBody,
) -> std::result::Result<
    aws_smithy_http::event_stream::Receiver<
        crate::model::TranscriptResultStream,
        crate::error::StartStreamTranscriptionError,
    >,
    crate::error::StartStreamTranscriptionError,
> {
    let unmarshaller = crate::event_stream_serde::TranscriptResultStreamUnmarshaller::new();
    let body = std::mem::replace(body, aws_smithy_http::body::SdkBody::taken());
    Ok(aws_smithy_http::event_stream::Receiver::new(
        unmarshaller,
        body,
    ))
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_vocabulary_filter_method(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<crate::model::VocabularyFilterMethod>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-vocabulary-filter-method")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_vocabulary_filter_name(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-vocabulary-filter-name")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}

pub fn deser_header_start_stream_transcription_start_stream_transcription_output_vocabulary_name(
    header_map: &http::HeaderMap,
) -> std::result::Result<
    std::option::Option<std::string::String>,
    aws_smithy_http::header::ParseError,
> {
    let headers = header_map
        .get_all("x-amzn-transcribe-vocabulary-name")
        .iter();
    aws_smithy_http::header::one_or_none(headers)
}
