// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Transcribe Streaming Service
///
/// Client for invoking operations on Amazon Transcribe Streaming Service. Each operation on Amazon Transcribe Streaming Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_transcribestreaming::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_transcribestreaming::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_transcribestreaming::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`StartCallAnalyticsStreamTranscription`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`language_code(CallAnalyticsLanguageCode)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::language_code) / [`set_language_code(Option<CallAnalyticsLanguageCode>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_language_code): <p>Specify the language code that represents the language spoken in your audio.</p>  <p>If you're unsure of the language spoken in your audio, consider using <code>IdentifyLanguage</code> to enable automatic language identification.</p>  <p>For a list of languages supported with streaming Call Analytics, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
    ///   - [`media_sample_rate_hertz(i32)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::media_sample_rate_hertz) / [`set_media_sample_rate_hertz(Option<i32>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_media_sample_rate_hertz): <p>The sample rate of the input audio (in hertz). Low-quality audio, such as telephone audio, is typically around 8,000 Hz. High-quality audio typically ranges from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must match that of your audio.</p>
    ///   - [`media_encoding(MediaEncoding)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::media_encoding) / [`set_media_encoding(Option<MediaEncoding>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_media_encoding): <p>Specify the encoding of your input audio. Supported formats are:</p>  <ul>   <li> <p>FLAC</p> </li>   <li> <p>OPUS-encoded audio in an Ogg container</p> </li>   <li> <p>PCM (only signed 16-bit little-endian audio formats, which does not include WAV)</p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio">Media formats</a>.</p>
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_vocabulary_name): <p>Specify the name of the custom vocabulary that you want to use when processing your transcription. Note that vocabulary names are case sensitive.</p>  <p>If the language of the specified custom vocabulary doesn't match the language identified in your media, the custom vocabulary is not applied to your transcription.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html">Custom vocabularies</a>.</p>
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_session_id): <p>Specify a name for your Call Analytics transcription session. If you don't include this parameter in your request, Amazon Transcribe generates an ID and returns it in the response.</p>  <p>You can use a session ID to retry a streaming session.</p>
    ///   - [`audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::audio_stream) / [`set_audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_audio_stream): <p>An encoded stream of audio blobs. Audio streams are encoded as either HTTP/2 or WebSocket data frames.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html">Transcribing streaming audio</a>.</p>
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_vocabulary_filter_name): <p>Specify the name of the custom vocabulary filter that you want to use when processing your transcription. Note that vocabulary filter names are case sensitive.</p>  <p>If the language of the specified custom vocabulary filter doesn't match the language identified in your media, the vocabulary filter is not applied to your transcription.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted words</a>.</p>
    ///   - [`vocabulary_filter_method(VocabularyFilterMethod)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::vocabulary_filter_method) / [`set_vocabulary_filter_method(Option<VocabularyFilterMethod>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_vocabulary_filter_method): <p>Specify how you want your vocabulary filter applied to your transcript.</p>  <p>To replace words with <code>***</code>, choose <code>mask</code>.</p>  <p>To delete words, choose <code>remove</code>.</p>  <p>To flag words without changing them, choose <code>tag</code>.</p>
    ///   - [`language_model_name(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::language_model_name) / [`set_language_model_name(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_language_model_name): <p>Specify the name of the custom language model that you want to use when processing your transcription. Note that language model names are case sensitive.</p>  <p>The language of the specified language model must match the language code you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
    ///   - [`enable_partial_results_stabilization(bool)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::enable_partial_results_stabilization) / [`set_enable_partial_results_stabilization(bool)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_enable_partial_results_stabilization): <p>Enables partial result stabilization for your transcription. Partial result stabilization can reduce latency in your output, but may impact accuracy. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization">Partial-result stabilization</a>.</p>
    ///   - [`partial_results_stability(PartialResultsStability)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::partial_results_stability) / [`set_partial_results_stability(Option<PartialResultsStability>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_partial_results_stability): <p>Specify the level of stability to use when you enable partial results stabilization (<code>EnablePartialResultsStabilization</code>).</p>  <p>Low stability provides the highest accuracy. High stability transcribes faster, but with slightly lower accuracy.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization">Partial-result stabilization</a>.</p>
    ///   - [`content_identification_type(ContentIdentificationType)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::content_identification_type) / [`set_content_identification_type(Option<ContentIdentificationType>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_content_identification_type): <p>Labels all personally identifiable information (PII) identified in your transcript.</p>  <p>Content identification is performed at the segment level; PII specified in <code>PiiEntityTypes</code> is flagged upon complete transcription of an audio segment.</p>  <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code> in the same request. If you set both, your request returns a <code>BadRequestException</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html">Redacting or identifying personally identifiable information</a>.</p>
    ///   - [`content_redaction_type(ContentRedactionType)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::content_redaction_type) / [`set_content_redaction_type(Option<ContentRedactionType>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_content_redaction_type): <p>Redacts all personally identifiable information (PII) identified in your transcript.</p>  <p>Content redaction is performed at the segment level; PII specified in <code>PiiEntityTypes</code> is redacted upon complete transcription of an audio segment.</p>  <p>You can’t set <code>ContentRedactionType</code> and <code>ContentIdentificationType</code> in the same request. If you set both, your request returns a <code>BadRequestException</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html">Redacting or identifying personally identifiable information</a>.</p>
    ///   - [`pii_entity_types(impl Into<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::pii_entity_types) / [`set_pii_entity_types(Option<String>)`](crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::set_pii_entity_types): <p>Specify which types of personally identifiable information (PII) you want to redact in your transcript. You can include as many types as you'd like, or you can select <code>ALL</code>.</p>  <p>To include <code>PiiEntityTypes</code> in your Call Analytics request, you must also include either <code>ContentIdentificationType</code> or <code>ContentRedactionType</code>.</p>  <p>Values must be comma-separated and can include: <code>BANK_ACCOUNT_NUMBER</code>, <code>BANK_ROUTING</code>, <code>CREDIT_DEBIT_NUMBER</code>, <code>CREDIT_DEBIT_CVV</code>, <code>CREDIT_DEBIT_EXPIRY</code>, <code>PIN</code>, <code>EMAIL</code>, <code>ADDRESS</code>, <code>NAME</code>, <code>PHONE</code>, <code>SSN</code>, or <code>ALL</code>.</p>
    /// - On success, responds with [`StartCallAnalyticsStreamTranscriptionOutput`](crate::output::StartCallAnalyticsStreamTranscriptionOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::request_id): <p>Provides the identifier for your Call Analytics streaming request.</p>
    ///   - [`language_code(Option<CallAnalyticsLanguageCode>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::language_code): <p>Provides the language code that you specified in your Call Analytics request.</p>
    ///   - [`media_sample_rate_hertz(Option<i32>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::media_sample_rate_hertz): <p>Provides the sample rate that you specified in your Call Analytics request.</p>
    ///   - [`media_encoding(Option<MediaEncoding>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::media_encoding): <p>Provides the media encoding you specified in your Call Analytics request.</p>
    ///   - [`vocabulary_name(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::vocabulary_name): <p>Provides the name of the custom vocabulary that you specified in your Call Analytics request.</p>
    ///   - [`session_id(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::session_id): <p>Provides the identifier for your Call Analytics transcription session.</p>
    ///   - [`call_analytics_transcript_result_stream(Receiver<crate::model::CallAnalyticsTranscriptResultStream, crate::error::CallAnalyticsTranscriptResultStreamError>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::call_analytics_transcript_result_stream): <p>Provides detailed information about your Call Analytics streaming session.</p>
    ///   - [`vocabulary_filter_name(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::vocabulary_filter_name): <p>Provides the name of the custom vocabulary filter that you specified in your Call Analytics request.</p>
    ///   - [`vocabulary_filter_method(Option<VocabularyFilterMethod>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::vocabulary_filter_method): <p>Provides the vocabulary filtering method used in your Call Analytics transcription.</p>
    ///   - [`language_model_name(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::language_model_name): <p>Provides the name of the custom language model that you specified in your Call Analytics request.</p>
    ///   - [`enable_partial_results_stabilization(bool)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::enable_partial_results_stabilization): <p>Shows whether partial results stabilization was enabled for your Call Analytics transcription.</p>
    ///   - [`partial_results_stability(Option<PartialResultsStability>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::partial_results_stability): <p>Provides the stabilization level used for your transcription.</p>
    ///   - [`content_identification_type(Option<ContentIdentificationType>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::content_identification_type): <p>Shows whether content identification was enabled for your Call Analytics transcription.</p>
    ///   - [`content_redaction_type(Option<ContentRedactionType>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::content_redaction_type): <p>Shows whether content redaction was enabled for your Call Analytics transcription.</p>
    ///   - [`pii_entity_types(Option<String>)`](crate::output::StartCallAnalyticsStreamTranscriptionOutput::pii_entity_types): <p>Lists the PII entity types you specified in your Call Analytics request.</p>
    /// - On failure, responds with [`SdkError<StartCallAnalyticsStreamTranscriptionError>`](crate::error::StartCallAnalyticsStreamTranscriptionError)
    pub fn start_call_analytics_stream_transcription(
        &self,
    ) -> crate::client::fluent_builders::StartCallAnalyticsStreamTranscription {
        crate::client::fluent_builders::StartCallAnalyticsStreamTranscription::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`StartMedicalStreamTranscription`](crate::client::fluent_builders::StartMedicalStreamTranscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartMedicalStreamTranscription::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_language_code): <p>Specify the language code that represents the language spoken in your audio.</p> <important>   <p>Amazon Transcribe Medical only supports US English (<code>en-US</code>).</p>  </important>
    ///   - [`media_sample_rate_hertz(i32)`](crate::client::fluent_builders::StartMedicalStreamTranscription::media_sample_rate_hertz) / [`set_media_sample_rate_hertz(Option<i32>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_media_sample_rate_hertz): <p>The sample rate of the input audio (in hertz). Amazon Transcribe Medical supports a range from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must match that of your audio.</p>
    ///   - [`media_encoding(MediaEncoding)`](crate::client::fluent_builders::StartMedicalStreamTranscription::media_encoding) / [`set_media_encoding(Option<MediaEncoding>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_media_encoding): <p>Specify the encoding used for the input audio. Supported formats are:</p>  <ul>   <li> <p>FLAC</p> </li>   <li> <p>OPUS-encoded audio in an Ogg container</p> </li>   <li> <p>PCM (only signed 16-bit little-endian audio formats, which does not include WAV)</p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio">Media formats</a>.</p>
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_vocabulary_name): <p>Specify the name of the custom vocabulary that you want to use when processing your transcription. Note that vocabulary names are case sensitive.</p>
    ///   - [`specialty(Specialty)`](crate::client::fluent_builders::StartMedicalStreamTranscription::specialty) / [`set_specialty(Option<Specialty>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_specialty): <p>Specify the medical specialty contained in your audio.</p>
    ///   - [`r#type(Type)`](crate::client::fluent_builders::StartMedicalStreamTranscription::type) / [`set_type(Option<Type>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_type): <p>Specify the type of input audio. For example, choose <code>DICTATION</code> for a provider dictating patient notes and <code>CONVERSATION</code> for a dialogue between a patient and a medical professional.</p>
    ///   - [`show_speaker_label(bool)`](crate::client::fluent_builders::StartMedicalStreamTranscription::show_speaker_label) / [`set_show_speaker_label(bool)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_show_speaker_label): <p>Enables speaker partitioning (diarization) in your transcription output. Speaker partitioning labels the speech from individual speakers in your media file.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html">Partitioning speakers (diarization)</a>.</p>
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_session_id): <p>Specify a name for your transcription session. If you don't include this parameter in your request, Amazon Transcribe Medical generates an ID and returns it in the response.</p>  <p>You can use a session ID to retry a streaming session.</p>
    ///   - [`audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::audio_stream) / [`set_audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_audio_stream): <p>An encoded stream of audio blobs. Audio streams are encoded as either HTTP/2 or WebSocket data frames.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html">Transcribing streaming audio</a>.</p>
    ///   - [`enable_channel_identification(bool)`](crate::client::fluent_builders::StartMedicalStreamTranscription::enable_channel_identification) / [`set_enable_channel_identification(bool)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_enable_channel_identification): <p>Enables channel identification in multi-channel audio.</p>  <p>Channel identification transcribes the audio on each channel independently, then appends the output for each channel into one transcript.</p>  <p>If you have multi-channel audio and do not enable channel identification, your audio is transcribed in a continuous manner and your transcript is not separated by channel.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html">Transcribing multi-channel audio</a>.</p>
    ///   - [`number_of_channels(i32)`](crate::client::fluent_builders::StartMedicalStreamTranscription::number_of_channels) / [`set_number_of_channels(Option<i32>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_number_of_channels): <p>Specify the number of channels in your audio stream. Up to two channels are supported.</p>
    ///   - [`content_identification_type(MedicalContentIdentificationType)`](crate::client::fluent_builders::StartMedicalStreamTranscription::content_identification_type) / [`set_content_identification_type(Option<MedicalContentIdentificationType>)`](crate::client::fluent_builders::StartMedicalStreamTranscription::set_content_identification_type): <p>Labels all personal health information (PHI) identified in your transcript.</p>  <p>Content identification is performed at the segment level; PHI is flagged upon complete transcription of an audio segment.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/phi-id.html">Identifying personal health information (PHI) in a transcription</a>.</p>
    /// - On success, responds with [`StartMedicalStreamTranscriptionOutput`](crate::output::StartMedicalStreamTranscriptionOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::StartMedicalStreamTranscriptionOutput::request_id): <p>Provides the identifier for your streaming request.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::StartMedicalStreamTranscriptionOutput::language_code): <p>Provides the language code that you specified in your request. This must be <code>en-US</code>.</p>
    ///   - [`media_sample_rate_hertz(Option<i32>)`](crate::output::StartMedicalStreamTranscriptionOutput::media_sample_rate_hertz): <p>Provides the sample rate that you specified in your request.</p>
    ///   - [`media_encoding(Option<MediaEncoding>)`](crate::output::StartMedicalStreamTranscriptionOutput::media_encoding): <p>Provides the media encoding you specified in your request.</p>
    ///   - [`vocabulary_name(Option<String>)`](crate::output::StartMedicalStreamTranscriptionOutput::vocabulary_name): <p>Provides the name of the custom vocabulary that you specified in your request.</p>
    ///   - [`specialty(Option<Specialty>)`](crate::output::StartMedicalStreamTranscriptionOutput::specialty): <p>Provides the medical specialty that you specified in your request.</p>
    ///   - [`r#type(Option<Type>)`](crate::output::StartMedicalStreamTranscriptionOutput::type): <p>Provides the type of audio you specified in your request.</p>
    ///   - [`show_speaker_label(bool)`](crate::output::StartMedicalStreamTranscriptionOutput::show_speaker_label): <p>Shows whether speaker partitioning was enabled for your transcription.</p>
    ///   - [`session_id(Option<String>)`](crate::output::StartMedicalStreamTranscriptionOutput::session_id): <p>Provides the identifier for your transcription session.</p>
    ///   - [`transcript_result_stream(Receiver<crate::model::MedicalTranscriptResultStream, crate::error::MedicalTranscriptResultStreamError>)`](crate::output::StartMedicalStreamTranscriptionOutput::transcript_result_stream): <p>Provides detailed information about your streaming session.</p>
    ///   - [`enable_channel_identification(bool)`](crate::output::StartMedicalStreamTranscriptionOutput::enable_channel_identification): <p>Shows whether channel identification was enabled for your transcription.</p>
    ///   - [`number_of_channels(Option<i32>)`](crate::output::StartMedicalStreamTranscriptionOutput::number_of_channels): <p>Provides the number of channels that you specified in your request.</p>
    ///   - [`content_identification_type(Option<MedicalContentIdentificationType>)`](crate::output::StartMedicalStreamTranscriptionOutput::content_identification_type): <p>Shows whether content identification was enabled for your transcription.</p>
    /// - On failure, responds with [`SdkError<StartMedicalStreamTranscriptionError>`](crate::error::StartMedicalStreamTranscriptionError)
    pub fn start_medical_stream_transcription(
        &self,
    ) -> crate::client::fluent_builders::StartMedicalStreamTranscription {
        crate::client::fluent_builders::StartMedicalStreamTranscription::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartStreamTranscription`](crate::client::fluent_builders::StartStreamTranscription) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`language_code(LanguageCode)`](crate::client::fluent_builders::StartStreamTranscription::language_code) / [`set_language_code(Option<LanguageCode>)`](crate::client::fluent_builders::StartStreamTranscription::set_language_code): <p>Specify the language code that represents the language spoken in your audio.</p>  <p>If you're unsure of the language spoken in your audio, consider using <code>IdentifyLanguage</code> to enable automatic language identification.</p>  <p>For a list of languages supported with Amazon Transcribe streaming, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p>
    ///   - [`media_sample_rate_hertz(i32)`](crate::client::fluent_builders::StartStreamTranscription::media_sample_rate_hertz) / [`set_media_sample_rate_hertz(Option<i32>)`](crate::client::fluent_builders::StartStreamTranscription::set_media_sample_rate_hertz): <p>The sample rate of the input audio (in hertz). Low-quality audio, such as telephone audio, is typically around 8,000 Hz. High-quality audio typically ranges from 16,000 Hz to 48,000 Hz. Note that the sample rate you specify must match that of your audio.</p>
    ///   - [`media_encoding(MediaEncoding)`](crate::client::fluent_builders::StartStreamTranscription::media_encoding) / [`set_media_encoding(Option<MediaEncoding>)`](crate::client::fluent_builders::StartStreamTranscription::set_media_encoding): <p>Specify the encoding of your input audio. Supported formats are:</p>  <ul>   <li> <p>FLAC</p> </li>   <li> <p>OPUS-encoded audio in an Ogg container</p> </li>   <li> <p>PCM (only signed 16-bit little-endian audio formats, which does not include WAV)</p> </li>  </ul>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/how-input.html#how-input-audio">Media formats</a>.</p>
    ///   - [`vocabulary_name(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::vocabulary_name) / [`set_vocabulary_name(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_vocabulary_name): <p>Specify the name of the custom vocabulary that you want to use when processing your transcription. Note that vocabulary names are case sensitive.</p>  <p>If the language of the specified custom vocabulary doesn't match the language identified in your media, the custom vocabulary is not applied to your transcription.</p> <important>   <p>This parameter is <b>not</b> intended for use with the <code>IdentifyLanguage</code> parameter. If you're including <code>IdentifyLanguage</code> in your request and want to use one or more custom vocabularies with your transcription, use the <code>VocabularyNames</code> parameter instead.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html">Custom vocabularies</a>.</p>
    ///   - [`session_id(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::session_id) / [`set_session_id(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_session_id): <p>Specify a name for your transcription session. If you don't include this parameter in your request, Amazon Transcribe generates an ID and returns it in the response.</p>  <p>You can use a session ID to retry a streaming session.</p>
    ///   - [`audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartStreamTranscription::audio_stream) / [`set_audio_stream(EventStreamSender<crate::model::AudioStream, crate::error::AudioStreamError>)`](crate::client::fluent_builders::StartStreamTranscription::set_audio_stream): <p>An encoded stream of audio blobs. Audio streams are encoded as either HTTP/2 or WebSocket data frames.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html">Transcribing streaming audio</a>.</p>
    ///   - [`vocabulary_filter_name(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::vocabulary_filter_name) / [`set_vocabulary_filter_name(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_vocabulary_filter_name): <p>Specify the name of the custom vocabulary filter that you want to use when processing your transcription. Note that vocabulary filter names are case sensitive.</p>  <p>If the language of the specified custom vocabulary filter doesn't match the language identified in your media, the vocabulary filter is not applied to your transcription.</p> <important>   <p>This parameter is <b>not</b> intended for use with the <code>IdentifyLanguage</code> parameter. If you're including <code>IdentifyLanguage</code> in your request and want to use one or more vocabulary filters with your transcription, use the <code>VocabularyFilterNames</code> parameter instead.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted words</a>.</p>
    ///   - [`vocabulary_filter_method(VocabularyFilterMethod)`](crate::client::fluent_builders::StartStreamTranscription::vocabulary_filter_method) / [`set_vocabulary_filter_method(Option<VocabularyFilterMethod>)`](crate::client::fluent_builders::StartStreamTranscription::set_vocabulary_filter_method): <p>Specify how you want your vocabulary filter applied to your transcript.</p>  <p>To replace words with <code>***</code>, choose <code>mask</code>.</p>  <p>To delete words, choose <code>remove</code>.</p>  <p>To flag words without changing them, choose <code>tag</code>.</p>
    ///   - [`show_speaker_label(bool)`](crate::client::fluent_builders::StartStreamTranscription::show_speaker_label) / [`set_show_speaker_label(bool)`](crate::client::fluent_builders::StartStreamTranscription::set_show_speaker_label): <p>Enables speaker partitioning (diarization) in your transcription output. Speaker partitioning labels the speech from individual speakers in your media file.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/diarization.html">Partitioning speakers (diarization)</a>.</p>
    ///   - [`enable_channel_identification(bool)`](crate::client::fluent_builders::StartStreamTranscription::enable_channel_identification) / [`set_enable_channel_identification(bool)`](crate::client::fluent_builders::StartStreamTranscription::set_enable_channel_identification): <p>Enables channel identification in multi-channel audio.</p>  <p>Channel identification transcribes the audio on each channel independently, then appends the output for each channel into one transcript.</p>  <p>If you have multi-channel audio and do not enable channel identification, your audio is transcribed in a continuous manner and your transcript is not separated by channel.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/channel-id.html">Transcribing multi-channel audio</a>.</p>
    ///   - [`number_of_channels(i32)`](crate::client::fluent_builders::StartStreamTranscription::number_of_channels) / [`set_number_of_channels(Option<i32>)`](crate::client::fluent_builders::StartStreamTranscription::set_number_of_channels): <p>Specify the number of channels in your audio stream. Up to two channels are supported.</p>
    ///   - [`enable_partial_results_stabilization(bool)`](crate::client::fluent_builders::StartStreamTranscription::enable_partial_results_stabilization) / [`set_enable_partial_results_stabilization(bool)`](crate::client::fluent_builders::StartStreamTranscription::set_enable_partial_results_stabilization): <p>Enables partial result stabilization for your transcription. Partial result stabilization can reduce latency in your output, but may impact accuracy. For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization">Partial-result stabilization</a>.</p>
    ///   - [`partial_results_stability(PartialResultsStability)`](crate::client::fluent_builders::StartStreamTranscription::partial_results_stability) / [`set_partial_results_stability(Option<PartialResultsStability>)`](crate::client::fluent_builders::StartStreamTranscription::set_partial_results_stability): <p>Specify the level of stability to use when you enable partial results stabilization (<code>EnablePartialResultsStabilization</code>).</p>  <p>Low stability provides the highest accuracy. High stability transcribes faster, but with slightly lower accuracy.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/streaming.html#streaming-partial-result-stabilization">Partial-result stabilization</a>.</p>
    ///   - [`content_identification_type(ContentIdentificationType)`](crate::client::fluent_builders::StartStreamTranscription::content_identification_type) / [`set_content_identification_type(Option<ContentIdentificationType>)`](crate::client::fluent_builders::StartStreamTranscription::set_content_identification_type): <p>Labels all personally identifiable information (PII) identified in your transcript.</p>  <p>Content identification is performed at the segment level; PII specified in <code>PiiEntityTypes</code> is flagged upon complete transcription of an audio segment.</p>  <p>You can’t set <code>ContentIdentificationType</code> and <code>ContentRedactionType</code> in the same request. If you set both, your request returns a <code>BadRequestException</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html">Redacting or identifying personally identifiable information</a>.</p>
    ///   - [`content_redaction_type(ContentRedactionType)`](crate::client::fluent_builders::StartStreamTranscription::content_redaction_type) / [`set_content_redaction_type(Option<ContentRedactionType>)`](crate::client::fluent_builders::StartStreamTranscription::set_content_redaction_type): <p>Redacts all personally identifiable information (PII) identified in your transcript.</p>  <p>Content redaction is performed at the segment level; PII specified in <code>PiiEntityTypes</code> is redacted upon complete transcription of an audio segment.</p>  <p>You can’t set <code>ContentRedactionType</code> and <code>ContentIdentificationType</code> in the same request. If you set both, your request returns a <code>BadRequestException</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/pii-redaction.html">Redacting or identifying personally identifiable information</a>.</p>
    ///   - [`pii_entity_types(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::pii_entity_types) / [`set_pii_entity_types(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_pii_entity_types): <p>Specify which types of personally identifiable information (PII) you want to redact in your transcript. You can include as many types as you'd like, or you can select <code>ALL</code>.</p>  <p>To include <code>PiiEntityTypes</code> in your request, you must also include either <code>ContentIdentificationType</code> or <code>ContentRedactionType</code>.</p>  <p>Values must be comma-separated and can include: <code>BANK_ACCOUNT_NUMBER</code>, <code>BANK_ROUTING</code>, <code>CREDIT_DEBIT_NUMBER</code>, <code>CREDIT_DEBIT_CVV</code>, <code>CREDIT_DEBIT_EXPIRY</code>, <code>PIN</code>, <code>EMAIL</code>, <code>ADDRESS</code>, <code>NAME</code>, <code>PHONE</code>, <code>SSN</code>, or <code>ALL</code>.</p>
    ///   - [`language_model_name(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::language_model_name) / [`set_language_model_name(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_language_model_name): <p>Specify the name of the custom language model that you want to use when processing your transcription. Note that language model names are case sensitive.</p>  <p>The language of the specified language model must match the language code you specify in your transcription request. If the languages don't match, the custom language model isn't applied. There are no errors or warnings associated with a language mismatch.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-language-models.html">Custom language models</a>.</p>
    ///   - [`identify_language(bool)`](crate::client::fluent_builders::StartStreamTranscription::identify_language) / [`set_identify_language(bool)`](crate::client::fluent_builders::StartStreamTranscription::set_identify_language): <p>Enables automatic language identification for your transcription.</p>  <p>If you include <code>IdentifyLanguage</code>, you can optionally include a list of language codes, using <code>LanguageOptions</code>, that you think may be present in your audio stream. Including language options can improve transcription accuracy.</p>  <p>You can also include a preferred language using <code>PreferredLanguage</code>. Adding a preferred language can help Amazon Transcribe identify the language faster than if you omit this parameter.</p>  <p>If you have multi-channel audio that contains different languages on each channel, and you've enabled channel identification, automatic language identification identifies the dominant language on each audio channel.</p>  <p>Note that you must include either <code>LanguageCode</code> or <code>IdentifyLanguage</code> in your request. If you include both parameters, your request fails.</p>  <p>Streaming language identification can't be combined with custom language models or redaction.</p>
    ///   - [`language_options(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::language_options) / [`set_language_options(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_language_options): <p>Specify two or more language codes that represent the languages you think may be present in your media; including more than five is not recommended. If you're unsure what languages are present, do not include this parameter.</p>  <p>Including language options can improve the accuracy of language identification.</p>  <p>If you include <code>LanguageOptions</code> in your request, you must also include <code>IdentifyLanguage</code>.</p>  <p>For a list of languages supported with Amazon Transcribe streaming, refer to the <a href="https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html">Supported languages</a> table.</p> <important>   <p>You can only include one language dialect per language per stream. For example, you cannot include <code>en-US</code> and <code>en-AU</code> in the same request.</p>  </important>
    ///   - [`preferred_language(LanguageCode)`](crate::client::fluent_builders::StartStreamTranscription::preferred_language) / [`set_preferred_language(Option<LanguageCode>)`](crate::client::fluent_builders::StartStreamTranscription::set_preferred_language): <p>Specify a preferred language from the subset of languages codes you specified in <code>LanguageOptions</code>.</p>  <p>You can only use this parameter if you've included <code>IdentifyLanguage</code> and <code>LanguageOptions</code> in your request.</p>
    ///   - [`vocabulary_names(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::vocabulary_names) / [`set_vocabulary_names(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_vocabulary_names): <p>Specify the names of the custom vocabularies that you want to use when processing your transcription. Note that vocabulary names are case sensitive.</p>  <p>If none of the languages of the specified custom vocabularies match the language identified in your media, your job fails.</p> <important>   <p>This parameter is only intended for use <b>with</b> the <code>IdentifyLanguage</code> parameter. If you're <b>not</b> including <code>IdentifyLanguage</code> in your request and want to use a custom vocabulary with your transcription, use the <code>VocabularyName</code> parameter instead.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/custom-vocabulary.html">Custom vocabularies</a>.</p>
    ///   - [`vocabulary_filter_names(impl Into<String>)`](crate::client::fluent_builders::StartStreamTranscription::vocabulary_filter_names) / [`set_vocabulary_filter_names(Option<String>)`](crate::client::fluent_builders::StartStreamTranscription::set_vocabulary_filter_names): <p>Specify the names of the custom vocabulary filters that you want to use when processing your transcription. Note that vocabulary filter names are case sensitive.</p>  <p>If none of the languages of the specified custom vocabulary filters match the language identified in your media, your job fails.</p> <important>   <p>This parameter is only intended for use <b>with</b> the <code>IdentifyLanguage</code> parameter. If you're <b>not</b> including <code>IdentifyLanguage</code> in your request and want to use a custom vocabulary filter with your transcription, use the <code>VocabularyFilterName</code> parameter instead.</p>  </important>  <p>For more information, see <a href="https://docs.aws.amazon.com/transcribe/latest/dg/vocabulary-filtering.html">Using vocabulary filtering with unwanted words</a>.</p>
    /// - On success, responds with [`StartStreamTranscriptionOutput`](crate::output::StartStreamTranscriptionOutput) with field(s):
    ///   - [`request_id(Option<String>)`](crate::output::StartStreamTranscriptionOutput::request_id): <p>Provides the identifier for your streaming request.</p>
    ///   - [`language_code(Option<LanguageCode>)`](crate::output::StartStreamTranscriptionOutput::language_code): <p>Provides the language code that you specified in your request.</p>
    ///   - [`media_sample_rate_hertz(Option<i32>)`](crate::output::StartStreamTranscriptionOutput::media_sample_rate_hertz): <p>Provides the sample rate that you specified in your request.</p>
    ///   - [`media_encoding(Option<MediaEncoding>)`](crate::output::StartStreamTranscriptionOutput::media_encoding): <p>Provides the media encoding you specified in your request.</p>
    ///   - [`vocabulary_name(Option<String>)`](crate::output::StartStreamTranscriptionOutput::vocabulary_name): <p>Provides the name of the custom vocabulary that you specified in your request.</p>
    ///   - [`session_id(Option<String>)`](crate::output::StartStreamTranscriptionOutput::session_id): <p>Provides the identifier for your transcription session.</p>
    ///   - [`transcript_result_stream(Receiver<crate::model::TranscriptResultStream, crate::error::TranscriptResultStreamError>)`](crate::output::StartStreamTranscriptionOutput::transcript_result_stream): <p>Provides detailed information about your streaming session.</p>
    ///   - [`vocabulary_filter_name(Option<String>)`](crate::output::StartStreamTranscriptionOutput::vocabulary_filter_name): <p>Provides the name of the custom vocabulary filter that you specified in your request.</p>
    ///   - [`vocabulary_filter_method(Option<VocabularyFilterMethod>)`](crate::output::StartStreamTranscriptionOutput::vocabulary_filter_method): <p>Provides the vocabulary filtering method used in your transcription.</p>
    ///   - [`show_speaker_label(bool)`](crate::output::StartStreamTranscriptionOutput::show_speaker_label): <p>Shows whether speaker partitioning was enabled for your transcription.</p>
    ///   - [`enable_channel_identification(bool)`](crate::output::StartStreamTranscriptionOutput::enable_channel_identification): <p>Shows whether channel identification was enabled for your transcription.</p>
    ///   - [`number_of_channels(Option<i32>)`](crate::output::StartStreamTranscriptionOutput::number_of_channels): <p>Provides the number of channels that you specified in your request.</p>
    ///   - [`enable_partial_results_stabilization(bool)`](crate::output::StartStreamTranscriptionOutput::enable_partial_results_stabilization): <p>Shows whether partial results stabilization was enabled for your transcription.</p>
    ///   - [`partial_results_stability(Option<PartialResultsStability>)`](crate::output::StartStreamTranscriptionOutput::partial_results_stability): <p>Provides the stabilization level used for your transcription.</p>
    ///   - [`content_identification_type(Option<ContentIdentificationType>)`](crate::output::StartStreamTranscriptionOutput::content_identification_type): <p>Shows whether content identification was enabled for your transcription.</p>
    ///   - [`content_redaction_type(Option<ContentRedactionType>)`](crate::output::StartStreamTranscriptionOutput::content_redaction_type): <p>Shows whether content redaction was enabled for your transcription.</p>
    ///   - [`pii_entity_types(Option<String>)`](crate::output::StartStreamTranscriptionOutput::pii_entity_types): <p>Lists the PII entity types you specified in your request.</p>
    ///   - [`language_model_name(Option<String>)`](crate::output::StartStreamTranscriptionOutput::language_model_name): <p>Provides the name of the custom language model that you specified in your request.</p>
    ///   - [`identify_language(bool)`](crate::output::StartStreamTranscriptionOutput::identify_language): <p>Shows whether automatic language identification was enabled for your transcription.</p>
    ///   - [`language_options(Option<String>)`](crate::output::StartStreamTranscriptionOutput::language_options): <p>Provides the language codes that you specified in your request.</p>
    ///   - [`preferred_language(Option<LanguageCode>)`](crate::output::StartStreamTranscriptionOutput::preferred_language): <p>Provides the preferred language that you specified in your request.</p>
    ///   - [`vocabulary_names(Option<String>)`](crate::output::StartStreamTranscriptionOutput::vocabulary_names): <p>Provides the names of the custom vocabularies that you specified in your request.</p>
    ///   - [`vocabulary_filter_names(Option<String>)`](crate::output::StartStreamTranscriptionOutput::vocabulary_filter_names): <p>Provides the names of the custom vocabulary filters that you specified in your request.</p>
    /// - On failure, responds with [`SdkError<StartStreamTranscriptionError>`](crate::error::StartStreamTranscriptionError)
    pub fn start_stream_transcription(
        &self,
    ) -> crate::client::fluent_builders::StartStreamTranscription {
        crate::client::fluent_builders::StartStreamTranscription::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
