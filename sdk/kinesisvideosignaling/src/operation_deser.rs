// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_ice_server_config_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetIceServerConfigOutput,
    crate::error::GetIceServerConfigError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetIceServerConfigError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetIceServerConfigError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => {
            crate::error::GetIceServerConfigError {
                meta: generic,
                kind: crate::error::GetIceServerConfigErrorKind::ClientLimitExceededException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::client_limit_exceeded_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetIceServerConfigError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "InvalidArgumentException" => crate::error::GetIceServerConfigError {
            meta: generic,
            kind: crate::error::GetIceServerConfigErrorKind::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetIceServerConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "InvalidClientException" => crate::error::GetIceServerConfigError {
            meta: generic,
            kind: crate::error::GetIceServerConfigErrorKind::InvalidClientException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_client_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_client_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetIceServerConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NotAuthorizedException" => crate::error::GetIceServerConfigError {
            meta: generic,
            kind: crate::error::GetIceServerConfigErrorKind::NotAuthorizedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetIceServerConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => {
            crate::error::GetIceServerConfigError {
                meta: generic,
                kind: crate::error::GetIceServerConfigErrorKind::ResourceNotFoundException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetIceServerConfigError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "SessionExpiredException" => crate::error::GetIceServerConfigError {
            meta: generic,
            kind: crate::error::GetIceServerConfigErrorKind::SessionExpiredException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::session_expired_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_session_expired_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::GetIceServerConfigError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetIceServerConfigError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_ice_server_config_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetIceServerConfigOutput,
    crate::error::GetIceServerConfigError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_ice_server_config_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_get_ice_server_config(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetIceServerConfigError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_alexa_offer_to_master_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendAlexaOfferToMasterOutput,
    crate::error::SendAlexaOfferToMasterError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::SendAlexaOfferToMasterError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ClientLimitExceededException" => {
            crate::error::SendAlexaOfferToMasterError {
                meta: generic,
                kind: crate::error::SendAlexaOfferToMasterErrorKind::ClientLimitExceededException(
                    {
                        #[allow(unused_mut)]
                        let mut tmp = {
                            #[allow(unused_mut)]
                            let mut output =
                                crate::error::client_limit_exceeded_exception::Builder::default();
                            let _ = response;
                            output = crate::json_deser::deser_structure_client_limit_exceeded_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
                            output.build()
                        };
                        if (&tmp.message).is_none() {
                            tmp.message = _error_message;
                        }
                        tmp
                    },
                ),
            }
        }
        "InvalidArgumentException" => crate::error::SendAlexaOfferToMasterError {
            meta: generic,
            kind: crate::error::SendAlexaOfferToMasterErrorKind::InvalidArgumentException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_argument_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_invalid_argument_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "NotAuthorizedException" => crate::error::SendAlexaOfferToMasterError {
            meta: generic,
            kind: crate::error::SendAlexaOfferToMasterErrorKind::NotAuthorizedException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::not_authorized_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_not_authorized_exceptionjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "ResourceNotFoundException" => {
            crate::error::SendAlexaOfferToMasterError {
                meta: generic,
                kind: crate::error::SendAlexaOfferToMasterErrorKind::ResourceNotFoundException({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_not_found_exception::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        _ => crate::error::SendAlexaOfferToMasterError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_alexa_offer_to_master_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::SendAlexaOfferToMasterOutput,
    crate::error::SendAlexaOfferToMasterError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::send_alexa_offer_to_master_output::Builder::default();
        let _ = response;
        output = crate::json_deser::deser_operation_send_alexa_offer_to_master(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::SendAlexaOfferToMasterError::unhandled)?;
        output.build()
    })
}
