// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::send_alexa_offer_to_master::_send_alexa_offer_to_master_output::SendAlexaOfferToMasterOutputBuilder;

pub use crate::operation::send_alexa_offer_to_master::_send_alexa_offer_to_master_input::SendAlexaOfferToMasterInputBuilder;

/// Fluent builder constructing a request to `SendAlexaOfferToMaster`.
///
/// <p>This API allows you to connect WebRTC-enabled devices with Alexa display devices. When invoked, it sends the Alexa Session Description Protocol (SDP) offer to the master peer. The offer is delivered as soon as the master is connected to the specified signaling channel. This API returns the SDP answer from the connected master. If the master is not connected to the signaling channel, redelivery requests are made until the message expires.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendAlexaOfferToMasterFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::send_alexa_offer_to_master::builders::SendAlexaOfferToMasterInputBuilder,
}
impl SendAlexaOfferToMasterFluentBuilder {
    /// Creates a new `SendAlexaOfferToMaster`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMaster,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_arn(input.into());
        self
    }
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_arn(input);
        self
    }
    /// <p>The unique identifier for the sender client.</p>
    pub fn sender_client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sender_client_id(input.into());
        self
    }
    /// <p>The unique identifier for the sender client.</p>
    pub fn set_sender_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sender_client_id(input);
        self
    }
    /// <p>The base64-encoded SDP offer content.</p>
    pub fn message_payload(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.message_payload(input.into());
        self
    }
    /// <p>The base64-encoded SDP offer content.</p>
    pub fn set_message_payload(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_message_payload(input);
        self
    }
}
