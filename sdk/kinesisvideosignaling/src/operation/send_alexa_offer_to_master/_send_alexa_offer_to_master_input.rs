// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SendAlexaOfferToMasterInput {
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub channel_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier for the sender client.</p>
    pub sender_client_id: ::std::option::Option<::std::string::String>,
    /// <p>The base64-encoded SDP offer content.</p>
    pub message_payload: ::std::option::Option<::std::string::String>,
}
impl SendAlexaOfferToMasterInput {
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub fn channel_arn(&self) -> ::std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The unique identifier for the sender client.</p>
    pub fn sender_client_id(&self) -> ::std::option::Option<&str> {
        self.sender_client_id.as_deref()
    }
    /// <p>The base64-encoded SDP offer content.</p>
    pub fn message_payload(&self) -> ::std::option::Option<&str> {
        self.message_payload.as_deref()
    }
}
impl SendAlexaOfferToMasterInput {
    /// Creates a new builder-style object to manufacture [`SendAlexaOfferToMasterInput`](crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterInput).
    pub fn builder() -> crate::operation::send_alexa_offer_to_master::builders::SendAlexaOfferToMasterInputBuilder {
        crate::operation::send_alexa_offer_to_master::builders::SendAlexaOfferToMasterInputBuilder::default()
    }
}

/// A builder for [`SendAlexaOfferToMasterInput`](crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SendAlexaOfferToMasterInputBuilder {
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sender_client_id: ::std::option::Option<::std::string::String>,
    pub(crate) message_payload: ::std::option::Option<::std::string::String>,
}
impl SendAlexaOfferToMasterInputBuilder {
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    /// This field is required.
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The ARN of the signaling channel by which Alexa and the master peer communicate.</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// <p>The unique identifier for the sender client.</p>
    /// This field is required.
    pub fn sender_client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sender_client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the sender client.</p>
    pub fn set_sender_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sender_client_id = input;
        self
    }
    /// <p>The unique identifier for the sender client.</p>
    pub fn get_sender_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sender_client_id
    }
    /// <p>The base64-encoded SDP offer content.</p>
    /// This field is required.
    pub fn message_payload(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message_payload = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base64-encoded SDP offer content.</p>
    pub fn set_message_payload(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message_payload = input;
        self
    }
    /// <p>The base64-encoded SDP offer content.</p>
    pub fn get_message_payload(&self) -> &::std::option::Option<::std::string::String> {
        &self.message_payload
    }
    /// Consumes the builder and constructs a [`SendAlexaOfferToMasterInput`](crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::send_alexa_offer_to_master::SendAlexaOfferToMasterInput {
            channel_arn: self.channel_arn,
            sender_client_id: self.sender_client_id,
            message_payload: self.message_payload,
        })
    }
}
