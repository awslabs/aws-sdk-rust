// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Identity {
    /// <p>The source IP address of the TCP connection making the request to API Gateway.</p>
    #[doc(hidden)]
    pub source_ip: std::option::Option<std::string::String>,
    /// <p>The User Agent of the API caller.</p>
    #[doc(hidden)]
    pub user_agent: std::option::Option<std::string::String>,
}
impl Identity {
    /// <p>The source IP address of the TCP connection making the request to API Gateway.</p>
    pub fn source_ip(&self) -> std::option::Option<&str> {
        self.source_ip.as_deref()
    }
    /// <p>The User Agent of the API caller.</p>
    pub fn user_agent(&self) -> std::option::Option<&str> {
        self.user_agent.as_deref()
    }
}
impl Identity {
    /// Creates a new builder-style object to manufacture [`Identity`](crate::types::Identity).
    pub fn builder() -> crate::types::builders::IdentityBuilder {
        crate::types::builders::IdentityBuilder::default()
    }
}

/// A builder for [`Identity`](crate::types::Identity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IdentityBuilder {
    pub(crate) source_ip: std::option::Option<std::string::String>,
    pub(crate) user_agent: std::option::Option<std::string::String>,
}
impl IdentityBuilder {
    /// <p>The source IP address of the TCP connection making the request to API Gateway.</p>
    pub fn source_ip(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_ip = Some(input.into());
        self
    }
    /// <p>The source IP address of the TCP connection making the request to API Gateway.</p>
    pub fn set_source_ip(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_ip = input;
        self
    }
    /// <p>The User Agent of the API caller.</p>
    pub fn user_agent(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_agent = Some(input.into());
        self
    }
    /// <p>The User Agent of the API caller.</p>
    pub fn set_user_agent(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_agent = input;
        self
    }
    /// Consumes the builder and constructs a [`Identity`](crate::types::Identity).
    pub fn build(self) -> crate::types::Identity {
        crate::types::Identity {
            source_ip: self.source_ip,
            user_agent: self.user_agent,
        }
    }
}
