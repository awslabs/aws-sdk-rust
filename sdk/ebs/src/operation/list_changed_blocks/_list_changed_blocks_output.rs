// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListChangedBlocksOutput {
    /// <p>An array of objects containing information about the changed blocks.</p>
    #[doc(hidden)]
    pub changed_blocks: std::option::Option<std::vec::Vec<crate::types::ChangedBlock>>,
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    #[doc(hidden)]
    pub expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The size of the volume in GB.</p>
    #[doc(hidden)]
    pub volume_size: std::option::Option<i64>,
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    #[doc(hidden)]
    pub block_size: std::option::Option<i32>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListChangedBlocksOutput {
    /// <p>An array of objects containing information about the changed blocks.</p>
    pub fn changed_blocks(&self) -> std::option::Option<&[crate::types::ChangedBlock]> {
        self.changed_blocks.as_deref()
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn expiry_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The size of the volume in GB.</p>
    pub fn volume_size(&self) -> std::option::Option<i64> {
        self.volume_size
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn block_size(&self) -> std::option::Option<i32> {
        self.block_size
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListChangedBlocksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListChangedBlocksOutput {
    /// Creates a new builder-style object to manufacture [`ListChangedBlocksOutput`](crate::operation::list_changed_blocks::ListChangedBlocksOutput).
    pub fn builder(
    ) -> crate::operation::list_changed_blocks::builders::ListChangedBlocksOutputBuilder {
        crate::operation::list_changed_blocks::builders::ListChangedBlocksOutputBuilder::default()
    }
}

/// A builder for [`ListChangedBlocksOutput`](crate::operation::list_changed_blocks::ListChangedBlocksOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListChangedBlocksOutputBuilder {
    pub(crate) changed_blocks: std::option::Option<std::vec::Vec<crate::types::ChangedBlock>>,
    pub(crate) expiry_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) volume_size: std::option::Option<i64>,
    pub(crate) block_size: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListChangedBlocksOutputBuilder {
    /// Appends an item to `changed_blocks`.
    ///
    /// To override the contents of this collection use [`set_changed_blocks`](Self::set_changed_blocks).
    ///
    /// <p>An array of objects containing information about the changed blocks.</p>
    pub fn changed_blocks(mut self, input: crate::types::ChangedBlock) -> Self {
        let mut v = self.changed_blocks.unwrap_or_default();
        v.push(input);
        self.changed_blocks = Some(v);
        self
    }
    /// <p>An array of objects containing information about the changed blocks.</p>
    pub fn set_changed_blocks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChangedBlock>>,
    ) -> Self {
        self.changed_blocks = input;
        self
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn expiry_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.expiry_time = Some(input);
        self
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn set_expiry_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.expiry_time = input;
        self
    }
    /// <p>The size of the volume in GB.</p>
    pub fn volume_size(mut self, input: i64) -> Self {
        self.volume_size = Some(input);
        self
    }
    /// <p>The size of the volume in GB.</p>
    pub fn set_volume_size(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn block_size(mut self, input: i32) -> Self {
        self.block_size = Some(input);
        self
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn set_block_size(mut self, input: std::option::Option<i32>) -> Self {
        self.block_size = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListChangedBlocksOutput`](crate::operation::list_changed_blocks::ListChangedBlocksOutput).
    pub fn build(self) -> crate::operation::list_changed_blocks::ListChangedBlocksOutput {
        crate::operation::list_changed_blocks::ListChangedBlocksOutput {
            changed_blocks: self.changed_blocks,
            expiry_time: self.expiry_time,
            volume_size: self.volume_size,
            block_size: self.block_size,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
