// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListSnapshotBlocksOutput {
    /// <p>An array of objects containing information about the blocks.</p>
    pub blocks: ::std::option::Option<::std::vec::Vec<crate::types::Block>>,
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The size of the volume in GB.</p>
    pub volume_size: ::std::option::Option<i64>,
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub block_size: ::std::option::Option<i32>,
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSnapshotBlocksOutput {
    /// <p>An array of objects containing information about the blocks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.blocks.is_none()`.
    pub fn blocks(&self) -> &[crate::types::Block] {
        self.blocks.as_deref().unwrap_or_default()
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn expiry_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expiry_time.as_ref()
    }
    /// <p>The size of the volume in GB.</p>
    pub fn volume_size(&self) -> ::std::option::Option<i64> {
        self.volume_size
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn block_size(&self) -> ::std::option::Option<i32> {
        self.block_size
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::std::fmt::Debug for ListSnapshotBlocksOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSnapshotBlocksOutput");
        formatter.field("blocks", &"*** Sensitive Data Redacted ***");
        formatter.field("expiry_time", &self.expiry_time);
        formatter.field("volume_size", &self.volume_size);
        formatter.field("block_size", &self.block_size);
        formatter.field("next_token", &self.next_token);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for ListSnapshotBlocksOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListSnapshotBlocksOutput {
    /// Creates a new builder-style object to manufacture [`ListSnapshotBlocksOutput`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput).
    pub fn builder() -> crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksOutputBuilder {
        crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksOutputBuilder::default()
    }
}

/// A builder for [`ListSnapshotBlocksOutput`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ListSnapshotBlocksOutputBuilder {
    pub(crate) blocks: ::std::option::Option<::std::vec::Vec<crate::types::Block>>,
    pub(crate) expiry_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) volume_size: ::std::option::Option<i64>,
    pub(crate) block_size: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListSnapshotBlocksOutputBuilder {
    /// Appends an item to `blocks`.
    ///
    /// To override the contents of this collection use [`set_blocks`](Self::set_blocks).
    ///
    /// <p>An array of objects containing information about the blocks.</p>
    pub fn blocks(mut self, input: crate::types::Block) -> Self {
        let mut v = self.blocks.unwrap_or_default();
        v.push(input);
        self.blocks = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects containing information about the blocks.</p>
    pub fn set_blocks(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Block>>) -> Self {
        self.blocks = input;
        self
    }
    /// <p>An array of objects containing information about the blocks.</p>
    pub fn get_blocks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Block>> {
        &self.blocks
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn expiry_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expiry_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn set_expiry_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expiry_time = input;
        self
    }
    /// <p>The time when the <code>BlockToken</code> expires.</p>
    pub fn get_expiry_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expiry_time
    }
    /// <p>The size of the volume in GB.</p>
    pub fn volume_size(mut self, input: i64) -> Self {
        self.volume_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the volume in GB.</p>
    pub fn set_volume_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.volume_size = input;
        self
    }
    /// <p>The size of the volume in GB.</p>
    pub fn get_volume_size(&self) -> &::std::option::Option<i64> {
        &self.volume_size
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn block_size(mut self, input: i32) -> Self {
        self.block_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn set_block_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.block_size = input;
        self
    }
    /// <p>The size of the blocks in the snapshot, in bytes.</p>
    pub fn get_block_size(&self) -> &::std::option::Option<i32> {
        &self.block_size
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListSnapshotBlocksOutput`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput).
    pub fn build(self) -> crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput {
        crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput {
            blocks: self.blocks,
            expiry_time: self.expiry_time,
            volume_size: self.volume_size,
            block_size: self.block_size,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for ListSnapshotBlocksOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListSnapshotBlocksOutputBuilder");
        formatter.field("blocks", &"*** Sensitive Data Redacted ***");
        formatter.field("expiry_time", &self.expiry_time);
        formatter.field("volume_size", &self.volume_size);
        formatter.field("block_size", &self.block_size);
        formatter.field("next_token", &self.next_token);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
