// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListSnapshotBlocks`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`snapshot_id(impl Into<String>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::snapshot_id) / [`set_snapshot_id(Option<String>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::set_snapshot_id):<br>required: **true**<br><p>The ID of the snapshot from which to get block indexes and block tokens.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::set_next_token):<br>required: **false**<br><p>The token to request the next page of results.</p>  <p>If you specify <b>NextToken</b>, then <b>StartingBlockIndex</b> is ignored.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of blocks to be returned by the request.</p>  <p>Even if additional blocks can be retrieved from the snapshot, the request can return less blocks than <b>MaxResults</b> or an empty array of blocks.</p>  <p>To retrieve the next set of blocks from the snapshot, make another request with the returned <b>NextToken</b> value. The value of <b>NextToken</b> is <code>null</code> when there are no more blocks to return.</p><br>
    ///   - [`starting_block_index(i32)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::starting_block_index) / [`set_starting_block_index(Option<i32>)`](crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::set_starting_block_index):<br>required: **false**<br><p>The block index from which the list should start. The list in the response will start from this block index or the next valid block index in the snapshot.</p>  <p>If you specify <b>NextToken</b>, then <b>StartingBlockIndex</b> is ignored.</p><br>
    /// - On success, responds with [`ListSnapshotBlocksOutput`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput) with field(s):
    ///   - [`blocks(Option<Vec::<Block>>)`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput::blocks): <p>An array of objects containing information about the blocks.</p>
    ///   - [`expiry_time(Option<DateTime>)`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput::expiry_time): <p>The time when the <code>BlockToken</code> expires.</p>
    ///   - [`volume_size(Option<i64>)`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput::volume_size): <p>The size of the volume in GB.</p>
    ///   - [`block_size(Option<i32>)`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput::block_size): <p>The size of the blocks in the snapshot, in bytes.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksOutput::next_token): <p>The token to use to retrieve the next page of results. This value is null when there are no more results to return.</p>
    /// - On failure, responds with [`SdkError<ListSnapshotBlocksError>`](crate::operation::list_snapshot_blocks::ListSnapshotBlocksError)
    pub fn list_snapshot_blocks(&self) -> crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder {
        crate::operation::list_snapshot_blocks::builders::ListSnapshotBlocksFluentBuilder::new(self.handle.clone())
    }
}
