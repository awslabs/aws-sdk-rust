// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A block of data in an Amazon Elastic Block Store snapshot that is different from another snapshot of the same volume/snapshot lineage.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChangedBlock {
    /// <p>The block index.</p>
    #[doc(hidden)]
    pub block_index: std::option::Option<i32>,
    /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot does not have the changed block that is on the second snapshot.</p>
    #[doc(hidden)]
    pub first_block_token: std::option::Option<std::string::String>,
    /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation.</p>
    #[doc(hidden)]
    pub second_block_token: std::option::Option<std::string::String>,
}
impl ChangedBlock {
    /// <p>The block index.</p>
    pub fn block_index(&self) -> std::option::Option<i32> {
        self.block_index
    }
    /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot does not have the changed block that is on the second snapshot.</p>
    pub fn first_block_token(&self) -> std::option::Option<&str> {
        self.first_block_token.as_deref()
    }
    /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation.</p>
    pub fn second_block_token(&self) -> std::option::Option<&str> {
        self.second_block_token.as_deref()
    }
}
impl std::fmt::Debug for ChangedBlock {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChangedBlock");
        formatter.field("block_index", &"*** Sensitive Data Redacted ***");
        formatter.field("first_block_token", &"*** Sensitive Data Redacted ***");
        formatter.field("second_block_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ChangedBlock {
    /// Creates a new builder-style object to manufacture [`ChangedBlock`](crate::types::ChangedBlock).
    pub fn builder() -> crate::types::builders::ChangedBlockBuilder {
        crate::types::builders::ChangedBlockBuilder::default()
    }
}

/// A builder for [`ChangedBlock`](crate::types::ChangedBlock).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ChangedBlockBuilder {
    pub(crate) block_index: std::option::Option<i32>,
    pub(crate) first_block_token: std::option::Option<std::string::String>,
    pub(crate) second_block_token: std::option::Option<std::string::String>,
}
impl ChangedBlockBuilder {
    /// <p>The block index.</p>
    pub fn block_index(mut self, input: i32) -> Self {
        self.block_index = Some(input);
        self
    }
    /// <p>The block index.</p>
    pub fn set_block_index(mut self, input: std::option::Option<i32>) -> Self {
        self.block_index = input;
        self
    }
    /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot does not have the changed block that is on the second snapshot.</p>
    pub fn first_block_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_block_token = Some(input.into());
        self
    }
    /// <p>The block token for the block index of the <code>FirstSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation. This value is absent if the first snapshot does not have the changed block that is on the second snapshot.</p>
    pub fn set_first_block_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.first_block_token = input;
        self
    }
    /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation.</p>
    pub fn second_block_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.second_block_token = Some(input.into());
        self
    }
    /// <p>The block token for the block index of the <code>SecondSnapshotId</code> specified in the <code>ListChangedBlocks</code> operation.</p>
    pub fn set_second_block_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.second_block_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ChangedBlock`](crate::types::ChangedBlock).
    pub fn build(self) -> crate::types::ChangedBlock {
        crate::types::ChangedBlock {
            block_index: self.block_index,
            first_block_token: self.first_block_token,
            second_block_token: self.second_block_token,
        }
    }
}
impl std::fmt::Debug for ChangedBlockBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChangedBlockBuilder");
        formatter.field("block_index", &"*** Sensitive Data Redacted ***");
        formatter.field("first_block_token", &"*** Sensitive Data Redacted ***");
        formatter.field("second_block_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
