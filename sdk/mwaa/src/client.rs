// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AmazonMWAA
///
/// Client for invoking operations on AmazonMWAA. Each operation on AmazonMWAA is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_mwaa::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_mwaa::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_mwaa::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateCliToken`](crate::client::fluent_builders::CreateCliToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateCliToken::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateCliToken::set_name): <p>The name of the Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    /// - On success, responds with [`CreateCliTokenOutput`](crate::output::CreateCliTokenOutput) with field(s):
    ///   - [`cli_token(Option<String>)`](crate::output::CreateCliTokenOutput::cli_token): <p>An Airflow CLI login token.</p>
    ///   - [`web_server_hostname(Option<String>)`](crate::output::CreateCliTokenOutput::web_server_hostname): <p>The Airflow web server hostname for the environment.</p>
    /// - On failure, responds with [`SdkError<CreateCliTokenError>`](crate::error::CreateCliTokenError)
    pub fn create_cli_token(&self) -> crate::client::fluent_builders::CreateCliToken {
        crate::client::fluent_builders::CreateCliToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateEnvironment`](crate::client::fluent_builders::CreateEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_name): <p>The name of the Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_execution_role_arn): <p>The Amazon Resource Name (ARN) of the execution role for your environment. An execution role is an Amazon Web Services Identity and Access Management (IAM) role that grants MWAA permission to access Amazon Web Services services and resources used by your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.</p>
    ///   - [`source_bucket_arn(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::source_bucket_arn) / [`set_source_bucket_arn(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_source_bucket_arn): <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.</p>
    ///   - [`dag_s3_path(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::dag_s3_path) / [`set_dag_s3_path(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_dag_s3_path): <p>The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.</p>
    ///   - [`network_configuration(NetworkConfiguration)`](crate::client::fluent_builders::CreateEnvironment::network_configuration) / [`set_network_configuration(Option<NetworkConfiguration>)`](crate::client::fluent_builders::CreateEnvironment::set_network_configuration): <p>The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.</p>
    ///   - [`plugins_s3_path(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::plugins_s3_path) / [`set_plugins_s3_path(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_plugins_s3_path): <p>The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the plugins.zip version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.</p>
    ///   - [`plugins_s3_object_version(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::plugins_s3_object_version) / [`set_plugins_s3_object_version(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_plugins_s3_object_version): <p>The version of the plugins.zip file on your Amazon S3 bucket. A version must be specified each time a plugins.zip file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    ///   - [`requirements_s3_path(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::requirements_s3_path) / [`set_requirements_s3_path(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_requirements_s3_path): <p>The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a file version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.</p>
    ///   - [`requirements_s3_object_version(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::requirements_s3_object_version) / [`set_requirements_s3_object_version(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_requirements_s3_object_version): <p>The version of the requirements.txt file on your Amazon S3 bucket. A version must be specified each time a requirements.txt file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    ///   - [`airflow_configuration_options(HashMap<String, String>)`](crate::client::fluent_builders::CreateEnvironment::airflow_configuration_options) / [`set_airflow_configuration_options(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateEnvironment::set_airflow_configuration_options): <p>A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.</p>
    ///   - [`environment_class(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::environment_class) / [`set_environment_class(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_environment_class): <p>The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.</p>
    ///   - [`max_workers(i32)`](crate::client::fluent_builders::CreateEnvironment::max_workers) / [`set_max_workers(Option<i32>)`](crate::client::fluent_builders::CreateEnvironment::set_max_workers): <p>The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.</p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_kms_key): <p>The Amazon Web Services Key Management Service (KMS) key to encrypt the data in your environment. You can use an Amazon Web Services owned CMK, or a Customer managed CMK (advanced). To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/create-environment.html">Create an Amazon MWAA environment</a>.</p>
    ///   - [`airflow_version(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::airflow_version) / [`set_airflow_version(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_airflow_version): <p>The Apache Airflow version for your environment. If no value is specified, it defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>. For more information, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html">Apache Airflow versions on Amazon Managed Workflows for Apache Airflow (MWAA)</a>.</p>
    ///   - [`logging_configuration(LoggingConfigurationInput)`](crate::client::fluent_builders::CreateEnvironment::logging_configuration) / [`set_logging_configuration(Option<LoggingConfigurationInput>)`](crate::client::fluent_builders::CreateEnvironment::set_logging_configuration): <p>Defines the Apache Airflow logs to send to CloudWatch Logs.</p>
    ///   - [`weekly_maintenance_window_start(impl Into<String>)`](crate::client::fluent_builders::CreateEnvironment::weekly_maintenance_window_start) / [`set_weekly_maintenance_window_start(Option<String>)`](crate::client::fluent_builders::CreateEnvironment::set_weekly_maintenance_window_start): <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateEnvironment::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateEnvironment::set_tags): <p>The key-value tag pairs you want to associate to your environment. For example, <code>"Environment": "Staging"</code>. To learn more, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    ///   - [`webserver_access_mode(WebserverAccessMode)`](crate::client::fluent_builders::CreateEnvironment::webserver_access_mode) / [`set_webserver_access_mode(Option<WebserverAccessMode>)`](crate::client::fluent_builders::CreateEnvironment::set_webserver_access_mode): <p>The Apache Airflow <i>Web server</i> access mode. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.</p>
    ///   - [`min_workers(i32)`](crate::client::fluent_builders::CreateEnvironment::min_workers) / [`set_min_workers(Option<i32>)`](crate::client::fluent_builders::CreateEnvironment::set_min_workers): <p>The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.</p>
    ///   - [`schedulers(i32)`](crate::client::fluent_builders::CreateEnvironment::schedulers) / [`set_schedulers(Option<i32>)`](crate::client::fluent_builders::CreateEnvironment::set_schedulers): <p>The number of Apache Airflow schedulers to run in your environment. Valid values:</p>  <ul>   <li> <p>v2 - Accepts between 2 to 5. Defaults to 2.</p> </li>   <li> <p>v1 - Accepts 1.</p> </li>  </ul>
    /// - On success, responds with [`CreateEnvironmentOutput`](crate::output::CreateEnvironmentOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateEnvironmentOutput::arn): <p>The Amazon Resource Name (ARN) returned in the response for the environment.</p>
    /// - On failure, responds with [`SdkError<CreateEnvironmentError>`](crate::error::CreateEnvironmentError)
    pub fn create_environment(&self) -> crate::client::fluent_builders::CreateEnvironment {
        crate::client::fluent_builders::CreateEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateWebLoginToken`](crate::client::fluent_builders::CreateWebLoginToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateWebLoginToken::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateWebLoginToken::set_name): <p>The name of the Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    /// - On success, responds with [`CreateWebLoginTokenOutput`](crate::output::CreateWebLoginTokenOutput) with field(s):
    ///   - [`web_token(Option<String>)`](crate::output::CreateWebLoginTokenOutput::web_token): <p>An Airflow web server login token.</p>
    ///   - [`web_server_hostname(Option<String>)`](crate::output::CreateWebLoginTokenOutput::web_server_hostname): <p>The Airflow web server hostname for the environment.</p>
    /// - On failure, responds with [`SdkError<CreateWebLoginTokenError>`](crate::error::CreateWebLoginTokenError)
    pub fn create_web_login_token(&self) -> crate::client::fluent_builders::CreateWebLoginToken {
        crate::client::fluent_builders::CreateWebLoginToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteEnvironment`](crate::client::fluent_builders::DeleteEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::DeleteEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::DeleteEnvironment::set_name): <p>The name of the Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    /// - On success, responds with [`DeleteEnvironmentOutput`](crate::output::DeleteEnvironmentOutput)

    /// - On failure, responds with [`SdkError<DeleteEnvironmentError>`](crate::error::DeleteEnvironmentError)
    pub fn delete_environment(&self) -> crate::client::fluent_builders::DeleteEnvironment {
        crate::client::fluent_builders::DeleteEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetEnvironment`](crate::client::fluent_builders::GetEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::GetEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::GetEnvironment::set_name): <p>The name of the Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    /// - On success, responds with [`GetEnvironmentOutput`](crate::output::GetEnvironmentOutput) with field(s):
    ///   - [`environment(Option<Environment>)`](crate::output::GetEnvironmentOutput::environment): <p>An object containing all available details about the environment.</p>
    /// - On failure, responds with [`SdkError<GetEnvironmentError>`](crate::error::GetEnvironmentError)
    pub fn get_environment(&self) -> crate::client::fluent_builders::GetEnvironment {
        crate::client::fluent_builders::GetEnvironment::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEnvironments`](crate::client::fluent_builders::ListEnvironments) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEnvironments::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEnvironments::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEnvironments::set_next_token): <p>Retrieves the next page of the results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEnvironments::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListEnvironments::set_max_results): <p>The maximum number of results to retrieve per page. For example, <code>5</code> environments per page.</p>
    /// - On success, responds with [`ListEnvironmentsOutput`](crate::output::ListEnvironmentsOutput) with field(s):
    ///   - [`environments(Option<Vec<String>>)`](crate::output::ListEnvironmentsOutput::environments): <p>Returns a list of Amazon MWAA environments.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListEnvironmentsOutput::next_token): <p>Retrieves the next page of the results.</p>
    /// - On failure, responds with [`SdkError<ListEnvironmentsError>`](crate::error::ListEnvironmentsError)
    pub fn list_environments(&self) -> crate::client::fluent_builders::ListEnvironments {
        crate::client::fluent_builders::ListEnvironments::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, <code>arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment</code>.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The key-value tag pairs associated to your environment. To learn more, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PublishMetrics`](crate::client::fluent_builders::PublishMetrics) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`environment_name(impl Into<String>)`](crate::client::fluent_builders::PublishMetrics::environment_name) / [`set_environment_name(Option<String>)`](crate::client::fluent_builders::PublishMetrics::set_environment_name): <p> <b>Internal only</b>. The name of the environment.</p>
    ///   - [`metric_data(Vec<MetricDatum>)`](crate::client::fluent_builders::PublishMetrics::metric_data) / [`set_metric_data(Option<Vec<MetricDatum>>)`](crate::client::fluent_builders::PublishMetrics::set_metric_data): <p> <b>Internal only</b>. Publishes metrics to Amazon CloudWatch. To learn more about the metrics published to Amazon CloudWatch, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html">Amazon MWAA performance metrics in Amazon CloudWatch</a>.</p>
    /// - On success, responds with [`PublishMetricsOutput`](crate::output::PublishMetricsOutput)

    /// - On failure, responds with [`SdkError<PublishMetricsError>`](crate::error::PublishMetricsError)
    pub fn publish_metrics(&self) -> crate::client::fluent_builders::PublishMetrics {
        crate::client::fluent_builders::PublishMetrics::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, <code>arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment</code>.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value tag pairs you want to associate to your environment. For example, <code>"Environment": "Staging"</code>. To learn more, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a>.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, <code>arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment</code>.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The key-value tag pair you want to remove. For example, <code>"Environment": "Staging"</code>. </p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateEnvironment`](crate::client::fluent_builders::UpdateEnvironment) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_name): <p>The name of your Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_execution_role_arn): <p>The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.</p>
    ///   - [`airflow_version(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::airflow_version) / [`set_airflow_version(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_airflow_version): <p>The Apache Airflow version for your environment. If no value is specified, defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>.</p>
    ///   - [`source_bucket_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::source_bucket_arn) / [`set_source_bucket_arn(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_source_bucket_arn): <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.</p>
    ///   - [`dag_s3_path(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::dag_s3_path) / [`set_dag_s3_path(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_dag_s3_path): <p>The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.</p>
    ///   - [`plugins_s3_path(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::plugins_s3_path) / [`set_plugins_s3_path(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_plugins_s3_path): <p>The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the plugins.zip version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.</p>
    ///   - [`plugins_s3_object_version(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::plugins_s3_object_version) / [`set_plugins_s3_object_version(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_plugins_s3_object_version): <p>The version of the plugins.zip file on your Amazon S3 bucket. A version must be specified each time a plugins.zip file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    ///   - [`requirements_s3_path(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::requirements_s3_path) / [`set_requirements_s3_path(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_requirements_s3_path): <p>The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a file version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.</p>
    ///   - [`requirements_s3_object_version(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::requirements_s3_object_version) / [`set_requirements_s3_object_version(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_requirements_s3_object_version): <p>The version of the requirements.txt file on your Amazon S3 bucket. A version must be specified each time a requirements.txt file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    ///   - [`airflow_configuration_options(HashMap<String, String>)`](crate::client::fluent_builders::UpdateEnvironment::airflow_configuration_options) / [`set_airflow_configuration_options(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdateEnvironment::set_airflow_configuration_options): <p>A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.</p>
    ///   - [`environment_class(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::environment_class) / [`set_environment_class(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_environment_class): <p>The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.</p>
    ///   - [`max_workers(i32)`](crate::client::fluent_builders::UpdateEnvironment::max_workers) / [`set_max_workers(Option<i32>)`](crate::client::fluent_builders::UpdateEnvironment::set_max_workers): <p>The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.</p>
    ///   - [`network_configuration(UpdateNetworkConfigurationInput)`](crate::client::fluent_builders::UpdateEnvironment::network_configuration) / [`set_network_configuration(Option<UpdateNetworkConfigurationInput>)`](crate::client::fluent_builders::UpdateEnvironment::set_network_configuration): <p>The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.</p>
    ///   - [`logging_configuration(LoggingConfigurationInput)`](crate::client::fluent_builders::UpdateEnvironment::logging_configuration) / [`set_logging_configuration(Option<LoggingConfigurationInput>)`](crate::client::fluent_builders::UpdateEnvironment::set_logging_configuration): <p>The Apache Airflow log types to send to CloudWatch Logs.</p>
    ///   - [`weekly_maintenance_window_start(impl Into<String>)`](crate::client::fluent_builders::UpdateEnvironment::weekly_maintenance_window_start) / [`set_weekly_maintenance_window_start(Option<String>)`](crate::client::fluent_builders::UpdateEnvironment::set_weekly_maintenance_window_start): <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.</p>
    ///   - [`webserver_access_mode(WebserverAccessMode)`](crate::client::fluent_builders::UpdateEnvironment::webserver_access_mode) / [`set_webserver_access_mode(Option<WebserverAccessMode>)`](crate::client::fluent_builders::UpdateEnvironment::set_webserver_access_mode): <p>The Apache Airflow <i>Web server</i> access mode. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.</p>
    ///   - [`min_workers(i32)`](crate::client::fluent_builders::UpdateEnvironment::min_workers) / [`set_min_workers(Option<i32>)`](crate::client::fluent_builders::UpdateEnvironment::set_min_workers): <p>The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.</p>
    ///   - [`schedulers(i32)`](crate::client::fluent_builders::UpdateEnvironment::schedulers) / [`set_schedulers(Option<i32>)`](crate::client::fluent_builders::UpdateEnvironment::set_schedulers): <p>The number of Apache Airflow schedulers to run in your Amazon MWAA environment.</p>
    /// - On success, responds with [`UpdateEnvironmentOutput`](crate::output::UpdateEnvironmentOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::UpdateEnvironmentOutput::arn): <p>The Amazon Resource Name (ARN) of the Amazon MWAA environment. For example, <code>arn:aws:airflow:us-east-1:123456789012:environment/MyMWAAEnvironment</code>.</p>
    /// - On failure, responds with [`SdkError<UpdateEnvironmentError>`](crate::error::UpdateEnvironmentError)
    pub fn update_environment(&self) -> crate::client::fluent_builders::UpdateEnvironment {
        crate::client::fluent_builders::UpdateEnvironment::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
