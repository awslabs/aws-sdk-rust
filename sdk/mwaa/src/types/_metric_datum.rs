// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> <b>Internal only</b>. Collects Apache Airflow metrics. To learn more about the metrics published to Amazon CloudWatch, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/cw-metrics.html">Amazon MWAA performance metrics in Amazon CloudWatch</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDatum {
    /// <p> <b>Internal only</b>. The name of the metric.</p>
    pub metric_name: ::std::string::String,
    /// <p> <b>Internal only</b>. The time the metric data was received.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p> <b>Internal only</b>. The dimensions associated with the metric.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    /// <p> <b>Internal only</b>. The value for the metric.</p>
    pub value: ::std::option::Option<f64>,
    /// <p> <b>Internal only</b>. The unit used to store the metric.</p>
    pub unit: ::std::option::Option<crate::types::Unit>,
    /// <p> <b>Internal only</b>. The statistical values for the metric.</p>
    pub statistic_values: ::std::option::Option<crate::types::StatisticSet>,
}
impl MetricDatum {
    /// <p> <b>Internal only</b>. The name of the metric.</p>
    pub fn metric_name(&self) -> &str {
        use std::ops::Deref;
        self.metric_name.deref()
    }
    /// <p> <b>Internal only</b>. The time the metric data was received.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p> <b>Internal only</b>. The dimensions associated with the metric.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[crate::types::Dimension] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p> <b>Internal only</b>. The value for the metric.</p>
    pub fn value(&self) -> ::std::option::Option<f64> {
        self.value
    }
    /// <p> <b>Internal only</b>. The unit used to store the metric.</p>
    pub fn unit(&self) -> ::std::option::Option<&crate::types::Unit> {
        self.unit.as_ref()
    }
    /// <p> <b>Internal only</b>. The statistical values for the metric.</p>
    pub fn statistic_values(&self) -> ::std::option::Option<&crate::types::StatisticSet> {
        self.statistic_values.as_ref()
    }
}
impl MetricDatum {
    /// Creates a new builder-style object to manufacture [`MetricDatum`](crate::types::MetricDatum).
    pub fn builder() -> crate::types::builders::MetricDatumBuilder {
        crate::types::builders::MetricDatumBuilder::default()
    }
}

/// A builder for [`MetricDatum`](crate::types::MetricDatum).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDatumBuilder {
    pub(crate) metric_name: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>,
    pub(crate) value: ::std::option::Option<f64>,
    pub(crate) unit: ::std::option::Option<crate::types::Unit>,
    pub(crate) statistic_values: ::std::option::Option<crate::types::StatisticSet>,
}
impl MetricDatumBuilder {
    /// <p> <b>Internal only</b>. The name of the metric.</p>
    /// This field is required.
    pub fn metric_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> <b>Internal only</b>. The name of the metric.</p>
    pub fn set_metric_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric_name = input;
        self
    }
    /// <p> <b>Internal only</b>. The name of the metric.</p>
    pub fn get_metric_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric_name
    }
    /// <p> <b>Internal only</b>. The time the metric data was received.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> <b>Internal only</b>. The time the metric data was received.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p> <b>Internal only</b>. The time the metric data was received.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p> <b>Internal only</b>. The dimensions associated with the metric.</p>
    pub fn dimensions(mut self, input: crate::types::Dimension) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input);
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p> <b>Internal only</b>. The dimensions associated with the metric.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Dimension>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p> <b>Internal only</b>. The dimensions associated with the metric.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Dimension>> {
        &self.dimensions
    }
    /// <p> <b>Internal only</b>. The value for the metric.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p> <b>Internal only</b>. The value for the metric.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p> <b>Internal only</b>. The value for the metric.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// <p> <b>Internal only</b>. The unit used to store the metric.</p>
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p> <b>Internal only</b>. The unit used to store the metric.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// <p> <b>Internal only</b>. The unit used to store the metric.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::Unit> {
        &self.unit
    }
    /// <p> <b>Internal only</b>. The statistical values for the metric.</p>
    pub fn statistic_values(mut self, input: crate::types::StatisticSet) -> Self {
        self.statistic_values = ::std::option::Option::Some(input);
        self
    }
    /// <p> <b>Internal only</b>. The statistical values for the metric.</p>
    pub fn set_statistic_values(mut self, input: ::std::option::Option<crate::types::StatisticSet>) -> Self {
        self.statistic_values = input;
        self
    }
    /// <p> <b>Internal only</b>. The statistical values for the metric.</p>
    pub fn get_statistic_values(&self) -> &::std::option::Option<crate::types::StatisticSet> {
        &self.statistic_values
    }
    /// Consumes the builder and constructs a [`MetricDatum`](crate::types::MetricDatum).
    /// This method will fail if any of the following fields are not set:
    /// - [`metric_name`](crate::types::builders::MetricDatumBuilder::metric_name)
    /// - [`timestamp`](crate::types::builders::MetricDatumBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricDatum, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricDatum {
            metric_name: self.metric_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metric_name",
                    "metric_name was not specified but it is required when building MetricDatum",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building MetricDatum",
                )
            })?,
            dimensions: self.dimensions,
            value: self.value,
            unit: self.unit,
            statistic_values: self.statistic_values,
        })
    }
}
