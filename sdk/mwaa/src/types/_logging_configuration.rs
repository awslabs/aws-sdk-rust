// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the Apache Airflow log types that are published to CloudWatch Logs.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingConfiguration {
    /// <p>The Airflow DAG processing logs published to CloudWatch Logs and the log level.</p>
    #[doc(hidden)]
    pub dag_processing_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    /// <p>The Airflow scheduler logs published to CloudWatch Logs and the log level.</p>
    #[doc(hidden)]
    pub scheduler_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    /// <p>The Airflow web server logs published to CloudWatch Logs and the log level.</p>
    #[doc(hidden)]
    pub webserver_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    /// <p>The Airflow worker logs published to CloudWatch Logs and the log level.</p>
    #[doc(hidden)]
    pub worker_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    /// <p>The Airflow task logs published to CloudWatch Logs and the log level.</p>
    #[doc(hidden)]
    pub task_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
}
impl LoggingConfiguration {
    /// <p>The Airflow DAG processing logs published to CloudWatch Logs and the log level.</p>
    pub fn dag_processing_logs(
        &self,
    ) -> std::option::Option<&crate::types::ModuleLoggingConfiguration> {
        self.dag_processing_logs.as_ref()
    }
    /// <p>The Airflow scheduler logs published to CloudWatch Logs and the log level.</p>
    pub fn scheduler_logs(&self) -> std::option::Option<&crate::types::ModuleLoggingConfiguration> {
        self.scheduler_logs.as_ref()
    }
    /// <p>The Airflow web server logs published to CloudWatch Logs and the log level.</p>
    pub fn webserver_logs(&self) -> std::option::Option<&crate::types::ModuleLoggingConfiguration> {
        self.webserver_logs.as_ref()
    }
    /// <p>The Airflow worker logs published to CloudWatch Logs and the log level.</p>
    pub fn worker_logs(&self) -> std::option::Option<&crate::types::ModuleLoggingConfiguration> {
        self.worker_logs.as_ref()
    }
    /// <p>The Airflow task logs published to CloudWatch Logs and the log level.</p>
    pub fn task_logs(&self) -> std::option::Option<&crate::types::ModuleLoggingConfiguration> {
        self.task_logs.as_ref()
    }
}
impl LoggingConfiguration {
    /// Creates a new builder-style object to manufacture [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn builder() -> crate::types::builders::LoggingConfigurationBuilder {
        crate::types::builders::LoggingConfigurationBuilder::default()
    }
}

/// A builder for [`LoggingConfiguration`](crate::types::LoggingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingConfigurationBuilder {
    pub(crate) dag_processing_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    pub(crate) scheduler_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    pub(crate) webserver_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    pub(crate) worker_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    pub(crate) task_logs: std::option::Option<crate::types::ModuleLoggingConfiguration>,
}
impl LoggingConfigurationBuilder {
    /// <p>The Airflow DAG processing logs published to CloudWatch Logs and the log level.</p>
    pub fn dag_processing_logs(mut self, input: crate::types::ModuleLoggingConfiguration) -> Self {
        self.dag_processing_logs = Some(input);
        self
    }
    /// <p>The Airflow DAG processing logs published to CloudWatch Logs and the log level.</p>
    pub fn set_dag_processing_logs(
        mut self,
        input: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    ) -> Self {
        self.dag_processing_logs = input;
        self
    }
    /// <p>The Airflow scheduler logs published to CloudWatch Logs and the log level.</p>
    pub fn scheduler_logs(mut self, input: crate::types::ModuleLoggingConfiguration) -> Self {
        self.scheduler_logs = Some(input);
        self
    }
    /// <p>The Airflow scheduler logs published to CloudWatch Logs and the log level.</p>
    pub fn set_scheduler_logs(
        mut self,
        input: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    ) -> Self {
        self.scheduler_logs = input;
        self
    }
    /// <p>The Airflow web server logs published to CloudWatch Logs and the log level.</p>
    pub fn webserver_logs(mut self, input: crate::types::ModuleLoggingConfiguration) -> Self {
        self.webserver_logs = Some(input);
        self
    }
    /// <p>The Airflow web server logs published to CloudWatch Logs and the log level.</p>
    pub fn set_webserver_logs(
        mut self,
        input: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    ) -> Self {
        self.webserver_logs = input;
        self
    }
    /// <p>The Airflow worker logs published to CloudWatch Logs and the log level.</p>
    pub fn worker_logs(mut self, input: crate::types::ModuleLoggingConfiguration) -> Self {
        self.worker_logs = Some(input);
        self
    }
    /// <p>The Airflow worker logs published to CloudWatch Logs and the log level.</p>
    pub fn set_worker_logs(
        mut self,
        input: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    ) -> Self {
        self.worker_logs = input;
        self
    }
    /// <p>The Airflow task logs published to CloudWatch Logs and the log level.</p>
    pub fn task_logs(mut self, input: crate::types::ModuleLoggingConfiguration) -> Self {
        self.task_logs = Some(input);
        self
    }
    /// <p>The Airflow task logs published to CloudWatch Logs and the log level.</p>
    pub fn set_task_logs(
        mut self,
        input: std::option::Option<crate::types::ModuleLoggingConfiguration>,
    ) -> Self {
        self.task_logs = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingConfiguration`](crate::types::LoggingConfiguration).
    pub fn build(self) -> crate::types::LoggingConfiguration {
        crate::types::LoggingConfiguration {
            dag_processing_logs: self.dag_processing_logs,
            scheduler_logs: self.scheduler_logs,
            webserver_logs: self.webserver_logs,
            worker_logs: self.worker_logs,
            task_logs: self.task_logs,
        }
    }
}
