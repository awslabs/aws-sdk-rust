// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_metric_datum(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::MetricDatum,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("MetricName").string(input.metric_name.as_str());
    }
    {
        object
            .key("Timestamp")
            .date_time(&input.timestamp, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_1) = &input.dimensions {
        let mut array_2 = object.key("Dimensions").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_dimension::ser_dimension(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.value {
        object.key("Value").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.unit {
        object.key("Unit").string(var_6.as_str());
    }
    if let Some(var_7) = &input.statistic_values {
        #[allow(unused_mut)]
        let mut object_8 = object.key("StatisticValues").start_object();
        crate::protocol_serde::shape_statistic_set::ser_statistic_set(&mut object_8, var_7)?;
        object_8.finish();
    }
    Ok(())
}
