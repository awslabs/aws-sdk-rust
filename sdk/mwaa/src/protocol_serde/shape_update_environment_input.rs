// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_environment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_environment::UpdateEnvironmentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.airflow_configuration_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("AirflowConfigurationOptions").start_object();
        for (key_3, value_4) in var_1 {
            {
                object_2.key(key_3.as_str()).string(value_4.as_str());
            }
        }
        object_2.finish();
    }
    if let Some(var_5) = &input.airflow_version {
        object.key("AirflowVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.dag_s3_path {
        object.key("DagS3Path").string(var_6.as_str());
    }
    if let Some(var_7) = &input.environment_class {
        object.key("EnvironmentClass").string(var_7.as_str());
    }
    if let Some(var_8) = &input.execution_role_arn {
        object.key("ExecutionRoleArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.logging_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("LoggingConfiguration").start_object();
        crate::protocol_serde::shape_logging_configuration_input::ser_logging_configuration_input(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.max_workers {
        object.key("MaxWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.min_workers {
        object.key("MinWorkers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_update_network_configuration_input::ser_update_network_configuration_input(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.plugins_s3_object_version {
        object.key("PluginsS3ObjectVersion").string(var_15.as_str());
    }
    if let Some(var_16) = &input.plugins_s3_path {
        object.key("PluginsS3Path").string(var_16.as_str());
    }
    if let Some(var_17) = &input.requirements_s3_object_version {
        object
            .key("RequirementsS3ObjectVersion")
            .string(var_17.as_str());
    }
    if let Some(var_18) = &input.requirements_s3_path {
        object.key("RequirementsS3Path").string(var_18.as_str());
    }
    if let Some(var_19) = &input.schedulers {
        object.key("Schedulers").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.source_bucket_arn {
        object.key("SourceBucketArn").string(var_20.as_str());
    }
    if let Some(var_21) = &input.webserver_access_mode {
        object.key("WebserverAccessMode").string(var_21.as_str());
    }
    if let Some(var_22) = &input.weekly_maintenance_window_start {
        object
            .key("WeeklyMaintenanceWindowStart")
            .string(var_22.as_str());
    }
    Ok(())
}
