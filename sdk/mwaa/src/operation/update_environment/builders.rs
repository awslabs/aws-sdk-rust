// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_environment::_update_environment_output::UpdateEnvironmentOutputBuilder;

pub use crate::operation::update_environment::_update_environment_input::UpdateEnvironmentInputBuilder;

/// Fluent builder constructing a request to `UpdateEnvironment`.
///
/// <p>Updates an Amazon Managed Workflows for Apache Airflow (MWAA) environment.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateEnvironmentFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_environment::builders::UpdateEnvironmentInputBuilder,
}
impl UpdateEnvironmentFluentBuilder {
    /// Creates a new `UpdateEnvironment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_environment::UpdateEnvironment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_environment::UpdateEnvironmentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_environment::UpdateEnvironmentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of your Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of your Amazon MWAA environment. For example, <code>MyMWAAEnvironment</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the execution role in IAM that allows MWAA to access Amazon Web Services resources in your environment. For example, <code>arn:aws:iam::123456789:role/my-execution-role</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-create-role.html">Amazon MWAA Execution role</a>.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p>The Apache Airflow version for your environment. If no value is specified, defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>.</p>
    pub fn airflow_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.airflow_version(input.into());
        self
    }
    /// <p>The Apache Airflow version for your environment. If no value is specified, defaults to the latest version. Valid values: <code>1.10.12</code>, <code>2.0.2</code>, <code>2.2.2</code>, and <code>2.4.3</code>.</p>
    pub fn set_airflow_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_airflow_version(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.</p>
    pub fn source_bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_bucket_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket where your DAG code and supporting files are stored. For example, <code>arn:aws:s3:::my-airflow-bucket-unique-name</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/mwaa-s3-bucket.html">Create an Amazon S3 bucket for Amazon MWAA</a>.</p>
    pub fn set_source_bucket_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_source_bucket_arn(input);
        self
    }
    /// <p>The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.</p>
    pub fn dag_s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dag_s3_path(input.into());
        self
    }
    /// <p>The relative path to the DAGs folder on your Amazon S3 bucket. For example, <code>dags</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-folder.html">Adding or updating DAGs</a>.</p>
    pub fn set_dag_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_dag_s3_path(input);
        self
    }
    /// <p>The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the plugins.zip version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.</p>
    pub fn plugins_s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.plugins_s3_path(input.into());
        self
    }
    /// <p>The relative path to the <code>plugins.zip</code> file on your Amazon S3 bucket. For example, <code>plugins.zip</code>. If specified, then the plugins.zip version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-dag-import-plugins.html">Installing custom plugins</a>.</p>
    pub fn set_plugins_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_plugins_s3_path(input);
        self
    }
    /// <p>The version of the plugins.zip file on your Amazon S3 bucket. A version must be specified each time a plugins.zip file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    pub fn plugins_s3_object_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.plugins_s3_object_version(input.into());
        self
    }
    /// <p>The version of the plugins.zip file on your Amazon S3 bucket. A version must be specified each time a plugins.zip file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    pub fn set_plugins_s3_object_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_plugins_s3_object_version(input);
        self
    }
    /// <p>The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a file version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.</p>
    pub fn requirements_s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.requirements_s3_path(input.into());
        self
    }
    /// <p>The relative path to the <code>requirements.txt</code> file on your Amazon S3 bucket. For example, <code>requirements.txt</code>. If specified, then a file version is required. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/working-dags-dependencies.html">Installing Python dependencies</a>.</p>
    pub fn set_requirements_s3_path(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_requirements_s3_path(input);
        self
    }
    /// <p>The version of the requirements.txt file on your Amazon S3 bucket. A version must be specified each time a requirements.txt file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    pub fn requirements_s3_object_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.requirements_s3_object_version(input.into());
        self
    }
    /// <p>The version of the requirements.txt file on your Amazon S3 bucket. A version must be specified each time a requirements.txt file is updated. To learn more, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/versioning-workflows.html">How S3 Versioning works</a>.</p>
    pub fn set_requirements_s3_object_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_requirements_s3_object_version(input);
        self
    }
    /// Adds a key-value pair to `AirflowConfigurationOptions`.
    ///
    /// To override the contents of this collection use [`set_airflow_configuration_options`](Self::set_airflow_configuration_options).
    ///
    /// <p>A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.</p>
    pub fn airflow_configuration_options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.airflow_configuration_options(k.into(), v.into());
        self
    }
    /// <p>A list of key-value pairs containing the Apache Airflow configuration options you want to attach to your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-env-variables.html">Apache Airflow configuration options</a>.</p>
    pub fn set_airflow_configuration_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_airflow_configuration_options(input);
        self
    }
    /// <p>The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.</p>
    pub fn environment_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.environment_class(input.into());
        self
    }
    /// <p>The environment class type. Valid values: <code>mw1.small</code>, <code>mw1.medium</code>, <code>mw1.large</code>. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/environment-class.html">Amazon MWAA environment class</a>.</p>
    pub fn set_environment_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_environment_class(input);
        self
    }
    /// <p>The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.</p>
    pub fn max_workers(mut self, input: i32) -> Self {
        self.inner = self.inner.max_workers(input);
        self
    }
    /// <p>The maximum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. For example, <code>20</code>. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the one worker that is included with your environment, or the number you specify in <code>MinWorkers</code>.</p>
    pub fn set_max_workers(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_workers(input);
        self
    }
    /// <p>The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.</p>
    pub fn network_configuration(
        mut self,
        input: crate::types::UpdateNetworkConfigurationInput,
    ) -> Self {
        self.inner = self.inner.network_configuration(input);
        self
    }
    /// <p>The VPC networking components used to secure and enable network traffic between the Amazon Web Services resources for your environment. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/networking-about.html">About networking on Amazon MWAA</a>.</p>
    pub fn set_network_configuration(
        mut self,
        input: std::option::Option<crate::types::UpdateNetworkConfigurationInput>,
    ) -> Self {
        self.inner = self.inner.set_network_configuration(input);
        self
    }
    /// <p>The Apache Airflow log types to send to CloudWatch Logs.</p>
    pub fn logging_configuration(mut self, input: crate::types::LoggingConfigurationInput) -> Self {
        self.inner = self.inner.logging_configuration(input);
        self
    }
    /// <p>The Apache Airflow log types to send to CloudWatch Logs.</p>
    pub fn set_logging_configuration(
        mut self,
        input: std::option::Option<crate::types::LoggingConfigurationInput>,
    ) -> Self {
        self.inner = self.inner.set_logging_configuration(input);
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.</p>
    pub fn weekly_maintenance_window_start(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.weekly_maintenance_window_start(input.into());
        self
    }
    /// <p>The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time to start weekly maintenance updates of your environment in the following format: <code>DAY:HH:MM</code>. For example: <code>TUE:03:30</code>. You can specify a start time in 30 minute increments only.</p>
    pub fn set_weekly_maintenance_window_start(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_weekly_maintenance_window_start(input);
        self
    }
    /// <p>The Apache Airflow <i>Web server</i> access mode. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.</p>
    pub fn webserver_access_mode(mut self, input: crate::types::WebserverAccessMode) -> Self {
        self.inner = self.inner.webserver_access_mode(input);
        self
    }
    /// <p>The Apache Airflow <i>Web server</i> access mode. To learn more, see <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/configuring-networking.html">Apache Airflow access modes</a>.</p>
    pub fn set_webserver_access_mode(
        mut self,
        input: std::option::Option<crate::types::WebserverAccessMode>,
    ) -> Self {
        self.inner = self.inner.set_webserver_access_mode(input);
        self
    }
    /// <p>The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.</p>
    pub fn min_workers(mut self, input: i32) -> Self {
        self.inner = self.inner.min_workers(input);
        self
    }
    /// <p>The minimum number of workers that you want to run in your environment. MWAA scales the number of Apache Airflow workers up to the number you specify in the <code>MaxWorkers</code> field. When there are no more tasks running, and no more in the queue, MWAA disposes of the extra workers leaving the worker count you specify in the <code>MinWorkers</code> field. For example, <code>2</code>.</p>
    pub fn set_min_workers(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_min_workers(input);
        self
    }
    /// <p>The number of Apache Airflow schedulers to run in your Amazon MWAA environment.</p>
    pub fn schedulers(mut self, input: i32) -> Self {
        self.inner = self.inner.schedulers(input);
        self
    }
    /// <p>The number of Apache Airflow schedulers to run in your Amazon MWAA environment.</p>
    pub fn set_schedulers(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_schedulers(input);
        self
    }
}
