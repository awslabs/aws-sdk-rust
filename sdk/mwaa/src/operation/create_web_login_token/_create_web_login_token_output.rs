// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateWebLoginTokenOutput {
    /// <p>An Airflow web server login token.</p>
    #[doc(hidden)]
    pub web_token: std::option::Option<std::string::String>,
    /// <p>The Airflow web server hostname for the environment.</p>
    #[doc(hidden)]
    pub web_server_hostname: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWebLoginTokenOutput {
    /// <p>An Airflow web server login token.</p>
    pub fn web_token(&self) -> std::option::Option<&str> {
        self.web_token.as_deref()
    }
    /// <p>The Airflow web server hostname for the environment.</p>
    pub fn web_server_hostname(&self) -> std::option::Option<&str> {
        self.web_server_hostname.as_deref()
    }
}
impl std::fmt::Debug for CreateWebLoginTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWebLoginTokenOutput");
        formatter.field("web_token", &"*** Sensitive Data Redacted ***");
        formatter.field("web_server_hostname", &self.web_server_hostname);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for CreateWebLoginTokenOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWebLoginTokenOutput {
    /// Creates a new builder-style object to manufacture [`CreateWebLoginTokenOutput`](crate::operation::create_web_login_token::CreateWebLoginTokenOutput).
    pub fn builder(
    ) -> crate::operation::create_web_login_token::builders::CreateWebLoginTokenOutputBuilder {
        crate::operation::create_web_login_token::builders::CreateWebLoginTokenOutputBuilder::default()
    }
}

/// A builder for [`CreateWebLoginTokenOutput`](crate::operation::create_web_login_token::CreateWebLoginTokenOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateWebLoginTokenOutputBuilder {
    pub(crate) web_token: std::option::Option<std::string::String>,
    pub(crate) web_server_hostname: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateWebLoginTokenOutputBuilder {
    /// <p>An Airflow web server login token.</p>
    pub fn web_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.web_token = Some(input.into());
        self
    }
    /// <p>An Airflow web server login token.</p>
    pub fn set_web_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.web_token = input;
        self
    }
    /// <p>The Airflow web server hostname for the environment.</p>
    pub fn web_server_hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.web_server_hostname = Some(input.into());
        self
    }
    /// <p>The Airflow web server hostname for the environment.</p>
    pub fn set_web_server_hostname(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.web_server_hostname = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWebLoginTokenOutput`](crate::operation::create_web_login_token::CreateWebLoginTokenOutput).
    pub fn build(self) -> crate::operation::create_web_login_token::CreateWebLoginTokenOutput {
        crate::operation::create_web_login_token::CreateWebLoginTokenOutput {
            web_token: self.web_token,
            web_server_hostname: self.web_server_hostname,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for CreateWebLoginTokenOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateWebLoginTokenOutputBuilder");
        formatter.field("web_token", &"*** Sensitive Data Redacted ***");
        formatter.field("web_server_hostname", &self.web_server_hostname);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
