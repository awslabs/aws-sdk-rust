// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn data_quality_summary_correct_errors(
    mut builder: crate::types::builders::DataQualitySummaryBuilder,
) -> crate::types::builders::DataQualitySummaryBuilder {
    if builder.insufficient_sensor_data.is_none() {
        builder.insufficient_sensor_data = {
            let builder = crate::types::builders::InsufficientSensorDataBuilder::default();
            Some(crate::serde_util::insufficient_sensor_data_correct_errors(builder).build())
        }
    }
    if builder.missing_sensor_data.is_none() {
        builder.missing_sensor_data = {
            let builder = crate::types::builders::MissingSensorDataBuilder::default();
            crate::serde_util::missing_sensor_data_correct_errors(builder).build().ok()
        }
    }
    if builder.invalid_sensor_data.is_none() {
        builder.invalid_sensor_data = {
            let builder = crate::types::builders::InvalidSensorDataBuilder::default();
            crate::serde_util::invalid_sensor_data_correct_errors(builder).build().ok()
        }
    }
    if builder.unsupported_timestamps.is_none() {
        builder.unsupported_timestamps = {
            let builder = crate::types::builders::UnsupportedTimestampsBuilder::default();
            crate::serde_util::unsupported_timestamps_correct_errors(builder).build().ok()
        }
    }
    if builder.duplicate_timestamps.is_none() {
        builder.duplicate_timestamps = {
            let builder = crate::types::builders::DuplicateTimestampsBuilder::default();
            crate::serde_util::duplicate_timestamps_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn inference_output_configuration_correct_errors(
    mut builder: crate::types::builders::InferenceOutputConfigurationBuilder,
) -> crate::types::builders::InferenceOutputConfigurationBuilder {
    if builder.s3_output_configuration.is_none() {
        builder.s3_output_configuration = {
            let builder = crate::types::builders::InferenceS3OutputConfigurationBuilder::default();
            crate::serde_util::inference_s3_output_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn ingested_files_summary_correct_errors(
    mut builder: crate::types::builders::IngestedFilesSummaryBuilder,
) -> crate::types::builders::IngestedFilesSummaryBuilder {
    if builder.total_number_of_files.is_none() {
        builder.total_number_of_files = Some(Default::default())
    }
    if builder.ingested_number_of_files.is_none() {
        builder.ingested_number_of_files = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_input_configuration_correct_errors(
    mut builder: crate::types::builders::IngestionInputConfigurationBuilder,
) -> crate::types::builders::IngestionInputConfigurationBuilder {
    if builder.s3_input_configuration.is_none() {
        builder.s3_input_configuration = {
            let builder = crate::types::builders::IngestionS3InputConfigurationBuilder::default();
            crate::serde_util::ingestion_s3_input_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn duplicate_timestamps_correct_errors(
    mut builder: crate::types::builders::DuplicateTimestampsBuilder,
) -> crate::types::builders::DuplicateTimestampsBuilder {
    if builder.total_number_of_duplicate_timestamps.is_none() {
        builder.total_number_of_duplicate_timestamps = Some(Default::default())
    }
    builder
}

pub(crate) fn inference_s3_input_configuration_correct_errors(
    mut builder: crate::types::builders::InferenceS3InputConfigurationBuilder,
) -> crate::types::builders::InferenceS3InputConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn inference_s3_output_configuration_correct_errors(
    mut builder: crate::types::builders::InferenceS3OutputConfigurationBuilder,
) -> crate::types::builders::InferenceS3OutputConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn ingestion_s3_input_configuration_correct_errors(
    mut builder: crate::types::builders::IngestionS3InputConfigurationBuilder,
) -> crate::types::builders::IngestionS3InputConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn insufficient_sensor_data_correct_errors(
    mut builder: crate::types::builders::InsufficientSensorDataBuilder,
) -> crate::types::builders::InsufficientSensorDataBuilder {
    if builder.missing_complete_sensor_data.is_none() {
        builder.missing_complete_sensor_data = {
            let builder = crate::types::builders::MissingCompleteSensorDataBuilder::default();
            crate::serde_util::missing_complete_sensor_data_correct_errors(builder).build().ok()
        }
    }
    if builder.sensors_with_short_date_range.is_none() {
        builder.sensors_with_short_date_range = {
            let builder = crate::types::builders::SensorsWithShortDateRangeBuilder::default();
            crate::serde_util::sensors_with_short_date_range_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn invalid_sensor_data_correct_errors(
    mut builder: crate::types::builders::InvalidSensorDataBuilder,
) -> crate::types::builders::InvalidSensorDataBuilder {
    if builder.affected_sensor_count.is_none() {
        builder.affected_sensor_count = Some(Default::default())
    }
    if builder.total_number_of_invalid_values.is_none() {
        builder.total_number_of_invalid_values = Some(Default::default())
    }
    builder
}

pub(crate) fn labels_s3_input_configuration_correct_errors(
    mut builder: crate::types::builders::LabelsS3InputConfigurationBuilder,
) -> crate::types::builders::LabelsS3InputConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    builder
}

pub(crate) fn missing_sensor_data_correct_errors(
    mut builder: crate::types::builders::MissingSensorDataBuilder,
) -> crate::types::builders::MissingSensorDataBuilder {
    if builder.affected_sensor_count.is_none() {
        builder.affected_sensor_count = Some(Default::default())
    }
    if builder.total_number_of_missing_values.is_none() {
        builder.total_number_of_missing_values = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn unsupported_timestamps_correct_errors(
    mut builder: crate::types::builders::UnsupportedTimestampsBuilder,
) -> crate::types::builders::UnsupportedTimestampsBuilder {
    if builder.total_number_of_unsupported_timestamps.is_none() {
        builder.total_number_of_unsupported_timestamps = Some(Default::default())
    }
    builder
}

pub(crate) fn categorical_values_correct_errors(
    mut builder: crate::types::builders::CategoricalValuesBuilder,
) -> crate::types::builders::CategoricalValuesBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatisticalIssueStatus>().ok()
    }
    builder
}

pub(crate) fn count_percent_correct_errors(mut builder: crate::types::builders::CountPercentBuilder) -> crate::types::builders::CountPercentBuilder {
    if builder.count.is_none() {
        builder.count = Some(Default::default())
    }
    if builder.percentage.is_none() {
        builder.percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn large_timestamp_gaps_correct_errors(
    mut builder: crate::types::builders::LargeTimestampGapsBuilder,
) -> crate::types::builders::LargeTimestampGapsBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatisticalIssueStatus>().ok()
    }
    builder
}

pub(crate) fn missing_complete_sensor_data_correct_errors(
    mut builder: crate::types::builders::MissingCompleteSensorDataBuilder,
) -> crate::types::builders::MissingCompleteSensorDataBuilder {
    if builder.affected_sensor_count.is_none() {
        builder.affected_sensor_count = Some(Default::default())
    }
    builder
}

pub(crate) fn monotonic_values_correct_errors(
    mut builder: crate::types::builders::MonotonicValuesBuilder,
) -> crate::types::builders::MonotonicValuesBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatisticalIssueStatus>().ok()
    }
    builder
}

pub(crate) fn multiple_operating_modes_correct_errors(
    mut builder: crate::types::builders::MultipleOperatingModesBuilder,
) -> crate::types::builders::MultipleOperatingModesBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StatisticalIssueStatus>().ok()
    }
    builder
}

pub(crate) fn s3_object_correct_errors(mut builder: crate::types::builders::S3ObjectBuilder) -> crate::types::builders::S3ObjectBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn sensors_with_short_date_range_correct_errors(
    mut builder: crate::types::builders::SensorsWithShortDateRangeBuilder,
) -> crate::types::builders::SensorsWithShortDateRangeBuilder {
    if builder.affected_sensor_count.is_none() {
        builder.affected_sensor_count = Some(Default::default())
    }
    builder
}
