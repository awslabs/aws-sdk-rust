// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_model_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_model::CreateModelInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.model_name {
        object.key("ModelName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.dataset_name {
        object.key("DatasetName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.dataset_schema {
        #[allow(unused_mut)]
        let mut object_4 = object.key("DatasetSchema").start_object();
        crate::protocol_serde::shape_dataset_schema::ser_dataset_schema(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.labels_input_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LabelsInputConfiguration").start_object();
        crate::protocol_serde::shape_labels_input_configuration::ser_labels_input_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.client_token {
        object.key("ClientToken").string(var_7.as_str());
    }
    if let Some(var_8) = &input.training_data_start_time {
        object
            .key("TrainingDataStartTime")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_9) = &input.training_data_end_time {
        object
            .key("TrainingDataEndTime")
            .date_time(var_9, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_10) = &input.evaluation_data_start_time {
        object
            .key("EvaluationDataStartTime")
            .date_time(var_10, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_11) = &input.evaluation_data_end_time {
        object
            .key("EvaluationDataEndTime")
            .date_time(var_11, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_12) = &input.role_arn {
        object.key("RoleArn").string(var_12.as_str());
    }
    if let Some(var_13) = &input.data_pre_processing_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("DataPreProcessingConfiguration").start_object();
        crate::protocol_serde::shape_data_pre_processing_configuration::ser_data_pre_processing_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.server_side_kms_key_id {
        object.key("ServerSideKmsKeyId").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.off_condition {
        object.key("OffCondition").string(var_20.as_str());
    }
    Ok(())
}
