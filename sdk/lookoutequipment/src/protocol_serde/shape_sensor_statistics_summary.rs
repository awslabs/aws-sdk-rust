// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_sensor_statistics_summary<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::SensorStatisticsSummary>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SensorStatisticsSummaryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ComponentName" => {
                                builder = builder.set_component_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SensorName" => {
                                builder = builder.set_sensor_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "DataExists" => {
                                builder = builder.set_data_exists(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "MissingValues" => {
                                builder = builder.set_missing_values(
                                    crate::protocol_serde::shape_count_percent::de_count_percent(
                                        tokens,
                                    )?,
                                );
                            }
                            "InvalidValues" => {
                                builder = builder.set_invalid_values(
                                    crate::protocol_serde::shape_count_percent::de_count_percent(
                                        tokens,
                                    )?,
                                );
                            }
                            "InvalidDateEntries" => {
                                builder = builder.set_invalid_date_entries(
                                    crate::protocol_serde::shape_count_percent::de_count_percent(
                                        tokens,
                                    )?,
                                );
                            }
                            "DuplicateTimestamps" => {
                                builder = builder.set_duplicate_timestamps(
                                    crate::protocol_serde::shape_count_percent::de_count_percent(
                                        tokens,
                                    )?,
                                );
                            }
                            "CategoricalValues" => {
                                builder = builder.set_categorical_values(
                                    crate::protocol_serde::shape_categorical_values::de_categorical_values(tokens)?
                                );
                            }
                            "MultipleOperatingModes" => {
                                builder = builder.set_multiple_operating_modes(
                                    crate::protocol_serde::shape_multiple_operating_modes::de_multiple_operating_modes(tokens)?
                                );
                            }
                            "LargeTimestampGaps" => {
                                builder = builder.set_large_timestamp_gaps(
                                    crate::protocol_serde::shape_large_timestamp_gaps::de_large_timestamp_gaps(tokens)?
                                );
                            }
                            "MonotonicValues" => {
                                builder = builder.set_monotonic_values(
                                    crate::protocol_serde::shape_monotonic_values::de_monotonic_values(tokens)?
                                );
                            }
                            "DataStartTime" => {
                                builder = builder.set_data_start_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "DataEndTime" => {
                                builder = builder.set_data_end_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
