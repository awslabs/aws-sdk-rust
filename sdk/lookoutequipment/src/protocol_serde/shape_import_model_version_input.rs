// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_import_model_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::import_model_version::ImportModelVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.source_model_version_arn {
        object.key("SourceModelVersionArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.model_name {
        object.key("ModelName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.dataset_name {
        object.key("DatasetName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.labels_input_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("LabelsInputConfiguration").start_object();
        crate::protocol_serde::shape_labels_input_configuration::ser_labels_input_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.client_token {
        object.key("ClientToken").string(var_6.as_str());
    }
    if let Some(var_7) = &input.role_arn {
        object.key("RoleArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.server_side_kms_key_id {
        object.key("ServerSideKmsKeyId").string(var_8.as_str());
    }
    if let Some(var_9) = &input.tags {
        let mut array_10 = object.key("Tags").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.inference_data_import_strategy {
        object.key("InferenceDataImportStrategy").string(var_13.as_str());
    }
    Ok(())
}
