// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_inference_scheduler_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_inference_scheduler::UpdateInferenceSchedulerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.inference_scheduler_name {
        object.key("InferenceSchedulerName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_delay_offset_in_minutes {
        object.key("DataDelayOffsetInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.data_upload_frequency {
        object.key("DataUploadFrequency").string(var_3.as_str());
    }
    if let Some(var_4) = &input.data_input_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("DataInputConfiguration").start_object();
        crate::protocol_serde::shape_inference_input_configuration::ser_inference_input_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.data_output_configuration {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DataOutputConfiguration").start_object();
        crate::protocol_serde::shape_inference_output_configuration::ser_inference_output_configuration(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.role_arn {
        object.key("RoleArn").string(var_8.as_str());
    }
    Ok(())
}
