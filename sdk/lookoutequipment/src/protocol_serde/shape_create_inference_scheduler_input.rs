// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_inference_scheduler_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_inference_scheduler::CreateInferenceSchedulerInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.model_name {
        object.key("ModelName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.inference_scheduler_name {
        object.key("InferenceSchedulerName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_delay_offset_in_minutes {
        object.key("DataDelayOffsetInMinutes").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.data_upload_frequency {
        object.key("DataUploadFrequency").string(var_4.as_str());
    }
    if let Some(var_5) = &input.data_input_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("DataInputConfiguration").start_object();
        crate::protocol_serde::shape_inference_input_configuration::ser_inference_input_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.data_output_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("DataOutputConfiguration").start_object();
        crate::protocol_serde::shape_inference_output_configuration::ser_inference_output_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.role_arn {
        object.key("RoleArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.server_side_kms_key_id {
        object.key("ServerSideKmsKeyId").string(var_10.as_str());
    }
    if let Some(var_11) = &input.client_token {
        object.key("ClientToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("Tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
