// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Creates a container for a collection of data being ingested for analysis. The dataset
/// contains the metadata describing where the data is and what the data actually looks like.
/// In other words, it contains the location of the data source, the data schema, and other
/// information. A dataset also contains any tags associated with the ingested data. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDataset {
    _private: (),
}
impl CreateDataset {
    /// Creates a new builder-style object to manufacture [`CreateDatasetInput`](crate::input::CreateDatasetInput)
    pub fn builder() -> crate::input::create_dataset_input::Builder {
        crate::input::create_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDataset {
    type Output =
        std::result::Result<crate::output::CreateDatasetOutput, crate::error::CreateDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_dataset_error(response)
        } else {
            crate::operation_deser::parse_create_dataset_response(response)
        }
    }
}

/// <p> Creates a scheduled inference. Scheduling an inference is setting up a continuous
/// real-time inference plan to analyze new measurement data. When setting up the schedule, you
/// provide an S3 bucket location for the input data, assign it a delimiter between separate
/// entries in the data, set an offset delay if desired, and set the frequency of inferencing.
/// You must also provide an S3 bucket location for the output data. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInferenceScheduler {
    _private: (),
}
impl CreateInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`CreateInferenceSchedulerInput`](crate::input::CreateInferenceSchedulerInput)
    pub fn builder() -> crate::input::create_inference_scheduler_input::Builder {
        crate::input::create_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInferenceScheduler {
    type Output = std::result::Result<
        crate::output::CreateInferenceSchedulerOutput,
        crate::error::CreateInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_create_inference_scheduler_response(response)
        }
    }
}

/// <p>Creates an ML model for data inference. </p>
/// <p>A machine-learning (ML) model is a mathematical model that finds patterns in your data.
/// In Amazon Lookout for Equipment, the model learns the patterns of normal behavior and detects abnormal
/// behavior that could be potential equipment failure (or maintenance events). The models are
/// made by analyzing normal data and abnormalities in machine behavior that have already
/// occurred.</p>
/// <p>Your model is trained using a portion of the data from your dataset and uses that data
/// to learn patterns of normal behavior and abnormal patterns that lead to equipment failure.
/// Another portion of the data is used to evaluate the model's accuracy. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateModel {
    _private: (),
}
impl CreateModel {
    /// Creates a new builder-style object to manufacture [`CreateModelInput`](crate::input::CreateModelInput)
    pub fn builder() -> crate::input::create_model_input::Builder {
        crate::input::create_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateModel {
    type Output =
        std::result::Result<crate::output::CreateModelOutput, crate::error::CreateModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_model_error(response)
        } else {
            crate::operation_deser::parse_create_model_response(response)
        }
    }
}

/// <p> Deletes a dataset and associated artifacts. The operation will check to see if any
/// inference scheduler or data ingestion job is currently using the dataset, and if there
/// isn't, the dataset, its metadata, and any associated data stored in S3 will be deleted.
/// This does not affect any models that used this dataset for training and evaluation, but
/// does prevent it from being used in the future. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDataset {
    _private: (),
}
impl DeleteDataset {
    /// Creates a new builder-style object to manufacture [`DeleteDatasetInput`](crate::input::DeleteDatasetInput)
    pub fn builder() -> crate::input::delete_dataset_input::Builder {
        crate::input::delete_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDataset {
    type Output =
        std::result::Result<crate::output::DeleteDatasetOutput, crate::error::DeleteDatasetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_dataset_error(response)
        } else {
            crate::operation_deser::parse_delete_dataset_response(response)
        }
    }
}

/// <p>Deletes an inference scheduler that has been set up. Already processed output results
/// are not affected. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInferenceScheduler {
    _private: (),
}
impl DeleteInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`DeleteInferenceSchedulerInput`](crate::input::DeleteInferenceSchedulerInput)
    pub fn builder() -> crate::input::delete_inference_scheduler_input::Builder {
        crate::input::delete_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInferenceScheduler {
    type Output = std::result::Result<
        crate::output::DeleteInferenceSchedulerOutput,
        crate::error::DeleteInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_delete_inference_scheduler_response(response)
        }
    }
}

/// <p>Deletes an ML model currently available for Amazon Lookout for Equipment. This will prevent it from
/// being used with an inference scheduler, even one that is already set up. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteModel {
    _private: (),
}
impl DeleteModel {
    /// Creates a new builder-style object to manufacture [`DeleteModelInput`](crate::input::DeleteModelInput)
    pub fn builder() -> crate::input::delete_model_input::Builder {
        crate::input::delete_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteModel {
    type Output =
        std::result::Result<crate::output::DeleteModelOutput, crate::error::DeleteModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_model_error(response)
        } else {
            crate::operation_deser::parse_delete_model_response(response)
        }
    }
}

/// <p>Provides information on a specific data ingestion job such as creation time, dataset
/// ARN, status, and so on. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataIngestionJob {
    _private: (),
}
impl DescribeDataIngestionJob {
    /// Creates a new builder-style object to manufacture [`DescribeDataIngestionJobInput`](crate::input::DescribeDataIngestionJobInput)
    pub fn builder() -> crate::input::describe_data_ingestion_job_input::Builder {
        crate::input::describe_data_ingestion_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDataIngestionJob {
    type Output = std::result::Result<
        crate::output::DescribeDataIngestionJobOutput,
        crate::error::DescribeDataIngestionJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_data_ingestion_job_error(response)
        } else {
            crate::operation_deser::parse_describe_data_ingestion_job_response(response)
        }
    }
}

/// <p>Provides a JSON description of the data that is in each time series dataset, including names, column names, and data types.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDataset {
    _private: (),
}
impl DescribeDataset {
    /// Creates a new builder-style object to manufacture [`DescribeDatasetInput`](crate::input::DescribeDatasetInput)
    pub fn builder() -> crate::input::describe_dataset_input::Builder {
        crate::input::describe_dataset_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDataset {
    type Output = std::result::Result<
        crate::output::DescribeDatasetOutput,
        crate::error::DescribeDatasetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dataset_error(response)
        } else {
            crate::operation_deser::parse_describe_dataset_response(response)
        }
    }
}

/// <p> Specifies information about the inference scheduler being used, including name, model,
/// status, and associated metadata </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInferenceScheduler {
    _private: (),
}
impl DescribeInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`DescribeInferenceSchedulerInput`](crate::input::DescribeInferenceSchedulerInput)
    pub fn builder() -> crate::input::describe_inference_scheduler_input::Builder {
        crate::input::describe_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInferenceScheduler {
    type Output = std::result::Result<
        crate::output::DescribeInferenceSchedulerOutput,
        crate::error::DescribeInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_describe_inference_scheduler_response(response)
        }
    }
}

/// <p>Provides a JSON containing the overall information about a specific ML model, including model name and ARN,
/// dataset, training and evaluation information, status, and so on. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeModel {
    _private: (),
}
impl DescribeModel {
    /// Creates a new builder-style object to manufacture [`DescribeModelInput`](crate::input::DescribeModelInput)
    pub fn builder() -> crate::input::describe_model_input::Builder {
        crate::input::describe_model_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeModel {
    type Output =
        std::result::Result<crate::output::DescribeModelOutput, crate::error::DescribeModelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_model_error(response)
        } else {
            crate::operation_deser::parse_describe_model_response(response)
        }
    }
}

/// <p>Provides a list of all data ingestion jobs, including dataset name and ARN, S3 location
/// of the input data, status, and so on. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDataIngestionJobs {
    _private: (),
}
impl ListDataIngestionJobs {
    /// Creates a new builder-style object to manufacture [`ListDataIngestionJobsInput`](crate::input::ListDataIngestionJobsInput)
    pub fn builder() -> crate::input::list_data_ingestion_jobs_input::Builder {
        crate::input::list_data_ingestion_jobs_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDataIngestionJobs {
    type Output = std::result::Result<
        crate::output::ListDataIngestionJobsOutput,
        crate::error::ListDataIngestionJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_data_ingestion_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_data_ingestion_jobs_response(response)
        }
    }
}

/// <p>Lists all datasets currently available in your account, filtering on the dataset name.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDatasets {
    _private: (),
}
impl ListDatasets {
    /// Creates a new builder-style object to manufacture [`ListDatasetsInput`](crate::input::ListDatasetsInput)
    pub fn builder() -> crate::input::list_datasets_input::Builder {
        crate::input::list_datasets_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDatasets {
    type Output =
        std::result::Result<crate::output::ListDatasetsOutput, crate::error::ListDatasetsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_datasets_error(response)
        } else {
            crate::operation_deser::parse_list_datasets_response(response)
        }
    }
}

/// <p> Lists all inference executions that have been performed by the specified inference
/// scheduler. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInferenceExecutions {
    _private: (),
}
impl ListInferenceExecutions {
    /// Creates a new builder-style object to manufacture [`ListInferenceExecutionsInput`](crate::input::ListInferenceExecutionsInput)
    pub fn builder() -> crate::input::list_inference_executions_input::Builder {
        crate::input::list_inference_executions_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInferenceExecutions {
    type Output = std::result::Result<
        crate::output::ListInferenceExecutionsOutput,
        crate::error::ListInferenceExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_inference_executions_error(response)
        } else {
            crate::operation_deser::parse_list_inference_executions_response(response)
        }
    }
}

/// <p>Retrieves a list of all inference schedulers currently available for your account.
/// </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListInferenceSchedulers {
    _private: (),
}
impl ListInferenceSchedulers {
    /// Creates a new builder-style object to manufacture [`ListInferenceSchedulersInput`](crate::input::ListInferenceSchedulersInput)
    pub fn builder() -> crate::input::list_inference_schedulers_input::Builder {
        crate::input::list_inference_schedulers_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListInferenceSchedulers {
    type Output = std::result::Result<
        crate::output::ListInferenceSchedulersOutput,
        crate::error::ListInferenceSchedulersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_inference_schedulers_error(response)
        } else {
            crate::operation_deser::parse_list_inference_schedulers_response(response)
        }
    }
}

/// <p>Generates a list of all models in the account, including model name and ARN, dataset,
/// and status. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListModels {
    _private: (),
}
impl ListModels {
    /// Creates a new builder-style object to manufacture [`ListModelsInput`](crate::input::ListModelsInput)
    pub fn builder() -> crate::input::list_models_input::Builder {
        crate::input::list_models_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListModels {
    type Output =
        std::result::Result<crate::output::ListModelsOutput, crate::error::ListModelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_models_error(response)
        } else {
            crate::operation_deser::parse_list_models_response(response)
        }
    }
}

/// <p>Lists all the tags for a specified resource, including key and value. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Starts a data ingestion job. Amazon Lookout for Equipment returns the job status. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartDataIngestionJob {
    _private: (),
}
impl StartDataIngestionJob {
    /// Creates a new builder-style object to manufacture [`StartDataIngestionJobInput`](crate::input::StartDataIngestionJobInput)
    pub fn builder() -> crate::input::start_data_ingestion_job_input::Builder {
        crate::input::start_data_ingestion_job_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartDataIngestionJob {
    type Output = std::result::Result<
        crate::output::StartDataIngestionJobOutput,
        crate::error::StartDataIngestionJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_data_ingestion_job_error(response)
        } else {
            crate::operation_deser::parse_start_data_ingestion_job_response(response)
        }
    }
}

/// <p>Starts an inference scheduler. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartInferenceScheduler {
    _private: (),
}
impl StartInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`StartInferenceSchedulerInput`](crate::input::StartInferenceSchedulerInput)
    pub fn builder() -> crate::input::start_inference_scheduler_input::Builder {
        crate::input::start_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartInferenceScheduler {
    type Output = std::result::Result<
        crate::output::StartInferenceSchedulerOutput,
        crate::error::StartInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_start_inference_scheduler_response(response)
        }
    }
}

/// <p>Stops an inference scheduler. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopInferenceScheduler {
    _private: (),
}
impl StopInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`StopInferenceSchedulerInput`](crate::input::StopInferenceSchedulerInput)
    pub fn builder() -> crate::input::stop_inference_scheduler_input::Builder {
        crate::input::stop_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopInferenceScheduler {
    type Output = std::result::Result<
        crate::output::StopInferenceSchedulerOutput,
        crate::error::StopInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_stop_inference_scheduler_response(response)
        }
    }
}

/// <p>Associates a given tag to a resource in your account. A tag is a key-value pair which
/// can be added to an Amazon Lookout for Equipment resource as metadata. Tags can be used for organizing your
/// resources as well as helping you to search and filter by tag. Multiple tags can be added to
/// a resource, either when you create it, or later. Up to 50 tags can be associated with each
/// resource. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes a specific tag from a given resource. The tag is specified by its key. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates an inference scheduler. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateInferenceScheduler {
    _private: (),
}
impl UpdateInferenceScheduler {
    /// Creates a new builder-style object to manufacture [`UpdateInferenceSchedulerInput`](crate::input::UpdateInferenceSchedulerInput)
    pub fn builder() -> crate::input::update_inference_scheduler_input::Builder {
        crate::input::update_inference_scheduler_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateInferenceScheduler {
    type Output = std::result::Result<
        crate::output::UpdateInferenceSchedulerOutput,
        crate::error::UpdateInferenceSchedulerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_inference_scheduler_error(response)
        } else {
            crate::operation_deser::parse_update_inference_scheduler_response(response)
        }
    }
}
