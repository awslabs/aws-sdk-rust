// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Summary of ingestion statistics like whether data exists, number of missing values, number of invalid values and so on related to the particular sensor. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SensorStatisticsSummary {
    /// <p> Name of the component to which the particular sensor belongs for which the statistics belong to. </p>
    #[doc(hidden)]
    pub component_name: std::option::Option<std::string::String>,
    /// <p> Name of the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub sensor_name: std::option::Option<std::string::String>,
    /// <p> Parameter that indicates whether data exists for the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub data_exists: bool,
    /// <p> Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub missing_values: std::option::Option<crate::types::CountPercent>,
    /// <p> Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub invalid_values: std::option::Option<crate::types::CountPercent>,
    /// <p> Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub invalid_date_entries: std::option::Option<crate::types::CountPercent>,
    /// <p> Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub duplicate_timestamps: std::option::Option<crate::types::CountPercent>,
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is categorical. </p>
    #[doc(hidden)]
    pub categorical_values: std::option::Option<crate::types::CategoricalValues>,
    /// <p> Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode. </p>
    #[doc(hidden)]
    pub multiple_operating_modes: std::option::Option<crate::types::MultipleOperatingModes>,
    /// <p> Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps. </p>
    #[doc(hidden)]
    pub large_timestamp_gaps: std::option::Option<crate::types::LargeTimestampGaps>,
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic. </p>
    #[doc(hidden)]
    pub monotonic_values: std::option::Option<crate::types::MonotonicValues>,
    /// <p> Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to. </p>
    #[doc(hidden)]
    pub data_end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SensorStatisticsSummary {
    /// <p> Name of the component to which the particular sensor belongs for which the statistics belong to. </p>
    pub fn component_name(&self) -> std::option::Option<&str> {
        self.component_name.as_deref()
    }
    /// <p> Name of the sensor that the statistics belong to. </p>
    pub fn sensor_name(&self) -> std::option::Option<&str> {
        self.sensor_name.as_deref()
    }
    /// <p> Parameter that indicates whether data exists for the sensor that the statistics belong to. </p>
    pub fn data_exists(&self) -> bool {
        self.data_exists
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to. </p>
    pub fn missing_values(&self) -> std::option::Option<&crate::types::CountPercent> {
        self.missing_values.as_ref()
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to. </p>
    pub fn invalid_values(&self) -> std::option::Option<&crate::types::CountPercent> {
        self.invalid_values.as_ref()
    }
    /// <p> Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to. </p>
    pub fn invalid_date_entries(&self) -> std::option::Option<&crate::types::CountPercent> {
        self.invalid_date_entries.as_ref()
    }
    /// <p> Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to. </p>
    pub fn duplicate_timestamps(&self) -> std::option::Option<&crate::types::CountPercent> {
        self.duplicate_timestamps.as_ref()
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is categorical. </p>
    pub fn categorical_values(&self) -> std::option::Option<&crate::types::CategoricalValues> {
        self.categorical_values.as_ref()
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode. </p>
    pub fn multiple_operating_modes(
        &self,
    ) -> std::option::Option<&crate::types::MultipleOperatingModes> {
        self.multiple_operating_modes.as_ref()
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps. </p>
    pub fn large_timestamp_gaps(&self) -> std::option::Option<&crate::types::LargeTimestampGaps> {
        self.large_timestamp_gaps.as_ref()
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic. </p>
    pub fn monotonic_values(&self) -> std::option::Option<&crate::types::MonotonicValues> {
        self.monotonic_values.as_ref()
    }
    /// <p> Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to. </p>
    pub fn data_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_start_time.as_ref()
    }
    /// <p> Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to. </p>
    pub fn data_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_end_time.as_ref()
    }
}
impl SensorStatisticsSummary {
    /// Creates a new builder-style object to manufacture [`SensorStatisticsSummary`](crate::types::SensorStatisticsSummary).
    pub fn builder() -> crate::types::builders::SensorStatisticsSummaryBuilder {
        crate::types::builders::SensorStatisticsSummaryBuilder::default()
    }
}

/// A builder for [`SensorStatisticsSummary`](crate::types::SensorStatisticsSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SensorStatisticsSummaryBuilder {
    pub(crate) component_name: std::option::Option<std::string::String>,
    pub(crate) sensor_name: std::option::Option<std::string::String>,
    pub(crate) data_exists: std::option::Option<bool>,
    pub(crate) missing_values: std::option::Option<crate::types::CountPercent>,
    pub(crate) invalid_values: std::option::Option<crate::types::CountPercent>,
    pub(crate) invalid_date_entries: std::option::Option<crate::types::CountPercent>,
    pub(crate) duplicate_timestamps: std::option::Option<crate::types::CountPercent>,
    pub(crate) categorical_values: std::option::Option<crate::types::CategoricalValues>,
    pub(crate) multiple_operating_modes: std::option::Option<crate::types::MultipleOperatingModes>,
    pub(crate) large_timestamp_gaps: std::option::Option<crate::types::LargeTimestampGaps>,
    pub(crate) monotonic_values: std::option::Option<crate::types::MonotonicValues>,
    pub(crate) data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data_end_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl SensorStatisticsSummaryBuilder {
    /// <p> Name of the component to which the particular sensor belongs for which the statistics belong to. </p>
    pub fn component_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.component_name = Some(input.into());
        self
    }
    /// <p> Name of the component to which the particular sensor belongs for which the statistics belong to. </p>
    pub fn set_component_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.component_name = input;
        self
    }
    /// <p> Name of the sensor that the statistics belong to. </p>
    pub fn sensor_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.sensor_name = Some(input.into());
        self
    }
    /// <p> Name of the sensor that the statistics belong to. </p>
    pub fn set_sensor_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sensor_name = input;
        self
    }
    /// <p> Parameter that indicates whether data exists for the sensor that the statistics belong to. </p>
    pub fn data_exists(mut self, input: bool) -> Self {
        self.data_exists = Some(input);
        self
    }
    /// <p> Parameter that indicates whether data exists for the sensor that the statistics belong to. </p>
    pub fn set_data_exists(mut self, input: std::option::Option<bool>) -> Self {
        self.data_exists = input;
        self
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to. </p>
    pub fn missing_values(mut self, input: crate::types::CountPercent) -> Self {
        self.missing_values = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are missing for the sensor that the statistics belong to. </p>
    pub fn set_missing_values(
        mut self,
        input: std::option::Option<crate::types::CountPercent>,
    ) -> Self {
        self.missing_values = input;
        self
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to. </p>
    pub fn invalid_values(mut self, input: crate::types::CountPercent) -> Self {
        self.invalid_values = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of, and percentage of, values that are invalid for the sensor that the statistics belong to. </p>
    pub fn set_invalid_values(
        mut self,
        input: std::option::Option<crate::types::CountPercent>,
    ) -> Self {
        self.invalid_values = input;
        self
    }
    /// <p> Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to. </p>
    pub fn invalid_date_entries(mut self, input: crate::types::CountPercent) -> Self {
        self.invalid_date_entries = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of invalid date entries associated with the sensor that the statistics belong to. </p>
    pub fn set_invalid_date_entries(
        mut self,
        input: std::option::Option<crate::types::CountPercent>,
    ) -> Self {
        self.invalid_date_entries = input;
        self
    }
    /// <p> Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to. </p>
    pub fn duplicate_timestamps(mut self, input: crate::types::CountPercent) -> Self {
        self.duplicate_timestamps = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of duplicate timestamp records associated with the sensor that the statistics belong to. </p>
    pub fn set_duplicate_timestamps(
        mut self,
        input: std::option::Option<crate::types::CountPercent>,
    ) -> Self {
        self.duplicate_timestamps = input;
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is categorical. </p>
    pub fn categorical_values(mut self, input: crate::types::CategoricalValues) -> Self {
        self.categorical_values = Some(input);
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is categorical. </p>
    pub fn set_categorical_values(
        mut self,
        input: std::option::Option<crate::types::CategoricalValues>,
    ) -> Self {
        self.categorical_values = input;
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode. </p>
    pub fn multiple_operating_modes(mut self, input: crate::types::MultipleOperatingModes) -> Self {
        self.multiple_operating_modes = Some(input);
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor has more than one operating mode. </p>
    pub fn set_multiple_operating_modes(
        mut self,
        input: std::option::Option<crate::types::MultipleOperatingModes>,
    ) -> Self {
        self.multiple_operating_modes = input;
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps. </p>
    pub fn large_timestamp_gaps(mut self, input: crate::types::LargeTimestampGaps) -> Self {
        self.large_timestamp_gaps = Some(input);
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor contains one or more large gaps between consecutive timestamps. </p>
    pub fn set_large_timestamp_gaps(
        mut self,
        input: std::option::Option<crate::types::LargeTimestampGaps>,
    ) -> Self {
        self.large_timestamp_gaps = input;
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic. </p>
    pub fn monotonic_values(mut self, input: crate::types::MonotonicValues) -> Self {
        self.monotonic_values = Some(input);
        self
    }
    /// <p> Parameter that describes potential risk about whether data associated with the sensor is mostly monotonic. </p>
    pub fn set_monotonic_values(
        mut self,
        input: std::option::Option<crate::types::MonotonicValues>,
    ) -> Self {
        self.monotonic_values = input;
        self
    }
    /// <p> Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to. </p>
    pub fn data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_start_time = Some(input);
        self
    }
    /// <p> Indicates the time reference to indicate the beginning of valid data associated with the sensor that the statistics belong to. </p>
    pub fn set_data_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_start_time = input;
        self
    }
    /// <p> Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to. </p>
    pub fn data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_end_time = Some(input);
        self
    }
    /// <p> Indicates the time reference to indicate the end of valid data associated with the sensor that the statistics belong to. </p>
    pub fn set_data_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_end_time = input;
        self
    }
    /// Consumes the builder and constructs a [`SensorStatisticsSummary`](crate::types::SensorStatisticsSummary).
    pub fn build(self) -> crate::types::SensorStatisticsSummary {
        crate::types::SensorStatisticsSummary {
            component_name: self.component_name,
            sensor_name: self.sensor_name,
            data_exists: self.data_exists.unwrap_or_default(),
            missing_values: self.missing_values,
            invalid_values: self.invalid_values,
            invalid_date_entries: self.invalid_date_entries,
            duplicate_timestamps: self.duplicate_timestamps,
            categorical_values: self.categorical_values,
            multiple_operating_modes: self.multiple_operating_modes,
            large_timestamp_gaps: self.large_timestamp_gaps,
            monotonic_values: self.monotonic_values,
            data_start_time: self.data_start_time,
            data_end_time: self.data_end_time,
        }
    }
}
