// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information on operating modes in data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MultipleOperatingModes {
    /// <p> Indicates whether there is a potential data issue related to having multiple operating modes. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StatisticalIssueStatus>,
}
impl MultipleOperatingModes {
    /// <p> Indicates whether there is a potential data issue related to having multiple operating modes. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::StatisticalIssueStatus> {
        self.status.as_ref()
    }
}
impl MultipleOperatingModes {
    /// Creates a new builder-style object to manufacture [`MultipleOperatingModes`](crate::types::MultipleOperatingModes).
    pub fn builder() -> crate::types::builders::MultipleOperatingModesBuilder {
        crate::types::builders::MultipleOperatingModesBuilder::default()
    }
}

/// A builder for [`MultipleOperatingModes`](crate::types::MultipleOperatingModes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MultipleOperatingModesBuilder {
    pub(crate) status: std::option::Option<crate::types::StatisticalIssueStatus>,
}
impl MultipleOperatingModesBuilder {
    /// <p> Indicates whether there is a potential data issue related to having multiple operating modes. </p>
    pub fn status(mut self, input: crate::types::StatisticalIssueStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> Indicates whether there is a potential data issue related to having multiple operating modes. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::StatisticalIssueStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`MultipleOperatingModes`](crate::types::MultipleOperatingModes).
    pub fn build(self) -> crate::types::MultipleOperatingModes {
        crate::types::MultipleOperatingModes {
            status: self.status,
        }
    }
}
