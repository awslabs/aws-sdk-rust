// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information abount unsupported timestamps in the dataset. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnsupportedTimestamps {
    /// <p> Indicates the total number of unsupported timestamps across the ingested data. </p>
    #[doc(hidden)]
    pub total_number_of_unsupported_timestamps: std::option::Option<i32>,
}
impl UnsupportedTimestamps {
    /// <p> Indicates the total number of unsupported timestamps across the ingested data. </p>
    pub fn total_number_of_unsupported_timestamps(&self) -> std::option::Option<i32> {
        self.total_number_of_unsupported_timestamps
    }
}
impl UnsupportedTimestamps {
    /// Creates a new builder-style object to manufacture [`UnsupportedTimestamps`](crate::types::UnsupportedTimestamps).
    pub fn builder() -> crate::types::builders::UnsupportedTimestampsBuilder {
        crate::types::builders::UnsupportedTimestampsBuilder::default()
    }
}

/// A builder for [`UnsupportedTimestamps`](crate::types::UnsupportedTimestamps).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnsupportedTimestampsBuilder {
    pub(crate) total_number_of_unsupported_timestamps: std::option::Option<i32>,
}
impl UnsupportedTimestampsBuilder {
    /// <p> Indicates the total number of unsupported timestamps across the ingested data. </p>
    pub fn total_number_of_unsupported_timestamps(mut self, input: i32) -> Self {
        self.total_number_of_unsupported_timestamps = Some(input);
        self
    }
    /// <p> Indicates the total number of unsupported timestamps across the ingested data. </p>
    pub fn set_total_number_of_unsupported_timestamps(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.total_number_of_unsupported_timestamps = input;
        self
    }
    /// Consumes the builder and constructs a [`UnsupportedTimestamps`](crate::types::UnsupportedTimestamps).
    pub fn build(self) -> crate::types::UnsupportedTimestamps {
        crate::types::UnsupportedTimestamps {
            total_number_of_unsupported_timestamps: self.total_number_of_unsupported_timestamps,
        }
    }
}
