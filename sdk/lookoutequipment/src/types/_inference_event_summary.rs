// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the specific inference event, including start and end time, diagnostics information, event duration and so on.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceEventSummary {
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event. </p>
    #[doc(hidden)]
    pub inference_scheduler_arn: std::option::Option<std::string::String>,
    /// <p>The name of the inference scheduler being used for the inference events. </p>
    #[doc(hidden)]
    pub inference_scheduler_name: std::option::Option<std::string::String>,
    /// <p>Indicates the starting time of an inference event. </p>
    #[doc(hidden)]
    pub event_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the ending time of an inference event. </p>
    #[doc(hidden)]
    pub event_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> An array which specifies the names and values of all sensors contributing to an inference event.</p>
    #[doc(hidden)]
    pub diagnostics: std::option::Option<std::string::String>,
    /// <p> Indicates the size of an inference event in seconds. </p>
    #[doc(hidden)]
    pub event_duration_in_seconds: std::option::Option<i64>,
}
impl InferenceEventSummary {
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event. </p>
    pub fn inference_scheduler_arn(&self) -> std::option::Option<&str> {
        self.inference_scheduler_arn.as_deref()
    }
    /// <p>The name of the inference scheduler being used for the inference events. </p>
    pub fn inference_scheduler_name(&self) -> std::option::Option<&str> {
        self.inference_scheduler_name.as_deref()
    }
    /// <p>Indicates the starting time of an inference event. </p>
    pub fn event_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.event_start_time.as_ref()
    }
    /// <p>Indicates the ending time of an inference event. </p>
    pub fn event_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.event_end_time.as_ref()
    }
    /// <p> An array which specifies the names and values of all sensors contributing to an inference event.</p>
    pub fn diagnostics(&self) -> std::option::Option<&str> {
        self.diagnostics.as_deref()
    }
    /// <p> Indicates the size of an inference event in seconds. </p>
    pub fn event_duration_in_seconds(&self) -> std::option::Option<i64> {
        self.event_duration_in_seconds
    }
}
impl InferenceEventSummary {
    /// Creates a new builder-style object to manufacture [`InferenceEventSummary`](crate::types::InferenceEventSummary).
    pub fn builder() -> crate::types::builders::InferenceEventSummaryBuilder {
        crate::types::builders::InferenceEventSummaryBuilder::default()
    }
}

/// A builder for [`InferenceEventSummary`](crate::types::InferenceEventSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InferenceEventSummaryBuilder {
    pub(crate) inference_scheduler_arn: std::option::Option<std::string::String>,
    pub(crate) inference_scheduler_name: std::option::Option<std::string::String>,
    pub(crate) event_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) event_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) diagnostics: std::option::Option<std::string::String>,
    pub(crate) event_duration_in_seconds: std::option::Option<i64>,
}
impl InferenceEventSummaryBuilder {
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event. </p>
    pub fn inference_scheduler_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inference_scheduler_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the inference scheduler being used for the inference event. </p>
    pub fn set_inference_scheduler_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inference_scheduler_arn = input;
        self
    }
    /// <p>The name of the inference scheduler being used for the inference events. </p>
    pub fn inference_scheduler_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inference_scheduler_name = Some(input.into());
        self
    }
    /// <p>The name of the inference scheduler being used for the inference events. </p>
    pub fn set_inference_scheduler_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inference_scheduler_name = input;
        self
    }
    /// <p>Indicates the starting time of an inference event. </p>
    pub fn event_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.event_start_time = Some(input);
        self
    }
    /// <p>Indicates the starting time of an inference event. </p>
    pub fn set_event_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.event_start_time = input;
        self
    }
    /// <p>Indicates the ending time of an inference event. </p>
    pub fn event_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.event_end_time = Some(input);
        self
    }
    /// <p>Indicates the ending time of an inference event. </p>
    pub fn set_event_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.event_end_time = input;
        self
    }
    /// <p> An array which specifies the names and values of all sensors contributing to an inference event.</p>
    pub fn diagnostics(mut self, input: impl Into<std::string::String>) -> Self {
        self.diagnostics = Some(input.into());
        self
    }
    /// <p> An array which specifies the names and values of all sensors contributing to an inference event.</p>
    pub fn set_diagnostics(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.diagnostics = input;
        self
    }
    /// <p> Indicates the size of an inference event in seconds. </p>
    pub fn event_duration_in_seconds(mut self, input: i64) -> Self {
        self.event_duration_in_seconds = Some(input);
        self
    }
    /// <p> Indicates the size of an inference event in seconds. </p>
    pub fn set_event_duration_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.event_duration_in_seconds = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceEventSummary`](crate::types::InferenceEventSummary).
    pub fn build(self) -> crate::types::InferenceEventSummary {
        crate::types::InferenceEventSummary {
            inference_scheduler_arn: self.inference_scheduler_arn,
            inference_scheduler_name: self.inference_scheduler_name,
            event_start_time: self.event_start_time,
            event_end_time: self.event_end_time,
            diagnostics: self.diagnostics,
            event_duration_in_seconds: self.event_duration_in_seconds,
        }
    }
}
