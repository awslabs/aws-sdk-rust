// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information on monotonic values in the data. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MonotonicValues {
    /// <p> Indicates whether there is a potential data issue related to having monotonic values. </p>
    pub status: crate::types::StatisticalIssueStatus,
    /// <p> Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC. </p>
    pub monotonicity: ::std::option::Option<crate::types::Monotonicity>,
}
impl MonotonicValues {
    /// <p> Indicates whether there is a potential data issue related to having monotonic values. </p>
    pub fn status(&self) -> &crate::types::StatisticalIssueStatus {
        &self.status
    }
    /// <p> Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC. </p>
    pub fn monotonicity(&self) -> ::std::option::Option<&crate::types::Monotonicity> {
        self.monotonicity.as_ref()
    }
}
impl MonotonicValues {
    /// Creates a new builder-style object to manufacture [`MonotonicValues`](crate::types::MonotonicValues).
    pub fn builder() -> crate::types::builders::MonotonicValuesBuilder {
        crate::types::builders::MonotonicValuesBuilder::default()
    }
}

/// A builder for [`MonotonicValues`](crate::types::MonotonicValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MonotonicValuesBuilder {
    pub(crate) status: ::std::option::Option<crate::types::StatisticalIssueStatus>,
    pub(crate) monotonicity: ::std::option::Option<crate::types::Monotonicity>,
}
impl MonotonicValuesBuilder {
    /// <p> Indicates whether there is a potential data issue related to having monotonic values. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatisticalIssueStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates whether there is a potential data issue related to having monotonic values. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatisticalIssueStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> Indicates whether there is a potential data issue related to having monotonic values. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatisticalIssueStatus> {
        &self.status
    }
    /// <p> Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC. </p>
    pub fn monotonicity(mut self, input: crate::types::Monotonicity) -> Self {
        self.monotonicity = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC. </p>
    pub fn set_monotonicity(mut self, input: ::std::option::Option<crate::types::Monotonicity>) -> Self {
        self.monotonicity = input;
        self
    }
    /// <p> Indicates the monotonicity of values. Can be INCREASING, DECREASING, or STATIC. </p>
    pub fn get_monotonicity(&self) -> &::std::option::Option<crate::types::Monotonicity> {
        &self.monotonicity
    }
    /// Consumes the builder and constructs a [`MonotonicValues`](crate::types::MonotonicValues).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::MonotonicValuesBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::MonotonicValues, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MonotonicValues {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building MonotonicValues",
                )
            })?,
            monotonicity: self.monotonicity,
        })
    }
}
