// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Specifies S3 configuration information for the input data for the data ingestion job. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IngestionS3InputConfiguration {
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub bucket: ::std::string::String,
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion. </p>
    pub prefix: ::std::option::Option<::std::string::String>,
    /// <p> The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time.</p>
    /// <p>Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)</p>
    pub key_pattern: ::std::option::Option<::std::string::String>,
}
impl IngestionS3InputConfiguration {
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub fn bucket(&self) -> &str {
        use std::ops::Deref;
        self.bucket.deref()
    }
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion. </p>
    pub fn prefix(&self) -> ::std::option::Option<&str> {
        self.prefix.as_deref()
    }
    /// <p> The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time.</p>
    /// <p>Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)</p>
    pub fn key_pattern(&self) -> ::std::option::Option<&str> {
        self.key_pattern.as_deref()
    }
}
impl IngestionS3InputConfiguration {
    /// Creates a new builder-style object to manufacture [`IngestionS3InputConfiguration`](crate::types::IngestionS3InputConfiguration).
    pub fn builder() -> crate::types::builders::IngestionS3InputConfigurationBuilder {
        crate::types::builders::IngestionS3InputConfigurationBuilder::default()
    }
}

/// A builder for [`IngestionS3InputConfiguration`](crate::types::IngestionS3InputConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IngestionS3InputConfigurationBuilder {
    pub(crate) bucket: ::std::option::Option<::std::string::String>,
    pub(crate) prefix: ::std::option::Option<::std::string::String>,
    pub(crate) key_pattern: ::std::option::Option<::std::string::String>,
}
impl IngestionS3InputConfigurationBuilder {
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    /// This field is required.
    pub fn bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub fn set_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The name of the S3 bucket used for the input data for the data ingestion. </p>
    pub fn get_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket
    }
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion. </p>
    pub fn prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion. </p>
    pub fn set_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.prefix = input;
        self
    }
    /// <p>The prefix for the S3 location being used for the input data for the data ingestion. </p>
    pub fn get_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.prefix
    }
    /// <p> The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time.</p>
    /// <p>Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)</p>
    pub fn key_pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time.</p>
    /// <p>Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)</p>
    pub fn set_key_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_pattern = input;
        self
    }
    /// <p> The pattern for matching the Amazon S3 files that will be used for ingestion. If the schema was created previously without any KeyPattern, then the default KeyPattern {prefix}/{component_name}/* is used to download files from Amazon S3 according to the schema. This field is required when ingestion is being done for the first time.</p>
    /// <p>Valid Values: {prefix}/{component_name}_* | {prefix}/{component_name}/* | {prefix}/{component_name}[DELIMITER]* (Allowed delimiters : space, dot, underscore, hyphen)</p>
    pub fn get_key_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_pattern
    }
    /// Consumes the builder and constructs a [`IngestionS3InputConfiguration`](crate::types::IngestionS3InputConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket`](crate::types::builders::IngestionS3InputConfigurationBuilder::bucket)
    pub fn build(self) -> ::std::result::Result<crate::types::IngestionS3InputConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IngestionS3InputConfiguration {
            bucket: self.bucket.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket",
                    "bucket was not specified but it is required when building IngestionS3InputConfiguration",
                )
            })?,
            prefix: self.prefix,
            key_pattern: self.key_pattern,
        })
    }
}
