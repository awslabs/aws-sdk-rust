// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information on large gaps between consecutive timestamps in data. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LargeTimestampGaps {
    /// <p> Indicates whether there is a potential data issue related to large gaps in timestamps. </p>
    pub status: crate::types::StatisticalIssueStatus,
    /// <p> Indicates the number of large timestamp gaps, if there are any. </p>
    pub number_of_large_timestamp_gaps: ::std::option::Option<i32>,
    /// <p> Indicates the size of the largest timestamp gap, in days. </p>
    pub max_timestamp_gap_in_days: ::std::option::Option<i32>,
}
impl LargeTimestampGaps {
    /// <p> Indicates whether there is a potential data issue related to large gaps in timestamps. </p>
    pub fn status(&self) -> &crate::types::StatisticalIssueStatus {
        &self.status
    }
    /// <p> Indicates the number of large timestamp gaps, if there are any. </p>
    pub fn number_of_large_timestamp_gaps(&self) -> ::std::option::Option<i32> {
        self.number_of_large_timestamp_gaps
    }
    /// <p> Indicates the size of the largest timestamp gap, in days. </p>
    pub fn max_timestamp_gap_in_days(&self) -> ::std::option::Option<i32> {
        self.max_timestamp_gap_in_days
    }
}
impl LargeTimestampGaps {
    /// Creates a new builder-style object to manufacture [`LargeTimestampGaps`](crate::types::LargeTimestampGaps).
    pub fn builder() -> crate::types::builders::LargeTimestampGapsBuilder {
        crate::types::builders::LargeTimestampGapsBuilder::default()
    }
}

/// A builder for [`LargeTimestampGaps`](crate::types::LargeTimestampGaps).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LargeTimestampGapsBuilder {
    pub(crate) status: ::std::option::Option<crate::types::StatisticalIssueStatus>,
    pub(crate) number_of_large_timestamp_gaps: ::std::option::Option<i32>,
    pub(crate) max_timestamp_gap_in_days: ::std::option::Option<i32>,
}
impl LargeTimestampGapsBuilder {
    /// <p> Indicates whether there is a potential data issue related to large gaps in timestamps. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatisticalIssueStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates whether there is a potential data issue related to large gaps in timestamps. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatisticalIssueStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> Indicates whether there is a potential data issue related to large gaps in timestamps. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatisticalIssueStatus> {
        &self.status
    }
    /// <p> Indicates the number of large timestamp gaps, if there are any. </p>
    pub fn number_of_large_timestamp_gaps(mut self, input: i32) -> Self {
        self.number_of_large_timestamp_gaps = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the number of large timestamp gaps, if there are any. </p>
    pub fn set_number_of_large_timestamp_gaps(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_large_timestamp_gaps = input;
        self
    }
    /// <p> Indicates the number of large timestamp gaps, if there are any. </p>
    pub fn get_number_of_large_timestamp_gaps(&self) -> &::std::option::Option<i32> {
        &self.number_of_large_timestamp_gaps
    }
    /// <p> Indicates the size of the largest timestamp gap, in days. </p>
    pub fn max_timestamp_gap_in_days(mut self, input: i32) -> Self {
        self.max_timestamp_gap_in_days = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the size of the largest timestamp gap, in days. </p>
    pub fn set_max_timestamp_gap_in_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_timestamp_gap_in_days = input;
        self
    }
    /// <p> Indicates the size of the largest timestamp gap, in days. </p>
    pub fn get_max_timestamp_gap_in_days(&self) -> &::std::option::Option<i32> {
        &self.max_timestamp_gap_in_days
    }
    /// Consumes the builder and constructs a [`LargeTimestampGaps`](crate::types::LargeTimestampGaps).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::LargeTimestampGapsBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::LargeTimestampGaps, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LargeTimestampGaps {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building LargeTimestampGaps",
                )
            })?,
            number_of_large_timestamp_gaps: self.number_of_large_timestamp_gaps,
            max_timestamp_gap_in_days: self.max_timestamp_gap_in_days,
        })
    }
}
