// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information of count and percentage. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CountPercent {
    /// <p> Indicates the count of occurences of the given statistic. </p>
    pub count: i32,
    /// <p> Indicates the percentage of occurances of the given statistic. </p>
    pub percentage: f32,
}
impl CountPercent {
    /// <p> Indicates the count of occurences of the given statistic. </p>
    pub fn count(&self) -> i32 {
        self.count
    }
    /// <p> Indicates the percentage of occurances of the given statistic. </p>
    pub fn percentage(&self) -> f32 {
        self.percentage
    }
}
impl CountPercent {
    /// Creates a new builder-style object to manufacture [`CountPercent`](crate::types::CountPercent).
    pub fn builder() -> crate::types::builders::CountPercentBuilder {
        crate::types::builders::CountPercentBuilder::default()
    }
}

/// A builder for [`CountPercent`](crate::types::CountPercent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CountPercentBuilder {
    pub(crate) count: ::std::option::Option<i32>,
    pub(crate) percentage: ::std::option::Option<f32>,
}
impl CountPercentBuilder {
    /// <p> Indicates the count of occurences of the given statistic. </p>
    /// This field is required.
    pub fn count(mut self, input: i32) -> Self {
        self.count = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the count of occurences of the given statistic. </p>
    pub fn set_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// <p> Indicates the count of occurences of the given statistic. </p>
    pub fn get_count(&self) -> &::std::option::Option<i32> {
        &self.count
    }
    /// <p> Indicates the percentage of occurances of the given statistic. </p>
    /// This field is required.
    pub fn percentage(mut self, input: f32) -> Self {
        self.percentage = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the percentage of occurances of the given statistic. </p>
    pub fn set_percentage(mut self, input: ::std::option::Option<f32>) -> Self {
        self.percentage = input;
        self
    }
    /// <p> Indicates the percentage of occurances of the given statistic. </p>
    pub fn get_percentage(&self) -> &::std::option::Option<f32> {
        &self.percentage
    }
    /// Consumes the builder and constructs a [`CountPercent`](crate::types::CountPercent).
    /// This method will fail if any of the following fields are not set:
    /// - [`count`](crate::types::builders::CountPercentBuilder::count)
    pub fn build(self) -> ::std::result::Result<crate::types::CountPercent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CountPercent {
            count: self.count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "count",
                    "count was not specified but it is required when building CountPercent",
                )
            })?,
            percentage: self.percentage.unwrap_or_default(),
        })
    }
}
