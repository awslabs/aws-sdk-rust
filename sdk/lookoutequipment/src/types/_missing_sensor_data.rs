// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises aggregated information on sensors having missing data. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MissingSensorData {
    /// <p> Indicates the number of sensors that have atleast some data missing. </p>
    pub affected_sensor_count: i32,
    /// <p> Indicates the total number of missing values across all the sensors. </p>
    pub total_number_of_missing_values: i32,
}
impl MissingSensorData {
    /// <p> Indicates the number of sensors that have atleast some data missing. </p>
    pub fn affected_sensor_count(&self) -> i32 {
        self.affected_sensor_count
    }
    /// <p> Indicates the total number of missing values across all the sensors. </p>
    pub fn total_number_of_missing_values(&self) -> i32 {
        self.total_number_of_missing_values
    }
}
impl MissingSensorData {
    /// Creates a new builder-style object to manufacture [`MissingSensorData`](crate::types::MissingSensorData).
    pub fn builder() -> crate::types::builders::MissingSensorDataBuilder {
        crate::types::builders::MissingSensorDataBuilder::default()
    }
}

/// A builder for [`MissingSensorData`](crate::types::MissingSensorData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MissingSensorDataBuilder {
    pub(crate) affected_sensor_count: ::std::option::Option<i32>,
    pub(crate) total_number_of_missing_values: ::std::option::Option<i32>,
}
impl MissingSensorDataBuilder {
    /// <p> Indicates the number of sensors that have atleast some data missing. </p>
    /// This field is required.
    pub fn affected_sensor_count(mut self, input: i32) -> Self {
        self.affected_sensor_count = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the number of sensors that have atleast some data missing. </p>
    pub fn set_affected_sensor_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.affected_sensor_count = input;
        self
    }
    /// <p> Indicates the number of sensors that have atleast some data missing. </p>
    pub fn get_affected_sensor_count(&self) -> &::std::option::Option<i32> {
        &self.affected_sensor_count
    }
    /// <p> Indicates the total number of missing values across all the sensors. </p>
    /// This field is required.
    pub fn total_number_of_missing_values(mut self, input: i32) -> Self {
        self.total_number_of_missing_values = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the total number of missing values across all the sensors. </p>
    pub fn set_total_number_of_missing_values(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_number_of_missing_values = input;
        self
    }
    /// <p> Indicates the total number of missing values across all the sensors. </p>
    pub fn get_total_number_of_missing_values(&self) -> &::std::option::Option<i32> {
        &self.total_number_of_missing_values
    }
    /// Consumes the builder and constructs a [`MissingSensorData`](crate::types::MissingSensorData).
    /// This method will fail if any of the following fields are not set:
    /// - [`affected_sensor_count`](crate::types::builders::MissingSensorDataBuilder::affected_sensor_count)
    /// - [`total_number_of_missing_values`](crate::types::builders::MissingSensorDataBuilder::total_number_of_missing_values)
    pub fn build(self) -> ::std::result::Result<crate::types::MissingSensorData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MissingSensorData {
            affected_sensor_count: self.affected_sensor_count.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "affected_sensor_count",
                    "affected_sensor_count was not specified but it is required when building MissingSensorData",
                )
            })?,
            total_number_of_missing_values: self.total_number_of_missing_values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "total_number_of_missing_values",
                    "total_number_of_missing_values was not specified but it is required when building MissingSensorData",
                )
            })?,
        })
    }
}
