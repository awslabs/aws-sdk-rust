// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises information on categorical values in data. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CategoricalValues {
    /// <p> Indicates whether there is a potential data issue related to categorical values. </p>
    pub status: crate::types::StatisticalIssueStatus,
    /// <p> Indicates the number of categories in the data. </p>
    pub number_of_category: ::std::option::Option<i32>,
}
impl CategoricalValues {
    /// <p> Indicates whether there is a potential data issue related to categorical values. </p>
    pub fn status(&self) -> &crate::types::StatisticalIssueStatus {
        &self.status
    }
    /// <p> Indicates the number of categories in the data. </p>
    pub fn number_of_category(&self) -> ::std::option::Option<i32> {
        self.number_of_category
    }
}
impl CategoricalValues {
    /// Creates a new builder-style object to manufacture [`CategoricalValues`](crate::types::CategoricalValues).
    pub fn builder() -> crate::types::builders::CategoricalValuesBuilder {
        crate::types::builders::CategoricalValuesBuilder::default()
    }
}

/// A builder for [`CategoricalValues`](crate::types::CategoricalValues).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CategoricalValuesBuilder {
    pub(crate) status: ::std::option::Option<crate::types::StatisticalIssueStatus>,
    pub(crate) number_of_category: ::std::option::Option<i32>,
}
impl CategoricalValuesBuilder {
    /// <p> Indicates whether there is a potential data issue related to categorical values. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::StatisticalIssueStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates whether there is a potential data issue related to categorical values. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::StatisticalIssueStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> Indicates whether there is a potential data issue related to categorical values. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::StatisticalIssueStatus> {
        &self.status
    }
    /// <p> Indicates the number of categories in the data. </p>
    pub fn number_of_category(mut self, input: i32) -> Self {
        self.number_of_category = ::std::option::Option::Some(input);
        self
    }
    /// <p> Indicates the number of categories in the data. </p>
    pub fn set_number_of_category(mut self, input: ::std::option::Option<i32>) -> Self {
        self.number_of_category = input;
        self
    }
    /// <p> Indicates the number of categories in the data. </p>
    pub fn get_number_of_category(&self) -> &::std::option::Option<i32> {
        &self.number_of_category
    }
    /// Consumes the builder and constructs a [`CategoricalValues`](crate::types::CategoricalValues).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::types::builders::CategoricalValuesBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::CategoricalValues, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CategoricalValues {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CategoricalValues",
                )
            })?,
            number_of_category: self.number_of_category,
        })
    }
}
