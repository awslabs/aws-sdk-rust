// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises aggregated information on sensors having insufficient data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InvalidSensorData {
    /// <p> Indicates the number of sensors that have at least some invalid values. </p>
    #[doc(hidden)]
    pub affected_sensor_count: std::option::Option<i32>,
    /// <p> Indicates the total number of invalid values across all the sensors. </p>
    #[doc(hidden)]
    pub total_number_of_invalid_values: std::option::Option<i32>,
}
impl InvalidSensorData {
    /// <p> Indicates the number of sensors that have at least some invalid values. </p>
    pub fn affected_sensor_count(&self) -> std::option::Option<i32> {
        self.affected_sensor_count
    }
    /// <p> Indicates the total number of invalid values across all the sensors. </p>
    pub fn total_number_of_invalid_values(&self) -> std::option::Option<i32> {
        self.total_number_of_invalid_values
    }
}
impl InvalidSensorData {
    /// Creates a new builder-style object to manufacture [`InvalidSensorData`](crate::types::InvalidSensorData).
    pub fn builder() -> crate::types::builders::InvalidSensorDataBuilder {
        crate::types::builders::InvalidSensorDataBuilder::default()
    }
}

/// A builder for [`InvalidSensorData`](crate::types::InvalidSensorData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InvalidSensorDataBuilder {
    pub(crate) affected_sensor_count: std::option::Option<i32>,
    pub(crate) total_number_of_invalid_values: std::option::Option<i32>,
}
impl InvalidSensorDataBuilder {
    /// <p> Indicates the number of sensors that have at least some invalid values. </p>
    pub fn affected_sensor_count(mut self, input: i32) -> Self {
        self.affected_sensor_count = Some(input);
        self
    }
    /// <p> Indicates the number of sensors that have at least some invalid values. </p>
    pub fn set_affected_sensor_count(mut self, input: std::option::Option<i32>) -> Self {
        self.affected_sensor_count = input;
        self
    }
    /// <p> Indicates the total number of invalid values across all the sensors. </p>
    pub fn total_number_of_invalid_values(mut self, input: i32) -> Self {
        self.total_number_of_invalid_values = Some(input);
        self
    }
    /// <p> Indicates the total number of invalid values across all the sensors. </p>
    pub fn set_total_number_of_invalid_values(mut self, input: std::option::Option<i32>) -> Self {
        self.total_number_of_invalid_values = input;
        self
    }
    /// Consumes the builder and constructs a [`InvalidSensorData`](crate::types::InvalidSensorData).
    pub fn build(self) -> crate::types::InvalidSensorData {
        crate::types::InvalidSensorData {
            affected_sensor_count: self.affected_sensor_count,
            total_number_of_invalid_values: self.total_number_of_invalid_values,
        }
    }
}
