// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Entity that comprises aggregated information on sensors having insufficient data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InsufficientSensorData {
    /// <p> Parameter that describes the total number of sensors that have data completely missing for it. </p>
    #[doc(hidden)]
    pub missing_complete_sensor_data: std::option::Option<crate::types::MissingCompleteSensorData>,
    /// <p> Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall. </p>
    #[doc(hidden)]
    pub sensors_with_short_date_range: std::option::Option<crate::types::SensorsWithShortDateRange>,
}
impl InsufficientSensorData {
    /// <p> Parameter that describes the total number of sensors that have data completely missing for it. </p>
    pub fn missing_complete_sensor_data(
        &self,
    ) -> std::option::Option<&crate::types::MissingCompleteSensorData> {
        self.missing_complete_sensor_data.as_ref()
    }
    /// <p> Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall. </p>
    pub fn sensors_with_short_date_range(
        &self,
    ) -> std::option::Option<&crate::types::SensorsWithShortDateRange> {
        self.sensors_with_short_date_range.as_ref()
    }
}
impl InsufficientSensorData {
    /// Creates a new builder-style object to manufacture [`InsufficientSensorData`](crate::types::InsufficientSensorData).
    pub fn builder() -> crate::types::builders::InsufficientSensorDataBuilder {
        crate::types::builders::InsufficientSensorDataBuilder::default()
    }
}

/// A builder for [`InsufficientSensorData`](crate::types::InsufficientSensorData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InsufficientSensorDataBuilder {
    pub(crate) missing_complete_sensor_data:
        std::option::Option<crate::types::MissingCompleteSensorData>,
    pub(crate) sensors_with_short_date_range:
        std::option::Option<crate::types::SensorsWithShortDateRange>,
}
impl InsufficientSensorDataBuilder {
    /// <p> Parameter that describes the total number of sensors that have data completely missing for it. </p>
    pub fn missing_complete_sensor_data(
        mut self,
        input: crate::types::MissingCompleteSensorData,
    ) -> Self {
        self.missing_complete_sensor_data = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of sensors that have data completely missing for it. </p>
    pub fn set_missing_complete_sensor_data(
        mut self,
        input: std::option::Option<crate::types::MissingCompleteSensorData>,
    ) -> Self {
        self.missing_complete_sensor_data = input;
        self
    }
    /// <p> Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall. </p>
    pub fn sensors_with_short_date_range(
        mut self,
        input: crate::types::SensorsWithShortDateRange,
    ) -> Self {
        self.sensors_with_short_date_range = Some(input);
        self
    }
    /// <p> Parameter that describes the total number of sensors that have a short date range of less than 90 days of data overall. </p>
    pub fn set_sensors_with_short_date_range(
        mut self,
        input: std::option::Option<crate::types::SensorsWithShortDateRange>,
    ) -> Self {
        self.sensors_with_short_date_range = input;
        self
    }
    /// Consumes the builder and constructs a [`InsufficientSensorData`](crate::types::InsufficientSensorData).
    pub fn build(self) -> crate::types::InsufficientSensorData {
        crate::types::InsufficientSensorData {
            missing_complete_sensor_data: self.missing_complete_sensor_data,
            sensors_with_short_date_range: self.sensors_with_short_date_range,
        }
    }
}
