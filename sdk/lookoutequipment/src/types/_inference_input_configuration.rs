// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InferenceInputConfiguration {
    /// <p> Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.</p>
    #[doc(hidden)]
    pub s3_input_configuration: std::option::Option<crate::types::InferenceS3InputConfiguration>,
    /// <p>Indicates the difference between your time zone and Coordinated Universal Time (UTC).</p>
    #[doc(hidden)]
    pub input_time_zone_offset: std::option::Option<std::string::String>,
    /// <p>Specifies configuration information for the input data for the inference, including timestamp format and delimiter. </p>
    #[doc(hidden)]
    pub inference_input_name_configuration:
        std::option::Option<crate::types::InferenceInputNameConfiguration>,
}
impl InferenceInputConfiguration {
    /// <p> Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.</p>
    pub fn s3_input_configuration(
        &self,
    ) -> std::option::Option<&crate::types::InferenceS3InputConfiguration> {
        self.s3_input_configuration.as_ref()
    }
    /// <p>Indicates the difference between your time zone and Coordinated Universal Time (UTC).</p>
    pub fn input_time_zone_offset(&self) -> std::option::Option<&str> {
        self.input_time_zone_offset.as_deref()
    }
    /// <p>Specifies configuration information for the input data for the inference, including timestamp format and delimiter. </p>
    pub fn inference_input_name_configuration(
        &self,
    ) -> std::option::Option<&crate::types::InferenceInputNameConfiguration> {
        self.inference_input_name_configuration.as_ref()
    }
}
impl InferenceInputConfiguration {
    /// Creates a new builder-style object to manufacture [`InferenceInputConfiguration`](crate::types::InferenceInputConfiguration).
    pub fn builder() -> crate::types::builders::InferenceInputConfigurationBuilder {
        crate::types::builders::InferenceInputConfigurationBuilder::default()
    }
}

/// A builder for [`InferenceInputConfiguration`](crate::types::InferenceInputConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InferenceInputConfigurationBuilder {
    pub(crate) s3_input_configuration:
        std::option::Option<crate::types::InferenceS3InputConfiguration>,
    pub(crate) input_time_zone_offset: std::option::Option<std::string::String>,
    pub(crate) inference_input_name_configuration:
        std::option::Option<crate::types::InferenceInputNameConfiguration>,
}
impl InferenceInputConfigurationBuilder {
    /// <p> Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.</p>
    pub fn s3_input_configuration(
        mut self,
        input: crate::types::InferenceS3InputConfiguration,
    ) -> Self {
        self.s3_input_configuration = Some(input);
        self
    }
    /// <p> Specifies configuration information for the input data for the inference, including Amazon S3 location of input data.</p>
    pub fn set_s3_input_configuration(
        mut self,
        input: std::option::Option<crate::types::InferenceS3InputConfiguration>,
    ) -> Self {
        self.s3_input_configuration = input;
        self
    }
    /// <p>Indicates the difference between your time zone and Coordinated Universal Time (UTC).</p>
    pub fn input_time_zone_offset(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_time_zone_offset = Some(input.into());
        self
    }
    /// <p>Indicates the difference between your time zone and Coordinated Universal Time (UTC).</p>
    pub fn set_input_time_zone_offset(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.input_time_zone_offset = input;
        self
    }
    /// <p>Specifies configuration information for the input data for the inference, including timestamp format and delimiter. </p>
    pub fn inference_input_name_configuration(
        mut self,
        input: crate::types::InferenceInputNameConfiguration,
    ) -> Self {
        self.inference_input_name_configuration = Some(input);
        self
    }
    /// <p>Specifies configuration information for the input data for the inference, including timestamp format and delimiter. </p>
    pub fn set_inference_input_name_configuration(
        mut self,
        input: std::option::Option<crate::types::InferenceInputNameConfiguration>,
    ) -> Self {
        self.inference_input_name_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`InferenceInputConfiguration`](crate::types::InferenceInputConfiguration).
    pub fn build(self) -> crate::types::InferenceInputConfiguration {
        crate::types::InferenceInputConfiguration {
            s3_input_configuration: self.s3_input_configuration,
            input_time_zone_offset: self.input_time_zone_offset,
            inference_input_name_configuration: self.inference_input_name_configuration,
        }
    }
}
