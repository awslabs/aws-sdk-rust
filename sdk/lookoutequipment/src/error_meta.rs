// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request could not be completed because you do not have access to the resource. </p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> The request could not be completed due to a conflict with the current state of the target resource. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p> Processing of the request has failed because of an unknown error, exception or failure. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p> The resource requested could not be found. Verify the resource ID and retry your request. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> Resource limitations have been exceeded. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> The input fails to satisfy constraints specified by Amazon Lookout for Equipment or a related AWS service that's being utilized. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_dataset::CreateDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_dataset::CreateDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_dataset::CreateDatasetError> for Error {
    fn from(err: crate::operation::create_dataset::CreateDatasetError) -> Self {
        match err {
            crate::operation::create_dataset::CreateDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_dataset::CreateDatasetError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_dataset::CreateDatasetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_dataset::CreateDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_inference_scheduler::CreateInferenceSchedulerError> for Error {
    fn from(
        err: crate::operation::create_inference_scheduler::CreateInferenceSchedulerError,
    ) -> Self {
        match err {
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_inference_scheduler::CreateInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_label::CreateLabelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_label::CreateLabelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_label::CreateLabelError> for Error {
    fn from(err: crate::operation::create_label::CreateLabelError) -> Self {
        match err {
            crate::operation::create_label::CreateLabelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_label::CreateLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_label::CreateLabelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_label::CreateLabelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_label::CreateLabelError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_label::CreateLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_label::CreateLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_label::CreateLabelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_label_group::CreateLabelGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_label_group::CreateLabelGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_label_group::CreateLabelGroupError> for Error {
    fn from(err: crate::operation::create_label_group::CreateLabelGroupError) -> Self {
        match err {
            crate::operation::create_label_group::CreateLabelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_label_group::CreateLabelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_model::CreateModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model::CreateModelError> for Error {
    fn from(err: crate::operation::create_model::CreateModelError) -> Self {
        match err {
            crate::operation::create_model::CreateModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_model::CreateModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_model::CreateModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_model::CreateModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_model::CreateModelError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_model::CreateModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_model::CreateModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_model::CreateModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_dataset::DeleteDatasetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_dataset::DeleteDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_dataset::DeleteDatasetError> for Error {
    fn from(err: crate::operation::delete_dataset::DeleteDatasetError) -> Self {
        match err {
            crate::operation::delete_dataset::DeleteDatasetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_dataset::DeleteDatasetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_dataset::DeleteDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError> for Error {
    fn from(
        err: crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError,
    ) -> Self {
        match err {
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_inference_scheduler::DeleteInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_label::DeleteLabelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_label::DeleteLabelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_label::DeleteLabelError> for Error {
    fn from(err: crate::operation::delete_label::DeleteLabelError) -> Self {
        match err {
            crate::operation::delete_label::DeleteLabelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_label::DeleteLabelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_label_group::DeleteLabelGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_label_group::DeleteLabelGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_label_group::DeleteLabelGroupError> for Error {
    fn from(err: crate::operation::delete_label_group::DeleteLabelGroupError) -> Self {
        match err {
            crate::operation::delete_label_group::DeleteLabelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_label_group::DeleteLabelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_model::DeleteModelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model::DeleteModelError> for Error {
    fn from(err: crate::operation::delete_model::DeleteModelError) -> Self {
        match err {
            crate::operation::delete_model::DeleteModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_model::DeleteModelError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_model::DeleteModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_model::DeleteModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError> for Error {
    fn from(
        err: crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError,
    ) -> Self {
        match err {
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dataset::DescribeDatasetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dataset::DescribeDatasetError> for Error {
    fn from(err: crate::operation::describe_dataset::DescribeDatasetError) -> Self {
        match err {
            crate::operation::describe_dataset::DescribeDatasetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_dataset::DescribeDatasetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError>
    for Error
{
    fn from(
        err: crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError,
    ) -> Self {
        match err {
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_inference_scheduler::DescribeInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_label::DescribeLabelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_label::DescribeLabelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_label::DescribeLabelError> for Error {
    fn from(err: crate::operation::describe_label::DescribeLabelError) -> Self {
        match err {
            crate::operation::describe_label::DescribeLabelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_label::DescribeLabelError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_label::DescribeLabelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_label::DescribeLabelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_label::DescribeLabelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_label::DescribeLabelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_label_group::DescribeLabelGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_label_group::DescribeLabelGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_label_group::DescribeLabelGroupError> for Error {
    fn from(err: crate::operation::describe_label_group::DescribeLabelGroupError) -> Self {
        match err {
            crate::operation::describe_label_group::DescribeLabelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_label_group::DescribeLabelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_label_group::DescribeLabelGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_label_group::DescribeLabelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_label_group::DescribeLabelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_label_group::DescribeLabelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_model::DescribeModelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_model::DescribeModelError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_model::DescribeModelError> for Error {
    fn from(err: crate::operation::describe_model::DescribeModelError) -> Self {
        match err {
            crate::operation::describe_model::DescribeModelError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_model::DescribeModelError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_model::DescribeModelError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_model::DescribeModelError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_model::DescribeModelError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_model::DescribeModelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError> for Error {
    fn from(err: crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError) -> Self {
        match err {
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_datasets::ListDatasetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_datasets::ListDatasetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_datasets::ListDatasetsError> for Error {
    fn from(err: crate::operation::list_datasets::ListDatasetsError) -> Self {
        match err {
            crate::operation::list_datasets::ListDatasetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_datasets::ListDatasetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_datasets::ListDatasetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_datasets::ListDatasetsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_datasets::ListDatasetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_inference_events::ListInferenceEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_inference_events::ListInferenceEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_inference_events::ListInferenceEventsError> for Error {
    fn from(err: crate::operation::list_inference_events::ListInferenceEventsError) -> Self {
        match err {
            crate::operation::list_inference_events::ListInferenceEventsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_inference_events::ListInferenceEventsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_inference_events::ListInferenceEventsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_inference_events::ListInferenceEventsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_inference_events::ListInferenceEventsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_inference_events::ListInferenceEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_inference_executions::ListInferenceExecutionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_inference_executions::ListInferenceExecutionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_inference_executions::ListInferenceExecutionsError> for Error {
    fn from(
        err: crate::operation::list_inference_executions::ListInferenceExecutionsError,
    ) -> Self {
        match err {
            crate::operation::list_inference_executions::ListInferenceExecutionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_inference_executions::ListInferenceExecutionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_inference_executions::ListInferenceExecutionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_inference_executions::ListInferenceExecutionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_inference_executions::ListInferenceExecutionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_inference_executions::ListInferenceExecutionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_inference_schedulers::ListInferenceSchedulersError> for Error {
    fn from(
        err: crate::operation::list_inference_schedulers::ListInferenceSchedulersError,
    ) -> Self {
        match err {
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_inference_schedulers::ListInferenceSchedulersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_label_groups::ListLabelGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_label_groups::ListLabelGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_label_groups::ListLabelGroupsError> for Error {
    fn from(err: crate::operation::list_label_groups::ListLabelGroupsError) -> Self {
        match err {
            crate::operation::list_label_groups::ListLabelGroupsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_label_groups::ListLabelGroupsError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_label_groups::ListLabelGroupsError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::list_label_groups::ListLabelGroupsError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_label_groups::ListLabelGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_labels::ListLabelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_labels::ListLabelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_labels::ListLabelsError> for Error {
    fn from(err: crate::operation::list_labels::ListLabelsError) -> Self {
        match err {
            crate::operation::list_labels::ListLabelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_labels::ListLabelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_labels::ListLabelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_labels::ListLabelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_labels::ListLabelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_models::ListModelsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_models::ListModelsError> for Error {
    fn from(err: crate::operation::list_models::ListModelsError) -> Self {
        match err {
            crate::operation::list_models::ListModelsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_models::ListModelsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_models::ListModelsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_models::ListModelsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_models::ListModelsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_sensor_statistics::ListSensorStatisticsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_sensor_statistics::ListSensorStatisticsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_sensor_statistics::ListSensorStatisticsError> for Error {
    fn from(err: crate::operation::list_sensor_statistics::ListSensorStatisticsError) -> Self {
        match err {
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_sensor_statistics::ListSensorStatisticsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_data_ingestion_job::StartDataIngestionJobError> for Error {
    fn from(err: crate::operation::start_data_ingestion_job::StartDataIngestionJobError) -> Self {
        match err {
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_data_ingestion_job::StartDataIngestionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_inference_scheduler::StartInferenceSchedulerError> for Error {
    fn from(
        err: crate::operation::start_inference_scheduler::StartInferenceSchedulerError,
    ) -> Self {
        match err {
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_inference_scheduler::StartInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_inference_scheduler::StopInferenceSchedulerError> for Error {
    fn from(err: crate::operation::stop_inference_scheduler::StopInferenceSchedulerError) -> Self {
        match err {
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_inference_scheduler::StopInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError> for Error {
    fn from(
        err: crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
    ) -> Self {
        match err {
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_label_group::UpdateLabelGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_label_group::UpdateLabelGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_label_group::UpdateLabelGroupError> for Error {
    fn from(err: crate::operation::update_label_group::UpdateLabelGroupError) -> Self {
        match err {
            crate::operation::update_label_group::UpdateLabelGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_label_group::UpdateLabelGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
