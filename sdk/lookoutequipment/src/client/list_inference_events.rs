// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListInferenceEvents`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::set_next_token):<br>required: **false**<br><p>An opaque pagination token indicating where to continue the listing of inference events.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::set_max_results):<br>required: **false**<br><p>Specifies the maximum number of inference events to list. </p><br>
    ///   - [`inference_scheduler_name(impl Into<String>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::inference_scheduler_name) / [`set_inference_scheduler_name(Option<String>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::set_inference_scheduler_name):<br>required: **true**<br><p>The name of the inference scheduler for the inference events listed. </p><br>
    ///   - [`interval_start_time(DateTime)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::interval_start_time) / [`set_interval_start_time(Option<DateTime>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::set_interval_start_time):<br>required: **true**<br><p> Lookout for Equipment will return all the inference events with an end time equal to or greater than the start time given.</p><br>
    ///   - [`interval_end_time(DateTime)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::interval_end_time) / [`set_interval_end_time(Option<DateTime>)`](crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::set_interval_end_time):<br>required: **true**<br><p>Returns all the inference events with an end start time equal to or greater than less than the end time given.</p><br>
    /// - On success, responds with [`ListInferenceEventsOutput`](crate::operation::list_inference_events::ListInferenceEventsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::operation::list_inference_events::ListInferenceEventsOutput::next_token): <p>An opaque pagination token indicating where to continue the listing of inference executions. </p>
    ///   - [`inference_event_summaries(Option<Vec::<InferenceEventSummary>>)`](crate::operation::list_inference_events::ListInferenceEventsOutput::inference_event_summaries): <p>Provides an array of information about the individual inference events returned from the <code>ListInferenceEvents</code> operation, including scheduler used, event start time, event end time, diagnostics, and so on. </p>
    /// - On failure, responds with [`SdkError<ListInferenceEventsError>`](crate::operation::list_inference_events::ListInferenceEventsError)
    pub fn list_inference_events(&self) -> crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder {
        crate::operation::list_inference_events::builders::ListInferenceEventsFluentBuilder::new(self.handle.clone())
    }
}
