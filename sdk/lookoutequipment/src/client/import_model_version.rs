// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ImportModelVersion`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_model_version_arn(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::source_model_version_arn) / [`set_source_model_version_arn(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_source_model_version_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the model version to import.</p><br>
    ///   - [`model_name(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::model_name) / [`set_model_name(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_model_name):<br>required: **false**<br><p>The name for the machine learning model to be created. If the model already exists, Amazon Lookout for Equipment creates a new version. If you do not specify this field, it is filled with the name of the source model.</p><br>
    ///   - [`dataset_name(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::dataset_name) / [`set_dataset_name(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_dataset_name):<br>required: **true**<br><p>The name of the dataset for the machine learning model being imported. </p><br>
    ///   - [`labels_input_configuration(LabelsInputConfiguration)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::labels_input_configuration) / [`set_labels_input_configuration(Option<LabelsInputConfiguration>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_labels_input_configuration):<br>required: **false**<br><p>Contains the configuration information for the S3 location being used to hold label data. </p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_client_token):<br>required: **true**<br><p>A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p><br>
    ///   - [`role_arn(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::role_arn) / [`set_role_arn(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_role_arn):<br>required: **false**<br><p>The Amazon Resource Name (ARN) of a role with permission to access the data source being used to create the machine learning model. </p><br>
    ///   - [`server_side_kms_key_id(impl Into<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::server_side_kms_key_id) / [`set_server_side_kms_key_id(Option<String>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_server_side_kms_key_id):<br>required: **false**<br><p>Provides the identifier of the KMS key key used to encrypt model data by Amazon Lookout for Equipment. </p><br>
    ///   - [`tags(Tag)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_tags):<br>required: **false**<br><p>The tags associated with the machine learning model to be created. </p><br>
    ///   - [`inference_data_import_strategy(InferenceDataImportStrategy)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::inference_data_import_strategy) / [`set_inference_data_import_strategy(Option<InferenceDataImportStrategy>)`](crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::set_inference_data_import_strategy):<br>required: **false**<br><p>Indicates how to import the accumulated inference data when a model version is imported. The possible values are as follows:</p>  <ul>   <li> <p>NO_IMPORT – Don't import the data.</p> </li>   <li> <p>ADD_WHEN_EMPTY – Only import the data from the source model if there is no existing data in the target model.</p> </li>   <li> <p>OVERWRITE – Import the data from the source model and overwrite the existing data in the target model.</p> </li>  </ul><br>
    /// - On success, responds with [`ImportModelVersionOutput`](crate::operation::import_model_version::ImportModelVersionOutput) with field(s):
    ///   - [`model_name(Option<String>)`](crate::operation::import_model_version::ImportModelVersionOutput::model_name): <p>The name for the machine learning model.</p>
    ///   - [`model_arn(Option<String>)`](crate::operation::import_model_version::ImportModelVersionOutput::model_arn): <p>The Amazon Resource Name (ARN) of the model being created. </p>
    ///   - [`model_version_arn(Option<String>)`](crate::operation::import_model_version::ImportModelVersionOutput::model_version_arn): <p>The Amazon Resource Name (ARN) of the model version being created. </p>
    ///   - [`model_version(Option<i64>)`](crate::operation::import_model_version::ImportModelVersionOutput::model_version): <p>The version of the model being created.</p>
    ///   - [`status(Option<ModelVersionStatus>)`](crate::operation::import_model_version::ImportModelVersionOutput::status): <p>The status of the <code>ImportModelVersion</code> operation. </p>
    /// - On failure, responds with [`SdkError<ImportModelVersionError>`](crate::operation::import_model_version::ImportModelVersionError)
    pub fn import_model_version(&self) -> crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder {
        crate::operation::import_model_version::builders::ImportModelVersionFluentBuilder::new(self.handle.clone())
    }
}
