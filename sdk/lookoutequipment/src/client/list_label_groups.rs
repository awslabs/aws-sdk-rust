// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLabelGroups`](crate::client::fluent_builders::ListLabelGroups) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListLabelGroups::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`label_group_name_begins_with(impl Into<String>)`](crate::client::fluent_builders::ListLabelGroups::label_group_name_begins_with) / [`set_label_group_name_begins_with(Option<String>)`](crate::client::fluent_builders::ListLabelGroups::set_label_group_name_begins_with): <p> The beginning of the name of the label groups to be listed. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLabelGroups::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLabelGroups::set_next_token): <p> An opaque pagination token indicating where to continue the listing of label groups. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLabelGroups::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLabelGroups::set_max_results): <p> Specifies the maximum number of label groups to list. </p>
    /// - On success, responds with [`ListLabelGroupsOutput`](crate::output::ListLabelGroupsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListLabelGroupsOutput::next_token): <p> An opaque pagination token indicating where to continue the listing of label groups. </p>
    ///   - [`label_group_summaries(Option<Vec<LabelGroupSummary>>)`](crate::output::ListLabelGroupsOutput::label_group_summaries): <p> A summary of the label groups. </p>
    /// - On failure, responds with [`SdkError<ListLabelGroupsError>`](crate::error::ListLabelGroupsError)
    pub fn list_label_groups(&self) -> crate::client::fluent_builders::ListLabelGroups {
        crate::client::fluent_builders::ListLabelGroups::new(self.handle.clone())
    }
}
