// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDataIngestionJobOutput {
    /// <p>Indicates the job ID of the data ingestion job. </p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job. </p>
    #[doc(hidden)]
    pub dataset_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    #[doc(hidden)]
    pub ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested. </p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The time at which the data ingestion job was created. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates the status of the <code>DataIngestionJob</code> operation. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::IngestionJobStatus>,
    /// <p>Specifies the reason for failure when a data ingestion job has failed. </p>
    #[doc(hidden)]
    pub failed_reason: std::option::Option<std::string::String>,
    /// <p> Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    #[doc(hidden)]
    pub data_quality_summary: std::option::Option<crate::types::DataQualitySummary>,
    /// <p>Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.</p>
    #[doc(hidden)]
    pub ingested_files_summary: std::option::Option<crate::types::IngestedFilesSummary>,
    /// <p> Provides details about status of the ingestion job that is currently in progress. </p>
    #[doc(hidden)]
    pub status_detail: std::option::Option<std::string::String>,
    /// <p> Indicates the size of the ingested dataset. </p>
    #[doc(hidden)]
    pub ingested_data_size: std::option::Option<i64>,
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    #[doc(hidden)]
    pub data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    #[doc(hidden)]
    pub data_end_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDataIngestionJobOutput {
    /// <p>Indicates the job ID of the data ingestion job. </p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job. </p>
    pub fn dataset_arn(&self) -> std::option::Option<&str> {
        self.dataset_arn.as_deref()
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn ingestion_input_configuration(
        &self,
    ) -> std::option::Option<&crate::types::IngestionInputConfiguration> {
        self.ingestion_input_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested. </p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The time at which the data ingestion job was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>Indicates the status of the <code>DataIngestionJob</code> operation. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::IngestionJobStatus> {
        self.status.as_ref()
    }
    /// <p>Specifies the reason for failure when a data ingestion job has failed. </p>
    pub fn failed_reason(&self) -> std::option::Option<&str> {
        self.failed_reason.as_deref()
    }
    /// <p> Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn data_quality_summary(&self) -> std::option::Option<&crate::types::DataQualitySummary> {
        self.data_quality_summary.as_ref()
    }
    /// <p>Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.</p>
    pub fn ingested_files_summary(
        &self,
    ) -> std::option::Option<&crate::types::IngestedFilesSummary> {
        self.ingested_files_summary.as_ref()
    }
    /// <p> Provides details about status of the ingestion job that is currently in progress. </p>
    pub fn status_detail(&self) -> std::option::Option<&str> {
        self.status_detail.as_deref()
    }
    /// <p> Indicates the size of the ingested dataset. </p>
    pub fn ingested_data_size(&self) -> std::option::Option<i64> {
        self.ingested_data_size
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn data_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_start_time.as_ref()
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn data_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.data_end_time.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDataIngestionJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDataIngestionJobOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDataIngestionJobOutput`](crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobOutput).
    pub fn builder() -> crate::operation::describe_data_ingestion_job::builders::DescribeDataIngestionJobOutputBuilder{
        crate::operation::describe_data_ingestion_job::builders::DescribeDataIngestionJobOutputBuilder::default()
    }
}

/// A builder for [`DescribeDataIngestionJobOutput`](crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDataIngestionJobOutputBuilder {
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) dataset_arn: std::option::Option<std::string::String>,
    pub(crate) ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::IngestionJobStatus>,
    pub(crate) failed_reason: std::option::Option<std::string::String>,
    pub(crate) data_quality_summary: std::option::Option<crate::types::DataQualitySummary>,
    pub(crate) ingested_files_summary: std::option::Option<crate::types::IngestedFilesSummary>,
    pub(crate) status_detail: std::option::Option<std::string::String>,
    pub(crate) ingested_data_size: std::option::Option<i64>,
    pub(crate) data_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) data_end_time: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl DescribeDataIngestionJobOutputBuilder {
    /// <p>Indicates the job ID of the data ingestion job. </p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>Indicates the job ID of the data ingestion job. </p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job. </p>
    pub fn dataset_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the dataset being used in the data ingestion job. </p>
    pub fn set_dataset_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_arn = input;
        self
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn ingestion_input_configuration(
        mut self,
        input: crate::types::IngestionInputConfiguration,
    ) -> Self {
        self.ingestion_input_configuration = Some(input);
        self
    }
    /// <p>Specifies the S3 location configuration for the data input for the data ingestion job. </p>
    pub fn set_ingestion_input_configuration(
        mut self,
        input: std::option::Option<crate::types::IngestionInputConfiguration>,
    ) -> Self {
        self.ingestion_input_configuration = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM role with permission to access the data source being ingested. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The time at which the data ingestion job was created. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time at which the data ingestion job was created. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>Indicates the status of the <code>DataIngestionJob</code> operation. </p>
    pub fn status(mut self, input: crate::types::IngestionJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of the <code>DataIngestionJob</code> operation. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::IngestionJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the reason for failure when a data ingestion job has failed. </p>
    pub fn failed_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failed_reason = Some(input.into());
        self
    }
    /// <p>Specifies the reason for failure when a data ingestion job has failed. </p>
    pub fn set_failed_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failed_reason = input;
        self
    }
    /// <p> Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn data_quality_summary(mut self, input: crate::types::DataQualitySummary) -> Self {
        self.data_quality_summary = Some(input);
        self
    }
    /// <p> Gives statistics about a completed ingestion job. These statistics primarily relate to quantifying incorrect data such as MissingCompleteSensorData, MissingSensorData, UnsupportedDateFormats, InsufficientSensorData, and DuplicateTimeStamps. </p>
    pub fn set_data_quality_summary(
        mut self,
        input: std::option::Option<crate::types::DataQualitySummary>,
    ) -> Self {
        self.data_quality_summary = input;
        self
    }
    /// <p>Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.</p>
    pub fn ingested_files_summary(mut self, input: crate::types::IngestedFilesSummary) -> Self {
        self.ingested_files_summary = Some(input);
        self
    }
    /// <p>Gives statistics about how many files have been ingested, and which files have not been ingested, for a particular ingestion job.</p>
    pub fn set_ingested_files_summary(
        mut self,
        input: std::option::Option<crate::types::IngestedFilesSummary>,
    ) -> Self {
        self.ingested_files_summary = input;
        self
    }
    /// <p> Provides details about status of the ingestion job that is currently in progress. </p>
    pub fn status_detail(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_detail = Some(input.into());
        self
    }
    /// <p> Provides details about status of the ingestion job that is currently in progress. </p>
    pub fn set_status_detail(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_detail = input;
        self
    }
    /// <p> Indicates the size of the ingested dataset. </p>
    pub fn ingested_data_size(mut self, input: i64) -> Self {
        self.ingested_data_size = Some(input);
        self
    }
    /// <p> Indicates the size of the ingested dataset. </p>
    pub fn set_ingested_data_size(mut self, input: std::option::Option<i64>) -> Self {
        self.ingested_data_size = input;
        self
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn data_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_start_time = Some(input);
        self
    }
    /// <p> Indicates the earliest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn set_data_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_start_time = input;
        self
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn data_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.data_end_time = Some(input);
        self
    }
    /// <p> Indicates the latest timestamp corresponding to data that was successfully ingested during this specific ingestion job. </p>
    pub fn set_data_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.data_end_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDataIngestionJobOutput`](crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobOutput {
        crate::operation::describe_data_ingestion_job::DescribeDataIngestionJobOutput {
            job_id: self.job_id,
            dataset_arn: self.dataset_arn,
            ingestion_input_configuration: self.ingestion_input_configuration,
            role_arn: self.role_arn,
            created_at: self.created_at,
            status: self.status,
            failed_reason: self.failed_reason,
            data_quality_summary: self.data_quality_summary,
            ingested_files_summary: self.ingested_files_summary,
            status_detail: self.status_detail,
            ingested_data_size: self.ingested_data_size,
            data_start_time: self.data_start_time,
            data_end_time: self.data_end_time,
            _request_id: self._request_id,
        }
    }
}
