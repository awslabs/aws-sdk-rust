// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDataIngestionJobsInput {
    /// <p>The name of the dataset being used for the data ingestion job. </p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>An opaque pagination token indicating where to continue the listing of data ingestion jobs. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p> Specifies the maximum number of data ingestion jobs to list. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Indicates the status of the data ingestion job. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::IngestionJobStatus>,
}
impl ListDataIngestionJobsInput {
    /// <p>The name of the dataset being used for the data ingestion job. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>An opaque pagination token indicating where to continue the listing of data ingestion jobs. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> Specifies the maximum number of data ingestion jobs to list. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Indicates the status of the data ingestion job. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::IngestionJobStatus> {
        self.status.as_ref()
    }
}
impl ListDataIngestionJobsInput {
    /// Creates a new builder-style object to manufacture [`ListDataIngestionJobsInput`](crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsInput).
    pub fn builder(
    ) -> crate::operation::list_data_ingestion_jobs::builders::ListDataIngestionJobsInputBuilder
    {
        crate::operation::list_data_ingestion_jobs::builders::ListDataIngestionJobsInputBuilder::default()
    }
}

/// A builder for [`ListDataIngestionJobsInput`](crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDataIngestionJobsInputBuilder {
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::IngestionJobStatus>,
}
impl ListDataIngestionJobsInputBuilder {
    /// <p>The name of the dataset being used for the data ingestion job. </p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset being used for the data ingestion job. </p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>An opaque pagination token indicating where to continue the listing of data ingestion jobs. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>An opaque pagination token indicating where to continue the listing of data ingestion jobs. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> Specifies the maximum number of data ingestion jobs to list. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> Specifies the maximum number of data ingestion jobs to list. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Indicates the status of the data ingestion job. </p>
    pub fn status(mut self, input: crate::types::IngestionJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of the data ingestion job. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::IngestionJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDataIngestionJobsInput`](crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_data_ingestion_jobs::ListDataIngestionJobsInput {
                dataset_name: self.dataset_name,
                next_token: self.next_token,
                max_results: self.max_results,
                status: self.status,
            },
        )
    }
}
