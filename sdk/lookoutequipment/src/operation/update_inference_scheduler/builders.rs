// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_inference_scheduler::_update_inference_scheduler_output::UpdateInferenceSchedulerOutputBuilder;

pub use crate::operation::update_inference_scheduler::_update_inference_scheduler_input::UpdateInferenceSchedulerInputBuilder;

impl UpdateInferenceSchedulerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_inference_scheduler();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateInferenceScheduler`.
///
/// <p>Updates an inference scheduler. </p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateInferenceSchedulerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_inference_scheduler::builders::UpdateInferenceSchedulerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerOutput,
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
    > for UpdateInferenceSchedulerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerOutput,
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateInferenceSchedulerFluentBuilder {
    /// Creates a new `UpdateInferenceScheduler`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateInferenceScheduler as a reference.
    pub fn as_input(&self) -> &crate::operation::update_inference_scheduler::builders::UpdateInferenceSchedulerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_inference_scheduler::UpdateInferenceScheduler::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_inference_scheduler::UpdateInferenceScheduler::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerOutput,
        crate::operation::update_inference_scheduler::UpdateInferenceSchedulerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the inference scheduler to be updated. </p>
    pub fn inference_scheduler_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.inference_scheduler_name(input.into());
        self
    }
    /// <p>The name of the inference scheduler to be updated. </p>
    pub fn set_inference_scheduler_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_inference_scheduler_name(input);
        self
    }
    /// <p>The name of the inference scheduler to be updated. </p>
    pub fn get_inference_scheduler_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_inference_scheduler_name()
    }
    /// <p> A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.</p>
    pub fn data_delay_offset_in_minutes(mut self, input: i64) -> Self {
        self.inner = self.inner.data_delay_offset_in_minutes(input);
        self
    }
    /// <p> A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.</p>
    pub fn set_data_delay_offset_in_minutes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_data_delay_offset_in_minutes(input);
        self
    }
    /// <p> A period of time (in minutes) by which inference on the data is delayed after the data starts. For instance, if you select an offset delay time of five minutes, inference will not begin on the data until the first data measurement after the five minute mark. For example, if five minutes is selected, the inference scheduler will wake up at the configured frequency with the additional five minute delay time to check the customer S3 bucket. The customer can upload data at the same frequency and they don't need to stop and restart the scheduler when uploading new data.</p>
    pub fn get_data_delay_offset_in_minutes(&self) -> &::std::option::Option<i64> {
        self.inner.get_data_delay_offset_in_minutes()
    }
    /// <p>How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes. </p>
    pub fn data_upload_frequency(mut self, input: crate::types::DataUploadFrequency) -> Self {
        self.inner = self.inner.data_upload_frequency(input);
        self
    }
    /// <p>How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes. </p>
    pub fn set_data_upload_frequency(mut self, input: ::std::option::Option<crate::types::DataUploadFrequency>) -> Self {
        self.inner = self.inner.set_data_upload_frequency(input);
        self
    }
    /// <p>How often data is uploaded to the source S3 bucket for the input data. The value chosen is the length of time between data uploads. For instance, if you select 5 minutes, Amazon Lookout for Equipment will upload the real-time data to the source bucket once every 5 minutes. This frequency also determines how often Amazon Lookout for Equipment starts a scheduled inference on your data. In this example, it starts once every 5 minutes. </p>
    pub fn get_data_upload_frequency(&self) -> &::std::option::Option<crate::types::DataUploadFrequency> {
        self.inner.get_data_upload_frequency()
    }
    /// <p> Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location. </p>
    pub fn data_input_configuration(mut self, input: crate::types::InferenceInputConfiguration) -> Self {
        self.inner = self.inner.data_input_configuration(input);
        self
    }
    /// <p> Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location. </p>
    pub fn set_data_input_configuration(mut self, input: ::std::option::Option<crate::types::InferenceInputConfiguration>) -> Self {
        self.inner = self.inner.set_data_input_configuration(input);
        self
    }
    /// <p> Specifies information for the input data for the inference scheduler, including delimiter, format, and dataset location. </p>
    pub fn get_data_input_configuration(&self) -> &::std::option::Option<crate::types::InferenceInputConfiguration> {
        self.inner.get_data_input_configuration()
    }
    /// <p> Specifies information for the output results from the inference scheduler, including the output S3 location. </p>
    pub fn data_output_configuration(mut self, input: crate::types::InferenceOutputConfiguration) -> Self {
        self.inner = self.inner.data_output_configuration(input);
        self
    }
    /// <p> Specifies information for the output results from the inference scheduler, including the output S3 location. </p>
    pub fn set_data_output_configuration(mut self, input: ::std::option::Option<crate::types::InferenceOutputConfiguration>) -> Self {
        self.inner = self.inner.set_data_output_configuration(input);
        self
    }
    /// <p> Specifies information for the output results from the inference scheduler, including the output S3 location. </p>
    pub fn get_data_output_configuration(&self) -> &::std::option::Option<crate::types::InferenceOutputConfiguration> {
        self.inner.get_data_output_configuration()
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler. </p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler. </p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the inference scheduler. </p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
}
