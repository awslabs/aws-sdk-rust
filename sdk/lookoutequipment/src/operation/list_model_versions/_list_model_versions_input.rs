// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListModelVersionsInput {
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>Filter the results based on the current status of the model version.</p>
    pub status: ::std::option::Option<crate::types::ModelVersionStatus>,
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub source_type: ::std::option::Option<crate::types::ModelVersionSourceType>,
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub created_at_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub created_at_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub max_model_version: ::std::option::Option<i64>,
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub min_model_version: ::std::option::Option<i64>,
}
impl ListModelVersionsInput {
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ModelVersionStatus> {
        self.status.as_ref()
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn source_type(&self) -> ::std::option::Option<&crate::types::ModelVersionSourceType> {
        self.source_type.as_ref()
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn created_at_end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at_end_time.as_ref()
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn created_at_start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at_start_time.as_ref()
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn max_model_version(&self) -> ::std::option::Option<i64> {
        self.max_model_version
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn min_model_version(&self) -> ::std::option::Option<i64> {
        self.min_model_version
    }
}
impl ListModelVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListModelVersionsInput`](crate::operation::list_model_versions::ListModelVersionsInput).
    pub fn builder() -> crate::operation::list_model_versions::builders::ListModelVersionsInputBuilder {
        crate::operation::list_model_versions::builders::ListModelVersionsInputBuilder::default()
    }
}

/// A builder for [`ListModelVersionsInput`](crate::operation::list_model_versions::ListModelVersionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListModelVersionsInputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::ModelVersionStatus>,
    pub(crate) source_type: ::std::option::Option<crate::types::ModelVersionSourceType>,
    pub(crate) created_at_end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_at_start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_model_version: ::std::option::Option<i64>,
    pub(crate) min_model_version: ::std::option::Option<i64>,
}
impl ListModelVersionsInputBuilder {
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    /// This field is required.
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn status(mut self, input: crate::types::ModelVersionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelVersionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelVersionStatus> {
        &self.status
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn source_type(mut self, input: crate::types::ModelVersionSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::ModelVersionSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::ModelVersionSourceType> {
        &self.source_type
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn created_at_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at_end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn set_created_at_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at_end_time = input;
        self
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn get_created_at_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at_end_time
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn created_at_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at_start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn set_created_at_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at_start_time = input;
        self
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn get_created_at_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at_start_time
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn max_model_version(mut self, input: i64) -> Self {
        self.max_model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn set_max_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_model_version = input;
        self
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn get_max_model_version(&self) -> &::std::option::Option<i64> {
        &self.max_model_version
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn min_model_version(mut self, input: i64) -> Self {
        self.min_model_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn set_min_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.min_model_version = input;
        self
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn get_min_model_version(&self) -> &::std::option::Option<i64> {
        &self.min_model_version
    }
    /// Consumes the builder and constructs a [`ListModelVersionsInput`](crate::operation::list_model_versions::ListModelVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_model_versions::ListModelVersionsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_model_versions::ListModelVersionsInput {
            model_name: self.model_name,
            next_token: self.next_token,
            max_results: self.max_results,
            status: self.status,
            source_type: self.source_type,
            created_at_end_time: self.created_at_end_time,
            created_at_start_time: self.created_at_start_time,
            max_model_version: self.max_model_version,
            min_model_version: self.min_model_version,
        })
    }
}
