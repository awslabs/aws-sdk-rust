// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_model_versions::_list_model_versions_output::ListModelVersionsOutputBuilder;

pub use crate::operation::list_model_versions::_list_model_versions_input::ListModelVersionsInputBuilder;

impl ListModelVersionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_model_versions::ListModelVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_model_versions::ListModelVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_model_versions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListModelVersions`.
///
/// <p>Generates a list of all model versions for a given model, including the model version, model version ARN, and status. To list a subset of versions, use the <code>MaxModelVersion</code> and <code>MinModelVersion</code> fields.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListModelVersionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_model_versions::builders::ListModelVersionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_model_versions::ListModelVersionsOutput,
        crate::operation::list_model_versions::ListModelVersionsError,
    > for ListModelVersionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_model_versions::ListModelVersionsOutput,
            crate::operation::list_model_versions::ListModelVersionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListModelVersionsFluentBuilder {
    /// Creates a new `ListModelVersions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListModelVersions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_model_versions::builders::ListModelVersionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_model_versions::ListModelVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_model_versions::ListModelVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_model_versions::ListModelVersions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_model_versions::ListModelVersions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_model_versions::ListModelVersionsOutput,
        crate::operation::list_model_versions::ListModelVersionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_model_versions::paginator::ListModelVersionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_model_versions::paginator::ListModelVersionsPaginator {
        crate::operation::list_model_versions::paginator::ListModelVersionsPaginator::new(self.handle, self.inner)
    }
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.model_name(input.into());
        self
    }
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_model_name(input);
        self
    }
    /// <p>Then name of the machine learning model for which the model versions are to be listed.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_model_name()
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>If the total number of results exceeds the limit that the response can display, the response returns an opaque pagination token indicating where to continue the listing of machine learning model versions. Use this token in the <code>NextToken</code> field in the request to list the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Specifies the maximum number of machine learning model versions to list.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_results()
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn status(mut self, input: crate::types::ModelVersionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ModelVersionStatus>) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p>Filter the results based on the current status of the model version.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ModelVersionStatus> {
        self.inner.get_status()
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn source_type(mut self, input: crate::types::ModelVersionSourceType) -> Self {
        self.inner = self.inner.source_type(input);
        self
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::ModelVersionSourceType>) -> Self {
        self.inner = self.inner.set_source_type(input);
        self
    }
    /// <p>Filter the results based on the way the model version was generated.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::ModelVersionSourceType> {
        self.inner.get_source_type()
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn created_at_end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_at_end_time(input);
        self
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn set_created_at_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_created_at_end_time(input);
        self
    }
    /// <p>Filter results to return all the model versions created before this time.</p>
    pub fn get_created_at_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_created_at_end_time()
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn created_at_start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.created_at_start_time(input);
        self
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn set_created_at_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_created_at_start_time(input);
        self
    }
    /// <p>Filter results to return all the model versions created after this time.</p>
    pub fn get_created_at_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_created_at_start_time()
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn max_model_version(mut self, input: i64) -> Self {
        self.inner = self.inner.max_model_version(input);
        self
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn set_max_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_max_model_version(input);
        self
    }
    /// <p>Specifies the highest version of the model to return in the list.</p>
    pub fn get_max_model_version(&self) -> &::std::option::Option<i64> {
        self.inner.get_max_model_version()
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn min_model_version(mut self, input: i64) -> Self {
        self.inner = self.inner.min_model_version(input);
        self
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn set_min_model_version(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_min_model_version(input);
        self
    }
    /// <p>Specifies the lowest version of the model to return in the list.</p>
    pub fn get_min_model_version(&self) -> &::std::option::Option<i64> {
        self.inner.get_min_model_version()
    }
}
