// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateModelInput {
    /// <p>The name of the model to update.</p>
    pub model_name: ::std::option::Option<::std::string::String>,
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    /// <p>The ARN of the model to update.</p>
    pub role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateModelInput {
    /// <p>The name of the model to update.</p>
    pub fn model_name(&self) -> ::std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn labels_input_configuration(&self) -> ::std::option::Option<&crate::types::LabelsInputConfiguration> {
        self.labels_input_configuration.as_ref()
    }
    /// <p>The ARN of the model to update.</p>
    pub fn role_arn(&self) -> ::std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl UpdateModelInput {
    /// Creates a new builder-style object to manufacture [`UpdateModelInput`](crate::operation::update_model::UpdateModelInput).
    pub fn builder() -> crate::operation::update_model::builders::UpdateModelInputBuilder {
        crate::operation::update_model::builders::UpdateModelInputBuilder::default()
    }
}

/// A builder for [`UpdateModelInput`](crate::operation::update_model::UpdateModelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateModelInputBuilder {
    pub(crate) model_name: ::std::option::Option<::std::string::String>,
    pub(crate) labels_input_configuration: ::std::option::Option<crate::types::LabelsInputConfiguration>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
}
impl UpdateModelInputBuilder {
    /// <p>The name of the model to update.</p>
    /// This field is required.
    pub fn model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the model to update.</p>
    pub fn set_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>The name of the model to update.</p>
    pub fn get_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_name
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn labels_input_configuration(mut self, input: crate::types::LabelsInputConfiguration) -> Self {
        self.labels_input_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn set_labels_input_configuration(mut self, input: ::std::option::Option<crate::types::LabelsInputConfiguration>) -> Self {
        self.labels_input_configuration = input;
        self
    }
    /// <p>Contains the configuration information for the S3 location being used to hold label data. </p>
    pub fn get_labels_input_configuration(&self) -> &::std::option::Option<crate::types::LabelsInputConfiguration> {
        &self.labels_input_configuration
    }
    /// <p>The ARN of the model to update.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the model to update.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The ARN of the model to update.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// Consumes the builder and constructs a [`UpdateModelInput`](crate::operation::update_model::UpdateModelInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_model::UpdateModelInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_model::UpdateModelInput {
            model_name: self.model_name,
            labels_input_configuration: self.labels_input_configuration,
            role_arn: self.role_arn,
        })
    }
}
