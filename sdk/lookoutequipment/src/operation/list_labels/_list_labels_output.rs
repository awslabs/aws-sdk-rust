// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListLabelsOutput {
    /// <p> An opaque pagination token indicating where to continue the listing of datasets. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> A summary of the items in the label group. </p>
    pub label_summaries: ::std::option::Option<::std::vec::Vec<crate::types::LabelSummary>>,
    _request_id: Option<String>,
}
impl ListLabelsOutput {
    /// <p> An opaque pagination token indicating where to continue the listing of datasets. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> A summary of the items in the label group. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.label_summaries.is_none()`.
    pub fn label_summaries(&self) -> &[crate::types::LabelSummary] {
        self.label_summaries.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListLabelsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLabelsOutput {
    /// Creates a new builder-style object to manufacture [`ListLabelsOutput`](crate::operation::list_labels::ListLabelsOutput).
    pub fn builder() -> crate::operation::list_labels::builders::ListLabelsOutputBuilder {
        crate::operation::list_labels::builders::ListLabelsOutputBuilder::default()
    }
}

/// A builder for [`ListLabelsOutput`](crate::operation::list_labels::ListLabelsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListLabelsOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) label_summaries: ::std::option::Option<::std::vec::Vec<crate::types::LabelSummary>>,
    _request_id: Option<String>,
}
impl ListLabelsOutputBuilder {
    /// <p> An opaque pagination token indicating where to continue the listing of datasets. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An opaque pagination token indicating where to continue the listing of datasets. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> An opaque pagination token indicating where to continue the listing of datasets. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `label_summaries`.
    ///
    /// To override the contents of this collection use [`set_label_summaries`](Self::set_label_summaries).
    ///
    /// <p> A summary of the items in the label group. </p>
    pub fn label_summaries(mut self, input: crate::types::LabelSummary) -> Self {
        let mut v = self.label_summaries.unwrap_or_default();
        v.push(input);
        self.label_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p> A summary of the items in the label group. </p>
    pub fn set_label_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LabelSummary>>) -> Self {
        self.label_summaries = input;
        self
    }
    /// <p> A summary of the items in the label group. </p>
    pub fn get_label_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LabelSummary>> {
        &self.label_summaries
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListLabelsOutput`](crate::operation::list_labels::ListLabelsOutput).
    pub fn build(self) -> crate::operation::list_labels::ListLabelsOutput {
        crate::operation::list_labels::ListLabelsOutput {
            next_token: self.next_token,
            label_summaries: self.label_summaries,
            _request_id: self._request_id,
        }
    }
}
