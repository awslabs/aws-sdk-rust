// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDatasetInput {
    /// <p>The name of the dataset being created. </p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    #[doc(hidden)]
    pub dataset_schema: std::option::Option<crate::types::DatasetSchema>,
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    #[doc(hidden)]
    pub server_side_kms_key_id: std::option::Option<std::string::String>,
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Any tags associated with the ingested data described in the dataset. </p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDatasetInput {
    /// <p>The name of the dataset being created. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn dataset_schema(&self) -> std::option::Option<&crate::types::DatasetSchema> {
        self.dataset_schema.as_ref()
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(&self) -> std::option::Option<&str> {
        self.server_side_kms_key_id.as_deref()
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Any tags associated with the ingested data described in the dataset. </p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateDatasetInput {
    /// Creates a new builder-style object to manufacture [`CreateDatasetInput`](crate::operation::create_dataset::CreateDatasetInput).
    pub fn builder() -> crate::operation::create_dataset::builders::CreateDatasetInputBuilder {
        crate::operation::create_dataset::builders::CreateDatasetInputBuilder::default()
    }
}

/// A builder for [`CreateDatasetInput`](crate::operation::create_dataset::CreateDatasetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDatasetInputBuilder {
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) dataset_schema: std::option::Option<crate::types::DatasetSchema>,
    pub(crate) server_side_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDatasetInputBuilder {
    /// <p>The name of the dataset being created. </p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset being created. </p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn dataset_schema(mut self, input: crate::types::DatasetSchema) -> Self {
        self.dataset_schema = Some(input);
        self
    }
    /// <p>A JSON description of the data that is in each time series dataset, including names, column names, and data types. </p>
    pub fn set_dataset_schema(
        mut self,
        input: std::option::Option<crate::types::DatasetSchema>,
    ) -> Self {
        self.dataset_schema = input;
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn server_side_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.server_side_kms_key_id = Some(input.into());
        self
    }
    /// <p>Provides the identifier of the KMS key used to encrypt dataset data by Amazon Lookout for Equipment. </p>
    pub fn set_server_side_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.server_side_kms_key_id = input;
        self
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Any tags associated with the ingested data described in the dataset. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Any tags associated with the ingested data described in the dataset. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDatasetInput`](crate::operation::create_dataset::CreateDatasetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_dataset::CreateDatasetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_dataset::CreateDatasetInput {
            dataset_name: self.dataset_name,
            dataset_schema: self.dataset_schema,
            server_side_kms_key_id: self.server_side_kms_key_id,
            client_token: self.client_token,
            tags: self.tags,
        })
    }
}
