// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartDataIngestionJobInput {
    /// <p>The name of the dataset being used by the data ingestion job. </p>
    #[doc(hidden)]
    pub dataset_name: std::option::Option<std::string::String>,
    /// <p> Specifies information for the input data for the data ingestion job, including dataset S3 location. </p>
    #[doc(hidden)]
    pub ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job. </p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl StartDataIngestionJobInput {
    /// <p>The name of the dataset being used by the data ingestion job. </p>
    pub fn dataset_name(&self) -> std::option::Option<&str> {
        self.dataset_name.as_deref()
    }
    /// <p> Specifies information for the input data for the data ingestion job, including dataset S3 location. </p>
    pub fn ingestion_input_configuration(
        &self,
    ) -> std::option::Option<&crate::types::IngestionInputConfiguration> {
        self.ingestion_input_configuration.as_ref()
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job. </p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartDataIngestionJobInput {
    /// Creates a new builder-style object to manufacture [`StartDataIngestionJobInput`](crate::operation::start_data_ingestion_job::StartDataIngestionJobInput).
    pub fn builder(
    ) -> crate::operation::start_data_ingestion_job::builders::StartDataIngestionJobInputBuilder
    {
        crate::operation::start_data_ingestion_job::builders::StartDataIngestionJobInputBuilder::default()
    }
}

/// A builder for [`StartDataIngestionJobInput`](crate::operation::start_data_ingestion_job::StartDataIngestionJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartDataIngestionJobInputBuilder {
    pub(crate) dataset_name: std::option::Option<std::string::String>,
    pub(crate) ingestion_input_configuration:
        std::option::Option<crate::types::IngestionInputConfiguration>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl StartDataIngestionJobInputBuilder {
    /// <p>The name of the dataset being used by the data ingestion job. </p>
    pub fn dataset_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.dataset_name = Some(input.into());
        self
    }
    /// <p>The name of the dataset being used by the data ingestion job. </p>
    pub fn set_dataset_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dataset_name = input;
        self
    }
    /// <p> Specifies information for the input data for the data ingestion job, including dataset S3 location. </p>
    pub fn ingestion_input_configuration(
        mut self,
        input: crate::types::IngestionInputConfiguration,
    ) -> Self {
        self.ingestion_input_configuration = Some(input);
        self
    }
    /// <p> Specifies information for the input data for the data ingestion job, including dataset S3 location. </p>
    pub fn set_ingestion_input_configuration(
        mut self,
        input: std::option::Option<crate::types::IngestionInputConfiguration>,
    ) -> Self {
        self.ingestion_input_configuration = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job. </p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of a role with permission to access the data source for the data ingestion job. </p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p> A unique identifier for the request. If you do not set the client request token, Amazon Lookout for Equipment generates one. </p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`StartDataIngestionJobInput`](crate::operation::start_data_ingestion_job::StartDataIngestionJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_data_ingestion_job::StartDataIngestionJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_data_ingestion_job::StartDataIngestionJobInput {
                dataset_name: self.dataset_name,
                ingestion_input_configuration: self.ingestion_input_configuration,
                role_arn: self.role_arn,
                client_token: self.client_token,
            },
        )
    }
}
