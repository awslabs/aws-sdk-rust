// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_label::_delete_label_output::DeleteLabelOutputBuilder;

pub use crate::operation::delete_label::_delete_label_input::DeleteLabelInputBuilder;

/// Fluent builder constructing a request to `DeleteLabel`.
///
/// <p> Deletes a label. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLabelFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_label::builders::DeleteLabelInputBuilder,
}
impl DeleteLabelFluentBuilder {
    /// Creates a new `DeleteLabel`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_label::DeleteLabel,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::delete_label::DeleteLabelError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_label::DeleteLabelOutput,
        aws_smithy_http::result::SdkError<crate::operation::delete_label::DeleteLabelError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the label group that contains the label that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data. </p>
    pub fn label_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.label_group_name(input.into());
        self
    }
    /// <p> The name of the label group that contains the label that you want to delete. Data in this field will be retained for service usage. Follow best practices for the security of your data. </p>
    pub fn set_label_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_label_group_name(input);
        self
    }
    /// <p> The ID of the label that you want to delete. </p>
    pub fn label_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.label_id(input.into());
        self
    }
    /// <p> The ID of the label that you want to delete. </p>
    pub fn set_label_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_label_id(input);
        self
    }
}
